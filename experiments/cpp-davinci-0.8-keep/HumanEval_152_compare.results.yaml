language: cpp
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> answer;\n  for(int i = 0; i < game.size(); i++){\n    long\
    \ diff = abs(game[i] - guess[i]);\n    answer.push_back(diff);\n  }\n  return\
    \ answer;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tlong size = game.size();\n\tlong i = 0;\n\tstd::vector<long> result(size);\n\
    \tfor (i = 0; i < size; i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long>output;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\toutput.push_back(game[i]\
    \ - guess[i]);\n\t}\n\tfor (int i = 0; i < output.size(); i++) {\n\t\tif (output[i]\
    \ < 0)\n\t\t\toutput[i] = -1 * output[i];\n\t}\n\treturn output;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(game.size());\n  for (int i = 0; i < game.size();\
    \ i++) {\n    long diff = game[i] - guess[i];\n    result[i] = diff < 0 ? -diff\
    \ : diff;\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tlong sz = game.size();\n\tstd::vector<long> vec(sz);\n\tfor (long i = 0; i <\
    \ sz; i++) {\n\t\tvec[i] = game[i] - guess[i];\n\t\tif (vec[i] < 0)\n\t\t\tvec[i]\
    \ *= -1;\n\t}\n\treturn vec;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(game.size());\n  for (int i = 0; i < game.size();\
    \ i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int min = 0;\n    int max = 0;\n    std::vector<long> vec;\n    for(unsigned\
    \ int i = 0; i < game.size(); i++){\n        if(guess[i] <= game[i]){\n      \
    \      min = guess[i];\n            max = game[i];\n        }\n        else if(guess[i]\
    \ > game[i]){\n            min = game[i];\n            max = guess[i];\n     \
    \   }\n        vec.push_back(max - min);\n    }\n    return vec;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] == guess[i]){\n            res.push_back(0);\n        }\n     \
    \   else{\n            res.push_back(abs(game[i] - guess[i]));\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(guess.size());\n  for (int i = 0; i < guess.size();\
    \ i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> res;\n  for(long i = 0; i < game.size(); i++){\n    res.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // this is just a stub\n  // auto i = 0;\n  // while(i<game.size()){\n  //\
    \     game[i] = game[i] - guess[i];\n  //     if(game[i]<0){\n  //         game[i]\
    \ = -game[i];\n  //     }\n  //     i++;\n  // }\n  for(auto i = 0; i<game.size();\
    \ i++){\n    game[i] = std::abs(game[i] - guess[i]);\n  }\n  return game;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    //1st case, this is what the site wants\n    std::vector<long> result;\n\
    \    for(int i = 0; i < game.size(); ++i){\n        if(game[i] - guess[i] < 0){\n\
    \            result.push_back(guess[i] - game[i]);\n        }else{\n         \
    \   result.push_back(game[i] - guess[i]);\n        }\n    }\n    return result;\n\
    \    //2nd case, this is what I want\n    //std::vector<long> result;\n    //for(int\
    \ i = 0; i < game.size(); ++i){\n    //    result.push_back(abs(game[i] - guess[i]));\n\
    \    //}\n    //return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] != guess[i])\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t\
    else\n\t\t\tresult.push_back(0);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tint size = game.size();\n\tstd::vector<long> result(size);\n\tfor (int i = 0;\
    \ i < size; i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult[i] = 0;\n\t\t\
    }\n\t\telse {\n\t\t\tresult[i] = std::abs(game[i] - guess[i]);\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // TODO: complete this function\n  std::vector<long> res;\n  for(int i = 0;\
    \ i < game.size(); i++){\n    res.push_back(std::abs(game[i] - guess[i]));\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> diff;\n  for(int i = 0; i < game.size(); i++){\n    diff.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return diff;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] != guess[i]) {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\
    \t}\n\t\telse {\n\t\t\tresult.push_back(0);\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tint len = game.size();\n\tstd::vector<long> output;\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\toutput.push_back(0);\n\t\t}\n\t\
    \telse {\n\t\t\toutput.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn\
    \ output;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> r;\n    std::transform(game.begin(), game.end(), guess.begin(),\
    \ std::back_inserter(r),\n      [](auto a, auto b) { return abs(a - b); });\n\
    \    return r;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int size = game.size();\n    std::vector<long> result(size);\n    for(int\
    \ i = 0; i < size; i++){\n        result[i] = abs(game[i] - guess[i]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t// if(game.size() != guess.size()) assert(0);\n\t// std::vector<long> ans;\n\
    \t// for(int i = 0; i < game.size(); i++) {\n\t// \tif(game[i] == guess[i]) ans.push_back(0);\n\
    \t// \telse ans.push_back(abs(game[i] - guess[i]));\n\t// }\n\t// return ans;\n\
    \tint i = 0;\n\twhile(i < game.size()) {\n\t\tif(game[i] == guess[i]) {\n\t\t\t\
    game.erase(game.begin() + i);\n\t\t\tguess.erase(guess.begin() + i);\n\t\t}\n\t\
    \telse i++;\n\t}\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tgame[i] = abs(game[i]\
    \ - guess[i]);\n\t}\n\treturn game;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpcxphtztp: /tmp/tmpcxphtztp.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108986
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    result.push_back(std::abs(game[i]\
    \ - guess[i]));\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tlong\
    \ diff = std::abs(game[i] - guess[i]);\n\t\tresult.push_back(diff);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> guess_results;\n\tfor (int i = 0; i < game.size(); i++) {\n\
    \t\tguess_results.push_back(std::abs(game[i] - guess[i]));\n\t}\n\treturn guess_results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> tmp;\n    std::transform(game.begin(), game.end(), guess.begin(),\
    \ std::back_inserter(tmp), [](long a, long b) { return std::abs(a - b); });\n\
    \    return tmp;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int size = game.size();\n    std::vector<long> result;\n    for(int i = 0;\
    \ i < size; i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n\
    \        }else{\n            result.push_back(abs(game[i]-guess[i]));\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> out;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] == guess[i]){\n            out.push_back(0);\n        }else{\n\
    \            out.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  for (int i = 0; i < game.size(); i++) {\n    game[i] = std::abs(game[i] - guess[i]);\n\
    \  }\n  return game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // initialize output vector\n  std::vector<long> output;\n  // iterate through\
    \ vectors and calc abs difference\n  for (long i = 0; i < game.size(); i++) {\n\
    \    output.push_back(abs(game[i] - guess[i]));\n  }\n  return output;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    if(game.size() == guess.size()){\n       \
    \ for(int i = 0; i < game.size(); i++){\n            if(game[i] == guess[i]){\n\
    \                result.push_back(0);\n            }\n            else{\n    \
    \            result.push_back(abs(game[i] - guess[i]));\n            }\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result(game.size());\n\t//iterate through both vectors and\
    \ subtract the number at current index\n\t//from guess vector from number at current\
    \ index from game vector\n\t//then set result of current index to the absolute\
    \ value of that value\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult[i]\
    \ = abs(game[i] - guess[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int size = game.size();\n    std::vector<long> res;\n    for(int i = 0; i\
    \ < size; i++){\n        res.push_back(abs(game[i] - guess[i]));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t\n\tint size = game.size();\n\tstd::vector<long> result(size);\n\tfor (int i\
    \ = 0; i < size; i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> results;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\tresults.push_back(0);\n\t\t}\n\t\telse {\n\t\
    \t\tresults.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108986
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int len = game.size();\n    std::vector<long> ans(len);\n    for(int i =\
    \ 0; i < len; i++) {\n        ans[i] = std::abs(game[i] - guess[i]);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // your code here\n  std::vector<long> result;\n  for(int i = 0; i < game.size();\
    \ i++){\n    if(game[i] == guess[i]){\n      result.push_back(0);\n    }\n   \
    \ else{\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> res;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tres.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> res;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tres.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108986
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> ret;\n  for(int i = 0; i < game.size(); i++) {\n    long\
    \ a = std::abs(game[i] - guess[i]);\n    ret.push_back(a);\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t//Your code\n\tstd::vector<long> result;\n\tfor (long i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\
    \telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // [1,2,3,4,5,1]\n  // [1,2,3,4,2,-2]\n  //\n  // [0,0,0,0,3,3]\n  int size\
    \ = game.size();\n  std::vector<long> result;\n  int diff = 0;\n  for(int i =\
    \ 0; i < size; i++){\n    diff = abs(game[i] - guess[i]);\n    result.push_back(diff);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> ans;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i]\
    \ == guess[i]) ans.push_back(0);\n\t\telse ans.push_back(abs(game[i] - guess[i]));\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tint g = 0;\n\tint s = 0;\n\tstd::vector<long> result;\n\twhile (g != game.size())\
    \ {\n\t\tresult.push_back(abs(game[g] - guess[s]));\n\t\tg++;\n\t\ts++;\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108987
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    int i = 0;\n    while(i < game.size()){\n\
    \        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n        i++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \   std::vector<long> differences;\n   for(int i = 0; i < game.size(); i++){\n\
    \       long difference = abs(game[i] - guess[i]);\n       differences.push_back(difference);\n\
    \   }\n   return differences;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (unsigned i = 0; i < game.size(); i++) {\n\
    \    long diff = abs(game[i] - guess[i]);\n    result.push_back(diff);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long>diff(game.size());\n  std::transform(game.begin(), game.end(),\
    \ guess.begin(), diff.begin(), [](long x, long y) { return abs(x - y); });\n \
    \ return diff;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n  // the value is 0, and if not, the value\
    \ is the absolute difference between the guess and the score.\n  long len = game.size();\n\
    \  long i = 0;\n  std::vector<long> result(len);\n  while(i < len){\n    if(game[i]\
    \ == guess[i])\n      result[i] = 0;\n    else\n      result[i] = std::abs(game[i]\
    \ - guess[i]);\n    i++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    long\
    \ diff = std::abs(game[i] - guess[i]);\n    result.push_back(diff);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> difference;\n    for(int i = 0; i < game.size(); i++){\n\
    \        difference.push_back(std::abs(game[i] - guess[i]));\n    }\n    return\
    \ difference;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(int i = 0; i < game.size(); i++) {\n        if(game[i] != guess[i]) {\n\
    \            guess[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmps2lbmg3j: /tmp/tmps2lbmg3j.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> out;\n    if(game.size()==guess.size()){\n        for(long\
    \ i=0;i<game.size();i++){\n            out.push_back(std::abs(game[i]-guess[i]));\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  //your code here\n  std::vector<long> result;\n  for(unsigned i = 0; i < game.size();\
    \ i++){\n      result.push_back(abs(game[i] - guess[i]));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    if(game.size() != guess.size()) {\n      \
    \  return result;\n    }\n    int size = game.size();\n    long diff = 0;\n  \
    \  for(int i = 0; i < size; i++) {\n        diff = std::abs(game[i] - guess[i]);\n\
    \        result.push_back(diff);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    //basic validation\n    assert(game.size() == guess.size());\n    //return\
    \ vector\n    std::vector<long> result = {};\n    for(int i = 0; i < game.size();\
    \ i++){\n        //cout << \"game is : \" << game[i] << endl;\n        //cout\
    \ << \"guess is : \" << guess[i] << endl;\n        if(game[i] == guess[i]){\n\
    \            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> v;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ long diff = game[i] - guess[i];\n        if(diff < 0) diff *= -1;\n        v.push_back(diff);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> scores(guess.size());\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        scores[i] = guess[i] > game[i] ? guess[i] - game[i] : game[i]\
    \ - guess[i];\n    }\n    return scores;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // this is basically the same as the problem: \"make_negative\"\n    // except\
    \ here we need to only return the absolute value, and replace with 0\n    // if\
    \ the two numbers are the same, else we need to return the absolute\n    // difference\
    \ of the two numbers.\n    // this is just the binary difference operation and\
    \ it's negation, so we\n    // can do it by finding their intersection and then\
    \ subtracting their difference\n    // from the game vector.\n    std::vector<long>\
    \ result = game;\n    for (int i = 0; i < game.size(); i++) {\n        long g_i\
    \ = game[i];\n        long g_g = guess[i];\n        if (g_i != g_g) {\n      \
    \      result[i] = abs(g_i - g_g);\n        } else {\n            result[i] =\
    \ 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> ans;\n\tfor (long i = 0; i < game.size(); i++) {\n\t\tif (game[i]\
    \ < guess[i]) {\n\t\t\tans.push_back(guess[i] - game[i]);\n\t\t}\n\t\telse if\
    \ (game[i] > guess[i]) {\n\t\t\tans.push_back(game[i] - guess[i]);\n\t\t}\n\t\t\
    else {\n\t\t\tans.push_back(0);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> ret;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\tlong\
    \ t = game[i] - guess[i];\n\t\tif (t < 0) {\n\t\t\tt = 0 - t;\n\t\t}\n\t\tret.push_back(t);\n\
    \t}\n\treturn ret;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n\
    \    } else {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i])\n      result.push_back(0);\n    else\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tguess[i] = abs(game[i] - guess[i]);\n\
    \t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> v;\n  for(unsigned int i = 0; i < game.size(); i++) {\n \
    \   v.push_back(std::abs(game[i] - guess[i]));\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   res.push_back(abs(game[i] - guess[i]));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> out;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] == guess[i]){\n            out.push_back(0);\n        }\n     \
    \   else{\n            out.push_back(abs(game[i] - guess[i]));\n        }\n  \
    \  }\n    return out;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] > guess[i]) {\n\t\t\
    \tguess[i] = game[i] - guess[i];\n\t\t}\n\t\telse if (game[i] < guess[i]) {\n\t\
    \t\tguess[i] = guess[i] - game[i];\n\t\t}\n\t\telse {\n\t\t\tguess[i] = 0;\n\t\
    \t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> output;\n    for(long i = 0; i < game.size(); i++){\n \
    \       if(game[i] == guess[i]){\n            output.push_back(0);\n        }else{\n\
    \            output.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return output;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> scores;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] == guess[i]) {\n\t\t\tscores.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tscores.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn scores;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(unsigned int i = 0; i < game.size(); i++)\
    \ {\n        if(game[i] == guess[i])\n            result.push_back(0);\n     \
    \   else\n            result.push_back(abs(game[i] - guess[i]));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    long\
    \ answer = 0;\n    if (game[i] != guess[i]) {\n      answer = abs(game[i] - guess[i]);\n\
    \    }\n    result.push_back(answer);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(size_t i = 0; i < game.size(); i++) {\n        if(game[i] != guess[i])\n\
    \            guess[i] = abs(game[i] - guess[i]);\n    }\n    return guess;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpdv5wp4ma: /tmp/tmpdv5wp4ma.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  long score = 0;\n  for (int i = 0; i < game.size();\
    \ i++) {\n    score = abs(game[i] - guess[i]);\n    result.push_back(score);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(guess.size());\n  for (int i = 0; i < game.size();\
    \ i++) {\n    if (game[i] == guess[i]) {\n      result[i] = 0;\n    } else {\n\
    \      result[i] = abs(game[i] - guess[i]);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // TODO: Write some code here\n  int size = game.size();\n  std::vector<long>\
    \ res;\n  for(int i = 0; i < size; i++){\n    if(game[i] == guess[i]){\n     \
    \ res.push_back(0);\n    }\n    else{\n      long tmp = abs(game[i] - guess[i]);\n\
    \      res.push_back(tmp);\n    }\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> res;\n  for(int i = 0; i < game.size(); i++){\n    if(game[i]\
    \ == guess[i]){\n      res.push_back(0);\n    }\n    else{\n      res.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    std::vector<long> result(n);\n    for(int i = 0;\
    \ i < n; i++)\n        result[i] = std::abs(game[i] - guess[i]);\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\t// your code goes here\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tlong diff = guess[i] - game[i];\n\t\tif (diff < 0) {\n\t\t\tdiff\
    \ = -diff;\n\t\t}\n\t\tresult.push_back(diff);\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  for (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n \
    \     guess[i] = 0;\n    } else {\n      guess[i] = abs(game[i] - guess[i]);\n\
    \    }\n  }\n  return guess;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> output;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            output.push_back(0);\n        }\n\
    \        else{\n            output.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return output;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> ret(game.size());\n    for(int i = 0; i < game.size();\
    \ i++) {\n        ret[i] = std::abs(game[i] - guess[i]);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  int i = 0;\n  while (i < game.size()) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    i++;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    std::transform(game.begin(), game.end(), guess.begin(),\
    \ std::back_inserter(result),\n        [](long a, long b) { return std::abs(a\
    \ - b); });\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      long diff = abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108989
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result(game.size());\n\tfor (size_t i = 0; i < game.size();\
    \ i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    std::vector<long>res(n);\n    for(int i = 0; i\
    \ < n; i++){\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] < guess[i])\n            res.push_back(guess[i] - game[i]);\n \
    \       else\n            res.push_back(game[i] - guess[i]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      long diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(int i = 0; i < game.size(); i++) {\n        game[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return game;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> results;\n    for(int i = 0; i < game.size(); i++){\n \
    \       results.push_back(abs(game[i] - guess[i]));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  int i;\n  for(i=0;i<game.size();i++){\n    result.push_back(abs(game[i]-guess[i]));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(int i = 0; i < game.size(); i++) {\n        if(game[i] != guess[i]) {\n\
    \            guess[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmps2lbmg3j: /tmp/tmps2lbmg3j.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> diff;\n    // your code here\n    return diff;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp5rsefmyc: /tmp/tmp5rsefmyc.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> ret;\n    for(long i = 0; i < game.size(); i++) {\n   \
    \     ret.push_back(std::abs(game[i] - guess[i]));\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Your code here\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmplv9fj5rm: /tmp/tmplv9fj5rm.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] == guess[i]){\n            res.push_back(0);\n        }\n     \
    \   else{\n            res.push_back(abs(game[i] - guess[i]));\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> ret;\n    for(unsigned i = 0; i < game.size(); i++) {\n\
    \        if(game[i] == guess[i]) ret.push_back(0);\n        else ret.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return ret;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  long n = game.size();\n  std::vector<long> res;\n  for(long i = 0; i < n; i++)\
    \ {\n    res.push_back(abs(game[i] - guess[i]));\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    // code here\n    for(int i = 0; i < game.size();\
    \ i++){\n        long diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> v;\n\tfor (long i = 0; i < game.size(); i++) {\n\t\tif (game[i]\
    \ == guess[i]) {\n\t\t\tv.push_back(0);\n\t\t}\n\t\telse if (game[i] != guess[i])\
    \ {\n\t\t\tv.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn v;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> temp;\n  for(int i = 0; i < game.size(); i++){\n    if(game[i]\
    \ == guess[i]){\n      temp.push_back(0);\n    }\n    else{\n      temp.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return temp;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> results;\n    for(int i = 0; i < game.size(); i++){\n \
    \       results.push_back(std::abs(game[i] - guess[i]));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int index = 0;\n    std::vector<long> result;\n    for(auto it = game.begin();\
    \ it != game.end(); it++){\n        result.push_back(abs(guess[index] - *it));\n\
    \        index++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> dif;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   int x = guess[i] - game[i];\n        if(x < 0){\n            x = x * -1;\n\
    \        }\n        dif.push_back(x);\n    }\n    return dif;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(unsigned int i = 0; i < game.size(); i++) {\n        long a = game[i];\n\
    \        long b = guess[i];\n        if(a == b) {\n            game[i] = 0;\n\
    \        } else {\n            game[i] = abs(a - b);\n        }\n    }\n    return\
    \ game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108990
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long>difference;\n  for(int i=0;i<game.size();i++){\n    difference.push_back(abs(game[i]-guess[i]));\n\
    \  }\n  return difference;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> output;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            output.push_back(0);\n        }\n\
    \        else{\n            output.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return output;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  for (int i = 0; i < game.size(); i++) {\n    if (game[i] != guess[i]) {\n \
    \     guess[i] = abs(game[i] - guess[i]);\n    }\n  }\n  return guess;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp96a8ztxd: /tmp/tmp96a8ztxd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result;\n   \
    \ for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> s;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ s.push_back(abs(game[i] - guess[i]));\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> answer;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            answer.push_back(0);\n        }else{\n\
    \            answer.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return answer;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (size_t i = 0; i < game.size(); i++) {\n\t\tgame[i] = (game[i] > guess[i])\
    \ ? game[i] - guess[i] : guess[i] - game[i];\n\t}\n\treturn game;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> answer;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] == guess[i]) {\n\t\t\tanswer.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tanswer.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn answer;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> output;\n    for(long i = 0; i < game.size(); i++){\n \
    \       if(game[i] == guess[i]){\n            output.push_back(0);\n        }\n\
    \        else{\n            output.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return output;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int guess_size = guess.size();\n    std::vector<long> result;\n    for(int\
    \ i = 0; i < guess_size; i++){\n        if(game[i] > guess[i]){\n            result.push_back(game[i]\
    \ - guess[i]);\n        }else if(game[i] < guess[i]){\n            result.push_back(guess[i]\
    \ - game[i]);\n        }else{\n            result.push_back(0);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\
    \t}\n\treturn game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\n\t\t\t\
    guess[i] = 0;\n\t\telse\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\t}\n\treturn\
    \ guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t\tstd::vector<long> result;\n\t\tfor(int i = 0; i < game.size(); ++i) {\n\t\t\
    \t\tif(game[i] < guess[i]) {\n\t\t\t\t\t\tresult.push_back(guess[i] - game[i]);\n\
    \t\t\t\t}\n\t\t\t\telse if(game[i] > guess[i]) {\n\t\t\t\t\t\tresult.push_back(game[i]\
    \ - guess[i]);\n\t\t\t\t}\n\t\t\t\telse if(game[i] == guess[i]) {\n\t\t\t\t\t\t\
    result.push_back(0);\n\t\t\t\t}\n\t\t}\n\t\treturn result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\
    \tguess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\
    \t\t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\
    \tguess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\
    \t\t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    if(game.size() == guess.size()){\n        for(int\
    \ i = 0; i < game.size(); i++){\n            if(game[i] == guess[i]){\n      \
    \          res.push_back(0);\n            }\n            else{\n             \
    \   res.push_back(abs(game[i] - guess[i]));\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(auto i = 0; i < game.size(); i++) {\n\
    \        if(game[i] == guess[i]) {\n            result.push_back(0);\n       \
    \ } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int size = game.size();\n  std::vector<long> result;\n  for(int i = 0; i <\
    \ size; i++){\n    result.push_back(abs(game[i] - guess[i]));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long>  cmp(game.size());\n    for(int i = 0; i < game.size();\
    \ i++)\n    {\n        if(game[i] == guess[i]) cmp[i] = 0;\n        else cmp[i]\
    \ = std::abs(game[i] - guess[i]);\n    }\n    return cmp;\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result;\n   \
    \ for (long i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(unsigned int i = 0; i < game.size(); i++)\
    \ {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \   std::vector<long> result;\n   for(int i = 0; i < game.size(); i++){\n    \
    \  long g = guess[i];\n      long a = game[i];\n      result.push_back(abs(g-a));\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  for (int i = 0; i < game.size(); i++) {\n    long diff = std::abs(game[i] -\
    \ guess[i]);\n    if (diff != 0) {\n      guess[i] = diff;\n    }\n  }\n  return\
    \ guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpv472nube: /tmp/tmpv472nube.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result(guess.size());\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tresult[i] = std::abs(game[i] - guess[i]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res(game.size());\n    for(int i = 0; i < game.size();\
    \ i++)\n    {\n        if(game[i] > guess[i])\n        {\n            res[i] =\
    \ game[i] - guess[i];\n        }\n        else if(game[i] < guess[i])\n      \
    \  {\n            res[i] = guess[i] - game[i];\n        }\n        else\n    \
    \    {\n            res[i] = 0;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tlong difference = abs(game[i] - guess[i]);\n\t\t\tresult.push_back(difference);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] != guess[i]) {\n\t\t\
    \tguess[i] = abs(game[i] - guess[i]);\n\t\t}\n\t}\n\treturn guess;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpj_r_xipp: /tmp/tmpj_r_xipp.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int len = game.size();\n  std::vector<long> results;\n  for (size_t i = 0;\
    \ i < len; i++) {\n    long result = std::abs(game[i] - guess[i]);\n    results.push_back(result);\n\
    \  }\n  return results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // your code here\n  std::vector<long> result(game.size());\n  for(int i =\
    \ 0; i < game.size(); i++){\n    result[i] = abs(game[i] - guess[i]);\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    for(unsigned int i = 0; i < game.size(); i++) {\n        if(game[i] != guess[i])\
    \ {\n            guess[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ guess;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpsk3lby30: /tmp/tmpsk3lby30.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> output;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] == guess[i]) {\n\t\t\toutput.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \toutput.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn output;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t\n\tfor(long i = 0; i < game.size(); i++)\n\t{\n\t\tlong x = guess[i] - game[i];\n\
    \t\tif(x < 0)\n\t\t{\n\t\t\tguess[i] = x * -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    guess[i] = x;\n\t\t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\
    \tguess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\
    \t\t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> out;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   out.push_back(std::abs(game[i] - guess[i]));\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tlong\
    \ diff = abs(game[i] - guess[i]);\n\t\tresult.push_back(diff);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result(game.size());\n\tfor (int i = 0; i < game.size(); i++)\
    \ {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    //cout << \"game.size() = \" << game.size() << endl;\n    //cout << \"guess.size()\
    \ = \" << guess.size() << endl;\n    assert(game.size() == guess.size());\n  \
    \  std::vector<long> res;\n    for (int i = 0; i < game.size(); i++) {\n     \
    \   long diff = abs(game[i] - guess[i]);\n        res.push_back(diff);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> ret;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tret.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    if(game.size() == guess.size()){\n        for(int\
    \ i = 0; i < game.size(); i++){\n            if(game[i] == guess[i])\n       \
    \         res.push_back(0);\n            else if(game[i] < guess[i])\n       \
    \         res.push_back(guess[i] - game[i]);\n            else\n             \
    \   res.push_back(game[i] - guess[i]);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (unsigned int i = 0; i < game.size(); i++)\
    \ {\n    long difference = abs(game[i] - guess[i]);\n    result.push_back(difference);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> results;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\t\
    results.push_back(std::abs(game[i] - guess[i]));\n\t}\n\treturn results;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> scores;\n\tfor (unsigned int i = 0; i < game.size(); i++)\
    \ {\n\t\tif (game[i] == guess[i]) {\n\t\t\tscores.push_back(0);\n\t\t}\n\t\telse\
    \ {\n\t\t\tscores.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn scores;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> ret;\n  for(int i = 0; i < game.size(); i++) {\n    long\
    \ diff = abs(game[i] - guess[i]);\n    ret.push_back(diff);\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int size = game.size();\n    for(int i = 0; i < size; i++){\n        guess[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return guess;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] > guess[i]) {\n\t\t\
    \tguess[i] = game[i] - guess[i];\n\t\t}\n\t\telse if (game[i] < guess[i]) {\n\t\
    \t\tguess[i] = guess[i] - game[i];\n\t\t}\n\t\telse {\n\t\t\tguess[i] = 0;\n\t\
    \t}\n\t}\n\treturn guess;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> results;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\t\
    if (game[i] == guess[i]) {\n\t\t\tresults.push_back(0);\n\t\t}\n\t\telse {\n\t\
    \t\tresults.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108986
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] < guess[i]){\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }else if(game[i] > guess[i]){\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }else{\n            result.push_back(0);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    std::vector<long> result(n);\n    for(int i = 0;\
    \ i < n; i++)\n        result[i] = abs(game[i] - guess[i]);\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> values;\n\tint i = 0;\n\tfor (auto g : guess) {\n\t\tvalues.push_back(std::abs(game[i]\
    \ - g));\n\t\ti++;\n\t}\n\treturn values;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int length = game.size();\n    std::vector<long> result(length);\n    for(int\
    \ i = 0; i < length; i++){\n        result[i] = abs(game[i] - guess[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tif\
    \ (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\
    \tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108991
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> off;\n  for(unsigned int i = 0; i < game.size(); i++){\n\
    \      if(game[i] == guess[i]){\n          off.push_back(0);\n      }else{\n \
    \         long diff = abs(game[i] - guess[i]);\n          off.push_back(diff);\n\
    \      }\n  }\n  return off;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> dif;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(guess[i] > game[i]){\n            dif.push_back(guess[i] - game[i]);\n\
    \        }\n        else if(guess[i] < game[i]){\n            dif.push_back(game[i]\
    \ - guess[i]);\n        }\n        else{\n            dif.push_back(0);\n    \
    \    }\n    }\n    return dif;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> diff;\n  for(int i = 0; i < game.size(); i++){\n    diff.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return diff;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108984
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      result.push_back(0);\n    } else {\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> diff;\n    for(int i = 0; i < game.size(); i++){\n    \
    \    diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return diff;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int count = 0;\n    for(int i = 0; i < game.size(); i++){\n        if(game[i]\
    \ == guess[i]){\n            game[i] = 0;\n        }\n        else if(game[i]\
    \ > guess[i]){\n            count = game[i] - guess[i];\n            game[i] =\
    \ count;\n        }\n        else if(game[i] < guess[i]){\n            count =\
    \ guess[i] - game[i];\n            game[i] = count;\n        }\n    }\n    return\
    \ game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    long\
    \ diff = std::abs(game[i] - guess[i]);\n    result.push_back(diff);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108988
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> diff;\n    for(int i = 0; i < game.size(); i++){\n    \
    \    diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return diff;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int index = 0;\n  std::vector<long> results;\n  while(index < game.size()){\n\
    \    long difference = std::abs(game[index] - guess[index]);\n    results.push_back(difference);\n\
    \    index++;\n  }\n  return results;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    for(long i = 0; i < game.size(); i++){\n \
    \       if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    vector<long> answer;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ answer.push_back(abs(game[i] - guess[i]));\n    }\n    return answer;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxzn_4hy.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpcxzn_4hy.cpp:14:5: error: \u2018\
    vector\u2019 was not declared in this scope\n   14 |     vector<long> answer;\n\
    \      |     ^~~~~~\n/tmp/tmpcxzn_4hy.cpp:14:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcxzn_4hy.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcxzn_4hy.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpcxzn_4hy.cpp:14:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   14 |     vector<long>\
    \ answer;\n      |            ^~~~\n/tmp/tmpcxzn_4hy.cpp:16:9: error: \u2018answer\u2019\
    \ was not declared in this scope\n   16 |         answer.push_back(abs(game[i]\
    \ - guess[i]));\n      |         ^~~~~~\n/tmp/tmpcxzn_4hy.cpp:18:12: error: \u2018\
    answer\u2019 was not declared in this scope\n   18 |     return answer;\n    \
    \  |            ^~~~~~\n"
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tint n = game.size();\n\tint m = guess.size();\n\tstd::vector<long> res;\n\t\
    if (n!=m) return res;\n\tfor (int i=0; i<n; i++) {\n\t\tif (game[i]>guess[i])\
    \ res.push_back(game[i]-guess[i]);\n\t\telse res.push_back(guess[i]-game[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> v;\n  for(int i = 0; i < game.size(); i++){\n    if(game[i]\
    \ == guess[i]){\n      v.push_back(0);\n    }\n    else{\n      v.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> results;\n    for(auto x = 0; x < game.size(); x++){\n\
    \        if(game[x] == guess[x]){\n            results.push_back(0);\n       \
    \ }\n        else{\n            results.push_back(abs(game[x] - guess[x]));\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108992
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> arr(game.size());\n    for(int i = 0; i < game.size();\
    \ i++){\n        arr[i] = std::abs(game[i] - guess[i]);\n    }\n    return arr;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> ret;\n    for(int i = 0; i < game.size(); i++) {\n    \
    \    ret.push_back(abs(game[i] - guess[i]));\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n     \
    \   if(game[i] == guess[i]){\n            res.push_back(0);\n        }\n     \
    \   else{\n            res.push_back(abs(game[i] - guess[i]));\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108985
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> differences;\n    for (long i = 0; i < game.size(); i++)\
    \ {\n        if (game[i] > guess[i]) {\n            differences.push_back(game[i]\
    \ - guess[i]);\n        } else if (game[i] < guess[i]) {\n            differences.push_back(guess[i]\
    \ - game[i]);\n        } else {\n            differences.push_back(0);\n     \
    \   }\n    }\n    return differences;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660108993
