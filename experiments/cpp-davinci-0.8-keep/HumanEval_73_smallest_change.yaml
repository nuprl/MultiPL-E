name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the array\
  \ palindromic. A palindromic array is an array that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1,\
  \ 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nlong smallest_change(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 5, 4, 7, 9, 6}))) == (4));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 4, 3, 2, 2}))) == (1));\n    assert(candidate((std::vector<long>({1, 4,\
  \ 2}))) == (1));\n    assert(candidate((std::vector<long>({1, 4, 4, 2}))) == (1));\n\
  \    assert(candidate((std::vector<long>({1, 2, 3, 2, 1}))) == (0));\n    assert(candidate((std::vector<long>({3,\
  \ 1, 1, 3}))) == (0));\n    assert(candidate((std::vector<long>({1}))) == (0));\n\
  \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n}\n"
completions: ['  return 0;', "  if (arr.size() == 0) {\n    return 0;\n  }\n  int\
    \ start = 0;\n  int end = arr.size() - 1;\n  int ctr = 0;\n  while (start < end)\
    \ {\n    if (arr[start] != arr[end]) {\n      ctr++;\n    }\n    start++;\n  \
    \  end--;\n  }\n  return ctr;", "    long count = 0;\n    if(arr.size() == 1)\n\
    \        return count;\n    if(arr.size() == 2){\n        if(arr[0] == arr[1])\n\
    \            return count;\n        else\n            return count+1;\n    }\n\
    \    long i = 0;\n    long j = arr.size()-1;\n    while(i < j){\n        if(arr[i]\
    \ == arr[j]){\n            i++;\n            j--;\n        }\n        else if(arr[i]\
    \ > arr[j]){\n            arr[j-1] = arr[j-1] + arr[j];\n            count +=\
    \ 1;\n            j--;\n        }\n        else{\n            arr[i+1] = arr[i+1]\
    \ + arr[i];\n            count += 1;\n            i++;\n        }\n    }\n   \
    \ return count;", "  long minChanges = 0;\n  int n = arr.size();\n  // TODO: implement\
    \ this function.\n  return minChanges;", "    long n = arr.size();\n    long dp[n][n];\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long\
    \ i = 0; i < n - 1; i++) {\n        dp[i][i + 1] = abs(arr[i] - arr[i + 1]);\n\
    \    }\n    for(long gap = 2; gap < n; gap++) {\n        for(long i = 0; i < n\
    \ - gap; i++) {\n            long j = i + gap;\n            dp[i][j] = std::min(dp[i\
    \ + 1][j] + abs(arr[i] - arr[i + 1]), dp[i][j - 1] + abs(arr[j] - arr[j - 1]));\n\
    \        }\n    }\n    return dp[0][n - 1];", "\tlong n = arr.size();\n\tlong\
    \ dp[n][n];\n\tmemset(dp, 0, sizeof(dp));\n\tfor (long l = 2; l <= n; l++) {\n\
    \t\tfor (long i = 0; i < n - l + 1; i++) {\n\t\t\tlong j = i + l - 1;\n\t\t\t\
    if (l == 2) {\n\t\t\t\tdp[i][j] = (arr[i] == arr[j] ? 0 : 1);\n\t\t\t} else {\n\
    \t\t\t\tdp[i][j] = dp[i + 1][j - 1] + (arr[i] == arr[j] ? 0 : 2);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn dp[0][n - 1];", "  int cnt = 0;\n  for (int i = 0; i < arr.size()\
    \ / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      cnt++;\n  \
    \  }\n  }\n  return cnt;", "  long n = arr.size();\n  long dp[n][n];\n  memset(dp,\
    \ 0, sizeof(dp));\n  for (long gap = 1; gap < n; gap++) {\n    for (long i = 0,\
    \ j = gap; j < n; i++, j++) {\n      dp[i][j] = std::min(dp[i][j - 1], dp[i +\
    \ 1][j]) + 1;\n      if (arr[i] == arr[j]) {\n        dp[i][j] = std::min(dp[i][j],\
    \ dp[i + 1][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];", "    int n\
    \ = arr.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int\
    \ l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n     \
    \       int j = i + l - 1;\n            if (l == 2) {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                if (arr[i]\
    \ == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1];\n           \
    \     } else {\n                    dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j -\
    \ 1]);\n                }\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int L[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        L[i][i] = 1;\n    for (int cl = 2; cl <= n; cl++) {\n     \
    \   for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n\
    \            if (arr[i] == arr[j] && cl == 2)\n                L[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                L[i][j] = L[i + 1][j\
    \ - 1] + 2;\n            else\n                L[i][j] = std::max(L[i][j - 1],\
    \ L[i + 1][j]);\n        }\n    }\n    return n - L[0][n - 1];", "    long n =\
    \ arr.size();\n    long i = 0, j = n - 1;\n    int count = 0;\n    //loop to find\
    \ the mismatch positions in the array\n    while (i < j) {\n        if (arr[i]\
    \ != arr[j]) {\n            if (arr[i] == arr[j - 1]) {\n                j--;\n\
    \                count++;\n            } else if (arr[i + 1] == arr[j]) {\n  \
    \              i++;\n                count++;\n            } else {\n        \
    \        count += 2;\n                i++;\n                j--;\n           \
    \ }\n        } else {\n            i++;\n            j--;\n        }\n    }\n\
    \    return count;", "  long size = arr.size();\n  if (size == 0) return 0;\n\
    \  if (size == 1) return arr[0];\n  if (size == 2) return std::abs(arr[0] - arr[1]);\n\
    \  long count = 0;\n  for (long i = 0; i < size / 2; i++) {\n    count += std::abs(arr[i]\
    \ - arr[size - i - 1]);\n  }\n  return count;", "  int n = arr.size();\n  int\
    \ a[n+1][n+1];\n  for(int i=0;i<=n;i++)\n  {\n    for(int j=0;j<=n;j++)\n    {\n\
    \      if(i==0 || j==0)\n      {\n        a[i][j] = 0;\n      }\n      else if(arr[i-1]\
    \ == arr[n-j])\n      {\n        a[i][j] = 1 + a[i-1][j-1];\n      }\n      else\n\
    \      {\n        a[i][j] = std::max(a[i-1][j],a[i][j-1]);\n      }\n    }\n \
    \ }\n  return (n - a[n][n]);", "    int count = 0;\n    int n = arr.size();\n\
    \    int arr_half = n/2;\n    for(int i = 0; i < arr_half; i++){\n        if(arr[i]\
    \ != arr[n-i-1]){\n            if(arr[i] < arr[n-i-1]){\n                count\
    \ += arr[n-i-1] - arr[i];\n            }else{\n                count += arr[i]\
    \ - arr[n-i-1];\n            }\n        }\n    }\n    return count;", "  int len\
    \ = arr.size();\n  int left = 0;\n  int right = len - 1;\n  int count = 0;\n \
    \ while (left < right) {\n    if (arr[left] != arr[right]) {\n      count++;\n\
    \    }\n    left++;\n    right--;\n  }\n  return count;", "  int n = arr.size();\n\
    \  vector<vector<int>> dp(n, vector<int>(n, 0));\n  // dp[i][j] = Number of changes\
    \ required to make array palindromic at indices [i, j]\n  // if (i == j) {\n \
    \ //   dp[i][j] = 0;\n  // } else if (i == j-1) {\n  //   dp[i][j] = arr[i] ==\
    \ arr[j] ? 0 : 1;\n  // } else {\n  //   if (arr[i] == arr[j]) {\n  //     dp[i][j]\
    \ = dp[i+1][j-1];\n  //   } else {\n  //     dp[i][j] = min(dp[i+1][j], dp[i][j-1])\
    \ + 1;\n  //   }\n  // }\n  for (int i = 0; i < n; i++) {\n    for (int j = i;\
    \ j >= 0; j--) {\n      if (i == j) {\n        dp[i][j] = 0;\n      } else if\
    \ (i == j+1) {\n        dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n      } else {\n\
    \        if (arr[i] == arr[j]) {\n          dp[i][j] = dp[i-1][j+1];\n       \
    \ } else {\n          dp[i][j] = min(dp[i-1][j], dp[i][j+1]) + 1;\n        }\n\
    \      }\n    }\n  }\n  // for (int i = 0; i < n; i++) {\n  //   for (int j =\
    \ 0; j < n; j++) {\n  //     cout << dp[i][j] << \" \";\n  //   }\n  //   cout\
    \ << endl;\n  // }\n  return dp[n-1][0];", "    // TODO: Write your code here\n\
    \  int n = arr.size();\n  std::vector<std::vector<int>> dp(n, std::vector<int>(n,\
    \ 0));\n  // int minLength = std::numeric_limits<int>::max();\n  for(int i=0;\
    \ i<n; i++) {\n    dp[i][i] = 1;\n  }\n  for(int start=n-1; start>=0; start--)\
    \ {\n    for(int end=start+1; end<n; end++) {\n      if(arr[start] == arr[end])\
    \ {\n        dp[start][end] = dp[start+1][end-1];\n      } else {\n        dp[start][end]\
    \ = 1 + std::min(dp[start+1][end], dp[start][end-1]);\n      }\n    }\n  }\n \
    \ return dp[0][n-1];", "    std::vector<std::vector<long>> dp(arr.size(), std::vector<long>(arr.size(),\
    \ 0));\n    for (int i = 0; i < arr.size(); i++) {\n        dp[i][i] = 1;\n  \
    \  }\n    for (int i = 1; i < arr.size(); i++) {\n        for (int j = 0; j <\
    \ arr.size() - i; j++) {\n            if (arr[j] == arr[j + i]) {\n          \
    \      dp[j][j + i] = 2 + dp[j + 1][j + i - 1];\n            } else {\n      \
    \          dp[j][j + i] = std::max(dp[j + 1][j + i], dp[j][j + i - 1]);\n    \
    \        }\n        }\n    }\n    return arr.size() - dp[0][arr.size() - 1];",
  "  size_t n = arr.size();\n  size_t i, j;\n  // Find the longest palindromic subsequence\
    \ in arr.\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n\
    \  for (i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (size_t size = 2;\
    \ size <= n; size++) {\n    for (i = 0; i < n - size + 1; i++) {\n      j = i\
    \ + size - 1;\n      if (arr[i] == arr[j] && size == 2) {\n        dp[i][j] =\
    \ 2;\n      } else if (arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1]\
    \ + 2;\n      } else {\n        dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \      }\n    }\n  }\n  // dp[0][n - 1] is the length of the longest palindromic\
    \ subsequence\n  // The minimum number of changes is (n - dp[0][n - 1]) / 2.\n\
    \  return (n - dp[0][n - 1]) / 2;", "    long n = arr.size();\n    long i = 0,\
    \ j = n - 1;\n    int count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j])\
    \ {\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ count;", "    // Your code here!\n    int i=0,j=arr.size()-1;\n    int count=0;\n\
    \    while(i<j){\n      if(arr[i]!=arr[j]){\n        count++;\n      }\n     \
    \ i++;\n      j--;\n    }\n    return count;", "    // Write your code here\n\
    \    long ans = 0;\n    for(long i = 0; i < arr.size()/2; i++){\n        ans +=\
    \ abs(arr[i] - arr[arr.size() - 1 - i]);\n    }\n    return ans;", "    long n\
    \ = arr.size();\n    if(n==0) return 0;\n    long sum1=0, sum2=0;\n    for(long\
    \ i=0; i<n/2; i++) {\n        sum1 += arr[i];\n        sum2 += arr[n-i-1];\n \
    \   }\n    if(n%2) {\n        sum1 += arr[n/2];\n    }\n    return std::abs(sum1-sum2);",
  "    std::vector<long> left(arr.size());\n    left[0] = arr[0];\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        left[i] = arr[i] + left[i - 1];\n    }\n\
    \    std::vector<long> right(arr.size());\n    right[arr.size() - 1] = arr[arr.size()\
    \ - 1];\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        right[i] = arr[i]\
    \ + right[i + 1];\n    }\n    long min = std::numeric_limits<long>::max();\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        long left_sum, right_sum;\n\
    \        if (i == 0) {\n            left_sum = 0;\n        } else {\n        \
    \    left_sum = left[i - 1];\n        }\n        if (i == arr.size() - 1) {\n\
    \            right_sum = 0;\n        } else {\n            right_sum = right[i\
    \ + 1];\n        }\n        if (left_sum + right_sum < min) {\n            min\
    \ = left_sum + right_sum;\n        }\n    }\n    return min;", '  // your code
    here', "  std::vector<long> reverse_arr(arr.rbegin(), arr.rend());\n  int size\
    \ = arr.size();\n  int flag = 0;\n  int count = 0;\n  for (int i = 0; i < size;\
    \ i++) {\n    if (arr[i] != reverse_arr[i]) {\n      flag = 1;\n      count +=\
    \ 1;\n    }\n  }\n  if (flag == 0) {\n    return 0;\n  }\n  else {\n    return\
    \ count;\n  }", "    if(arr.size()==0)\n    return 0;\n    if(arr.size()==1)\n\
    \    return 0;\n    if(arr.size()==2)\n    {\n        if(arr[0]==arr[1])\n   \
    \     return 0;\n        else\n        return 1;\n    }\n    long n=arr.size();\n\
    \    for(long i=0;i<n/2;i++)\n    {\n        if(arr[i]!=arr[n-i-1])\n        return\
    \ 1;\n    }\n    return 0;", "    // your code goes here\n    // int size = arr.size();\n\
    \    // int k = size/2;\n    // int count = 0;\n    // for(int i = 0; i < k; i++){\n\
    \    //     if(arr[i] != arr[size-1-i]){\n    //         count++;\n    //    \
    \ }\n    // }\n    // return count;\n    int l = 0;\n    int h = arr.size()-1;\n\
    \    int count = 0;\n    while(l <= h){\n        if(arr[l] != arr[h]){\n     \
    \       count++;\n        }\n        l++;\n        h--;\n    }\n    return count;",
  "  int n = arr.size();\n  int a[n][n];\n  memset(a, 0, sizeof(a));\n  int l, h,\
    \ gap;\n  for (gap = 1; gap < n; ++gap)\n  {\n    for (l = 0, h = gap; h < n;\
    \ ++l, ++h)\n    {\n      a[l][h] = (arr[l] == arr[h])? a[l+1][h-1] :\n      \
    \          (std::min(a[l][h-1], a[l+1][h]) + 1);\n    }\n  }\n  return a[0][n-1];",
  "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n    int i,j,cl;\n\
    \    for(i=0;i<n;i++)\n        dp[i][i] = 1;\n    for(cl=2;cl<=n;cl++)\n    {\n\
    \        for(i=0;i<n-cl+1;i++)\n        {\n            j = i+cl-1;\n         \
    \   if(arr[i] == arr[j] && cl == 2)\n                dp[i][j] = 2;\n         \
    \   else if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1] + 2;\n\
    \            else\n                dp[i][j] = std::max(dp[i][j-1],dp[i+1][j]);\n\
    \        }\n    }\n    return n-dp[0][n-1];", "    int n = arr.size();\n    int\
    \ start = 0;\n    int end = n-1;\n    int ans = 0;\n    while(start<end){\n  \
    \      if(arr[start] == arr[end]){\n            start++;\n            end--;\n\
    \        }\n        else{\n            if(arr[start] < arr[end]){\n          \
    \      arr[start+1] = arr[start] + arr[start+1];\n                ans++;\n   \
    \             start++;\n            }\n            else{\n                arr[end-1]\
    \ = arr[end] + arr[end-1];\n                ans++;\n                end--;\n \
    \           }\n        }\n    }\n    return ans;", "    long n = arr.size();\n\
    \    if(n==0) return 0;\n    long table[n][n];\n    for(long i=0;i<n;i++)\n  \
    \      table[i][i] = 0;\n    for(long k=2;k<=n;k++){\n        for(long i=0;i<n-k+1;i++){\n\
    \            long j = i+k-1;\n            if(arr[i] == arr[j])\n             \
    \   table[i][j] = table[i+1][j-1];\n            else\n                table[i][j]\
    \ = 1 + std::min(table[i+1][j], table[i][j-1]);\n        }\n    }\n    return\
    \ table[0][n-1];", "    long res = 0;\n    long n = arr.size();\n    for (long\
    \ i = 0; i < n / 2; i++) {\n        res += std::abs(arr[i] - arr[n - i - 1]);\n\
    \    }\n    return res;", "  long count = 0;\n  int i = 0;\n  int j = arr.size()\
    \ - 1;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n\
    \    i++;\n    j--;\n  }\n  return count;", "  if (arr.size()==0)\n    return\
    \ 0;\n  if (arr.size()==1)\n    return 0;\n  if (arr.size()==2)\n    return 1;\n\
    \  if (arr.size()==3)\n    return 2;\n  if (arr.size()==4)\n    return 2;\n  if\
    \ (arr.size()==5)\n    return 3;\n  if (arr.size()==6)\n    return 3;\n  if (arr.size()==7)\n\
    \    return 3;\n  if (arr.size()==8)\n    return 4;\n  if (arr.size()==9)\n  \
    \  return 4;\n  if (arr.size()==10)\n    return 4;\n  if (arr.size()==11)\n  \
    \  return 5;\n  if (arr.size()==12)\n    return 5;\n  if (arr.size()==13)\n  \
    \  return 5;\n  if (arr.size()==14)\n    return 6;\n  if (arr.size()==15)\n  \
    \  return 6;\n  if (arr.size()==16)\n    return 6;\n  if (arr.size()==17)\n  \
    \  return 7;\n  if (arr.size()==18)\n    return 7;\n  if (arr.size()==19)\n  \
    \  return 7;\n  if (arr.size()==20)\n    return 8;\n  if (arr.size()==21)\n  \
    \  return 8;\n  if (arr.size()==22)\n    return 8;\n  if (arr.size()==23)\n  \
    \  return 9;\n  if (arr.size()==24)\n    return 9;\n  if (arr.size()==25)\n  \
    \  return 9;\n  if (arr.size()==26)\n    return 10;\n  if (arr.size()==27)\n \
    \   return 10;\n  if (arr.size()==28)\n    return 10;\n  if (arr.size()==29)\n\
    \    return 11;\n  if (arr.size()==30)\n    return 11;\n  if (arr.size()==31)\n\
    \    return 11;", "  long changes = 0;\n  long start = 0;\n  long end = arr.size()\
    \ - 1;\n  while (start < end) {\n    // If the characters at start and end are\
    \ equal, move forward\n    if (arr[start] == arr[end]) {\n      start++;\n   \
    \   end--;\n    } else {\n      // If the characters at start and end are not\
    \ equal, then check\n      // which one of them is larger and make the change\
    \ in that one.\n      if (arr[start] > arr[end]) {\n        arr[end] = arr[start];\n\
    \      } else {\n        arr[start] = arr[end];\n      }\n      changes++;\n \
    \   }\n  }\n  return changes;", "  long count=0;\n  long a=arr.size();\n  for(long\
    \ i=0;i<a/2;i++)\n  {\n    if(arr[i]!=arr[a-i-1])\n    {\n      count++;\n   \
    \ }\n  }\n  return count;", "    // your code here!\n    long n = arr.size();\n\
    \    long result = 0;\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n \
    \       dp[i][i] = 0;\n    for(long L = 2; L <= n; L++)\n    {\n        for(long\
    \ i = 0; i < n - L + 1; i++)\n        {\n            long j = i + L - 1;\n   \
    \         dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = min(dp[i][j], dp[i + 1][j - 1]);\n  \
    \      }\n    }\n    return dp[0][n - 1];", '  return 0;', "    std::stack<long>\
    \ s;\n    for(long i = 0; i < arr.size(); i++) {\n        s.push(arr[i]);\n  \
    \  }\n    long count = 0;\n    while(!s.empty()) {\n        if(s.top() != arr[count])\
    \ {\n            count++;\n        }\n        s.pop();\n        count++;\n   \
    \ }\n    return count;", "  int min_changes = 0;\n  int len = arr.size();\n  for\
    \ (int i = 0; i < len / 2; i++) {\n    if (arr[i] != arr[len - i - 1]) {\n   \
    \   min_changes++;\n    }\n  }\n  return min_changes;", "    long ans=0;\n   \
    \ for(long i=0;i<arr.size()/2;i++){\n        ans+=abs(arr[i]-arr[arr.size()-i-1]);\n\
    \    }\n    return ans;", "  // your code here\n  int n = arr.size();\n  int m[n+1][n+1];\n\
    \  memset(m, 0, sizeof(m));\n  for(int i = 0; i < n; i++)\n    m[i][i] = 1;\n\
    \  for(int l = 2; l <= n; l++) {\n    for(int i = 0; i < n-l+1; i++) {\n     \
    \ int j = i+l-1;\n      if(arr[i] == arr[j] && l == 2)\n        m[i][j] = 2;\n\
    \      else if(arr[i] == arr[j])\n        m[i][j] = m[i+1][j-1] + 2;\n      else\n\
    \        m[i][j] = std::max(m[i][j-1], m[i+1][j]);\n    }\n  }\n  return n - m[0][n-1];",
  "  int n = arr.size();\n  // find longest palindromic subsequence\n  std::vector<std::vector<int>>\
    \ dp(n, std::vector<int>(n, 0));\n  // len -> 1\n  for (int i = 0; i < n; i++)\
    \ {\n    dp[i][i] = 1;\n  }\n  // len -> 2\n  for (int i = 0; i < n - 1; i++)\
    \ {\n    if (arr[i] == arr[i + 1])\n      dp[i][i + 1] = 2;\n    else\n      dp[i][i\
    \ + 1] = 1;\n  }\n  // len > 2\n  for (int len = 3; len <= n; len++) {\n    for\
    \ (int i = 0; i <= n - len; i++) {\n      int j = i + len - 1;\n      if (arr[i]\
    \ == arr[j])\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      else\n        dp[i][j]\
    \ = std::max(dp[i + 1][j], dp[i][j - 1]);\n    }\n  }\n  // remaining changes\n\
    \  int res = n - dp[0][n - 1];\n  return res;", "  long min=INT_MAX;\n  long n=arr.size();\n\
    \  std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n  for(long i=0;i<n;i++)\n\
    \    dp[i][i]=0;\n  for(long l=2;l<=n;l++){\n    for(long i=0;i<n-l+1;i++){\n\
    \      long j=i+l-1;\n      if(arr[i]==arr[j])\n        dp[i][j]=dp[i+1][j-1];\n\
    \      else\n        dp[i][j]=std::min(dp[i+1][j],dp[i][j-1])+1;\n    }\n  }\n\
    \  for(long i=0;i<n;i++){\n    for(long j=0;j<n;j++){\n      if(min>dp[i][j])\n\
    \        min=dp[i][j];\n    }\n  }\n  return min;", "    long start = 0;\n   \
    \ long end = arr.size() - 1;\n    long changes = 0;\n    while (start < end) {\n\
    \        if (arr[start] != arr[end]) {\n            changes++;\n        }\n  \
    \      start++;\n        end--;\n    }\n    return changes;", "\tint n = arr.size();\n\
    \t// in case the vector is empty\n\tif(!n)\n\t\treturn 0;\n\t// in case the vector\
    \ has only one element\n\tif(n == 1)\n\t\treturn 0;\n\tint l = 0, r = n-1;\n\t\
    int cnt = 0;\n\t// count the number of elements which are same as the corresponding\
    \ elements\n\t// on the other side of the palindrome\n\twhile(l <= r) {\n\t\t\
    if(arr[l] == arr[r]) {\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t\telse {\n\t\t\tl++;\n\
    \t\t\tcnt++;\n\t\t}\n\t}\n\t// we add the number of elements for which value is\
    \ different from the value of\n\t// the corresponding elements in the other side\
    \ of the palindrome\n\t// to the number of such elements on the other side\n\t\
    return cnt + (n-l);", "    long cost = 0;\n    long j = arr.size() - 1;\n    long\
    \ i = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            cost++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return cost;", "  long change_count\
    \ = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size()\
    \ - 1 - i]) {\n      change_count++;\n    }\n  }\n  return change_count;", " \
    \ int l = 0;\n  int r = arr.size() - 1;\n  long swapCount = 0;\n  long minSwapCount\
    \ = 0;\n  while (l < r) {\n    if (arr[l] != arr[r]) {\n      if (arr[l] == arr[r\
    \ - 1]) {\n        swapCount++;\n        r--;\n      } else if (arr[l + 1] ==\
    \ arr[r]) {\n        swapCount++;\n        l++;\n      } else {\n        swapCount++;\n\
    \        l++;\n        r--;\n      }\n    } else {\n      l++;\n      r--;\n \
    \   }\n    minSwapCount = std::min(minSwapCount, swapCount);\n  }\n  return minSwapCount;",
  "    if(arr.size() == 0) return 0;\n    int start = 0;\n    int end = arr.size()\
    \ - 1;\n    long count = 0;\n    while(start < end) {\n        if(arr[start] !=\
    \ arr[end]) count++;\n        start++;\n        end--;\n    }\n    return count;",
  "  int count = 0;\n  for (size_t i = 0; i < arr.size() / 2; i++) {\n    if (arr[i]\
    \ != arr[arr.size() - 1 - i]) {\n      count++;\n    }\n  }\n  return count;",
  "    // Your code here\n    long left = 0;\n    long right = arr.size() - 1;\n \
    \   long minChanges = 0;\n    while (left < right) {\n        if (arr[left] !=\
    \ arr[right]) {\n            minChanges++;\n        }\n        left++;\n     \
    \   right--;\n    }\n    return minChanges;", "    if(arr.size() <= 1) return\
    \ 0;\n    long left = 0, right = arr.size() - 1;\n    long count = 0;\n    while(left\
    \ < right) {\n        if(arr[left] != arr[right]) count++;\n        left++;\n\
    \        right--;\n    }\n    return count;", "  if (arr.size() <= 1) return 0;\n\
    \  // we can use dynamic programming\n  std::vector<std::vector<long>> dp(arr.size(),\
    \ std::vector<long>(arr.size(), 0));\n  long min_change = INT_MAX;\n  // dp[i][j]\
    \ represents the number of changes that need to be made to make the\n  // array\
    \ arr[i..j] palindromic\n  for (int i = 0; i < arr.size(); i++) {\n    for (int\
    \ j = 0; j < arr.size(); j++) {\n      if (i == j) {\n        dp[i][j] = 0;\n\
    \      } else if (j == i + 1) {\n        if (arr[i] == arr[j]) {\n          dp[i][j]\
    \ = 0;\n        } else {\n          dp[i][j] = 1;\n        }\n      } else {\n\
    \        if (arr[i] == arr[j]) {\n          dp[i][j] = dp[i + 1][j - 1];\n   \
    \     } else {\n          dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n\
    \        }\n      }\n      if (j == arr.size() - 1) {\n        if (i == 0) {\n\
    \          min_change = dp[i][j];\n        } else {\n          min_change = std::min(min_change,\
    \ dp[i][j]);\n        }\n      }\n    }\n  }\n  return min_change;", "  // Write\
    \ your code here\n  long ans = 0;\n  for(long i = 0, j = arr.size() - 1; i < j;\
    \ i++, j--) {\n    if(arr[i] != arr[j])\n      ans++;\n  }\n  return ans;", " \
    \ long ans = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n    if (arr[i]\
    \ != arr[arr.size() - 1 - i]) {\n      ans++;\n    }\n  }\n  return ans;", " \
    \   int n = arr.size();\n    int count=0;\n    int mid = n/2;\n    for(int i=0;i<mid;i++){\n\
    \        if(arr[i]!=arr[n-i-1])\n            count++;\n    }\n    return count;",
  "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n  \
    \  for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int L\
    \ = 2; L <= n; L++) {\n        for (int i = 0; i < n - L + 1; i++) {\n       \
    \     int j = i + L - 1;\n            if (arr[i] == arr[j] && L == 2) {\n    \
    \            dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n     \
    \           dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n         \
    \       dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n    \
    \    }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n    int\
    \ m[n+1][n+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=n;j++)\n\
    \        {\n            if(i==0 || j==0)\n                m[i][j] = 0;\n     \
    \       else if(arr[i-1] == arr[n-j])\n                m[i][j] = 1 + m[i-1][j-1];\n\
    \            else\n                m[i][j] = std::max(m[i-1][j],m[i][j-1]);\n\
    \        }\n    }\n    return n - m[n][n];", "  std::vector<long> reverse = arr;\n\
    \  std::reverse(reverse.begin(), reverse.end());\n  return std::count(arr.begin(),\
    \ arr.end(), reverse.begin());", "    long len = arr.size();\n    std::vector<std::vector<long>>\
    \ result(len, std::vector<long>(len, 0));\n    for (long i = len - 1; i >= 0;\
    \ i--) {\n        for (long j = i; j < len; j++) {\n            if (i == j) {\n\
    \                result[i][j] = 0;\n            } else if (i + 1 == j) {\n   \
    \             result[i][j] = std::abs(arr[i] - arr[j]);\n            } else {\n\
    \                long min = INT_MAX;\n                for (long k = i; k < j;\
    \ k++) {\n                    if (min > result[i][k] + result[k + 1][j]) {\n \
    \                       min = result[i][k] + result[k + 1][j];\n             \
    \       }\n                }\n                result[i][j] = min + std::abs(arr[i]\
    \ - arr[j]);\n            }\n        }\n    }\n    return result[0][len - 1];",
  "    // your code here\n    vector<long> vec(arr.size());\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        vec[i]=arr[arr.size()-1-i];\n    }\n    vector<vector<long>> dp(arr.size()+1,vector<long>(arr.size()+1,0));\n\
    \    for(int i=1;i<=arr.size();i++)\n    {\n        for(int j=1;j<=arr.size();j++)\n\
    \        {\n            if(arr[i-1]==vec[j-1])\n            {\n              \
    \  dp[i][j]=dp[i-1][j-1]+1;\n            }\n            else\n            {\n\
    \                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n            }\n       \
    \ }\n    }\n    return (arr.size()-dp[arr.size()][arr.size()]);", "    // your\
    \ code here\n    int n = arr.size();\n    int L[n][n];\n    int i, j, cl;\n  \
    \  for (i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (cl = 2; cl <= n; cl++)\
    \ {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n\
    \            if (arr[i] == arr[j] && cl == 2)\n                L[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                L[i][j] = L[i + 1][j\
    \ - 1] + 2;\n            else\n                L[i][j] = std::max(L[i][j - 1],\
    \ L[i + 1][j]);\n        }\n    }\n    return (n - L[0][n - 1]);", "    // Your\
    \ code here\n    return 0;", "    int start = 0;\n    int end = arr.size() - 1;\n\
    \    int ans = 0;\n    while(start < end) {\n        if(arr[start] != arr[end])\
    \ {\n            ans++;\n        }\n        start++;\n        end--;\n    }\n\
    \    return ans;", "  int changes = 0;\n  int begin = 0;\n  int end = arr.size()\
    \ - 1;\n  while (begin < end) {\n    if (arr[begin] != arr[end]) {\n      changes++;\n\
    \    }\n    begin++;\n    end--;\n  }\n  return changes;", "  long size = arr.size();\n\
    \  std::vector<std::vector<long>> table(size, std::vector<long>(size, 0));\n \
    \ for (int l = 2; l <= size; l++) {\n    for (int i = 0; i < size - l + 1; i++)\
    \ {\n      int j = i + l - 1;\n      if (arr[i] == arr[j] && l == 2) {\n     \
    \   table[i][j] = 0;\n      } else if (arr[i] == arr[j]) {\n        table[i][j]\
    \ = table[i + 1][j - 1];\n      } else {\n        table[i][j] = 1 + std::min(table[i][j\
    \ - 1], table[i + 1][j]);\n      }\n    }\n  }\n  return table[0][size - 1];",
  "  // your code here\n  // Start the count from zero\n  long c = 0;\n  // loop over\
    \ the vector from start and end to find the number\n  // of mismatches. For every\
    \ mismatch, increment the count\n  for (int i = 0, j = arr.size() - 1; i < j;\
    \ i++, j--) {\n    if (arr[i] != arr[j]) {\n      c++;\n    }\n  }\n  return c;",
  "    int count = 0;\n    int len = arr.size();\n    int left = 0;\n    int right\
    \ = len - 1;\n    int changed = 0;\n    while (left < right) {\n        if (arr[left]\
    \ != arr[right]) {\n            if (arr[left] > arr[right]) {\n              \
    \  arr[right] = arr[left];\n            } else {\n                arr[left] =\
    \ arr[right];\n            }\n            changed++;\n        }\n        left++;\n\
    \        right--;\n    }\n    return changed;", "  // your code here\n  long size\
    \ = arr.size();\n  long count = 0;\n  for(long i = 0; i < (size/2); i++){\n  \
    \  if(arr[i] != arr[size-1-i])\n      count++;\n  }\n  return count;", "    //\
    \ Write your code here\n    if(arr.size()==0) return 0;\n    std::vector<long>\
    \ v1(arr.size(), 0);\n    std::vector<long> v2(arr.size(), 0);\n    long smallest\
    \ = 0;\n    for(int i=0; i<arr.size(); i++){\n        v1[i] = (i>0) ? v1[i-1]\
    \ + arr[i] : arr[i];\n        v2[i] = (i>0) ? v2[i-1] + arr[arr.size()-1-i] :\
    \ arr[arr.size()-1-i];\n    }\n    for(int i=0; i<arr.size(); i++){\n        if(i>0){\n\
    \            if(v1[i] > v2[arr.size()-2-i]){\n                smallest += v1[i]\
    \ - v2[arr.size()-2-i];\n            }\n            else if(v1[i] < v2[arr.size()-2-i]){\n\
    \                smallest += v2[arr.size()-2-i] - v1[i];\n            }\n    \
    \    }\n        else{\n            if(v1[i] > v2[arr.size()-1-i]){\n         \
    \       smallest += v1[i] - v2[arr.size()-1-i];\n            }\n            else\
    \ if(v1[i] < v2[arr.size()-1-i]){\n                smallest += v2[arr.size()-1-i]\
    \ - v1[i];\n            }\n        }\n    }\n    return smallest;", "    int l\
    \ = 0;\n    int r = arr.size() - 1;\n    int c = 0;\n    while (l < r) {\n   \
    \     if (arr[l] != arr[r]) {\n            c++;\n        }\n        l++;\n   \
    \     r--;\n    }\n    return c;", "  // your code goes here\n  std::vector<long>\
    \ temp = arr;\n  std::reverse(temp.begin(), temp.end());\n  for(long i = 0; i\
    \ < arr.size(); i++) {\n    if(arr[i] != temp[i]) {\n      arr[i] = temp[i];\n\
    \    }\n  }\n  long count = 0;\n  for(long i = 0; i < arr.size(); i++) {\n   \
    \ if(arr[i] != temp[i]) {\n      count++;\n    }\n  }\n  return count;", "   \
    \ long size=arr.size();\n    std::vector<std::vector<long>> dp(size,std::vector<long>(size,0));\n\
    \    for(long i=0;i<size;i++)\n        dp[i][i]=1;\n    for(long c=2;c<=size;c++){\n\
    \        for(long i=0;i<size-c+1;i++){\n            long j=i+c-1;\n          \
    \  if(arr[i]==arr[j] && c==2)\n                dp[i][j]=2;\n            else if(arr[i]==arr[j])\n\
    \                dp[i][j]=dp[i+1][j-1]+2;\n            else\n                dp[i][j]=std::max(dp[i][j-1],dp[i+1][j]);\n\
    \        }\n    }\n    return size-dp[0][size-1];", "    int n = arr.size();\n\
    \    // 1 4 1\n    int l = 0, r = n - 1;\n    int count = 0;\n    while (l < r)\
    \ {\n        if (arr[l] != arr[r]) {\n            count++;\n        }\n      \
    \  l++;\n        r--;\n    }\n    return count;", "    // Your code here\n   \
    \ std::vector<long> reverse_arr(arr.rbegin(), arr.rend());\n    int front_index\
    \ = 0;\n    int back_index = arr.size() - 1;\n    int sum = 0;\n    while (front_index\
    \ < back_index) {\n        if (arr[front_index] != reverse_arr[back_index]) {\n\
    \            sum += 1;\n        }\n        front_index += 1;\n        back_index\
    \ -= 1;\n    }\n    return sum;", "    long ans = 0;\n    long n = arr.size();\n\
    \    for(long i = 0, j = n - 1; i < j; i++, j--) {\n        if(arr[i] != arr[j])\
    \ {\n            ans++;\n        }\n    }\n    return ans;", "  int n = arr.size();\n\
    \  // std::cout << \"n \" << n << std::endl;\n  std::vector<std::vector<long>>\
    \ ans(n, std::vector<long>(n, 0));\n  for (int i = 0; i < n; i++) {\n    ans[i][i]\
    \ = 0;\n  }\n  for (int len = 2; len <= n; len++) {\n    for (int i = 0; i < n\
    \ - len + 1; i++) {\n      int j = i + len - 1;\n      if (arr[i] == arr[j]) {\n\
    \        ans[i][j] = ans[i + 1][j - 1];\n      } else {\n        ans[i][j] = 1\
    \ + std::min(ans[i + 1][j], ans[i][j - 1]);\n      }\n    }\n  }\n  return ans[0][n\
    \ - 1];", "  \n  // your code here\n  // vector<long>front_arr;\n  // vector<long>back_arr;\n\
    \  // long count=0;\n  // int index_arr=arr.size()-1;\n  // cout<<index_arr<<endl;\n\
    \  // for(int i=0;i<arr.size();i++){\n  //   front_arr.push_back(arr[i]);\n  //\
    \   back_arr.push_back(arr[index_arr]);\n  //   index_arr--;\n  // }\n  // for(int\
    \ i=0;i<arr.size();i++){\n  //   if(front_arr[i]==back_arr[i]){\n  //     count++;\n\
    \  //   }\n  // }\n  // return (arr.size()-count);\n  // cout<<back_arr.size()<<endl;\n\
    \  // for(int i=0;i<back_arr.size();i++){\n  //   cout<<back_arr[i]<<endl;\n \
    \ // }\n  // cout<<front_arr.size()<<endl;\n  // for(int i=0;i<front_arr.size();i++){\n\
    \  //   cout<<front_arr[i]<<endl;\n  // }\n  // for(int i=0;i<front_arr.size();i++){\n\
    \  //   if(front_arr[i]==back_arr[i]){\n  //     count++;\n  //   }\n  // }\n\
    \  // return (arr.size()-count);\n  \n  long count=0;\n  int index_arr=arr.size()-1;\n\
    \  for(int i=0;i<arr.size();i++){\n    if(arr[i]==arr[index_arr]){\n      count++;\n\
    \    }\n    index_arr--;\n  }\n  return (arr.size()-count);", "    int n = arr.size();\n\
    \    // Write your code here\n\n    int i = 0;\n    int j = n - 1;\n    int result\
    \ = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            result++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;", "    // your\
    \ code here!\n    std::vector<long> cpy_arr;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        cpy_arr.push_back(arr[i]);\n    }\n    std::reverse(cpy_arr.begin(),\
    \ cpy_arr.end());\n    std::vector<long>::iterator it1, it2;\n    it1 = arr.begin();\n\
    \    it2 = cpy_arr.begin();\n    long size = arr.size();\n    long count = 0;\n\
    \    while(size > 0){\n        if(*it1 != *it2){\n            count++;\n     \
    \   }\n        it1++;\n        it2++;\n        size--;\n    }\n    return count;",
  "    long n = arr.size();\n    int sum = 0;\n    for(int i = 0; i < n/2; i++) {\n\
    \        sum += abs(arr[i] - arr[n-i-1]);\n    }\n    return sum;", "  // your\
    \ code here\n  std::vector<long> reverse_arr(arr.size());\n  std::reverse_copy(arr.begin(),\
    \ arr.end(), reverse_arr.begin());\n  std::vector<long> changes(arr.size() + 1,\
    \ 0);\n  for (int i = 1; i <= arr.size(); i++) {\n    for (int j = 1; j <= arr.size();\
    \ j++) {\n      if (arr[i - 1] == reverse_arr[j - 1]) {\n        changes[j] =\
    \ changes[j - 1] + 1;\n      } else {\n        changes[j] = std::max(changes[j],\
    \ changes[j - 1]);\n      }\n    }\n  }\n  return arr.size() - changes[arr.size()];",
  "  long n = arr.size();\n  long ans = 0;\n  long i = 0;\n  long j = n - 1;\n  long\
    \ c = 0;\n  while (i < j) {\n    if (arr[i] == arr[j]) {\n      i++;\n      j--;\n\
    \    } else {\n      if (arr[i] > arr[j]) {\n        j--;\n        arr[j] = arr[j\
    \ + 1];\n      } else {\n        i++;\n        arr[i] = arr[i - 1];\n      }\n\
    \      c++;\n    }\n  }\n  return c;", "\tlong n = arr.size();\n\tlong i = 0,\
    \ j = n - 1;\n\tint count = 0;\n\twhile (i < j) {\n\t\tif (arr[i] != arr[j])\n\
    \t\t\tcount++;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn count;", "  long count=0;\n\
    \  for(int i=0;i<arr.size()/2;i++){\n    if(arr[i]!=arr[arr.size()-1-i])\n   \
    \ count++;\n  }\n  return count;", "\tlong n = arr.size();\n\tlong l = 0, r =\
    \ n - 1;\n\tlong cnt = 0;\n\twhile (l < r) {\n\t\tif (arr[l] != arr[r]) {\n\t\t\
    \tcnt++;\n\t\t}\n\t\tl++;\n\t\tr--;\n\t}\n\treturn cnt;", "\tlong count = 0;\n\
    \tfor (int i = 0; i < arr.size() / 2; i++) {\n\t\tif (arr[i] != arr[arr.size()\
    \ - 1 - i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "  if (arr.size()\
    \ == 0) return 0;\n  long count = 0;\n  std::stack<long> st;\n  st.push(arr[0]);\n\
    \  for (int i = 1; i < arr.size(); i++) {\n    if (st.top() != arr[i]) {\n   \
    \   st.push(arr[i]);\n    }\n  }\n  return arr.size() - st.size();", "    long\
    \ n = arr.size();\n    if(n == 0)\n        return 0;\n    long m = n;\n    for(long\
    \ i = 0; i <= (n/2); i++) {\n        if(arr[i] == arr[n-i-1])\n            m -=\
    \ 2;\n    }\n    return m;", "    // Write your code here\n    int N = arr.size();\n\
    \    int i = 0;\n    int j = N-1;\n    int count = 0;\n    while(i<j){\n     \
    \   if(arr[i] != arr[j])\n            count++;\n        i++;\n        j--;\n \
    \   }\n    return count;", "  // your code here\n  long n = arr.size();\n  long\
    \ left = 0;\n  long right = n-1;\n  long count = 0;\n  while(left < right){\n\
    \    if(arr[left] == arr[right]){\n      left++;\n      right--;\n    }\n    else\
    \ if(arr[left] < arr[right]){\n      arr[left+1] = arr[left] + arr[left+1];\n\
    \      left++;\n      count++;\n    }\n    else{\n      arr[right-1] = arr[right]\
    \ + arr[right-1];\n      right--;\n      count++;\n    }\n  }\n  return count;",
  "  // your code here\n  long c = 0;\n  int i = 0;\n  int j = arr.size() - 1;\n \
    \ while (i < j) {\n    if (arr[i] != arr[j]) {\n      c++;\n    }\n    i++;\n\
    \    j--;\n  }\n  return c;", "    long length = arr.size();\n    int count =\
    \ 0;\n    for(int i = 0; i < length / 2; i++) {\n        if(arr[i] != arr[length\
    \ - i - 1]) {\n            count++;\n        }\n    }\n    return count;", " \
    \   long n = arr.size();\n    long i = 0, j = n - 1;\n    long ans = 0;\n    while\
    \ (i < j) {\n        if (arr[i] != arr[j])\n            ans++;\n        i++;\n\
    \        j--;\n    }\n    return ans;", "   long size = arr.size();\n   // Trivial\
    \ case\n   if (size <= 1) {\n       return 0;\n   }\n   // This is an optimization.\n\
    \   // If the size is even, then the minimum changes\n   // should be 0.\n   //\
    \ If the size is odd, then the minimum changes\n   // should be 1.\n   // Since\
    \ we are changing a single element, the\n   // first and last elements must match.\n\
    \   if (size % 2 == 0) {\n       if (arr[0] != arr[size - 1]) {\n           return\
    \ -1;\n       }\n   } else {\n       if (arr[0] == arr[size - 1]) {\n        \
    \   return -1;\n       }\n   }\n   long start = 0;\n   long end = size - 1;\n\
    \   long count = 0;\n   while (start < end) {\n       if (arr[start] != arr[end])\
    \ {\n           count++;\n       }\n       start++;\n       end--;\n   }\n   return\
    \ count;", "    long s=0, e=arr.size()-1;\n    long change=0;\n    while(s<e){\n\
    \        if(arr[s]==arr[e]){\n            s++;\n            e--;\n        }\n\
    \        else if(arr[s]<arr[e]){\n            arr[s+1] = arr[s+1] + arr[s];\n\
    \            change++;\n            s++;\n        }\n        else if(arr[s]>arr[e]){\n\
    \            arr[e-1] = arr[e-1] + arr[e];\n            change++;\n          \
    \  e--;\n        }\n    }\n    return change;", "    int l=0,r=arr.size()-1;\n\
    \    while(l<r){\n        if(arr[l]==arr[r]) l++,r--;\n        else break;\n \
    \   }\n    int c=0;\n    while(l<r){\n        if(arr[l]==arr[r]){\n          \
    \  c++;\n            l++;\n            r--;\n        }\n        else if(arr[l]<arr[r]){\n\
    \            arr[l+1]=arr[l]+arr[l+1];\n            c++;\n            l++;\n \
    \       }\n        else if(arr[l]>arr[r]){\n            arr[r-1]=arr[r]+arr[r-1];\n\
    \            c++;\n            r--;\n        }\n    }\n    return c;", "    if(arr.size()\
    \ == 0 || arr.size() == 1) return 0;\n    int i = 0, j = arr.size() - 1;\n   \
    \ int changes = 0;\n    while(i <= j) {\n        if(arr[i] != arr[j]) changes++;\n\
    \        i++;\n        j--;\n    }\n    return changes;", "    long n = arr.size();\n\
    \    long ret = 0;\n    for (long i = 0; i < n / 2; i++) {\n        ret += std::abs(arr[i]\
    \ - arr[n - i - 1]);\n    }\n    return ret;", "    int size = arr.size();\n \
    \   int start = 0;\n    int end = size - 1;\n    int count = 0;\n    while (start\
    \ < end) {\n        if (arr[start] != arr[end]) {\n            count++;\n    \
    \    }\n        start++;\n        end--;\n    }\n    return count;", "    long\
    \ a=0,b=arr.size()-1;\n    long ans=0;\n    while(a<b){\n        if(arr[a]!=arr[b]){\n\
    \            if(arr[a]>arr[b]){\n                arr[b]=arr[a];\n            }\n\
    \            else{\n                arr[a]=arr[b];\n            }\n          \
    \  ans++;\n        }\n        a++;\n        b--;\n    }\n    return ans;", " \
    \   // Write your code here\n    int n = arr.size();\n    vector<vector<int>>\
    \ dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 1;\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l\
    \ + 1; i++) {\n            int j = i + l - 1;\n            if (arr[i] == arr[j]\
    \ && l == 2)\n                dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return\
    \ (n - dp[0][n - 1]);", "    long cost=0;\n    for(int i=0;i<arr.size()/2;i++){\n\
    \        if(arr[i]!=arr[arr.size()-1-i]){\n            if(arr[i]>arr[arr.size()-1-i]){\n\
    \                arr[arr.size()-1-i]=arr[i];\n            }\n            else{\n\
    \                arr[i]=arr[arr.size()-1-i];\n            }\n            cost++;\n\
    \        }\n    }\n    return cost;", "    // your code here\n    int n = arr.size();\n\
    \    std::vector<std::vector<int>> dp(n, std::vector<int>(n,0));\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for(int len = 2; len <= n; len++){\n\
    \        for(int i = 0; i < n - len + 1; i++){\n            int j = i + len -\
    \ 1;\n            if(arr[i] == arr[j] && len == 2)\n                dp[i][j] =\
    \ 2;\n            else if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1]\
    \ + 2;\n            else\n                dp[i][j] = std::max(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    // for(int i = 0; i < n; i++){\n    //     for(int j =\
    \ 0; j < n; j++)\n    //         std::cout << dp[i][j] << \" \";\n    //     std::cout\
    \ << \"\\n\";\n    // }\n    return n - dp[0][n-1];", "  long count = 0;\n  int\
    \ i = 0;\n  int j = arr.size() - 1;\n  while (i < j) {\n    if (arr[i] != arr[j])\
    \ {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;", "    int\
    \ n = arr.size();\n    int i, j;\n    int l, r;\n\n    // Create a table to store\
    \ results of subproblems\n    int table[n][n];\n\n    // Strings of length 1 are\
    \ palindrome of length 1\n    for (i = 0; i < n; i++)\n        table[i][i] = 0;\n\
    \n    // Build the table. Note that the lower diagonal values of table are\n \
    \   // useless and not filled in the process. The values are filled in a\n   \
    \ // manner similar to Matrix Chain Multiplication DP solution (See\n    // https://www.geeksforgeeks.org/archives/15553).\
    \ cl is length of\n    // substring\n    for (cl = 2; cl <= n; cl++) {\n     \
    \   for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n        \
    \    if (arr[i] == arr[j] && cl == 2)\n                table[i][j] = 0;\n    \
    \        else if (arr[i] == arr[j])\n                table[i][j] = table[i + 1][j\
    \ - 1];\n            else\n                table[i][j] = std::min(table[i][j -\
    \ 1], table[i + 1][j]) + 1;\n        }\n    }\n\n    return table[0][n - 1];",
  "    std::vector<long> v;\n    long i = 0;\n    long j = arr.size() - 1;\n    long\
    \ k = 0;\n    while (i <= j) {\n        if (arr[i] == arr[j]) {\n            i++;\n\
    \            j--;\n        } else {\n            v.push_back(i);\n           \
    \ v.push_back(j);\n            k++;\n            i++;\n            j--;\n    \
    \    }\n    }\n    for (auto x : v) {\n        std::cout << x << std::endl;\n\
    \    }\n    if (k == 0) {\n        return 0;\n    } else if (k == 1) {\n     \
    \   if (v[0] == 0) {\n            if (arr[v[1]] >= arr[v[1] + 1]) {\n        \
    \        return 1;\n            } else {\n                return 2;\n        \
    \    }\n        } else if (v[1] == arr.size() - 1) {\n            if (arr[v[0]]\
    \ >= arr[v[0] - 1]) {\n                return 1;\n            } else {\n     \
    \           return 2;\n            }\n        } else {\n            if (arr[v[0]]\
    \ >= arr[v[0] - 1] && arr[v[1]] >= arr[v[1] + 1]) {\n                return 1;\n\
    \            } else if (arr[v[0]] >= arr[v[0] - 1] && arr[v[1]] < arr[v[1] + 1])\
    \ {\n                return 2;\n            } else if (arr[v[0]] < arr[v[0] -\
    \ 1] && arr[v[1]] >= arr[v[1] + 1]) {\n                return 2;\n           \
    \ } else {\n                return 3;\n            }\n        }\n    } else {\n\
    \        for (long i = 0; i < v.size(); i += 2) {\n            if (v[i] == 0)\
    \ {\n                if (arr[v[i + 1]] >= arr[v[i + 1] + 1]) {\n             \
    \       return 1;\n                } else {\n                    return 2;\n \
    \               }\n            } else if", "  long sum = 0;\n  int n = arr.size();\n\
    \  for (int i = 0; i < n / 2; i++) {\n    sum += std::abs(arr[i] - arr[n - i -\
    \ 1]);\n  }\n  return sum;", "    long n = arr.size();\n    std::vector<long>\
    \ copy = arr;\n    std::vector<long> reverse = arr;\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    std::vector<std::vector<long>> dp;\n    std::vector<long>\
    \ temp(n + 1, 0);\n    for (long i = 0; i <= n; i++)\n        dp.push_back(temp);\n\
    \    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n; j++) {\n\
    \            if (arr[i - 1] == reverse[j - 1])\n                dp[i][j] = dp[i\
    \ - 1][j - 1] + 1;\n            else\n                dp[i][j] = std::max(dp[i\
    \ - 1][j], dp[i][j - 1]);\n        }\n    }\n    long result = n - dp[n][n];\n\
    \    return result;", "    int len = arr.size();\n    int max = -1;\n    for(int\
    \ i = 0; i < len/2; i++) {\n        if(arr[i] != arr[len-i-1]) {\n           \
    \ if(arr[i] > arr[len-i-1]) {\n                arr[len-i-1] = arr[i];\n      \
    \      } else {\n                arr[i] = arr[len-i-1];\n            }\n     \
    \       max = i;\n        }\n    }\n    if(max == -1) {\n        return 0;\n \
    \   }\n    return len-1-max;", "  if (arr.size() == 0) return 0;\n  if (arr.size()\
    \ == 1) return 1;\n  int length = arr.size();\n  int start = 0;\n  int end = length\
    \ - 1;\n  int ans = 0;\n  int middle = (start + end) / 2;\n  while (start < end)\
    \ {\n    if (arr[start] != arr[end]) {\n      ans++;\n    }\n    start++;\n  \
    \  end--;\n  }\n  return ans;", "    int n = arr.size();\n    int count = 0;\n\
    \    int first = 0;\n    int last = n - 1;\n    while (first < last) {\n     \
    \   if (arr[first] != arr[last]) {\n            count++;\n        }\n        first++;\n\
    \        last--;\n    }\n    return count;", '    return 0;', '  return 0;', " \
    \   long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i\
    \ = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2)\n                dp[i][j] = 0;\n            else if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i][j - 1], dp[i + 1][j]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "  long count=0;\n  for(int i=0;i<arr.size()/2;i++){\n\
    \    if(arr[i]!=arr[arr.size()-1-i]){\n      count++;\n    }\n  }\n  return count;",
  "    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n/2; i++)\
    \ {\n        if(arr[i] != arr[n-i-1]) {\n            count++;\n        }\n   \
    \ }\n    return count;", "    long len = arr.size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < len/2; i++) {\n        if(arr[i] != arr[len-i-1]) {\n           \
    \ ans++;\n        }\n    }\n    return ans;", "    // your code here\n    if(arr.size()\
    \ == 0)\n        return 0;\n    if(arr.size() == 1)\n        return 1;\n    if(arr.size()\
    \ == 2)\n        return 2;\n    if(arr.size() == 3)\n        return 2;\n    if(arr.size()\
    \ == 4)\n        return 3;\n    int n = arr.size();\n    std::vector<long> v(n);\n\
    \    for(int i = 0; i < n; i++)\n        v[i] = arr[i];\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n));\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int i = 0; i < n - 1; i++)\n        dp[i][i + 1] = v[i] != v[i\
    \ + 1];\n    for(int i = 2; i < n; i++)\n    {\n        for(int j = 0; j < n -\
    \ i; j++)\n        {\n            int k = j + i;\n            dp[j][k] = dp[j\
    \ + 1][k - 1] + v[j] != v[k];\n        }\n    }\n    return dp[0][n - 1];", " \
    \ long changes = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n    if (arr[i]\
    \ != arr[arr.size() - 1 - i]) {\n      changes++;\n    }\n  }\n  return changes;",
  "  long ans = 0;\n  for (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] !=\
    \ arr[arr.size() - 1 - i]) {\n      ans++;\n    }\n  }\n  return ans;", "  std::vector<std::vector<long>>\
    \ dp(arr.size(), std::vector<long>(arr.size(), LONG_MAX));\n  for (int i = 0;\
    \ i < arr.size(); i++)\n    dp[i][i] = 0;\n  for (int len = 2; len <= arr.size();\
    \ len++) {\n    for (int i = 0; i <= arr.size() - len; i++) {\n      int j = i\
    \ + len - 1;\n      if (len == 2) {\n        if (arr[i] == arr[j])\n         \
    \ dp[i][j] = 0;\n        else\n          dp[i][j] = 1;\n      } else {\n     \
    \   dp[i][j] = std::min(dp[i][j], std::min(dp[i + 1][j - 1], dp[i + 1][j]) + 1);\n\
    \        dp[i][j] = std::min(dp[i][j], dp[i][j - 1] + 1);\n      }\n    }\n  }\n\
    \  return dp[0][arr.size() - 1];", "    // Your code here.\n    std::vector<long>\
    \ left(arr.size());\n    std::vector<long> right(arr.size());\n    std::map<long,\
    \ long> mp;\n    long suml=0, sumr=0;\n    for(long i=0; i<arr.size(); i++){\n\
    \        suml+=arr[i];\n        left[i]=suml;\n        mp[arr[i]]++;\n    }\n\
    \    for(long i=arr.size()-1; i>=0; i--){\n        sumr+=arr[i];\n        right[i]=sumr;\n\
    \    }\n    long minm=INT_MAX;\n    for(long i=0; i<arr.size(); i++){\n      \
    \  if(left[i]!=right[i]){\n            mp[arr[i]]--;\n            long val=(left[i]-arr[i])\
    \ + (right[i]-arr[i]);\n            if(mp[val]>0){\n                minm=std::min(minm,\
    \ mp[val]);\n            }\n            mp[arr[i]]++;\n        }\n    }\n    return\
    \ minm;", "  if (arr.size() == 0) return 0;\n  long n = arr.size();\n  std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, INT_MAX));\n  for (long i = 0; i < n; i++) {\n  \
    \  dp[i][i] = 0;\n  }\n  for (long s = 0; s < n; s++) {\n    for (long i = 0;\
    \ i < n - s; i++) {\n      long j = i + s;\n      if (s == 1) {\n        dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n      } else {\n        dp[i][j] =\n          \
    \  std::min(dp[i + 1][j], dp[i][j - 1]) + (arr[i] == arr[j] ? 0 : 1);\n      }\n\
    \    }\n  }\n  return dp[0][n - 1];", "  long min_cost = 0;\n  long left = 0;\n\
    \  long right = arr.size() - 1;\n  while (left < right) {\n    if (arr[left] ==\
    \ arr[right]) {\n      left++;\n      right--;\n    } else {\n      if (arr[left]\
    \ < arr[right]) {\n        arr[left + 1] = arr[left] + arr[left + 1];\n      \
    \  left++;\n      } else {\n        arr[right - 1] = arr[right] + arr[right -\
    \ 1];\n        right--;\n      }\n      min_cost++;\n    }\n  }\n  return min_cost;",
  "    long n = arr.size();\n    long count = 0;\n    long left = 0;\n    long right\
    \ = n - 1;\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n\
    \            count++;\n        }\n        left++;\n        right--;\n    }\n \
    \   return count;", "    long n = arr.size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n/2; i++) {\n        if(arr[i] != arr[n-i-1]) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    int start = 0;\n    int end = arr.size()\
    \ - 1;\n    int count = 0;\n    while (start < end) {\n        if (arr[start]\
    \ != arr[end]) {\n            count++;\n        }\n        start++;\n        end--;\n\
    \    }\n    return count;", "  auto size = arr.size();\n  if (size < 2) {\n  \
    \  return 0;\n  }\n  std::vector<long> change;\n  for (auto i = 0; i < size /\
    \ 2; ++i) {\n    if (arr[i] != arr[size - i - 1]) {\n      change.push_back(arr[i]);\n\
    \      change.push_back(arr[size - i - 1]);\n    }\n  }\n  std::sort(change.begin(),\
    \ change.end());\n  return change.size() / 2;", "  // your code here\n  int i\
    \ = 0;\n  int j = arr.size() - 1;\n  int counter = 0;\n  while (i <= j) {\n  \
    \  if (arr[i] != arr[j]) {\n      counter++;\n    }\n    i++;\n    j--;\n  }\n\
    \  return counter;", '  // your code here', "  // Insert your code here\n  return\
    \ 0;", "    // insert your code here\n    int l = 0;\n    int r = arr.size() -\
    \ 1;\n    int count = 0;\n    while (l < r) {\n        if (arr[l] != arr[r]) {\n\
    \            count++;\n        }\n        l++;\n        r--;\n    }\n    return\
    \ count;", "  long count = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n\
    \    if (arr[i] != arr[arr.size() - 1 - i]) {\n      count++;\n    }\n  }\n  return\
    \ count;", "    // your code here\n    int left = 0;\n    int right = arr.size()\
    \ - 1;\n    int res = 0;\n    while (left < right) {\n        if (arr[left] !=\
    \ arr[right]) {\n            res++;\n        }\n        left++;\n        right--;\n\
    \    }\n    return res;", "    long n = arr.size();\n    std::vector<std::vector<long>>\
    \ dp(n, std::vector<long>(n, 0));\n    for (long i = 0; i < n; i++) {\n      \
    \  dp[i][i] = 1;\n    }\n    for (long l = 2; l <= n; l++) {\n        for (long\
    \ i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if\
    \ (arr[i] == arr[j] && l == 2) {\n                dp[i][j] = 2;\n            }\
    \ else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] +\
    \ 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return (n - dp[0][n - 1]);",
  "  // your code here\n  return 0;", "  // Write your code here\n  long n = arr.size();\n\
    \  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  for (long\
    \ i = 0; i < n; i++) {\n    dp[i][i] = 0;\n  }\n  for (long l = 2; l <= n; l++)\
    \ {\n    for (long i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n \
    \     if (arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1];\n      } else\
    \ {\n        dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n      }\n \
    \   }\n  }\n  return dp[0][n - 1];", "    std::vector<long> reverse;\n    reverse.reserve(arr.size());\n\
    \    std::copy(arr.rbegin(), arr.rend(), std::back_inserter(reverse));\n    std::vector<long>\
    \ bts(arr.size() + 1, 0);\n    int i = 0, j = 0;\n    while (i < arr.size()) {\n\
    \        if (arr[i] == reverse[j]) {\n            bts[i + 1] = bts[i] + 1;\n \
    \           i++;\n            j++;\n        } else {\n            bts[i + 1] =\
    \ bts[i];\n            i++;\n        }\n    }\n    return arr.size() - bts[arr.size()];",
  "  // TODO: Write your code here.\n  int n = arr.size();\n  int start = 0, end =\
    \ n-1;\n  int count = 0;\n  while(start < end){\n    if(arr[start] == arr[end]){\n\
    \      start++;\n      end--;\n    }\n    else if(arr[start] < arr[end]){\n  \
    \    start++;\n      arr[start] = arr[start - 1];\n      count++;\n    }\n   \
    \ else{\n      end--;\n      arr[end] = arr[end + 1];\n      count++;\n    }\n\
    \  }\n  return count;", "    int i = 0;\n    int j = arr.size() - 1;\n    int\
    \ count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n         \
    \   count++;\n        }\n        i++;\n        j--;\n    }\n    return count;",
  "    std::cout << \"In function\" << std::endl;\n    int n = arr.size();\n    int\
    \ i = 0;\n    int j = n-1;\n    int count = 0;\n    while(i<j){\n        if(arr[i]\
    \ != arr[j])\n            count++;\n        i++;\n        j--;\n    }\n    return\
    \ count;", "    int n = arr.size();\n    int i = 0, j = n - 1;\n    int res =\
    \ 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            res++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;", "\tstd::vector<long>\
    \ temp(arr.size());\n\tstd::vector<long> min_num_changes(arr.size());\n\tlong\
    \ len = arr.size();\n\tlong result;\n\tstd::copy(arr.begin(), arr.end(), temp.begin());\n\
    \tstd::reverse(temp.begin(), temp.end());\n\tfor (long i = 0; i < len; i++) {\n\
    \t\tmin_num_changes[i] = arr[i] - temp[i];\n\t\tif (min_num_changes[i] < 0) {\n\
    \t\t\tmin_num_changes[i] = -1 * min_num_changes[i];\n\t\t}\n\t}\n\tstd::sort(min_num_changes.begin(),\
    \ min_num_changes.end());\n\tlong max = std::max_element(min_num_changes.begin(),\
    \ min_num_changes.end());\n\tresult = min_num_changes[max];\n\treturn result;",
  "  // Write your code here\n  std::vector<long> rarr(arr.rbegin(), arr.rend());\n\
    \  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] !=\
    \ rarr[i]) {\n      sum += 1;\n    }\n  }\n  return sum / 2;", "    //Your code\
    \ here\n    return 0;", "  int i = 0;\n  int j = arr.size() - 1;\n  int count\
    \ = 0;\n  while (i < j) {\n    if (arr[i] != arr[j]) {\n      ++count;\n    }\n\
    \    ++i;\n    --j;\n  }\n  return count;", "    // YOUR CODE HERE\n    if(arr.size()<=1)return\
    \ 0;\n    long n=arr.size();\n    if(n==2)return (arr[0]==arr[1])?0:1;\n    if(n==3)return\
    \ (arr[0]==arr[1]&&arr[1]==arr[2])?0:((arr[0]==arr[2])?1:2);\n    long count=0;\n\
    \    for(long i=0;i<n/2;i++){\n        if(arr[i]!=arr[n-i-1])count++;\n    }\n\
    \    return count;", "    // your code goes here\n    long size=arr.size();\n\
    \    long count=0;\n    for(long i=0;i<size/2;i++)\n    {\n        if(arr[i]!=arr[size-i-1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Your code here\n    // return -1;\n    if(arr.size() == 0)\n        return 0;\n\
    \    if(arr.size() == 1)\n        return 1;\n    if(arr.size() == 2)\n       \
    \ return (arr[0] == arr[1]) ? 0 : 1;\n    long i = 0, j = arr.size() - 1;\n  \
    \  long ans = 0;\n    while(i < j)\n    {\n        if(arr[i] == arr[j])\n    \
    \    {\n            i++;\n            j--;\n        }\n        else\n        {\n\
    \            if(arr[i] < arr[j])\n            {\n                arr[i + 1] =\
    \ arr[i];\n                i++;\n                ans++;\n            }\n     \
    \       else\n            {\n                arr[j - 1] = arr[j];\n          \
    \      j--;\n                ans++;\n            }\n        }\n    }\n    return\
    \ ans;", "    int counter = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n\
    \        if (arr[i] != arr[arr.size() - 1 - i]) {\n            counter++;\n  \
    \      }\n    }\n    return counter;", "    int beg = 0;\n    int end = arr.size()\
    \ - 1;\n    int count = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n \
    \       if (arr[beg] != arr[end]) {\n            count++;\n        }\n       \
    \ beg++;\n        end--;\n    }\n    return count;", "  long cnt = 0;\n  for (size_t\
    \ i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i])\
    \ {\n      cnt++;\n    }\n  }\n  return cnt;", "    int a = arr.size();\n    //\
    \ Write your code here!\n    int i = 0;\n    int j = a-1;\n    int ans = 0;\n\
    \    while(i < j){\n        if(arr[i] == arr[j]){\n            i++;\n        \
    \    j--;\n        }\n        else{\n            if(arr[i] < arr[j]){\n      \
    \          arr[i+1] = arr[i] + arr[i+1];\n                ans++;\n           \
    \     i++;\n            }\n            else{\n                arr[j-1] = arr[j]\
    \ + arr[j-1];\n                ans++;\n                j--;\n            }\n \
    \       }\n    }\n    return ans;", "  std::reverse(arr.begin(), arr.end());\n\
    \  std::vector<long> lcs(arr.size()+1, 0);\n  for (long i = 1; i <= arr.size();\
    \ i++) {\n    for (long j = 1; j <= arr.size(); j++) {\n      if (arr[i-1] ==\
    \ arr[j-1]) {\n        lcs[j] = lcs[j-1] + 1;\n      } else {\n        lcs[j]\
    \ = std::max(lcs[j], lcs[j-1]);\n      }\n    }\n  }\n  return arr.size() - lcs[arr.size()];",
  "    // your code goes here\n    long n = arr.size();\n    long diff[n+1][n+1];\n\
    \    long length = n+1;\n    memset(diff,0,sizeof(diff));\n    for(long i=0;i<length;i++)\n\
    \        diff[i][0] = 0;\n    for(long i=0;i<length;i++)\n        diff[0][i] =\
    \ 0;\n    for(long i=1;i<length;i++)\n    {\n        for(long j=1;j<length;j++)\n\
    \        {\n            if(arr[i-1]==arr[n-j])\n                diff[i][j] = diff[i-1][j-1];\n\
    \            else\n                diff[i][j] = std::min(diff[i-1][j-1],std::min(diff[i-1][j],diff[i][j-1]))+1;\n\
    \        }\n    }\n    return diff[n][n];", '', "    if(arr.size() == 0) return\
    \ 0;\n    long left = 0, right = arr.size() - 1;\n    long changes = 0;\n    while(left\
    \ < right) {\n        if(arr[left] != arr[right])\n            changes++;\n  \
    \      left++;\n        right--;\n    }\n    return changes;", "    long n = arr.size();\n\
    \    if(n == 0)\n        return -1;\n    if(n == 1)\n        return arr[0];\n\
    \    long i = 0, j = n-1;\n    long changes = 0;\n    while(i < j){\n        if(arr[i]\
    \ == arr[j]){\n            i++;\n            j--;\n        }else{\n          \
    \  if(arr[i] > arr[j]){\n                arr[j-1] += arr[j];\n               \
    \ j--;\n            }else{\n                arr[i+1] += arr[i];\n            \
    \    i++;\n            }\n            changes++;\n        }\n    }\n    return\
    \ changes;", "\tint count = 0;\n\tint i = 0;\n\tint j = arr.size() - 1;\n\twhile\
    \ (i <= j) {\n\t\tif (arr[i] != arr[j]) {\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t\
    \tj--;\n\t}\n\treturn count;", "  long n = arr.size();\n  long dp[n][n];\n  memset(dp,\
    \ 0, sizeof(dp));\n  long sum[n][n];\n  memset(sum, 0, sizeof(sum));\n  for (long\
    \ i = 0; i < n; i++) {\n    sum[i][i] = arr[i];\n    for (long j = i + 1; j <\
    \ n; j++) {\n      sum[i][j] = sum[i][j - 1] + arr[j];\n    }\n  }\n  for (long\
    \ i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for (long l = 2; l <= n; l++) {\n \
    \   for (long i = 0; i < n - l + 1; i++) {\n      long j = i + l - 1;\n      dp[i][j]\
    \ = INT_MAX;\n      for (long k = i; k < j; k++) {\n        long q = dp[i][k]\
    \ + dp[k + 1][j] + sum[i][k] + sum[k + 1][j];\n        if (q < dp[i][j])\n   \
    \       dp[i][j] = q;\n      }\n    }\n  }\n  return dp[0][n - 1];", "  long sz\
    \ = arr.size();\n  long ans = 0;\n  for (long i = 0; i < sz / 2; i++) {\n    long\
    \ x = arr[i];\n    long y = arr[sz - i - 1];\n    if (x != y)\n      ans++;\n\
    \  }\n  return ans;", "\tlong count = 0;\n\tlong len = arr.size();\n\tstd::vector<long>\
    \ temp(len, 0);\n\tfor (long i = 0; i < len; i++) {\n\t\ttemp[i] = arr[i];\n\t\
    }\n\tfor (long i = 0; i < len / 2; i++) {\n\t\tif (arr[i] != arr[len - i - 1])\
    \ {\n\t\t\tarr[i] = arr[len - i - 1];\n\t\t\tcount++;\n\t\t}\n\t}\n\tbool flag\
    \ = true;\n\tfor (long i = 0; i < len / 2; i++) {\n\t\tif (temp[i] != temp[len\
    \ - i - 1]) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\
    \treturn 0;\n\t}\n\tflag = true;\n\tfor (long i = 0; i < len / 2; i++) {\n\t\t\
    if (arr[i] != arr[len - i - 1]) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif (flag) {\n\t\treturn count;\n\t}\n\treturn count + 1;", "    //your code\
    \ here\n    std::vector<long> arr_rev = arr;\n    std::reverse(arr_rev.begin(),\
    \ arr_rev.end());\n    std::vector<std::vector<long>> dp(arr.size() + 1, std::vector<long>(arr.size()\
    \ + 1, 0));\n    for (int i = 1; i <= arr.size(); i++) {\n        for (int j =\
    \ 1; j <= arr.size(); j++) {\n            if (arr[i - 1] == arr_rev[j - 1]) {\n\
    \                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n    \
    \            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);\n            }\n\
    \        }\n    }\n    int res = dp[arr.size()][arr.size()];\n    return arr.size()\
    \ - res;", "    std::vector<long> a;\n    std::vector<long> b;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(i<arr.size()/2){\n            a.push_back(arr[i]);\n        }\n  \
    \      else if(i>arr.size()/2){\n            b.push_back(arr[i]);\n        }\n\
    \    }\n    reverse(b.begin(),b.end());\n    long c=0;\n    for(int i=0;i<a.size();i++){\n\
    \        if(a[i]!=b[i]){\n            c++;\n        }\n    }\n    return c;",
  "  // Your code here\n  if(arr.size()==0)\n    return 0;\n  if(arr.size()==1)\n\
    \    return 0;\n  if(arr.size()==2)\n    return 1;\n  if(arr.size()==3)\n    return\
    \ 2;\n  if(arr.size()==4)\n    return 3;\n  if(arr.size()==5)\n    return 4;\n\
    \  if(arr.size()==6)\n    return 5;\n  if(arr.size()==7)\n    return 6;\n  if(arr.size()==8)\n\
    \    return 7;\n  if(arr.size()==9)\n    return 8;\n  if(arr.size()==10)\n   \
    \ return 9;\n  if(arr.size()==11)\n    return 10;\n  if(arr.size()==12)\n    return\
    \ 11;\n  if(arr.size()==13)\n    return 12;\n  if(arr.size()==14)\n    return\
    \ 13;\n  if(arr.size()==15)\n    return 14;\n  if(arr.size()==16)\n    return\
    \ 15;\n  if(arr.size()==17)\n    return 16;\n  if(arr.size()==18)\n    return\
    \ 17;\n  if(arr.size()==19)\n    return 18;\n  if(arr.size()==20)\n    return\
    \ 19;\n  if(arr.size()==21)\n    return 20;\n  if(arr.size()==22)\n    return\
    \ 21;\n  if(arr.size()==23)\n    return 22;\n  if(arr.size()==24)\n    return\
    \ 23;\n  if(arr.size()==25)\n    return 24;\n  if(arr.size()==26)\n    return\
    \ 25;\n  if(arr.size()==27)\n    return 26;\n  if(arr.size()==28)\n    return\
    \ 27;\n  if(arr.size()==29)\n    return 28;\n  if(arr.size()==30)\n    return\
    \ 29;\n  if(arr.size()==31", "  long c=0;\n  for(long i=0;i<arr.size()/2;i++)\n\
    \  {\n    if(arr[i]!=arr[arr.size()-1-i])\n    {\n      c++;\n    }\n  }\n  return\
    \ c;", "  int n = arr.size();\n  std::vector<std::vector<long>> cache(n, std::vector<long>(n,\
    \ -1));\n  long ret = recur(0, n - 1, arr, cache);\n  return ret;", "  int n =\
    \ arr.size();\n  if (n == 0) return 0;\n  std::vector<std::vector<long>> dp(n,\
    \ std::vector<long>(n, 0));\n  for (int i = 0; i < n; i++) {\n    dp[i][i] = 1;\n\
    \  }\n  for (int i = n - 2; i >= 0; i--) {\n    for (int j = i + 1; j < n; j++)\
    \ {\n      if (arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n\
    \      } else {\n        dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n  \
    \    }\n    }\n  }\n  return n - dp[0][n - 1];", "\tint n = arr.size();\n\tint\
    \ ans = 0;\n\tfor (int i = 0; i < n / 2; i++) {\n\t\tif (arr[i] != arr[n - i -\
    \ 1]) {\n\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;", "    if(arr.size() == 0) return\
    \ 0;\n    int n = arr.size();\n    int min_changes = 0;\n    for(int i = 0; i\
    \ < n / 2; i++) {\n        min_changes += abs(arr[i] - arr[n - i - 1]);\n    }\n\
    \    return min_changes;", "  // Write your code here\n  long n = arr.size();\n\
    \  long left = 0;\n  long right = n - 1;\n  long diff = 0;\n  long count = 0;\n\
    \  while (left < right) {\n    if (arr[left] != arr[right]) {\n      if (arr[left]\
    \ > arr[right]) {\n        arr[right] = arr[left];\n      } else {\n        arr[left]\
    \ = arr[right];\n      }\n      count++;\n    }\n    left++;\n    right--;\n \
    \ }\n  return count;", "    long len = arr.size();\n    long sum = 0;\n    for(long\
    \ i = 0; i < len / 2; i++) {\n        sum += std::abs(arr[i] - arr[len - i - 1]);\n\
    \    }\n    return sum;", "    int l = 0;\n    int r = arr.size() - 1;\n    int\
    \ ans = 0;\n    while (l < r) {\n        if (arr[l] != arr[r])\n            ans++;\n\
    \        l++;\n        r--;\n    }\n    return ans;", "\tlong n = arr.size();\n\
    \tif (n == 0)\n\t\treturn 0;\n\tlong i = 0, j = n - 1;\n\tlong ctr = 0;\n\twhile\
    \ (i < j) {\n\t\tif (arr[i] != arr[j])\n\t\t\tctr++;\n\t\ti++;\n\t\tj--;\n\t}\n\
    \treturn ctr;", "    // your code here\n    int n = arr.size();\n    int lo =\
    \ 0, hi = n-1;\n    int count = 0;\n    while(lo<hi){\n        if(arr[lo]!=arr[hi])\n\
    \            count++;\n        lo++;\n        hi--;\n    }\n    return count;",
  "    long sum1=0,sum2=0;\n    int n=arr.size();\n    for(int i=0;i<n/2;i++)\n  \
    \  {\n        sum1+=arr[i];\n        sum2+=arr[n-i-1];\n    }\n    if(n%2!=0)\n\
    \    {\n        sum1+=arr[n/2];\n    }\n    return sum1-sum2;", "   int count=0;\n\
    \   for(int i=0;i<arr.size()/2;i++)\n   {\n      count+=abs(arr[i]-arr[arr.size()-i-1]);\n\
    \   }\n   return count;", "  std::cout << \"Input array: \";\n  for (auto x :\
    \ arr) {\n    std::cout << x << \" \";\n  }\n  std::cout << std::endl;\n  // TODO:\
    \ implement me!\n  int i = 0;\n  int j = arr.size() - 1;\n  int count = 0;\n \
    \ while (i < j) {\n    if (arr[i] != arr[j]) {\n      count++;\n    }\n    i++;\n\
    \    j--;\n  }\n  return count;", "  std::vector<long> revArr;\n  for(int i =\
    \ arr.size() - 1; i >= 0; i--) {\n    revArr.push_back(arr[i]);\n  }\n  long dp[arr.size()\
    \ + 1][arr.size() + 1];\n  long i, j;\n  for(i = 0; i <= arr.size(); i++) {\n\
    \    for(j = 0; j <= arr.size(); j++) {\n      if(i == 0 || j == 0) {\n      \
    \  dp[i][j] = 0;\n      } else if(arr[i - 1] == revArr[j - 1]) {\n        dp[i][j]\
    \ = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = std::max(dp[i -\
    \ 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return (arr.size() - dp[arr.size()][arr.size()]);",
  "    int n = arr.size();\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n \
    \   int a, b;\n    int answer = 0;\n    for(int i = 0; i < n/2; i++) {\n     \
    \   a = arr[i];\n        b = arr[n-i-1];\n        if(a != b) {\n            answer\
    \ += abs(a-b);\n        }\n    }\n    return answer;", '    // Your code here',
  "    // Write your code here\n    std::vector<long> dp(arr.size(), 0);\n    for\
    \ (int i = arr.size() - 1; i >= 0; i--) {\n        if (i >= arr.size() - 1) {\n\
    \            dp[i] = 0;\n        } else if (arr[i] == arr[i + 1]) {\n        \
    \    dp[i] = dp[i + 1];\n        } else {\n            dp[i] = 1 + dp[i + 1];\n\
    \        }\n    }\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        if\
    \ (i == arr.size() - 1) {\n            dp[i] = 0;\n        } else if (arr[i] ==\
    \ arr[i + 1]) {\n            dp[i] = dp[i + 1];\n        } else {\n          \
    \  dp[i] = 1 + dp[i + 1];\n        }\n    }\n    long min_changes = arr.size();\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i; j < arr.size();\
    \ j++) {\n            std::vector<long> temp(arr.begin() + i, arr.begin() + j\
    \ + 1);\n            std::reverse(temp.begin(), temp.end());\n            long\
    \ changes = 0;\n            for (int k = 0; k < temp.size(); k++) {\n        \
    \        if (temp[k] != arr[i + k]) {\n                    changes++;\n      \
    \          }\n            }\n            min_changes = std::min(min_changes, changes);\n\
    \        }\n    }\n    return min_changes;", "  // your code goes here\n  return\
    \ 0;", "    long n = arr.size();\n    long ans = 0;\n    for(long i = 0; i < n/2;\
    \ i++) {\n        if(arr[i] != arr[n-i-1]) {\n            ans++;\n        }\n\
    \    }\n    return ans;", "    if(arr.size()==0){\n        return 0;\n    }\n\
    \    long answer = 0;\n    std::stack<long>s;\n    long count =0;\n    long i=0;\n\
    \    for(long m=0;m<arr.size();m++){\n        s.push(arr[m]);\n    }\n    long\
    \ j=s.size()-1;\n    long val = 0;\n    while(i<=j){\n        if(arr[i] == s.top()){\n\
    \            i++;\n            j--;\n            s.pop();\n        }\n       \
    \ else{\n            if(arr[i]==arr[j]){\n                answer+=1;\n       \
    \         i++;\n                j--;\n            }\n            else{\n     \
    \           if(arr[i] != arr[j-1]){\n                    answer+=1;\n        \
    \            i++;\n                }\n                else{\n                \
    \    answer+=1;\n                    j--;\n                }\n            }\n\
    \        }\n    }\n    return answer;", "    long n = arr.size();\n    long minDiff\
    \ = INT_MAX;\n    std::vector<long> leftSum(n,0);\n    std::vector<long> rightSum(n,0);\n\
    \    leftSum[0] = arr[0];\n    rightSum[n-1] = arr[n-1];\n    for(long i = 1;\
    \ i < n; i++) {\n        leftSum[i] = leftSum[i-1] + arr[i];\n    }\n    for(long\
    \ i = n-2; i >= 0; i--) {\n        rightSum[i] = rightSum[i+1] + arr[i];\n   \
    \ }\n    for(long i = 0; i < n; i++) {\n        minDiff = std::min(minDiff, abs(leftSum[i]\
    \ - rightSum[i]));\n    }\n    return minDiff;", "  std::vector<long> left = arr;\n\
    \  std::vector<long> right = arr;\n  std::reverse(right.begin(), right.end());\n\
    \  auto end = left.rend();\n  long sum = 0;\n  auto itl = left.begin();\n  auto\
    \ itr = right.begin();\n  while (itl != end) {\n    if (*itl != *itr) {\n    \
    \  sum += 1;\n    }\n    itl++;\n    itr++;\n  }\n  return sum;", "  //your code\
    \ here\n    long res = 0;\n    long l = 0;\n    long r = arr.size() - 1;\n   \
    \ while(l < r) {\n        if(arr[l] == arr[r]) {\n            l++;\n         \
    \   r--;\n        } else {\n            long res1 = 1;\n            long res2\
    \ = 1;\n            long res3 = 1;\n            long res4 = 1;\n            long\
    \ res5 = 1;\n            long res6 = 1;\n            long res7 = 1;\n        \
    \    long res8 = 1;\n            long res9 = 1;\n            long res10 = 1;\n\
    \            long res11 = 1;\n            long res12 = 1;\n            long res13\
    \ = 1;\n            long res14 = 1;\n            long res15 = 1;\n           \
    \ long res16 = 1;\n            long res17 = 1;\n            long res18 = 1;\n\
    \            long res19 = 1;\n            long res20 = 1;\n            long res21\
    \ = 1;\n            long res22 = 1;\n            long res23 = 1;\n           \
    \ long res24 = 1;\n            long res25 = 1;\n            long res26 = 1;\n\
    \            long res27 = 1;\n            long res28 = 1;\n            long res29\
    \ = 1;\n            long res30 = 1;\n            long res31 = 1;\n           \
    \ long res32 = 1;\n            long res33 = 1;\n            long res34 = 1;\n\
    \            long res35 = 1;\n            long res36 = 1;\n            long res37\
    \ = 1;\n            long res38 = 1;\n            long res39 = 1;\n           \
    \ long res40 = 1;\n            long res41 = 1;\n            long res42 = 1;\n\
    \            long res43 = 1;\n            long res44 = 1;\n            long res45\
    \ = 1;\n            long res46 = 1;\n            long res47 = 1;\n           \
    \ long res48 = 1;\n            long res49 = 1;\n            long res50 = 1;\n\
    \            long res51 = 1;\n            long res52 = 1;\n            long res53\
    \ = 1;\n            long res54 = 1;\n            long res55 = 1;\n           \
    \ long", "   int count = 0;\n   int n = arr.size();\n   std::vector<int> rev(arr.begin(),\
    \ arr.end());\n   std::reverse(rev.begin(), rev.end());\n   for(int i = 0; i <\
    \ n; i++) {\n       if(arr[i] != rev[i]) {\n           count++;\n       }\n  \
    \ }\n   return count/2;", "    int n = arr.size();\n    std::vector<std::vector<int>>\
    \ L(n, std::vector<int>(n));\n    int i, j, gap;\n    for (gap = 1; gap < n; ++gap)\n\
    \        for (i = 0, j = gap; j < n; ++i, ++j)\n            L[i][j] = (arr[i]\
    \ == arr[j])? L[i+1][j-1] :\n                      (std::min(L[i][j-1], L[i+1][j])\
    \ + 1);\n    return L[0][n-1];", "  long n = arr.size();\n  long i = 0, j = n\
    \ - 1;\n  long ans = 0;\n  while (i < j) {\n    while (i < j && arr[i] == arr[j])\
    \ {\n      i++;\n      j--;\n    }\n    if (i >= j)\n      break;\n    if (arr[i]\
    \ > arr[j]) {\n      arr[j - 1] += arr[j];\n      j--;\n    } else {\n      arr[i\
    \ + 1] += arr[i];\n      i++;\n    }\n    ans++;\n  }\n  return ans;", "    long\
    \ mn = 0;\n    int i = 0,j = arr.size()-1;\n    while(i<j){\n        if(arr[i]\
    \ != arr[j])\n            mn++;\n        i++;j--;\n    }\n    return mn;", " \
    \   // TODO: Write your code here\n    int left = 0, right = arr.size() - 1;\n\
    \    int count = 0;\n    while(left < right){\n        if(arr[left] != arr[right]){\n\
    \            count++;\n        }\n        left++;\n        right--;\n    }\n \
    \   return count;", "  long result = 0;\n  for (size_t i = 0; i < arr.size() /\
    \ 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      ++result;\n \
    \   }\n  }\n  return result;", "    // Write your code here\n    int n = arr.size();\n\
    \    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n\
    \            count++;\n        }\n    }\n    return count;", "\tlong l=0,r=arr.size()-1;\n\
    \tlong change=0;\n\twhile(l<r){\n\t\tif(arr[l]==arr[r]){\n\t\t\tl++;\n\t\t\tr--;\n\
    \t\t}\n\t\telse{\n\t\t\tif(arr[l]>arr[r]){\n\t\t\t\tr--;\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tl++;\n\t\t\t}\n\t\t\tchange++;\n\t\t}\n\t}\n\treturn change;", "  int\
    \ n = arr.size();\n  int dp[n][n];\n  for(int i = 0; i < n; i++) {\n    for(int\
    \ j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for(int L = 2; L <=\
    \ n; L++) {\n    for(int i = 0; i < n - L + 1; i++) {\n      int j = i + L - 1;\n\
    \      if(L == 2) {\n        dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n      } else\
    \ {\n        if(arr[i] == arr[j]) {\n          dp[i][j] = dp[i + 1][j - 1];\n\
    \        } else {\n          dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) +\
    \ 1;\n        }\n      }\n    }\n  }\n  return dp[0][n - 1];"]
stop_tokens:
- "\n}"
