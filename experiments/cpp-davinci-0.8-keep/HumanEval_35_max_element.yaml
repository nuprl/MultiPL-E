name: HumanEval_35_max_element
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in\
  \ the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5,\
  \ 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
  \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
completions: ["    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n   \
    \     if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    assert(l.size() > 0);\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;", '  return *std::max_element(l.begin(), l.end());', "\t\
    long max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max)\
    \ {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    long max=l[0];\n    for(int\
    \ i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n        {\n            max=l[i];\n\
    \        }\n    }\n  return max;", "  long max = l[0];\n  for (long i = 1; i <\
    \ l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;", "  assert(l.size() > 0);\n  long max_ = l[0];\n  for (auto i : l) {\n\
    \    if (i > max_)\n      max_ = i;\n  }\n  return max_;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long result = 0;\n    for (long i=0; i<l.size(); i++) {\n      \
    \  if (l[i] > result) {\n            result = l[i];\n        }\n    }\n    return\
    \ result;", "    int max = l[0];\n    for(int i = 0; i < l.size(); i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;",
  "    long ret = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (ret <\
    \ l[i]) {\n            ret = l[i];\n        }\n    }\n    return ret;", "\t//\
    \ >>>  your code goes here\n\tlong i,max=l[0];\n\tfor(i=0;i<l.size();i++)\n\t\
    {\n\t\tif(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;", "   \
    \ // YOUR CODE HERE\n    long max= l[0];\n    for(long i = 1; i < l.size(); i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for(long i=1; i<l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;", '  return
    0;', "    // Write your code here\n    return *max_element(l.begin(), l.end());",
  "  long max_num = 0;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > max_num)\
    \ {\n      max_num = l[i];\n    }\n  }\n  return max_num;", "// Your code here\n\
    \    long max = *std::max_element(l.begin(), l.end());\n    return max;", "  \
    \  long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ assert(l.size()>0);\n    long max = l[0];\n    for(int i=1;i<l.size();i++){\n\
    \        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "\tlong max = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "\tlong max = l[0];\n\
    \tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn max;", "\t// REPLACE WITH YOUR CODE.\n\treturn *std::max_element(l.begin(),\
    \ l.end());", "\tlong max;\n\tmax = l[0];\n\tfor (int i = 0; i < l.size(); i++)\
    \ {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", " \
    \   long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for(auto i: l){\n        if(i > max){\n            max\
    \ = i;\n        }\n    }\n    return max;", "\tlong maximum = 0;\n\tfor (int i\
    \ = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\
    \t\t}\n\t}\n\treturn maximum;", '    return *std::max_element(l.begin(), l.end());',
  "    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "\tlong\
    \ temp = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > temp) {\n\
    \t\t\ttemp = l[i];\n\t\t}\n\t}\n\treturn temp;", "    assert(l.size()>0);\n  \
    \  long max = l[0];\n    for(auto x: l){\n        if(x>max){\n            max\
    \ = x;\n        }\n    }\n    return max;", "    // Write your code here\n   \
    \ long maxx = INT_MIN;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>maxx){\n\
    \            maxx = l[i];\n        }\n    }\n    return maxx;", "    long max_\
    \ = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > max_)\
    \ {\n            max_ = l[i];\n        }\n    }\n    return max_;", "    long\
    \ max = 0;\n    for(auto it = l.begin(); it != l.end(); it++) {\n        if(*it\
    \ > max) {\n            max = *it;\n        }\n    }\n    return max;", "\tif\
    \ (l.size() == 0) return -1;\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > max) max = l[i];\n\t}\n\treturn max;", "    long max\
    \ = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "  // TODO: Replace\
    \ the following line with your implementation.\n  int max = l[0];\n  for(int i=0;i<l.size();i++){\n\
    \    if(l[i]>max){\n      max = l[i];\n    }\n  }\n  return max;", "  std::sort(l.begin(),\
    \ l.end());\n  long max = l[l.size()-1];\n  return max;", "  long maxi = -1;\n\
    \  for(int i = 0; i < l.size(); i++) {\n    if(l[i] > maxi) {\n      maxi = l[i];\n\
    \    }\n  }\n  return maxi;", "    long ans = l[0];\n    for(int i = 1; i < l.size();\
    \ i++) {\n        if(l[i] > ans) {\n            ans = l[i];\n        }\n    }\n\
    \    return ans;", "\t// TODO: Implement\n\t//return 0;\n\tlong ma=l[0];\n\tfor(int\
    \ i=0;i<l.size();i++)\n\t{\n\t\tif(l[i]>ma)\n\t\t\tma=l[i];\n\t}\n\treturn ma;",
  "    long max = *(l.begin());\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;", "  long max = l[0];\n\
    \  for (long i : l) {\n    if (i > max)\n      max = i;\n  }\n  return max;",
  "  if(l.size() == 0) {\n    return 0;\n  }\n  long max = l[0];\n  for(int i = 1;\
    \ i < l.size(); i++) {\n    if(l[i] > max) {\n      max = l[i];\n    }\n  }\n\
    \  return max;", "\tlong max = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\t\
    if (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "\tlong max\
    \ = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\
    \tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "  // Write your solution here\n  return\
    \ *max_element(l.begin(), l.end());", "    long maximum = *max_element(l.begin(),\
    \ l.end());\n    return maximum;", "\tlong mx = l[0];\n\tfor (long i=1; i<l.size();\
    \ i++)\n\t\tif (l[i] > mx)\n\t\t\tmx = l[i];\n\treturn mx;", "    // BEGIN\n \
    \   long max = l[0];\n    for (long n : l) {\n        if (n > max) {\n       \
    \     max = n;\n        }\n    }\n    return max;\n    // END", "\tassert(l.size()\
    \ > 0);\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "  // Replace with\
    \ your code.\n  assert(false);\n  return 0;", "    long max_so_far=0;\n    for(int\
    \ i=0;i<l.size();i++)\n    {\n        if(l[i]>max_so_far)\n        {\n       \
    \     max_so_far=l[i];\n        }\n    }\n    return max_so_far;", "    // ------------WRITE\
    \ YOUR CODE BELOW THIS LINE------------\n    return *std::max_element(l.begin(),\
    \ l.end());\n    // ------------WRITE YOUR CODE ABOVE THIS LINE------------",
  "    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "\tlong\
    \ max=l[0];\n\tfor(long i=1;i<l.size();i++)\n\t{\n\t\tif(l[i]>max)\n\t\t\tmax=l[i];\n\
    \t}\n\treturn max;", "    long max = l[0];\n    for(int i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n   \
    \ return max;", "    // Write your code here\n    long max = INT_MIN;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;", "\tlong max=0;\n\tint n=l.size();\n\tfor(int\
    \ i=0;i<n;i++)\n\t{\n\t\tif(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\t\
    return max;", "    std::vector<long>::iterator it;\n    it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;", "    int max = l[0];\n    for(int i = 1; i < l.size();\
    \ i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "\tif (l.size() == 0)\n\t\treturn -1;\n\tlong max = l[0];\n\
    \tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn max;", "  // YOUR CODE HERE\n  return *max_element(l.begin(), l.end());",
  "    long max = *std::max_element(l.begin(), l.end());\n    return max;", '  return
    *max_element(l.begin(), l.end());', "    long max = l[0];\n    for(long i = 1;\
    \ i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n  \
    \      }\n    }\n    return max;", "    long max_number = l[0];\n    for(int i\
    \ = 0; i < l.size(); i++) {\n        if(l[i] > max_number) {\n            max_number\
    \ = l[i];\n        }\n    }\n    return max_number;", "    long max = l[0];\n\
    \    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > max) {\n         \
    \   max = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n  for\
    \ (int i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "\tlong maximum = l[0];\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn\
    \ maximum;", '    return *std::max_element(l.begin(), l.end());', "    long max\
    \ = l[0];\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > max)\n \
    \           max = l[i];\n    }\n    return max;", '    return *std::max_element(l.begin(),
    l.end());', "    int max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n  \
    \      if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long int max=INT_MIN;\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\t\
    if(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;", "    long max\
    \ = l[0];\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ INT_MIN;\n    for(long i : l){\n        if(i > max){\n            max = i;\n\
    \        }\n    }\n    return max;", "    long max=l[0];\n    for(long i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;", "    assert(l.size() > 0);\n    long max = l[0];\n   \
    \ for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n          \
    \  max = l[i];\n        }\n    }\n    return max;", "    long max = 0;\n    for(int\
    \ i = 0; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    // TODO: your code here\n    long max=0;\n\
    \    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n\
    \        }\n    }\n    return max;", '    return *std::max_element(l.begin(),
    l.end());', "  long max = l[0];\n  for (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n    if (max < *it) {\n      max = *it;\n    }\n  }\n\
    \  return max;", "\tlong maximum = -1000000000;\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn\
    \ maximum;", "    long current_max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > current_max)\n            current_max = l[i];\n \
    \   }\n    return current_max;", "    long val = 0;\n    for(long i = 0; i < l.size();\
    \ i++) {\n        if(val < l[i]) {\n            val = l[i];\n        }\n    }\n\
    \    return val;", "  long max = l[0];\n  for (unsigned int i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;",
  '    return *std::max_element(l.begin(), l.end());', '    return *std::max_element(l.begin(),
    l.end());', "    long max = 0;\n    std::vector<long>::iterator it;\n    for(it\
    \ = l.begin(); it != l.end(); it++) {\n        if (*it > max) {\n            max\
    \ = *it;\n        }\n    }\n    return max;", "\tlong max = l[0];\n\tfor (long\
    \ n : l) {\n\t\tif (n > max) {\n\t\t\tmax = n;\n\t\t}\n\t}\n\treturn max;", " \
    \   long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max)\n \
    \     max = l[i];\n  }\n  return max;", "    long maxValue = INT_MIN;\n    int\
    \ size = l.size();\n    for(int i = 0; i < size; i++) {\n        if(l[i] > maxValue)\n\
    \            maxValue = l[i];\n    }\n    return maxValue;", "    long ma=l[0];\n\
    \    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>ma)\n        {\n    \
    \        ma=l[i];\n        }\n    }\n    return ma;", "\tlong max = l[0];\n\t\
    int size = l.size();\n\tfor (int i = 1; i < size; i++) {\n\t\tif (l[i] > max)\
    \ {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    long max = l[0];\n  \
    \  for(int i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n           \
    \ max = l[i];\n        }\n    }\n    return max;", "    long max = INT_MIN;\n\
    \    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > max)\n           \
    \ max = l[i];\n    }\n    return max;", '        return *std::max_element(l.begin(),
    l.end());', "    assert(l.size() != 0);\n    long max = l[0];\n    for (int i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;", "    if(l.size()==0)\n        return 0;\n    long max=l[0];\n\
    \    for(long i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n            max=l[i];\n\
    \    }\n    return max;", "    // **** ****\n    if (l.size() == 0) {\n      \
    \  return 0;\n    }\n\n    // **** ****\n    long max = l[0];\n    for (int i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n\n    // **** return maximum value ****\n    return max;",
  "\tlong max, curr;\n\tif (l.size() == 0)\n\t\treturn 0;\n\tif (l.size() == 1)\n\t\
    \treturn l[0];\n\tmax = l[0];\n\tcurr = l[0];\n\tfor (long i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > curr) {\n\t\t\tcurr = l[i];\n\t\t\tif (curr > max)\n\t\
    \t\t\tmax = curr;\n\t\t}\n\t}\n\treturn max;", "    long max=l[0];\n    int ln=l.size();\n\
    \    for(int i=1;i<ln;i++)\n    {\n        if(l[i]>max)\n        {\n         \
    \   max=l[i];\n        }\n    }\n    return max;", "    if(l.size()==0)\n    {\n\
    \        return 0;\n    }\n    else\n    {\n        long max=*max_element(l.begin(),l.end());\n\
    \        return max;\n    }", "  long max = INT32_MIN;\n  for (int i = 0; i <\
    \ l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;", '  return *std::max_element(l.begin(), l.end());', '    return *std::max_element(l.begin(),
    l.end());', "    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n \
    \       if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", '  return *std::max_element(l.begin(), l.end());', "    long m = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > m) {\n         \
    \   m = l[i];\n        }\n    }\n    return m;", '    return 0L;', "  long largest\
    \ = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > largest) {\n  \
    \    largest = l[i];\n    }\n  }\n  return largest;", "    std::vector<long> v\
    \ = l;\n    if(v.size()==0)\n    {\n        return 0;\n    }\n    long max=v[0];\n\
    \    for(int i=1;i<v.size();i++)\n    {\n        if(v[i]>max)\n        {\n   \
    \         max=v[i];\n        }\n    }\n    return max;", '  return *std::max_element(l.begin(),
    l.end());', "    int max = 0;\n    for(int i = 0; i < l.size(); i++){\n      \
    \  if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;",
  "    long max = *max_element(l.begin(), l.end());\n    return max;", "  // >>> max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  // 123\n  long max_elem = l[0];\n  for\
    \ (int i = 1; i < l.size(); i++) {\n    if (l[i] > max_elem) {\n      max_elem\
    \ = l[i];\n    }\n  }\n  return max_elem;", "    long ret = l[0];\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > ret) ret = l[i];\n    }\n  \
    \  return ret;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max)\n      max = l[i];\n  }\n  return max;", "  assert(l.size()\
    \ > 0);\n  long ans = l[0];\n  for (auto i : l) {\n    if (i > ans) ans = i;\n\
    \  }\n  return ans;", "    long max_ele = l[0];\n    for(int i=1;i<l.size();i++){\n\
    \        if(l[i]>max_ele){\n            max_ele = l[i];\n        }\n    }\n  \
    \  return max_ele;", "\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++)\
    \ {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;", "    \n    auto\
    \ i = max_element(l.begin(), l.end());\n    return *i;\n    ", "    long max =\
    \ l[0];\n    for(long x : l) {\n        if(x > max) {\n            max = x;\n\
    \        }\n    }\n    return max;", "    long max = INT_MIN;\n    for(int i =\
    \ 0; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max=l[0];\n    for(int i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;", "    long x = l[0];\n    for(long i = 0; i < l.size();\
    \ i++) {\n        if(l[i] > x)\n            x = l[i];\n    }\n    return x;",
  "    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;", "    long\
    \ max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n    \
    \        max = l[i];\n        }\n    }\n    return max;", "    // >>> max_element([1,\
    \ 2, 3])\n    // 3\n    long max = l[0];\n    // >>> max_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    // 123\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "\t/* long *p=&l[0];\n\tlong x=*p;\n\tfor(long i=0;i<l.size();i++)\n\
    \t{\n\t\tif(x<l[i])\n\t\t\tx=l[i];\n\t}\n\treturn x; */\n\treturn *max_element(l.begin(),l.end());",
  "    long max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    long m = l[0];\n    for (long n : l) {\n        if (n > m) {\n  \
    \          m = n;\n        }\n    }\n    return m;", "    assert(l.size() > 0);\n\
    \    long mx = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > mx)\n            mx = l[i];\n    }\n    return mx;", "    assert(l.size()\
    \ != 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for(long i=1; i<l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;", "    long\
    \ currMax = l[0];\n    int size = l.size();\n    for(int i = 1; i < size; i++)\
    \ {\n        if(l[i] > currMax) {\n            currMax = l[i];\n        }\n  \
    \  }\n    return currMax;", '    return *max_element(l.begin(), l.end());', "\t\
    long ma = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > ma)\n\t\
    \t\tma = l[i];\n\t}\n\treturn ma;", "\tlong max = l[0];\n\tfor (long i = 1; i\
    \ < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\
    return max;", "    long max = -1e18;\n    for(auto i : l)\n        if(i > max)\n\
    \            max = i;\n    return max;", "\tlong ret = -1;\n\tfor (int i = 0;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > ret)\n\t\t\tret = l[i];\n\t}\n\treturn\
    \ ret;", "    long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n \
    \       if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max_element = -1e18;\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] > max_element)\n            max_element = l[i];\n    }\n\
    \    return max_element;", "    if(l.size() == 0)\n        return 0;\n    long\
    \ mx = l[0];\n    for(int i = 1; i < l.size(); i++)\n        mx = max(mx, l[i]);\n\
    \    return mx;", "    // Write your code here\n    long m=l[0];\n    for(long\
    \ i=1;i<l.size();i++)\n    {\n        if(l[i]>m)\n        m=l[i];\n    }\n   \
    \ return m;", "\t// TODO: get it done", "    long max=l[0];\n    for(int i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;", "    long max = l[0];\n    for(int i = 1; i < l.size();\
    \ i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    assert(l.size()>0);\n    long max=l[0];\n    for(long\
    \ i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n        {\n            max=l[i];\n\
    \        }\n    }\n    return max;", "    if(l.size() == 0)\n        return NULL;\n\
    \    auto max = l[0];\n    for(auto it: l)\n        if(it > max)\n           \
    \ max = it;\n    return max;", '  return *std::max_element(l.begin(), l.end());',
  "    long max=0;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;", "    //\
    \ your code goes here\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n \
    \   {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n   \
    \ }\n    return max;", "  long m=INT_MIN;\n  for(long i=0;i<l.size();i++)\n  {\n\
    \    if(l[i]>m)\n    {\n      m=l[i];\n    }\n  }\n  return m;", "\tlong max =\
    \ l[0];\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn max;", "\treturn *std::max_element(l.begin(), l.end());",
  "    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;", "    if(l.size()\
    \ == 0) return -1;\n    long max = l[0];\n    for(long x : l) {\n        if(x\
    \ > max) max = x;\n    }\n    return max;", "  long maximum = l[0];\n  for (int\
    \ i = 1; i < l.size(); i++) {\n    if (l[i] > maximum) {\n      maximum = l[i];\n\
    \    }\n  }\n  return maximum;", "    long max = l[0];\n    for(int i = 1; i <\
    \ l.size(); i++) {\n        if(l[i] > max)\n            max = l[i];\n    }\n \
    \   return max;", "    // Write your code here\n    return *max_element(l.begin(),\
    \ l.end());", "    assert(!l.empty());\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    return -1;", '  return *std::max_element(l.begin(),
    l.end());', "    long max=0;\n    for(int i=0;i<l.size();i++)\n    {\n    \tif(l[i]>max)\n\
    \    \t{\n    \t\tmax=l[i];\n    \t}\n    }\n    return max;", "\tlong max = l[0];\n\
    \tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;", "\tif (l.size() == 0) {\n\t\treturn -1;\n\t}\n\tlong\
    \ max = l[0];\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "    long max = l[0];\n    for(int\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "  \n  long max = l[0];\n  for(int i = 0;\
    \ i < l.size(); i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return\
    \ max;", "  //write your code here\n  long max=l[0];\n  for(int i=1;i<l.size();i++)\n\
    \  {\n    if(l[i]>max)\n    {\n      max=l[i];\n    }\n  }\n  return max;", " \
    \ // Your code goes here.\n  return *std::max_element(l.begin(), l.end());", " \
    \   long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;", "    long max=l[0];\n\
    \    for(long i=1;i<l.size();i++)\n    {\n      if(l[i]>max)\n      {\n      \
    \  max=l[i];\n      }\n    }\n    return max;", "    long max=0;\n    for(int\
    \ i=0;i<l.size();i++)\n    {\n        if(l[i]>max)\n        {\n            max=l[i];\n\
    \        }\n    }\n    return max;", "  long max = 0;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;",
  "    assert(l.size() > 0);\n    auto iter = std::max_element(l.begin(), l.end());\n\
    \    long res = *iter;\n    return res;", "  long max_val=l[0];\n  for(auto it:l){\n\
    \    if(it>max_val)\n      max_val=it;\n  }\n  return max_val;", "    long max\
    \ = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n    \
    \        max = l[i];\n        }\n    }\n    return max;", '    return *max_element(l.begin(),
    l.end());', "    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n \
    \       if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n       \
    \ if(l[i]>max)\n        {\n            max=l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n   \
    \     if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    assert(l.size() != 0);\n    long ans\
    \ = INT_MIN;\n    for(long i = 0; i < l.size(); i++) {\n        if(l[i] > ans)\
    \ {\n            ans = l[i];\n        }\n    }\n    return ans;", "    // Your\
    \ code here\n    long maximum = l[0];\n    for(int i=1;i<l.size();i++){\n    \
    \  if(l[i]>maximum){\n        maximum = l[i];\n      }\n    }\n    return maximum;",
  "  // Write your code here\n  // To print results to the standard output you can\
    \ use print\n  // Example: print \"Hello world!\"\n  sort(l.begin(),l.end());\n\
    \  return l[l.size()-1];", "\tlong max = l[0];\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;",
  "    assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "\tlong max = l[0];\n\tfor (long i : l) {\n\t\tif (i > max)\n\
    \t\t\tmax = i;\n\t}\n\treturn max;", "    long max_el = l[0];\n    for(int i =\
    \ 1; i < l.size(); i++) {\n        if(l[i] > max_el) {\n            max_el = l[i];\n\
    \        }\n    }\n    return max_el;", "\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn max;", "    long m = -999999999999;\n    for(long i = 0; i < l.size();\
    \ i++) {\n        if(l[i] > m) {\n            m = l[i];\n        }\n    }\n  \
    \  return m;", "\t// Write your code here\n\tint max=l[0];\n\tfor(int i=0;i<l.size();i++)\n\
    \t{\n\t\tif(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;", " \
    \   if(l.size() == 0) return 0;\n    else if(l.size() == 1) return l[0];\n   \
    \ else {\n        long max = -99999999;\n        for(long i = 0; i < l.size();\
    \ i++) {\n            if(l[i] > max) max = l[i];\n        }\n        return max;\n\
    \    }", "\tassert(l.size() > 0);\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;",
  "    long m = -1e15;\n    int n = l.size();\n    for(int i = 0; i < n; i++) {\n\
    \        m = std::max(m, l[i]);\n    }\n    return m;", "    // YOUR CODE HERE\n\
    \    long max = *std::max_element(l.begin(), l.end());\n    return max;"]
stop_tokens:
- "\n}"
