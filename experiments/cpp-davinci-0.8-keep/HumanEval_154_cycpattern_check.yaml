name: HumanEval_154_cycpattern_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You\
  \ need to return True if the second word or any of its rotations is a substring\
  \ in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"\
  hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n//\
  \ cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\"\
  ) => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nbool cycpattern_check(std::string\
  \ a, std::string b) {\n"
tests: "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) ==\
  \ (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"\
  efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) ==\
  \ (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n"
completions: ["    bool result = false;\n    \n    if(a.size() == 0 || b.size() ==\
    \ 0)\n        return result;\n    \n    if(a.size() == b.size()){\n        for(int\
    \ i = 0; i < a.size(); i++){\n            if(a[i] == b[0]){\n                int\
    \ k = i;\n                bool temp = true;\n                for(int j = 0; j\
    \ < b.size(); j++){\n                    if(a[k] != b[j]){\n                 \
    \       temp = false;\n                        break;\n                    }\n\
    \                    k = (k + 1) % a.size();\n                }\n            \
    \    if(temp)\n                    return true;\n            }\n        }\n  \
    \  } else {\n        int start = 0;\n        while(start < a.size()){\n      \
    \      if(a[start] == b[0]){\n                int k = start;\n               \
    \ bool temp = true;\n                for(int j = 0; j < b.size(); j++){\n    \
    \                if(a[k] != b[j]){\n                        temp = false;\n  \
    \                      break;\n                    }\n                    k =\
    \ (k + 1) % a.size();\n                }\n                if(temp)\n         \
    \           return true;\n            }\n            start++;\n        }\n   \
    \ }\n    return result;", "    for(int i=0;i<a.length();i++){\n        std::string\
    \ c = a.substr(i,a.length()-i) + a.substr(0,i);\n        if(c.find(b) != std::string::npos)\
    \ return true;\n    }\n    return false;", "\tint i, j, k, l;\n\tl = b.length();\n\
    \tk = a.length();\n\tfor (i = 0; i < l; i++) {\n\t\tstd::string s = \"\";\n\t\t\
    for (j = i; j < l; j++) {\n\t\t\ts += b[j];\n\t\t}\n\t\tfor (j = 0; j < i; j++)\
    \ {\n\t\t\ts += b[j];\n\t\t}\n\t\tif (s == a.substr(0, l))\n\t\t\treturn true;\n\
    \t}\n\treturn false;", "\t\n\tint flag = 0;\n\tif (a.size() >= b.size()) {\n\t\
    \tstd::string temp = a + a;\n\t\tif (temp.find(b) != std::string::npos)\n\t\t\t\
    flag = 1;\n\t}\n\telse\n\t\tflag = 0;\n\tif (flag == 1)\n\t\treturn true;\n\t\
    else\n\t\treturn false;", "\tint m = a.length();\n\tint n = b.length();\n\tif\
    \ (m < n)\n\t\treturn false;\n\tstd::string str = b + b;\n\tif (str.find(a) !=\
    \ std::string::npos)\n\t\treturn true;\n\treturn false;", "\t// Write your code\
    \ here\n\tif (a.length() < b.length())\n\t\treturn false;\n\tstring temp = b;\n\
    \tfor (int i = 0; i < b.length(); i++) {\n\t\tstring newtemp = temp.substr(1)\
    \ + temp[0];\n\t\ttemp = newtemp;\n\t\tif (temp == b)\n\t\t\tbreak;\n\t\tif (a.find(temp)\
    \ != string::npos)\n\t\t\treturn true;\n\t}\n\treturn false;", "    std::string\
    \ x=a+a;\n    if(x.find(b)!=std::string::npos)\n        return true;\n    else\n\
    \        return false;", "    assert(a.length() >= b.length());\n    if(a.find(b)\
    \ != std::string::npos)\n        return true;\n    int n = b.length();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(a.find(b.substr(i, n - i) + b.substr(0, i))\
    \ != std::string::npos)\n            return true;\n    }\n    return false;",
  "    if(a.length()!=b.length())return false;\n    else{\n    int n = a.length();\n\
    \    int x=0;\n    for(int i=0;i<n;i++){\n        if(a[0]==b[i]){\n          \
    \  for(int j=0;j<n;j++){\n                if(a[j]==b[(i+j)%n])x++;\n         \
    \   }\n        }\n    }\n    if(x==n)return true;\n    else return false;\n  \
    \  }", "  if(a.length()!=b.length())\n    return false;\n  if(b==\"\")\n    return\
    \ true;\n  int pl,start;\n  start = a.find(b[0]);\n  if(start==-1)\n    return\
    \ false;\n  pl = 1;\n  for(int i=start+1;i<a.length();i++){\n    if(a[i]==b[pl])\n\
    \      pl++;\n    else{\n      if(pl!=b.length())\n        pl = 0;\n      if(a[i]==b[pl])\n\
    \        pl++;\n    }\n    if(pl==b.length())\n      return true;\n  }\n  for(int\
    \ i=0;i<start;i++){\n    if(a[i]==b[pl])\n      pl++;\n    else{\n      if(pl!=b.length())\n\
    \        pl = 0;\n      if(a[i]==b[pl])\n        pl++;\n    }\n    if(pl==b.length())\n\
    \      return true;\n  }\n  return false;", "    // Write your code here\n   \
    \ int len1 = a.length();\n    int len2 = b.length();\n    if(len1 < len2) return\
    \ false;\n    for(int i = 0; i < len1; i++){\n        if(a[i] == b[0]){\n    \
    \        int x = i;\n            int j = 0;\n            while(x < len1 && j <\
    \ len2){\n                if(a[x] != b[j]) break;\n                x++;\n    \
    \            j++;\n            }\n            if(j == len2){\n               \
    \ int s = i + 1;\n                if(s == len1) return true;\n               \
    \ for(; s < x; s++){\n                    if(a[s] != b[0]) break;\n          \
    \      }\n                if(s == x) return true;\n            }\n        }\n\
    \    }\n    return false;", "    std::string t = a + a;\n    return t.find(b)\
    \ != std::string::npos;", "\t// Write your code here\n\t// return true or false\
    \ accordingly\n\tif (a.size() < b.size())\n\t\treturn false;\n\tfor (int i = 0;\
    \ i < a.size(); i++) {\n\t\tstd::string a1 = a.substr(i) + a.substr(0, i);\n\t\
    \tstd::string a2 = a1;\n\t\treverse(a2.begin(), a2.end());\n\t\tif (a1.find(b)\
    \ != std::string::npos || a2.find(b) != std::string::npos)\n\t\t\treturn true;\n\
    \t}\n\treturn false;", "\tif (a.length() < b.length()) {\n\t\treturn false;\n\t\
    }\n\ta += a;\n\tstd::cout << a << \" \" << b << std::endl;\n\tif (a.find(b) !=\
    \ std::string::npos) {\n\t\treturn true;\n\t}\n\treturn false;", "    std::string\
    \ temp = b;\n    temp.append(b);\n    if(temp.find(a) != std::string::npos)\n\
    \        return true;\n    return false;", "    // Write your code here\n    //\
    \ find prefix using kmp\n    int n = a.size();\n    int m = b.size();\n    std::vector<int>prefix(m,0);\n\
    \    int i = 1;\n    int len = 0;\n    while(i<m){\n        if(b[i]==b[len]){\n\
    \            len++;\n            prefix[i] = len;\n            i++;\n        }else{\n\
    \            if(len!=0){\n                len = prefix[len-1];\n            }else{\n\
    \                prefix[i] = 0;\n                i++;\n            }\n       \
    \ }\n    }\n    int j = 0;\n    while(j<n){\n        if(a[j]==b[i]){\n       \
    \     i++;\n            j++;\n        }else{\n            if(i!=0){\n        \
    \        i = prefix[i-1];\n            }else{\n                j++;\n        \
    \    }\n        }\n        if(i==m){\n            return true;\n        }\n  \
    \  }\n    //if prefix found check suffix and rotated part string\n    //if found\
    \ return true else return false\n    i = 0;\n    j = m-prefix[m-1];\n    int count\
    \ = 0;\n    while(i<m&&j<m){\n        if(b[i]==b[j]){\n            i++;\n    \
    \        j++;\n            count++;\n        }else{\n            break;\n    \
    \    }\n    }\n    if(count==m){\n        return false;\n    }\n    if(prefix[m-1]==0){\n\
    \        return false;\n    }\n    int k = 0;\n    while(k<n){\n        if(a[k]==b[i]){\n\
    \            i++;\n            k++;\n        }else{\n            if(i!=0){\n \
    \               i = prefix[i-1];\n            }else{\n                k++;\n \
    \           }\n        }\n        if(i==m){\n            return true;\n      \
    \  }\n    }\n    return false;", "  int a_len = a.length();\n  int b_len = b.length();\n\
    \  for(int i = 0; i < a_len; i++) {\n    for(int j = 0; j < b_len; j++) {\n  \
    \    int a_i = i + j;\n      if(a_i >= a_len)\n        a_i -= a_len;\n      if(a[a_i]\
    \ != b[j])\n        break;\n      if(j == b_len - 1)\n        return true;\n \
    \   }\n  }\n  return false;", "    int n = a.length();\n    int m = b.length();\n\
    \    if(n == 0 || m == 0) {\n        return false;\n    }\n    string tmp1 = a\
    \ + a;\n    if(tmp1.find(b) != string::npos) {\n        return true;\n    }\n\
    \    return false;", "\t", "    std::string c = b + b;\n    return c.find(a) !=\
    \ std::string::npos;", '    // Write your code here', "    if(a.length()<=1 ||\
    \ b.length()>a.length())\n        return false;\n    std::string t=a+a;\n    int\
    \ n=t.length();\n    for(int i=0;i<n;i++){\n        int k=i;\n        for(int\
    \ j=0;j<b.length();j++){\n            if(t[k]==b[j]){\n                k++;\n\
    \            }\n            else{\n                break;\n            }\n   \
    \     }\n        if(k-i==b.length()){\n            return true;\n        }\n \
    \   }\n    return false;", "\tint n = a.length();\n\tint m = b.length();\n\tint\
    \ i = 0;\n\tint j = 0;\n\t//Using KMP algorithm\n\tstd::vector<int> temp(m);\n\
    \tint len = 0;\n\t//Calculating the Prefix vector\n\tfor (int i = 1; i < m; i++)\
    \ {\n\t\tif (b[i] == b[len]) {\n\t\t\tlen++;\n\t\t\ttemp[i] = len;\n\t\t}\n\t\t\
    else {\n\t\t\tif (len != 0) {\n\t\t\t\tlen = temp[len - 1];\n\t\t\t\ti--;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ttemp[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the\
    \ string a\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\
    \t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (i < n && a[i]\
    \ != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string rotated by 1\n\
    \tlen = 0;\n\tj = 0;\n\ti = 0;\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\
    \t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\t\
    else if (i < n && a[i] != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string\
    \ rotated by 2\n\tlen =", '    return false;', "\tassert(a.length() == b.length());\n\
    \tstd::string str = a + a;\n\treturn str.find(b) != std::string::npos;", "   \
    \ std::string c = b;\n    std::reverse(c.begin(), c.end());\n    if(a.find(b)\
    \ != std::string::npos)\n        return true;\n    else if(a.find(c) != std::string::npos)\n\
    \        return true;\n    else\n        return false;", "\tint lena = a.length();\n\
    \tint lenb = b.length();\n\tif (lena<lenb)\n\t\treturn false;\n\tfor (int i =\
    \ 0; i<lena; i++) {\n\t\tif (a[i] == b[0]) {\n\t\t\tbool ans = true;\n\t\t\tfor\
    \ (int j = 0; j<lenb; j++) {\n\t\t\t\tif (a[(i + j) % lena] != b[j]) {\n\t\t\t\
    \t\tans = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ans)\n\t\t\t\
    \treturn true;\n\t\t}\n\t}\n\treturn false;", "  if(a.size()==0 || b.size()==0)\n\
    \    return false;\n  std::string str=a+a;\n  if(str.find(b)!=std::string::npos)\n\
    \    return true;\n  return false;", "    // write your code here\n    std::string\
    \ temp=b;\n    std::string str=b;\n    std::cout<<str<<std::endl;\n    std::cout<<str.size()<<std::endl;\n\
    \    int i=0;\n    while(i<str.size()){\n        char temp=str[0];\n        for(int\
    \ j=0;j<str.size()-1;j++){\n            str[j]=str[j+1];\n        }\n        str[str.size()-1]=temp;\n\
    \        std::cout<<str<<std::endl;\n        i++;\n        if(a.find(str)!=std::string::npos){\n\
    \            return true;\n        }\n    }\n    return false;", "    // Write\
    \ your code here\n    int l1=a.length();\n    int l2=b.length();\n    if(l1<l2)\n\
    \        return false;\n    else{\n        std::string c;\n        c=b+b;\n  \
    \      if(c.find(a)!=std::string::npos)\n            return true;\n        else\n\
    \            return false;\n    }\n    ", "\t// Write your code here\n\tstd::string\
    \ a2 = a;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tstd::rotate(a2.begin(),\
    \ a2.begin() + 1, a2.end());\n\t\t// std::cout << a2 << std::endl;\n\t\tif (a2.find(b)\
    \ != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;", "\t\
    std::string s = b + b;\n\tif (s.find(a) != std::string::npos) {\n\t\treturn true;\n\
    \t}\n\treturn false;", "    // Write your code here\n    if(a.length()<b.length())\
    \ return false;\n    std::string temp=b;\n    for(int i=0;i<temp.length();i++){\n\
    \        if(a.find(temp)!=std::string::npos) return true;\n        char c=temp[0];\n\
    \        temp.erase(temp.begin());\n        temp+=c;\n    }\n    return false;",
  "\tif (a.size() == 0 || b.size() == 0) return false;\n\tint n = a.size();\n\tint\
    \ m = b.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = 0;\n\t\tfor (; j\
    \ < m; j++) {\n\t\t\tif (a[(i + j) % n] != b[j]) break;\n\t\t}\n\t\tif (j == m)\
    \ return true;\n\t}\n\treturn false;", "\t// Write your code here", "    std::string\
    \ c=b;\n    while(1)\n    {\n        if(a.find(b)!=std::string::npos)\n      \
    \  {\n            return true;\n        }\n        b=b.substr(1,b.length()-1)+b[0];\n\
    \        if(b==c)\n        {\n            return false;\n        }\n    }", " \
    \  std::string str = a;\n   std::string str1 = b;\n   for(int i = 0; i < str1.length();\
    \ i++) {\n       if(str.find(str1) != std::string::npos) {\n           return\
    \ true;\n       }\n       str1 = str1.substr(1) + str1[0];\n   }\n   return false;",
  "    // write your code here\n    // Checking if it is a substring\n    if(a.find(b)\
    \ != std::string::npos)\n    {\n        return true;\n    }\n    // Rotating the\
    \ string for the second time\n    char temp = b[0];\n    for(int i = 0; i < b.length()\
    \ - 1; i++)\n    {\n        b[i] = b[i + 1];\n    }\n    b[b.length() - 1] = temp;\n\
    \    // Checking if it is a substring\n    if(a.find(b) != std::string::npos)\n\
    \    {\n        return true;\n    }\n    // Rotating the string for the third\
    \ time\n    temp = b[0];\n    for(int i = 0; i < b.length() - 1; i++)\n    {\n\
    \        b[i] = b[i + 1];\n    }\n    b[b.length() - 1] = temp;\n    // Checking\
    \ if it is a substring\n    if(a.find(b) != std::string::npos)\n    {\n      \
    \  return true;\n    }\n    return false;", "\t// Write your code here\n\tstring\
    \ c = b + b;\n\tif (c.find(a) != std::string::npos) {\n\t\treturn true;\n\t}\n\
    \treturn false;", "  int r = -1;\n  for (int i = 0; i < a.size(); i++) {\n   \
    \ r = b.find(a[i]);\n    if (r != std::string::npos) {\n      std::string temp\
    \ = b.substr(r);\n      temp.append(b.substr(0, r));\n      int x = a.find(temp);\n\
    \      if (x != std::string::npos) {\n        return true;\n      }\n    }\n \
    \ }\n  return false;", "\tif (a.length() < b.length()) {\n\t\treturn false;\n\t\
    }\n\tstd::string str = b + b;\n\treturn str.find(a) != std::string::npos;", "\t\
    int lenA = a.length();\n\tint lenB = b.length();\n\tfor (int i = 0; i < lenA;\
    \ i++) {\n\t\tif (a[i] == b[0]) {\n\t\t\tif (lenA - i >= lenB) {\n\t\t\t\tstd::string\
    \ subStr = a.substr(i, lenB);\n\t\t\t\tif (subStr == b) {\n\t\t\t\t\treturn true;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::string subStr = a.substr(i, lenA\
    \ - i);\n\t\t\t\tsubStr += a.substr(0, lenB - lenA + i);\n\t\t\t\tif (subStr ==\
    \ b) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
  "    int len1 = a.length();\n    int len2 = b.length();\n    if(len1 == 0 || len2\
    \ == 0 || len1 < len2) return false;\n    std::string concatenated = b + b;\n\
    \    return concatenated.find(a) != std::string::npos;", "\tfor (int i = 0; i\
    \ < b.length(); i++) {\n\t\tstd::string t = b.substr(i) + b.substr(0, i);\n\t\t\
    if (a.find(t) != std::string::npos)\n\t\t\treturn true;\n\t}\n\treturn false;",
  "    int n = a.length();\n    int m = b.length();\n    std::string newStr = a +\
    \ a;\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] == b[j])\
    \ {\n            j++;\n        } else {\n            j = 0;\n        }\n     \
    \   if (j == m) {\n            return true;\n        }\n    }\n    return false;",
  "    // Write your code here\n    if(a.length() < b.length())\n        return false;\n\
    \    int len = a.length();\n    string temp = b;\n    while(len--){\n        if(a.find(temp)\
    \ != string::npos)\n            return true;\n        temp = temp.substr(1,b.length()-1)\
    \ + temp[0];\n    }\n    return false;", "\tstd::string temp=b;\n\tfor(int i=0;i<a.length();i++){\n\
    \t\tb=temp;\n\t\tif(b[0]==a[i]){\n\t\t\tint j=i+1;\n\t\t\tfor(int k=1;k<b.length();k++){\n\
    \t\t\t\tif(j==a.length()){\n\t\t\t\t\tj=0;\n\t\t\t\t}\n\t\t\t\tif(b[k]!=a[j]){\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j==i){\n\t\t\t\t\
    return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;", "    //int n = a.length();\n\
    \    int m = b.length();\n    for(int i=0;i<m;i++){\n        std::rotate(b.begin(),b.begin()+1,b.end());\n\
    \        if(a.find(b)!=std::string::npos)\n            return true;\n    }\n \
    \   return false;", "\t// Write your code here.\n\tint index;\n\tint count = 0;\n\
    \tint len1 = a.length();\n\tint len2 = b.length();\n\tif (len1 < len2) {\n\t\t\
    return false;\n\t}\n\tif (len1 == len2) {\n\t\tfor (int i = 0; i < len1; i++)\
    \ {\n\t\t\tif (a[i] == b[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count\
    \ == len1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif (len1 > len2) {\n\t\tindex = a.find(b[0]);\n\t\tif (index < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tstd::string temp = a.substr(index,\
    \ len1 - index);\n\t\t\tint l = temp.length();\n\t\t\tint c = 0;\n\t\t\tif (l\
    \ < len2) {\n\t\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\t\tif (temp[i] == b[i])\
    \ {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (c == l) {\n\t\t\t\t\
    \treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tfor (int i = 0; i < len2; i++) {\n\t\t\t\t\tif\
    \ (temp[i] == b[i]) {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (c\
    \ == len2) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n", "    for(int i=0;i<a.length();i++){\n\
    \    \tstd::string ro = a.substr(i,a.length()-i) + a.substr(0,i);\n    \tif(ro.find(b)\
    \ != std::string::npos)\n    \t\treturn true;\n    }\n    return false;", "\t\
    // Write your code here", "    // Write your code here.\n    int lenb = b.length();\n\
    \    for(int i=0;i<lenb;i++){\n        char temp = b[0];\n        for(int j=0;j<lenb-1;j++){\n\
    \            b[j] = b[j+1];\n        }\n        b[lenb-1] = temp;\n        if(a.find(b)\
    \ != std::string::npos){\n            return true;\n        }\n    }\n    return\
    \ false;", "\tif (a.length() < b.length())\n\t\treturn false;\n\tint a_count[26]\
    \ = {0};\n\tint b_count[26] = {0};\n\tfor (auto i : a) {\n\t\ta_count[i - 'a']++;\n\
    \t}\n\tfor (auto i : b) {\n\t\tb_count[i - 'a']++;\n\t}\n\tfor (int i = 0; i <\
    \ 26; i++) {\n\t\tif (a_count[i] < b_count[i])\n\t\t\treturn false;\n\t}\n\t//\
    \ abab,baa => False\n\t// abab,aba => True\n\t// abab,abb => False\n\t// abcd,abd\
    \ => False\n\t// abcd,bcd => True\n\t// abcd,abcd => True\n\t// abcd,cdbd => False\n\
    \t// abcd,bcdd => False\n\t// abcd,abd => False\n\t// abcd,cd => False\n\t// abcd,dc\
    \ => False\n\tint b_idx = 0;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tif\
    \ (a[i] == b[b_idx]) {\n\t\t\tb_idx++;\n\t\t\tif (b_idx == b.length())\n\t\t\t\
    \treturn true;\n\t\t}\n\t\telse\n\t\t\tb_idx = 0;\n\t}\n\t// cyclic pattern\n\t\
    int ab_idx = 0;\n\tfor (int i = 0; i < b.length(); i++) {\n\t\tif (a[ab_idx] ==\
    \ b[i]) {\n\t\t\tab_idx++;\n\t\t\tif (ab_idx == a.length())\n\t\t\t\treturn true;\n\
    \t\t}\n\t\telse\n\t\t\tab_idx = 0;\n\t}\n\treturn false;", "\tstd::cout << \"\
    cycpattern_check('\" << a << \"','\" << b << \"') ==> \";\n\tif (a.length() <\
    \ b.length()) {\n\t\tstd::cout << \"False\" << std::endl;\n\t\treturn false;\n\
    \t}\n\tif (a.length() == b.length()) {\n\t\tif (a == b) {\n\t\t\tstd::cout <<\
    \ \"True\" << std::endl;\n\t\t\treturn true;\n\t\t}\n\t\tstd::cout << \"False\"\
    \ << std::endl;\n\t\treturn false;\n\t}\n\t// a.length() > b.length()\n\tstd::string\
    \ b_copy = b;\n\tbool found = false;\n\tfor (int i = 0; i < b.length(); i++) {\n\
    \t\tb_copy.push_back(b_copy[0]);\n\t\tb_copy.erase(0, 1);\n\t\tif (a.find(b_copy)\
    \ != std::string::npos) {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tstd::cout\
    \ << (found ? \"True\" : \"False\") << std::endl;\n\treturn found;", "\tint i=0,\
    \ j=0;\n\twhile(i<a.length() && j<b.length()) {\n\t\tif(a[i] == b[j]) {\n\t\t\t\
    ++i;\n\t\t\t++j;\n\t\t}\n\t\telse {\n\t\t\tif(j == 0) {\n\t\t\t\t++i;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn j==b.length();",
  "\t// Write your code here\n\t/*\n\tstd::string b1 = b;\n\tfor (int i = 0; i < b.length();\
    \ i++) {\n\t\tb1 = b1.back() + b1.substr(0, b1.length() - 1);\n\t\tif (a.find(b1)\
    \ != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\t\
    */\n\t// Method 2\n\tif (a.length() == 0 || b.length() == 0) {\n\t\treturn false;\n\
    \t}\n\tif (a.length() < b.length()) {\n\t\treturn false;\n\t}\n\tstd::string b1\
    \ = b;\n\tfor (int i = 0; i < b.length(); i++) {\n\t\tb1 = b1.back() + b1.substr(0,\
    \ b1.length() - 1);\n\t\tif (a.find(b1) != std::string::npos) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "    // Write your code here\n    if(a.length()\
    \ < b.length())\n        return false;\n    string temp = b + b;\n    if(temp.find(a)\
    \ != string::npos)\n        return true;\n    return false;", "    bool ans =\
    \ false;\n    if(a.length() != b.length()) return false;\n    std::string s =\
    \ a+a;\n    for(int i = 0; i < a.length(); i++) {\n        std::string tmp = s.substr(i,a.length());\n\
    \        std::string s_b = b;\n        std::sort(tmp.begin(),tmp.end());\n   \
    \     std::sort(s_b.begin(),s_b.end());\n        if(tmp == s_b) return true;\n\
    \    }\n    return ans;", "    // Write your code here\n    if(a.length()<b.length())\n\
    \    {\n        return false;\n    }\n    else\n    {\n        std::string c=b;\n\
    \        int k=b.length();\n        for(int i=0;i<k;i++)\n        {\n        \
    \    char t=c[0];\n            for(int j=0;j<k-1;j++)\n            {\n       \
    \         c[j]=c[j+1];\n            }\n            c[k-1]=t;\n            if(c==a)\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   return false;\n    }", "   if(b.size()>a.size()) return false;\n   if(a.find(b)\
    \ != std::string::npos) return true;\n   a+=a;\n   for(int i=0;i<a.size();i++){\n\
    \      b=b.substr(1,b.size()-1)+b[0];\n      if(a.find(b) != std::string::npos)\
    \ return true;\n   }\n   return false;", "    if(a.size()<b.size()) return false;\n\
    \    std::rotate(a.begin(),a.begin()+1,a.end());\n    for(int i=0;i<a.size();i++){\n\
    \        if(a.substr(i,b.size())==b) return true;\n    }\n    return false;",
  "\t// Write your code here\n\treturn false;", "    //assert(a.size()>0);\n    //assert(b.size()>0);\n\
    \    std::string temp = b + b;\n    return (a.find(temp) != std::string::npos);",
  "\tint len = b.length();\n\tif (a.length() < len) return false;\n\tfor (int i =\
    \ 0; i < len; i++) {\n\t\tstd::string temp = b.substr(i, len - i) + b.substr(0,\
    \ i);\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn true;\n\t\t\
    }\n\t}\n\treturn false;", "    int m = a.length();\n    int n = b.length();\n\
    \    if(n>m) return false;\n    string temp = b+b;\n    if(temp.find(a)!=string::npos)\
    \ return true;\n    return false;", '', "    for(int i=0;i<a.length();i++){\n\
    \        if(a.substr(i,b.length())==b) return true;\n    }\n    int index=-1;\n\
    \    for(int i=0;i<a.length();i++){\n        if(a[i]==b[0]) index=i;\n    }\n\
    \    if(index!=-1)\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[b.length()-1]){\n\
    \            std::string temp=a.substr(index,b.length()-1);\n            temp+=a.substr(0,i+1);\n\
    \            if(temp==b) return true;\n        }\n    }\n    return false;", " \
    \   // Write your code here\n    /*\n        input: \"abcd\" \"abd\"\n       \
    \ output: False\n        sol: run a loop from i = 0 to i = len(a)\n          \
    \      check if sub_sring(a,i,len(a)) + substring(a,0,i) == b\n              \
    \      return true\n            return false\n        TC: O(n)\n        SC: O(n)\n\
    \    */\n    // assert(a.length()>=b.length());\n    if(a.length()<b.length())\
    \ return false;\n    std::string a1 = a.substr(0,a.length()-1);\n    std::string\
    \ a2 = a.substr(a.length()-1,1);\n    for(int i=0;i<a.length();i++){\n       \
    \ if(a1 == b || a2 == b) return true;\n        a1 = a1.substr(1,a1.length()-1)\
    \ + a1.substr(0,1);\n        a2 = a2.substr(1,a2.length()-1) + a2.substr(0,1);\n\
    \    }\n    return false;", "\t//Write your code here\n\tint i = 0;\n\tint j =\
    \ 0;\n\tfor (i = 0; i < a.length(); i++) {\n\t\tif (a[i] == b[j]) {\n\t\t\tint\
    \ temp = i;\n\t\t\twhile (a[i] == b[j] && j < b.length()) {\n\t\t\t\ti++;\n\t\t\
    \t\tj++;\n\t\t\t}\n\t\t\tif (j == b.length())\n\t\t\t\treturn true;\n\t\t\telse\
    \ {\n\t\t\t\ti = temp;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
  "    // Write your code here\n    // abcd\n    // abd\n    int j = 0;\n    for(int\
    \ i = 0; i < a.size(); i++){\n        int flag = 0;\n        for(int k = 0; k\
    \ < b.size(); k++){\n            if(a[i] == b[k]){\n                flag = 1;\n\
    \                i++;\n                if(i == a.size()){\n                  \
    \  i = 0;\n                }\n            }\n            else{\n             \
    \   flag = 0;\n                break;\n            }\n        }\n        if(flag\
    \ == 1){\n            return true;\n        }\n    }\n    return false;", "\t\
    for (int i = 0; i < a.length(); i++) {\n\t\tstd::string c = a.substr(i, a.length()\
    \ - i) + a.substr(0, i);\n\t\tint l = c.length();\n\t\tint m = b.length();\n\t\
    \tint j = 0;\n\t\twhile (j < l) {\n\t\t\tif (c[j] == b[0]) {\n\t\t\t\tint k =\
    \ 0;\n\t\t\t\twhile (j < l && k < m && c[j] == b[k]) {\n\t\t\t\t\tj++;\n\t\t\t\
    \t\tk++;\n\t\t\t\t}\n\t\t\t\tif (k == m)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    \telse\n\t\t\t\tj++;\n\t\t}\n\t}\n\treturn false;", "\tbool res = false;\n\tstd::string\
    \ str = b + b;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tstd::string temp\
    \ = a.substr(i, a.length() - i) + a.substr(0, i);\n\t\tif (temp.find(b) != std::string::npos)\
    \ {\n\t\t\tres = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;", "  std::string\
    \ f = b + b;\n  int m = a.length();\n  int n = b.length();\n  for (int i = 0;\
    \ i <= m - n; i++) {\n    int j;\n    for (j = 0; j < n; j++)\n      if (a[i +\
    \ j] != f[j])\n        break;\n    if (j == n)\n      return true;\n  }\n  return\
    \ false;", "    // Write your code here\n    return false;", "    //set a = string\
    \ and b = pattern\n    //e.g. a = \"abcd\" b = \"abd\"\n    //make a ring with\
    \ a\n    //e.g. ring = a+a = \"abcdabcd\"\n    //for i in ring\n    //   if the\
    \ subring(i,i+len(b)) == b return true\n    //return false\n    if(a.size() <\
    \ b.size()) return false;\n    std::string ring = a+a;\n    for(int i = 0; i <\
    \ a.size(); ++i){\n        if(ring.substr(i,b.size()) == b) return true;\n   \
    \ }\n    return false;", "    // Write your code here\n    //Efficient approach\n\
    \    std::string str=b+b;\n    int n=str.length();\n    int m=a.length();\n  \
    \  int temp=0;\n    for(int i=0;i<=n-m;i++){\n        for(int j=0;j<m;j++){\n\
    \            if(str[i+j]==a[j]){\n                temp++;\n            }\n   \
    \     }\n        if(temp==m){\n            return true;\n        }\n        temp=0;\n\
    \    }\n    return false;\n    \n    //Naive approach\n    // int n=a.length();\n\
    \    // int m=b.length();\n    // std::string check1=b;\n    // std::string check2=b;\n\
    \    // for(int i=0;i<n;i++){\n    //     if(a[i]==check1[0]){\n    //       \
    \  std::string str=a.substr(i,m);\n    //         if(str==check1 || str==check2){\n\
    \    //             return true;\n    //         }\n    //     }\n    // }\n \
    \   // for(int i=0;i<m-1;i++){\n    //     char tmp=check1[0];\n    //     for(int\
    \ j=0;j<m-1;j++){\n    //         check1[j]=check1[j+1];\n    //     }\n    //\
    \     check1[m-1]=tmp;\n    //     std::string str=a.substr(i,m);\n    //    \
    \ if(str==check1 || str==check2){\n    //         return true;\n    //     }\n\
    \    // }\n    // return false;", "    // Write your code here\n    int j = 0;\n\
    \    while(a[j] != b[0]){\n        j++;\n    }\n    for(int i = 0; i < b.length();\
    \ i++){\n        if(a[j] != b[i]){\n            return false;\n        }\n   \
    \     j++;\n        if(j == a.length()){\n            j = 0;\n        }\n    }\n\
    \    return true;", "    int ix;\n    std::string newb = b + b;\n    ix = newb.find(a);\n\
    \    if (ix != -1) {\n        return true;\n    }\n    return false;", "\tint\
    \ len=b.length();\n\tstd::string b1=b+b;\n\tif(a.find(b1)!=std::string::npos)\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}", "    if(a.size()\
    \ != b.size()) return false;\n    if(a == b) return true;\n    std::string temp\
    \ = b + b;\n    if(temp.find(a) != std::string::npos) return true;\n    return\
    \ false;", "    // Write your code here\n    if(a.size()<b.size())\n    {\n  \
    \      std::swap(a,b);\n    }\n    std::string bb=b+b;\n    if(bb.find(a)!=std::string::npos)\n\
    \    {\n        return true;\n    }\n    return false;", "    for(int i=0;i<b.length();i++){\n\
    \        std::string temp=b.substr(i)+b.substr(0,i);\n        if(a.find(temp)!=std::string::npos)\n\
    \            return true;\n    }\n    return false;", "  int a_len = a.length();\n\
    \  int b_len = b.length();\n  int max_i = a_len-b_len;\n  for(int i=0;i<max_i;i++){\n\
    \    std::string temp_str = a.substr(i,b_len);\n    if(temp_str == b){\n     \
    \ return true;\n    }\n  }\n  return false;", "  for(int i=0;i<a.size();i++){\n\
    \    int j=0;\n    if(a[i]==b[j]){\n      while(j<b.size() && a[(i+j)%a.size()]==b[j]){\n\
    \        j++;\n      }\n      if(j==b.size()){\n        return true;\n      }\n\
    \    }\n  }\n  return false;", "    if(a.length() == 0 && b.length() == 0)\n \
    \       return true;\n    int i = 0;\n    while(i < a.length()) {\n        if(a[i]\
    \ == b[0]) {\n            int j = 0;\n            while(i < a.length() && j <\
    \ b.length() && a[i] == b[j]) {\n                i++;\n                j++;\n\
    \            }\n            if(j == b.length())\n                return true;\n\
    \            else {\n                i = 0;\n                i++;\n          \
    \  }\n        }\n        else\n            i++;\n    }\n    return false;", " \
    \ if(a.size() != b.size()) return false;\n  if(a == b) return true;\n  int count\
    \ = 0;\n  for(auto &x : a) {\n    count += x == b[0];\n  }\n  for(int i = 0; i\
    \ < a.size(); i++) {\n    int count_t = 0;\n    for(int j = 0; j < a.size(); j++)\
    \ {\n      if(a[(i+j)%a.size()] == b[j]) count_t++;\n    }\n    if(count_t ==\
    \ count) return true;\n  }\n  return false;", "    // Write your code here\n \
    \   std::string s = a;\n    for(int i=0;i<b.length();i++){\n        s = s.substr(1,a.length()-1)\
    \ + s[0];\n        if(s.find(b) != std::string::npos)\n            return true;\n\
    \    }\n    return false;", "    // Your code goes here\n    int n = a.length();\n\
    \    int m = b.length();\n    std::string c = a+a;\n    if(m>n)\n        return\
    \ false;\n    else{\n        for(int i=0;i<n;i++){\n            if(c.substr(i,m)==b)\n\
    \                return true;\n        }\n        return false;\n    }", "   \
    \ int l1=a.length();\n    int l2=b.length();\n    for(int i=0;i<l1;i++)\n    {\n\
    \        a=a[l1-1]+a.substr(0,l1-1);\n        if(a.find(b)!=std::string::npos)\n\
    \        {\n            return true;\n        }\n    }\n    return false;", '    return
    true;', "    // a is big and b is small, we can use rotation of b to look for\
    \ a substring in a\n    int s = 0;\n    int e = b.size() - 1;\n    while(s < e)\
    \ {\n        std::swap(b[s], b[e]);\n        s++;\n        e--;\n    }\n    //\
    \ after swapping the first and last char, we need to check if it is a substring\n\
    \    if(a.find(b) != std::string::npos) {\n        return true;\n    }\n    //\
    \ call this recursively to rotate by swapping index 0 and index 1 and then checking\
    \ for a substring\n    // we will keep doing this till we have exhausted the length\
    \ of b\n    for(int i = 0; i < b.size() - 1; i++) {\n        std::swap(b[0], b[1]);\n\
    \        if(a.find(b) != std::string::npos) {\n            return true;\n    \
    \    }\n    }\n    return false;", "    if(a.length() != b.length()) return false;\n\
    \    else if(a.length() == 0) return true;\n    else{\n        string c = b +\
    \ b;\n        return c.find(a) != string::npos;\n    }", "    if(a.size() < b.size())\
    \ return false;\n    if(a.find(b) != std::string::npos) return true;\n    for(int\
    \ i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i) + b.substr(0, i))\
    \ != std::string::npos) return true;\n    }\n    return false;", "\tint j=0;\n\
    \tbool res=false;\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]==b[j]){\n\t\t\
    \tint n=i;\n\t\t\twhile(a[n]==b[j] && j<b.length()){\n\t\t\t\tif(j==b.length()-1){\n\
    \t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tn++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\
    j=0;\n\t\t}\n\t}\n\treturn res;", "    // Write your code here\n    int count\
    \ = 0;\n    int j = 0;\n    int n = a.length();\n    int m = b.length();\n   \
    \ for(int i = 0; i < n; i++) {\n        if(a[i] == b[j]) {\n            j++;\n\
    \            count++;\n        } else {\n            if(count == m) {\n      \
    \          return true;\n            }\n            j = 0;\n            count\
    \ = 0;\n        }\n    }\n    int k = 0;\n    for(int i = count; i < n; i++) {\n\
    \        if(a[i] == b[k]) {\n            k++;\n            count++;\n        }\
    \ else {\n            break;\n        }\n    }\n    if(count == m) {\n       \
    \ return true;\n    }\n    return false;", "  // Write your code here\n  int c=b.length();\n\
    \  int n=a.length();\n  int k=0;\n  int flag=0;\n  std::vector<int> v;\n  while(k<c)\n\
    \  {\n      if(a[0]==b[k])\n      {\n          flag=1;\n          break;\n   \
    \   }\n      k++;\n  }\n  if(flag==0)\n  {\n      return false;\n  }\n  v.push_back(k);\n\
    \  for(int i=0;i<c;i++)\n  {\n      if(b[i]==a[k])\n      {\n          k++;\n\
    \      }\n      else\n      {\n          if(i==0)\n          {\n             \
    \ continue;\n          }\n          else\n          {\n              v.push_back(i);\n\
    \              k=i;\n          }\n      }\n  }\n  for(int i=0;i<v.size();i++)\n\
    \  {\n      int x=v[i];\n      int f=0;\n      for(int j=0;j<c;j++)\n      {\n\
    \          if(a[x]==b[j])\n          {\n              x++;\n          }\n    \
    \      else\n          {\n              f=1;\n              break;\n         \
    \ }\n      }\n      if(f==0)\n      {\n          return true;\n      }\n  }\n\
    \  return false;", "    int len_a = a.length();\n    int len_b = b.length();\n\
    \    int j;\n    if(len_a == len_b){\n        if(a == b)\n            return true;\n\
    \        else\n            return false;\n    }\n    else{\n        if(len_a >\
    \ len_b){\n            //b needs to be rotated\n            int x = len_a % len_b;\n\
    \            int m = x;\n            if(x == 0)\n                x = len_b;\n\
    \            for(int i = 0; i < x; i++){\n                j = i;\n           \
    \     int k = 0;\n                while(k < len_b){\n                    if(b[k]\
    \ == a[j]){\n                        j++;\n                        k++;\n    \
    \                    if(j == len_a)\n                            j = 0;\n    \
    \                }\n                    else\n                        break;\n\
    \                }\n                if(k == len_b)\n                    return\
    \ true;\n            }\n            return false;\n        }\n        else{\n\
    \            //a needs to be rotated\n            int x = len_b % len_a;\n   \
    \         int m = x;\n            if(x == 0)\n                x = len_a;\n   \
    \         for(int i = 0; i < x; i++){\n                j = i;\n              \
    \  int k = 0;\n                while(k < len_a){\n                    if(a[k]\
    \ == b[j]){\n                        j++;\n                        k++;\n    \
    \                    if(j == len_b)\n                            j = 0;\n    \
    \                }\n                    else\n                        break;\n\
    \                }\n                if(k == len_a)\n                    return\
    \ true;\n            }\n            return false;\n        }\n    }", "    int\
    \ alen = a.length();\n    int blen = b.length();\n    if(blen > alen) return false;\n\
    \    std::string temp = a + a;\n    if(temp.find(b) != std::string::npos) return\
    \ true;\n    return false;", "  if(a.size()==b.size()){\n    a=a+a;\n    return\
    \ a.find(b)!=std::string::npos;\n  }\n  return false;", "    std::string copy\
    \ = b;\n    // your code goes here\n    int i = 0;\n    while(i < b.length()){\n\
    \        char t = b[0];\n        for(int j = 0; j < b.length()-1; j++){\n    \
    \        b[j] = b[j+1];\n        }\n        b[b.length()-1] = t;\n        i++;\n\
    \        if(a.find(b) != std::string::npos){\n            return true;\n     \
    \   }\n    }\n    if(a.find(copy) != std::string::npos){\n        return true;\n\
    \    }\n    return false;", "    if(a.size() < b.size()) return false;\n    if(a.size()\
    \ == b.size()) {\n        std::string b2 = b + b;\n        return b2.find(a) !=\
    \ std::string::npos;\n    }\n    std::string a2 = a + a;\n    return a2.find(b)\
    \ != std::string::npos;", "    int n = a.length();\n    int m = b.length();\n\
    \    if(n<m) return false;\n    for(int i=0;i<m;i++){\n        if(a[i]==b[0]){\n\
    \            int j=0;\n            while(j<m && a[(i+j)%n]==b[j]){\n         \
    \       j++;\n            }\n            if(j==m) return true;\n        }\n  \
    \  }\n    return false;", "    int a_len = a.length();\n    int b_len = b.length();\n\
    \    if(a_len==0 || b_len==0 || a_len<b_len)\n        return false;\n    int a_count[26]\
    \ = {0};\n    int b_count[26] = {0};\n    for(int i=0;i<a_len;i++)\n        a_count[a[i]-'a']++;\n\
    \    for(int i=0;i<b_len;i++)\n        b_count[b[i]-'a']++;\n    for(int i=0;i<26;i++)\n\
    \        if(a_count[i]<b_count[i])\n            return false;\n    std::string\
    \ str = b+b;\n    return str.find(a)!=std::string::npos;", "    if(a.size() <\
    \ b.size()) return false;\n    if(a.size() == b.size()) return a == b;\n    int\
    \ p = b.size();\n    while(p < a.size())\n    {\n        if(a.substr(p,b.size())\
    \ == b)\n            return true;\n        p++;\n    }\n    return false;", "\t\
    if (a.length() != b.length()) {\n\t\treturn false;\n\t}\n\tstring temp = b + b;\n\
    \tif (temp.find(a) != string::npos) {\n\t\treturn true;\n\t}\n\treturn false;",
  "\tif (a.length() != b.length())\n\t\treturn false;\n\tstd::string temp = b + b;\n\
    \tif (temp.find(a) != std::string::npos)\n\t\treturn true;\n\treturn false;",
  "  // Write your code here\n  std::string s=b+b;\n  std::size_t found = s.find(a);\n\
    \  if (found != std::string::npos)\n    return true;\n  else\n    return false;",
  "    assert(a.length() >= b.length());\n    std::string temp = a;\n    for(int i\
    \ = 0; i < a.length(); i++) {\n        a.push_back(a[0]);\n        a.erase(a.begin());\n\
    \        if(a.find(b) != std::string::npos) {\n            return true;\n    \
    \    }\n    }\n    return false;", "    if(a.size() != b.size())\n        return\
    \ false;\n    a+=a;\n    if(a.find(b) == std::string::npos)\n        return false;\n\
    \    return true;", "    //write your code here\n    if(a.length() < b.length())\n\
    \        return false;\n    std::string temp = b + b;\n    return temp.find(a)\
    \ != std::string::npos;", "    if(a.size() != b.size()) return false;\n    //\
    \ Write your code here\n    for(int i=0;i<a.size();i++){\n        int d = a.find(b);\n\
    \        if(d!=-1)\n            return true;\n        b = b.substr(1) + b[0];\n\
    \    }\n    return false;", "    // your code here\n    int n = a.length();\n\
    \    for(int i=0;i<n;i++)\n    {\n        string s = a.substr(i)+a.substr(0,i);\n\
    \        if(s.find(b)!=string::npos)\n        {\n            return true;\n  \
    \      }\n    }\n    return false;", "    // Write your code here\n    int n =\
    \ a.length();\n    int m = b.length();\n    string f = a + a;\n    string x =\
    \ b + b;\n    if(m > n)\n        return false;\n    int j = 0;\n    for(int i\
    \ = 0; i < 2*n; i++){\n        if(f[i] == x[j]){\n            j++;\n         \
    \   if(j == m)\n                return true;\n        }\n        else if(f[i]\
    \ != x[j]){\n            j = 0;\n        }\n    }\n    return false;", "  // Write\
    \ your code here\n  // a = first word\n  // b = second word\n  if(a.length() <\
    \ b.length())\n    return false;\n  std::string c = b+b;\n  int i,j;\n  for(i=0;i<a.length();i++){\n\
    \    for(j=0;j<b.length();j++){\n      if(a[i+j] != c[j])\n        break;\n  \
    \  }\n    if(j == b.length())\n      return true;\n  }\n  return false;", "  \
    \  // Write your code here\n    //cout<<\"a=\"<<a<<\" b=\"<<b<<endl;\n    if(a.length()==0||b.length()==0)\n\
    \        return false;\n    if(a.length()<b.length())\n        return false;\n\
    \    if(a.length()==b.length()&&a!=b)\n        return false;\n    if(a.length()==b.length()&&a==b)\n\
    \        return true;\n    else if(a.length()>b.length()){\n        std::string\
    \ temp=a;\n        while(temp.length()>0){\n            if(temp.find(b)!=std::string::npos)\n\
    \                return true;\n            //temp.erase(temp.length()-1);\n  \
    \          char c=temp[0];\n            temp.erase(0,1);\n            temp+=c;\n\
    \        }\n        return false;\n    }", "    // Write your code here\n    std::map<char,\
    \ int> map_a;\n    for(int i = 0; i < a.size(); i++)\n    {\n        map_a[a[i]]++;\n\
    \    }\n    for(int i = 0; i < b.size(); i++)\n    {\n        if(map_a.find(b[i])\
    \ == map_a.end())\n        {\n            return false;\n        }\n    }\n  \
    \  std::string s = b + b;\n    int index = s.find(a);\n    if(index == std::string::npos)\n\
    \    {\n        return false;\n    }\n    return true;", "    int m = a.length();\n\
    \    int n = b.length();\n    if(m!=n)\n        return false;\n    b += b;\n \
    \   if(b.find(a) == std::string::npos)\n        return false;\n    return true;",
  "  if(a.size()<b.size())\n  {\n    return false;\n  }\n  if(a.size()==b.size())\n\
    \  {\n    if(a==b)\n    {\n      return true;\n    }\n    else\n    {\n      return\
    \ false;\n    }\n  }\n  string c=b+b;\n  return c.find(a)!=string::npos;\n  //WRITE\
    \ YOUR CODE HERE", '    // your code goes here', "    int slen = a.length();\n\
    \    std::vector<int> lps(slen);\n    lps[0] = 0;\n    int len = 0;\n    int i\
    \ = 1;\n    while(i < slen) {\n        if(a[i] == a[len]) {\n            len++;\n\
    \            lps[i] = len;\n            i++;\n        } else {\n            if(len\
    \ != 0) {\n                len = lps[len - 1];\n            } else {\n       \
    \         lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\
    \    std::string s = a + a;\n    i = 0;\n    int j = 0;\n    int slen1 = s.length();\n\
    \    int blen = b.length();\n    while(i < slen1) {\n        if(s[i] == b[j])\
    \ {\n            i++;\n            j++;\n        }\n        if(j == blen) {\n\
    \            return true;\n        } else if(i < slen1 && s[i] != b[j]) {\n  \
    \          if(j != 0) {\n                j = lps[j - 1];\n            } else {\n\
    \                i++;\n            }\n        }\n    }\n    return false;", " \
    \   // find a substring\n    // find a rotation of substring in string\n    int\
    \ count = 0;\n    int j = 0;\n    int i = 0;\n    for(i = 0; i < a.length(); i++)\
    \ {\n        if(a[i] == b[j]) {\n            count++;\n            j++;\n    \
    \    }\n        else {\n            count = 0;\n            j = 0;\n        }\n\
    \        if(count == b.length()) {\n            return true;\n        }\n    }\n\
    \    for(int k = 0; k < a.length(); k++) {\n        if(a[k] == b[j]) {\n     \
    \       count++;\n            j++;\n        }\n        else {\n            count\
    \ = 0;\n            j = 0;\n        }\n        if(count == b.length()) {\n   \
    \         return true;\n        }\n    }\n    return false;", "\t//write your\
    \ code here\n\treturn false;", "\t//intialize a flag to false\n\t//iterate through\
    \ the string\n\t//get the next char in the string\n\t//check the next characters\
    \ from the string until the length of the string\n\t//check if each character\
    \ is the same\n\t//if it is, set flag to true\n\t//if it's not, keep searching\n\
    \t//if you reach the end of the string, stop\n\t//if the flag is true, return\
    \ true\n\t//otherwise, return false\n\tbool flag = false;\n\tint i;\n\tfor (i\
    \ = 0; i < a.length(); i++) {\n\t\tint j;\n\t\tchar next_char = a[i];\n\t\tfor\
    \ (j = 0; j < b.length(); j++) {\n\t\t\tif (next_char == b[j]) {\n\t\t\t\tflag\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == true) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "\t// Write your code here\n\tif (a.length()\
    \ == 0 || b.length() == 0) {\n\t\treturn false;\n\t}\n\ta = a + a;\n\tif (a.find(b)\
    \ != string::npos) {\n\t\treturn true;\n\t}\n\treturn false;", "    if(a.size()\
    \ < b.size()) return false;\n    if(a.size() == b.size()) {\n        if(a == b)\
    \ return true;\n        else return false;\n    }\n\n    std::string temp = a;\n\
    \    int j = 0;\n    while(temp.size() >= b.size()) {\n        if(b[j] == temp[0])\
    \ {\n            int i = 0;\n            while(i < b.size()) {\n             \
    \   if(b[i] != temp[i]) break;\n                ++i;\n            }\n        \
    \    if(i == b.size()) return true;\n        }\n        temp.erase(temp.begin());\n\
    \        a.pop_back();\n        temp.push_back(a[0]);\n    }\n    return false;",
  "    std::string temp = b;\n    for(int i = 0; i < b.length(); i++) {\n        temp.push_back(temp[0]);\n\
    \        temp.erase(temp.begin());\n        if(temp == a) {\n            return\
    \ true;\n        }\n    }\n    return false;", "   int m = a.length();\n   int\
    \ n = b.length();\n   if(m<n)\n      return false;\n   int start = 0;\n   while(start<m)\n\
    \   {\n      if(a[start]==b[0])\n      {\n         break;\n      }\n      start++;\n\
    \   }\n   if(start>=m)\n      return false;\n   for(int i=0;i<n;i++)\n   {\n \
    \     if(a[(start+i)%m]!=b[i])\n         return false;\n   }\n   return true;",
  "    assert(a.length()>0);\n    assert(b.length()>0);\n    int i,j,k;\n    bool\
    \ flag;\n    if(a.length()<b.length())\n    {\n        return false;\n    }\n\
    \    int l=b.length();\n    i=0;\n    while(i<l)\n    {\n        if(a[i]==b[0])\n\
    \        {\n            j=i;\n            k=0;\n            flag=true;\n     \
    \       while(j<a.length()&&k<b.length())\n            {\n                if(a[j]!=b[k])\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n                j++;\n                k++;\n            }\n\
    \            if(j==a.length())\n            {\n                j=0;\n        \
    \    }\n            while(j<i&&k<b.length())\n            {\n                if(a[j]!=b[k])\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n                j++;\n                k++;\n            }\n\
    \            if(flag)\n            {\n                return true;\n         \
    \   }\n        }\n        i++;\n    }\n    return false;", "\tif (a.size() !=\
    \ b.size())\n\t\treturn false;\n\tstd::string s = a + a;\n\tif (s.find(b) != std::string::npos)\n\
    \t\treturn true;\n\treturn false;", "  // your code here\n  if(a.size()>b.size())\n\
    \  {\n  string c=a;\n  a=b;\n  b=c;\n  }\n  \n  for(int i=0;i<a.size();i++)\n\
    \  {\n  int flag=0;\n  for(int j=0;j<a.size();j++)\n  {\n  if(a[j]!=b[(i+j)%a.size()])\n\
    \  {\n  flag=1;\n  break;\n  }\n  }\n  if(flag==0)\n  return true;\n  }\n  return\
    \ false;", "\tif (a.length() != b.length()) {\n\t\treturn false;\n\t}\n\ta +=\
    \ a;\n\t// We're looking for b in a, not at all the world or something\n\treturn\
    \ (a.find(b) != std::string::npos);", "    /* \n    Write your code here.\n  \
    \  */\n    return false;", "\t// Write your code here\n\tint len1 = a.length();\n\
    \tint len2 = b.length();\n\tif (len1 == 0 || len2 == 0)\n\t\treturn false;\n\t\
    if (len1 < len2)\n\t\treturn false;\n\tint p1 = 0;\n\tfor (int i = 0; i < len1;\
    \ i++) {\n\t\tif (a[i] == b[p1]) {\n\t\t\tp1++;\n\t\t\tif (p1 == len2)\n\t\t\t\
    \treturn true;\n\t\t}\n\t\telse {\n\t\t\tp1 = 0;\n\t\t}\n\t}\n\tp1 = 0;\n\tstd::string\
    \ cp1 = b + b;\n\tint len3 = 2 * len2;\n\tfor (int i = 0; i < len3; i++) {\n\t\
    \tif (cp1[i] == a[p1]) {\n\t\t\tp1++;\n\t\t\tif (p1 == len1)\n\t\t\t\treturn true;\n\
    \t\t}\n\t\telse {\n\t\t\tp1 = 0;\n\t\t}\n\t}\n\treturn false;", '    return false;',
  "  std::size_t found;\n  found = a.find(b);\n  //if found\n  if (found != std::string::npos)\
    \ {\n    return true;\n  } else {\n    //shift\n    a = a.back() + a.substr(0,\
    \ a.size() - 1);\n    return cycpattern_check(a, b);\n  }", "    if(a.size() <\
    \ b.size())\n        return false;\n    b += b;\n    int j = 0;\n    for(int i\
    \ = 0; i < a.size(); i++) {\n        if(a[i] == b[j])\n            j++;\n    \
    \    else\n            j = 0;\n        if(j == b.size()/2)\n            return\
    \ true;\n    }\n    return false;", "    if(a.length()==b.length() && a.length()>0)\n\
    \    {\n        int len = a.length();\n        b = b+b;\n        if(b.find(a)!=std::string::npos)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n        return false;", "    // Write your code here\n    // You can\
    \ print for debugging purposes, e.g.\n    // cout << \"this is a debug message\"\
    \ << endl;\n    int n = a.length();\n    int m = b.length();\n    if(m > n)\n\
    \    {\n        return false;\n    }\n    string temp = a;\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        if(temp.substr(0, m) == b)\n        {\n        \
    \    return true;\n        }\n        temp = temp.substr(1, n-1) + temp[0];\n\
    \    }\n    return false;", '    return false;', "  int n = a.size();\n  int m\
    \ = b.size();\n  if(m==0){\n    return true;\n  }\n  if(n==0){\n    return false;\n\
    \  }\n  if(n!=m){\n    return false;\n  }\n  std::string temp = a+a;\n  if(temp.find(b)!=std::string::npos){\n\
    \    return true;\n  }\n  return false;", "\n// This is a naive approach\n// I\
    \ will be thinking about a more efficient way\n  for(int i=0;i<a.length();i++)\n\
    \  {\n    if(a[i]==b[0])\n    {\n      if(a.substr(i,b.length())==b)\n      {\n\
    \        return true;\n      }\n    }\n  }\n  return false;", "\tif (a.length()\
    \ >= b.length()) {\n\t\tfor (int i = 0; i < a.length(); i++) {\n\t\t\tif (a.substr(i,\
    \ b.length()) == b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tstd::rotate(a.begin(),\
    \ a.begin() + 1, a.end());\n\t\t}\n\t}\n\treturn false;", "  // Write your code\
    \ here.\n    int len_a = a.length();\n    int len_b = b.length();\n    int count\
    \ =0;\n    if(len_a < len_b)\n        return false;\n    else\n    {\n       \
    \ for(int i=0;i<len_a;i++)\n        {\n            for(int j=0;j<len_b;j++)\n\
    \            {\n                if(a[i] == b[j])\n                {\n        \
    \            if(i+len_b-1<len_a)\n                    {\n                    \
    \    for(int k=0;k<len_b;k++)\n                        {\n                   \
    \         if(a[i+k] == b[j])\n                            {\n                \
    \                count++;\n                                j = (j+1)%len_b;\n\
    \                            }\n                            else\n           \
    \                     break;\n                        }\n                    }\n\
    \                    else\n                    {\n                        for(int\
    \ k=0;k<len_b;k++)\n                        {\n                            if(a[i]\
    \ == b[j])\n                            {\n                                count++;\n\
    \                                j = (j+1)%len_b;\n                          \
    \      i++;\n                            }\n                            else\n\
    \                                break;\n                        }\n         \
    \           }\n                }\n            }\n        }\n    }\n    if(count\
    \ == len_b)\n        return true;\n    else\n        return false;", "\tstd::string\
    \ str = a + a;\n\treturn str.find(b) != std::string::npos;", "\t// Write your\
    \ code here.\n\tif (a.length() < b.length()) {\n\t\treturn false;\n\t}\n\tstd::string\
    \ temp = b;\n\ttemp.append(b);\n\tif (temp.find(a) != std::string::npos) {\n\t\
    \treturn true;\n\t}\n\treturn false;", "    if(a.length() < b.length()) return\
    \ false;\n    std::string temp = a+a;\n    if(temp.find(b) != std::string::npos)\
    \ return true;\n    return false;", "\tint sz=b.size();\n\tb+=b;\n\tint f=0;\n\
    \tfor(int i=0;i<sz;i++){\n\t\tif(b.substr(i,sz)==a){\n\t\t\tf=1;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn f;", "\tint n=a.length();\n\tint m=b.length();\n\tif(n!=m)\
    \ return false;\n\tint i=1;\n\tint j=0;\n\tstd::vector<int> lps(m,0);\n\twhile(i<m){\n\
    \t\tif(b[i]==b[j]){\n\t\t\tlps[i]=j+1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\
    \t\t\tif(j==0){\n\t\t\t\tlps[i]=0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\
    \tj=lps[j-1];\n\t\t\t}\n\t\t}\n\t}\n\tint k=0;\n\tfor(int i=0;i<a.length();i++){\n\
    \t\tif(a[i]==b[k]){\n\t\t\tk++;\n\t\t}\n\t\telse{\n\t\t\tif(k!=0){\n\t\t\t\tk=lps[k-1];\n\
    \t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(k==m){\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    std::rotate(b.begin(),b.begin()+1,b.end());\n\tk=0;\n\tfor(int i=0;i<a.length();i++){\n\
    \t\tif(a[i]==b[k]){\n\t\t\tk++;\n\t\t}\n\t\telse{\n\t\t\tif(k!=0){\n\t\t\t\tk=lps[k-1];\n\
    \t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(k==m){\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;", "    // Write your code here\n    int n = a.length();\n    int\
    \ m = b.length();\n    if(m==0 || m==1) return true;\n    if(n==0) return false;\n\
    \    for(int i=0;i<m;i++){\n        if(a[0]==b[i]){\n            int k=0;\n  \
    \          for(int j=i;j<m;j++){\n                if(a[k]!=b[j]) break;\n    \
    \            k++;\n            }\n            if(k==m) return true;\n        \
    \    for(int j=0;j<i;j++){\n                if(a[k]!=b[j]) break;\n          \
    \      k++;\n            }\n            if(k==m) return true;\n        }\n   \
    \ }\n    return false;", "\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l =\
    \ 0;\n\t// char temp;\n\t// for (i = 0; i < b.length(); i++) {\n\t// \ttemp =\
    \ b[0];\n\t// \tfor (j = 0; j < b.length() - 1; j++) {\n\t// \t\tb[j] = b[j +\
    \ 1];\n\t// \t}\n\t// \tb[j] = temp;\n\t// \tfor (k = 0; k < a.length(); k++)\
    \ {\n\t// \t\tif (a[k] == b[0]) {\n\t// \t\t\tfor (l = 0; l < b.length(); l++)\
    \ {\n\t// \t\t\t\tif (a[k + l] != b[l]) {\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t\
    }\n\t// \t\t\t}\n\t// \t\t\tif (l == b.length()) {\n\t// \t\t\t\treturn true;\n\
    \t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\t// return false;\n\t// for (i =\
    \ 0; i < b.length(); i++) {\n\t// \trotate(b.begin(), b.begin() + 1, b.end());\n\
    \t// \tif (a.find(b) != std::string::npos) {\n\t// \t\treturn true;\n\t// \t}\n\
    \t// }\n\tfor (i = 0; i < b.length(); i++) {\n\t\trotate(b.begin(), b.begin()\
    \ + 1, b.end());\n\t\tif (a.find(b) != std::string::npos) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;", "\treturn false;", "    // Write your code here\n\
    \    int lenb = b.length();\n    int lena = a.length();\n    if(lenb > lena) return\
    \ false;\n    string temp = b + b;\n    int i = 0;\n    int count = 0;\n    for(i\
    \ = 0; i < lena; i++){\n        if(a[i] == b[0])\n            if(temp.find(a.substr(i,\
    \ lenb)) != string::npos)\n                return true;\n    }\n    return false;",
  "\t// your code goes here\n\tstring s1 = b+b;\n\tif(s1.find(a) != std::string::npos)\
    \ return true;\n\treturn false;", "    // Write your code here\n    string s =\
    \ b + b;\n    return (s.find(a) != -1);", "\tstd::string temp = b;\n\tint i;\n\
    \tfor (i = 0; i < b.length(); i++) {\n\t\tstd::rotate(temp.begin(), temp.begin()\
    \ + 1, temp.end());\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "\t// TODO: remove this line and implement\
    \ this code.\n\tif (a.length() != b.length())\n\t\treturn false;\n\tstd::string\
    \ temp = b + b;\n\tif (temp.find(a) != std::string::npos)\n\t\treturn true;\n\t\
    return false;", "    int m = a.length();\n    int n = b.length();\n    if(m<n)\
    \ return false;\n    std::string s = b + b;\n    if(s.find(a) != std::string::npos)\
    \ return true;\n    return false;", "   if(a.size() < b.size()) return false;\n\
    \    if(a.size() == b.size() && a!=b) return false;\n   if(a.find(b) != std::string::npos)\
    \ return true;\n    for(auto i=1;i<b.size();i++){\n        auto s = b.substr(i,b.size()-i);\n\
    \        auto e = b.substr(0,i);\n        b = s+e;\n        if(a.find(b) != std::string::npos)\
    \ return true;\n    }\n    return false;", "    // Write your code here\n\tstd::string\
    \ c = b + b;\n\tif(c.find(a) != std::string::npos)\n\t\treturn true;\n\telse\n\
    \t\treturn false;", "\t// Your code goes here\n    bool flag = false;\n    string\
    \ c = b;\n    if(a.length() >= b.length()){\n        char temp = c[0];\n     \
    \   for(int i = 0; i < c.length()-1; i++){\n            c[i] = c[i+1];\n     \
    \   }\n        c[c.length()-1] = temp;\n        if(a.find(c) != std::string::npos){\n\
    \            flag = true;\n        }\n        else{\n            flag = cycpattern_check(a,c);\n\
    \        }\n    }\n    return flag;", "    bool flag = true;\n    std::string\
    \ temp(b);\n    if(a.length()==0 || b.length()==0 || b.length()>a.length())\n\
    \        return false;\n    if(a.length()==b.length()){\n        return a==b;\n\
    \    }\n    if(a.length()==1 && b.length()==1){\n        return a==b;\n    }\n\
    \    for(int i=0;i<b.length();i++){\n        flag = true;\n        temp.push_back(temp[0]);\n\
    \        temp.erase(temp.begin());\n        if(temp.length()>=a.length()){\n \
    \           if(temp.find(a)!=std::string::npos){\n                return true;\n\
    \            }\n        }\n        else{\n            if(a.find(temp)!=std::string::npos){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "\t// Write your code here.", "    for(int i=0;i<b.length();i++){\n        if(a.find(b)\
    \ != std::string::npos)\n            return true;\n        b.push_back(b[0]);\n\
    \        b.erase(b.begin());\n    }\n    return false;", "    if(a.size() == 0\
    \ || b.size() == 0 || a.size() < b.size())\n        return false;\n    string\
    \ x = b + b;\n    int l = a.size(),n = b.size();\n    for(int i = 0; i < n; i++)\
    \ {\n        int flag = 0;\n        if(a[0] == x[i]) {\n            for(int j\
    \ = 0; j < l; j++) {\n                if(a[j] != x[i]) {\n                   \
    \ flag = 1;\n                    break;\n                }\n                if(i\
    \ == n - 1)\n                    i = -1;\n                i++;\n            }\n\
    \            if(flag == 0)\n                return true;\n        }\n    }\n \
    \   return false;", "    // b is the pattern to search\n    // a is the string\n\
    \    // Write your code here\n    int n = a.length();\n    int m = b.length();\n\
    \    for(int i=0;i<n;i++){\n        if(a[i]==b[0]){\n            int j=0;\n  \
    \          int k=i;\n            while(j<m){\n                if(a[k]!=b[j]){\n\
    \                    break;\n                }\n                j++;\n       \
    \         k=(k+1)%n;\n            }\n            if(j==m){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    int n = a.length();\n\
    \    int l = b.length();\n    if(n<l) return false;\n    b = b+b;\n    int j =\
    \ 0;\n    for(int i=0;i<n;i++){\n        if(a[i]==b[j]){\n            j++;\n \
    \           if(j==l) return true;\n        }else{\n            j = 0;\n      \
    \  }\n    }\n    return false;", "    int len = a.length();\n    string s = a\
    \ + a;\n    int len2 = s.length();\n    int i = 0;\n    int j = 0;\n    while(j\
    \ < len2 && i < len) {\n        if(s[j] == b[i]) {\n            j++;\n       \
    \     i++;\n        } else {\n            j = j - i + 1;\n            i = 0;\n\
    \        }\n    }\n    if(i == len) {\n        return true;\n    }\n    return\
    \ false;", "    //Write your code here\n    int n = a.length();\n    int m = b.length();\n\
    \    if(m > n)\n        return false;\n    std::vector<int> a_pre(n), b_pre(m);\n\
    \    a_pre[0] = a[0];\n    b_pre[0] = b[0];\n    for(int i = 1; i < n; i++)\n\
    \        a_pre[i] = a_pre[i-1] + a[i];\n    for(int i = 1; i < m; i++)\n     \
    \   b_pre[i] = b_pre[i-1] + b[i];\n    for(int i = 0; i < n; i++){\n        int\
    \ sum = (a_pre[(i+m-1)%n] - (i == 0 ? 0 : a_pre[i-1]));\n        if(sum == b_pre[m-1])\n\
    \            return true;\n    }\n    return false;", "    //test\n    assert(a.size()>=b.size());\n\
    \    //test\n    int size_a = a.size();\n    int size_b = b.size();\n    int j=0;\n\
    \    for(int i=0;i<size_a;i++){\n        if(a[i]==b[j]){\n            j++;\n \
    \       }else{\n            j=0;\n        }\n        if(j==size_b){\n        \
    \    return true;\n        }\n    }\n    std::string b1 = b.substr(1,b.size()-1)+b[0];\n\
    \    return cycpattern_check(a,b1);", "    //your code here\n    string n = a+a;\n\
    \    int count = 0;\n    for(int i = 0; i < n.length(); i++){\n      if(n[i] ==\
    \ b[0]){\n        for(int j = 0; j < b.length(); j++){\n          if(b[j] == n[i+j])\n\
    \            count++;\n        }\n      }\n    }\n    if(count == b.length())\n\
    \      return true;\n    else\n      return false;", "  bool flag = false;\n \
    \ int len = b.length();\n  while(len > 0){\n    char x = b[0];\n    b.erase(b.begin()+0);\n\
    \    b.push_back(x);\n    len--;\n    if(a.find(b) != -1){\n      flag = true;\n\
    \      break;\n    }\n  }\n  return flag;", "    // Write your code here\n   \
    \ int flag = 0;\n    int n = a.length();\n    int m = b.length();\n    for(int\
    \ i = 0; i<n; i++){\n        for(int j = 0; j<m; j++){\n            if(a[i+j]\
    \ != b[j]){\n                flag = 1;\n                break;\n            }\n\
    \        }\n        if(flag == 0){\n            return true;\n        }\n    \
    \    flag = 0;\n    }\n    return false;", "\t//assuming len(a)>=len(b)\n\tint\
    \ n = a.length();\n\tint m = b.length();\n\tint i,j;\n\tint count = 0;\n\tfor(i=0;i<n;i++)\n\
    \t{\n\t\tint j = 0;\n\t\twhile(j<m)\n\t\t{\n\t\t\tif(a[(i+j)%n]!=b[j])\n\t\t\t\
    \tbreak;\n\t\t\tj++;\n\t\t}\n\t\tif(j==m)\n\t\t\tcount++;\n\t}\n\treturn count>=1;",
  "    std::string c;\n    c = b + b;\n    return c.find(a) != std::string::npos;",
  "    std::string bx = b + b;\n    return (bx.find(a) != std::string::npos);", " \
    \   if(a.length() < b.length())\n        return false;\n    else if(a.length()\
    \ == b.length())\n        return (a == b);\n    std::string p = a;\n    std::string\
    \ q = b;\n    while(p.length() != b.length()) {\n        q += b;\n        if(p.find(q)\
    \ != std::string::npos)\n            return true;\n        p += a;\n    }\n  \
    \  return false;", "\tif (a.size() < b.size())\n\t\treturn false;\n\tstring s\
    \ = b + b;\n\tif (s.find(a) != string::npos)\n\t\treturn true;\n\treturn false;",
  "    if(a.size() < b.size()) {\n        return false;\n    }\n    // write your\
    \ code here\n    b += b;\n    for(int i = 0; i < b.size() - a.size(); i++) {\n\
    \        if(b.substr(i, a.size()) == a) {\n            return true;\n        }\n\
    \    }\n    return false;", "  // Write your code here\n  if(a.length()!=b.length())\n\
    \  return false;\n  string s=a+a;\n  if(s.find(b)!=string::npos)\n  return true;\n\
    \  return false;", "    if(a.length()>b.length()) std::swap(a,b);\n\n    std::string\
    \ nb=b+b;\n    for(int i=0;i<=nb.length()-a.length();i++){\n        std::string\
    \ temp=nb.substr(i,a.length());\n        if(temp==a) return true;\n    }\n   \
    \ return false;", "\t// Write your code here\n\t// return true or false accordingly.\n\
    \    \tif(a.size()!=b.size())\n\t\treturn false;\n\tif(a.size()==0 && b.size()==0)\n\
    \t\treturn true;\n\tif(a.size()==1 && b.size()==1)\n\t\treturn a==b;\n\tint s=0;\n\
    \twhile(s<a.size()){\n\t\tstd::string e=a.substr(s,a.size()-s);\n\t\tstd::string\
    \ d=a.substr(0,s);\n\t\te=e+d;\n\t\tint i=0;\n\t\tfor(int j=0;j<e.size();j++){\n\
    \t\t\tif(e[j]==b[i]){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti=0;\n\t\t\t\
    }\n\t\t\tif(i==b.size()){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ts++;\n\t\
    }\n\treturn false;", "\t// Write your code here\n\tstd::string s = b;\n\tfor (int\
    \ i = 0; i < b.length(); i++) {\n\t\ts = s.substr(1, s.length() - 1) + s[0];\n\
    \t\tif (a.find(s) != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;", "\tif (a.length() < b.length()) {\n\t\treturn false;\n\t}\n\t\
    for (int i = 0; i < a.length(); i++) {\n\t\tbool found = true;\n\t\tfor (int j\
    \ = 0; j < b.length(); j++) {\n\t\t\tif (a[(i + j) % a.length()] != b[j]) {\n\t\
    \t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found) {\n\t\t\t\
    return true;\n\t\t}\n\t}\n\treturn false;", "\t/*\n\t * if a is the main string\
    \ and b is the search string\n\t * then if b exists in a then its a substring\n\
    \t *\t\telse \n\t *\t\t\tcreate a circular string out of a\n\t *\t\t\tmake a temp\
    \ string, b_dash = a[0] + b\n\t *\t\t\tif a_dash (b_dash rotated) exists in a\
    \ then its a substring\n\t *\t\t\telse\n\t *\t\t\t\tincrement a[0]\n\t *\t\t\t\
    \tincrement i in loop\n\t *\t\t\t\trotate the string b_dash\n\t *\t\t\t\tcheck\
    \ if it exists in a\n\t *\t\t\t\trepeat untill b_dash becomes b again and i reaches\
    \ a.length()\n\t *\t\t\t\tif b_dash becomes b again and i has not reached a.length()\n\
    \t *\t\t\t\t\tthen b is not a substring\n\t *\t\t\t\t\treturn 0\n\t *\t\t\t\t\
    if i reaches a.length() before b_dash becomes b again\n\t *\t\t\t\t\tthen b is\
    \ a substring\n\t *\t\t\t\t\treturn 1\n\t */\n\tstd::string b_dash = b;\n\tif(a.find(b_dash)\
    \ != std::string::npos) {\n\t\t// std::cout << \"b_dash exists in a\" << std::endl;\n\
    \t\treturn 1;\n\t}\n\telse {\n\t\t// std::cout << \"b_dash does not exist in a\"\
    \ << std::endl;\n\t\t// std::cout << \"lets rotate b and check\" << std::endl;\n\
    \t\tchar temp = b_dash[0];\n\t\tb_dash = b_dash.substr(1,b_dash.length()-1);\n\
    \t\tb_dash += temp;\n\t\t// std::cout << \"b_dash is now : \" << b_dash << std::endl;\n\
    \t\tint i = 0;\n\t\twhile(i<a.length()) {\n\t\t\tif(a.find(b_dash) != std::string::npos)\
    \ {\n\t\t\t\t//", "\tif (a.size() < b.size()) return false;\n\tb += b;\n\tif (b.find(a)\
    \ != std::string::npos) return true;\n\treturn false;", "    if(a.size() < b.size())\
    \ return false;\n    if(a.size() == b.size()) return a == b;\n    std::vector<int>\
    \ o(a.size() + 1, 0);\n    int i = 0, j = 1;\n    while(j < a.size()) {\n    \
    \    if(a[i] == a[j]) {\n            o[j + 1] = i + 1;\n            i++;\n   \
    \         j++;\n        } else if(i == 0) {\n            o[j + 1] = 0;\n     \
    \       j++;\n        } else {\n            i = o[i];\n        }\n    }\n    i\
    \ = 0, j = 0;\n    while(i < a.size() && j < b.size()) {\n        if(a[i] == b[j])\
    \ {\n            i++;\n            j++;\n        } else if(j == 0) {\n       \
    \     i++;\n        } else {\n            j = o[j];\n        }\n    }\n    if(j\
    \ == b.size()) return true;\n    i = 0, j = 0;\n    while(i < a.size() && j <\
    \ b.size()) {\n        if(a[i] == b[j]) {\n            i++;\n            j++;\n\
    \        } else if(j == 0) {\n            i++;\n        } else {\n           \
    \ j = o[j];\n        }\n    }\n    if(j == b.size()) return true;\n    return\
    \ false;", "\t//write your code here\n\treturn false;", "\tif (a.size() < b.size())\n\
    \t\treturn false;\n\tstd::vector<int> index;\n\tfor (int i = 0; i < a.size();\
    \ i++) {\n\t\tif (a[i] == b[0])\n\t\t\tindex.push_back(i);\n\t}\n\tfor (int j\
    \ = 0; j < index.size(); j++) {\n\t\tint i = index[j];\n\t\tbool isEqual = true;\n\
    \t\tfor (int k = 0; k < b.size(); k++) {\n\t\t\tif (a[(i + k) % a.size()] != b[k])\
    \ {\n\t\t\t\tisEqual = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isEqual)\n\
    \t\t\treturn true;\n\t}\n\treturn false;", "\tstd::string str = b + b;\n\tif (str.find(a)\
    \ != std::string::npos)\n\t\treturn true;\n\treturn false;", "    if(a.size()==0\
    \ || b.size()==0 || a.size()<b.size())\n        return false;\n    //write your\
    \ code here\n    std::vector<char> v(a.begin(),a.end());\n    while(v[0]!=b[0]){\n\
    \        std::rotate(v.begin(),v.begin()+1,v.end());\n    }\n    std::string rotated(v.begin(),v.end());\n\
    \    if(rotated.find(b)!=std::string::npos)\n        return true;\n    return\
    \ false;", "\tint n = a.length();\n\tint m = b.length();\n\tfor (int i = 0; i\
    \ < n; i++) {\n\t\tstd::string x;\n\t\tfor (int j = i; j < n; j++)\n\t\t\tx +=\
    \ a[j];\n\t\tfor (int j = 0; j < i; j++)\n\t\t\tx += a[j];\n\t\tif (x.find(b)\
    \ != std::string::npos)\n\t\t\treturn true;\n\t}\n\treturn false;", "    std::string\
    \ newb = b+b;\n    // abd\n    // abdabd\n    // abd is a substring of abdabd\n\
    \    // but abdabd is not a substring of abd\n    if(a.size() < b.size())\n  \
    \      return false;\n    if(a.size() == b.size())\n        return newb.find(a)\
    \ != std::string::npos;\n    // abdabdabdabdabdabdabd\n    // abd\n    // find\
    \ abd in abdabdabdabdabdabdabd, then if we find it, we can say that b is a substring\
    \ of a.\n    return newb.find(a) != std::string::npos;", "\t// Write your code\
    \ here\n  int l=a.length();\n  int r=b.length();\n  if(l<r)\n    return false;\n\
    \  int i,j,k;\n  for(i=0;i<l;i++)\n  {\n    j=0;\n    k=i;\n    if(a[k]==b[j])\n\
    \    {\n      k++;\n      j++;\n      if(k==l)\n        k=0;\n      while(j<r)\n\
    \      {\n        if(a[k]==b[j])\n        {\n          k++;\n          j++;\n\
    \          if(k==l)\n            k=0;\n        }\n        else\n          break;\n\
    \      }\n      if(j==r)\n        return true;\n    }\n  }\n  return false;",
  "    if(a.size() != b.size())\n        return false;\n    string d = b+b;\n    size_t\
    \ pos = d.find(a);\n    if(pos == string::npos)\n        return false;\n    return\
    \ true;", "    // write your code here\n    int j=0;\n    int count=0;\n    int\
    \ n = a.length();\n    int m = b.length();\n    while(j<m)\n    {\n        if(a[j]\
    \ == b[0])\n        {\n            int k=j;\n            int i = 0;\n        \
    \    while(i<m)\n            {\n                if(a[k]==b[i])\n             \
    \   {\n                    k = (k+1)%n;\n                    i++;\n          \
    \      }\n                else\n                {\n                    break;\n\
    \                }\n            }\n            if(i==m)\n            {\n     \
    \           count++;\n            }\n        }\n        j++;\n    }\n    if(count==0)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        return true;\n\
    \    }", "    // Write your code here\n    return false;", "    // TODO:\n   \
    \ return true;", "    int ia = 0, ib = 0;\n    while(ia < a.size() && ib < b.size())\
    \ {\n        if(a[ia] == b[ib]) {\n            ia++;\n            ib++;\n    \
    \    } else {\n            ia = ia - ib + 1;\n            ib = 0;\n        }\n\
    \    }\n    return ib == b.size();", "\tif (a.length() != b.length()) {\n\t\t\
    return false;\n\t}\n\tstring str = b + b;\n\tif (str.find(a) != string::npos)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;", "    //assert(0);\n    if(a.length()<b.length())\n\
    \    {\n        return false;\n    }\n    if(a.length()==b.length())\n    {\n\
    \        if(a.compare(b)==0)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n    int\
    \ i,j;\n    std::vector<int>vec;\n    int count=0;\n    for(i=0;i<a.length();i++)\n\
    \    {\n        if(a[i]==b[0])\n        {\n            for(j=0;j<b.length();j++)\n\
    \            {\n                if(a[(i+j)%a.length()]==b[j])\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \     if(count==b.length())\n            {\n                return true;\n   \
    \         }\n            else\n            {\n                count=0;\n     \
    \       }\n        }\n    }\n    return false;"]
stop_tokens:
- "\n}"
