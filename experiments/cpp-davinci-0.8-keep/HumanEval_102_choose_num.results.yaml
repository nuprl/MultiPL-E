name: HumanEval_102_choose_num
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n   if(x % 2 == 0) {\n      return\
    \ x;\n   }\n   else if((x + 1) % 2 == 0 && x + 1 <= y) {\n      return x + 1;\n\
    \   }\n   else {\n      return -1;\n   }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpea970msd: /tmp/tmpea970msd.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x % 2 == 1 && y % 2 == 0) {\n        return y;\n \
    \   } else if (x % 2 == 1 && y % 2 == 1) {\n        return -1;\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprnq2by9b: /tmp/tmprnq2by9b.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0) return x;\n    else\
    \ if(x+1<=y&&x+1%2==0) return x+1;\n    else return -1;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbex5h02x: /tmp/tmpbex5h02x.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2!=0)\n        x++;\n\
    \    if(y%2!=0)\n        y--;\n    if(x>y)\n        return -1;\n    return y;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long result = 0;\n  for (long\
    \ i = x; i <= y; i++) {\n    if ((i % 2 == 0) && (i > result)) {\n      result\
    \ = i;\n    }\n  }\n  if (result == 0) {\n    return -1;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Write your code here.\n  long\
    \ res = -1;\n  for(int i = x; i <= y; i++){\n      if(i % 2 == 0){\n         \
    \ res = i;\n      }\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2 == 0)\n        return\
    \ x;\n    if (x+1 > y)\n        return -1;\n    return x+1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmp647aeb: /tmp/tmpmp647aeb.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x%2==0)\n\t\treturn x;\n\t\
    else\n\t\treturn x+1;\n\t\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpti4y62yi: /tmp/tmpti4y62yi.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if (x<=y)\n\
    \    {\n        if (x%2 == 0)\n        {\n            return x;\n        }\n \
    \       else\n        {\n            return x+1;\n        }\n    }\n    else\n\
    \    {\n        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4_do_a69: /tmp/tmp4_do_a69.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int n = x;\n    while(n <=\
    \ y){\n        if(n % 2 == 0){\n            return n;\n        }\n        n++;\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpawfrnur2: /tmp/tmpawfrnur2.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long r;\n    if (x%2 == 0){\n\
    \        r = x;\n    }\n    else{\n        r = x+1;\n    }\n    if (r < y){\n\
    \        return r;\n    }\n    else if (r == y){\n        return r;\n    }\n \
    \   else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplgf8hmh9: /tmp/tmplgf8hmh9.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong big;\n\tif (x >= y)\n\t\t\
    big = x;\n\telse\n\t\tbig = y;\n\tfor (int i = big; i >= x; i--) {\n\t\tif (i\
    \ % 2 == 0)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3ey_tptk: /tmp/tmp3ey_tptk.cpp:26: int main(): Assertion `candidate((5234),\
    \ (5233)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long number = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            number =\
    \ i;\n        }\n    }\n    return number;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x % 2 == 0) {\n    return\
    \ x;\n  }\n  else if (x + 1 > y) {\n    return -1;\n  }\n  else {\n    return\
    \ x + 1;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpii1iw3u_: /tmp/tmpii1iw3u_.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong number;\n\tnumber = x %\
    \ 2;\n\tif (number == 0) {\n\t\treturn x;\n\t}\n\telse {\n\t\tif (x + 1 <= y)\
    \ {\n\t\t\treturn x + 1;\n\t\t}\n\t\telse {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp557jl99l: /tmp/tmp557jl99l.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Write your code here\n\
    \  if(x==y){\n    if(x%2==0)\n      return x;\n    else\n      return -1;\n  }\n\
    \  long max=y;\n  if(y%2!=0)\n    y--;\n  for(long i=y;i>=x;i--){\n    if(i%2==0){\n\
    \      return i;\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int i;\n    for(i=y;i>=x;i--)\n\
    \    {\n        if(i%2==0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Your code goes here!\n\tif(x%2==0)\n\
    \t\treturn x;\n\telse\n\t\treturn x+1;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu9qetnei: /tmp/tmpu9qetnei.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    long even = x % 2 == 0 ? x : x + 1;\n    return even <= y ?\
    \ even : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcs7x1far: /tmp/tmpcs7x1far.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x > y) return -1;\n    if(x\
    \ % 2 == 0) return x;\n    return choose_num(x + 1, y);\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsl4xzcjk: /tmp/tmpsl4xzcjk.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Write your code here.\n\
    \  long num = -1;\n  for(int i=x;i<=y;i++){\n    if(i%2==0){\n      num = i;\n\
    \    }\n  }\n  return num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long number_to_return;\n  \
    \  // Checks if x is less than or equal to y\n    if (x <= y) {\n        // Checks\
    \ if the number is even\n        if (x % 2 == 0) {\n            number_to_return\
    \ = x;\n        }\n        // Checks if the number is odd\n        else {\n  \
    \          number_to_return = x + 1;\n        }\n    }\n    // Checks if x is\
    \ greater than y\n    else {\n        number_to_return = -1;\n    }\n    return\
    \ number_to_return;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz8dmelx3: /tmp/tmpz8dmelx3.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x % 2 == 0 && y % 2 == 0)\n\
    \    return y;\n  else if (x % 2 == 0 && y % 2 != 0)\n    return y - 1;\n  else\
    \ if (x % 2 != 0 && y % 2 == 0)\n    return x;\n  else\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfnhzatlv: /tmp/tmpfnhzatlv.cpp:22: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // find the biggest even number\
    \ from x to y\n    // return -1 if there's no such number\n    for(long i=y;i>=x;i--){\n\
    \        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write code here.\n    long\
    \ max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n    \
    \        if(i > max){\n                max = i;\n            }\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0)\n        return\
    \ x;\n    if (x + 1 > y)\n        return -1;\n    return x + 1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdfockagp: /tmp/tmpdfockagp.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n   if (x == y) {\n       if (x\
    \ % 2 == 0) {\n           return x;\n       } else {\n           return -1;\n\
    \       }\n   }\n   long max = y;\n   if (y % 2 == 1) {\n       max--;\n   }\n\
    \   if (max < x) {\n       return -1;\n   }\n   while (max >= x) {\n       if\
    \ (max % 2 == 0) {\n           return max;\n       }\n       max--;\n   }\n  \
    \ return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code goes here.\n \
    \   if (y%2==0)\n        return y;\n    else if (x%2!=0)\n        return -1;\n\
    \    else\n        return y-1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7_s6xces: /tmp/tmp7_s6xces.cpp:21: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (x == y)\
    \ {\n        return -1;\n    }\n    return choose_num(x + 1, y);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbqpqkjkr: /tmp/tmpbqpqkjkr.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long max = -1;\n  for (long i\
    \ = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      max = i;\n    }\n  }\n  return\
    \ max;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // WRITE YOUR CODE HERE\n \
    \   // Finds the largest even number in [x, y]\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here\n  long rv\
    \ = -1;\n  for (long i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      rv =\
    \ i;\n    }\n  }\n  return rv;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0 && y % 2 == 0)\n\
    \t\treturn y;\n\telse if (x % 2 == 0 && y % 2 != 0)\n\t\treturn y - 1;\n\telse\
    \ if (x % 2 != 0 && y % 2 == 0)\n\t\treturn x + 1;\n\telse\n\t\treturn x;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgyyatu9d: /tmp/tmpgyyatu9d.cpp:22: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n\n\
    \    // TODO: implement me\n    if (x > y) {\n        long temp = x;\n       \
    \ x = y;\n        y = temp;\n    }\n    if (x % 2 == 0) {\n        return x;\n\
    \    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpddbwc8nx: /tmp/tmpddbwc8nx.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tint k;\n\tfor (int i = x; i <=\
    \ y; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tk = i;\n\t\t}\n\t}\n\tif (k != NULL)\
    \ {\n\t\treturn k;\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp26e8nrq: /tmp/tmpp26e8nrq.cpp:26: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0) {\n\t\tif (x\
    \ >= y) {\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn x + 2;\n\t\t}\n\t\
    }\n\telse {\n\t\tif (x + 1 >= y) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t\
    return x + 1;\n\t\t}\n\t}\n\t\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpo3xsn25x: /tmp/tmpo3xsn25x.cpp:32: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    //YOUR CODE HERE\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp508gefs5: /tmp/tmp508gefs5.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0);\n  assert(y >\
    \ 0);\n  // Your code here.\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbotmx55_: /tmp/tmpbotmx55_.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0)\n\t\treturn x;\n\
    \telse\n\t\treturn x + 1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp206kc380: /tmp/tmp206kc380.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x % 2 != 0)\n        x++;\n\
    \    if(y % 2 != 0)\n        y--;\n    if(x > y)\n        return -1;\n    return\
    \ y;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x%2==0) return x;\n  else\
    \ if (x%2==1 && y%2==1) return -1;\n  else return x+1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps46mdz1p: /tmp/tmps46mdz1p.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) return i;\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\treturn x<y?y/2*2<=y?y:y/2*2-2:x;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd9eq0lv1: /tmp/tmpd9eq0lv1.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long ans;\n  if(x%2==0){\n  \
    \  if(x+2<=y){\n      ans=x+2;\n    }\n    else if(x+1<=y){\n      ans=x+1;\n\
    \    }\n    else\n      ans=-1;\n  }\n  else{\n    if(x+1<=y){\n      ans=x+1;\n\
    \    }\n    else\n      ans=-1;\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplq0obuoa: /tmp/tmplq0obuoa.cpp:34: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2==0)\n    {\n      \
    \  return x;\n    }\n    else if (x%2!=0 && x!=y)\n    {\n        return x+1;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n    \n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpr0ybjkiz: /tmp/tmpr0ybjkiz.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    \n    long a;\n    if(x%2==0)\n    {\n    a=x;\n    }\n    else\n    {\n\
    \    a=x+1;\n    }\n    if(y%2==0)\n    {\n    for(long i=a;i<=y;i+=2)\n    {\n\
    \    if(i%2==0)\n    {\n    return i;\n    }\n    }\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpntxf3tvb: /tmp/tmpntxf3tvb.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    return ((x % 2 == 0) ? x :\
    \ x + 1);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzeouro01: /tmp/tmpzeouro01.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x%2==0)\n\t\treturn x;\n\t\
    else\n\t\treturn x+1;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnxmchqdj: /tmp/tmpnxmchqdj.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int result = -1;\n    for (int\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result = i;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzzdgsr67: /tmp/tmpzzdgsr67.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // put your code here\n   \
    \ if (x % 2 == 0){\n        return x;\n    }\n    return x+1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0ho80euf: /tmp/tmp0ho80euf.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long answer = -1;\n    long\
    \ temp = 0;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n    \
    \        temp = i;\n        }\n    }\n    answer = temp;\n    return answer;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwxytm2cs: /tmp/tmpwxytm2cs.cpp:23: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Implement a function that\
    \ returns the largest even integer \n  // between x and y. If there is no even\
    \ integer between x and y,\n  // then return -1.\n  //\n  // HINT: You can use\
    \ the modulus operator (%) to determine if a number\n  // is even. For example,\
    \ 9 % 2 is 1 because 9 is odd. 10 % 2 is 0\n  // because 10 is even.\n  // If\
    \ a number is divisible by 2, it is an even number.\n  long a;\n  for(a=y;a>=x;a--)\n\
    \    if(a%2==0)\n      return a;\n  return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x%2==0 && y%2==0)\n\t{\n\t\
    \tlong temp=x;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\t\t\tif(temp==y)\n\
    \t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\t\t\t}\n\t\
    \t}\n\t\telse\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2!=0)\n\
    \t{\n\t\tlong temp=x+1;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\
    \t\t\tif(temp==y)\n\t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\
    \t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\telse if(x%2==0\
    \ && y%2!=0)\n\t{\n\t\tif(x<y)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2==0)\n\t{\n\t\tif(x<y)\n\
    \t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\
    \treturn -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2ai7q9fp: /tmp/tmp2ai7q9fp.cpp:74: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0);\n  assert(y >\
    \ 0);\n  assert(x <= y);\n  // put your code here\n  return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2mfy6092: /tmp/tmp2mfy6092.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Check input\n  assert(x >\
    \ 0);\n  assert(y > 0);\n  assert(x <= y);\n  // even number check\n  if (x %\
    \ 2 == 0)\n  {\n    return x;\n  }\n  else if ((x + 1) % 2 == 0)\n  {\n    if\
    \ (x + 1 <= y)\n    {\n      return x + 1;\n    }\n    else if (x + 1 > y)\n \
    \   {\n      return -1;\n    }\n  }\n  else\n  {\n    if (x + 2 <= y)\n    {\n\
    \      return x + 2;\n    }\n    else if (x + 2 > y)\n    {\n      return -1;\n\
    \    }\n  }\n  return 0;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy43pm__h: /tmp/tmpy43pm__h.cpp:45: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0)\n\t\treturn x;\n\
    \tif (x + 1 == y)\n\t\treturn -1;\n\treturn choose_num(x + 1, y);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj3wrll10: /tmp/tmpj3wrll10.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long min = (x < y) ? x : y;\n\
    \    long max = (x > y) ? x : y;\n    // TODO: Write your code here\n    long\
    \ num = -1;\n    for(long i = max; i >= min; i--) {\n        if(i % 2 == 0) {\n\
    \            num = i;\n            break;\n        }\n    }\n    return num;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdoq2x6fc: /tmp/tmpdoq2x6fc.cpp:25: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if ((i % 2) == 0) {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y) {\n        if (x\
    \ % 2 == 0) {\n            return x;\n        } else {\n            return x +\
    \ 1;\n        }\n    } else {\n        return -1;\n    }\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu_v_cl6p: /tmp/tmpu_v_cl6p.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if(x == y) {\n    if(x % 2 ==\
    \ 0) {\n      return x;\n    }\n    else {\n      return -1;\n    }\n  }\n  else\
    \ if(x > y) {\n    return -1;\n  }\n  else {\n    return choose_num(x+1, y);\n\
    \  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsu4te61b: /tmp/tmpsu4te61b.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code goes here\n  \
    \  return 0;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2v0s8luy: /tmp/tmp2v0s8luy.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   for(int i=x;i<=y;i++){\n    \tif(i%2==0){\n    \t\treturn i;\n    \t}\n  \
    \  }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptzs6qaqc: /tmp/tmptzs6qaqc.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0) {\n\t\tif (x\
    \ >= y)\n\t\t\treturn x;\n\t\tif (x + 1 == y)\n\t\t\treturn -1;\n\t\treturn choose_num(x\
    \ + 2, y);\n\t}\n\telse {\n\t\tif (x + 1 == y)\n\t\t\treturn -1;\n\t\treturn choose_num(x\
    \ + 1, y);\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpx7pl8ut0: /tmp/tmpx7pl8ut0.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here!\n    long\
    \ start = std::min(x, y);\n    long end = std::max(x, y);\n    long max = -1;\n\
    \    while (start <= end) {\n      if (start % 2 == 0)\n        max = start;\n\
    \      start++;\n    }\n    return max;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp97glx9mp: /tmp/tmp97glx9mp.cpp:24: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    \n    if (x > y){\n      return\
    \ -1;\n    }\n    \n    for (long i = y; i >= x; i--){\n        if (i % 2 == 0){\n\
    \            return i;\n        }\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong result = -1;\n\tfor (long\
    \ i = x; i <= y; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x < y) {\n        if (x\
    \ % 2 == 0) {\n            return x;\n        } else {\n            return x +\
    \ 1;\n        }\n    } else if (x == y) {\n        if (x % 2 == 0) {\n       \
    \     return x;\n        } else {\n            return -1;\n        }\n    } else\
    \ {\n        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz44w1fwx: /tmp/tmpz44w1fwx.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long bigEven = -1;\n  for (long\
    \ i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      bigEven = i;\n    }\n  }\n\
    \  return bigEven;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: write your code here\n\
    \  long bigEven = -1;\n  for(long i = x; i <= y; i++){\n    if(i % 2 == 0){\n\
    \      bigEven = i;\n    }\n  }\n  return bigEven;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0 && y >= x)\n\t\
    \treturn x;\n\telse if (x % 2 == 1 && y >= x + 1)\n\t\treturn x + 1;\n\telse\n\
    \t\treturn -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp56bbekp: /tmp/tmpp56bbekp.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x\
    \ % 2 != 0 && y % 2 != 0){\n        return -1;\n    }\n    else if(x % 2 == 0\
    \ && y % 2 == 0){\n        return y;\n    }\n    else if(x % 2 == 0 && y % 2 !=\
    \ 0){\n        return x;\n    }\n    else{\n        if(x % 2 == 0 && y % 2 !=\
    \ 0){\n            return x;\n        }\n        else if(x % 2 != 0 && y % 2 ==\
    \ 0){\n            return y;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfvmqc5g_: /tmp/tmpfvmqc5g_.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2 == 0){\n        return\
    \ x;\n    }\n    else if ((x+1)%2 == 0 && (x+1)<=y){\n        return x+1;\n  \
    \  }\n    else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_bllli0g: /tmp/tmp_bllli0g.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tint ans = x;\n\tif (x % 2 ==\
    \ 0) {\n\t\tans = x;\n\t}\n\telse {\n\t\tans = x + 1;\n\t}\n\twhile (ans <= y)\
    \ {\n\t\treturn ans;\n\t\tans = ans + 2;\n\t}\n\treturn -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_wfs37yl: /tmp/tmp_wfs37yl.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement me!\n  \
    \  long a = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            a = i;\n        }\n    }\n    return a;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    return (x % 2 == 0 && x >=\
    \ y) ? x : (x % 2 == 1 && x == y) ? -1 : choose_num(x - 1, y);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long i;\n    for(i=y;i>=x;i--)\n\
    \    {\n        if(i%2==0)\n        return i;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    //long\
    \ n=0;\n    \n    //if(x%2==0 && y%2==0)\n    //    n=y;\n    //else if(x%2==0\
    \ && y%2!=0)\n    //    n=y-1;\n    //else if(x%2!=0 && y%2==0)\n    //    n=x+1;\n\
    \    //else\n    //    n=x;\n    //return n;\n    //return y;\n    //return x;\n\
    \    //return y;\n    //return x;\n    //return y;\n    //return y;\n    //return\
    \ x;\n    //return y;\n    //return x;\n    //return y;\n    //return x;\n   \
    \ //return y;\n    //return x;\n    //return y;\n    //return x;\n    //return\
    \ y;\n    //return x;\n    //return y;\n    //return x;\n    //return y;\n   \
    \ //return x;\n    //return y;\n    //return x;\n    //return y;\n    //return\
    \ x;\n    //return y;\n    //return x;\n    //return y;\n    //return x;\n   \
    \ //return y;\n    //return x;\n    //return y;\n    //return x;\n    //return\
    \ y;\n    //return x;\n    //return y;\n    //return x;\n    //return y;\n   \
    \ //return x;\n    //return y;\n    //return x;\n    //return y;\n    //return\
    \ x;\n    //return y;\n    //return x;\n    //return y;\n    //return x;\n   \
    \ //return y;\n    //return x;\n    //return y;\n    //return x;\n    //return\
    \ y;\n    //return x;\n    //return y;\n    //return x;\n    //return y;\n   \
    \ //return x;\n    //return y;\n    //return x;\n    //return y;\n    //return\
    \ x;\n    //return y;\n    //return x;\n    //return y;\n    //return x;\n   \
    \ //return y\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1vhwei8y: /tmp/tmp1vhwei8y.cpp:91: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if(y == 0) {\n    return 0;\n\
    \  }\n  if(x > y) {\n    return -1;\n  }\n  int result = 0;\n  if(x % 2 == 0)\
    \ {\n    result = x;\n  } else {\n    result = x + 1;\n  }\n  if(result > y) {\n\
    \    return -1;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4nsc0_z9: /tmp/tmp4nsc0_z9.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x == y)\n\t\treturn (x %\
    \ 2 == 0 ? x : -1);\n\tif (x % 2 == 0)\n\t\treturn (x < y ? x : -1);\n\telse\n\
    \t\treturn (x < y ? x + 1 : -1);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1ij1_4u_: /tmp/tmp1ij1_4u_.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x > y) {\n\t\treturn -1;\n\
    \t}\n\n\tlong result = x % 2 == 0 ? x : x + 1;\n\tif (result > y) {\n\t\treturn\
    \ -1;\n\t}\n\n\treturn result;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkupf63bv: /tmp/tmpkupf63bv.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong n = 0;\n\tif (x % 2 == 0)\
    \ {\n\t\tn = x;\n\t}\n\telse {\n\t\tn = x + 1;\n\t}\n\tfor (long i = n; i <= y;\
    \ i++) {\n\t\tif (i % 2 == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8kw7izyk: /tmp/tmp8kw7izyk.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    } else if (x%2 == 0) {\n        return x;\n    } else {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4whp827e: /tmp/tmp4whp827e.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  \n  if(y%2 == 0) {\n    return\
    \ y;\n  }\n  else if(x%2 == 0) {\n    return x;\n  }\n  else if(x%2 == 1 && y%2\
    \ == 1) {\n    return -1;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpse8juvt4: /tmp/tmpse8juvt4.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int flag=0;\n    long ans;\n\
    \    for(long i=x;i<=y;i++){\n        if(i%2==0){\n            flag=1;\n     \
    \       ans=i;\n        }\n    }\n    if(flag==1){\n        return ans;\n    }\n\
    \    else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2!=0) x++;\n    if(y%2!=0)\
    \ y--;\n    return (x>y)?-1:y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // put your code here\n  if(x<y){\n\
    \      if(x%2==0){\n      return x;\n      }\n      if(x%2!=0){\n          long\
    \ number = x+1;\n          return number;\n      }\n  }\n  else if(x>y){\n   \
    \   return -1;\n  }\n  else{\n      if(x%2==0){\n          return x;\n      }\n\
    \      else{\n          return -1;\n      }\n  }\n  \n  return 0;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1j48ngty: /tmp/tmp1j48ngty.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n// Write your code here\nif (x\
    \ % 2 == 0 && y % 2 == 0)\n{\n\tif (x > y)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t\
    {\n\t\treturn y;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsfvc48j8.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpsfvc48j8.cpp:22:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   22 | int main() {\n      |     \
    \       ^\n/tmp/tmpsfvc48j8.cpp:32:1: error: expected \u2018}\u2019 at end of\
    \ input\n   32 | }\n      | ^\n/tmp/tmpsfvc48j8.cpp:9:33: note: to match this\
    \ \u2018{\u2019\n    9 | long choose_num(long x, long y) {\n      |          \
    \                       ^\n/tmp/tmpsfvc48j8.cpp:32:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   32 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x > y) return -1;\n  if (x\
    \ % 2 == 0) return x;\n  return choose_num(x + 1, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0oq5niy9: /tmp/tmp0oq5niy9.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  \n  if(x>y){\n  \treturn -1;\n\
    \  }\n  if(x%2==0){\n  \treturn x;\n  }else{\n  \treturn x+1;\n  }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvhikur1_: /tmp/tmpvhikur1_.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n\n\
    \    if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return\
    \ x;\n    }\n    return choose_num(x + 1, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpedp5lp3m: /tmp/tmpedp5lp3m.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong z = y;\n\twhile (z % 2 !=\
    \ 0 && z != x) {\n\t\tz--;\n\t}\n\tif (z == x && z % 2 != 0) {\n\t\treturn -1;\n\
    \t}\n\treturn z;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnhk_te90: /tmp/tmpnhk_te90.cpp:22: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long best=x;\n    for(long\
    \ i=x;i<=y;i++){\n        if(i%2==0){\n            best=i;\n        }\n    }\n\
    \    if(best%2==0){\n        return best;\n    }\n    else{\n        return -1;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf1p69cgx: /tmp/tmpf1p69cgx.cpp:28: int main(): Assertion `candidate((5234),\
    \ (5233)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0)\n        return\
    \ x;\n    else if (x + 1 == y)\n        return -1;\n    else\n        return x\
    \ + 1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpouc20sgo: /tmp/tmpouc20sgo.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO\n    if(x<y && x%2==0){\n\
    \        return x;\n    }\n    if(x<y && x%2!=0){\n        return x+1;\n    }\n\
    \    if(x>y && y%2==0){\n        return y;\n    }\n    if(x>y && y%2!=0){\n  \
    \      return y+1;\n    }\n    if(x==y && x%2==0){\n        return x;\n    }\n\
    \    else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpeumbnr9i: /tmp/tmpeumbnr9i.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x % 2 == 0){\n        return\
    \ x;\n    }\n    if(x == y){\n        return -1;\n    }\n    return choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq8x5ahbd: /tmp/tmpq8x5ahbd.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // To do: Write the correct\
    \ implementation of this function.\n\tif (x%2==0){\n\t\treturn x;\n\t}\n\telse{\n\
    \t\tif (x+1<=y && x+1>=x){\n\t\t\treturn x+1;\n\t\t}\n\t\telse if (x+2<=y && x+2>=x){\n\
    \t\t\treturn x+2;\n\t\t}\n\t\telse{\n\t\t\treturn -1;\n\t\t}\n\t}\n\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpepql1361: /tmp/tmpepql1361.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long index = y;\n    if(y <=\
    \ 0) {\n        return -1;\n    }\n    else if(x <= 0) {\n        x = 1;\n   \
    \ }\n    for(;index >= x; index--) {\n        if(index % 2 == 0) {\n         \
    \   return index;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x>0 && y>0);\n  for(int\
    \ i=y;i>=x;i--){\n    if(i%2==0){\n      return i;\n    }\n  }\n  return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x >= 0 && y >= 0);\n \
    \ int result = -1;\n  while (x <= y) {\n    if ((x % 2) == 0) {\n      result\
    \ = x;\n    }\n    x++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x % 2 == 0)\n\t\treturn x;\n\
    \telse if((x + 1) % 2 == 0)\n\t\treturn x + 1;\n\telse\n\t\treturn -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpo_tzoi7c: /tmp/tmpo_tzoi7c.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    \n    long toReturn;\n    for(int\
    \ i = x; i <= y; i++){\n        if(i % 2 == 0){\n            toReturn = i;\n \
    \       }\n    }\n    return toReturn;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2u4a36ym: /tmp/tmp2u4a36ym.cpp:22: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if(x>y)\n\
    \    {\n        return -1;\n    }\n    long remainder;\n    for(int i=x;i<=y;i++)\n\
    \    {\n        remainder=i%2;\n        if(remainder==0)\n        {\n        \
    \    return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnydwns3_: /tmp/tmpnydwns3_.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0 || y % 2 == 0)\
    \ {\n\t\tfor (long i = y; i >= x; i--) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\treturn\
    \ i;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (long i = y - 1; i >= x; i--) {\n\
    \t\t\tif (i % 2 == 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2!=0)\n        x++;\n\
    \    for(long i=x;i<=y;i=i+2)\n    {\n        if(i%2==0)\n            return i;\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpe6mqdd8a: /tmp/tmpe6mqdd8a.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Put your code here\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgyak16af: /tmp/tmpgyak16af.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if (x\
    \ % 2 == 0)\n        return x;\n    if (x % 2 != 0)\n        x++;\n    long n\
    \ = x;\n    if (n <= y && n % 2 == 0)\n        return n;\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2h1hzjey: /tmp/tmp2h1hzjey.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (int i = x; i <= y; i++)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0se_nvhu: /tmp/tmp0se_nvhu.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // YOUR CODE HERE\n    if (x\
    \ > y) {\n        return -1;\n    }\n    else if (x % 2 == 0) {\n        return\
    \ x;\n    }\n    else {\n        return x + 1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgtyu1c40: /tmp/tmpgtyu1c40.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if(x%2 == 0 && y%2 == 0) {\n\
    \    return y;\n  } else if(x%2 == 0 && y%2 != 0) {\n    return y-1;\n  } else\
    \ if(x%2 != 0 && y%2 == 0) {\n    return x;\n  } else {\n    if(x+1 == y) {\n\
    \      return -1;\n    } else {\n      return x+1;\n    }\n  }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_v2mtrxc: /tmp/tmp_v2mtrxc.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (y < x) {\n    return -1;\n\
    \  }\n  if (x % 2 == 0) {\n    return x;\n  }\n  if (x == y) {\n    return -1;\n\
    \  }\n  return choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgjrxtvxn: /tmp/tmpgjrxtvxn.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // WRITE YOUR CODE HERE\n \
    \   if (x % 2 == 0) {\n        return x;\n    } else if (x + 1 > y) {\n      \
    \  return -1;\n    } else {\n        return x + 1;\n    }\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplqdg3suv: /tmp/tmplqdg3suv.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(y>x && y%2==0) return y;\n\
    \    else if(y<x && x%2==0) return x;\n    else return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfw23zer3: /tmp/tmpfw23zer3.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long number = x%2==0 ? x :\
    \ x+1;\n    if(number>y) {\n        return -1;\n    }\n    else {\n        return\
    \ number;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpv0hjswnf: /tmp/tmpv0hjswnf.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n// Write your code here\nreturn\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2_oliqm7: /tmp/tmp2_oliqm7.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    for(long\
    \ i = x; i <= y; i++) {\n        if(i % 2 == 0) {\n            ans = i;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    //if (x <= y)\n    if ((x %\
    \ 2 == 0) && (y % 2 == 0))\n        return y;\n    else if ((x % 2 == 0) && (y\
    \ % 2 != 0))\n        return x;\n    else if ((x % 2 != 0) && (y % 2 == 0))\n\
    \        return y;\n    else if ((x % 2 != 0) && (y % 2 != 0))\n        return\
    \ -1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpibreknvx: /tmp/tmpibreknvx.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x % 2 == 0) {\n    return\
    \ x;\n  } else if (x + 1 == y) {\n    return -1;\n  } else {\n    return x + 1;\n\
    \  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmd51bjmw: /tmp/tmpmd51bjmw.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Put your code here\n   \
    \ if(x%2 == 0){\n        return x;\n    }else{\n        if(x+1 > y){\n       \
    \     return -1;\n        }else{\n            return x+1;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpiwp9wpe_: /tmp/tmpiwp9wpe_.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// your code\n\tif (x <= y) {\n\
    \t\tif (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse if (x % 2 != 0) {\n\t\t\
    \treturn x + 1;\n\t\t}\n\t}\n\telse {\n\t\treturn -1;\n\t}\n\t\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqh6vlja9: /tmp/tmpqh6vlja9.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here!\n  long number\
    \ = x;\n  long ans = -1;\n  while(number <= y){\n    if(number % 2 == 0){\n  \
    \    ans = number;\n    }\n    number++;\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// put your code here\n\tlong\
    \ j=0;\n\tfor(long i=x;i<=y;i++)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tj=i;\n\t\t\
    }\n\t}\n\tif(j!=0)\n\t{\n\t\treturn j;\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x>y)\n        return -1;\n\
    \    for (int i=y; i>=x; i--)\n        if (i%2==0)\n            return i;\n  \
    \  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x > y)\n\t\treturn -1;\n\t\
    else if (x % 2 == 0)\n\t\treturn x;\n\telse if (x + 1 == y)\n\t\treturn -1;\n\t\
    else return x + 2;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8mhl5c50: /tmp/tmp8mhl5c50.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tlong s = x;\n\tif (s % 2 == 0)\n\
    \t\treturn s;\n\tfor (s = x + 1; s <= y; s++) {\n\t\tif (s % 2 == 0)\n\t\t\treturn\
    \ s;\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp34aim460: /tmp/tmp34aim460.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_even = -1;\n    if\
    \ (x % 2 == 0) {\n        x++;\n    } else {\n        x += 2;\n    }\n    while\
    \ (x <= y) {\n        if (x % 2 == 0) {\n            max_even = x;\n        }\n\
    \        x += 2;\n    }\n    return max_even;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_vrtxpob: /tmp/tmp_vrtxpob.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tfor (long i = y; i >= x; i--)\
    \ {\n\t\tif (i % 2 == 0)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\treturn -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpywdhbmmb: /tmp/tmpywdhbmmb.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Must return either -1 or\
    \ a number in the range [x, y] inclusive.\n    // assert(x > 0);\n    // assert(y\
    \ > 0);\n    // assert(x <= y);\n    long ans = -1;\n    // Write your code here.\
    \ Do not copy and paste the code from\n    // the example above. This function\
    \ is bigger than it looks.\n    // You must use a loop to solve this problem.\n\
    \    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n            ans =\
    \ i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x<0 || y<0){\n        return\
    \ -1;\n    }\n    if(x%2 == 0){\n        return x;\n    }else{\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpoleq8fai: /tmp/tmpoleq8fai.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyhsxu7ri: /tmp/tmpyhsxu7ri.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// write your code here\n\tint\
    \ start = 0;\n\tlong array[y];\n\tfor (long i = x; i <= y; i++) {\n\t\tarray[start]\
    \ = i;\n\t\tstart++;\n\t}\n\tfor (int i = 0; i < y; i++) {\n\t\tif (array[i] %\
    \ 2 == 0) {\n\t\t\treturn array[i];\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzfu83nhu: /tmp/tmpzfu83nhu.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 != 0) {\n       \
    \ x++;\n    }\n    if (y % 2 != 0) {\n        y--;\n    }\n    if (x > y) {\n\
    \        return -1;\n    }\n    else {\n        return y;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  for (long i = y; i >= x; i--)\
    \ {\n    if (i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  assert(x > 0);\n  assert(y >\
    \ 0);\n  for(long i = y; i >= x; i--){\n    if(i % 2 == 0){\n      return i;\n\
    \    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    if(x+1<=y)\n        return x+1;\n    return -1;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpewnc3qsq: /tmp/tmpewnc3qsq.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) return x;\n\
    \    if (x + 1 == y) return -1;\n    return x + 1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpymbmhcyd: /tmp/tmpymbmhcyd.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // implement your own solution\n\
    \  long res = -1;\n  long even = 0;\n  if (x % 2 == 0) {\n  \teven = x;\n  } else\
    \ {\n  \teven = x + 1;\n  }\n  for (long i = even; i <= y; i = i + 2) {\n  \t\
    res = i;\n  }\n  return res;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tassert(x > 0 && y > 0);\n\tif\
    \ (x % 2 == 0)\n\t\treturn x;\n\telse if (x + 1 <= y)\n\t\treturn x + 1;\n\telse\n\
    \t\treturn -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp5d317sj: /tmp/tmpp5d317sj.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    int arr[10] = {0};\n    int\
    \ count_ = 0;\n    while(x <= y) {\n        if(x%2 == 0) {\n            arr[count_]\
    \ = x;\n            count_++;\n        }\n        x++;\n    }\n    if(count_ >\
    \ 0)\n        return arr[count_ - 1];\n    else \n        return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2 == 0) {\n        return\
    \ x;\n    }\n    else {\n        if((x+1)%2 == 0) {\n            return x+1;\n\
    \        }\n        else {\n            return -1;\n        }\n    }\n    assert(0);\
    \ // should never reach this\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpt3en745_: /tmp/tmpt3en745_.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Change this to return\
    \ the correct result\n  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprndw114l: /tmp/tmprndw114l.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0)\n\t\treturn x;\n\
    \treturn x + 1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbbex5hzz: /tmp/tmpbbex5hzz.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Write your code here.\n  long\
    \ even = -1;\n  for(int i = x; i <= y; i++){\n    if(i % 2 == 0){\n      even\
    \ = i;\n    }\n  }\n  return even;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Implement this function.\n\
    \  // Hint: You can write this function in one line, without any loops.\n  long\
    \ i;\n  for(i=y;i>=x;i--)\n  {\n  \tif(i%2==0)\n  \t\treturn i;\n  }\n  return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x%2 == 0 && y%2 == 0){\n\t\
    \treturn y;\n\t}\n\tif(x%2 == 1 && y%2 == 1){\n\t\treturn -1;\n\t}\n\tif(x%2 ==\
    \ 1 && y%2 == 0){\n\t\treturn y;\n\t}\n\tif(x%2 == 0 && y%2 == 1){\n\t\tlong t\
    \ = (y-x)/2;\n\t\treturn y-t;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm6htuf5p: /tmp/tmpm6htuf5p.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Your code goes here.\n\tif(x>y)\
    \ return -1;\n\tlong num=x;\n\tlong check=0;\n\tfor(num;num<=y;num++)\n\t{\n\t\
    \tcheck=num%2;\n\t\tif(check==0) return num;\n\t}\n\treturn -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkk6q78bd: /tmp/tmpkk6q78bd.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif(x%2==0)\n\t\treturn x;\n\t\
    if(x%2==1)\n\t\tx=x+1;\n\tif(x>y)\n\t\treturn -1;\n\treturn x;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_qhjgmsa: /tmp/tmp_qhjgmsa.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  for (int i = y; i >= x; i--)\
    \ {\n    if ((i % 2) == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x <= y && x % 2 == 0)\n\t\
    \treturn x;\n\telse if (x <= y && x % 2 != 0)\n\t\treturn x + 1;\n\telse\n\t\t\
    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7c5we7p5: /tmp/tmp7c5we7p5.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    long\
    \ i = x;\n    while (i <= y) {\n        if (i % 2 == 0) {\n            result\
    \ = i;\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code goes here\n  \
    \  assert(y>=x);\n    if (x%2==0) return x;\n    if (x%2==1) x++;\n    if (x%2==0\
    \ && x<=y) return x;\n    else return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqmadngh4: /tmp/tmpqmadngh4.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // This function is complete,\
    \ there's nothing for you to do here.\n    for (long n = y; n >= x; n--) {\n \
    \       if (n % 2 == 0) {\n            return n;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y || x < 0 || y < 0)\n\
    \        return -1;\n    if (x % 2 == 0) {\n        return x;\n    }\n    else\
    \ if (x+1 <= y) {\n        return x+1;\n    }\n    else {\n        return -1;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp38hnfkdi: /tmp/tmp38hnfkdi.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (long i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    for\
    \ (int i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // write your code here\n \
    \   long res = -1;\n    long temp;\n    if(x % 2 == 0){\n        temp = x;\n \
    \   }else{\n        temp = x + 1;\n    }\n    for(long i = temp; i <= y; i +=\
    \ 2){\n        res = i;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  for (int i = y; i >= x; i--)\
    \ {\n    if (i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Write your code here.\n\t\
    int c = 0;\n\tif (x % 2 == 0) {\n\t\tc = 1;\n\t}\n\tfor (int i = x + c; i <= y;\
    \ i = i + 2) {\n\t\tif (i % 2 == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjn3omh9t: /tmp/tmpjn3omh9t.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code goes here\n  \
    \  return 0;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzc5g5_om: /tmp/tmpzc5g5_om.cpp:15: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: Your implementation\
    \ here\n\tif (x < 0 || y < 0)\n\t\treturn -1;\n\tif (x > y)\n\t\treturn -1;\n\t\
    if (x % 2 == 0)\n\t\treturn x;\n\tif (x + 1 == y)\n\t\treturn -1;\n\treturn choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprgzcgfl0: /tmp/tmprgzcgfl0.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x > y){\n        return\
    \ -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    else if(x % 2\
    \ != 0){\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplu5e6a69: /tmp/tmplu5e6a69.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Write your implementation\
    \ here\n    // Note: You may not use any conditional statements\n    // (e.g.\
    \ if or switch) or loops (e.g. for or while)\n    // If a variable is used more\
    \ than once, you can reuse it\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpog9k5vg7: /tmp/tmpog9k5vg7.cpp:243: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long res = 0;\n    if (x %\
    \ 2 == 0) {\n        res = x;\n    } else {\n        if (x + 1 < y) {\n      \
    \      res = x + 1;\n        } else {\n            res = -1;\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbtv2qbcm: /tmp/tmpbtv2qbcm.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    assert(x <= y);\n    if (x % 2 == 0) {\n        return x;\n    }\n    if\
    \ (x + 1 <= y) {\n        return x + 1;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvbmwfmse: /tmp/tmpvbmwfmse.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x <= y && x % 2 == 0)\n \
    \   return x;\n  else if (x <= y && x % 2 != 0)\n    return choose_num(x + 1,\
    \ y);\n  else\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd9m2hpqb: /tmp/tmpd9m2hpqb.cpp:19: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long i;\n  for(i=y;i>=x;i--)\n\
    \  {\n    if(i%2==0)\n    {\n      return i;\n    }\n  }\n  return -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  return y > x ? y % 2 ? y - 1\
    \ : y : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdqoxpfak: /tmp/tmpdqoxpfak.cpp:21: int main(): Assertion `candidate((546),\
    \ (546)) == (546)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ if (x <= y) {\n            return x;\n        }\n    } else {\n        if (x\
    \ + 1 <= y) {\n            return x + 1;\n        }\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplyieqz6h: /tmp/tmplyieqz6h.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long num = x;\n    if (num\
    \ % 2 == 0) {\n        num = num;\n    } else {\n        num = num + 1;\n    }\n\
    \    if (num > y) {\n        return -1;\n    } else {\n        return num;\n \
    \   }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6mnv06kv: /tmp/tmp6mnv06kv.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Fill this with your\
    \ code\n  if (x % 2 == 0){\n    return x;\n  }\n  else if (x % 2 != 0 && x < y){\n\
    \    x++;\n    return choose_num(x, y);\n  }\n  else {\n    return -1;\n  }\n\
    \ \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkch56xiz: /tmp/tmpkch56xiz.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n   return x % 2 == 0 ? x : choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn4o_7cbi: /tmp/tmpn4o_7cbi.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n//    return -1;\n    if (x % 2\
    \ == 0 && y % 2 == 0)\n    \treturn y;\n    else if (x % 2 == 0 && y % 2 != 0)\n\
    \    \treturn y - 1;\n    else if (x % 2 != 0 && y % 2 == 0)\n    \treturn x;\n\
    \    else\n    \treturn x + 1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl_egu_gr: /tmp/tmpl_egu_gr.cpp:23: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0 && y % 2 == 0)\
    \ {\n\t\tif (x < y) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\
    \t}\n\t}\n\telse if (x % 2 == 0 && y % 2 != 0) {\n\t\tif (x < y) {\n\t\t\treturn\
    \ y - 1;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if (x % 2 !=\
    \ 0 && y % 2 == 0) {\n\t\tif (x < y) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\
    \t\treturn x - 1;\n\t\t}\n\t}\n\telse {\n\t\tif (x < y) {\n\t\t\treturn y - 1;\n\
    \t\t}\n\t\telse {\n\t\t\treturn x - 1;\n\t\t}\n\t}\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp6duoxvx: /tmp/tmpp6duoxvx.cpp:46: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd6adz9qu: /tmp/tmpd6adz9qu.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x % 2 == 0 && y % 2 == 0){\n\
    \        if(x > y){\n            return -1;\n        }else{\n            return\
    \ y;\n        }\n    }else if(x % 2 == 0 && y % 2 != 0){\n        return y - 1;\n\
    \    }else if(x % 2 != 0 && y % 2 == 0){\n        return y;\n    }else{\n    \
    \    if(x > y){\n            return -1;\n        }else{\n            return y\
    \ - 1;\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7d4en6xs: /tmp/tmp7d4en6xs.cpp:31: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long res = -1;\n    if (x ==\
    \ 0 || y == 0) {\n        res = -1;\n    } else if (x % 2 == 0) {\n        res\
    \ = x;\n    } else if (y % 2 == 0) {\n        res = y;\n    } else {\n       \
    \ res = -1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa80vh76c: /tmp/tmpa80vh76c.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Fix this function\
    \ so that it passes all of the given tests.\n    // (Hint: You will want to make\
    \ use of the modulus operator)\n\tif(x>y){\n\t\treturn -1;\n\t}\n\tfor(long i=y;i>=x;i--){\n\
    \t\tif(i%2==0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    \tif(x%2==0)return x;\n   \
    \ \telse if(x%2!=0 && y%2==0)return y;\n    \telse return -1;\n\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy_jx7pj6: /tmp/tmpy_jx7pj6.cpp:17: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    // your code here\n    if (x % 2 == 0) {\n        return x;\n\
    \    }\n    else {\n        if (x + 1 == y) {\n            return -1;\n      \
    \  }\n        else {\n            return x + 2;\n        }\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpw7l00npo: /tmp/tmpw7l00npo.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // // REPLACE ME WITH YOUR CODE\n\
    \  // return -1;\n  if(x % 2 == 0)\n    return x;\n  else if(x == y)\n    return\
    \ -1;\n  else\n    return choose_num(x+1, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphezmzb65: /tmp/tmphezmzb65.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // This implementation is even\
    \ simpler than the one in the slides,\n    // but it's also more efficient!\n\
    \    return x+y-((x+y)&1);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq0qozq7v: /tmp/tmpq0qozq7v.cpp:16: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t\n\tfor(long i = y; i >= x; i--)\n\
    \t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  \n  if(x==y){\n    if(x%2==0)\n\
    \      return x;\n    else\n      return -1;\n  }\n  \n  long a=x%2==0?x:x+1;\n\
    \  long b=y%2==0?y:y-1;\n  \n  if(a<=b)\n    return b;\n  else\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  //long int a[8] = {13, 14, 15,\
    \ 16, 17, 18, 19, 20};\n\n  for(long i = x; i <= y; i++)\n  {\n    if(i % 2 ==\
    \ 0)\n    {\n      return i;\n    }\n  }\n  return -1;\n  /*\n  for(long i = 0;\
    \ i < 8; i++)\n  {\n    if(a[i] > x && a[i] < y)\n    {\n      return a[i];\n\
    \    }\n  }\n  return -1;\n  */\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpt2e8pxig: /tmp/tmpt2e8pxig.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpka12kkn5: /tmp/tmpka12kkn5.cpp:14: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long even_num;\n    long big_even_num\
    \ = -1;\n\n    for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n  \
    \          even_num = i;\n            if (even_num > big_even_num) {\n       \
    \         big_even_num = even_num;\n            }\n        }\n    }\n    return\
    \ big_even_num;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    for (int i = y; i >= x; i--)\
    \ {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long count = 0;\n    for (int\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            count = i;\n \
    \       }\n    }\n    if (count == 0) {\n        return -1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x <= y) {\n        for\
    \ (long i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n               \
    \ return i;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// Add your code here!\n\tif\
    \ (x % 2 == 0)\n\t\treturn x;\n\telse\n\t\treturn x + 1;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwii7stzr: /tmp/tmpwii7stzr.cpp:18: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if(x==y){\n    if(x%2==0) return\
    \ x;\n    else return -1;\n  }\n  long r = x%2 == 0 ? x : x+1;\n  for(long i=r;\
    \ i<=y; i+=2){\n    if(i%2==0) return i;\n  }\n  return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjy6i3ths: /tmp/tmpjy6i3ths.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long res = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            res = i;\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
