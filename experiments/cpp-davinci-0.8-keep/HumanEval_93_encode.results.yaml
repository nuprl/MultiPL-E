language: cpp
name: HumanEval_93_encode
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ encoded_message = \"\";\n\tstd::string vowels = \"aeiou\";\n\tint index;\n\t\
    for (int i = 0; i < message.length(); i++) {\n\t\tif (isupper(message[i])) {\n\
    \t\t\tindex = vowels.find(tolower(message[i]));\n\t\t\tif (index != std::string::npos)\
    \ {\n\t\t\t\tif (index >= 3) {\n\t\t\t\t\tencoded_message += tolower(vowels[index\
    \ - 3]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tencoded_message += tolower(vowels[index\
    \ + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tencoded_message += tolower(message[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse if (islower(message[i])) {\n\t\t\tindex = vowels.find(message[i]);\n\
    \t\t\tif (index != std::string::npos) {\n\t\t\t\tif (index >= 3) {\n\t\t\t\t\t\
    encoded_message += vowels[index - 3];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tencoded_message\
    \ += vowels[index + 2];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tencoded_message\
    \ += toupper(message[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tencoded_message +=\
    \ message[i];\n\t\t}\n\t}\n\treturn encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpu6txtrf3: /tmp/tmpu6txtrf3.cpp:54: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tconst char*\
    \ vowels = \"aeiou\";\n\tstd::string encoded_message = \"\";\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] == ' ') {\n\t\t\tencoded_message\
    \ += \" \";\n\t\t} else if (std::isupper(message[i])) {\n\t\t\tencoded_message\
    \ += std::tolower(message[i]);\n\t\t} else if (std::islower(message[i])) {\n\t\
    \t\tencoded_message += std::toupper(message[i]);\n\t\t}\n\t}\n\tfor (int i = 0;\
    \ i < encoded_message.length(); i++) {\n\t\tfor (int j = 0; j < strlen(vowels);\
    \ j++) {\n\t\t\tif (encoded_message[i] == vowels[j]) {\n\t\t\t\tencoded_message[i]\
    \ = vowels[(j + 2) % strlen(vowels)];\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6nwx8giu: /tmp/tmp6nwx8giu.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string encoded_message\
    \ = \"\";\n    for (char c : message) {\n        // This is the case where it\
    \ is uppercase.\n        if (c == toupper(c)) {\n            // Swap it to lowercase.\n\
    \            c = tolower(c);\n            // Find the index of the character in\
    \ the alphabet string.\n            size_t index = alphabet.find(c);\n       \
    \     // Add 2 to the index and find the character in the string.\n          \
    \  char new_c = alphabet[(index + 2) % alphabet.length()];\n            // Swap\
    \ it back to uppercase.\n            new_c = toupper(new_c);\n            // Append\
    \ it to the encoded message.\n            encoded_message += new_c;\n        }\
    \ else {\n            // This is the case where it is lowercase.\n           \
    \ // Find the index of the character in the alphabet string.\n            size_t\
    \ index = alphabet.find(c);\n            // Add 2 to the index and find the character\
    \ in the string.\n            char new_c = alphabet[(index + 2) % alphabet.length()];\n\
    \            // Append it to the encoded message.\n            encoded_message\
    \ += new_c;\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpz58yl03d: /tmp/tmpz58yl03d.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ret_str;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ == 'a') {\n            ret_str += 'c';\n        } else if (message[i] == 'e')\
    \ {\n            ret_str += 'g';\n        } else if (message[i] == 'i') {\n  \
    \          ret_str += 'k';\n        } else if (message[i] == 'o') {\n        \
    \    ret_str += 'q';\n        } else if (message[i] == 'u') {\n            ret_str\
    \ += 'y';\n        } else if (message[i] == 'A') {\n            ret_str += 'C';\n\
    \        } else if (message[i] == 'E') {\n            ret_str += 'G';\n      \
    \  } else if (message[i] == 'I') {\n            ret_str += 'K';\n        } else\
    \ if (message[i] == 'O') {\n            ret_str += 'Q';\n        } else if (message[i]\
    \ == 'U') {\n            ret_str += 'Y';\n        } else if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            ret_str += message[i] - 32;\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ret_str += message[i]\
    \ + 32;\n        } else {\n            ret_str += message[i];\n        }\n   \
    \ }\n    return ret_str;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6f2fpflt: /tmp/tmp6f2fpflt.cpp:48: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ res = \"\";\n    for (char &c : message) {\n        if (isalpha(c)) {\n    \
    \        if (islower(c)) {\n                c = toupper(c);\n            } else\
    \ {\n                c = tolower(c);\n            }\n            switch (c) {\n\
    \                case 'A':\n                    c = 'C';\n                   \
    \ break;\n                case 'E':\n                    c = 'G';\n          \
    \          break;\n                case 'I':\n                    c = 'K';\n \
    \                   break;\n                case 'O':\n                    c =\
    \ 'Q';\n                    break;\n                case 'U':\n              \
    \      c = 'S';\n                    break;\n                case 'Y':\n     \
    \               c = 'A';\n                    break;\n                case 'C':\n\
    \                    c = 'E';\n                    break;\n                case\
    \ 'G':\n                    c = 'I';\n                    break;\n           \
    \     case 'K':\n                    c = 'O';\n                    break;\n  \
    \              case 'Q':\n                    c = 'U';\n                    break;\n\
    \                case 'S':\n                    c = 'Y';\n                   \
    \ break;\n                case 'a':\n                    c = 'c';\n          \
    \          break;\n                case 'e':\n                    c = 'g';\n \
    \                   break;\n                case 'i':\n                    c =\
    \ 'k';\n                    break;\n                case 'o':\n              \
    \      c = 'q';\n                    break;\n                case 'u':\n     \
    \               c = 's';\n                    break;\n                case 'y':\n\
    \                    c = 'a';\n                    break;\n                case\
    \ 'c':\n                    c = 'e';\n                    break;\n           \
    \     case 'g':\n                    c = 'i';\n                    break;\n  \
    \              case 'k':\n                    c = 'o';\n                    break;\n\
    \                case 'q':\n                    c = 'u';\n                   \
    \ break;\n                case 's':\n                    c = 'y';\n          \
    \          break;\n            }\n        }\n        res += c;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpoeon83se: /tmp/tmpoeon83se.cpp:97: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ vowels = \"AEIOUaeiou\";\n\tstd::string encoded = \"\";\n\tfor (int i = 0; i\
    \ < message.length(); i++) {\n\t\tif (vowels.find(message[i]) == std::string::npos)\
    \ {\n\t\t\tif (message[i] >= 'a' && message[i] <= 'z')\n\t\t\t\tencoded += toupper(message[i]);\n\
    \t\t\telse\n\t\t\t\tencoded += tolower(message[i]);\n\t\t}\n\t\telse {\n\t\t\t\
    if (message[i] + 2 > 'z') {\n\t\t\t\tif (message[i] + 2 - 'z' + 'a' - 1 >= 'a'\
    \ && message[i] + 2 - 'z' + 'a' - 1 <= 'z')\n\t\t\t\t\tencoded += message[i] +\
    \ 2 - 'z' + 'a' - 1;\n\t\t\t\telse\n\t\t\t\t\tencoded += message[i] + 2 - 'z'\
    \ + 'a' - 1 - 'z' + 'a' - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tencoded += message[i]\
    \ + 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplkgpvivv: /tmp/tmplkgpvivv.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ret;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if\
    \ (isupper(c)) {\n                ret += tolower(c);\n            } else {\n \
    \               ret += toupper(c);\n            }\n        }\n        if (c ==\
    \ 'A' || c == 'a') {\n            ret += 'C';\n        } else if (c == 'E' ||\
    \ c == 'e') {\n            ret += 'G';\n        } else if (c == 'I' || c == 'i')\
    \ {\n            ret += 'K';\n        } else if (c == 'O' || c == 'o') {\n   \
    \         ret += 'M';\n        } else if (c == 'U' || c == 'u') {\n          \
    \  ret += 'Q';\n        } else {\n            ret += c;\n        }\n    }\n  \
    \  return ret;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9f98tbvl: /tmp/tmp9f98tbvl.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            if (message[i] == 'z') {\n     \
    \           encoded += 'A';\n            } else {\n                encoded +=\
    \ (char)(message[i] - 'a' + 'A' + 1);\n            }\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'Z') {\n     \
    \           encoded += 'a';\n            } else {\n                encoded +=\
    \ (char)(message[i] - 'A' + 'a' + 1);\n            }\n        } else {\n     \
    \       encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpkntzz9f0: /tmp/tmpkntzz9f0.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (std::islower(message[i])) {\n            encoded_message += std::toupper(message[i]);\n\
    \        } else if (std::isupper(message[i])) {\n            encoded_message +=\
    \ std::tolower(message[i]);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    encoded_message = std::regex_replace(encoded_message,\
    \ std::regex(\"a\"), \"c\");\n    encoded_message = std::regex_replace(encoded_message,\
    \ std::regex(\"e\"), \"g\");\n    encoded_message = std::regex_replace(encoded_message,\
    \ std::regex(\"i\"), \"k\");\n    encoded_message = std::regex_replace(encoded_message,\
    \ std::regex(\"o\"), \"q\");\n    encoded_message = std::regex_replace(encoded_message,\
    \ std::regex(\"u\"), \"w\");\n    return encoded_message;\n}\nint main() {\n \
    \   auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpu0jhlbop: /tmp/tmpu0jhlbop.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ result;\n  std::string letters = \"abcdefghijklmnopqrstuvwxyz\";\n  std::string\
    \ capital_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  std::string vowels = \"\
    aeiou\";\n  std::string capital_vowels = \"AEIOU\";\n  std::string coded_vowels\
    \ = \"cfjknps\";\n  std::string coded_capital_vowels = \"CFJKNPS\";\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    std::string letter = message.substr(i,\
    \ 1);\n    if (letters.find(letter) != std::string::npos) {\n      result += letters[(letters.find(letter)\
    \ + 2) % 26];\n    } else if (capital_letters.find(letter) != std::string::npos)\
    \ {\n      result += capital_letters[(capital_letters.find(letter) + 2) % 26];\n\
    \    } else if (vowels.find(letter) != std::string::npos) {\n      result += coded_vowels[vowels.find(letter)];\n\
    \    } else if (capital_vowels.find(letter) != std::string::npos) {\n      result\
    \ += coded_capital_vowels[capital_vowels.find(letter)];\n    } else {\n      result\
    \ += letter;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpv5mmsdzo: /tmp/tmpv5mmsdzo.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tint size\
    \ = message.size();\n\tstd::string encoded;\n\tencoded.resize(size);\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\
    \t\t\tif (message[i] == 'z') {\n\t\t\t\tencoded[i] = 'A';\n\t\t\t} else {\n\t\t\
    \t\tencoded[i] = message[i] - 'a' + 'A';\n\t\t\t}\n\t\t} else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n\t\t\tif (message[i] == 'Z') {\n\t\t\t\tencoded[i]\
    \ = 'a';\n\t\t\t} else {\n\t\t\t\tencoded[i] = message[i] - 'A' + 'a';\n\t\t\t\
    }\n\t\t} else {\n\t\t\tencoded[i] = message[i];\n\t\t}\n\t}\n\treturn encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpfpaoyi0t: /tmp/tmpfpaoyi0t.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::transform(message.begin(),\
    \ message.end(), message.begin(), \n\t\t\t\t\t[](unsigned char c) {\n\t\t\t\t\t\
    \tif (c >= 'a' && c <= 'z')\n\t\t\t\t\t\t\treturn c - 'a' + 'A';\n\t\t\t\t\t\t\
    else if (c >= 'A' && c <= 'Z')\n\t\t\t\t\t\t\treturn c - 'A' + 'a';\n\t\t\t\t\t\
    \telse \n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t});\n\tstd::transform(message.begin(),\
    \ message.end(), message.begin(), \n\t\t\t\t\t[](unsigned char c) {\n\t\t\t\t\t\
    \tif (c == 'A')\n\t\t\t\t\t\t\treturn 'C';\n\t\t\t\t\t\telse if (c == 'E')\n\t\
    \t\t\t\t\t\treturn 'G';\n\t\t\t\t\t\telse if (c == 'I')\n\t\t\t\t\t\t\treturn\
    \ 'K';\n\t\t\t\t\t\telse if (c == 'O')\n\t\t\t\t\t\t\treturn 'M';\n\t\t\t\t\t\t\
    else if (c == 'U')\n\t\t\t\t\t\t\treturn 'O';\n\t\t\t\t\t\telse if (c == 'a')\n\
    \t\t\t\t\t\t\treturn 'c';\n\t\t\t\t\t\telse if (c == 'e')\n\t\t\t\t\t\t\treturn\
    \ 'g';\n\t\t\t\t\t\telse if (c == 'i')\n\t\t\t\t\t\t\treturn 'k';\n\t\t\t\t\t\t\
    else if (c == 'o')\n\t\t\t\t\t\t\treturn 'm';\n\t\t\t\t\t\telse if (c == 'u')\n\
    \t\t\t\t\t\t\treturn 'o';\n\t\t\t\t\t\telse \n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\
    \t});\n\treturn message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36yhdvu7.cpp: In lambda function:\n/tmp/tmp36yhdvu7.cpp:21:15:\
    \ error: inconsistent types \u2018int\u2019 and \u2018unsigned char\u2019 deduced\
    \ for lambda return type\n   21 |        return c;\n      |               ^\n\
    /tmp/tmp36yhdvu7.cpp: In lambda function:\n/tmp/tmp36yhdvu7.cpp:46:15: error:\
    \ inconsistent types \u2018char\u2019 and \u2018unsigned char\u2019 deduced for\
    \ lambda return type\n   46 |        return c;\n      |               ^\n"
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    char ch = message[i];\n    switch (ch)\
    \ {\n      case 'a':\n        message[i] = 'c';\n        break;\n      case 'A':\n\
    \        message[i] = 'C';\n        break;\n      case 'e':\n        message[i]\
    \ = 'g';\n        break;\n      case 'E':\n        message[i] = 'G';\n       \
    \ break;\n      case 'i':\n        message[i] = 'k';\n        break;\n      case\
    \ 'I':\n        message[i] = 'K';\n        break;\n      case 'o':\n        message[i]\
    \ = 'q';\n        break;\n      case 'O':\n        message[i] = 'Q';\n       \
    \ break;\n      case 'u':\n        message[i] = 's';\n        break;\n      case\
    \ 'U':\n        message[i] = 'S';\n        break;\n      case 'y':\n        message[i]\
    \ = 'a';\n        break;\n      case 'Y':\n        message[i] = 'A';\n       \
    \ break;\n      default:\n        if (ch >= 'a' && ch <= 'z') {\n          message[i]\
    \ = ch - 32;\n        } else if (ch >= 'A' && ch <= 'Z') {\n          message[i]\
    \ = ch + 32;\n        }\n    }\n  }\n  return message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxl0o0zu0: /tmp/tmpxl0o0zu0.cpp:65: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tfor (int\
    \ i = 0; i < message.length(); i++) {\n\t\tif (message[i] > 64 && message[i] <\
    \ 91) {\n\t\t\tmessage[i] += 32;\n\t\t}\n\t\telse if (message[i] > 96 && message[i]\
    \ < 123) {\n\t\t\tmessage[i] -= 32;\n\t\t}\n\t\telse if (message[i] == 'a') {\n\
    \t\t\tmessage[i] = 'c';\n\t\t}\n\t\telse if (message[i] == 'e') {\n\t\t\tmessage[i]\
    \ = 'g';\n\t\t}\n\t\telse if (message[i] == 'i') {\n\t\t\tmessage[i] = 'k';\n\t\
    \t}\n\t\telse if (message[i] == 'o') {\n\t\t\tmessage[i] = 'q';\n\t\t}\n\t\telse\
    \ if (message[i] == 'u') {\n\t\t\tmessage[i] = 'y';\n\t\t}\n\t\telse if (message[i]\
    \ == 'A') {\n\t\t\tmessage[i] = 'C';\n\t\t}\n\t\telse if (message[i] == 'E') {\n\
    \t\t\tmessage[i] = 'G';\n\t\t}\n\t\telse if (message[i] == 'I') {\n\t\t\tmessage[i]\
    \ = 'K';\n\t\t}\n\t\telse if (message[i] == 'O') {\n\t\t\tmessage[i] = 'Q';\n\t\
    \t}\n\t\telse if (message[i] == 'U') {\n\t\t\tmessage[i] = 'Y';\n\t\t}\n\t}\n\t\
    return message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpjztzzy5a: /tmp/tmpjztzzy5a.cpp:56: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (char i : message) {\n        // get characters ascii\
    \ value\n        int ascii = (int)i;\n        // change uppercase to lowercase\
    \ and vice versa\n        if (ascii >= 65 && ascii <= 90) {\n            ascii\
    \ += 32;\n        } else if (ascii >= 97 && ascii <= 122) {\n            ascii\
    \ -= 32;\n        }\n        // replace vowels with corresponding 2 characters\n\
    \        // a = c, e = g, i = k, o = q, u = w\n        if (ascii == 97) {\n  \
    \          ascii = 99;\n        } else if (ascii == 101) {\n            ascii\
    \ = 103;\n        } else if (ascii == 105) {\n            ascii = 107;\n     \
    \   } else if (ascii == 111) {\n            ascii = 113;\n        } else if (ascii\
    \ == 117) {\n            ascii = 119;\n        }\n        // convert back to char\n\
    \        char character = (char)ascii;\n        // append result with changed\
    \ character\n        result += character;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpba__0glf: /tmp/tmpba__0glf.cpp:47: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ res;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >=\
    \ 'a' && message[i] <= 'z')\n\t\t\tres += (message[i] - 'a' + 'A');\n\t\telse\
    \ if (message[i] >= 'A' && message[i] <= 'Z')\n\t\t\tres += (message[i] - 'A'\
    \ + 'a');\n\t\telse if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u')\n\t\t\tres += (message[i] + 2);\n\
    \t\telse if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i]\
    \ == 'O' || message[i] == 'U')\n\t\t\tres += (message[i] + 2);\n\t\telse res +=\
    \ message[i];\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpc74m0la9: /tmp/tmpc74m0la9.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string encoded = \"\";\n  for (int i = 0; i < message.length();\
    \ i++) {\n    char c = message[i];\n    int index = vowels.find(tolower(c));\n\
    \    if (index != std::string::npos) {\n      encoded += vowels[(index + 2) %\
    \ vowels.length()];\n    } else {\n      encoded += tolower(c) == c ? toupper(c)\
    \ : tolower(c);\n    }\n  }\n  return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpz4zuj7d6: /tmp/tmpz4zuj7d6.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (islower(message[i])) {\n  \
    \          message[i] = toupper(message[i]);\n        } else {\n            message[i]\
    \ = tolower(message[i]);\n        }\n        if (message[i] == 'A') {\n      \
    \      message[i] = 'C';\n        } else if (message[i] == 'E') {\n          \
    \  message[i] = 'G';\n        } else if (message[i] == 'I') {\n            message[i]\
    \ = 'K';\n        } else if (message[i] == 'O') {\n            message[i] = 'Q';\n\
    \        } else if (message[i] == 'U') {\n            message[i] = 'S';\n    \
    \    } else if (message[i] == 'Y') {\n            message[i] = 'A';\n        }\
    \ else if (message[i] == 'C') {\n            message[i] = 'E';\n        } else\
    \ if (message[i] == 'G') {\n            message[i] = 'I';\n        } else if (message[i]\
    \ == 'K') {\n            message[i] = 'O';\n        } else if (message[i] == 'Q')\
    \ {\n            message[i] = 'U';\n        } else if (message[i] == 'S') {\n\
    \            message[i] = 'Y';\n        }\n    }\n    return message;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp20ruak3r: /tmp/tmp20ruak3r.cpp:48: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::transform(message.begin(),\
    \ message.end(), message.begin(), ::toupper);\n  std::string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  std::string vowels = \"AEIOU\";\n  std::string vowels_twoplus = \"CGIUK\"\
    ;\n  for (int i = 0; i < message.length(); i++) {\n    for (int j = 0; j < vowels.length();\
    \ j++) {\n      if (message[i] == vowels[j]) {\n        message[i] = vowels_twoplus[j];\n\
    \      }\n    }\n  }\n  return message;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpg4_apajn: /tmp/tmpg4_apajn.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \    std::transform(message.begin(), message.end(), message.begin(), ::tolower);\n\
    \    for (int i = 0; i < message.length(); i++) {\n        bool is_vowel = false;\n\
    \        char c = message[i];\n        for (int j = 0; j < vowels.size(); j++)\
    \ {\n            if (c == vowels[j]) {\n                int index = (j + 2) %\
    \ vowels.size();\n                encoded += vowels[index];\n                is_vowel\
    \ = true;\n                break;\n            }\n        }\n        if (!is_vowel)\
    \ encoded += c;\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpf70analg: /tmp/tmpf70analg.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::map<char,\
    \ char> map{\n\t\t{'a', 'c'},\n\t\t{'e', 'g'},\n\t\t{'i', 'k'},\n\t\t{'o', 'q'},\n\
    \t\t{'u', 'w'},\n\t\t{'A', 'C'},\n\t\t{'E', 'G'},\n\t\t{'I', 'K'},\n\t\t{'O',\
    \ 'Q'},\n\t\t{'U', 'W'}\n\t};\n\tfor (int i = 0; i < message.length(); i++) {\n\
    \t\tif (map.find(message[i]) != map.end()) {\n\t\t\tmessage[i] = map[message[i]];\n\
    \t\t}\n\t\telse if (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tmessage[i]\
    \ -= 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    message[i] += 32;\n\t\t}\n\t}\n\treturn message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpktffdc3v: /tmp/tmpktffdc3v.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ res;\n    std::string letter = \"aeiou\";\n    int pos;\n    for (int i = 0;\
    \ i < message.size(); i++) {\n        if (isupper(message[i])) {\n           \
    \ res.push_back(tolower(message[i]));\n        } else if (islower(message[i]))\
    \ {\n            res.push_back(toupper(message[i]));\n        } else {\n     \
    \       res.push_back(message[i]);\n        }\n    }\n    for (int i = 0; i <\
    \ res.size(); i++) {\n        if (res[i] == 'e') {\n            res[i] = 'g';\n\
    \        } else if (res[i] == 'i') {\n            res[i] = 'k';\n        } else\
    \ if (res[i] == 'o') {\n            res[i] = 'q';\n        } else if (res[i] ==\
    \ 'u') {\n            res[i] = 'y';\n        } else if (res[i] == 'y') {\n   \
    \         res[i] = 'a';\n        } else if (res[i] == 'a') {\n            res[i]\
    \ = 'c';\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmppj3tiqr8: /tmp/tmppj3tiqr8.cpp:46: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ aa = \"AEIOU\";\n    std::string aacap = \"AEIOU\";\n    for (int i = 0; i <\
    \ aa.length(); i++) {\n        aa[i] = aa[i] + 2;\n        aacap[i] = aacap[i]\
    \ + 2;\n    }\n    for (int i = 0; i < message.length(); i++) {\n        int j\
    \ = 0;\n        if (isupper(message[i])) {\n            while (j < aacap.length())\
    \ {\n                if (message[i] == aacap[j]) {\n                    message[i]\
    \ = aa[j];\n                    break;\n                }\n                j++;\n\
    \            }\n            if (j == aacap.length()) {\n                message[i]\
    \ = message[i] + 32;\n            }\n        } else if (islower(message[i])) {\n\
    \            while (j < aa.length()) {\n                if (message[i] == aa[j])\
    \ {\n                    message[i] = aacap[j];\n                    break;\n\
    \                }\n                j++;\n            }\n            if (j ==\
    \ aa.length()) {\n                message[i] = message[i] - 32;\n            }\n\
    \        }\n    }\n    return message;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgv34398k: /tmp/tmpgv34398k.cpp:50: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    //@TODO:\
    \ YOUR CODE HERE\n    for(int i=0;i<message.length();i++){\n        if((message[i]>='a'\
    \ && message[i]<='z') || (message[i]>='A' && message[i]<='Z')){\n            if(message[i]=='z'){\n\
    \                message[i]='b';\n            }\n            else if(message[i]=='Z'){\n\
    \                message[i]='B';\n            }\n            else{\n         \
    \       message[i]+=2;\n            }\n        }\n        if(message[i]=='a' ||\
    \ message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u' ||\
    \ message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O' ||\
    \ message[i]=='U'){\n            message[i]='0';\n        }\n    }\n    return\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpp317lr3b: /tmp/tmpp317lr3b.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ output = \"\";\n\tint len = message.length();\n\tfor (int i = 0; i < len; i++)\
    \ {\n\t\tif (message[i] >= 65 && message[i] <= 90) {\n\t\t\toutput += message[i]\
    \ + 32;\n\t\t}\n\t\telse if (message[i] >= 97 && message[i] <= 122) {\n\t\t\t\
    output += message[i] - 32;\n\t\t}\n\t\telse {\n\t\t\toutput += message[i];\n\t\
    \t}\n\t}\n\tstd::string output2 = \"\";\n\tlen = output.length();\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tif (output[i] == 'a') {\n\t\t\toutput2 += 'c';\n\
    \t\t}\n\t\telse if (output[i] == 'e') {\n\t\t\toutput2 += 'g';\n\t\t}\n\t\telse\
    \ if (output[i] == 'i') {\n\t\t\toutput2 += 'k';\n\t\t}\n\t\telse if (output[i]\
    \ == 'o') {\n\t\t\toutput2 += 'q';\n\t\t}\n\t\telse if (output[i] == 'u') {\n\t\
    \t\toutput2 += 'y';\n\t\t}\n\t\telse {\n\t\t\toutput2 += output[i];\n\t\t}\n\t\
    }\n\treturn output2;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpnrxj747l: /tmp/tmpnrxj747l.cpp:54: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ nMessage;\n\tstd::map<char, char> letters;\n\tstd::string letters1 = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tstd::string letters2 = \"efghijklmnopqrstuvwxyzabc\";\n\tstd::string letters3\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstd::string letters4 = \"EFGHIJKLMNOPQRSTUVWXYZABC\"\
    ;\n\tfor (int i = 0; i < letters1.length(); i++) {\n\t\tletters[letters1[i]] =\
    \ letters2[i];\n\t\tletters[letters3[i]] = letters4[i];\n\t}\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (letters.find(message[i]) != letters.end())\
    \ {\n\t\t\tnMessage += letters[message[i]];\n\t\t}\n\t\telse {\n\t\t\tnMessage\
    \ += message[i];\n\t\t}\n\t}\n\treturn nMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1zj_pnsi: /tmp/tmp1zj_pnsi.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    int len\
    \ = message.length();\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n    std::string\
    \ encoded_string = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char\
    \ = message[i];\n        if(std::isupper(curr_char)) {\n            curr_char\
    \ = tolower(curr_char);\n        }\n        else if(std::islower(curr_char)) {\n\
    \            curr_char = toupper(curr_char);\n        }\n        encoded_string\
    \ += curr_char;\n    }\n    len = encoded_string.length();\n    std::string final_string\
    \ = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char = encoded_string[i];\n\
    \        bool is_vowel = false;\n        for (int j = 0; j < 5; j++) {\n     \
    \       if(curr_char == vowels[j]) {\n                is_vowel = true;\n     \
    \           break;\n            }\n        }\n        if(is_vowel) {\n       \
    \     if(i >= len - 2) {\n                final_string += encoded_string[i];\n\
    \            }\n            else {\n                final_string += encoded_string[i\
    \ + 2];\n            }\n        }\n        else {\n            final_string +=\
    \ encoded_string[i];\n        }\n    }\n    return final_string;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0jxgkojj: /tmp/tmp0jxgkojj.cpp:54: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ ret = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (auto i = 0; i < message.length();\
    \ i++) {\n\t\tauto c = message[i];\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc -=\
    \ 'a';\n\t\t\tc += 'A';\n\t\t}\n\t\telse if (c >= 'A' && c <= 'Z') {\n\t\t\tc\
    \ -= 'A';\n\t\t\tc += 'a';\n\t\t}\n\t\tif (vowels.find(c) != std::string::npos)\
    \ {\n\t\t\tret += vowels[(vowels.find(c) + 2) % vowels.length()];\n\t\t}\n\t\t\
    else {\n\t\t\tret += c;\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpufn_5ko_: /tmp/tmpufn_5ko_.cpp:37: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (isalpha(c)) {\n         \
    \   if (islower(c)) {\n                c = toupper(c);\n            } else {\n\
    \                c = tolower(c);\n            }\n            if (c == 'a') {\n\
    \                c = 'c';\n            } else if (c == 'e') {\n              \
    \  c = 'g';\n            } else if (c == 'i') {\n                c = 'k';\n  \
    \          } else if (c == 'o') {\n                c = 'q';\n            } else\
    \ if (c == 'u') {\n                c = 'y';\n            }\n        }\n      \
    \  result += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsf0why0m: /tmp/tmpsf0why0m.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar c =\
    \ message[i];\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc = 'A' + (c - 'a');\n\t\
    \t}\n\t\tswitch (c) {\n\t\t\tcase 'A':\n\t\t\t\tresult += 'C';\n\t\t\t\tbreak;\n\
    \t\t\tcase 'E':\n\t\t\t\tresult += 'G';\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\
    \t\tresult += 'K';\n\t\t\t\tbreak;\n\t\t\tcase 'O':\n\t\t\t\tresult += 'Q';\n\t\
    \t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tresult += 'S';\n\t\t\t\tbreak;\n\t\t\t\
    default:\n\t\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6ftl1mwg: /tmp/tmp6ftl1mwg.cpp:44: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Replace\
    \ with code\n    return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbtcnstv2: /tmp/tmpbtcnstv2.cpp:19: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    char vowel_map[5] = {'a', 'e', 'i', 'o', 'u'};\n    int\
    \ i = 0;\n    while (i < message.length()) {\n        if (isalpha(message[i]))\
    \ {\n            if (isupper(message[i])) {\n                encoded += std::tolower(message[i]);\n\
    \            } else {\n                encoded += std::toupper(message[i]);\n\
    \            }\n        } else {\n            encoded += message[i];\n       \
    \ }\n        ++i;\n    }\n    i = 0;\n    while (i < encoded.length()) {\n   \
    \     if (std::find(std::begin(vowel_map), std::end(vowel_map), encoded[i]) !=\
    \ std::end(vowel_map)) {\n            encoded[i] = (encoded[i] - 'a' + 2) % 26\
    \ + 'a';\n        }\n        ++i;\n    }\n    return encoded;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpczu3akqp: /tmp/tmpczu3akqp.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ answer = \"\";\n\tint i = 0;\n\tint len = message.length();\n\twhile (i<len)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tanswer += message[i]\
    \ - 'a' + 'A';\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \t\t\tanswer += message[i] - 'A' + 'a';\n\t\t}\n\t\telse if (message[i] == 'a'\
    \ || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n\t\t\tanswer += message[i] + 2;\n\t\t}\n\t\telse if (message[i] ==\
    \ 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n\t\t\tanswer += message[i] + 2;\n\t\t}\n\t\telse {\n\t\t\tanswer\
    \ += message[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn answer;\n}\nint main() {\n  \
    \  auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpdvg8hxlq: /tmp/tmpdvg8hxlq.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded = \"\";\n  int size = message.size();\n  std::string vowels = \"AEIOUaeiou\"\
    ;\n  for (int i = 0; i < size; i++) {\n    if (vowels.find(message[i]) == std::string::npos)\
    \ {\n      if (message[i] >= 'a' && message[i] <= 'z') {\n        encoded += (char)((int)message[i]\
    \ - 32);\n      } else {\n        encoded += (char)((int)message[i] + 32);\n \
    \     }\n    } else {\n      switch (message[i]) {\n        case 'A':\n      \
    \  case 'a': encoded += 'C'; break;\n        case 'E':\n        case 'e': encoded\
    \ += 'G'; break;\n        case 'I':\n        case 'i': encoded += 'K'; break;\n\
    \        case 'O':\n        case 'o': encoded += 'M'; break;\n        case 'U':\n\
    \        case 'u': encoded += 'Q'; break;\n      }\n    }\n  }\n  return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpn79mg94x: /tmp/tmpn79mg94x.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.size()];\n        }\n        if (c <= 'Z' && c >= 'A') {\n   \
    \         c += 32;\n        } else if (c <= 'z' && c >= 'a') {\n            c\
    \ -= 32;\n        }\n        ans += c;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpv8dhq_r2: /tmp/tmpv8dhq_r2.cpp:31: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded = \"\";\n  for (auto c : message) {\n    if (c == ' ') {\n      encoded\
    \ += ' ';\n      continue;\n    }\n    if (c >= 'a' && c <= 'z') {\n      c =\
    \ (c - 'a' + 2) % 26 + 'A';\n    } else if (c >= 'A' && c <= 'Z') {\n      c =\
    \ (c - 'A' + 2) % 26 + 'a';\n    }\n    if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n      c += 2;\n    } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n      c -= 2;\n    }\n    encoded +=\
    \ c;\n  }\n  return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxdoqf9ga: /tmp/tmpxdoqf9ga.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code here!\n\t\n\tstd::string s = \"aeiou\";\n\t// find the first vowel\n\t\
    std::string result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif(s.find(tolower(message[i]))\
    \ != std::string::npos) {\n\t\t\tif(message[i] == 'z') {\n\t\t\t\tif(islower(message[i]))\
    \ {\n\t\t\t\t\tresult += 'b';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult +=\
    \ 'B';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(message[i] == 'Z') {\n\t\t\t\tif(islower(message[i]))\
    \ {\n\t\t\t\t\tresult += 'B';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult +=\
    \ 'b';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult += tolower(message[i])\
    \ + 2;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\t\
    \n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpadhwkwxm: /tmp/tmpadhwkwxm.cpp:50: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  int a[26]\
    \ = {0};\n  a[0] = 4;\n  a[1] = 5;\n  a[2] = 6;\n  a[3] = 0;\n  a[4] = 1;\n  a[5]\
    \ = 2;\n  a[6] = 3;\n  a[7] = 4;\n  a[8] = 5;\n  a[9] = 6;\n  a[10] = 0;\n  a[11]\
    \ = 1;\n  a[12] = 2;\n  a[13] = 3;\n  a[14] = 4;\n  a[15] = 5;\n  a[16] = 6;\n\
    \  a[17] = 0;\n  a[18] = 1;\n  a[19] = 2;\n  a[20] = 3;\n  a[21] = 4;\n  a[22]\
    \ = 5;\n  a[23] = 6;\n  a[24] = 0;\n  a[25] = 1;\n  for(int i = 0; i < message.length();\
    \ i++) {\n    if(isupper(message[i])) {\n      message[i] = tolower(message[i]);\n\
    \    }\n    else if(islower(message[i])) {\n      message[i] = toupper(message[i]);\n\
    \    }\n    if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u') {\n      int index = message[i] - 'a';\n\
    \      message[i] = 'a' + a[index];\n    }\n  }\n  return message;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp34txn944: /tmp/tmp34txn944.cpp:57: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (char c : message)\
    \ {\n        if (isupper(c)) {\n            result += tolower(c);\n        } else\
    \ if (islower(c)) {\n            result += toupper(c);\n        } else {\n   \
    \         result += c;\n        }\n    }\n    for (size_t i = 0; i < vowels.size();\
    \ i++) {\n        size_t index = result.find(vowels[i]);\n        while (index\
    \ != std::string::npos) {\n            result[index] = vowels[(i + 2) % vowels.size()];\n\
    \            index = result.find(vowels[i], index + 1);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpluu09dzv: /tmp/tmpluu09dzv.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            message[i] = message[i] - 32;\n        }\n        else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            message[i] = message[i]\
    \ + 32;\n        }\n        if (message[i] == 'a') {\n            message[i] =\
    \ 'c';\n        }\n        else if (message[i] == 'e') {\n            message[i]\
    \ = 'g';\n        }\n        else if (message[i] == 'i') {\n            message[i]\
    \ = 'k';\n        }\n        else if (message[i] == 'o') {\n            message[i]\
    \ = 'q';\n        }\n        else if (message[i] == 'u') {\n            message[i]\
    \ = 'w';\n        }\n        else if (message[i] == 'A') {\n            message[i]\
    \ = 'C';\n        }\n        else if (message[i] == 'E') {\n            message[i]\
    \ = 'G';\n        }\n        else if (message[i] == 'I') {\n            message[i]\
    \ = 'K';\n        }\n        else if (message[i] == 'O') {\n            message[i]\
    \ = 'Q';\n        }\n        else if (message[i] == 'U') {\n            message[i]\
    \ = 'W';\n        }\n    }\n    return message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ret;\n    std::string vowels = \"aeiou\";\n    // char x;\n    // int y;\n \
    \   int x = 0;\n    int y = 0;\n    int z = 0;\n    int z2 = 0;\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            x = message[i] - 32;\n            ret.push_back(x);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            x =\
    \ message[i] + 32;\n            ret.push_back(x);\n        } else {\n        \
    \    ret.push_back(message[i]);\n        }\n    }\n    for (int i = 0; i < ret.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (ret[i] == vowels[j]) {\n                z = j;\n                z2 = j + 2;\n\
    \                if (z2 > 4) {\n                    z2 = z2 - 5;\n           \
    \     }\n                ret[i] = vowels[z2];\n            }\n        }\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpq3qk5l9f: /tmp/tmpq3qk5l9f.cpp:49: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar vowels[10]\
    \ = {'a','e','i','o','u','A','E','I','O','U'};\n\tstd::string encoded;\n\tchar\
    \ buffer;\n\tfor(int i = 0; i < message.length(); i++) {\n\t\tbuffer = message[i];\n\
    \t\tif(islower(buffer)) {\n\t\t\tencoded += toupper(buffer);\n\t\t} else if(isupper(buffer))\
    \ {\n\t\t\tencoded += tolower(buffer);\n\t\t} else {\n\t\t\tencoded += buffer;\n\
    \t\t}\n\t\tfor(int j = 0; j < 10; j++) {\n\t\t\tif(encoded[i] == vowels[j]) {\n\
    \t\t\t\tencoded[i] = vowels[(j+2)%10];\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp5oe6d3k0: /tmp/tmp5oe6d3k0.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        bool is_lowercase = 'a' <= c && c <= 'z';\n\
    \        bool is_uppercase = 'A' <= c && c <= 'Z';\n        bool is_vowel = (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                \
    \        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');\n        if\
    \ (is_lowercase) {\n            encoded_message += (char) (c - 32);\n        }\
    \ else if (is_uppercase) {\n            encoded_message += (char) (c + 32);\n\
    \        } else if (is_vowel) {\n            char next_vowel = (char) (c + 2);\n\
    \            encoded_message += next_vowel;\n        } else {\n            encoded_message\
    \ += c;\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp13ezp5vu: /tmp/tmp13ezp5vu.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    std::vector<char>::iterator iterator;\n    std::vector<char>\
    \ char_vector(message.begin(), message.end());\n    std::unordered_set<char> vowels\
    \ {'a', 'e', 'i', 'o', 'u'};\n    for (iterator = char_vector.begin(); iterator\
    \ != char_vector.end(); iterator++) {\n        if (isupper(*iterator)) {\n   \
    \         if (vowels.find(tolower(*iterator)) != vowels.end()) {\n           \
    \     if (*iterator == 'U')\n                    *iterator = 'A';\n          \
    \      else\n                    *iterator = *iterator + 2;\n            }\n \
    \           *iterator = tolower(*iterator);\n        }\n        else if (islower(*iterator))\
    \ {\n            if (vowels.find(*iterator) != vowels.end()) {\n             \
    \   if (*iterator == 'u')\n                    *iterator = 'a';\n            \
    \    else\n                    *iterator = *iterator + 2;\n            }\n   \
    \         *iterator = toupper(*iterator);\n        }\n        encoded_message\
    \ += *iterator;\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpkqfnfzp3: /tmp/tmpkqfnfzp3.cpp:44: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    char c;\n    for (char x : message) {\n        if (std::isalpha(x))\
    \ {\n            if (std::isupper(x)) {\n                c = std::tolower(x);\n\
    \            } else {\n                c = std::toupper(x);\n            }\n \
    \           switch (c) {\n                case 'a':\n                    c = 'c';\n\
    \                    break;\n                case 'e':\n                    c\
    \ = 'g';\n                    break;\n                case 'i':\n            \
    \        c = 'k';\n                    break;\n                case 'o':\n   \
    \                 c = 'q';\n                    break;\n                case 'u':\n\
    \                    c = 'y';\n                    break;\n                default:\n\
    \                    c = x;\n                    break;\n            }\n     \
    \   } else {\n            c = x;\n        }\n        encoded += c;\n    }\n  \
    \  return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpl9vomxvr: /tmp/tmpl9vomxvr.cpp:52: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded_message = \"\";\n  std::set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \  for (int i = 0; i < message.length(); i++) {\n    if (isupper(message[i]))\
    \ {\n      encoded_message += tolower(message[i]);\n    } else if (islower(message[i]))\
    \ {\n      if (vowels.find(message[i]) != vowels.end()) {\n        int index =\
    \ message[i] - 'a';\n        index = (index + 2) % 26;\n        encoded_message\
    \ += 'a' + index;\n      } else {\n        encoded_message += message[i];\n  \
    \    }\n    }\n  }\n  return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsmhb_cz6: /tmp/tmpsmhb_cz6.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            message[i] -= 32;\n        }\n        if (message[i]\
    \ == 'A') {\n            message[i] = 'C';\n        } else if (message[i] == 'E')\
    \ {\n            message[i] = 'G';\n        } else if (message[i] == 'I') {\n\
    \            message[i] = 'K';\n        } else if (message[i] == 'O') {\n    \
    \        message[i] = 'Q';\n        } else if (message[i] == 'U') {\n        \
    \    message[i] = 'S';\n        }\n    }\n    return message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9a98enli: /tmp/tmp9a98enli.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  char vowels[10]\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  char encoded[message.length()];\n\
    \  for (int i = 0; i < message.length(); i++) {\n    int flag = 0;\n    if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n      encoded[i] = message[i] - 32;\n    } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n      encoded[i] = message[i]\
    \ + 32;\n    } else {\n      encoded[i] = message[i];\n    }\n    for (int j =\
    \ 0; j < 10; j++) {\n      if (message[i] == vowels[j]) {\n        flag = 1;\n\
    \        if (j % 5 == 4) {\n          encoded[i] = vowels[j - 4] + 2;\n      \
    \  } else {\n          encoded[i] = vowels[j + 2];\n        }\n      }\n    }\n\
    \    if (flag == 0) {\n      encoded[i] = message[i];\n    }\n  }\n  return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2flcfkpt: /tmp/tmp2flcfkpt.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096156
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::map<char,\
    \ char> dictionary = {\n        {'a', 'c'},\n        {'e', 'g'},\n        {'i',\
    \ 'k'},\n        {'o', 'q'},\n        {'u', 'w'},\n        {'A', 'C'},\n     \
    \   {'E', 'G'},\n        {'I', 'K'},\n        {'O', 'Q'},\n        {'U', 'W'}\n\
    \    };\n    std::string result = \"\";\n    for (char c : message) {\n      \
    \  if (dictionary.find(c) != dictionary.end()) {\n            result += dictionary[c];\n\
    \        } else {\n            result += c;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpq8fklsa1: /tmp/tmpq8fklsa1.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Write\
    \ code here\n    int len = message.length();\n    std::string encoded = \"\";\n\
    \    for(int i = 0; i < len; i++) {\n        if(isupper(message[i])) {\n     \
    \       if(message[i] == 'Z') {\n                encoded += 'b';\n           \
    \ } else if(message[i] == 'Y') {\n                encoded += 'a';\n          \
    \  } else {\n                encoded += tolower(message[i]) + 2;\n           \
    \ }\n        } else if(islower(message[i])) {\n            if(message[i] == 'z')\
    \ {\n                encoded += 'B';\n            } else if(message[i] == 'y')\
    \ {\n                encoded += 'A';\n            } else {\n                encoded\
    \ += toupper(message[i]) + 2;\n            }\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    return encoded;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2umdgpb7: /tmp/tmp2umdgpb7.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage = \"\";\n    char arr[53] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\
    \    for(char& c : message) {\n        for(int i = 0; i < 53; i++) {\n       \
    \     if(c == arr[i]) {\n                if(i <= 25) {\n                    i\
    \ = (i + 26 + 2) % 26;\n                    encodedMessage += arr[i];\n      \
    \          } else {\n                    i = (i + 2) % 26;\n                 \
    \   encodedMessage += arr[i + 26];\n                }\n            }\n       \
    \ }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ vowels = \"AEIOUaeiou\";\n\tstd::string result = \"\";\n\tstd::string encoded_vowels\
    \ = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (isupper(message[i]))\
    \ {\n\t\t\tresult += tolower(message[i]);\n\t\t}\n\t\telse if (islower(message[i]))\
    \ {\n\t\t\tresult += toupper(message[i]);\n\t\t}\n\t\telse {\n\t\t\tresult +=\
    \ message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < vowels.length(); i++) {\n\t\t\
    encoded_vowels += (char)(((int)vowels[i] + 2 - 97) % 26 + 97);\n\t}\n\tfor (int\
    \ i = 0; i < vowels.length(); i++) {\n\t\tfor (int j = 0; j < result.length();\
    \ j++) {\n\t\t\tif (result[j] == vowels[i]) {\n\t\t\t\tresult[j] = encoded_vowels[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpix9v_14m: /tmp/tmpix9v_14m.cpp:43: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encode_string;\n    std::vector<char> vowels{'a', 'e', 'i', 'o', 'u'};\n   \
    \ std::map<char, char> encode_map;\n    for (int i = 0; i < vowels.size(); i++)\
    \ {\n        encode_map[vowels[i]] = vowels[(i + 2) % vowels.size()];\n    }\n\
    \    for (int i = 0; i < message.size(); i++) {\n        if (message[i] == ' ')\
    \ {\n            encode_string += message[i];\n        } else if (encode_map.find(tolower(message[i]))\
    \ != encode_map.end()) {\n            if (islower(message[i])) {\n           \
    \     encode_string += tolower(encode_map[tolower(message[i])]);\n           \
    \ } else {\n                encode_string += toupper(encode_map[tolower(message[i])]);\n\
    \            }\n        } else {\n            if (islower(message[i])) {\n   \
    \             encode_string += toupper(message[i]);\n            } else {\n  \
    \              encode_string += tolower(message[i]);\n            }\n        }\n\
    \    }\n    return encode_string;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp47ber98_: /tmp/tmp47ber98_.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  // your code\
    \ here\n  std::string vowels = \"aeiou\";\n  std::string encoded_message = \"\"\
    ;\n  for (int i = 0; i < message.length(); i++) {\n    bool is_vowel = false;\n\
    \    int index = -1;\n    for (int j = 0; j < vowels.length(); j++) {\n      if\
    \ (message[i] == vowels[j]) {\n        is_vowel = true;\n        index = j;\n\
    \        break;\n      }\n    }\n    if (is_vowel) {\n      if (index + 2 > 4)\
    \ {\n        encoded_message += vowels[index + 2 - 5];\n      } else {\n     \
    \   encoded_message += vowels[index + 2];\n      }\n    } else {\n      if (islower(message[i]))\
    \ {\n        encoded_message += toupper(message[i]);\n      } else {\n       \
    \ encoded_message += tolower(message[i]);\n      }\n    }\n  }\n  return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptzhwg5e8: /tmp/tmptzhwg5e8.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  //assert(message\
    \ != \"\");\n  std::string encode_message = \"\";\n  std::cout << \"Message: \"\
    \ << message << std::endl;\n  for (int i = 0; i < message.length(); i++) {\n \
    \   if (message[i] >= 'a' && message[i] <= 'z') {\n      if (message[i] == 'x')\
    \ encode_message += 'a';\n      else if (message[i] == 'y') encode_message +=\
    \ 'b';\n      else if (message[i] == 'z') encode_message += 'c';\n      else encode_message\
    \ += message[i] + 3;\n    }\n    else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n      if (message[i] == 'X') encode_message += 'A';\n      else if (message[i]\
    \ == 'Y') encode_message += 'B';\n      else if (message[i] == 'Z') encode_message\
    \ += 'C';\n      else encode_message += message[i] + 3;\n    }\n    else if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' ||\n             message[i]\
    \ == 'o' || message[i] == 'u')\n      encode_message += 'i';\n    else if (message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' ||\n             message[i]\
    \ == 'O' || message[i] == 'U')\n      encode_message += 'I';\n    else encode_message\
    \ += message[i];\n  }\n  std::cout << \"Encoded message: \" << encode_message\
    \ << std::endl;\n  return encode_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpds8d5e7i: /tmp/tmpds8d5e7i.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: 'Message: TEST

    Encoded message: WHVW

    '
  timestamp: 1660096157
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 32);\n\t\
    \t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i]\
    \ + 32);\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i\
    \ = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a') {\n\t\t\tresult[i]\
    \ = 'c';\n\t\t} else if (result[i] == 'e') {\n\t\t\tresult[i] = 'g';\n\t\t} else\
    \ if (result[i] == 'i') {\n\t\t\tresult[i] = 'k';\n\t\t} else if (result[i] ==\
    \ 'o') {\n\t\t\tresult[i] = 'q';\n\t\t} else if (result[i] == 'u') {\n\t\t\tresult[i]\
    \ = 'w';\n\t\t} else if (result[i] == 'A') {\n\t\t\tresult[i] = 'C';\n\t\t} else\
    \ if (result[i] == 'E') {\n\t\t\tresult[i] = 'G';\n\t\t} else if (result[i] ==\
    \ 'I') {\n\t\t\tresult[i] = 'K';\n\t\t} else if (result[i] == 'O') {\n\t\t\tresult[i]\
    \ = 'Q';\n\t\t} else if (result[i] == 'U') {\n\t\t\tresult[i] = 'W';\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  // your code\
    \ here\n  std::string::iterator i;\n  for(i=message.begin();i!=message.end();i++){\n\
    \    if((*i>='a' && *i<='z') || (*i>='A' && *i<='Z')){\n      if(*i=='a' || *i=='A')\n\
    \      *i='C';\n      else if(*i=='e' || *i=='E')\n      *i='G';\n      else if(*i=='i'\
    \ || *i=='I')\n      *i='K';\n      else if(*i=='o' || *i=='O')\n      *i='M';\n\
    \      else if(*i=='u' || *i=='U')\n      *i='O';\n      else\n      {\n     \
    \   if(*i>='a' && *i<='z')\n        *i=*i+2-26;\n        else\n        *i=*i+2-26;\n\
    \      }\n    }\n  }\n  return message;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp7t5jy1oy: /tmp/tmp7t5jy1oy.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// TODO:\
    \ Finish this function\n\t//std::string encoded = message;\n\tstd::string vowels\
    \ = \"aeiou\";\n\tstd::string encoded;\n\t// upper case letters\n\tfor (int i\
    \ = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'A' && message[i] <=\
    \ 'Z') {\n\t\t\t// convert to lower case letter and push to encoded\n\t\t\tchar\
    \ c = message[i] + 32;\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// lower case\
    \ letters\n\t\telse if (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\t// convert\
    \ to upper case letter and push to encoded\n\t\t\tchar c = message[i] - 32;\n\t\
    \t\tencoded.push_back(c);\n\t\t}\n\t\t// vowels\n\t\telse if (vowels.find(message[i])\
    \ != std::string::npos) {\n\t\t\t// convert to letter 2 ahead in alphabet and\
    \ push to encoded\n\t\t\tint position = vowels.find(message[i]);\n\t\t\tchar c\
    \ = vowels[(position + 2) % 5];\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// everything\
    \ else\n\t\telse {\n\t\t\tencoded.push_back(message[i]);\n\t\t}\n\t}\n\treturn\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpn2p2dox3: /tmp/tmpn2p2dox3.cpp:47: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    assert(message.length()\
    \ > 0);\n    std::string res;\n    for (char ch : message) {\n        // std::cout\
    \ << ch << std::endl;\n        if (std::islower(ch)) {\n            if (ch ==\
    \ 'w') {\n                res += 'a';\n            } else if (ch == 'x') {\n \
    \               res += 'b';\n            } else if (ch == 'y') {\n           \
    \     res += 'c';\n            } else if (ch == 'z') {\n                res +=\
    \ 'd';\n            } else {\n                res += ch + 2;\n            }\n\
    \        } else if (std::isupper(ch)) {\n            if (ch == 'W') {\n      \
    \          res += 'A';\n            } else if (ch == 'X') {\n                res\
    \ += 'B';\n            } else if (ch == 'Y') {\n                res += 'C';\n\
    \            } else if (ch == 'Z') {\n                res += 'D';\n          \
    \  } else {\n                res += ch + 2;\n            }\n        } else {\n\
    \            res += ch;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6w4mccmb: /tmp/tmp6w4mccmb.cpp:50: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    std::string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n    std::string new_vowels = \"\";\n    for (auto i = 0; i < vowels.size();\
    \ i++) {\n        new_vowels += new_alphabet[alphabet.find(vowels[i])];\n    }\n\
    \    for (auto i = 0; i < message.size(); i++) {\n        if (vowels.find(message[i])\
    \ != std::string::npos) {\n            encoded += new_vowels[vowels.find(message[i])];\n\
    \        } else if (alphabet.find(message[i]) != std::string::npos) {\n      \
    \      encoded += new_alphabet[alphabet.find(message[i])];\n        } else {\n\
    \            encoded += message[i];\n        }\n    }\n    return encoded;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpt8qlri47: /tmp/tmpt8qlri47.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    // Write your code here.\n    // First iteration will do the encoding.\n\
    \    // Second iteration will do the swapping of case.\n    std::map<char, char>\
    \ mapping;\n    char c = 'a';\n    for(int i = 0; i < 26; i++) {\n        mapping[c]\
    \ = c + 2;\n        c += 1;\n    }\n    mapping['z'] = 'b';\n    mapping['y']\
    \ = 'a';\n    mapping['A'] = 'A';\n    mapping['B'] = 'B';\n    mapping['C'] =\
    \ 'C';\n    mapping['D'] = 'D';\n    mapping['E'] = 'E';\n    mapping['F'] = 'F';\n\
    \    mapping['G'] = 'G';\n    mapping['H'] = 'H';\n    mapping['I'] = 'I';\n \
    \   mapping['J'] = 'J';\n    mapping['K'] = 'K';\n    mapping['L'] = 'L';\n  \
    \  mapping['M'] = 'M';\n    mapping['N'] = 'N';\n    mapping['O'] = 'O';\n   \
    \ mapping['P'] = 'P';\n    mapping['Q'] = 'Q';\n    mapping['R'] = 'R';\n    mapping['S']\
    \ = 'S';\n    mapping['T'] = 'T';\n    mapping['U'] = 'U';\n    mapping['V'] =\
    \ 'V';\n    mapping['W'] = 'W';\n    mapping['X'] = 'X';\n    mapping['Y'] = 'Y';\n\
    \    mapping['Z'] = 'Z';\n    for(int i = 0; i < message.length(); i++) {\n  \
    \      char current = message[i];\n        result += mapping[current];\n    }\n\
    \    for(int i = 0; i < result.length(); i++) {\n        char current = result[i];\n\
    \        if(current >= 'a' && current <= 'z') {\n            result[i] = current\
    \ - 'a' + 'A';\n        } else if(current >= 'A' && current <= 'Z') {\n      \
    \      result[i] = current - 'A' + 'a';\n        }\n    }\n   \n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ res;\n    for (int i = 0; i < message.size(); i++) {\n        if (isupper(message[i]))\
    \ res += tolower(message[i]);\n        else if (islower(message[i])) res += toupper(message[i]);\n\
    \        else res += message[i];\n    }\n    for (int i = 0; i < res.size(); i++)\
    \ {\n        if (res[i] == 'a') res[i] = 'c';\n        else if (res[i] == 'e')\
    \ res[i] = 'g';\n        else if (res[i] == 'i') res[i] = 'k';\n        else if\
    \ (res[i] == 'o') res[i] = 'q';\n        else if (res[i] == 'u') res[i] = 'y';\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpz3_qijls: /tmp/tmpz3_qijls.cpp:32: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // check\
    \ message is valid\n    if (message.empty()) {\n        return message;\n    }\n\
    \    std::string encoded;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o',\
    \ 'u'};\n    for (char c : message) {\n        // convert capital letters to lowercase\n\
    \        char lower = std::tolower(c);\n        // if it's a vowel, replace with\
    \ it's replacement\n        auto it = std::find(vowels.begin(), vowels.end(),\
    \ lower);\n        if (it != vowels.end()) {\n            int index = std::distance(vowels.begin(),\
    \ it);\n            char next_vowel = vowels[(index + 2) % vowels.size()];\n \
    \           encoded += next_vowel;\n        } else {\n            // otherwise\
    \ just swap case\n            encoded += std::isupper(c) ? std::tolower(c) : std::toupper(c);\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplnby_j_y: /tmp/tmplnby_j_y.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ new_message = \"\";\n    for (auto letter : message) {\n        if (letter ==\
    \ ' ') {\n            new_message += ' ';\n            continue;\n        }\n\
    \        char new_letter = std::toupper(letter);\n        new_letter = std::tolower(new_letter);\n\
    \        if (new_letter == 'a') {\n            new_message += 'c';\n        }\
    \ else if (new_letter == 'e') {\n            new_message += 'g';\n        } else\
    \ if (new_letter == 'i') {\n            new_message += 'k';\n        } else if\
    \ (new_letter == 'o') {\n            new_message += 'q';\n        } else if (new_letter\
    \ == 'u') {\n            new_message += 'y';\n        } else {\n            new_message\
    \ += letter;\n        }\n    }\n    return new_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0rk0we6g: /tmp/tmp0rk0we6g.cpp:40: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (isupper(message[i])) {\n            output.push_back(tolower(message[i]));\n\
    \        } else if (islower(message[i])) {\n            output.push_back(toupper(message[i]));\n\
    \        } else {\n            output.push_back(message[i]);\n        }\n    }\n\
    \    for (int i = 0; i < output.length(); i++) {\n        if (output[i] == 'a')\
    \ {\n            output[i] = 'c';\n        } else if (output[i] == 'e') {\n  \
    \          output[i] = 'g';\n        } else if (output[i] == 'i') {\n        \
    \    output[i] = 'k';\n        } else if (output[i] == 'o') {\n            output[i]\
    \ = 'q';\n        } else if (output[i] == 'u') {\n            output[i] = 'y';\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps9m9ksi0: /tmp/tmps9m9ksi0.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096156
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    int offset\
    \ = 2;\n    int vcount = 0;\n    std::string encodedMessage = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isalpha(message[i])) {\n  \
    \          char c = (isupper(message[i])) ? 'A' : 'a';\n            encodedMessage\
    \ += (char)((message[i] - c + offset) % 26 + c);\n        } else {\n         \
    \   encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpa7bexp01: /tmp/tmpa7bexp01.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // hint:\
    \ Remember that strings are just an array of characters\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n   \
    \     }\n        else if (c >= 'A' && c <= 'Z') {\n            c += 32;\n    \
    \    }\n        if (c == 'a') {\n            c = 'c';\n        }\n        else\
    \ if (c == 'e') {\n            c = 'g';\n        }\n        else if (c == 'i')\
    \ {\n            c = 'k';\n        }\n        else if (c == 'o') {\n         \
    \   c = 'q';\n        }\n        else if (c == 'u') {\n            c = 'w';\n\
    \        }\n        else if (c == 'A') {\n            c = 'C';\n        }\n  \
    \      else if (c == 'E') {\n            c = 'G';\n        }\n        else if\
    \ (c == 'I') {\n            c = 'K';\n        }\n        else if (c == 'O') {\n\
    \            c = 'Q';\n        }\n        else if (c == 'U') {\n            c\
    \ = 'W';\n        }\n        result += c;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded_message;\n  int message_length = message.length();\n  for (int i = 0;\
    \ i < message_length; i++) {\n    encoded_message += std::toupper(message[i]);\n\
    \  }\n  for (int i = 0; i < message_length; i++) {\n    if (encoded_message[i]\
    \ == 'A') {\n      encoded_message[i] = 'C';\n    } else if (encoded_message[i]\
    \ == 'E') {\n      encoded_message[i] = 'G';\n    } else if (encoded_message[i]\
    \ == 'I') {\n      encoded_message[i] = 'K';\n    } else if (encoded_message[i]\
    \ == 'O') {\n      encoded_message[i] = 'Q';\n    } else if (encoded_message[i]\
    \ == 'U') {\n      encoded_message[i] = 'S';\n    }\n  }\n  return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8gsn3t19: /tmp/tmp8gsn3t19.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += message[i] - 'A' + 'a';\n        }\
    \ else {\n            encoded_message += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            if (encoded_message[i] ==\
    \ 'u') {\n                encoded_message[i] = 'a';\n            } else {\n  \
    \              encoded_message[i] += 2;\n            }\n        }\n    }\n   \
    \ return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n   \
    \ assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpcmzg5p0d: /tmp/tmpcmzg5p0d.cpp:38: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ final_message = \"\";\n\t// Will map the vowel to its corresponding position\
    \ in the alphabet\n\tstd::map<char, int> vowel_to_index;\n\tint i = 0;\n\tstd::string\
    \ vowels = \"aeiou\";\n\tfor (auto vowel : vowels) {\n\t\tvowel_to_index[vowel]\
    \ = i;\n\t\ti++;\n\t}\n\tfor (auto c : message) {\n\t\t// If the character is\
    \ a lowercase vowel, it will be swapped \n\t\t// to the next letter in the alphabet\n\
    \t\tif (std::islower(c) && vowel_to_index.find(c) != vowel_to_index.end()) {\n\
    \t\t\tint vowel_index = vowel_to_index[c];\n\t\t\tchar vowel_char = vowels[(vowel_index\
    \ + 2) % vowels.size()];\n\t\t\tfinal_message += std::toupper(vowel_char);\n\t\
    \t}\n\t\t// If the character is an uppercase vowel, it will be swapped \n\t\t\
    // to the next letter in the alphabet\n\t\telse if (std::isupper(c) && vowel_to_index.find(std::tolower(c))\
    \ != vowel_to_index.end()) {\n\t\t\tint vowel_index = vowel_to_index[std::tolower(c)];\n\
    \t\t\tchar vowel_char = vowels[(vowel_index + 2) % vowels.size()];\n\t\t\tfinal_message\
    \ += std::toupper(vowel_char);\n\t\t}\n\t\t// If the character is not a vowel,\
    \ it will be swapped to the next letter in the alphabet\n\t\telse {\n\t\t\tfinal_message\
    \ += std::toupper(c);\n\t\t}\n\t}\n\treturn final_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp_qxi8wok: /tmp/tmp_qxi8wok.cpp:47: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstd::string newMessage = \"\"\
    ;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar current = message[i];\n\
    \t\tint position = alphabet.find(tolower(current));\n\t\tif (islower(current))\
    \ {\n\t\t\t//if current letter is a vowel, we change it to the letter \n\t\t\t\
    //in position position + 2 in the alphabet\n\t\t\tif (current == 'a' || current\
    \ == 'e' || current == 'i' || current == 'o' || current == 'u') {\n\t\t\t\tif\
    \ (position + 2 > 25) {\n\t\t\t\t\tnewMessage += alphabet[position + 2 - 26];\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewMessage += alphabet[position + 2];\n\t\
    \t\t\t}\n\t\t\t}\n\t\t\t//if current letter is not a vowel, we upper it and add\
    \ it to newMessage\n\t\t\telse {\n\t\t\t\tnewMessage += toupper(current);\n\t\t\
    \t}\n\t\t}\n\t\t//if current letter is not a lowercase letter, we change it to\
    \ lowercase\n\t\t//and add it to newMessage\n\t\telse {\n\t\t\tnewMessage += tolower(current);\n\
    \t\t}\n\t}\n\treturn newMessage;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps4hzjnxu: /tmp/tmps4hzjnxu.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  // Write\
    \ your code here.\n  std::string encoded;\n  std::map<char,char> vowel_map;\n\
    \  vowel_map['a'] = 'c';\n  vowel_map['e'] = 'g';\n  vowel_map['i'] = 'k';\n \
    \ vowel_map['o'] = 'q';\n  vowel_map['u'] = 'y';\n  vowel_map['A'] = 'C';\n  vowel_map['E']\
    \ = 'G';\n  vowel_map['I'] = 'K';\n  vowel_map['O'] = 'Q';\n  vowel_map['U'] =\
    \ 'Y';\n  for(auto c : message) {\n    if(vowel_map.find(c) != vowel_map.end())\
    \ {\n      encoded.push_back(vowel_map[c]);\n    } else if('a' <= c && c <= 'z')\
    \ {\n      encoded.push_back(c - 'a' + 'A');\n    } else if('A' <= c && c <= 'Z')\
    \ {\n      encoded.push_back(c - 'A' + 'a');\n    } else {\n      encoded.push_back(c);\n\
    \    }\n  }\n  return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1lu4nexn: /tmp/tmp1lu4nexn.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::map<char,char>\
    \ mappings;\n    std::string vowels = \"aeiou\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        if(vowels.find(message[i]) == std::string::npos) {\n       \
    \     mappings[message[i]] = toupper(message[i]);\n        } else {\n        \
    \    int ind = vowels.find(message[i]);\n            ind = (ind + 2) % vowels.length();\n\
    \            mappings[message[i]] = vowels[ind];\n        }\n    }\n    std::string\
    \ result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        result\
    \ += mappings[message[i]];\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgy5bbnbu: /tmp/tmpgy5bbnbu.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            message[i] = tolower(message[i]);\n\
    \        } else {\n            message[i] = toupper(message[i]);\n        }\n\
    \        if (vowels.find(message[i]) != std::string::npos) {\n            message[i]\
    \ = vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpuhpjw1uy: /tmp/tmpuhpjw1uy.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ vowels = \"AEIOUaeiou\";\n\tstd::string alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tchar letter = message[i];\n\t\t// change case\n\t\tif (islower(letter))\
    \ {\n\t\t\tletter = toupper(letter);\n\t\t} else if (isupper(letter)) {\n\t\t\t\
    letter = tolower(letter);\n\t\t}\n\n\t\t// change vowels\n\t\tif (vowels.find(letter)\
    \ != std::string::npos) {\n\t\t\tint idx = alpha.find(letter);\n\t\t\tif (idx\
    \ + 2 >= alpha.length()) {\n\t\t\t\tidx = idx + 2 - alpha.length();\n\t\t\t} else\
    \ {\n\t\t\t\tidx += 2;\n\t\t\t}\n\t\t\tletter = alpha[idx];\n\t\t}\n\t\tresult\
    \ += letter;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpvs0fi34k: /tmp/tmpvs0fi34k.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded;\n  for (char c : message) {\n    char encChar = c;\n    switch (encChar)\
    \ {\n      case 'a':\n        encChar = 'c';\n        break;\n      case 'A':\n\
    \        encChar = 'C';\n        break;\n      case 'e':\n        encChar = 'g';\n\
    \        break;\n      case 'E':\n        encChar = 'G';\n        break;\n   \
    \   case 'i':\n        encChar = 'k';\n        break;\n      case 'I':\n     \
    \   encChar = 'K';\n        break;\n      case 'o':\n        encChar = 'q';\n\
    \        break;\n      case 'O':\n        encChar = 'Q';\n        break;\n   \
    \   case 'u':\n        encChar = 'y';\n        break;\n      case 'U':\n     \
    \   encChar = 'Y';\n        break;\n      default:\n        break;\n    }\n  \
    \  encoded += encChar;\n  }\n  return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpv5tlg6fr: /tmp/tmpv5tlg6fr.cpp:57: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    std::map<char, char> map;\n    std::map<char, char> map2;\n\
    \    std::map<char, char>::iterator it;\n    std::map<char, char>::iterator it2;\n\
    \    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    for (int i = 0;\
    \ i < vowels.size(); i++) {\n        it = map.find(vowels[i]);\n        if (it\
    \ == map.end()) {\n            map.insert(std::pair<char, char>(vowels[i], vowels[(i+2)%5]));\n\
    \        }\n    }\n    for (int i = 0; i < vowels.size(); i++) {\n        it2\
    \ = map2.find(vowels[i]);\n        if (it2 == map2.end()) {\n            map2.insert(std::pair<char,\
    \ char>(vowels[i], vowels[(i+2)%5]));\n        }\n    }\n    for (int i = 0; i\
    \ < message.size(); i++) {\n        it = map.find(tolower(message[i]));\n    \
    \    it2 = map2.find(tolower(message[i]));\n        if (it != map.end()) {\n \
    \           output += map[tolower(message[i])];\n        } else if (it2 != map2.end())\
    \ {\n            output += toupper(map2[tolower(message[i])]);\n        } else\
    \ {\n            output += message[i];\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptk9drzvs: /tmp/tmptk9drzvs.cpp:47: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage;\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ currLetter = message[i];\n        // if lower case, change to upper case, otherwise\
    \ change to lower case\n        if (std::islower(currLetter)) {\n            currLetter\
    \ = std::toupper(currLetter);\n        } else {\n            currLetter = std::tolower(currLetter);\n\
    \        }\n        // if currLetter is a vowel, replace with letter 2 spots ahead\
    \ in alphabet\n        if (currLetter == 'A') {\n            currLetter = 'C';\n\
    \        } else if (currLetter == 'E') {\n            currLetter = 'G';\n    \
    \    } else if (currLetter == 'I') {\n            currLetter = 'K';\n        }\
    \ else if (currLetter == 'O') {\n            currLetter = 'Q';\n        } else\
    \ if (currLetter == 'U') {\n            currLetter = 'S';\n        } else if (currLetter\
    \ == 'a') {\n            currLetter = 'c';\n        } else if (currLetter == 'e')\
    \ {\n            currLetter = 'g';\n        } else if (currLetter == 'i') {\n\
    \            currLetter = 'k';\n        } else if (currLetter == 'o') {\n    \
    \        currLetter = 'q';\n        } else if (currLetter == 'u') {\n        \
    \    currLetter = 's';\n        }\n        encodedMessage += currLetter;\n   \
    \ }\n    return encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpwcq_5l03: /tmp/tmpwcq_5l03.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ replaced = \"\";\n\tstd::map<char, char> myMap;\n\tmyMap['a'] = 'c';\n\tmyMap['e']\
    \ = 'g';\n\tmyMap['i'] = 'k';\n\tmyMap['o'] = 'q';\n\tmyMap['u'] = 'w';\n\tmyMap['A']\
    \ = 'C';\n\tmyMap['E'] = 'G';\n\tmyMap['I'] = 'K';\n\tmyMap['O'] = 'Q';\n\tmyMap['U']\
    \ = 'W';\n\tfor (auto element : message) {\n\t\tif (isalpha(element)) {\n\t\t\t\
    if (isupper(element)) {\n\t\t\t\tif (myMap.find(element) != myMap.end()) {\n\t\
    \t\t\t\treplaced += myMap[element];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treplaced\
    \ += element + 32;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (myMap.find(element)\
    \ != myMap.end()) {\n\t\t\t\t\treplaced += myMap[element];\n\t\t\t\t}\n\t\t\t\t\
    else {\n\t\t\t\t\treplaced += element - 32;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\treplaced += element;\n\t\t}\n\t}\n\treturn replaced;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp_uiuqg0t: /tmp/tmp_uiuqg0t.cpp:53: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            ans += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            ans += toupper(message[i]);\n        } else {\n            ans\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a') {\n            ans[i] = 'c';\n        } else if\
    \ (ans[i] == 'e') {\n            ans[i] = 'g';\n        } else if (ans[i] == 'i')\
    \ {\n            ans[i] = 'k';\n        } else if (ans[i] == 'o') {\n        \
    \    ans[i] = 'q';\n        } else if (ans[i] == 'u') {\n            ans[i] =\
    \ 'w';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp4xwh_ngn: /tmp/tmp4xwh_ngn.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    if (isalpha(message[i])) {\n      if\
    \ (islower(message[i])) {\n        message[i] = toupper(message[i]);\n      }\
    \ else {\n        message[i] = tolower(message[i]);\n      }\n    }\n  }\n  for\
    \ (int i = 0; i < message.length(); i++) {\n    if (message[i] == 'a') {\n   \
    \   message[i] = 'c';\n    } else if (message[i] == 'e') {\n      message[i] =\
    \ 'g';\n    } else if (message[i] == 'i') {\n      message[i] = 'k';\n    } else\
    \ if (message[i] == 'o') {\n      message[i] = 'q';\n    } else if (message[i]\
    \ == 'u') {\n      message[i] = 'w';\n    } else if (message[i] == 'A') {\n  \
    \    message[i] = 'C';\n    } else if (message[i] == 'E') {\n      message[i]\
    \ = 'G';\n    } else if (message[i] == 'I') {\n      message[i] = 'K';\n    }\
    \ else if (message[i] == 'O') {\n      message[i] = 'Q';\n    } else if (message[i]\
    \ == 'U') {\n      message[i] = 'W';\n    }\n  }\n  return message;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        char current\
    \ = message[i];\n        int ascii = (int) current;\n        if (ascii >= 65 &&\
    \ ascii <= 90) {\n            ascii += 32;\n        } else if (ascii >= 97 &&\
    \ ascii <= 122) {\n            ascii -= 32;\n        }\n        if (ascii == 97)\
    \ {\n            ascii = 99;\n        } else if (ascii == 101) {\n           \
    \ ascii = 103;\n        } else if (ascii == 105) {\n            ascii = 107;\n\
    \        } else if (ascii == 111) {\n            ascii = 113;\n        } else\
    \ if (ascii == 117) {\n            ascii = 120;\n        } else if (ascii == 121)\
    \ {\n            ascii = 122;\n        } else if (ascii == 65) {\n           \
    \ ascii = 67;\n        } else if (ascii == 69) {\n            ascii = 71;\n  \
    \      } else if (ascii == 73) {\n            ascii = 75;\n        } else if (ascii\
    \ == 79) {\n            ascii = 81;\n        } else if (ascii == 85) {\n     \
    \       ascii = 88;\n        } else if (ascii == 89) {\n            ascii = 90;\n\
    \        }\n        char c = (char) ascii;\n        encoded += c;\n    }\n   \
    \ return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbhqfi7m5: /tmp/tmpbhqfi7m5.cpp:56: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// TODO\n\
    \treturn std::string(\"\");\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpg5v9fxyn: /tmp/tmpg5v9fxyn.cpp:19: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  char vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u'};\n  for (int i = 0; i < message.length(); i++) {\n\
    \    if (std::islower(message[i])) {\n      message[i] = std::toupper(message[i]);\n\
    \    } else if (std::isupper(message[i])) {\n      message[i] = std::tolower(message[i]);\n\
    \    }\n    for (int j = 0; j < 5; j++) {\n      if (message[i] == vowels[j])\
    \ {\n        message[i] = vowels[(j + 2) % 5];\n      }\n    }\n  }\n  return\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1j31r0mf: /tmp/tmp1j31r0mf.cpp:31: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// for the\
    \ capital letters, subtract the value of 'A' from the value of the letter and\
    \ add the value of 'a' to the result of that calculation\n\t// for the lowercase\
    \ letters, subtract the value of 'a' from the value of the letter and add the\
    \ value of 'A' to the result of that calculation\n\t// for the vowels, if the\
    \ letter is a lowercase letter, subtract the value of 'a' from the value of the\
    \ letter and add the value of 'A' to the result of that calculation\n\t// for\
    \ the vowels, if the letter is a uppercase letter, subtract the value of 'A' from\
    \ the value of the letter and add the value of 'a' to the result of that calculation\n\
    \tint len = message.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\t// encode the capital letter\n\t\t\tmessage[i]\
    \ = (message[i] - 'A') + 'a';\n\t\t\tif (message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n\t\t\t\t\
    message[i] = (message[i] - 'a') + 'A';\n\t\t\t\tswitch (message[i]) {\n\t\t\t\t\
    \tcase 'A':\n\t\t\t\t\t\tmessage[i] = 'C';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase\
    \ 'E':\n\t\t\t\t\t\tmessage[i] = 'G';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'I':\n\
    \t\t\t\t\t\tmessage[i] = 'K';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'O':\n\t\t\t\
    \t\t\tmessage[i] = 'M';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'U':\n\t\t\t\t\t\t\
    message[i] = 'Q';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c1a81tv.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmp8c1a81tv.cpp:46:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   46 | int main() {\n      |            ^\n/tmp/tmp8c1a81tv.cpp:53:1:\
    \ error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmp8c1a81tv.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmp8c1a81tv.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   53 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    assert(message.length()\
    \ > 0);\n    std::string encodedString = \"\";\n    std::vector<char> vowels =\
    \ {'a', 'e', 'i', 'o', 'u'};\n    std::map<char, char> vowelMap;\n    int count\
    \ = 0;\n    for (int i = 97; i < 97 + 26; i++) {\n        char c = (char) i;\n\
    \        if (std::find(vowels.begin(), vowels.end(), c) != vowels.end()) {\n \
    \           vowelMap[c] = (char) (i + 2);\n            vowelMap[std::toupper(c)]\
    \ = std::toupper((char) (i + 2));\n        }\n    }\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char curr = message[i];\n        if (std::find(vowels.begin(),\
    \ vowels.end(), curr) != vowels.end()) {\n            encodedString += vowelMap[curr];\n\
    \        } else {\n            if (curr >= 'a' && curr <= 'z') {\n           \
    \     encodedString += std::toupper(curr);\n            } else {\n           \
    \     encodedString += std::tolower(curr);\n            }\n        }\n    }\n\
    \    return encodedString;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpf63siswy: /tmp/tmpf63siswy.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096157
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (auto&\
    \ c : message) {\n    if (std::isalpha(c)) {\n      c = (c <= 'Z' ? 'a' : 'A')\
    \ + (c - (c <= 'Z' ? 'A' : 'a') + 2) % 26;\n      if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n        c = (c <= 'Z' ? 'a' : 'A') + (c -\
    \ (c <= 'Z' ? 'A' : 'a') + 4) % 26;\n    }\n  }\n  return message;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpfpvn9ads: /tmp/tmpfpvn9ads.cpp:25: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // write\
    \ your code here\n\tstd::string encoded;\n\tint i=0;\n\twhile(i<message.length()){\n\
    \t\tif(message[i]>='a' && message[i]<='z'){\n\t\t\tencoded.push_back(toupper(message[i]));\n\
    \t\t}\n\t\telse if(message[i]>='A' && message[i]<='Z'){\n\t\t\tencoded.push_back(tolower(message[i]));\n\
    \t\t}\n\t\telse{\n\t\t\tencoded.push_back(message[i]);\n\t\t}\n\t\ti++;\n\t}\n\
    \tstd::string vowels=\"aeiou\";\n\ti=0;\n\twhile(i<encoded.length()){\n\t\tif(vowels.find(encoded[i])!=std::string::npos){\n\
    \t\t\tint index=vowels.find(encoded[i]);\n\t\t\tindex+=2;\n\t\t\tif(index>=vowels.length()){\n\
    \t\t\t\tindex-=vowels.length();\n\t\t\t}\n\t\t\tencoded[i]=vowels[index];\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxwuql91u: /tmp/tmpxwuql91u.cpp:46: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tint size\
    \ = message.size();\n\tstd::string result;\n\tresult.resize(size);\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\
    \t\t\tresult[i] = message[i] - 'a' + 'A';\n\t\t} else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n\t\t\tresult[i] = message[i] - 'A' + 'a';\n\t\t} else\
    \ {\n\t\t\tresult[i] = message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < size; i++)\
    \ {\n\t\tif (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t} else\
    \ if (result[i] == 'Y') {\n\t\t\tresult[i] = 'A';\n\t\t} else if (result[i] ==\
    \ 'Z') {\n\t\t\tresult[i] = 'B';\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpdupzgxsx: /tmp/tmpdupzgxsx.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// TODO:\
    \ YOUR CODE HERE\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ str=\"\";\n    for(int i=0;i<message.length();i++){\n        if(message[i]=='a'||message[i]=='A'){\n\
    \            str+='c';\n        }\n        else if(message[i]=='e'||message[i]=='E'){\n\
    \            str+='g';\n        }\n        else if(message[i]=='i'||message[i]=='I'){\n\
    \            str+='k';\n        }\n        else if(message[i]=='o'||message[i]=='O'){\n\
    \            str+='m';\n        }\n        else if(message[i]=='u'||message[i]=='U'){\n\
    \            str+='q';\n        }\n        else if(message[i]>='a'&&message[i]<='z'){\n\
    \            str+=message[i]-32;\n        }\n        else if(message[i]>='A'&&message[i]<='Z'){\n\
    \            str+=message[i]+32;\n        }\n        else{\n            str+=message[i];\n\
    \        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpjeuuxzkl: /tmp/tmpjeuuxzkl.cpp:46: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096158
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// convert\
    \ message to lower case\n\tstd::transform(message.begin(), message.end(), message.begin(),\
    \ ::tolower);\n\t// encode message\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tint code = message[i];\n\t\tswitch (code) {\n\t\t\tcase 'a':\n\t\t\t\t\
    message[i] = 'c';\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\tmessage[i] = 'g';\n\
    \t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tmessage[i] = 'k';\n\t\t\t\tbreak;\n\t\
    \t\tcase 'o':\n\t\t\t\tmessage[i] = 'q';\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\
    \t\tmessage[i] = 'y';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (code >= 97\
    \ && code <= 122) {\n\t\t\t\t\tmessage[i] = code - 32;\n\t\t\t\t}\n\t\t}\n\t}\n\
    \treturn message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp31fusaem: /tmp/tmp31fusaem.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096159
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    if (message[i] >= 'a' && message[i]\
    \ <= 'z')\n      message[i] = message[i] - 32;\n    else if (message[i] >= 'A'\
    \ && message[i] <= 'Z')\n      message[i] = message[i] + 32;\n    if (message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U')\n      message[i] = message[i] + 2;\n    else if (message[i] == 'Y')\n\
    \      message[i] = 'A';\n    else if (message[i] == 'Z')\n      message[i] =\
    \ 'B';\n  }\n  return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6ys2xon9: /tmp/tmp6ys2xon9.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096159
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ res;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    std::vector<char>\
    \ encoded_vowels = {'c', 'g', 'k', 'o', 's'};\n    for (char c : message) {\n\
    \        auto it = std::find(vowels.begin(), vowels.end(), tolower(c));\n    \
    \    if (it != vowels.end()) {\n            int index = std::distance(vowels.begin(),\
    \ it);\n            res += encoded_vowels[index];\n        } else {\n        \
    \    res += tolower(c);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp3eghifyl: /tmp/tmp3eghifyl.cpp:31: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    return\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphwmdp7fb: /tmp/tmphwmdp7fb.cpp:18: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ reverse_message;\n    for (char c : message) {\n        if (c == ' ') {\n  \
    \          reverse_message += ' ';\n            continue;\n        }\n       \
    \ if (isupper(c)) {\n            c = tolower(c);\n        } else {\n         \
    \   c = toupper(c);\n        }\n        switch (c) {\n            case 'a': c\
    \ = 'c'; break;\n            case 'e': c = 'g'; break;\n            case 'i':\
    \ c = 'k'; break;\n            case 'o': c = 'q'; break;\n            case 'u':\
    \ c = 'y'; break;\n        }\n        reverse_message += c;\n    }\n    return\
    \ reverse_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptlz22joc: /tmp/tmptlz22joc.cpp:39: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  \
    \  char encoded_vowels[] = {'c', 'g', 'k', 'o', 's'};\n    for (auto letter :\
    \ message) {\n        if (isupper(letter)) {\n            letter = tolower(letter);\n\
    \        }\n        for (int i = 0; i < 5; i++) {\n            if (letter == vowels[i])\
    \ {\n                encoded_message += encoded_vowels[i];\n                break;\n\
    \            }\n            if (i == 4) {\n                encoded_message +=\
    \ letter;\n            }\n        }\n    }\n    return encoded_message;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpe1xj49yk: /tmp/tmpe1xj49yk.cpp:36: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Write\
    \ your code here\n    std::string result = \"\";\n    std::string vowels = \"\
    aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\n\
    \            result += tolower(message[i]);\n        else if (islower(message[i]))\n\
    \            result += toupper(message[i]);\n        else\n            result\
    \ += message[i];\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n   \
    \     std::size_t found = result.find(vowels[i]);\n        while (found != std::string::npos)\
    \ {\n            int index = int(found) + 2;\n            index %= 26;\n     \
    \       result[found] = vowels[index];\n            found = result.find(vowels[i],\
    \ found + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpx5eop8bm: /tmp/tmpx5eop8bm.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096159
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar vowels[10]\
    \ = {'a','e','i','o','u','A','E','I','O','U'};\n\t// std::string vowels = \"aeiouAEIOU\"\
    ;\n\tint len = message.length();\n\tstd::string result = \"\";\n\tfor(int i=0;i<len;i++)\
    \ {\n\t\tchar x = message[i];\n\t\tif(x=='z')\n\t\t\tx = 'b';\n\t\telse if(x=='Z')\n\
    \t\t\tx = 'B';\n\t\telse if(x=='y')\n\t\t\tx = 'a';\n\t\telse if(x=='Y')\n\t\t\
    \tx = 'A';\n\t\telse\n\t\t\tx = x+2;\n\t\t// if(vowels.find(x)!=std::string::npos)\n\
    \t\tfor(int j=0;j<10;j++) {\n\t\t\tif(x==vowels[j]) {\n\t\t\t\tx = ' ';\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif(x>='a' && x<='z')\n\t\t\tx = x - 32;\n\t\tresult\
    \ = result + x;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpo657qgo0: /tmp/tmpo657qgo0.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    /*\n  \
    \      Use a for loop to iterate through each letter in the string.\n        Use\
    \ an if statement to determine whether it is a vowel or not.\n        If it is\
    \ a vowel, then move it by 2.\n        Else, just capitalize it.\n    */\n   \
    \ std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            if (message[i]\
    \ == 'u')\n                encoded_message += 'a';\n            else if (message[i]\
    \ == 'z')\n                encoded_message += 'b';\n            else if (message[i]\
    \ == 'y')\n                encoded_message += 'c';\n            else\n       \
    \         encoded_message += (char)(message[i] + 2);\n        }\n        else\
    \ {\n            encoded_message += (char)toupper(message[i]);\n        }\n  \
    \  }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpu6c8tsgm: /tmp/tmpu6c8tsgm.cpp:40: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ new_message = \"\";\n  for (int i = 0; i < message.length(); i++) {\n    if\
    \ (message[i] == ' ') {\n      new_message += ' ';\n    } else if (message[i]\
    \ == 'z') {\n      new_message += 'B';\n    } else if (message[i] == 'Z') {\n\
    \      new_message += 'b';\n    } else if (message[i] == 'A') {\n      new_message\
    \ += 'C';\n    } else if (message[i] == 'E') {\n      new_message += 'G';\n  \
    \  } else if (message[i] == 'I') {\n      new_message += 'K';\n    } else if (message[i]\
    \ == 'O') {\n      new_message += 'Q';\n    } else if (message[i] == 'U') {\n\
    \      new_message += 'S';\n    } else if (message[i] == 'a') {\n      new_message\
    \ += 'c';\n    } else if (message[i] == 'e') {\n      new_message += 'g';\n  \
    \  } else if (message[i] == 'i') {\n      new_message += 'k';\n    } else if (message[i]\
    \ == 'o') {\n      new_message += 'q';\n    } else if (message[i] == 'u') {\n\
    \      new_message += 's';\n    } else if (message[i] >= 'a' && message[i] <=\
    \ 'y') {\n      new_message += (char)(message[i] + 2);\n    } else if (message[i]\
    \ >= 'A' && message[i] <= 'Y') {\n      new_message += (char)(message[i] + 2);\n\
    \    } else {\n      new_message += (char)(message[i] - 26 + 2);\n    }\n  }\n\
    \  return new_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpc32cap6v: /tmp/tmpc32cap6v.cpp:54: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    std::string lowercase\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    for (auto ch : message) {\n        if (islower(ch)) {\n            result\
    \ += toupper(ch);\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n\
    \        } else {\n            result += ch;\n        }\n    }\n    std::string\
    \ encoded = \"\";\n    for (auto ch : result) {\n        if (isalpha(ch)) {\n\
    \            std::size_t pos = lowercase.find(tolower(ch));\n            if (vowels.find(lowercase[pos])\
    \ != std::string::npos) {\n                pos = (pos + 2) % lowercase.size();\n\
    \            }\n            if (isupper(ch)) {\n                encoded += uppercase[pos];\n\
    \            } else {\n                encoded += lowercase[pos];\n          \
    \  }\n        } else {\n            encoded += ch;\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096159
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (c - 'a' + 'A');\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += (c - 'A' + 'a');\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n   \
    \     if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'C' || result[i] == 'G') {\n            result[i]\
    \ = result[i] - 2;\n        } else if (result[i] == 'b' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'h' || result[i] == 'j' || result[i] == 'l'\
    \ || result[i] == 'n' || result[i] == 'p' || result[i] == 'r' || result[i] ==\
    \ 't' || result[i] == 'v' || result[i] == 'x' || result[i] == 'z') {\n       \
    \     result[i] = result[i] - 2;\n        } else if (result[i] == 'B' || result[i]\
    \ == 'D' || result[i] == 'F' || result[i] == 'H' || result[i] == 'J' || result[i]\
    \ == 'L' || result[i] == 'N' || result[i] == 'P' || result[i] == 'R' || result[i]\
    \ == 'T' || result[i] == 'V' || result[i] == 'X' || result[i] == 'Z') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgj2edsl4: /tmp/tmpgj2edsl4.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string result = \"\";\n  for (char & c : message)\
    \ {\n    if (isupper(c)) {\n      result += tolower(c);\n    } else if (islower(c))\
    \ {\n      result += toupper(c);\n    } else {\n      result += c;\n    }\n  \
    \  for (int i = 0; i < vowels.length(); i++) {\n      if (tolower(c) == vowels[i])\
    \ {\n        result[result.length() - 1] = vowels[(i + 2) % vowels.length()];\n\
    \      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp_6b75y1y: /tmp/tmp_6b75y1y.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded;\n  char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  for (char &c : message)\
    \ {\n    bool isVowel = false;\n    for (int i = 0; i < 5; i++) {\n      if (c\
    \ == vowels[i]) {\n        isVowel = true;\n        encoded += vowels[(i + 2)\
    \ % 5];\n        break;\n      }\n    }\n    if (!isVowel) {\n      if (isupper(c))\
    \ {\n        encoded += tolower(c);\n      } else {\n        encoded += toupper(c);\n\
    \      }\n    }\n  }\n  return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqr1cnuel: /tmp/tmpqr1cnuel.cpp:37: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string result = \"\";\n  std::transform(message.begin(),\
    \ message.end(), message.begin(), ::tolower);\n  for (auto c : message) {\n  \
    \  char tmp = c;\n    if (isalpha(c)) {\n      if (c == 'z') {\n        tmp =\
    \ 'b';\n      } else if (c == 'y') {\n        tmp = 'a';\n      } else {\n   \
    \     tmp = c + 2;\n      }\n    }\n    if (vowels.find(tmp) != std::string::npos)\
    \ {\n      tmp = vowels[vowels.find(tmp) + 1];\n    }\n    result += toupper(tmp);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp7fh1tzz3: /tmp/tmp7fh1tzz3.cpp:37: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096159
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    int size = message.size();\n    int shifted_char;\n    int current_char;\n\
    \    for (int i = 0; i < size; i++) {\n        current_char = message[i];\n  \
    \      shifted_char = current_char + 2;\n        // check if char is a vowel and\
    \ change\n        if (current_char == 'a' || current_char == 'A') {\n        \
    \    shifted_char = shifted_char + 25;\n        } else if (current_char == 'e'\
    \ || current_char == 'E') {\n            shifted_char = shifted_char + 25;\n \
    \       } else if (current_char == 'i' || current_char == 'I') {\n           \
    \ shifted_char = shifted_char + 25;\n        } else if (current_char == 'o' ||\
    \ current_char == 'O') {\n            shifted_char = shifted_char + 25;\n    \
    \    } else if (current_char == 'u' || current_char == 'U') {\n            shifted_char\
    \ = shifted_char + 25;\n        }\n        // swap case\n        if (shifted_char\
    \ >= 65 && shifted_char <= 90) {\n            shifted_char = shifted_char + 32;\n\
    \        } else if (shifted_char >= 97 && shifted_char <= 122) {\n           \
    \ shifted_char = shifted_char - 32;\n        }\n        result.push_back(shifted_char);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2ntna6kg: /tmp/tmp2ntna6kg.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encode = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (tolower(message[i]) == 'a') {\n            encode += 'c';\n        } else if\
    \ (tolower(message[i]) == 'e') {\n            encode += 'g';\n        } else if\
    \ (tolower(message[i]) == 'i') {\n            encode += 'k';\n        } else if\
    \ (tolower(message[i]) == 'o') {\n            encode += 'q';\n        } else if\
    \ (tolower(message[i]) == 'u') {\n            encode += 'y';\n        } else if\
    \ (isupper(message[i])) {\n            encode += tolower(message[i]);\n      \
    \  } else {\n            encode += toupper(message[i]);\n        }\n    }\n  \
    \  return encode;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpv3k07lxz: /tmp/tmpv3k07lxz.cpp:37: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar vowels[5]\
    \ = {'a', 'e', 'i', 'o', 'u'};\n\tchar replaced_vowels[5] = {'c', 'g', 'k', 'o',\
    \ 's'};\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tchar ch = message[i];\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\t\
    ch = ch - 'a' + 'A';\n\t\t} else if (ch >= 'A' && ch <= 'Z') {\n\t\t\tch = ch\
    \ - 'A' + 'a';\n\t\t}\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tif (ch == vowels[j])\
    \ {\n\t\t\t\tch = replaced_vowels[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult\
    \ += ch;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2i372itc: /tmp/tmp2i372itc.cpp:37: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar chars[26]\
    \ = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \tstd::map<char, char> myMap;\n\tfor(int i = 0; i < 26; i++) {\n\t\tmyMap[chars[i]]\
    \ = chars[(i+2)%26];\n\t}\n\tstd::string str;\n\tfor(int i = 0; i < message.length();\
    \ i++) {\n\t\tchar c = message[i];\n\t\tif(c >= 'a' && c <= 'z') {\n\t\t\tif(myMap.find(c)\
    \ != myMap.end()) {\n\t\t\t\tstr += myMap[c];\n\t\t\t}\n\t\t} else if(c >= 'A'\
    \ && c <= 'Z') {\n\t\t\tif(myMap.find(c + 32) != myMap.end()) {\n\t\t\t\tstr +=\
    \ (myMap[c + 32] - 32);\n\t\t\t}\n\t\t} else {\n\t\t\tstr += c;\n\t\t}\n\t}\n\t\
    return str;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp24mgwfiu: /tmp/tmp24mgwfiu.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ newMessage;\n\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (isupper(message[i])) {\n            newMessage += tolower(message[i]);\n  \
    \      } else if (islower(message[i])) {\n            newMessage += toupper(message[i]);\n\
    \        } else {\n            newMessage += message[i];\n        }\n    }\n\n\
    \    for (int i = 0; i < newMessage.length(); i++) {\n        if (newMessage[i]\
    \ == 'a') {\n            newMessage[i] = 'c';\n        } else if (newMessage[i]\
    \ == 'e') {\n            newMessage[i] = 'g';\n        } else if (newMessage[i]\
    \ == 'i') {\n            newMessage[i] = 'k';\n        } else if (newMessage[i]\
    \ == 'o') {\n            newMessage[i] = 'q';\n        } else if (newMessage[i]\
    \ == 'u') {\n            newMessage[i] = 'y';\n        }\n    }\n\n    return\
    \ newMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmppdv7xvyu: /tmp/tmppdv7xvyu.cpp:45: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::map<char,\
    \ char> vowel_map = {\n        {'a', 'c'},\n        {'e', 'g'},\n        {'i',\
    \ 'k'},\n        {'o', 'q'},\n        {'u', 'w'},\n        {'A', 'C'},\n     \
    \   {'E', 'G'},\n        {'I', 'K'},\n        {'O', 'Q'},\n        {'U', 'W'}\n\
    \    };\n    std::transform(message.begin(), message.end(), message.begin(),\n\
    \                [](unsigned char c) -> unsigned char {\n                    if\
    \ (c <= 90) return c + 32;\n                    return c;\n                });\n\
    \    for (char &c : message) {\n        auto iter = vowel_map.find(c);\n     \
    \   if (iter != vowel_map.end()) c = iter->second;\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpw5ibdj3m: /tmp/tmpw5ibdj3m.cpp:40: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isalpha(message[i])) {\n  \
    \          if (isupper(message[i])) {\n                message[i] = tolower(message[i]);\n\
    \            } else {\n                message[i] = toupper(message[i]);\n   \
    \         }\n        }\n    }\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] == 'a') {\n            message[i] = 'c';\n       \
    \ } else if (message[i] == 'e') {\n            message[i] = 'g';\n        } else\
    \ if (message[i] == 'i') {\n            message[i] = 'k';\n        } else if (message[i]\
    \ == 'o') {\n            message[i] = 'q';\n        } else if (message[i] == 'u')\
    \ {\n            message[i] = 'w';\n        }\n    }\n    return message;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbh5rynq_: /tmp/tmpbh5rynq_.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    /* TODO:\
    \ Write your solution here */\n    std::string result;\n    int i = 0;\n    while(i\
    \ < message.length()){\n        if (message[i] >= 65 && message[i] <= 90){\n \
    \           message[i] = message[i] + 32;\n        } else if (message[i] >= 97\
    \ && message[i] <= 122){\n            message[i] = message[i] - 32;\n        }\n\
    \        i++;\n    }\n    std::cout << message << std::endl;\n    i = 0;\n   \
    \ while(i < message.length()){\n        switch(message[i]){\n            case\
    \ 'a':\n                result += 'c';\n                break;\n            case\
    \ 'e':\n                result += 'g';\n                break;\n            case\
    \ 'i':\n                result += 'k';\n                break;\n            case\
    \ 'o':\n                result += 'q';\n                break;\n            case\
    \ 'u':\n                result += 'y';\n                break;\n            case\
    \ 'A':\n                result += 'C';\n                break;\n            case\
    \ 'E':\n                result += 'G';\n                break;\n            case\
    \ 'I':\n                result += 'K';\n                break;\n            case\
    \ 'O':\n                result += 'Q';\n                break;\n            case\
    \ 'U':\n                result += 'Y';\n                break;\n            default:\n\
    \                result += message[i];\n                break;\n        }\n  \
    \      i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2nmuoin0: /tmp/tmp2nmuoin0.cpp:70: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: 'test

    mUDASIR

    '
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    char alpha[]\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    char Alpha[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        for (int j = 0; j\
    \ < 26; j++) {\n            if (message[i] == alpha[j]) {\n                if\
    \ (j >= 24) {\n                    message[i] = alpha[(j-24)];\n             \
    \   } else {\n                    message[i] = alpha[(j+2)];\n               \
    \ }\n            } else if (message[i] == Alpha[j]) {\n                if (j >=\
    \ 24) {\n                    message[i] = Alpha[(j-24)];\n                } else\
    \ {\n                    message[i] = Alpha[(j+2)];\n                }\n     \
    \       }\n        }\n    }\n    return message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpfepovhcc: /tmp/tmpfepovhcc.cpp:37: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ res = \"\";\n  int i = 0;\n  while (i < message.length()) {\n    char ch = message[i];\n\
    \    if (isupper(ch)) {\n      res += tolower(ch);\n    } else if (islower(ch))\
    \ {\n      res += toupper(ch);\n    } else {\n      res += ch;\n    }\n    i++;\n\
    \  }\n  i = 0;\n  while (i < res.length()) {\n    char ch = res[i];\n    if (ch\
    \ == 'a') {\n      res[i] = 'c';\n    } else if (ch == 'e') {\n      res[i] =\
    \ 'g';\n    } else if (ch == 'i') {\n      res[i] = 'k';\n    } else if (ch ==\
    \ 'o') {\n      res[i] = 'q';\n    } else if (ch == 'u') {\n      res[i] = 'y';\n\
    \    }\n    i++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpdhy4csko: /tmp/tmpdhy4csko.cpp:48: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ res;\n    for (int i = 0; i < message.size(); i++) {\n        char curr = message[i];\n\
    \        if (curr >= 'a' && curr <= 'z') {\n            res += std::toupper(curr);\n\
    \        } else if (curr >= 'A' && curr <= 'Z') {\n            res += std::tolower(curr);\n\
    \        } else {\n            res += curr;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpx957go_9: /tmp/tmpx957go_9.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // TODO:\
    \ Implement this\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result;\n\tfor (auto i : message) {\n\t\tif (i >= 'a' && i <= 'z') {\n\t\t\t\
    result += i - 32;\n\t\t}\n\t\telse if (i >= 'A' && i <= 'Z') {\n\t\t\tresult +=\
    \ i + 32;\n\t\t}\n\t\telse if (i == 'A' || i == 'E' || i == 'I' || i == 'O' ||\
    \ i == 'U') {\n\t\t\tresult += i + 2;\n\t\t}\n\t\telse if (i == 'Y') {\n\t\t\t\
    result += 'A';\n\t\t}\n\t\telse if (i == 'Z') {\n\t\t\tresult += 'B';\n\t\t}\n\
    \t\telse {\n\t\t\tresult += i;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp3vialt9m: /tmp/tmp3vialt9m.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // TODO\n\
    \    //get vowels and its index\n    std::string vowels = \"aeiou\";\n    std::string\
    \ ans = \"\";\n    std::map<char,int> vowelsIndex;\n    for(int i = 0; i < vowels.size();\
    \ i++){\n        vowelsIndex[vowels[i]] = i;\n    }\n    //encrypt\n    for(char\
    \ c : message){\n        int index = c - 'a';\n        if(c == ' '){\n       \
    \     ans += ' ';\n        }\n        else if(vowelsIndex.find(c) != vowelsIndex.end()){\n\
    \            ans += c + 2;\n        }\n        else{\n            ans += c;\n\
    \        }\n    }\n    //to upper case\n    for(int i = 0; i < ans.size(); i++){\n\
    \        ans[i] = toupper(ans[i]);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpers5mmxi: /tmp/tmpers5mmxi.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ msg = \"\";\n\tstd::string v = \"aeiou\";\n\t// iterate over each char in message\
    \ \n\tfor (char c : message) {\n\t\t// if it is a letter make it upper\n\t\tif\
    \ (isalpha(c)) {\n\t\t\tc = toupper(c);\n\t\t\t// check if it is a vowel\n\t\t\
    \tif (v.find(c) != std::string::npos) {\n\t\t\t\t// find the index of the vowel\n\
    \t\t\t\tint i = v.find(c);\n\t\t\t\t// add 2 to the index and check if it is within\
    \ range\n\t\t\t\tif (i + 2 > v.length()) {\n\t\t\t\t\t// put the char in the message\n\
    \t\t\t\t\tmsg += v[i + 2 - v.length()];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\
    // put the char in the message\n\t\t\t\t\tmsg += v[i + 2];\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\t// put the char in the message\n\t\t\t\tmsg += c;\n\t\
    \t\t}\n\t\t}\n\t\telse {\n\t\t\t// put the char in the message\n\t\t\tmsg += c;\n\
    \t\t}\n\t}\n\treturn msg;\n}\nint main() {\n    auto candidate = encode;\n   \
    \ assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpuzsb9clx: /tmp/tmpuzsb9clx.cpp:49: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  int index\
    \ = 0;\n  while (index < message.length()) {\n    if (message[index] >= 'a' &&\
    \ message[index] <= 'z') {\n      message[index] -= 'a' - 'A';\n    }\n    if\
    \ (message[index] == 'A' || message[index] == 'E' ||\n        message[index] ==\
    \ 'I' || message[index] == 'O' ||\n        message[index] == 'U') {\n      message[index]\
    \ = 'Z' - ('Z' - message[index] + 2);\n    }\n    index++;\n  }\n  return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpiybqc0k9: /tmp/tmpiybqc0k9.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  int len =\
    \ message.length();\n  for(int i = 0; i < len; i++) {\n    if(message[i] >= 'a'\
    \ && message[i] <= 'z') message[i] = message[i] - 'a' + 'A';\n    else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') message[i] = message[i] - 'A' + 'a';\n    else\
    \ continue;\n    if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I'\
    \ || message[i] == 'O' || message[i] == 'U') message[i] = message[i] + 2;\n  \
    \  else if(message[i] == 'Y') message[i] = 'A';\n    else message[i] = message[i]\
    \ + 1;\n  }\n  return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsmplqbdo: /tmp/tmpsmplqbdo.cpp:27: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::transform(message.begin(),\
    \ message.end(), message.begin(), ::toupper);\n    std::string out = \"\";\n \
    \   std::string vowels = \"AEIOU\";\n    std::vector<char> vowelsVec;\n    for\
    \ (int i = 0; i < vowels.length(); i++) {\n        vowelsVec.push_back(vowels[i]);\n\
    \    }\n    for (int i = 0; i < message.length(); i++) {\n        if (std::find(vowelsVec.begin(),\
    \ vowelsVec.end(), message[i]) != vowelsVec.end()) {\n            int target =\
    \ vowels.find(message[i]) + 2;\n            out += vowels[target % vowels.length()];\n\
    \        } else {\n            out += message[i];\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpb562bbav: /tmp/tmpb562bbav.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (isupper(message[i])) {\n            if (message[i] == 'Z') {\n            \
    \    output += 'b';\n            } else if (message[i] == 'Y') {\n           \
    \     output += 'a';\n            } else {\n                output += (char) (message[i]\
    \ + 2);\n            }\n        } else if (islower(message[i])) {\n          \
    \  if (message[i] == 'z') {\n                output += 'B';\n            } else\
    \ if (message[i] == 'y') {\n                output += 'A';\n            } else\
    \ {\n                output += (char) (message[i] - 32 + 2);\n            }\n\
    \        } else {\n            output += message[i];\n        }\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgo3jp3by: /tmp/tmpgo3jp3by.cpp:40: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        message[i] = toupper(message[i]);\n\
    \    }\n    std::string vowels = \"AEIOU\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (message[i] == vowels[j]) {\n                int index = j + 2;\n          \
    \      if (index >= vowels.length()) {\n                    index -= vowels.length();\n\
    \                }\n                message[i] = vowels[index];\n            }\n\
    \        }\n    }\n    for (int i = 0; i < message.length(); i++) {\n        message[i]\
    \ = tolower(message[i]);\n    }\n    return message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpb5uvmms4: /tmp/tmpb5uvmms4.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::transform(message.begin(), message.end(), message.begin(),\
    \ ::toupper);\n    for (int i = 0; i < message.length(); i++) {\n        int num\
    \ = message[i];\n        if (num >= 65 && num <= 90) {\n            num += 2;\n\
    \            switch (num) {\n                case 65:\n                    num\
    \ = 69;\n                    break;\n                case 66:\n              \
    \      num = 70;\n                    break;\n                case 91:\n     \
    \               num = 65;\n                    break;\n                case 92:\n\
    \                    num = 66;\n                    break;\n            }\n  \
    \      }\n        result += (char)num;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpujcaqobd: /tmp/tmpujcaqobd.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // TODO\n\
    \    std::string s;\n    for(int i=0;i<message.length();i++)\n    {\n    \tif(message[i]=='a'||message[i]=='A')\n\
    \    \t\tmessage[i]='c';\n    \telse if(message[i]=='e'||message[i]=='E')\n  \
    \  \t\tmessage[i]='g';\n    \telse if(message[i]=='i'||message[i]=='I')\n    \t\
    \tmessage[i]='k';\n    \telse if(message[i]=='o'||message[i]=='O')\n    \t\tmessage[i]='q';\n\
    \    \telse if(message[i]=='u'||message[i]=='U')\n    \t\tmessage[i]='s';\n  \
    \  \telse if(message[i]=='y'||message[i]=='Y')\n    \t\tmessage[i]='a';\n    \t\
    else if(message[i]>='A'&&message[i]<='Z')\n    \t\tmessage[i]=message[i]+32;\n\
    \    \telse if(message[i]>='a'&&message[i]<='z')\n    \t\tmessage[i]=message[i]-32;\n\
    \    }\n    s=message;\n    return s;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8beatygk: /tmp/tmp8beatygk.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tint ch = message[i];\n\
    \t\tint ch_encoded;\n\t\tif (islower(ch)) {\n\t\t\tch_encoded = toupper(ch);\n\
    \t\t} else if (isupper(ch)) {\n\t\t\tch_encoded = tolower(ch);\n\t\t}\n\t\tif\
    \ (ch_encoded == 'A') {\n\t\t\tch_encoded = 'C';\n\t\t} else if (ch_encoded ==\
    \ 'E') {\n\t\t\tch_encoded = 'G';\n\t\t} else if (ch_encoded == 'I') {\n\t\t\t\
    ch_encoded = 'K';\n\t\t} else if (ch_encoded == 'O') {\n\t\t\tch_encoded = 'Q';\n\
    \t\t} else if (ch_encoded == 'U') {\n\t\t\tch_encoded = 'S';\n\t\t} else if (ch_encoded\
    \ == 'Y') {\n\t\t\tch_encoded = 'A';\n\t\t} else if (ch_encoded == 'C') {\n\t\t\
    \tch_encoded = 'E';\n\t\t} else if (ch_encoded == 'G') {\n\t\t\tch_encoded = 'I';\n\
    \t\t} else if (ch_encoded == 'K') {\n\t\t\tch_encoded = 'O';\n\t\t} else if (ch_encoded\
    \ == 'Q') {\n\t\t\tch_encoded = 'U';\n\t\t} else if (ch_encoded == 'S') {\n\t\t\
    \tch_encoded = 'Y';\n\t\t} else {\n\t\t\tch_encoded = ch;\n\t\t}\n\t\tresult +=\
    \ (char)ch_encoded;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpb7i1zi7b: /tmp/tmpb7i1zi7b.cpp:54: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            message[i] = message[i] - 'a' + 'A';\n        }\n   \
    \     else if (message[i] >= 'A' && message[i] <= 'Z') {\n            message[i]\
    \ = message[i] - 'A' + 'a';\n        }\n        else if (message[i] == 'a' ||\
    \ message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] ==\
    \ 'u') {\n            message[i] = 'C';\n        }\n        else if (message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            message[i] = 'c';\n        }\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp39s4hvui: /tmp/tmp39s4hvui.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096160
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u'};\n\tstd::string ret = \"\";\n\tfor (int i = 0; i\
    \ < message.length(); i++) {\n\t\tchar c = message[i];\n\t\tif (isupper(c)) {\n\
    \t\t\tc = tolower(c);\n\t\t} else if (islower(c)) {\n\t\t\tc = toupper(c);\n\t\
    \t}\n\n\t\tint j = 0;\n\t\twhile (j < 5) {\n\t\t\tif (c == vowels[j]) {\n\t\t\t\
    \tj++;\n\t\t\t\tif (j >= 5) {\n\t\t\t\t\tj = 0;\n\t\t\t\t}\n\t\t\t\tc = vowels[j];\n\
    \t\t\t\tj++;\n\t\t\t\tif (j >= 5) {\n\t\t\t\t\tj = 0;\n\t\t\t\t}\n\t\t\t\tc =\
    \ vowels[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tret += c;\n\t}\n\
    \treturn ret;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbqz91dpf: /tmp/tmpbqz91dpf.cpp:47: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::map<char, char> vowels = {\n        {'a', 'c'},\n        {'e',\
    \ 'g'},\n        {'i', 'k'},\n        {'o', 'q'},\n        {'u', 'w'},\n     \
    \   {'A', 'C'},\n        {'E', 'G'},\n        {'I', 'K'},\n        {'O', 'Q'},\n\
    \        {'U', 'W'}\n    };\n    for (char &ch: message) {\n        if (vowels.find(ch)\
    \ != vowels.end()) {\n            result += vowels[ch];\n        } else {\n  \
    \          result += ch;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpjjerm9a0: /tmp/tmpjjerm9a0.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'y';\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpa_9wbydl: /tmp/tmpa_9wbydl.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string result = \"\";\n  for (int i = 0; i < message.length();\
    \ i++) {\n    char to_add = message[i];\n    if (tolower(to_add) >= 'a' && tolower(to_add)\
    \ <= 'z') {\n      to_add = (tolower(to_add) + 13) % 26 + 'a';\n      if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n        to_add = toupper(to_add);\n      }\n\
    \    }\n    result += to_add;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpve_j_9is: /tmp/tmpve_j_9is.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (size_t i = 0;\
    \ i < message.length(); i++) {\n        if(isupper(message[i])){\n           \
    \ encoded += tolower(message[i]);\n        } else if(islower(message[i])){\n \
    \           encoded += toupper(message[i]);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (size_t i = 0; i < vowels.length();\
    \ i++) {\n        size_t nPos = encoded.find(vowels[i], 0);\n        while(nPos\
    \ != std::string::npos){\n            encoded[nPos] = ((vowels[i] - 'a' + 2) %\
    \ 26) + 'a';\n            nPos = encoded.find(vowels[i], nPos + 1);\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpzdxmjvoe: /tmp/tmpzdxmjvoe.cpp:37: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (isalpha(message[i])) {\n            if (isupper(message[i])) {\n\
    \                message[i] = tolower(message[i]);\n            } else {\n   \
    \             message[i] = toupper(message[i]);\n            }\n        }\n  \
    \      if (vowels.find(message[i]) != std::string::npos) {\n            if (vowels.find(message[i])\
    \ == 8) {\n                message[i] = 'a';\n            } else if (vowels.find(message[i])\
    \ == 9) {\n                message[i] = 'e';\n            } else if (vowels.find(message[i])\
    \ == 10) {\n                message[i] = 'i';\n            } else if (vowels.find(message[i])\
    \ == 11) {\n                message[i] = 'o';\n            } else if (vowels.find(message[i])\
    \ == 12) {\n                message[i] = 'u';\n            } else {\n        \
    \        message[i] = vowels[vowels.find(message[i]) + 2];\n            }\n  \
    \      }\n    }\n    return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpuccox29d: /tmp/tmpuccox29d.cpp:43: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096161
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ vowels = \"aeiou\";\n\tstd::string encoded = \"\";\n\tint size = message.size();\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tint idx = vowels.find(tolower(message[i]));\n\
    \t\tif (idx == std::string::npos) {\n\t\t\tencoded += isupper(message[i]) ? toupper(message[i]\
    \ + 2) : message[i] + 2;\n\t\t} else {\n\t\t\tencoded += isupper(message[i]) ?\
    \ toupper(vowels[(idx + 2) % 5]) : vowels[(idx + 2) % 5];\n\t\t}\n\t}\n\treturn\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpk3sx2isa: /tmp/tmpk3sx2isa.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ret = \"\";\n\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c == ' ') {\n            ret += c;\n          \
    \  continue;\n        }\n\n        bool isUpper = c >= 'A' && c <= 'Z';\n    \
    \    c = tolower(c);\n\n        if (c == 'a') {\n            c = 'c';\n      \
    \  } else if (c == 'e') {\n            c = 'g';\n        } else if (c == 'i')\
    \ {\n            c = 'k';\n        } else if (c == 'o') {\n            c = 'q';\n\
    \        } else if (c == 'u') {\n            c = 'y';\n        } else {\n    \
    \        c++;\n            c++;\n        }\n\n        if (isUpper) {\n       \
    \     c = toupper(c);\n        }\n\n        ret += c;\n    }\n\n    return ret;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp4vzei1b8: /tmp/tmp4vzei1b8.cpp:52: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  std::string encoded=\"\";\n  int\
    \ index;\n  for(int i=0;i<message.length();i++){\n    // Check if capital\n  \
    \  if(islower(message[i])){\n      // Convert to uppercase\n      message[i]=toupper(message[i]);\n\
    \    }\n    // Find index in alphabet\n    index=alphabet.find(message[i]);\n\
    \    // Check if vowel\n    if(index==0 || index==4 || index==8 || index==14 ||\
    \ index==20){\n      // Swap with 2 ahead\n      if(index==20){\n        encoded+=\"\
    B\";\n      }else{\n        encoded+=alphabet[index+2];\n      }\n    }else{\n\
    \      // Replace with char\n      encoded+=message[i];\n    }\n  }\n  return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8_4r0h4d: /tmp/tmp8_4r0h4d.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ rstr = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            rstr += std::toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            rstr\
    \ += std::tolower(message[i]);\n        } else {\n            rstr += message[i];\n\
    \        }\n    }\n    std::cout << rstr << std::endl;\n    // encode vowels\n\
    \    std::string vowels = \"aeiou\";\n    std::string cvowels = \"eioua\";\n \
    \   std::string output = \"\";\n    for (int i = 0; i < rstr.length(); i++) {\n\
    \        int j = 0;\n        for (; j < vowels.length(); j++) {\n            if\
    \ (vowels[j] == rstr[i]) {\n                output += cvowels[j];\n          \
    \      break;\n            }\n        }\n        if (j == vowels.length()) {\n\
    \            output += rstr[i];\n        }\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpkeb1t1q9: /tmp/tmpkeb1t1q9.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: 'test

    '
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ encoded_message;\n  std::string all_letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  std::string vowels = \"aeiou\";\n  std::map<char, int> vowels_map;\n  for\
    \ (int i = 0; i < vowels.size(); i++) {\n    vowels_map[vowels[i]] = i;\n  }\n\
    \  for (int i = 0; i < message.size(); i++) {\n    if (message[i] == ' ') {\n\
    \      encoded_message += ' ';\n      continue;\n    }\n    int offset = std::tolower(message[i])\
    \ - 'a';\n    if (std::isupper(message[i])) {\n      encoded_message += all_letters[offset];\n\
    \    } else {\n      encoded_message += std::toupper(all_letters[offset]);\n \
    \   }\n    if (vowels_map.find(std::tolower(message[i])) != vowels_map.end())\
    \ {\n      int letter_idx = vowels_map[std::tolower(message[i])];\n      encoded_message[i]\
    \ = std::tolower(vowels[(letter_idx + 2) % vowels.size()]);\n    }\n  }\n  return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps9nd20dj: /tmp/tmps9nd20dj.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (size_t\
    \ i = 0; i < message.size(); i++) {\n        if (message[i] >= 65 && message[i]\
    \ <= 90) {\n            message[i] += 32;\n        } else if (message[i] >= 97\
    \ && message[i] <= 122) {\n            message[i] -= 32;\n        }\n    }\n \
    \   std::string result;\n    for (char& c : message) {\n        switch (c) {\n\
    \            case 'a':\n                result += 'c';\n                break;\n\
    \            case 'e':\n                result += 'g';\n                break;\n\
    \            case 'i':\n                result += 'k';\n                break;\n\
    \            case 'o':\n                result += 'q';\n                break;\n\
    \            case 'u':\n                result += 'y';\n                break;\n\
    \            case 'A':\n                result += 'C';\n                break;\n\
    \            case 'E':\n                result += 'G';\n                break;\n\
    \            case 'I':\n                result += 'K';\n                break;\n\
    \            case 'O':\n                result += 'Q';\n                break;\n\
    \            case 'U':\n                result += 'Y';\n                break;\n\
    \            default:\n                result += c;\n                break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgxv3qisp: /tmp/tmpgxv3qisp.cpp:64: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::vector<char>\
    \ vowels;\n    vowels.push_back('a');\n    vowels.push_back('e');\n    vowels.push_back('i');\n\
    \    vowels.push_back('o');\n    vowels.push_back('u');\n    vowels.push_back('A');\n\
    \    vowels.push_back('E');\n    vowels.push_back('I');\n    vowels.push_back('O');\n\
    \    vowels.push_back('U');\n    int length = message.length();\n    for(int i\
    \ = 0; i < length; i++) {\n        if(message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            message[i] = message[i] - 32;\n        }\n        else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            message[i] = message[i] + 32;\n\
    \        }\n        else if(std::find(vowels.begin(), vowels.end(), message[i])\
    \ != vowels.end()) {\n            message[i] = message[i] + 2;\n        }\n  \
    \  }\n    return message;\n}\nint main() {\n    auto candidate = encode;\n   \
    \ assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp7qmc1nbu: /tmp/tmp7qmc1nbu.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    char letters[26]\
    \ = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            message[i] = toupper(message[i]);\n        }\n        else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            message[i] = tolower(message[i]);\n\
    \        }\n    }\n    for (int i = 0; i < message.length(); i++) {\n        for\
    \ (int j = 0; j < 26; j++) {\n            if (message[i] == letters[j]) {\n  \
    \              if (j < 24) {\n                    message[i] = letters[j + 2];\n\
    \                }\n                else if (j == 24) {\n                    message[i]\
    \ = letters[0];\n                }\n                else if (j == 25) {\n    \
    \                message[i] = letters[1];\n                }\n            }\n\
    \        }\n    }\n    return message;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpj4v8c0ce: /tmp/tmpj4v8c0ce.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (char c : message) {\n        char newChar = c;\n \
    \       if (isalpha(c)) {\n            newChar = toupper(c);\n            if (newChar\
    \ >= 'A' && newChar <= 'Z') {\n                if (newChar == 'A' || newChar ==\
    \ 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n             \
    \       newChar = (newChar + 2 - 'A') % 26 + 'A';\n                }\n       \
    \         else {\n                    newChar = (newChar + 1 - 'A') % 26 + 'A';\n\
    \                }\n            }\n            newChar = tolower(newChar);\n \
    \       }\n        encoded += newChar;\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpcpodqgus: /tmp/tmpcpodqgus.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        // If it's\
    \ lower case, make it upper case.\n        if (std::islower(message[i])) {\n \
    \           message[i] = std::toupper(message[i]);\n        }\n        // If it's\
    \ a vowel, shift it by 2.\n        if (message[i] == 'A' || message[i] == 'E'\
    \ || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n        \
    \    // If the vowel is U or Z, it wraps around to B or C.\n            if (message[i]\
    \ == 'U') {\n                message[i] = 'B';\n            } else if (message[i]\
    \ == 'Z') {\n                message[i] = 'C';\n            } else {\n       \
    \         message[i] += 2;\n            }\n        }\n        // Append the shifted\
    \ character.\n        result += message[i];\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmppf6e1fe_: /tmp/tmppf6e1fe_.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ msg = \"\";\n    int i = 0;\n    while(i < message.length()) {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            msg = msg + (char)((int)message[i]\
    \ - 32);\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      msg = msg + (char)((int)message[i] + 32);\n        } else {\n         \
    \   msg = msg + message[i];\n        }\n        i++;\n    }\n    i = 0;\n    while(i\
    \ < msg.length()) {\n        if(msg[i] == 'a' || msg[i] == 'e' || msg[i] == 'i'\
    \ || msg[i] == 'o' || msg[i] == 'u') {\n            if(msg[i] + 2 > 'u') {\n \
    \               msg[i] = (char)((int)msg[i] + 2 - 5);\n            } else {\n\
    \                msg[i] = (char)((int)msg[i] + 2);\n            }\n        }\n\
    \        i++;\n    }\n    return msg;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp12enmng8: /tmp/tmp12enmng8.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ans = \"\";\n    std::string tmp = \"\";\n    char vowels[5] = {'a', 'e', 'i',\
    \ 'o', 'u'};\n    char tmp_char;\n    std::transform(message.begin(), message.end(),\
    \ message.begin(), ::tolower);\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        tmp_char = message[i];\n        for (int j = 0; j < 5; j++) {\n \
    \           if (tmp_char == vowels[j]) {\n                tmp_char = vowels[(j\
    \ + 2) % 5];\n                break;\n            }\n        }\n        // if\
    \ (tmp_char == 'a') {\n        //     tmp_char = 'c';\n        // } else if (tmp_char\
    \ == 'e') {\n        //     tmp_char = 'g';\n        // } else if (tmp_char ==\
    \ 'i') {\n        //     tmp_char = 'k';\n        // } else if (tmp_char == 'o')\
    \ {\n        //     tmp_char = 'q';\n        // } else if (tmp_char == 'u') {\n\
    \        //     tmp_char = 'a';\n        // }\n        tmp = toupper(tmp_char);\n\
    \        ans = ans + tmp;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpww3t8utb: /tmp/tmpww3t8utb.cpp:45: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code here\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    for (char c : message) {\n        if (vowels.find(tolower(c)) != std::string::npos)\
    \ {\n            result += (char)((int)(c - 'a' + 2) % 26 + 'a');\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpiztqtrnl: /tmp/tmpiztqtrnl.cpp:28: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ alp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    std::string res;\n    for(char i:message){\n\
    \        int a;\n        if(isupper(i)){\n            a=alp.find(i);\n       \
    \     if(a<20){\n                res.push_back(alp[a+2]);\n            }\n   \
    \         else{\n                res.push_back(alp[a-20]);\n            }\n  \
    \      }\n        else if(islower(i)){\n            a=alp.find(toupper(i));\n\
    \            if(a<20){\n                res.push_back(tolower(alp[a+2]));\n  \
    \          }\n            else{\n                res.push_back(tolower(alp[a-20]));\n\
    \            }\n        }\n        else{\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplnz4s241: /tmp/tmplnz4s241.cpp:44: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encode_message = \"\";\n    std::transform(message.begin(), message.end(), message.begin(),\
    \ ::toupper);\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n                switch (message[i]) {\n                    case 'A':\n\
    \                        encode_message += 'C';\n                        break;\n\
    \                    case 'E':\n                        encode_message += 'G';\n\
    \                        break;\n                    case 'I':\n             \
    \           encode_message += 'K';\n                        break;\n         \
    \           case 'O':\n                        encode_message += 'M';\n      \
    \                  break;\n                    case 'U':\n                   \
    \     encode_message += 'Q';\n                        break;\n               \
    \     default:\n                        encode_message += (char)((int)message[i]\
    \ + 2);\n                        break;\n                }\n            }\n  \
    \      }\n    }\n    return encode_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9qeommzw: /tmp/tmp9qeommzw.cpp:46: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    for (size_t\
    \ i = 0; i < message.size(); i++) {\n        message[i] = std::toupper(message[i]);\n\
    \    }\n    for (size_t i = 0; i < message.size(); i++) {\n        switch (message[i])\
    \ {\n            case 'A': message[i] = 'C'; break;\n            case 'E': message[i]\
    \ = 'G'; break;\n            case 'I': message[i] = 'K'; break;\n            case\
    \ 'O': message[i] = 'Q'; break;\n            case 'U': message[i] = 'S'; break;\n\
    \            case 'Y': message[i] = 'A'; break;\n            default: message[i]\
    \ = std::tolower(message[i]); break;\n        }\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphsemun11: /tmp/tmphsemun11.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (char letter : message) {\n        if (letter\
    \ == 'a') {\n            encoded_message += 'c';\n        } else if (letter ==\
    \ 'A') {\n            encoded_message += 'C';\n        } else if (letter == 'e')\
    \ {\n            encoded_message += 'g';\n        } else if (letter == 'E') {\n\
    \            encoded_message += 'G';\n        } else if (letter == 'i') {\n  \
    \          encoded_message += 'k';\n        } else if (letter == 'I') {\n    \
    \        encoded_message += 'K';\n        } else if (letter == 'o') {\n      \
    \      encoded_message += 'q';\n        } else if (letter == 'O') {\n        \
    \    encoded_message += 'Q';\n        } else if (letter == 'u') {\n          \
    \  encoded_message += 's';\n        } else if (letter == 'U') {\n            encoded_message\
    \ += 'S';\n        } else if (std::isupper(letter)) {\n            encoded_message\
    \ += std::tolower(letter);\n        } else if (std::islower(letter)) {\n     \
    \       encoded_message += std::toupper(letter);\n        } else {\n         \
    \   encoded_message += letter;\n        }\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmply730i2d: /tmp/tmply730i2d.cpp:48: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    char *begin\
    \ = &message[0];\n    char *temp = begin;\n    int end_of_message = message.length();\n\
    \    std::string vowels = \"aeiou\";\n    while (begin < &message[end_of_message])\
    \ {\n        if (*begin >= 'a' && *begin <= 'z')\n            *begin -= 32;\n\
    \        begin++;\n    }\n    begin = temp;\n    while (begin < &message[end_of_message])\
    \ {\n        std::string::size_type pos = vowels.find(*begin);\n        if (pos\
    \ != std::string::npos) {\n            char to_encode = vowels[(pos + 2) % 5];\n\
    \            begin = &message.insert(begin, to_encode);\n            end_of_message++;\n\
    \            begin++;\n            begin = &message.erase(begin);\n          \
    \  end_of_message--;\n        }\n        begin++;\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzwv475q.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpxzwv475q.cpp:28:53: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(char*&, char&)\u2019\n   28 |       \
    \      begin = &message.insert(begin, to_encode);\n      |                   \
    \                                  ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxzwv475q.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basi"
  stdout: ''
  timestamp: 1660096162
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // write\
    \ your code here\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // TODO:\
    \ \n    // 1. define vowels\n    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded_message = \"\";\n    // 2. loop over each character in the message\n\
    \    for (char c : message) {\n        // 3. check if each character is upper\
    \ case or lower case \n        // 4. check if each character is a vowel\n    \
    \    // 5. if it is, then add the character after two ahead it to the encoded\
    \ message\n        // 6. else, add the character itself to the encoded message\n\
    \        if (std::isupper(c)) {\n            if (vowels.find(std::tolower(c))\
    \ != std::string::npos) {\n                int char_position = (int) c;\n    \
    \            int encoded_char_position = char_position + 2;\n                if\
    \ (encoded_char_position > 90) {\n                    encoded_char_position =\
    \ (encoded_char_position % 90) + 64;\n                }\n                char\
    \ encoded_char = (char) encoded_char_position;\n                encoded_message\
    \ += encoded_char;\n            } else {\n                encoded_message += c;\n\
    \            }\n        } else if (std::islower(c)) {\n            if (vowels.find(c)\
    \ != std::string::npos) {\n                int char_position = (int) c;\n    \
    \            int encoded_char_position = char_position + 2;\n                if\
    \ (encoded_char_position > 122) {\n                    encoded_char_position =\
    \ (encoded_char_position % 122) + 96;\n                }\n                char\
    \ encoded_char = (char) encoded_char_position;\n                encoded_message\
    \ += encoded_char;\n            } else {\n                encoded_message += c;\n\
    \            }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpftvf3vs5: /tmp/tmpftvf3vs5.cpp:54: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    message[i] ^= 1 << 5;\n    if (message[i]\
    \ == 'a') {\n      message[i] = 'c';\n    } else if (message[i] == 'e') {\n  \
    \    message[i] = 'g';\n    } else if (message[i] == 'i') {\n      message[i]\
    \ = 'k';\n    } else if (message[i] == 'o') {\n      message[i] = 'q';\n    }\
    \ else if (message[i] == 'u') {\n      message[i] = 's';\n    }\n  }\n  return\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsxpkzae6: /tmp/tmpsxpkzae6.cpp:33: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ newMessage = \"\";\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \    for (size_t i = 0; i < message.length(); i++) {\n        for (auto &vowel\
    \ : vowels) {\n            if (message[i] == vowel) {\n                newMessage\
    \ += message[i+2];\n            }\n        }\n        if (message[i] == ' ') {\n\
    \            newMessage += message[i];\n        }\n        if (isupper(message[i]))\
    \ {\n            newMessage += tolower(message[i]);\n        }\n        if (islower(message[i]))\
    \ {\n            newMessage += toupper(message[i]);\n        }\n    }\n    return\
    \ newMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpl5w37e_s: /tmp/tmpl5w37e_s.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  int i = 0;\n\
    \  while (message[i]) {\n    if (islower(message[i])) message[i] = toupper(message[i]);\n\
    \    else if (isupper(message[i])) message[i] = tolower(message[i]);\n    i++;\n\
    \  }\n  i = 0;\n  while (message[i]) {\n    switch (message[i]) {\n      case\
    \ 'A':\n        message[i] = 'C';\n        break;\n      case 'E':\n        message[i]\
    \ = 'G';\n        break;\n      case 'I':\n        message[i] = 'K';\n       \
    \ break;\n      case 'O':\n        message[i] = 'Q';\n        break;\n      case\
    \ 'U':\n        message[i] = 'S';\n        break;\n      case 'a':\n        message[i]\
    \ = 'c';\n        break;\n      case 'e':\n        message[i] = 'g';\n       \
    \ break;\n      case 'i':\n        message[i] = 'k';\n        break;\n      case\
    \ 'o':\n        message[i] = 'q';\n        break;\n      case 'u':\n        message[i]\
    \ = 's';\n        break;\n    }\n    i++;\n  }\n  return message;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpx663k8l1: /tmp/tmpx663k8l1.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ Code Goes Here\n    std::transform(message.begin(), message.end(), message.begin(),\
    \ ::toupper);\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'A' || message[i]\
    \ == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n \
    \               if (message[i] == 'U') {\n                    message[i] = 'A';\n\
    \                } else {\n                    message[i] += 2;\n            \
    \    }\n            } else {\n                message[i] += 1;\n            }\n\
    \        }\n    }\n    return message;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxuadtzvp: /tmp/tmpxuadtzvp.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // your\
    \ code goes here\n    std::string encodedMsg;\n    for(int i=0;i<message.length();i++){\n\
    \    \tif(message[i]>=65 && message[i]<=90){\n    \t\tencodedMsg.push_back(message[i]+32);\n\
    \    \t}\n    \telse if(message[i]>=97 && message[i]<=122){\n    \t\tencodedMsg.push_back(message[i]-32);\n\
    \    \t}\n    \telse{\n    \t\tencodedMsg.push_back(message[i]);\n    \t}\n  \
    \  }\n    std::cout<<encodedMsg<<std::endl;\n    for(int i=0;i<encodedMsg.length();i++){\n\
    \    \tif(encodedMsg[i]=='a'){\n    \t\tencodedMsg[i]='c';\n    \t}\n    \telse\
    \ if(encodedMsg[i]=='e'){\n    \t\tencodedMsg[i]='g';\n    \t}\n    \telse if(encodedMsg[i]=='i'){\n\
    \    \t\tencodedMsg[i]='k';\n    \t}\n    \telse if(encodedMsg[i]=='o'){\n   \
    \ \t\tencodedMsg[i]='q';\n    \t}\n    \telse if(encodedMsg[i]=='u'){\n    \t\t\
    encodedMsg[i]='y';\n    \t}\n    \telse if(encodedMsg[i]=='A'){\n    \t\tencodedMsg[i]='C';\n\
    \    \t}\n    \telse if(encodedMsg[i]=='E'){\n    \t\tencodedMsg[i]='G';\n   \
    \ \t}\n    \telse if(encodedMsg[i]=='I'){\n    \t\tencodedMsg[i]='K';\n    \t\
    }\n    \telse if(encodedMsg[i]=='O'){\n    \t\tencodedMsg[i]='Q';\n    \t}\n \
    \   \telse if(encodedMsg[i]=='U'){\n    \t\tencoded\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ryfl1hq.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmp7ryfl1hq.cpp:57:7: error: \u2018encoded\u2019 was not declared in this\
    \ scope; did you mean \u2018encode\u2019?\n   57 |       encoded\n      |    \
    \   ^~~~~~~\n      |       encode\n/tmp/tmp7ryfl1hq.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmp7ryfl1hq.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmp7ryfl1hq.cpp:28:43: note: to match\
    \ this \u2018{\u2019\n   28 |     for(int i=0;i<encodedMsg.length();i++){\n  \
    \    |                                           ^\n/tmp/tmp7ryfl1hq.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp7ryfl1hq.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmp7ryfl1hq.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660096162
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Replace\
    \ with your code\n    std::string out = \"\";\n    std::string consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    std::string vowels = \"aeiou\";\n    for (char &c\
    \ : message) {\n        if (c >= 'a' && c <= 'z') {\n            out += toupper(c);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            out += tolower(c);\n\
    \        } else {\n            out += c;\n        }\n    }\n    for (size_t i\
    \ = 0; i < out.size(); i++) {\n        for (char &v : vowels) {\n            if\
    \ (out[i] == v) {\n                int index = vowels.find(v);\n             \
    \   int next_index = (index + 2) % 5;\n                out[i] = vowels[next_index];\n\
    \            }\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpf1662ki6: /tmp/tmpf1662ki6.cpp:40: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code goes here\n    // std::cout << message << std::endl;\n    std::string result\
    \ = \"\";\n    std::vector<char> vowels {'a', 'e', 'i', 'o', 'u'};\n    std::unordered_map<char,\
    \ char> map = { {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'y'} };\n\
    \    for (size_t i = 0; i < message.size(); i++) {\n        char curr_char = message[i];\n\
    \        if (std::find(vowels.begin(), vowels.end(), curr_char) != vowels.end())\
    \ {\n            result.push_back(map[curr_char]);\n        } else if (curr_char\
    \ >= 'A' && curr_char <= 'Z') {\n            result.push_back(curr_char + ('a'\
    \ - 'A'));\n        } else if (curr_char >= 'a' && curr_char <= 'z') {\n     \
    \       result.push_back(curr_char - ('a' - 'A'));\n        } else {\n       \
    \     result.push_back(curr_char);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpthhp9jcf: /tmp/tmpthhp9jcf.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    /*\n  \
    \      Complete this function\n    */\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::map<char, char> char_map {\n        {'a',\
    \ 'c'},\n        {'A', 'C'},\n        {'e', 'g'},\n        {'E', 'G'},\n     \
    \   {'i', 'k'},\n        {'I', 'K'},\n        {'o', 'q'},\n        {'O', 'Q'},\n\
    \        {'u', 'w'},\n        {'U', 'W'},\n        {'y', 'a'},\n        {'Y',\
    \ 'A'}\n    };\n    for (char character : message) {\n        if (char_map.find(character)\
    \ != char_map.end()) {\n            encoded_message += char_map[character];\n\
    \        } else if (std::isupper(character)) {\n            encoded_message +=\
    \ std::tolower(character);\n        } else if (std::islower(character)) {\n  \
    \          encoded_message += std::toupper(character);\n        } else {\n   \
    \         encoded_message += character;\n        }\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpisas5fxw: /tmp/tmpisas5fxw.cpp:44: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        char currChar = message[i];\n        //\
    \ if the current character is in the vowels string\n        if (vowels.find(currChar)\
    \ != std::string::npos) {\n            // the new character is the one 2 places\
    \ ahead in the alphabet\n            int encIndex = (currChar - 'a' + 2) % vowels.length();\n\
    \            encodedMessage += vowels[encIndex];\n        } else {\n         \
    \   // if the current character is not a vowel\n            encodedMessage +=\
    \ currChar;\n        }\n    }\n    // char upperFirst = encodedMessage[0] - 32;\n\
    \    // encodedMessage = upperFirst + encodedMessage.substr(1);\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8i1spizx: /tmp/tmp8i1spizx.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  int vowels[26]={2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};\n\
    \  vowels['a'-'a']=0;\n  vowels['e'-'a']=0;\n  vowels['i'-'a']=0;\n  vowels['o'-'a']=0;\n\
    \  vowels['u'-'a']=0;\n  char ch;\n  for(int i=0;i<message.length();i++){\n  \
    \  ch=message[i];\n    if(ch>='a' && ch<='z'){\n      message[i]=message[i]-'a'+'A';\n\
    \    }\n    else if(ch>='A' && ch<='Z'){\n      message[i]=message[i]-'A'+'a';\n\
    \    }\n    else{\n      continue;\n    }\n    if(vowels[message[i]-'a']==0){\n\
    \      message[i]+=2;\n      if(message[i]>'z'){\n        message[i]-=26;\n  \
    \    }\n    }\n  }\n  return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxxpkg6yq: /tmp/tmpxxpkg6yq.cpp:44: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code goes here\n    int i;\n    std::string ans=\"\";\n    for(i=0;i<message.length();i++)\n\
    \    {\n        if(message[i]>='a' && message[i]<='z')\n        {\n          \
    \  if(message[i]=='a')\n            {\n                ans+='c';\n           \
    \ }\n            else if(message[i]=='e')\n            {\n                ans+='g';\n\
    \            }\n            else if(message[i]=='i')\n            {\n        \
    \        ans+='k';\n            }\n            else if(message[i]=='o')\n    \
    \        {\n                ans+='q';\n            }\n            else if(message[i]=='u')\n\
    \            {\n                ans+='y';\n            }\n            else\n \
    \           {\n                ans+=message[i]-32;\n            }\n        }\n\
    \        else if(message[i]>='A' && message[i]<='Z')\n        {\n            if(message[i]=='A')\n\
    \            {\n                ans+='C';\n            }\n            else if(message[i]=='E')\n\
    \            {\n                ans+='G';\n            }\n            else if(message[i]=='I')\n\
    \            {\n                ans+='K';\n            }\n            else if(message[i]=='O')\n\
    \            {\n                ans+='Q';\n            }\n            else if(message[i]=='U')\n\
    \            {\n                ans+='Y';\n            }\n            else\n \
    \           {\n                ans+=message[i]+32;\n            }\n        }\n\
    \        else\n        {\n            ans+=message[i];\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpga2nxukl: /tmp/tmpga2nxukl.cpp:82: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    char ch;\n    for (char ch : message) {\n        if (isalpha(ch))\
    \ {\n            if (islower(ch)) {\n                ch = toupper(ch);\n     \
    \       } else {\n                ch = tolower(ch);\n            }\n         \
    \   switch (ch) {\n                case 'A': \n                    ch = 'C';\n\
    \                    break;\n                case 'E':\n                    ch\
    \ = 'G';\n                    break;\n                case 'I':\n            \
    \        ch = 'K';\n                    break;\n                case 'O':\n  \
    \                  ch = 'M';\n                    break;\n                case\
    \ 'U':\n                    ch = 'Q';\n                    break;\n          \
    \      case 'a':\n                    ch = 'c';\n                    break;\n\
    \                case 'e':\n                    ch = 'g';\n                  \
    \  break;\n                case 'i':\n                    ch = 'k';\n        \
    \            break;\n                case 'o':\n                    ch = 'm';\n\
    \                    break;\n                case 'u':\n                    ch\
    \ = 'q';\n                    break;\n            }\n        }\n        result\
    \ += ch;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9yv_lyfr: /tmp/tmp9yv_lyfr.cpp:63: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  // TODO:\
    \ Implement this function.\n  for(int i=0;i<message.length();i++)\n  {\n    if(message[i]>='a'\
    \ && message[i]<='z')\n    {\n      message[i]=message[i]-'a'+'A';\n    }\n  \
    \  else if(message[i]>='A' && message[i]<='Z')\n    {\n      message[i]=message[i]-'A'+'a';\n\
    \    }\n    if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o'\
    \ || message[i]=='u')\n    {\n      message[i]=message[i]+2;\n    }\n    else\
    \ if(message[i]=='y')\n    {\n      message[i]='a';\n    }\n    else if(message[i]=='z')\n\
    \    {\n      message[i]='b';\n    }\n    else if(message[i]=='A' || message[i]=='E'\
    \ || message[i]=='I' || message[i]=='O' || message[i]=='U')\n    {\n      message[i]=message[i]+2;\n\
    \    }\n    else if(message[i]=='Y')\n    {\n      message[i]='A';\n    }\n  \
    \  else if(message[i]=='Z')\n    {\n      message[i]='B';\n    }\n  }\n  return\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp87_lbtxc: /tmp/tmp87_lbtxc.cpp:56: int main(): Assertion `candidate(("YES"))
    == ("ygs")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // this\
    \ is an example of how to use an array\n    char vowels[] = {'a', 'e', 'i', 'o',\
    \ 'u'};\n    char *vowels_begin = vowels;\n    char *vowels_end = vowels + 5;\n\
    \    for (char *p = vowels_begin; p != vowels_end; ++p) {\n        std::cout <<\
    \ *p << ' ';\n    }\n    std::cout << '\\n';\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0n5ajl9w: /tmp/tmp0n5ajl9w.cpp:26: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tint len =\
    \ message.length();\n\tchar a = 'a';\n\tchar z = 'z';\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tchar x = message[i];\n\t\tif (x >= a && x <= z) {\n\t\t\tif (x ==\
    \ 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u') {\n\t\t\t\tx = x + 2;\n\
    \t\t\t\tif (x > z) {\n\t\t\t\t\tx = x - 26;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tx = x - 32;\n\t\t\t}\n\t\t}\n\t\tmessage[i] = x;\n\t}\n\treturn message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgzdb6wzl: /tmp/tmpgzdb6wzl.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  for (int\
    \ i = 0; i < message.length(); i++) {\n    if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n      message[i] = toupper(message[i]);\n    } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n      message[i] = tolower(message[i]);\n  \
    \  }\n  }\n  std::map<char, char> vowels = {{'a', 'c'}, {'e', 'g'}, {'i', 'k'},\
    \ {'o', 'q'}, {'u', 'w'}};\n  for (int i = 0; i < message.length(); i++) {\n \
    \   if (vowels.find(message[i]) != vowels.end()) {\n      message[i] = vowels[message[i]];\n\
    \    }\n  }\n  return message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpmrcm6sn4: /tmp/tmpmrcm6sn4.cpp:32: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       int c = message[i];\n        if (c >= 'a' && c <= 'z') {\n           \
    \ c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n           \
    \ c = c - 'A' + 'a';\n        } else {\n            continue;\n        }\n   \
    \     char vowel = message[i];\n        if (vowel == 'a' || vowel == 'A') {\n\
    \            vowel = 'c';\n        } else if (vowel == 'e' || vowel == 'E') {\n\
    \            vowel = 'g';\n        } else if (vowel == 'i' || vowel == 'I') {\n\
    \            vowel = 'k';\n        } else if (vowel == 'o' || vowel == 'O') {\n\
    \            vowel = 'm';\n        } else if (vowel == 'u' || vowel == 'U') {\n\
    \            vowel = 'q';\n        }\n        encodedMessage += vowel;\n    }\n\
    \    return encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqxio3u0b: /tmp/tmpqxio3u0b.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096163
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// char[]\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n\tchar vowels[] = {'a', 'e', 'i', 'o',\
    \ 'u'};\n\tint n = message.length();\n\tfor (int i = 0; i < n; i++) {\n\t\t//\
    \ check if vowel\n\t\tif (message[i] == 'a' || message[i] == 'e' || message[i]\
    \ == 'i' ||\n\t\t\tmessage[i] == 'o' || message[i] == 'u') {\n\t\t\t// find 2\
    \ places ahead\n\t\t\tint ascii = (int) message[i];\n\t\t\tmessage[i] = (char)\
    \ (ascii + 2);\n\t\t} else if (message[i] == 'z') {\n\t\t\tmessage[i] = 'b';\n\
    \t\t} else if (message[i] == 'y') {\n\t\t\tmessage[i] = 'a';\n\t\t} else {\n\t\
    \t\t// TODO: check for capital letters here\n\t\t\tint ascii = (int) message[i];\n\
    \t\t\tmessage[i] = (char) (ascii + 1);\n\t\t}\n\t}\n\t// std::cout << message\
    \ << std::endl;\n\treturn message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpraprnyig: /tmp/tmpraprnyig.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    int c =\
    \ 0;\n    for (int i = 0; i < message.length(); i++) {\n        c = message[i];\n\
    \        // if its letter\n        if ((c >= 65 && c <= 90) || (c >= 97 && c <=\
    \ 122)) {\n            // if it is lower case letter\n            if (c >= 97\
    \ && c <= 122) {\n                c -= 32;\n            }\n            // if its\
    \ vowel\n            if (c == 65 || c == 69 || c == 73 || c == 79 || c == 85)\
    \ {\n                c += 2;\n            }\n            // if its Z or z\n  \
    \          else if (c == 90 || c == 122) {\n                c -= 24;\n       \
    \     }\n            else {\n                c += 1;\n            }\n        }\n\
    \        message[i] = c;\n    }\n    return message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpk85q40l4: /tmp/tmpk85q40l4.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ ans = \"\";\n    std::string vowels = \"aeiou\";\n    int n = message.length();\n\
    \    for(int i = 0; i < n; i++) {\n        if(std::isupper(message[i])) {\n  \
    \          ans += std::tolower(message[i]);\n        } else if(std::islower(message[i]))\
    \ {\n            ans += std::toupper(message[i]);\n        } else {\n        \
    \    ans += message[i];\n        }\n    }\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = 0; j < 5; j++) {\n            if(ans[i] == vowels[j]) {\n\
    \                ans[i] = vowels[(j + 2) % 5];\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6kp_wrbe: /tmp/tmp6kp_wrbe.cpp:37: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  char replace;\n\
    \  std::string encode;\n  for (int i = 0; i < message.length(); i++) {\n    if\
    \ (isupper(message[i])) {\n      replace = tolower(message[i]);\n    } else {\n\
    \      replace = toupper(message[i]);\n    }\n    if (replace == 'a') {\n    \
    \  encode += 'c';\n    } else if (replace == 'e') {\n      encode += 'g';\n  \
    \  } else if (replace == 'i') {\n      encode += 'k';\n    } else if (replace\
    \ == 'o') {\n      encode += 'q';\n    } else if (replace == 'u') {\n      encode\
    \ += 'y';\n    } else {\n      encode += replace;\n    }\n  }\n  return encode;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpmhrm4ahr: /tmp/tmpmhrm4ahr.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ ret;\n\tchar c;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tc = message[i];\n\
    \t\tif (c >= 'a' && c <= 'z') {\n\t\t\tc -= 32;\n\t\t} else if (c >= 'A' && c\
    \ <= 'Z') {\n\t\t\tc += 32;\n\t\t}\n\t\tswitch (c) {\n\t\t\tcase 'A':\n\t\t\t\t\
    c = 'C';\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tc = 'G';\n\t\t\t\tbreak;\n\t\
    \t\tcase 'I':\n\t\t\t\tc = 'K';\n\t\t\t\tbreak;\n\t\t\tcase 'O':\n\t\t\t\tc =\
    \ 'Q';\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tc = 'S';\n\t\t\t\tbreak;\n\t\t\
    \tcase 'a':\n\t\t\t\tc = 'c';\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\tc = 'g';\n\
    \t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tc = 'k';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 'o':\n\t\t\t\tc = 'q';\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tc = 's';\n\t\
    \t\t\tbreak;\n\t\t}\n\t\tret += c;\n\t}\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgn5xxhtg: /tmp/tmpgn5xxhtg.cpp:62: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            output += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            output += message[i] - 'A' + 'a';\n        } else {\n           \
    \ output += message[i];\n        }\n    }\n    for (int i = 0; i < output.length();\
    \ i++) {\n        if (output[i] == 'a' || output[i] == 'e' || output[i] == 'i'\
    \ ||\n            output[i] == 'o' || output[i] == 'u') {\n            output[i]\
    \ = output[i] + 2;\n        } else if (output[i] == 'c' || output[i] == 'd' ||\
    \ output[i] == 'f' ||\n                   output[i] == 'g' || output[i] == 'h'\
    \ || output[i] == 'j' ||\n                   output[i] == 'k' || output[i] ==\
    \ 'l' || output[i] == 'm' ||\n                   output[i] == 'n' || output[i]\
    \ == 'p' || output[i] == 'q' ||\n                   output[i] == 'r' || output[i]\
    \ == 's' || output[i] == 't' ||\n                   output[i] == 'v' || output[i]\
    \ == 'w' || output[i] == 'x' ||\n                   output[i] == 'y' || output[i]\
    \ == 'z') {\n            output[i] = output[i] + 1;\n        }\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbdihwyj9: /tmp/tmpbdihwyj9.cpp:42: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (char c : message)\
    \ {\n        if (vowels.find(tolower(c)) != std::string::npos) {\n           \
    \ result += (char)((int)c + 2);\n        } else {\n            result += (char)((int)c);\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] > 90) {\n            result[i] = (char)((int)result[i] - 26);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps9tufwnr: /tmp/tmps9tufwnr.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    std::vector<char> alphabets = {\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'\n    };\n    std::vector<char> vowels = {\n        'a',\
    \ 'e', 'i', 'o', 'u'\n    };\n    std::vector<char> consonants = {\n        'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'\n    };\n    for (char i : message) {\n        if (std::find(alphabets.begin(),\
    \ alphabets.end(), i) != alphabets.end()) {\n            if (std::find(vowels.begin(),\
    \ vowels.end(), i) != vowels.end()) {\n                int index = std::find(vowels.begin(),\
    \ vowels.end(), i) - vowels.begin();\n                int outputIndex = index\
    \ + 2;\n                if (outputIndex > 4) {\n                    outputIndex\
    \ -= 5;\n                }\n                encoded += vowels[outputIndex];\n\
    \            } else if (std::find(consonants.begin(), consonants.end(), i) !=\
    \ consonants.end()) {\n                int index = std::find(consonants.begin(),\
    \ consonants.end(), i) - consonants.begin();\n                int outputIndex\
    \ = index + 2;\n                if (outputIndex > 20) {\n                    outputIndex\
    \ -= 21;\n                }\n                encoded += consonants[outputIndex];\n\
    \            }\n        } else {\n            if (i == ' ') {\n              \
    \  encoded += ' ';\n            } else {\n                if (i >= 'A' && i <=\
    \ 'Z') {\n                    encoded += i + ('a' - 'A');\n\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4aeu3d69.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmp4aeu3d69.cpp:49:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   49 | int main() {\n      |            ^\n/tmp/tmp4aeu3d69.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp4aeu3d69.cpp:44:20:\
    \ note: to match this \u2018{\u2019\n   44 |             } else {\n      |   \
    \                 ^\n/tmp/tmp4aeu3d69.cpp:56:1: error: expected \u2018}\u2019\
    \ at end of input\n   56 | }\n      | ^\n/tmp/tmp4aeu3d69.cpp:41:16: note: to\
    \ match this \u2018{\u2019\n   41 |         } else {\n      |                ^\n\
    /tmp/tmp4aeu3d69.cpp:56:1: error: expected \u2018}\u2019 at end of input\n   56\
    \ | }\n      | ^\n/tmp/tmp4aeu3d69.cpp:24:28: note: to match this \u2018{\u2019\
    \n   24 |     for (char i : message) {\n      |                            ^\n\
    /tmp/tmp4aeu3d69.cpp:56:1: error: expected \u2018}\u2019 at end of input\n   56\
    \ | }\n      | ^\n/tmp/tmp4aeu3d69.cpp:13:41: note: to match this \u2018{\u2019\
    \n   13 | std::string encode(std::string message) {\n      |                 \
    \                        ^\n/tmp/tmp4aeu3d69.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   56 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ vowel = \"aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (vowel.find(message[i])\
    \ != std::string::npos) {\n\t\t\tmessage[i] = vowel[(vowel.find(message[i]) +\
    \ 2) % 5];\n\t\t} else {\n\t\t\tmessage[i] = message[i] + 32;\n\t\t}\n\t}\n\t\
    return message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxbdskhl1: /tmp/tmpxbdskhl1.cpp:26: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ res = \"\";\n  std::string vowels = \"aeiou\";\n  for (char c : message) {\n\
    \    int n = (int)c;\n    if (isupper(c)) {\n      res += (char)tolower(c);\n\
    \    } else if (islower(c)) {\n      res += (char)toupper(c);\n    } else {\n\
    \      res += c;\n    }\n    for (char v : vowels) {\n      if (c == v) {\n  \
    \      c = (c + 2) % 122;\n        res += c;\n      }\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpm8zugd1b: /tmp/tmpm8zugd1b.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    const std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isalpha(message[i])) {\n            if (isupper(message[i])) {\n    \
    \            message[i] = tolower(message[i]);\n            } else {\n       \
    \         message[i] = toupper(message[i]);\n            }\n            if (vowels.find(message[i])\
    \ != std::string::npos) {\n                message[i] = vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n            }\n        }\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpym7q8ogx: /tmp/tmpym7q8ogx.cpp:31: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    std::unordered_map<char,char> char_map;\n    char_map['a']\
    \ = 'c';\n    char_map['e'] = 'g';\n    char_map['i'] = 'k';\n    char_map['o']\
    \ = 'q';\n    char_map['u'] = 'w';\n    char_map['y'] = 'a';\n    char_map['A']\
    \ = 'C';\n    char_map['E'] = 'G';\n    char_map['I'] = 'K';\n    char_map['O']\
    \ = 'Q';\n    char_map['U'] = 'W';\n    char_map['Y'] = 'A';\n    for (char c\
    \ : message) {\n        if (char_map.find(c) != char_map.end()) {\n          \
    \  output += char_map[c];\n        } else {\n            output += c;\n      \
    \  }\n    }\n    return output;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpv77n2cgh: /tmp/tmpv77n2cgh.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // TODO:\
    \ Your code here\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \    std::string ret;\n    for (auto& i : message) {\n        if (std::isalpha(i))\
    \ {\n            if (std::isupper(i)) {\n                i = std::tolower(i);\n\
    \            }\n            bool found = false;\n            for (auto& j : vowels)\
    \ {\n                if (i == j) {\n                    int index = j - 'a';\n\
    \                    if (index == 21) {\n                        index = -1;\n\
    \                    }\n                    ret += j + 2;\n                  \
    \  found = true;\n                    break;\n                }\n            }\n\
    \            if (!found) {\n                ret += i;\n            }\n       \
    \ } else {\n            ret += i;\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2cldh459: /tmp/tmp2cldh459.cpp:46: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  // this is\
    \ a place holder function\n  return \"TGST\";\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpnpka0qdf: /tmp/tmpnpka0qdf.cpp:19: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Notes:\n\
    \    // 1) Make it so it only uses alphabets, not numbers or special characters.\n\
    \    // 2) convert to all lowercase / uppercase, to make it easier to do string\n\
    \    //    searches.\n    // 3) could use a map for vowels.\n    // 4) could use\
    \ an array for the alphabet.\n    // Approach:\n    // 1) convert string to all\
    \ lowercase / uppercase\n    // 2) iterate through the string, swap case of the\
    \ letters\n    // 3) iterate through the string, search for vowels, if vowel is\
    \ found,\n    //    replace with the letter 2 ahead of it in the alphabet.\n \
    \   // 4) return new string.\n    // Notes:\n    // 1) if we are swapping case\
    \ anyways, don't bother doing it twice.\n    // 2) we can do a search for both\
    \ vowel lower and upper case by making\n    //    the string to lowercase / uppercase\
    \ beforehand.\n    // 3) Start out with a naive approach and get it working, then\
    \ think\n    //    about how we can make it more efficient.  One way to make it\n\
    \    //    more efficient is by using the alphabet string to search for\n    //\
    \    vowels and their replacements.\n    // 4) We can increase performance by\
    \ using an array for the alphabet.\n    //    This will make the search for vowels,\
    \ and the letters 2 ahead\n    //    of them, much easier and faster.  We can\
    \ use the index as the\n    //    offset to move ahead.\n    // 5) Another way\
    \ to improve performance is to make use of our knowledge\n    //    of the english\
    \ alphabet, and hard code it in our solution.  This\n    //    approach would\
    \ be to hard code the 26 letters of the alphabet, and\n    //    use the index\
    \ of the letter we are on to get the letter that\n    //    is 2 indexes ahead\
    \ of it.  This way we don't have to search the\n    //    alphabet string.\n \
    \   // 6) This solution can be done in one pass through the string.\n    // 7)\
    \ We can hard code the english alphabet in the solution, or we can\n    //   \
    \ use a function to create it and pass it in.  I'll use a function\n    //   \
    \ so I can easily\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string output = \"\";\n  for (char c : message)\
    \ {\n    bool isUpper = 'A' <= c && c <= 'Z';\n    char lower = tolower(c);\n\
    \    bool isVowel = vowels.find(lower) != std::string::npos;\n    if (isVowel)\
    \ {\n      int index = (vowels.find(lower) + 2) % vowels.size();\n      output\
    \ += isUpper ? toupper(vowels[index]) : vowels[index];\n    } else {\n      output\
    \ += isUpper ? toupper(lower) : lower;\n    }\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmppnusk27g: /tmp/tmppnusk27g.cpp:31: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage;\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage\
    \ += tolower(message[i]);\n        } else {\n            encodedMessage += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encodedMessage.length(); i++) {\n \
    \       if (encodedMessage[i] == 'a') {\n            encodedMessage[i] = 'c';\n\
    \        } else if (encodedMessage[i] == 'e') {\n            encodedMessage[i]\
    \ = 'g';\n        } else if (encodedMessage[i] == 'i') {\n            encodedMessage[i]\
    \ = 'k';\n        } else if (encodedMessage[i] == 'o') {\n            encodedMessage[i]\
    \ = 'q';\n        } else if (encodedMessage[i] == 'u') {\n            encodedMessage[i]\
    \ = 'w';\n        } else if (encodedMessage[i] == 'A') {\n            encodedMessage[i]\
    \ = 'C';\n        } else if (encodedMessage[i] == 'E') {\n            encodedMessage[i]\
    \ = 'G';\n        } else if (encodedMessage[i] == 'I') {\n            encodedMessage[i]\
    \ = 'K';\n        } else if (encodedMessage[i] == 'O') {\n            encodedMessage[i]\
    \ = 'Q';\n        } else if (encodedMessage[i] == 'U') {\n            encodedMessage[i]\
    \ = 'W';\n        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    int size\
    \ = message.size();\n    std::string result = \"\";\n    char temp = 0;\n    for\
    \ (int i = 0; i < size; i++) {\n        temp = message[i];\n        // std::cout\
    \ << \"temp = \" << temp << std::endl;\n        if (isupper(temp)) {\n       \
    \     temp = tolower(temp);\n            result += temp;\n        } else if (islower(temp))\
    \ {\n            temp = toupper(temp);\n            result += temp;\n        }\
    \ else {\n            result += temp;\n        }\n    }\n    size = result.size();\n\
    \    for (int i = 0; i < size; i++) {\n        temp = result[i];\n        if (temp\
    \ == 'a') {\n            result[i] = 'c';\n        } else if (temp == 'e') {\n\
    \            result[i] = 'g';\n        } else if (temp == 'i') {\n           \
    \ result[i] = 'k';\n        } else if (temp == 'o') {\n            result[i] =\
    \ 'q';\n        } else if (temp == 'u') {\n            result[i] = 'y';\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpp5p53_xk: /tmp/tmpp5p53_xk.cpp:50: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    int i =\
    \ 0;\n    while (message[i] != '\\0') {\n        if (isupper(message[i])) {\n\
    \            message[i] = tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            message[i] = toupper(message[i]);\n        }\n        if (message[i]\
    \ == 'a') {\n            message[i] = 'c';\n        } else if (message[i] == 'e')\
    \ {\n            message[i] = 'g';\n        } else if (message[i] == 'i') {\n\
    \            message[i] = 'k';\n        } else if (message[i] == 'o') {\n    \
    \        message[i] = 'q';\n        } else if (message[i] == 'u') {\n        \
    \    message[i] = 'y';\n        }\n        i++;\n    }\n    return message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmprkivqpti: /tmp/tmprkivqpti.cpp:39: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tchar vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u'};\n\tstd::vector<char> vowels_vector(vowels, vowels\
    \ + 5);\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n\t\t\tmessage[i] -= 32;\n\t\t}\n\t\tif (std::find(vowels_vector.begin(),\
    \ vowels_vector.end(), message[i]) != vowels_vector.end()) {\n\t\t\tif (message[i]\
    \ == 'U') {\n\t\t\t\tmessage[i] = 'A';\n\t\t\t} else {\n\t\t\t\tmessage[i] +=\
    \ 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpodk8yyt4: /tmp/tmpodk8yyt4.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ str = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar ch = message[i];\n\
    \t\tif (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n\t\t\
    \tch = ch + 2;\n\t\t}\n\t\tif (ch == 'Z') {\n\t\t\tch = 'B';\n\t\t}\n\t\tif (ch\
    \ == 'Y') {\n\t\t\tch = 'A';\n\t\t}\n\t\tif (ch == 'a' || ch == 'e' || ch == 'i'\
    \ || ch == 'o' || ch == 'u') {\n\t\t\tch = ch + 2;\n\t\t}\n\t\tif (ch == 'z')\
    \ {\n\t\t\tch = 'b';\n\t\t}\n\t\tif (ch == 'y') {\n\t\t\tch = 'a';\n\t\t}\n\t\t\
    if (ch >= 'A' && ch <= 'Z') {\n\t\t\tch = ch + 32;\n\t\t}\n\t\telse if (ch >=\
    \ 'a' && ch <= 'z') {\n\t\t\tch = ch - 32;\n\t\t}\n\t\tstr += ch;\n\t}\n\treturn\
    \ str;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpt5cl90pl: /tmp/tmpt5cl90pl.cpp:49: int main(): Assertion `candidate(("YES"))
    == ("ygs")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    assert(message.length()\
    \ <= 100);\n    assert(message.length() > 0);\n    // loop over string\n    std::string\
    \ result;\n    std::string alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char current_letter = message[i];\n\
    \        if(current_letter == ' ') {\n            result.push_back(' ');\n   \
    \         continue;\n        }\n        if(current_letter >= 'A' && current_letter\
    \ <= 'Z') {\n            result.push_back(current_letter + 32);\n            continue;\n\
    \        }\n        if(current_letter >= 'a' && current_letter <= 'z') {\n   \
    \         int index = alpha.find(current_letter);\n            if(index == 25)\
    \ {\n                result.push_back('b');\n            } else if(index == 24)\
    \ {\n                result.push_back('a');\n            } else {\n          \
    \      result.push_back(alpha[index + 2]);\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpkmlipelb: /tmp/tmpkmlipelb.cpp:44: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    int len = message.length();\n    char c;\n    for(int i = 0; i\
    \ < len; i++) {\n        c = message[i];\n        if(isupper(c)) {\n         \
    \   c = tolower(c);\n            encoded.push_back(c);\n        } else if(islower(c))\
    \ {\n            c = toupper(c);\n            encoded.push_back(c);\n        }\
    \ else {\n            encoded.push_back(c);\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpfz5ux94u: /tmp/tmpfz5ux94u.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660096164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    // Your\
    \ code goes here\n    std::string encoded_string = \"\";\n    std::unordered_map<char,\
    \ char> map_vowels = {{'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'}};\n\
    \    for (char ch : message) {\n        if (ch == ' ') {\n            encoded_string\
    \ += ch;\n            continue;\n        }\n        // converting to lower to\
    \ check if current char is a vowel\n        char lower = (ch >= 'A' && ch <= 'Z')\
    \ ? char(ch + 32) : ch;\n        if (map_vowels.find(lower) != map_vowels.end())\
    \ {\n            encoded_string += map_vowels[lower];\n        } else {\n    \
    \        char swap = (ch >= 'A' && ch <= 'Z') ? char(ch + 32) : char(ch - 32);\n\
    \            encoded_string += swap;\n        }\n    }\n    return encoded_string;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptjwd7hrd: /tmp/tmptjwd7hrd.cpp:36: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\t// TODO\n\
    \tint len = message.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (message[i]\
    \ >= 65 && message[i] <= 90) {\n\t\t\tmessage[i] = message[i] + 32;\n\t\t}\n\t\
    \telse if (message[i] >= 97 && message[i] <= 122) {\n\t\t\tmessage[i] = message[i]\
    \ - 32;\n\t\t}\n\t\telse {\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor (int i = 0; i <\
    \ len; i++) {\n\t\tif (message[i] == 'a') {\n\t\t\tmessage[i] = 'c';\n\t\t}\n\t\
    \telse if (message[i] == 'e') {\n\t\t\tmessage[i] = 'g';\n\t\t}\n\t\telse if (message[i]\
    \ == 'i') {\n\t\t\tmessage[i] = 'k';\n\t\t}\n\t\telse if (message[i] == 'o') {\n\
    \t\t\tmessage[i] = 'q';\n\t\t}\n\t\telse if (message[i] == 'u') {\n\t\t\tmessage[i]\
    \ = 'y';\n\t\t}\n\t\telse if (message[i] == 'A') {\n\t\t\tmessage[i] = 'C';\n\t\
    \t}\n\t\telse if (message[i] == 'E') {\n\t\t\tmessage[i] = 'G';\n\t\t}\n\t\telse\
    \ if (message[i] == 'I') {\n\t\t\tmessage[i] = 'K';\n\t\t}\n\t\telse if (message[i]\
    \ == 'O') {\n\t\t\tmessage[i] = 'Q';\n\t\t}\n\t\telse if (message[i] == 'U') {\n\
    \t\t\tmessage[i] = 'Y';\n\t\t}\n\t\telse {\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn\
    \ message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1m02s3hj: /tmp/tmp1m02s3hj.cpp:67: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660096165
