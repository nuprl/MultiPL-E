name: HumanEval_13_greatest_common_divisor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
  \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
  // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
  \ a, long b) {\n"
tests: "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
  \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
  \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
completions: ["\tif (a < b) {\n\t\treturn greatest_common_divisor(b, a);\n\t}\n\t\
    if (b == 0) {\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a % b);",
  "    //assert(a != 0 and b != 0);\n    if(a<b)\n        return greatest_common_divisor(b,a);\n\
    \    while(a%b!=0)\n    {\n        long temp = a%b;\n        a = b;\n        b\
    \ = temp;\n    }\n    return b;", "    long c;\n    while ( a != 0 ) {\n     \
    \   c = a; a = b%a;  b = c;\n    }\n    return b;", "  if (a == 0) {\n    return\
    \ b;\n  } else if (b == 0) {\n    return a;\n  } else if (a >= b) {\n    return\
    \ greatest_common_divisor(a % b, b);\n  } else {\n    return greatest_common_divisor(a,\
    \ b % a);\n  }", "    assert(a >= 0 && b >= 0);\n    // Write your code here.\n\
    \    long long int i,j,k;\n    for(i=a;i>0;i--)\n    {\n        if(a%i==0 && b%i==0)\n\
    \        {\n            k=i;\n            break;\n        }\n    }\n    return\
    \ k;", "    // edge case: a and b must be non-negative\n    assert(a >= 0 && b\
    \ >= 0);\n    long aa = a;\n    long bb = b;\n    long temp;\n    while (aa !=\
    \ 0) {\n        temp = aa;\n        aa = bb % aa;\n        bb = temp;\n    }\n\
    \    return bb;", "    long m = a, n = b;\n    while (m != n) {\n        if (m\
    \ > n) {\n            m = m - n;\n        } else {\n            n = n - m;\n \
    \       }\n    }\n    return m;", "    if (a == 0) {\n        return b;\n    }\n\
    \    if (b == 0) {\n        return a;\n    }\n    if (a == b) {\n        return\
    \ a;\n    }\n    long m = std::max(a, b);\n    long n = std::min(a, b);\n    if\
    \ (m % n == 0) {\n        return n;\n    }\n    return greatest_common_divisor(n,\
    \ m % n);", "  if (a == 0) {\n    return b;\n  } else if (b == 0) {\n    return\
    \ a;\n  } else if (a >= b) {\n    return greatest_common_divisor(a % b, b);\n\
    \  } else {\n    return greatest_common_divisor(a, b % a);\n  }", "    while (a\
    \ != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n  \
    \          b = b - a;\n        }\n    }\n    return a;", "\tassert(a >= 1 && b\
    \ >= 1);\n\tif (a == 1 || b == 1) {\n\t\treturn 1;\n\t}\n\tif (a == b) {\n\t\t\
    return a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a - b, b);\n\
    \t}\n\treturn greatest_common_divisor(a, b - a);", "    if (a < b) {\n       \
    \ std::swap(a, b);\n    }\n    if (b == 0) {\n        return a;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);", "    assert(a > 0 && b > 0);\n    if (a\
    \ > b) std::swap(a, b);\n    // std::cout << \"greatest_common_divisor is \" <<\
    \ b%a << \"\\n\";\n    // std::cout << \"a is \" << a << \"\\n\";\n    if (a ==\
    \ 0) return b;\n    else return greatest_common_divisor(b%a, a);", "    assert(a\
    \ >= 0 && b >= 0);\n    if (a == 0 || b == 0) {\n        return a + b;\n    }\n\
    \    if (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return\
    \ greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);", "    while (b) {\n        long tmp = a;\n        a = b;\n        b\
    \ = tmp % b;\n    }\n    return a;", "    if (a<b) {\n        std::swap(a, b);\n\
    \    }\n    if (b==0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a%b);", "\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\
    \t}\n\tlong c = a % b;\n\treturn greatest_common_divisor(b, c);", "    if (a ==\
    \ 0) {\n        return b;\n    } else if (b == 0) {\n        return a;\n    }\
    \ else if (a == b) {\n        return a;\n    } else if (a > b) {\n        return\
    \ greatest_common_divisor(a - b, b);\n    } else {\n        return greatest_common_divisor(a,\
    \ b - a);\n    }", "\tlong remainder = a % b;\n\tif (remainder == 0) {\n\t\treturn\
    \ b;\n\t}\n\treturn greatest_common_divisor(b, remainder);", "\t// >>>>> COMPLETE\n\
    \tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\tif\
    \ (a == b) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a\
    \ - b, b);\n\t}\n\treturn greatest_common_divisor(a, b - a);", "    assert(a >=\
    \ 0 && b >= 0);\n    return a == 0 ? b : greatest_common_divisor(b % a, a);",
  "  assert(a >= 0 && b >= 0);\n  while (b != 0) {\n    long c = a % b;\n    a = b;\n\
    \    b = c;\n  }\n  return a;", "    long divisor = 0;\n    // Check if a and\
    \ b are positive numbers\n    assert(a > 0 && b > 0);\n    // Iterate from a to\
    \ 0\n    for (long i = a; i > 0; i--) {\n        // If i is a divisor of a and\
    \ b, then set divisor to i\n        if (a % i == 0 && b % i == 0) {\n        \
    \    divisor = i;\n            break;\n        }\n    }\n    return divisor;",
  "    if (a == 0 || b == 0) {\n        return 1;\n    }\n    a = abs(a);\n    b =\
    \ abs(b);\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n\
    \        } else {\n            b = b - a;\n        }\n    }\n    return a;", " \
    \   // TODO: Implement me!\n    assert(a >= 1 && b >= 1);\n    long c = b%a;\n\
    \    //long* nums = new long[2];\n    //nums[0] = a;\n    //nums[1] = b;\n   \
    \ //std::sort(nums, nums+2);\n    while(c!=0){\n    \tb = a;\n    \ta = c;\n \
    \   \tc = b%a;\n    }\n    //if(c == 0)return nums[0];\n    return a;", "    assert(a\
    \ >= 0 && b >= 0);\n    // Here we may use Euclidean algorithm\n    while (a>0\
    \ && b>0) {\n        if (a>b) {\n            a = a%b;\n        } else {\n    \
    \        b = b%a;\n        }\n    }\n    return a+b;", "    if (a == 0 || b ==\
    \ 0) {\n        return -1;\n    }\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \    if (a < b) {\n        std::swap(a, b);\n    }\n    long dividend = a;\n \
    \   long divisor = b;\n    long rem;\n    while (divisor != 0) {\n        rem\
    \ = dividend % divisor;\n        dividend = divisor;\n        divisor = rem;\n\
    \    }\n    return dividend;", "    assert(a >= 0 && b >= 0);\n    if (a == 0)\
    \ {\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);",
  "\t// >>> greatest_common_divisor(3, 5)\n\t// 1\n\t// >>> greatest_common_divisor(25,\
    \ 15)\n\t// 5\n\t// >>> greatest_common_divisor(10, 8)\n\t// 2\n\t// >>> greatest_common_divisor(40,\
    \ 64)\n\t// 8\n\t// >>> greatest_common_divisor(64, 40)\n\t// 8\n\t// >>> greatest_common_divisor(40,\
    \ 40)\n\t// 40\n\t// >>> greatest_common_divisor(40, 0)\n\t// 40\n\t// >>> greatest_common_divisor(0,\
    \ 40)\n\t// 40\n\t// >>> greatest_common_divisor(0, 0)\n\t// 0\n\t\n\tif(a ==\
    \ 0 && b == 0) {\n\t\treturn 0;\n\t}\n\tif(a == 0) {\n\t\treturn b;\n\t}\n\tif(b\
    \ == 0) {\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a % b);", " \
    \   long temp;\n    while (b != 0) {\n        temp = a % b;\n        a = b;\n\
    \        b = temp;\n    }\n    return a;", "    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "    long gcd = 1;\n    for (long i = 2; i <= a && i <= b; i++) {\n\
    \        if (a % i == 0 && b % i == 0) {\n            gcd = i;\n        }\n  \
    \  }\n    return gcd;", "    assert(a >= 0 && b >= 0);\n    if (a < b) return\
    \ greatest_common_divisor(b, a);\n    long x = a;\n    long y = b;\n    while\
    \ (y != 0) {\n        long temp = x % y;\n        x = y;\n        y = temp;\n\
    \    }\n    return x;", "\t// Basic cases\n\tif (a == 0) return b;\n\tif (b ==\
    \ 0) return a;\n\t// Recursive case\n\t// We assume that a > b\n\tif (a < b) {\n\
    \t\t// We assume that a > b\n\t\t// So we swap them\n\t\tlong tmp = a;\n\t\ta\
    \ = b;\n\t\tb = tmp;\n\t}\n\t// Use Euclidean algorithm to find the greatest common\
    \ divisor\n\t// example: a = 25, b = 15\n\t// 15 = 25 - 10\n\t// Then, we find\
    \ a greatest common divisor for 25 and 15\n\t// Then, it is also the greatest\
    \ common divisor for 10 and 15\n\t// 10 = 15 - 5\n\t// Then, we find a greatest\
    \ common divisor for 15 and 5\n\t// Then, it is also the greatest common divisor\
    \ for 5 and 10\n\t// 5 = 10 - 5\n\t// Then, we find a greatest common divisor\
    \ for 10 and 5\n\t// Then, it is also the greatest common divisor for 5 and 5\n\
    \t// 5 = 5 - 0\n\t// Then, we find a greatest common divisor for 5 and 0\n\t//\
    \ Then, it is also the greatest common divisor for 0 and 5\n\t// We are done\n\
    \treturn greatest_common_divisor(b, a - b);", "    assert(b >= a);\n    assert(a\
    \ > 0);\n    while (b > 0) {\n        long r = a % b;\n        a = b;\n      \
    \  b = r;\n    }\n    return a;", "    long tmp;\n    while (b != 0) {\n     \
    \   tmp = a;\n        a = b;\n        b = tmp % b;\n    }\n    return a;", " \
    \   assert(a >= 0 && b >= 0);\n    if (a < b) {\n        std::swap(a, b);\n  \
    \  }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "\t// your code goes here\n\tif (a == 0) {\n\t\treturn b;\n\t}\n\t\
    if (b == 0) {\n\t\treturn a;\n\t}\n\tif (a == b) {\n\t\treturn a;\n\t}\n\tif (a\
    \ > b) {\n\t\treturn greatest_common_divisor(a - b, b);\n\t}\n\treturn greatest_common_divisor(a,\
    \ b - a);", "    long divisor;\n    if (a == 0) {\n        return b;\n    } else\
    \ if (b == 0) {\n        return a;\n    } else {\n        divisor = a%b;\n   \
    \     return greatest_common_divisor(b, divisor);\n    }", '     return (b ==
    0) ? a : greatest_common_divisor(b, a % b);', "    while (b != 0) {\n        long\
    \ tmp = a;\n        a = b;\n        b = tmp % b;\n    }\n    return a;", "\tlong\
    \ c = 0;\n\twhile (b != 0) {\n\t\tc = a % b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\t\
    return a;", "    while (b > 0) {\n        long t = a % b;\n        a = b;\n  \
    \      b = t;\n    }\n    return a;", "\tassert(a >= 0 && b >= 0);\n\n\tlong t\
    \ = 0;\n\tlong gcd = 0;\n\tlong r = 0;\n\n\twhile(b > 0) {\n\t\tr = a % b;\n\t\
    \ta = b;\n\t\tb = r;\n\t}\n\n\treturn a;", "  if (a == 0) {\n    assert(b != 0);\n\
    \    return b;\n  }\n  return greatest_common_divisor(b % a, a);", "    if (a\
    \ == 0 && b == 0)\n        return -1;\n    // Write your code here\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a > b)\n        return greatest_common_divisor(a -\
    \ b, b);\n    return greatest_common_divisor(a, b - a);", "  while (b) {\n   \
    \ long t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;", "    if (a == 0\
    \ || b == 0)\n    {\n        return 1;\n    }\n    if (a == b)\n    {\n      \
    \  return a;\n    }\n    else if (a > b)\n    {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b - a);\n    }", "    while (b != 0) {\n        long t = b;\n        b = a %\
    \ b;\n        a = t;\n    }\n    return a;", "    long t;\n    while (b != 0)\
    \ {\n        t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;",
  "    long c;\n    while (a != 0) {\n        c = a;\n        a = b % a;\n       \
    \ b = c;\n    }\n    return b;", "\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b\
    \ == 0) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a\
    \ % b, b);\n\t}\n\treturn greatest_common_divisor(a, b % a);", "\tlong gcd = 1;\n\
    \tfor (long i = 1; i <= a && i <= b; i++) {\n\t\tif (a % i == 0 && b % i == 0)\
    \ {\n\t\t\tgcd = i;\n\t\t}\n\t}\n\treturn gcd;", "    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }", "  //assert(1 <= a);\n  //assert(1\
    \ <= b);\n  if (a == b) return a;\n  if (a > b) return greatest_common_divisor(a\
    \ - b, b);\n  return greatest_common_divisor(a, b - a);", "    if (a==0)\n   \
    \ {\n        return b;\n    }\n    if (b==0)\n    {\n        return a;\n    }\n\
    \    if (a==b)\n    {\n        return a;\n    }\n    if (a>b)\n    {\n       \
    \ return greatest_common_divisor(a-b,b);\n    }\n    return greatest_common_divisor(a,b-a);",
  "    while (b) {\n        long remainder = a % b;\n        a = b;\n        b = remainder;\n\
    \    }\n    return a;", "    long m = std::min(a, b);\n    long n = std::max(a,\
    \ b);\n    while (n % m != 0) {\n        long remainder = n % m;\n        n =\
    \ m;\n        m = remainder;\n    }\n    return m;", '    return b == 0 ? a :
    greatest_common_divisor(b, a % b);', "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    long r = a % b;\n    if (r == 0) {\n        return b;\n    }\n\
    \    return greatest_common_divisor(b, r);", "  assert(a > 0 && b > 0);\n  while\
    \ (a != b) {\n    if (a > b) {\n      a = a - b;\n    } else {\n      b = b -\
    \ a;\n    }\n  }\n  return a;", "    if (a < b) {\n        long temp = a;\n  \
    \      a = b;\n        b = temp;\n    }\n    if (b == 0) {\n        return a;\n\
    \    }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }",
  "    // Start typing your C/C++ solution below\n    // DO NOT write int main() function\n\
    \    if(a == 0)\n        return b;\n    if(b == 0)\n        return a;\n    if(a\
    \ == b)\n        return a;\n    if(a == 1 || b == 1)\n        return 1;\n    if(a\
    \ > b)\n        return greatest_common_divisor(a-b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b-a);", "\tassert(a > 0 && b > 0);\n\t\n\t// Write\
    \ your code here.\n\twhile(b) {\n\t\tlong t = b;\n\t\tb = a % b;\n\t\ta = t;\n\
    \t}\n\treturn a;", "    // Use Euclid's algorithm\n    while (b != 0) {\n    \
    \    long remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n\
    \    return a;", "    long temp;\n    while (b != 0) {\n        temp = a % b;\n\
    \        a = b;\n        b = temp;\n    }\n    return a;", "    long c;\n    while\
    \ ( a != 0 ) {\n        c = a; a = b%a;  b = c;\n    }\n    return b;", "\t//\
    \ implement this function\n\tlong gcd,i;\n\tgcd=a;\n\ti=b;\n\twhile(gcd!=i)\n\t\
    {\n\t\tif(gcd>i)\n\t\t\tgcd=gcd-i;\n\t\telse\n\t\t\ti=i-gcd;\n\t}\n\treturn gcd;",
  "    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n    if (b == 0) return\
    \ a;\n    long remainder = a % b;\n    return greatest_common_divisor(b, remainder);",
  "    assert(a > 0 && b > 0);\n    while (a != b) {\n        if (a > b) {\n     \
    \       a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n\
    \    return a;", "\twhile (a != b) {\n\t\tif (a > b) {\n\t\t\ta = a - b;\n\t\t\
    }\n\t\telse {\n\t\t\tb = b - a;\n\t\t}\n\t}\n\treturn a;", "    while (a!=b) {\n\
    \        if (a>b) {\n            a=a-b;\n        } else {\n            b=b-a;\n\
    \        }\n    }\n    return a;", "    long x, y;\n    if (a >= b) {\n      \
    \  x = a;\n        y = b;\n    } else {\n        x = b;\n        y = a;\n    }\n\
    \    while (y > 0) {\n        long temp = x % y;\n        x = y;\n        y =\
    \ temp;\n    }\n    return x;", "    assert(a > 0 && b > 0);\n    if (a == b)\
    \ {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);", "    assert(a\
    \ >= 0 && b >= 0);\n    while (b != 0) {\n        a %= b;\n        std::swap(a,\
    \ b);\n    }\n    return a;", "\tassert(a >= 0 && b >= 0);\n\tif (a < b) return\
    \ greatest_common_divisor(b, a);\n\tlong r = a % b;\n\tif (r == 0) return b;\n\
    \telse return greatest_common_divisor(b, r);", "    // Fill in the missing code\n\
    \    if(a==0)\n    \treturn b;\n    if(b==0)\n    \treturn a;\n    if(a==b)\n\
    \    \treturn a;\n    if(a>b)\n    \treturn greatest_common_divisor(a-b,b);\n\
    \    return greatest_common_divisor(a,b-a);", "    // start coding here\n    long\
    \ c = abs(a);\n    long d = abs(b);\n    if (c == 0)\n        return d;\n    if\
    \ (d == 0)\n        return c;\n    while (c != d) {\n        if (c > d)\n    \
    \        c -= d;\n        else\n            d -= c;\n    }\n    return c;", "\t\
    while (b != 0) {\n\t\tlong temp = a % b;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\treturn\
    \ a;", "    if (a <= 0 or b <= 0) return 0;\n    if (a < b) std::swap(a, b);\n\
    \    if (a % b == 0) return b;\n    return greatest_common_divisor(b, a % b);",
  "    assert(a > 0 && b > 0);\n    while (a != b) {\n        if (a > b)\n       \
    \     a = a - b;\n        else\n            b = b - a;\n    }\n    return a;",
  "    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a < 0)\n        return greatest_common_divisor(-a, b);\n    if (b < 0)\n  \
    \      return greatest_common_divisor(a, -b);\n    if (a > b)\n        return\
    \ greatest_common_divisor(b, a);\n    return greatest_common_divisor(b % a, a);",
  "    if (a < b) return greatest_common_divisor(b, a);\n    if (b == 0) return a;\n\
    \    return greatest_common_divisor(b, a % b);", "\t// Implement your algorithm\
    \ here.\n\t// Use Euclid's algorithm.\n\t// You may not use the built-in GCD library.\n\
    \tlong x = a, y = b;\n\tif (a<b) {\n\t\tx = b;\n\t\ty = a;\n\t}\n\tlong r = x\
    \ % y;\n\tif (r == 0) {\n\t\treturn y;\n\t}\n\telse {\n\t\treturn greatest_common_divisor(y,\
    \ r);\n\t}", "\twhile (a != b) {\n\t\tif (a > b) {\n\t\t\ta = a - b;\n\t\t}\n\t\
    \telse {\n\t\t\tb = b - a;\n\t\t}\n\t}\n\treturn a;", "\t//assert(a >= 0 && b\
    \ >= 0);\n\ta = std::abs(a);\n\tb = std::abs(b);\n\t// Just do a quick search\
    \ for the largest value\n\t// that divides both, no need to be fancy.\n\tfor (long\
    \ n = std::min(a, b); n > 0; --n) {\n\t\tif (a % n == 0 && b % n == 0)\n\t\t\t\
    return n;\n\t}\n\t// If we can't find any common divisor, return 1.\n\treturn\
    \ 1;", "    if (a == 0 || b == 0) {\n        throw \"not valid input\";\n    }\n\
    \    a = std::abs(a);\n    b = std::abs(b);\n    // a is greater than b (a > b)\n\
    \    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (a % b != 0) {\n        long temp = b;\n        b = a % b;\n\
    \        a = temp;\n    }\n    return b;", "    assert(a >= 0 && b >= 0);\n  \
    \  // TODO: implement a method to find a greatest common divisor of two integers\
    \ a and b\n    long gcd = 0;\n    long max = std::max(a, b);\n    long min = std::min(a,\
    \ b);\n    for (long i = 1; i <= min; i++) {\n        if (a % i == 0 && b % i\
    \ == 0) {\n            gcd = i;\n        }\n    }\n    return gcd;", "    assert(a>=0\
    \ && b>=0);\n    return 0;", "    long rem;\n    while (b > 0) {\n        rem\
    \ = a % b;\n        a = b;\n        b = rem;\n    }\n    return a;", "\tlong r,\
    \ i;\n\twhile (b != 0) {\n\t\tr = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn\
    \ a;", "    // The Euclidean algorithm\n    assert(a > 0);\n    assert(b > 0);\n\
    \    while (b != 0) {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;", "  if (a == 0 || b == 0) {\n    return a + b;\n  } else\
    \ {\n    return greatest_common_divisor(std::abs(a - b), std::min(a, b));\n  }",
  "    // check if one of the numbers is 0\n    if (a == 0) {\n        return b;\n\
    \    }\n    if (b == 0) {\n        return a;\n    }\n    // check if one of the\
    \ numbers is 1\n    if (a == 1) {\n        return 1;\n    }\n    if (b == 1) {\n\
    \        return 1;\n    }\n    // make a smaller than b\n    if (a > b) {\n  \
    \      long c = a;\n        a = b;\n        b = c;\n    }\n    return greatest_common_divisor(b\
    \ % a, a);", "\tif (a == 0 || b == 0) {\n\t\treturn 0;\n\t}\n\tif (a < 0) {\n\t\
    \ta = -a;\n\t}\n\tif (b < 0) {\n\t\tb = -b;\n\t}\n\tlong temp;\n\twhile (b !=\
    \ 0) {\n\t\ttemp = a % b;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\treturn a;", "   \
    \ // \uC5EC\uAE30\uC5D0 \uCF54\uB4DC\uB97C \uC791\uC131\uD558\uC138\uC694\n  \
    \  if(a==b) return a;\n    if(a>b) greatest_common_divisor(a-b,b);\n    else greatest_common_divisor(a,b-a);",
  '    return b == 0 ? a : greatest_common_divisor(b, a % b);', '    return b ? greatest_common_divisor(b,
    a % b) : a;', "    long c;\n    if (a < b) {\n        a += b;\n        b = a -\
    \ b;\n        a -= b;\n    }\n    while (b != 0) {\n        c = a % b;\n     \
    \   a = b;\n        b = c;\n    }\n    return a;", "    assert(a > 0 && b > 0);\n\
    \    if (a > b) {\n        if (a % b == 0) {\n            return b;\n        }\
    \ else {\n            return greatest_common_divisor(b, a % b);\n        }\n \
    \   } else {\n        if (b % a == 0) {\n            return a;\n        } else\
    \ {\n            return greatest_common_divisor(a, b % a);\n        }\n    }",
  "    long c;\n    while (a != 0) {\n        c = a;\n        a = b % a;\n       \
    \ b = c;\n    }\n    return b;", "  assert(a > 0 && b > 0);\n  while (b != 0)\
    \ {\n    int t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;", "  if (a ==\
    \ 0) return b;\n  return greatest_common_divisor(b % a, a);", "  if (a % b ==\
    \ 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b, a % b);\n\
    \  }", "    // YOUR CODE HERE\n    if(a==0 || b==0)\n    {\n        return 0;\n\
    \    }\n    if(a==b)\n    {\n        return a;\n    }\n    if(a>b)\n    {\n  \
    \      return greatest_common_divisor(a-b,b);\n    }\n    return greatest_common_divisor(a,b-a);\n",
  "    if (a < b) {\n        long tmp = a;\n        a = b;\n        b = tmp;\n   \
    \ }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "    if (a <= 0 || b <= 0) {\n        assert(0);\n    }\n    if (a\
    \ % b == 0) return b;\n    return greatest_common_divisor(b, a % b);", "  long\
    \ c;\n  while ( a != 0 ) {\n     c = a; a = b%a;  b = c;\n  }\n  return b;", " \
    \   if (a < b)\n        std::swap(a, b);\n    while (b != 0) {\n        long t\
    \ = b;\n        b = a % b;\n        a = t;\n    }\n    return a;", "  assert(a\
    \ >= 0 && b >= 0);\n  long divisor = 0;\n  for (long i = 1; i <= a && i <= b;\
    \ ++i) {\n    if (a % i == 0 && b % i == 0) {\n      divisor = i;\n    }\n  }\n\
    \  return divisor;", "    assert(a >= 0 && b >= 0);\n    if (a == 0 || b == 0)\
    \ {\n        return (a == 0 ? b : a);\n    }\n    long a1 = a, b1 = b;\n    while\
    \ (a1 != b1) {\n        if (a1 > b1) {\n            a1 -= b1;\n        } else\
    \ {\n            b1 -= a1;\n        }\n    }\n    return a1;", '    return (b
    == 0) ? a : greatest_common_divisor(b, a % b);', "    if (a % b == 0) {\n    \
    \    return b;\n    }\n    else {\n        return greatest_common_divisor(b, a\
    \ % b);\n    }", "    long c;\n    while ( a != 0 ) {\n        c = a; a = b%a;\
    \  b = c;\n    }\n    return b;", "    // if a > b, we return the gcd of a and\
    \ b, else the gcd of b and a%b.\n    return (a > b) ? greatest_common_divisor(b,\
    \ a % b) : a;", "    long max = a;\n    long min = b;\n    if (a < b) {\n    \
    \    max = b;\n        min = a;\n    }\n    if (min == 0) {\n        return max;\n\
    \    }\n    long r = max % min;\n    return greatest_common_divisor(min, r);",
  "    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n    if (b == 0) return\
    \ a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    else return\
    \ greatest_common_divisor(a, b % a);", "\ta = std::abs(a);\n\tb = std::abs(b);\n\
    \twhile (b) {\n\t\ta %= b;\n\t\tstd::swap(a, b);\n\t}\n\treturn a;", '    return
    b ? greatest_common_divisor(b, a % b) : a;', '    return b == 0 ? a : greatest_common_divisor(b,
    a % b);', "\tlong remainder = 0;\n\twhile (b != 0) {\n\t\tremainder = a % b;\n\
    \t\ta = b;\n\t\tb = remainder;\n\t}\n\treturn a;", "    assert(a > 0 && b > 0);\n\
    \    // 1. Recursive case:\n    if (a != b) {\n        if (a > b) {\n        \
    \    return greatest_common_divisor(a - b, b);\n        } else {\n           \
    \ return greatest_common_divisor(a, b - a);\n        }\n    }\n    // 2. Base\
    \ case:\n    else {\n        return a;\n    }", "    // TODO implement this function\n\
    \tlong r=0;\n\tif(a==0){\n\t\treturn b;\n\t}\n\tif(b==0){\n\t\treturn a;\n\t}\n\
    \tif(a>b){\n\t\tr=b;\n\t\tb=a;\n\t\ta=r;\n\t}\n\twhile(b!=0){\n\t\tr=b;\n\t\t\
    b=a%b;\n\t\ta=r;\n\t}\n\treturn a;", "    long d = 0;\n    // implement me!\n\
    \    if(a < b) std::swap(a, b);\n    if(a%b == 0) return b;\n    d = greatest_common_divisor(b,\
    \ a%b);\n    return d;", '    return (b == 0) ? a : greatest_common_divisor(b,
    a % b);', "\tif (a == 0) return b;\n\tif (b == 0) return a;\n\twhile (a != b)\
    \ {\n\t\tif (a > b) a = a - b;\n\t\telse b = b - a;\n\t}\n\treturn a;", "    if\
    \ (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n\
    \    while (b > 0) {\n        long temp = a % b;\n        a = b;\n        b =\
    \ temp;\n    }\n    return a;", "    assert(a >= 0 && b >= 0);\n    if (a == 0)\
    \ {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n \
    \   while (a != b) {\n        if (a > b) {\n            a = a - b;\n        }\
    \ else {\n            b = b - a;\n        }\n    }\n    return a;", "    // Write\
    \ your code here\n    return 0;", "  if (a == 0) {\n    return b;\n  }\n  if (b\
    \ == 0) {\n    return a;\n  }\n  if (a > b) {\n    return greatest_common_divisor(a\
    \ % b, b);\n  } else {\n    return greatest_common_divisor(a, b % a);\n  }", " \
    \   while (a != b) {\n        if (a > b)\n            a = a - b;\n        else\n\
    \            b = b - a;\n    }\n    return a;", "\tassert(a >= 1);\n\tassert(b\
    \ >= 1);\n\tlong r = a % b;\n\tif (r == 0) return b;\n\telse return greatest_common_divisor(b,\
    \ r);", "    long gcd = 1;\n    long temp;\n    if (a < b) {\n        temp = a;\n\
    \        a = b;\n        b = temp;\n    }\n    while (b != 0) {\n        temp\
    \ = a % b;\n        a = b;\n        b = temp;\n    }\n    gcd = a;\n    return\
    \ gcd;", "    // Insert your code here\n    if(a<0 || b<0){\n        printf(\"\
    invalid input\\n\");\n        return -1;\n    }\n    long min = std::min(a,b);\n\
    \    long max = std::max(a,b);\n    if(max%min == 0){\n        return min;\n \
    \   }\n    while(min != 1){\n        if(max%min == 0){\n            return min;\n\
    \        }\n        long temp = min;\n        min = max%min;\n        max = temp;\n\
    \    }\n    return 1;", "\tif (a % b == 0)\n\t\treturn b;\n\telse\n\t\treturn\
    \ greatest_common_divisor(b, a % b);", "    a = abs(a);\n    b = abs(b);\n   \
    \ while (b != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n\
    \    }\n    return a;", "\treturn b == 0 ? a : greatest_common_divisor(b, a %\
    \ b);", "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n    \
    \    return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }", "    if (a == 0 || b == 0) {\n        return 0;\n    }\n    if (a < 0)\
    \ {\n        a = -a;\n    }\n    if (b < 0) {\n        b = -b;\n    }\n    while\
    \ (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n\
    \            b = b - a;\n        }\n    }\n    return a;", "  // Your code here\n\
    \  // Recursion\n  if (b == 0) {\n    return a;\n  }\n  return greatest_common_divisor(b,\
    \ a % b);", "    if (a < b) {\n        return greatest_common_divisor(b, a);\n\
    \    }\n    // b <= a\n    if (b == 0) {\n        return a;\n    }\n    // a >\
    \ b > 0\n    return greatest_common_divisor(b, a % b);", "    if (a == 0 || b\
    \ == 0)\n        return 0;\n    else if (a == b)\n        return a;\n    else\
    \ if (a > b)\n        return greatest_common_divisor(a - b, b);\n    else\n  \
    \      return greatest_common_divisor(a, b - a);", "  assert(a >= 0 && b >= 0);\n\
    \  if (a == 0 || b == 0) {\n    return a + b;\n  } else {\n    long r = a % b;\n\
    \    return greatest_common_divisor(b, r);\n  }", "    while (b != 0) {\n    \
    \    long r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;", " \
    \   long tmp;\n    if (a < b) {\n        tmp = a;\n        a = b;\n        b =\
    \ tmp;\n    }\n    while (b != 0) {\n        tmp = a % b;\n        a = b;\n  \
    \      b = tmp;\n    }\n    return a;", "\tassert(a >= 0 && b >= 0);\n\n\tlong\
    \ d = 0;\n\twhile(a && b) {\n\t\tif(a >= b)\n\t\t\ta %= b;\n\t\telse\n\t\t\tb\
    \ %= a;\n\t}\n\treturn a + b;", "    \n    // place your code here\n\tlong n,\
    \ gcd, rem;\n\t//remainder calculation\n\tn = (a > b) ? a : b;\n\tgcd = (a < b)\
    \ ? a : b;\n\trem = n % gcd;\n\twhile (rem != 0)\n\t{\n\t\tn = gcd;\n\t\tgcd =\
    \ rem;\n\t\trem = n % gcd;\n\t}\n\treturn gcd;", "\tif (a == 0) {\n\t\treturn\
    \ b;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a\
    \ % b, b);\n\t}\n\treturn greatest_common_divisor(a, b % a);", "    if (a == 0\
    \ || b == 0) {\n        return 0;\n    }\n    else {\n        return (b == 0)\
    \ ? a : greatest_common_divisor(b, a % b);\n    }", "\tlong c;\n\t// assert(a\
    \ >= 0 && b >= 0);\n\twhile (a > 0) {\n\t\tc = a;\n\t\ta = b % a;\n\t\tb = c;\n\
    \t}\n\treturn b;", "    assert(a >= 0 && b >= 0);\n    if (a == 0 || b == 0) {\n\
    \        return a + b;\n    }\n    return greatest_common_divisor(b, a % b);",
  "  long i, gcd;\n  for (i = 1; i <= a && i <= b; i++) {\n    if (a % i == 0 && b\
    \ % i == 0)\n      gcd = i;\n  }\n  return gcd;", "   long r = 0;\n   if (a ==\
    \ 0) {\n      return b;\n   }\n   if (b == 0) {\n      return a;\n   }\n   while\
    \ (b != 0) {\n      r = a % b;\n      a = b;\n      b = r;\n   }\n   return a;",
  "    assert(a>=1);\n    assert(b>=1);\n    long t=a%b;\n    if(t==0) return b;\n\
    \    else\n    {\n        return greatest_common_divisor(b,t);\n    }\n    ",
  '  return (b == 0) ? a : greatest_common_divisor(b, a % b);', "    if (a == 0 ||\
    \ b == 0)\n        return -1;\n    long tmp;\n    while (b != 0) {\n        tmp\
    \ = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;", '  return
    b == 0 ? a : greatest_common_divisor(b, a % b);', "    assert(a >= 0 && b >= 0);\n\
    \    while (a && b) {\n        if (a >= b) {\n            a %= b;\n        } else\
    \ {\n            b %= a;\n        }\n    }\n    return a + b;", "    assert(a\
    \ >= 1);\n    assert(b >= 1);\n    long divisor = 1;\n    long minimum = std::min(a,\
    \ b);\n    for (long i = 1; i <= minimum; i++) {\n        if (a % i == 0 && b\
    \ % i == 0) {\n            divisor = i;\n        }\n    }\n    return divisor;",
  "  if (a < b)\n    return greatest_common_divisor(b, a);\n  while (b != 0) {\n \
    \   long tmp = a % b;\n    a = b;\n    b = tmp;\n  }\n  return a;", "    // Write\
    \ your code here\n    long c = std::__gcd(a,b);\n    return c;", "\tlong r, i;\n\
    \twhile (b != 0) {\n\t\tr = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn a;",
  "\tassert(a >= 0 && b >= 0);\n\tif (a < b) {\n\t\tstd::swap(a, b);\n\t}\n\twhile\
    \ (b > 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn a;", " \
    \ // YOUR CODE HERE\n  if(a<b)\n    std::swap(a,b);\n  long r;\n  if(b==0)\n \
    \   return a;\n  r=a%b;\n  a=b;\n  b=r;\n  return greatest_common_divisor(a,b);",
  "\t// Task A\n\twhile (b != 0) {\n\t\tlong temp = a % b;\n\t\ta = b;\n\t\tb = temp;\n\
    \t}\n\treturn a;", "\twhile (b) {\n\t\tlong c = a;\n\t\ta = b;\n\t\tb = c % b;\n\
    \t}\n\treturn a;", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    long r = a % b;\n    if (r == 0) {\n        return b;\n    }\n\
    \    return greatest_common_divisor(b, r);", "    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b != 0) {\n        auto tmp = a % b;\n        a = b;\n\
    \        b = tmp;\n    }\n    return a;", "\treturn b ? greatest_common_divisor(b,\
    \ a % b) : a;", "\tlong m = std::max(a, b);\n\tlong n = std::min(a, b);\n\tlong\
    \ t = n;\n\tif (t == 0)\n\t\treturn m;\n\twhile (m % t != 0) {\n\t\tt = m % t;\n\
    \t}\n\treturn t;", "  if (a < b)\n    std::swap(a, b);\n  if (b == 0)\n    return\
    \ a;\n  return greatest_common_divisor(b, a % b);", "    assert(a >= 0 && b >=\
    \ 0);\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a > b) std::swap(a,\
    \ b);\n    while (a != 0) {\n        long c = a;\n        a = b % a;\n       \
    \ b = c;\n    }\n    return b;", "  assert(a >= 0 && b >= 0);\n  if (a == 0) {\n\
    \    return b;\n  }\n  if (b == 0) {\n    return a;\n  }\n  while (a != b) {\n\
    \    if (a > b) {\n      a = a - b;\n    } else {\n      b = b - a;\n    }\n \
    \ }\n  return a;", "    long t = 0;\n    while (b != 0) {\n        t = b;\n  \
    \      b = a % b;\n        a = t;\n    }\n    return a;", "    if (a == 0)\n \
    \       return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n     \
    \   return a;\n    if (a > b)\n        return greatest_common_divisor(a - b, b);\n\
    \    return greatest_common_divisor(a, b - a);", "  if (a == 0) {\n    return\
    \ b;\n  }\n  if (b == 0) {\n    return a;\n  }\n  if (a >= b) {\n    return greatest_common_divisor(a\
    \ % b, b);\n  }\n  return greatest_common_divisor(a, b % a);", "\tlong tmp;\n\t\
    while (b) {\n\t\ttmp = a % b;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\treturn a;", " \
    \   assert(a >= 0 && b >= 0);\n    //Add your code here.\n    // delete the following\
    \ statement and implement your code.\n    return 0;", "\tif (a == 0 || b == 0)\
    \ {\n\t\treturn a + b;\n\t}\n\twhile (a > 0 && b > 0) {\n\t\tif (a > b) {\n\t\t\
    \ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t}\n\treturn a + b;", "    if\
    \ (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);", "\tif (a == 0) return b;\n\
    \tif (b == 0) return a;\n\tif (a == b) return a;\n\tif (a > b) return greatest_common_divisor(a\
    \ - b, b);\n\treturn greatest_common_divisor(a, b - a);", "  long x = abs(a);\n\
    \  long y = abs(b);\n  while (y) {\n    long r = x % y;\n    x = y;\n    y = r;\n\
    \  }\n  return x;", "    if (a == 0 || b == 0)\n        return 0;\n    long m\
    \ = std::abs(a), n = std::abs(b);\n    long r = m % n;\n    while (r != 0) {\n\
    \        m = n;\n        n = r;\n        r = m % n;\n    }\n    return n;", " \
    \   assert(a >= 0 && b >= 0);\n    int gcd=1;\n    if(a==0 || b==0)\n    {\n \
    \       if(a==0)\n            return b;\n        else\n            return a;\n\
    \    }\n    if(a==b)\n        return a;\n    for(int i=1;i<=std::min(a,b);i++)\n\
    \    {\n        if(a%i==0 && b%i==0)\n            gcd=i;\n    }\n    return gcd;",
  "  //assert(a > 0 && b > 0);\n  while (b != 0) {\n    long t = b;\n    b = a % b;\n\
    \    a = t;\n  }\n  return a;", "  if (a == 0) return b;\n  if (b == 0) return\
    \ a;\n  if (a > b) return greatest_common_divisor(a % b, b);\n  return greatest_common_divisor(a,\
    \ b % a);", "    long x;\n    while (b != 0) {\n        x = a % b;\n        a\
    \ = b;\n        b = x;\n    }\n    return a;", "\tlong result = 1;\n\tlong min\
    \ = a < b ? a : b;\n\tfor (long i = 2; i <= min; i++) {\n\t\tif (a % i == 0 &&\
    \ b % i == 0) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\treturn result;", "    assert(a\
    \ > 0 && b > 0);\n    long shift, k;\n    if (a < b) {\n        long temp = a;\n\
    \        a = b;\n        b = temp;\n    }\n    for (shift = 0; ((a | b) & 1) ==\
    \ 0; ++shift) {\n        a >>= 1;\n        b >>= 1;\n    }\n    while ((a & 1)\
    \ == 0)\n        a >>= 1;\n    do {\n        while ((b & 1) == 0)\n          \
    \  b >>= 1;\n        if (a > b) {\n            long temp = a;\n            a =\
    \ b;\n            b = temp;\n        }\n        b = b - a;\n    } while (b !=\
    \ 0);\n    return a << shift;", "\tassert(a >= 0 && b >= 0);\n\tlong common_divisor\
    \ = 1;\n\tif (a == 0 || b == 0) {\n\t\tcommon_divisor = std::max(a, b);\n\t}\n\
    \telse {\n\t\twhile (a > 0 && b > 0) {\n\t\t\tif (a % 2 == 0 && b % 2 == 0) {\n\
    \t\t\t\tcommon_divisor *= 2;\n\t\t\t\ta /= 2;\n\t\t\t\tb /= 2;\n\t\t\t}\n\t\t\t\
    else if (a % 2 == 0) {\n\t\t\t\ta /= 2;\n\t\t\t}\n\t\t\telse if (b % 2 == 0) {\n\
    \t\t\t\tb /= 2;\n\t\t\t}\n\t\t\telse if (a > b) {\n\t\t\t\ta = (a - b) / 2;\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\tb = (b - a) / 2;\n\t\t\t}\n\t\t}\n\t\tcommon_divisor\
    \ *= std::max(a, b);\n\t}\n\treturn common_divisor;", '    return a ? greatest_common_divisor(b
    % a, a) : b;', '    return 0;', "    if (a == 0) {\n        return b;\n    }\n\
    \    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n        return\
    \ greatest_common_divisor(a % b, b);\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }", '  return b == 0 ? a : greatest_common_divisor(b, a % b);',
  "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    int shift = 0;\n    while (((a | b) & 1) == 0) {\n        shift++;\n\
    \        a >>= 1;\n        b >>= 1;\n    }\n    while ((a & 1) == 0) {\n     \
    \   a >>= 1;\n    }\n    do {\n        while ((b & 1) == 0) {\n            b >>=\
    \ 1;\n        }\n        if (a > b) {\n            std::swap(a, b);\n        }\n\
    \        b -= a;\n    } while (b != 0);\n    return a << shift;", "    long c\
    \ = b;\n    assert(c >= 0);\n    while (c != 0) {\n        c = a % b;\n      \
    \  a = b;\n        b = c;\n    }\n    return a;", "    if (a < b)\n        std::swap(a,\
    \ b);\n    long remainder = a % b;\n    while (remainder != 0) {\n        a =\
    \ b;\n        b = remainder;\n        remainder = a % b;\n    }\n    return b;",
  "    assert(a >= 0 && b >= 0);\n    if (a<b) std::swap(a,b);\n    while (b > 0)\
    \ {\n        a = a % b;\n        std::swap(a, b);\n    }\n    return a;", "  \
    \  long n;\n    while (b != 0) {\n        n = a % b;\n        a = b;\n       \
    \ b = n;\n    }\n    return a;", "    while (b != 0) {\n        long t = b;\n\
    \        b = a % b;\n        a = t;\n    }\n    return a;"]
stop_tokens:
- "\n}"
