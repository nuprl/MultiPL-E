language: cpp
name: HumanEval_46_fib4
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) return (n == 2) ? 2 : 0;\n    long\
    \ f[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        f[3] = f[2]\
    \ + f[1] + f[0] + f[3];\n        f[0] = f[1];\n        f[1] = f[2];\n        f[2]\
    \ = f[3];\n    }\n    return f[3];\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpiktlpfv0: /tmp/tmpiktlpfv0.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 2;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++) {\n        e = a + b + c + d;\n        d = c;\n        c = b;\n\
    \        b = a;\n        a = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpohq6397u: /tmp/tmpohq6397u.cpp:46: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   if (n <= 0) return 0;\n   if (n == 1) return 0;\n\
    \   if (n == 2) return 2;\n   if (n == 3) return 0;\n   long f1 = 0;\n   long\
    \ f2 = 0;\n   long f3 = 2;\n   long f4 = 0;\n   long f5 = 0;\n   for (int i =\
    \ 4; i <= n; i++) {\n      f5 = f1 + f2 + f3 + f4;\n      f1 = f2;\n      f2 =\
    \ f3;\n      f3 = f4;\n      f4 = f5;\n   }\n   return f5;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long first = 0;\n  long second\
    \ = 0;\n  long third = 2;\n  long fourth = 0;\n  long sum = 2;\n  for (int i =\
    \ 4; i <= n; i++) {\n    sum = first + second + third + fourth;\n    first = second;\n\
    \    second = third;\n    third = fourth;\n    fourth = sum;\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long fib4[n+1];\n    fib4[0] = 0;\n    fib4[1]\
    \ = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n    }\n   \
    \ return fib4[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  std::vector<long> fibs;\n  fibs.push_back(0);\n\
    \  fibs.push_back(0);\n  fibs.push_back(2);\n  fibs.push_back(0);\n  long fibSum\
    \ = 2;\n  long i = 3;\n  while (i < n) {\n    long temp = fibSum;\n    fibSum\
    \ += fibs[0];\n    fibs[0] = fibs[1];\n    fibs[1] = fibs[2];\n    fibs[2] = fibs[3];\n\
    \    fibs[3] = temp;\n    i++;\n  }\n  return fibSum;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp60qy5fho: /tmp/tmp60qy5fho.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long arr[n+1];\n    arr[0] = 0;\n    arr[1] =\
    \ 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i <= n; i++) {\n  \
    \      arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return\
    \ arr[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 3) return n;\n    long a = 0, b = 0,\
    \ c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpz9yyw78x: /tmp/tmpz9yyw78x.cpp:30: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    // TODO: your code here\n\
    \    long fib[n+1]; \n    fib[0] = 0; \n    fib[1] = 0; \n    fib[2] = 2; \n \
    \   fib[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        fib[i] = fib[i-1]\
    \ + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // YOUR CODE HERE\n  return -1;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpog_3gxrs: /tmp/tmpog_3gxrs.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n < 0) return -1;\n  if (n == 0) return 0;\n\
    \  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n \
    \ std::vector<long> arr{0, 0, 2, 0};\n  for (int i = 4; i <= n; i++) {\n    long\
    \ elem = arr[3] + arr[2] + arr[1] + arr[0];\n    arr[0] = arr[1];\n    arr[1]\
    \ = arr[2];\n    arr[2] = arr[3];\n    arr[3] = elem;\n  }\n  return arr[3];\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 2) return 2;\n    long a = 0, b = 0,\
    \ c = 2, d = 2;\n    for (int i = 3; i < n; i++) {\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = a + b + c;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpjjrybtyf: /tmp/tmpjjrybtyf.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpykg6rqo2: /tmp/tmpykg6rqo2.cpp:33: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n   if (n == 0) { return 0; }\n   else if (n == 1)\
    \ { return 0; }\n   else if (n == 2) { return 2; }\n   else if (n == 3) { return\
    \ 0; }\n   else if (n == 4) { return 0; }\n   else {\n      long fibs[n+1];\n\
    \      fibs[0] = 0;\n      fibs[1] = 0;\n      fibs[2] = 2;\n      fibs[3] = 0;\n\
    \      fibs[4] = 0;\n      for (int i = 5; i <= n; i++) {\n         fibs[i] =\
    \ fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4];\n      }\n      return fibs[n];\n\
    \   }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp28sq0eeu: /tmp/tmp28sq0eeu.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    }\n    long prev1 = 2;\n   \
    \ long prev2 = 0;\n    long prev3 = 0;\n    long prev4 = 0;\n    long result =\
    \ 0;\n    for (int i = 4; i <= n; i++) {\n        result = prev1 + prev2 + prev3\
    \ + prev4;\n        prev4 = prev3;\n        prev3 = prev2;\n        prev2 = prev1;\n\
    \        prev1 = result;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmplg16f9oo: /tmp/tmplg16f9oo.cpp:43: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  // YOUR CODE HERE\n  long arr[n+1];\n\
    \  arr[0] = 0;\n  arr[1] = 0;\n  arr[2] = 2;\n  arr[3] = 0;\n  for(int i = 4;\
    \ i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n  }\n\
    \  return arr[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  std::vector<long> fibs = {0, 0, 2, 0};\n  if (n\
    \ <= 3) return fibs[n];\n  for (int i = 4; i <= n; i++) {\n    fibs.push_back(fibs[i-1]\
    \ + fibs[i-2] + fibs[i-3] + fibs[i-4]);\n  }\n  return fibs[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  } else if (n ==\
    \ 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else if (n ==\
    \ 3) {\n    return 0;\n  } else {\n    long prev = 0;\n    long prev2 = 0;\n \
    \   long prev3 = 2;\n    long prev4 = 0;\n    long current = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n      current = prev + prev2 + prev3 + prev4;\n     \
    \ prev4 = prev3;\n      prev3 = prev2;\n      prev2 = prev;\n      prev = current;\n\
    \    }\n    return current;\n  }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp1kr2zqc8: /tmp/tmp1kr2zqc8.cpp:44: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long cache[n + 1];\n  cache[0] = 0;\n  cache[1]\
    \ = 0;\n  cache[2] = 2;\n  cache[3] = 0;\n  for (int i = 4; i <= n; i++) {\n \
    \   cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3] + cache[i - 4];\n  }\n\
    \  return cache[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long result = 0;\n    std::vector<long> vec;\n\
    \    vec.push_back(0);\n    vec.push_back(0);\n    vec.push_back(2);\n    vec.push_back(0);\n\
    \    while(vec.size() != n+1){\n        vec.push_back(vec[vec.size()-1] + vec[vec.size()-2]\
    \ + vec[vec.size()-3] + vec[vec.size()-4]);\n    }\n    result = vec[n];\n   \
    \ return result;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n\
    \        return 0;\n    else\n    {\n        long res[n], i;\n        res[0] =\
    \ 0;\n        res[1] = 0;\n        res[2] = 2;\n        res[3] = 0;\n        for(i=4;\
    \ i<=n; i++)\n        {\n            res[i] = res[i-1] + res[i-2] + res[i-3] +\
    \ res[i-4];\n        }\n        return res[n];\n    }\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long sum=0;\n  int f1=0,f2=0,f3=2,f4=0;\n  if(n==0)\n\
    \    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return 2;\n  if(n==3)\n\
    \    return 0;\n  if(n>3){\n    for(int i=4;i<=n;i++){\n      sum=f1+f2+f3+f4;\n\
    \      f1=f2;\n      f2=f3;\n      f3=f4;\n      f4=sum;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a[4] = {0, 0, 2, 0};\n\
    \tlong temp[4] = {0, 0, 0, 0};\n\tfor (int i = 0; i < n - 3; i++) {\n\t\ttemp[0]\
    \ = a[0] + a[1] + a[2] + a[3];\n\t\ttemp[1] = a[0];\n\t\ttemp[2] = a[1];\n\t\t\
    temp[3] = a[2];\n\t\ta[0] = temp[0];\n\t\ta[1] = temp[1];\n\t\ta[2] = temp[2];\n\
    \t\ta[3] = temp[3];\n\t}\n\treturn a[0];\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpgokveshs: /tmp/tmpgokveshs.cpp:38: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong first = 0;\n\tlong second = 0;\n\tlong third\
    \ = 2;\n\tlong fourth = 0;\n\tlong fifth = 0;\n\tlong sixth = 0;\n\tlong seventh\
    \ = 0;\n\tlong answer = 0;\n\tif (n <= 4) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\
    \t\t}\n\t\telse if (n == 1) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 2) {\n\
    \t\t\treturn 2;\n\t\t}\n\t\telse if (n == 3) {\n\t\t\treturn 0;\n\t\t}\n\t\telse\
    \ if (n == 4) {\n\t\t\treturn 4;\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 5; i\
    \ <= n; i++) {\n\t\t\tanswer = first + second + third + fourth;\n\t\t\tseventh\
    \ = sixth;\n\t\t\tsixth = fifth;\n\t\t\tfifth = fourth;\n\t\t\tfourth = third;\n\
    \t\t\tthird = second;\n\t\t\tsecond = first;\n\t\t\tfirst = answer;\n\t\t}\n\t\
    }\n\treturn answer;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp510f7cs2: /tmp/tmp510f7cs2.cpp:58: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tstd::vector<long> fib4s = {0, 0, 2, 0};\n\tfor (int\
    \ i = 4; i <= n; i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = i - 4; j < i; j++)\
    \ {\n\t\t\tsum += fib4s[j];\n\t\t}\n\t\tfib4s.push_back(sum);\n\t}\n\treturn fib4s[n];\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long a = 0, b = 0, c = 2, d = 0, i;\n  if (n <=\
    \ 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3)\
    \ return 0;\n  for (i = 4; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n  \
    \  b = c;\n    c = d;\n  }\n  return d;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmph984h65m: /tmp/tmph984h65m.cpp:33: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long f0 = 0;\n  long f1 = 0;\n  long f2 = 2;\n \
    \ long f3 = 0;\n  long f = 0;\n  if (n < 0) {\n    return -1;\n  }\n  if (n <\
    \ 3) {\n    return 0;\n  }\n  if (n == 3) {\n    return 2;\n  }\n  while (n >=\
    \ 3) {\n    f = f3 + f2 + f1 + f0;\n    f0 = f1;\n    f1 = f2;\n    f2 = f3;\n\
    \    f3 = f;\n    n--;\n  }\n  return f;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpmqbbtrog: /tmp/tmpmqbbtrog.cpp:43: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\t// your code here\n\tlong a = 0, b = 0, c = 2, d\
    \ = 0, temp = 0;\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n ==\
    \ 2) return 2;\n\tif (n == 3) return 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\t\
    temp = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\
    \treturn temp;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n <= 0) return 0;\n\tlong a = 0, b = 0, c =\
    \ 2, d = 0, f = 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n\
    \ == 3) return 0;\n\tif (n == 4) return 2;\n\tfor (int i = 0; i < n - 4; i++)\
    \ {\n\t\tf = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = f;\n\t\
    }\n\treturn f;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpmaseq66d: /tmp/tmpmaseq66d.cpp:34: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    }\n    std::vector<long> fib4s(n);\n\
    \    fib4s[0] = 0;\n    fib4s[1] = 0;\n    fib4s[2] = 2;\n    fib4s[3] = 0;\n\
    \    for (long i = 4; i < n; i++) {\n        fib4s[i] = fib4s[i-1] + fib4s[i-2]\
    \ + fib4s[i-3] + fib4s[i-4];\n    }\n    return fib4s[n-1];\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpu471v3u5: /tmp/tmpu471v3u5.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long a = 0, b = 0, c = 2, d = 0, tmp;\n  if (n ==\
    \ 0) {\n    return a;\n  }\n  if (n == 1) {\n    return b;\n  }\n  if (n == 2)\
    \ {\n    return c;\n  }\n  for (int i = 3; i <= n; i++) {\n    tmp = a + b + c\
    \ + d;\n    a = b;\n    b = c;\n    c = d;\n    d = tmp;\n  }\n  return d;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpigu9tzt6: /tmp/tmpigu9tzt6.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n <= 2) return 2*n;\n\
    \    if (n == 3) return 0;\n    long a = 0, b = 0, c = 2, d = 2;\n    for (int\
    \ i = 4; i <= n; i++) {\n        long tmp = d;\n        d = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = tmp;\n    }\n    return d;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmptwupnfze: /tmp/tmptwupnfze.cpp:32: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n>=0);\n    std::vector<long> a;\n    a.push_back(0);\n\
    \    a.push_back(0);\n    a.push_back(2);\n    a.push_back(0);\n    if(n<4)\n\
    \        return a[n];\n    long i=4;\n    while(i<=n){\n        a.push_back(a[i-1]+a[i-2]+a[i-3]+a[i-4]);\n\
    \        i++;\n    }\n    return a[n];\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n < 4) {\n    return n-2;\n  }\n  long a = 0;\n\
    \  long b = 0;\n  long c = 2;\n  long d = 0;\n  for (long i = 4; i <= n; i++)\
    \ {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmph_v125al: /tmp/tmph_v125al.cpp:35: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    long first = 0;\n    long\
    \ second = 0;\n    long third = 2;\n    long fourth = 0;\n    long result = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        result = first + second + third +\
    \ fourth;\n        first = second;\n        second = third;\n        third = fourth;\n\
    \        fourth = result;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmphm89oszr: /tmp/tmphm89oszr.cpp:34: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n==0) return 0;\n\tif (n==1) return 0;\n\tif\
    \ (n==2) return 2;\n\tif (n==3) return 0;\n\tlong a=0,b=0,c=2,d=0,e;\n\tfor (int\
    \ i=4;i<=n;i++) {\n\t\te=a+b+c+d;\n\t\ta=b;\n\t\tb=c;\n\t\tc=d;\n\t\td=e;\n\t\
    }\n\treturn e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong fib4 = 0;\n\tlong fib3 = 0;\n\tlong fib2 =\
    \ 2;\n\tlong fib1 = 0;\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\
    \t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\t\
    return 0;\n\t}\n\tfor (int i = 4; i <= n; i++) {\n\t\tfib4 = fib3 + fib2 + fib1\
    \ + fib4;\n\t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\t\tfib3 = fib4;\n\t}\n\treturn\
    \ fib4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpvu5kou_g: /tmp/tmpvu5kou_g.cpp:43: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpen4fml7x: /tmp/tmpen4fml7x.cpp:21: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // Your code here\n  return 0;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp4nq6rili: /tmp/tmp4nq6rili.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long fib4_0 =\
    \ 0;\n    long fib4_1 = 0;\n    long fib4_2 = 2;\n    long fib4_3 = 0;\n    long\
    \ fib4_n = 0;\n    for (int i = 4; i <= n; i++) {\n        fib4_n = fib4_0 + fib4_1\
    \ + fib4_2 + fib4_3;\n        fib4_0 = fib4_1;\n        fib4_1 = fib4_2;\n   \
    \     fib4_2 = fib4_3;\n        fib4_3 = fib4_n;\n    }\n    return fib4_n;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\t// TODO\n\treturn 0;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpbj7hrmx9: /tmp/tmpbj7hrmx9.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 1) return 0;\n    if (n == 2) return\
    \ 2;\n    long fib_0 = 0;\n    long fib_1 = 0;\n    long fib_2 = 2;\n    long\
    \ fib_3 = 0;\n    long fib_4 = 0;\n    for (long i = 3; i <= n; i++) {\n     \
    \   fib_4 = fib_3 + fib_2 + fib_1 + fib_0;\n        fib_0 = fib_1;\n        fib_1\
    \ = fib_2;\n        fib_2 = fib_3;\n        fib_3 = fib_4;\n    }\n    return\
    \ fib_4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp8lanfnmj: /tmp/tmp8lanfnmj.cpp:35: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) {\n        return n < 2 ? 0 : 2;\n\
    \    }\n    long temp;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n  \
    \  long d = 0;\n    for (long i = 4; i <= n; i++) {\n        temp = d;\n     \
    \   d = a + b + c + d;\n        a = b;\n        b = c;\n        c = temp;\n  \
    \  }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long i = 0;\n    long j = 0;\n    long k = 2;\n\
    \    long l = 0;\n    long m = 0;\n    if (n == 0) {\n        return 0;\n    }\n\
    \    else if (n == 1) {\n        return 0;\n    }\n    else if (n == 2) {\n  \
    \      return 2;\n    }\n    else if (n == 3) {\n        return 0;\n    }\n  \
    \  else {\n        for (int a = 0; a < n-3; a++) {\n            m = i + j + k\
    \ + l;\n            i = j;\n            j = k;\n            k = l;\n         \
    \   l = m;\n        }\n        return m;\n    }\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long p0 = 0;\n    long\
    \ p1 = 0;\n    long p2 = 2;\n    long p3 = 0;\n    long p4 = 0;\n    long temp\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        temp = p0 + p1 + p2 + p3;\n\
    \        p0 = p1;\n        p1 = p2;\n        p2 = p3;\n        p3 = p4;\n    \
    \    p4 = temp;\n    }\n    return p4;\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp9tvj4pu8: /tmp/tmp9tvj4pu8.cpp:47: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n//https://stackoverflow.com/questions/39583481/print-fib4-numbers-without-recursion-in-c\n\
    long f0=0,f1=0,f2=2,f3=0,f4=0;\n\nif(n==0)\n return f0;\n\nif(n==1)\n return f1;\n\
    \nif(n==2)\n return f2;\n\nif(n==3)\n return f3;\n\nfor(int i=4;i<=n;i++)\n{\n\
    \  f4=f0+f1+f2+f3;\n  f0=f1;\n  f1=f2;\n  f2=f3;\n  f3=f4;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsono_b1i.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpsono_b1i.cpp:40:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   40 | int main() {\n      |            ^\n/tmp/tmpsono_b1i.cpp:46:1:\
    \ error: expected \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmpsono_b1i.cpp:16:19:\
    \ note: to match this \u2018{\u2019\n   16 | long fib4(long n) {\n      |    \
    \               ^\n/tmp/tmpsono_b1i.cpp:46:1: warning: control reaches end of\
    \ non-void function [-Wreturn-type]\n   46 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660109853
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a, b, c, d, e;\n\tassert(n>=0);\n\tif (n ==\
    \ 0) { return 0; }\n\telse if (n == 1) { return 0; }\n\telse if (n == 2) { return\
    \ 2; }\n\telse if (n == 3) { return 0; }\n\telse {\n\t\ta = 0;\n\t\tb = 0;\n\t\
    \tc = 2;\n\t\td = 0;\n\t\te = 0;\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\te\
    \ = a + b + c + d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = e;\n\t\
    \t}\n\t\treturn e;\n\t}\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 1) return 0;\n    if (n == 2) return\
    \ 2;\n    if (n == 3) return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp23rbwjvf: /tmp/tmp23rbwjvf.cpp:32: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long f1 = 0;\n  long f2 = 0;\n  long f3 = 2;\n \
    \ long f4 = 0;\n  long i;\n  long temp;\n  if (n == 0 || n == 1) {\n    return\
    \ 0;\n  }\n  else if (n == 2) {\n    return 2;\n  }\n  else {\n    for (i = 4;\
    \ i <= n; i++) {\n      temp = f1 + f2 + f3 + f4;\n      f1 = f2;\n      f2 =\
    \ f3;\n      f3 = f4;\n      f4 = temp;\n    }\n    return f4;\n  }\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\
    \t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\
    \tif (n == 3) {\n\t\treturn 0;\n\t}\n\tif (n == 4) {\n\t\treturn 2;\n\t}\n\tlong\
    \ first = 0;\n\tlong second = 0;\n\tlong third = 2;\n\tlong fourth = 2;\n\tlong\
    \ answer = 0;\n\tfor (int i = 5; i <= n; i++) {\n\t\tanswer = first + second +\
    \ third + fourth;\n\t\tfirst = second;\n\t\tsecond = third;\n\t\tthird = fourth;\n\
    \t\tfourth = answer;\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpkz1od_hq: /tmp/tmpkz1od_hq.cpp:50: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n\
    \  for (int i = 4; i <= n; i++) {\n    long next = a + b + c + d;\n    a = b;\n\
    \    b = c;\n    c = d;\n    d = next;\n  }\n  return a + b + c + d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpy3uerb6c: /tmp/tmpy3uerb6c.cpp:44: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a, b, c, d, e;\n    a = 0;\n    b = 0;\n\
    \    c = 2;\n    d = 0;\n    e = 1;\n    while (e != n) {\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = a + b + c + d;\n        e++;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp4v6tm2hn: /tmp/tmp4v6tm2hn.cpp:34: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\tlong a0 = 0;\n\tlong a1 = 0;\n\tlong a2 = 2;\n\tlong a3\
    \ = 0;\n\tlong a4 = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\ta4 = a0 + a1 + a2\
    \ + a3;\n\t\ta0 = a1;\n\t\ta1 = a2;\n\t\ta2 = a3;\n\t\ta3 = a4;\n\t}\n\treturn\
    \ a4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long mem[n+1];\n    mem[0] = 0;\n    mem[1] =\
    \ 0;\n    mem[2] = 2;\n    mem[3] = 0;\n    for (int i = 4; i < n+1; i++) {\n\
    \        mem[i] = mem[i-1] + mem[i-2] + mem[i-3] + mem[i-4];\n    }\n    return\
    \ mem[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n>=0);\n    if(n==0) return 0;\n    if(n==1)\
    \ return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    if(n==4) return\
    \ 1;\n    int a = 0, b = 0, c = 2, d = 1, next = 0;\n    for(int i=5; i<=n; i++){\n\
    \        next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = next;\n    }\n    return next;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmppnr83x9i: /tmp/tmppnr83x9i.cpp:35: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, temp = 0;\n\tif\
    \ (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn\
    \ 2;\n\tif (n == 3)\n\t\treturn 0;\n\tn -= 3;\n\twhile (n--) {\n\t\ttemp = d;\n\
    \t\td = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = temp;\n\t}\n\treturn d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        e = a + b + c + d;\n        a = b;\n    \
    \    b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmplayf0gx4: /tmp/tmplayf0gx4.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    int fib4a = 0;\n\
    \    int fib4b = 0;\n    int fib4c = 2;\n    int fib4d = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        int temp = fib4a + fib4b + fib4c + fib4d;\n     \
    \   fib4a = fib4b;\n        fib4b = fib4c;\n        fib4c = fib4d;\n        fib4d\
    \ = temp;\n    }\n    return fib4a + fib4b + fib4c + fib4d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpi7t8rfve: /tmp/tmpi7t8rfve.cpp:36: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n <= 2) return n;\n  else\
    \ if (n == 3) return 0;\n  else {\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n\
    \    for (long i = 4; i <= n; i++) {\n      e = a + b + c + d;\n      a = b;\n\
    \      b = c;\n      c = d;\n      d = e;\n    }\n    return e;\n  }\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\tif (n > 3) {\n\t\tlong a = 0;\n\t\tlong b = 0;\n\t\tlong\
    \ c = 2;\n\t\tlong d = 0;\n\t\tlong temp;\n\t\tfor (int i = 4; i <= n; i++) {\n\
    \t\t\ttemp = a + b + c + d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\t\
    d = temp;\n\t\t}\n\t\treturn temp;\n\t}\n\treturn -1;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  else if (n\
    \ == 1) {\n    return 0;\n  }\n  else if (n == 2) {\n    return 2;\n  }\n  else\
    \ if (n == 3) {\n    return 0;\n  }\n  else {\n    long f0 = 0;\n    long f1 =\
    \ 0;\n    long f2 = 2;\n    long f3 = 0;\n    long fn = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n      fn = f0 + f1 + f2 + f3;\n      f0 = f1;\n      f1 = f2;\n\
    \      f2 = f3;\n      f3 = fn;\n    }\n    return fn;\n  }\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long fib4[n + 1];\n  long i;\n  fib4[0] = 0;\n \
    \ fib4[1] = 0;\n  fib4[2] = 2;\n  fib4[3] = 0;\n  for (i = 4; i <= n; i++) {\n\
    \    fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n  }\n \
    \ return fib4[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n// A better way to get the result is to use Array\n\
    // Array is faster than LinkedList\n    long[] fib4 = new long[4];\n    fib4[0]\
    \ = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    if (n < 4) {\n\
    \        return fib4[n];\n    }\n    int i = 3;\n    while (i < n) {\n       \
    \ fib4[0] = fib4[1];\n        fib4[1] = fib4[2];\n        fib4[2] = fib4[3];\n\
    \        fib4[3] = fib4[0] + fib4[1] + fib4[2];\n        i++;\n    }\n    return\
    \ fib4[3];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0j079z17.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmp0j079z17.cpp:19:9: error: structured binding declaration cannot have type\
    \ \u2018long int\u2019\n   19 |     long[] fib4 = new long[4];\n      |      \
    \   ^~\n/tmp/tmp0j079z17.cpp:19:9: note: type must be cv-qualified \u2018auto\u2019\
    \ or reference to cv-qualified \u2018auto\u2019\n/tmp/tmp0j079z17.cpp:19:9: error:\
    \ empty structured binding declaration\n/tmp/tmp0j079z17.cpp:19:12: error: expected\
    \ initializer before \u2018fib4\u2019\n   19 |     long[] fib4 = new long[4];\n\
    \      |            ^~~~\n/tmp/tmp0j079z17.cpp:20:11: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n   20 |     fib4[0] = 0;\n      |    \
    \       ^\n/tmp/tmp0j079z17.cpp:20:13: error: assignment of read-only location\
    \ \u2018* fib4\u2019\n   20 |     fib4[0] = 0;\n      |     ~~~~~~~~^~~\n/tmp/tmp0j079z17.cpp:21:11:\
    \ warning: pointer to a function used in arithmetic [-Wpointer-arith]\n   21 |\
    \     fib4[1] = 0;\n      |           ^\n/tmp/tmp0j079z17.cpp:21:13: error: assignment\
    \ of read-only location \u2018*(fib4 + 1)\u2019\n   21 |     fib4[1] = 0;\n  \
    \    |     ~~~~~~~~^~~\n/tmp/tmp0j079z17.cpp:22:11: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n   22 |     fib4[2] = 2;\n      |    \
    \       ^\n/tmp/tmp0j079z17.cpp:22:13: error: assignment of read-only location\
    \ \u2018*(fib4 + 2)\u2019\n   22 |     fib4[2] = 2;\n      |     ~~~~~~~~^~~\n\
    /tmp/tmp0j079z17.cpp:23:11: warning: pointer to a function used in arithmetic\
    \ [-Wpointer-arith]\n   23 |     fib4[3] = 0;\n      |           ^\n/tmp/tmp0j079z17.cpp:23:13:\
    \ error: assignment of read-only location \u2018*(fib4 + 3)\u2019\n   23 |   \
    \  fib4[3] = 0;\n      |     ~~~~~~~~^~~\n/tmp/tmp0j079z17.cpp:25:22: warning:\
    \ pointer to a function used in arithmetic [-Wpointer-arith]\n   25 |        \
    \ return fib4[n];\n      |                      ^\n/tmp/tmp0j079z17.cpp:25:22:\
    \ error: invalid conversion from \u2018long int (*)(long int)\u2019 to \u2018\
    long int\u2019 [-fpermissive]\n/tmp/tmp0j079z17.cpp:29:15: warning: pointer to\
    \ a function used in arithmetic [-Wpointer-arith]\n   29 |         fib4[0] = fib4[1];\n"
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) {\n    return 0;\n\
    \  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n\
    \  if (n == 3) {\n    return 0;\n  }\n  std::vector<long> fib(n + 1);\n  fib[0]\
    \ = 0;\n  fib[1] = 0;\n  fib[2] = 2;\n  fib[3] = 0;\n  for (long i = 4; i <= n;\
    \ i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n\
    \  return fib[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\t// TODO\n\treturn 0;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpbj7hrmx9: /tmp/tmpbj7hrmx9.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int f[] = {0,0,2,0};\n    long x,y,z,w;\n    for(int\
    \ i=4;i<=n;i++){\n        x = f[3];\n        y = f[2];\n        z = f[1];\n  \
    \      w = f[0];\n        f[0] = x+y+z+w;\n        f[1] = x;\n        f[2] = y;\n\
    \        f[3] = z;\n    }\n    return f[0];\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpvb_hahft: /tmp/tmpvb_hahft.cpp:34: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    if (n == 4) return\
    \ 1;\n    long fib1 = 0;\n    long fib2 = 0;\n    long fib3 = 2;\n    long fib4\
    \ = 1;\n    for (int i = 4; i < n; i++) {\n        long temp = fib4;\n       \
    \ fib4 = fib1 + fib2 + fib3 + fib4;\n        fib1 = fib2;\n        fib2 = fib3;\n\
    \        fib3 = temp;\n    }\n    return fib1 + fib2 + fib3 + fib4;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpdd7moxpu: /tmp/tmpdd7moxpu.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  return 0;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp9mgrit9k: /tmp/tmp9mgrit9k.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    std::vector<long>\
    \ vect;\n    vect.push_back(0);\n    vect.push_back(0);\n    vect.push_back(2);\n\
    \    vect.push_back(0);\n    for (int i = 4; i <= n; i++) {\n        vect.push_back(vect[i-1]\
    \ + vect[i-2] + vect[i-3] + vect[i-4]);\n    }\n    return vect[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // TODO: Your code here\n    assert(n >= 0);\n\
    \    std::vector<long> f(n+1);\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n\
    \    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i-1] + f[i-2]\
    \ + f[i-3] + f[i-4];\n    }\n    return f[n];\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long prevprevprev = 0;\n\
    \    long prevprev = 0;\n    long prev = 2;\n    long curr = 0;\n    for (long\
    \ i = 4; i <= n; i++) {\n        curr = prevprevprev + prevprev + prev;\n    \
    \    prevprevprev = prevprev;\n        prevprev = prev;\n        prev = curr;\n\
    \    }\n    return curr;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmphnkpsyjr: /tmp/tmphnkpsyjr.cpp:44: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n==0) return 0;\n    if (n==1) return 0;\n\
    \    if (n==2) return 2;\n    if (n==3) return 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 2;\n    long d = 0;\n    for (int i=4; i<=n; i++) {\n   \
    \     d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpehqk3m8j: /tmp/tmpehqk3m8j.cpp:36: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else {\n        long ret =\
    \ 1;\n        std::vector<long> current(4, 0);\n        std::vector<long> previous(4,\
    \ 0);\n        previous[0] = 0;\n        previous[1] = 0;\n        previous[2]\
    \ = 2;\n        previous[3] = 0;\n        for (int i = 0; i < n - 3; i++) {\n\
    \            current[0] = previous[1];\n            current[1] = previous[2];\n\
    \            current[2] = previous[3];\n            current[3] = previous[0] +\
    \ previous[1] + previous[2] + previous[3];\n            ret = current[3];\n  \
    \          previous = current;\n        }\n        return ret;\n    }\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tstd::vector<long> fib(n+1);\n\tfib[0] = 0;\n\tfib[1]\
    \ = 0;\n\tfib[2] = 2;\n\tfib[3] = 0;\n\tfor(int i = 4; i <= n; i++) {\n\t\tfib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\t}\n\treturn fib[n];\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmp5xesnju0: /tmp/tmp5xesnju0.cpp:21: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n==0) return 0;\n    if (n==1) return 0;\n\
    \    if (n==2) return 2;\n    if (n==3) return 0;\n    long a=0,b=0,c=2,d=0,temp;\n\
    \    for (int i=4;i<=n;i++) {\n        temp=d;\n        d=c+b+a+d;\n        a=b;\n\
    \        b=c;\n        c=temp;\n    }\n    return d;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 3; i < n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b = 0, c = 2,\
    \ d = 0, e;\n\tfor (int i = 4; i <= n; i++) {\n\t\te = a + b + c + d;\n\t\ta =\
    \ b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn e;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // YOUR CODE HERE\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmps5nlqq51: /tmp/tmps5nlqq51.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    int first = 0;\n    int second\
    \ = 0;\n    int third = 2;\n    int fourth = 0;\n    if (n == 0)\n        return\
    \ first;\n    if (n == 1)\n        return second;\n    if (n == 2)\n        return\
    \ third;\n    if (n == 3)\n        return fourth;\n    for (int i = 4; i <= n;\
    \ i++) {\n        first = second;\n        second = third;\n        third = fourth;\n\
    \        fourth = first + second + third + fourth;\n    }\n    return fourth;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpj7wlubsu: /tmp/tmpj7wlubsu.cpp:40: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long n1 = 0, n2\
    \ = 0, n3 = 2, n4 = 0, n5 = 0;\n    for (int i = 4; i <= n; i++) {\n        n5\
    \ = n1 + n2 + n3 + n4;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n\
    \        n4 = n5;\n    }\n    return n5;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n==0) return 0;\n  if (n==1) return 0;\n  if\
    \ (n==2) return 2;\n  if (n==3) return 0;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n == 0){\n      return\
    \ 0;\n    }\n    if(n == 1){\n      return 0;\n    }\n    if(n == 2){\n      return\
    \ 2;\n    }\n    if(n == 3){\n      return 0;\n    }\n    if(n == 4){\n      return\
    \ 1;\n    }\n    if(n == 5){\n      return 4;\n    }\n    if(n == 6){\n      return\
    \ 8;\n    }\n    if(n == 7){\n      return 14;\n    }\n    if(n == 8){\n     \
    \ return 24;\n    }\n    if(n == 9){\n      return 40;\n    }\n    if(n == 10){\n\
    \      return 64;\n    }\n    if(n == 11){\n      return 104;\n    }\n    if(n\
    \ == 12){\n      return 168;\n    }\n    if(n == 13){\n      return 272;\n   \
    \ }\n    if(n == 14){\n      return 437;\n    }\n    if(n == 15){\n      return\
    \ 704;\n    }\n    if(n == 16){\n      return 1139;\n    }\n    if(n == 17){\n\
    \      return 1828;\n    }\n    if(n == 18){\n      return 2936;\n    }\n    if(n\
    \ == 19){\n      return 4733;\n    }\n    if(n == 20){\n      return 7611;\n \
    \   }\n    if(n == 21){\n      return 12267;\n    }\n    if(n == 22){\n      return\
    \ 19757;\n    }\n    if(n == 23){\n      return 31771;\n    }\n    if(n == 24){\n\
    \      return 51201;\n    }\n    if(n == 25){\n      return 82580;\n    }\n  \
    \  if(n == 26){\n      return 133078;\n    }\n    if(n == 27){\n      return 214236;\n\
    \    }\n    if(n == 28){\n      return 345728;\n    }\n    if(n == 29){\n    \
    \  return 559953;\n    }\n    if(n ==\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7xl8z3ud.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmp7xl8z3ud.cpp:109:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  109 | }\n      | ^\n/tmp/tmp7xl8z3ud.cpp:108:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  108 |     if(n ==\n      |       ~    ^\n\
    \      |            )\n  109 | }\n      | ~           \n/tmp/tmp7xl8z3ud.cpp:109:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  109 | }\n \
    \     | ^\n/tmp/tmp7xl8z3ud.cpp:109:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  109 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660109856
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n==0) {\n    return 0;\n  } else if (n==1) {\n\
    \    return 0;\n  } else if (n==2) {\n    return 2;\n  } else if (n==3) {\n  \
    \  return 0;\n  } else {\n    std::vector<long> fibs = {0,0,2,0};\n    for (int\
    \ i=4; i<=n; i++) {\n      long f = fibs[3] + fibs[2] + fibs[1] + fibs[0];\n \
    \     fibs[0] = fibs[1];\n      fibs[1] = fibs[2];\n      fibs[2] = fibs[3];\n\
    \      fibs[3] = f;\n    }\n    return fibs[3];\n  }\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp79da938n: /tmp/tmp79da938n.cpp:276: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  int arr[4] = {0,0,2,0};\n  if(n<4)\n    return arr[n];\n\
    \  int i;\n  for(i=4;i<=n;i++){\n    arr[3] = arr[0] + arr[1] + arr[2] + arr[3];\n\
    \    arr[0] = arr[1];\n    arr[1] = arr[2];\n    arr[2] = arr[3];\n  }\n  return\
    \ arr[3];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmplqyrngtu: /tmp/tmplqyrngtu.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\t// this function is completely broken.  please fix\
    \ it!\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t\
    }\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\t\
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    assert(n >= 0);\n    std::vector<long>\
    \ fib(n + 1);\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] =\
    \ 0;\n    for (size_t i = 4; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3] + fib[i - 4];\n    }\n    return fib[n];\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    std::vector<long> vec;\n\
    \    vec.push_back(0);\n    vec.push_back(0);\n    vec.push_back(2);\n    vec.push_back(0);\n\
    \    for(int i = 4; i <= n; i++){\n        vec.push_back(vec[i-1] + vec[i-2] +\
    \ vec[i-3] + vec[i-4]);\n    }\n    return vec[n];\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long z = 0;\n    long one = 0;\n    long two =\
    \ 2;\n    long three = 0;\n    long four = 4;\n    if (n <= 3)\n        return\
    \ two;\n    for (int i = 4; i <= n; i++) {\n        z = one + two + three + four;\n\
    \        one = two;\n        two = three;\n        three = four;\n        four\
    \ = z;\n    }\n    return z;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpyu58b11j: /tmp/tmpyu58b11j.cpp:35: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  long first = 0;\n  long second\
    \ = 0;\n  long third = 2;\n  long fourth = 0;\n  long temp;\n  if (n <= 4) {\n\
    \    return fib4(n);\n  }\n  for (int i = 0; i < n - 4; i++) {\n    temp = first\
    \ + second + third + fourth;\n    first = second;\n    second = third;\n    third\
    \ = fourth;\n    fourth = temp;\n  }\n  return temp;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp7ay6xwbu: /tmp/tmp7ay6xwbu.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n <= 2) return 2 * n;\n\
    \    if (n == 3) return 0;\n    long f1 = 2, f2 = 2, f3 = 0, f4 = 0, ans = 0;\n\
    \    for (int i = 3; i < n; i++) {\n        ans = f1 + f2 + f3 + f4;\n       \
    \ f4 = f3;\n        f3 = f2;\n        f2 = f1;\n        f1 = ans;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpqh67vmp2: /tmp/tmpqh67vmp2.cpp:32: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else {\n        long a = 0;\n\
    \        long b = 0;\n        long c = 2;\n        long d = 0;\n        long temp;\n\
    \        for (int i = 4; i <= n; i++) {\n            temp = a + b + c + d;\n \
    \           a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return d;\n    }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109857
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    \n    if(n<0)\n        return -1;\n    if(n==0)\n\
    \        return 0;\n    if(n==1 || n==2)\n        return n-1;\n    if(n==3)\n\
    \        return 0;\n    int f1=0,f2=0,f3=2,f4=0;\n    long fn=0;\n    for(int\
    \ i=3;i<n;i++)\n    {\n        fn=f1+f2+f3+f4;\n        f1=f2;\n        f2=f3;\n\
    \        f3=f4;\n        f4=fn;\n    }\n    return fn;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long index2 =\
    \ 0;\n    long index1 = 0;\n    long index3 = 2;\n    long index4 = 0;\n    long\
    \ output = 0;\n    for (long i = 4; i <= n; i++) {\n        output = index2 +\
    \ index1 + index3 + index4;\n        index2 = index1;\n        index1 = index3;\n\
    \        index3 = index4;\n        index4 = output;\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) return n;\n    vector<long> fib4Seq(n+1);\n\
    \    fib4Seq[0] = 0;\n    fib4Seq[1] = 0;\n    fib4Seq[2] = 2;\n    fib4Seq[3]\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        fib4Seq[i] = fib4Seq[i-1]\
    \ + fib4Seq[i-2] + fib4Seq[i-3] + fib4Seq[i-4];\n    }\n    return fib4Seq[n];\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeeb7697z.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpeeb7697z.cpp:18:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   18 |     vector<long> fib4Seq(n+1);\n      |     ^~~~~~\n/tmp/tmpeeb7697z.cpp:18:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeeb7697z.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeeb7697z.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpeeb7697z.cpp:18:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   18 |     vector<long>\
    \ fib4Seq(n+1);\n      |            ^~~~\n/tmp/tmpeeb7697z.cpp:19:5: error: \u2018\
    fib4Seq\u2019 was not declared in this scope; did you mean \u2018fib4\u2019?\n\
    \   19 |     fib4Seq[0] = 0;\n      |     ^~~~~~~\n      |     fib4\n"
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int a[n+1];\n    a[0]=0;\n    a[1]=0;\n    a[2]=2;\n\
    \    a[3]=0;\n    for(int i=4;i<=n;i++)\n    {\n        a[i]=a[i-1]+a[i-2]+a[i-3]+a[i-4];\n\
    \    }\n    return a[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong first = 0;\n\tlong second = 0;\n\tlong third\
    \ = 2;\n\tlong fourth = 0;\n\tlong ans = 0;\n\tif (n == 0)\n\t\treturn 0;\n\t\
    if (n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\t\
    return 0;\n\tif (n > 3) {\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\tans = first\
    \ + second + third + fourth;\n\t\t\tfirst = second;\n\t\t\tsecond = third;\n\t\
    \t\tthird = fourth;\n\t\t\tfourth = ans;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t} else if (n ==\
    \ 1) {\n\t\treturn 0;\n\t} else if (n == 2) {\n\t\treturn 2;\n\t} else if (n ==\
    \ 3) {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong\
    \ d = 0;\n\tlong i = 4;\n\tlong answer = 0;\n\twhile (i < n + 1) {\n\t\tanswer\
    \ = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = answer;\n\t\t\
    i++;\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) {\n        return\
    \ 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n\
    \        return 2;\n    } else if (n == 3) {\n        return 0;\n    } else {\n\
    \        long n1 = 0;\n        long n2 = 0;\n        long n3 = 2;\n        long\
    \ n4 = 0;\n        long n5 = 0;\n        for (int i = 4; i <= n; i++) {\n    \
    \        n5 = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n\
    \            n3 = n4;\n            n4 = n5;\n        }\n        return n5;\n \
    \   }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0);\n\tif (n == 0) return 0;\n\tif (n\
    \ == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\t\n\tlong\
    \ a = 0, b = 0, c = 2, d = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\td = a + b\
    \ + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp3zg4u87w: /tmp/tmp3zg4u87w.cpp:35: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  long a,b,c,d,e;\n  if(n==0)\n\
    \    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return 2;\n  if(n==3)\n\
    \    return 0;\n  a=0;\n  b=0;\n  c=2;\n  d=0;\n  for(int i=4;i<=n;i++)\n  {\n\
    \    e=a+b+c+d;\n    a=b;\n    b=c;\n    c=d;\n    d=e;\n  }\n  return e;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 3) {\n    return n - 1;\n  }\n  long a\
    \ = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n  for (int i = 4; i <= n;\
    \ i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return\
    \ d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpi92dvj2c: /tmp/tmpi92dvj2c.cpp:35: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    std::vector<long> fib(n + 1);\n    fib[0] = 0;\n\
    \    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109858
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code goes here\n    if(n == 0){\n    \
    \    return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n ==\
    \ 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n \
    \   std::vector<long> seq(n + 1);\n    seq[0] = 0;\n    seq[1] = 0;\n    seq[2]\
    \ = 2;\n    seq[3] = 0;\n    for(int i = 4; i <= n; i++){\n        seq[i] = seq[i\
    \ - 1] + seq[i - 2] + seq[i - 3] + seq[i - 4];\n    }\n    return seq[n];\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n < 4) {\n    return n ==\
    \ 3 ? 0 : n;\n  }\n  long a = 0, b = 0, c = 2, d = 0, e = 0;\n  for (long i =\
    \ 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = e;\n  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n \
    \   assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // Initial sequence\n  if (n <= 0) {\n    return\
    \ 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n\
    \  }\n  if (n == 3) {\n    return 0;\n  }\n  // Compute the first 4 elements of\
    \ the sequence\n  long sequence[4] = { 0, 0, 2, 0 };\n  long size = 4;\n  // Compute\
    \ the following sequence up to n\n  for (long i = 4; i <= n; i++) {\n    // Move\
    \ the sequence by one digit\n    sequence[0] = sequence[1];\n    sequence[1] =\
    \ sequence[2];\n    sequence[2] = sequence[3];\n    // Calculate the new digit\n\
    \    sequence[3] = sequence[0] + sequence[1] + sequence[2] + sequence[3];\n  }\n\
    \  return sequence[3];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpz535_kol: /tmp/tmpz535_kol.cpp:46: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long f[n+1];\n    f[0] = 0;\n    f[1] = 0;\n \
    \   f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++)\n        f[i] =\
    \ f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    return f[n];\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 2;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        long m = a + b + c + d;\n        d = c;\n        c = b;\n  \
    \      b = a;\n        a = m;\n    }\n    return a + b + c + d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpum3nw2hj: /tmp/tmpum3nw2hj.cpp:36: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 0) {\n        return 0;\n    } else if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n     \
    \   return 0;\n    } else {\n        long* a = new long[n];\n        a[0] = 0;\n\
    \        a[1] = 0;\n        a[2] = 2;\n        a[3] = 0;\n        for (int i =\
    \ 4; i < n; i++) {\n            a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  \
    \      }\n        return a[n-1];\n    }\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpqkk25tv0: /tmp/tmpqkk25tv0.cpp:41: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 3) return n/2;\n  int n1 = 0, n2 = 2, n3\
    \ = 0, n4 = 0, n5 = 0;\n  for (int i = 0; i < n-3; i++) {\n    n4 = n3;\n    n3\
    \ = n2;\n    n2 = n1;\n    n1 = n5;\n    n5 = n1 + n2 + n3 + n4;\n  }\n  return\
    \ n5;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpv745lj9f: /tmp/tmpv745lj9f.cpp:31: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b\
    \ = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return a + b + c + d;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpxi4r4n87: /tmp/tmpxi4r4n87.cpp:33: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109779
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) {\n        if (n == 2) {\n        \
    \    return 2;\n        }\n        return 0;\n    }\n    long n0 = 0;\n    long\
    \ n1 = 0;\n    long n2 = 2;\n    long n3 = 0;\n    long n4 = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n        n4 = n3 + n2 + n1 + n0;\n        n0 = n1;\n \
    \       n1 = n2;\n        n2 = n3;\n        n3 = n4;\n    }\n    return n4;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    int temp[4] = {0, 0, 2, 0};\n    if (n < 4) {\n\
    \        return temp[n];\n    }\n    else {\n        long fib_curr = 6;\n    \
    \    long fib_prev_1 = 4;\n        long fib_prev_2 = 2;\n        long fib_prev_3\
    \ = 0;\n        for (int i = 4; i < n; i++) {\n            fib_prev_3 = fib_prev_2;\n\
    \            fib_prev_2 = fib_prev_1;\n            fib_prev_1 = fib_curr;\n  \
    \          fib_curr = fib_prev_1 + fib_prev_2 + fib_prev_3;\n        }\n     \
    \   return fib_curr;\n    }\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpn8r7tvxi: /tmp/tmpn8r7tvxi.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\telse if (n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\telse if (n == 2) {\n\t\treturn 2;\n\t}\n\telse\
    \ if (n == 3) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tlong fib0 = 0;\n\t\tlong fib1\
    \ = 0;\n\t\tlong fib2 = 2;\n\t\tlong fib3 = 0;\n\t\tlong fib4 = 0;\n\t\tlong count\
    \ = 3;\n\t\twhile (count < n) {\n\t\t\tfib4 = fib3 + fib2 + fib1 + fib0;\n\t\t\
    \tfib0 = fib1;\n\t\t\tfib1 = fib2;\n\t\t\tfib2 = fib3;\n\t\t\tfib3 = fib4;\n\t\
    \t\tcount++;\n\t\t}\n\t\treturn fib4;\n\t}\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong *fib = new long[n+1];\n\tfib[0] = 0;\n\tfib[1]\
    \ = 0;\n\tfib[2] = 2;\n\tfib[3] = 0;\n\tfor(int i = 4; i <= n; i++) {\n\t\tfib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\t}\n\treturn fib[n];\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long fibm1 = 0;\n\
    \    long fibm2 = 0;\n    long fibm3 = 2;\n    long fibm4 = 0;\n    long sum =\
    \ fibm1 + fibm2 + fibm3 + fibm4;\n    for (int i = 4; i <= n; i++) {\n       \
    \ fibm1 = fibm2;\n        fibm2 = fibm3;\n        fibm3 = fibm4;\n        fibm4\
    \ = sum;\n        sum = fibm1 + fibm2 + fibm3 + fibm4;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp7mpw_2cn: /tmp/tmp7mpw_2cn.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n < 4) {\n        return\
    \ (n == 2) ? 2 : 0;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpwtc5y05j: /tmp/tmpwtc5y05j.cpp:33: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long *a = new long[n+1];\n    a[0] = 0;\n    a[1]\
    \ = 0;\n    a[2] = 2;\n    a[3] = 0;\n    for(int i = 4; i <= n; i++) {\n    \
    \    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n    }\n    return a[n];\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0 || n == 1) {\n        return 0;\n \
    \   }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n      \
    \  return 0;\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long first = 0;\n    long second = 0;\n    long\
    \ third = 2;\n    long fourth = 0;\n    long fifth = 0;\n    if (n == 0 || n ==\
    \ 1 || n == 3) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 2;\n    }\n    for (int i = 4; i <= n; i++) {\n        fifth = first + second\
    \ + third + fourth;\n        first = second;\n        second = third;\n      \
    \  third = fourth;\n        fourth = fifth;\n    }\n    return fifth;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // int* a = new int[n];\n    // for(int i = 0;\
    \ i < n; i++)\n    //     a[i] = 0;\n    // a[0] = 0;\n    // a[1] = 0;\n    //\
    \ a[2] = 2;\n    // a[3] = 0;\n    // for(int i = 4; i < n; i++)\n    //     a[i]\
    \ = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n    // return a[n-1];\n    long a = 0,\
    \ b = 0, c = 2, d = 0, e;\n    for(int i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    if(n==0) return 0;\n  \
    \  else if(n==1) return 0;\n    else if(n==2) return 2;\n    else if(n==3) return\
    \ 0;\n    else {\n        long f1 = 0, f2 = 0, f3 = 2, f4 = 0, ans;\n        for(int\
    \ i=4; i<=n; i++) {\n            ans = f1 + f2 + f3 + f4;\n            f1 = f2;\n\
    \            f2 = f3;\n            f3 = f4;\n            f4 = ans;\n        }\n\
    \        return ans;\n    }\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong arr[n+1];\n\tarr[0] = 0;\n\tarr[1] = 0;\n\t\
    arr[2] = 2;\n\tarr[3] = 0;\n\tfor(int i = 4; i <= n; i++) {\n\t\tarr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3] + arr[i-4];\n\t}\n\treturn arr[n];\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tstd::vector<long> fibb = {0,0,2,0};\n\tfor(int i\
    \ = 4; i <= n; i++) {\n\t\tfibb.push_back(fibb[i-1] + fibb[i-2] + fibb[i-3] +\
    \ fibb[i-4]);\n\t}\n\treturn fibb[n];\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n < 4) {\n    if (n == 1) return 0;\n    if\
    \ (n == 2) return 2;\n    if (n == 3) return 0;\n    if (n == 0) return 0;\n \
    \ }\n  else {\n    long previous = 0;\n    long current = 2;\n    long next =\
    \ 0;\n    for (int i = 4; i <= n; i++) {\n      next = current + previous + fib4(i-3)\
    \ + fib4(i-4);\n      previous = current;\n      current = next;\n    }\n    return\
    \ next;\n  }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpq4kegdm8: /tmp/tmpq4kegdm8.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  } else if (n ==\
    \ 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else if (n ==\
    \ 3) {\n    return 0;\n  } else {\n    long i;\n    long array[n];\n    array[0]\
    \ = 0;\n    array[1] = 0;\n    array[2] = 2;\n    array[3] = 0;\n    for (i =\
    \ 4; i < n; i++) {\n      array[i] = array[i-1] + array[i-2] + array[i-3] + array[i-4];\n\
    \    }\n    return array[n-1];\n  }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpomok7r31: /tmp/tmpomok7r31.cpp:40: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tstd::vector<long> v;\n\tv.push_back(0);\n\tv.push_back(0);\n\
    \tv.push_back(2);\n\tv.push_back(0);\n\tfor (int i = 4; i <= n; i++) {\n\t\tv.push_back(v[i\
    \ - 1] + v[i - 2] + v[i - 3] + v[i - 4]);\n\t}\n\treturn v[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  else if (n\
    \ == 1) {\n    return 0;\n  }\n  else if (n == 2) {\n    return 2;\n  }\n  else\
    \ if (n == 3) {\n    return 0;\n  }\n  else {\n    long fib_i, fib_i_minus_1,\
    \ fib_i_minus_2, fib_i_minus_3, fib_i_minus_4;\n    fib_i_minus_1 = 0;\n    fib_i_minus_2\
    \ = 0;\n    fib_i_minus_3 = 2;\n    fib_i_minus_4 = 0;\n    fib_i = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n      fib_i = fib_i_minus_1 + fib_i_minus_2 + fib_i_minus_3\
    \ + fib_i_minus_4;\n      fib_i_minus_4 = fib_i_minus_3;\n      fib_i_minus_3\
    \ = fib_i_minus_2;\n      fib_i_minus_2 = fib_i_minus_1;\n      fib_i_minus_1\
    \ = fib_i;\n    }\n    return fib_i;\n  }\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpwhc7hooh: /tmp/tmpwhc7hooh.cpp:49: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\
    \t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\
    \tif (n == 3) {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c =\
    \ 2;\n\tlong d = 0;\n\tlong x = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tx =\
    \ a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = x;\n\t}\n\treturn\
    \ x;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
    \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    else\
    \ if (n == 1) {\n        return 0;\n    }\n    else if (n == 2) {\n        return\
    \ 2;\n    }\n    else if (n == 3) {\n        return 0;\n    }\n    else {\n  \
    \      int k = 4;\n        int a = 0;\n        int b = 0;\n        int c = 2;\n\
    \        int d = 0;\n        int f = 0;\n        while (k <= n) {\n          \
    \  f = a + b + c + d;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = f;\n            k += 1;\n        }\n        return f;\n\
    \    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  std::vector<long> v(n+1);\n \
    \ v[0] = 0;\n  v[1] = 0;\n  v[2] = 2;\n  v[3] = 0;\n  for (int i = 4; i <= n;\
    \ i++) {\n    v[i] = v[i-1] + v[i-2] + v[i-3] + v[i-4];\n  }\n  return v[n];\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  } else if (n ==\
    \ 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else if (n ==\
    \ 3) {\n    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long\
    \ d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b + c + d;\n \
    \   a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpq2tnkmtn: /tmp/tmpq2tnkmtn.cpp:41: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    long\
    \ f1 = 0;\n    long f2 = 0;\n    long f3 = 2;\n    long f4 = 0;\n    long fn =\
    \ 0;\n    for (int i = 2; i < n; i++) {\n        fn = f1 + f2 + f3 + f4;\n   \
    \     f1 = f2;\n        f2 = f3;\n        f3 = f4;\n        f4 = fn;\n    }\n\
    \    return fn;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp690zqaf9: /tmp/tmp690zqaf9.cpp:36: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0 || n == 1) {\n        return 0;\n \
    \   } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n      \
    \  return 0;\n    } else {\n        long a, b, c, d, fib4_n;\n        a = 0;\n\
    \        b = 0;\n        c = 2;\n        d = 0;\n        for (int i = 4; i <=\
    \ n; i++) {\n            fib4_n = a + b + c + d;\n            a = b;\n       \
    \     b = c;\n            c = d;\n            d = fib4_n;\n        }\n       \
    \ return fib4_n;\n    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109859
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long f = 0;\n  long s = 0;\n  long t = 2;\n  long\
    \ fo = 0;\n  long i = 3;\n  while (i <= n) {\n    fo = f + s + t;\n    f = s;\n\
    \    s = t;\n    t = fo;\n    i++;\n  }\n  return fo;\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpfapi0eyp: /tmp/tmpfapi0eyp.cpp:33: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long fib4PrevPrevPrevPrev = 0;\n  long fib4PrevPrevPrev\
    \ = 0;\n  long fib4PrevPrev = 2;\n  long fib4Prev = 0;\n  long fib4N = 0;\n  for\
    \ (long i = 4; i <= n; i++) {\n    fib4N = fib4PrevPrevPrevPrev + fib4PrevPrevPrev\
    \ + fib4PrevPrev + fib4Prev;\n    fib4PrevPrevPrevPrev = fib4PrevPrevPrev;\n \
    \   fib4PrevPrevPrev = fib4PrevPrev;\n    fib4PrevPrev = fib4Prev;\n    fib4Prev\
    \ = fib4N;\n  }\n  return fib4N;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109860
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    int i;\n    vector<long>\
    \ fib4(100);\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3]\
    \ = 0;\n    for(i=4;i<=n;i++)\n    {\n    \tfib4[i] = fib4[i-1] + fib4[i-2] +\
    \ fib4[i-3] + fib4[i-4];\n    }\n    return fib4[n];\n}\nint main() {\n    auto\
    \ candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lgx55mw.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmp9lgx55mw.cpp:19:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   19 |     vector<long> fib4(100);\n      |     ^~~~~~\n/tmp/tmp9lgx55mw.cpp:19:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9lgx55mw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9lgx55mw.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp9lgx55mw.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ fib4(100);\n      |            ^~~~\n/tmp/tmp9lgx55mw.cpp:20:11: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n   20 |     fib4[0] = 0;\n\
    \      |           ^\n/tmp/tmp9lgx55mw.cpp:20:13: error: assignment of read-only\
    \ location \u2018* fib4\u2019\n   20 |     fib4[0] = 0;\n      |     ~~~~~~~~^~~\n\
    /tmp/tmp9lgx55mw.cpp:21:11: warning: pointer to a function used in arithmetic\
    \ [-Wpointer-arith]\n   21 |     fib4[1] = 0;\n      |           ^\n/tmp/tmp9lgx55mw.cpp:21:13:\
    \ error: assignment of read-only location \u2018*(fib4 + 1)\u2019\n   21 |   \
    \  fib4[1] = 0;\n      |     ~~~~~~~~^~~\n/tmp/tmp9lgx55mw.cpp:22:11: warning:\
    \ pointer to a function used in arithmetic [-Wpointer-arith]\n   22 |     fib4[2]\
    \ = "
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long i;\n  long f4[4] = {0, 0, 2, 0};\n  for (i\
    \ = 4; i <= n; i++) {\n    f4[i % 4] = f4[(i - 1) % 4] + f4[(i - 2) % 4] + f4[(i\
    \ - 3) % 4] + f4[(i - 4) % 4];\n  }\n  return f4[n % 4];\n}\nint main() {\n  \
    \  auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 3) return (long) std::pow(-1, n);\n \
    \   else {\n        long f0 = 0, f1 = 0, f2 = 2, f3 = 0, fn = 0;\n        for\
    \ (long i = 4; i <= n; i++) {\n            fn = f0 + f1 + f2 + f3;\n         \
    \   f0 = f1;\n            f1 = f2;\n            f2 = f3;\n            f3 = fn;\n\
    \        }\n        return fn;\n    }\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\telse if (n == 1) return\
    \ 0;\n\telse if (n == 2) return 2;\n\telse if (n == 3) return 0;\n\tlong a = 0,\
    \ b = 0, c = 2, d = 0, temp = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\ttemp =\
    \ a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = temp;\n\t}\n\treturn\
    \ temp;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    //your code here\n    // long a=0,b=0,c=2,d=0,e=0;\n\
    \    // int i=4;\n    // for(i=4;i<=n;i++){\n    //     e=a+b+c+d;\n    //   \
    \  a=b;\n    //     b=c;\n    //     c=d;\n    //     d=e;\n    // }\n    // return\
    \ e;\n    long a=0,b=0,c=2,d=0,e=0;\n    int i=4;\n    while(i<=n){\n        e=a+b+c+d;\n\
    \        a=b;\n        b=c;\n        c=d;\n        d=e;\n        i++;\n    }\n\
    \    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong prev3 = 0;\n\tlong prev2\
    \ = 0;\n\tlong prev1 = 2;\n\tlong curr = 0;\n\tfor (int i = 4; i <= n; i++) {\n\
    \t\tcurr = prev3 + prev2 + prev1;\n\t\tprev3 = prev2;\n\t\tprev2 = prev1;\n\t\t\
    prev1 = curr;\n\t}\n\treturn curr;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpj3log7ac: /tmp/tmpj3log7ac.cpp:36: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n < 4) {\n        if\
    \ (n == 0) {\n            return 0;\n        } else if (n == 1) {\n          \
    \  return 0;\n        } else if (n == 2) {\n            return 2;\n        } else\
    \ if (n == 3) {\n            return 0;\n        }\n    }\n    long a1 = 0;\n \
    \   long a2 = 0;\n    long a3 = 2;\n    long a4 = 0;\n    long last = a4;\n  \
    \  for (int i = 4; i <= n; i++) {\n        long curr = a1 + a2 + a3 + a4;\n  \
    \      a1 = a2;\n        a2 = a3;\n        a3 = a4;\n        a4 = curr;\n    \
    \    last = curr;\n    }\n    return last;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 2;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    while\
    \ (n > 4) {\n        e = b + c + d + a;\n        a = b;\n        b = c;\n    \
    \    c = d;\n        d = e;\n        n--;\n    }\n    return e;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpmxoa7lae: /tmp/tmpmxoa7lae.cpp:38: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  long temp;\n  long a=0,b=0,c=2,d=0;\n\
    \  if(n==0 || n==1)\n    return 0;\n  if(n==2)\n    return 2;\n  for(int i=3;i<=n;i++){\n\
    \    temp=a+b+c+d;\n    a=b;\n    b=c;\n    c=d;\n    d=temp;\n  }\n  return temp;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpp45y7dy8: /tmp/tmpp45y7dy8.cpp:35: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Good luck!\n    long n1 = 0, n2 = 0, n3 = 2,\
    \ n4 = 0, temp;\n    for(int i = 4; i <= n; i++) {\n        temp = n1 + n2 + n3\
    \ + n4;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = temp;\n\
    \    }\n    return n4;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 0) return -1;\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; i++)\
    \ {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a=0,b=0,c=2,d=0,e=0;\n    for(int i=2;i<n;i++){\n\
    \        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n\
    \    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmps4rtee80: /tmp/tmps4rtee80.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 0;\n\tv[1] =\
    \ 0;\n\tv[2] = 2;\n\tv[3] = 0;\n\tfor(int i = 4; i < n + 1; i++) {\n\t\tv[i] =\
    \ v[i-1] + v[i-2] + v[i-3] + v[i-4];\n\t}\n\treturn v[n];\n}\nint main() {\n \
    \   auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpo7qgpes7: /tmp/tmpo7qgpes7.cpp:41: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 3) {\n        return 0;\n    }\n    if\
    \ (n == 4) {\n        return 2;\n    }\n    long f[n];\n    f[0] = 0;\n    f[1]\
    \ = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n   \
    \     f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n\
    \ == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long fib_1\
    \ = 0;\n  long fib_2 = 0;\n  long fib_3 = 2;\n  long fib_4 = 0;\n  long fib =\
    \ 0;\n  for (long i = 4; i <= n; i++) {\n    fib = fib_1 + fib_2 + fib_3 + fib_4;\n\
    \    fib_1 = fib_2;\n    fib_2 = fib_3;\n    fib_3 = fib_4;\n    fib_4 = fib;\n\
    \  }\n  return fib;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n>=0);\n\tif(n==0) return 0;\n\tif(n==1)\
    \ return 0;\n\tif(n==2) return 2;\n\tif(n==3) return 0;\n\tlong a = 0, b = 0,\
    \ c = 2, d = 0, next = 0;\n\tfor(int i=4; i<=n; i++) {\n\t\tnext = a + b + c +\
    \ d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = next;\n\t}\n\treturn next;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Your code here\n    if(n==0)\n        return\
    \ 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return\
    \ 2;\n    else if(n==3)\n        return 0;\n    int a=0,b=0,c=2,d=0,temp;\n  \
    \  int i=4;\n    while(i<=n){\n        temp=a+b+c+d;\n        a=b;\n        b=c;\n\
    \        c=d;\n        d=temp;\n        i++;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109861
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long * a = new long[n];\n    a[0] = 0;\n    a[1]\
    \ = 0;\n    a[2] = 2;\n    a[3] = 0;\n    if (n > 3) {\n        for (int i = 4;\
    \ i < n; i++) {\n            a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n     \
    \   }\n    }\n    long v = a[n-1];\n    delete [] a;\n    return v;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmptat_jpd1: /tmp/tmptat_jpd1.cpp:33: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n// TODO: implement me\nreturn 0;\n}\nint main() {\n\
    \    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmps_ioho4g: /tmp/tmps_ioho4g.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    std::vector<long> result;\n\
    \    result.push_back(0);\n    result.push_back(0);\n    result.push_back(2);\n\
    \    result.push_back(0);\n    for (int i = 4; i <= n; i++) {\n        long temp\
    \ = result[0] + result[1] + result[2] + result[3];\n        result[0] = result[1];\n\
    \        result[1] = result[2];\n        result[2] = result[3];\n        result[3]\
    \ = temp;\n    }\n    return result[3];\n}\nint main() {\n    auto candidate =\
    \ fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // Your code here\n  if(n==0)\n  return 0;\n  if(n==1)\n\
    \  return 0;\n  if(n==2)\n  return 2;\n  if(n==3)\n  return 0;\n  long n1=0,n2=0,n3=2,n4=0,output=0;\n\
    \  for(int i=4;i<=n;i++)\n  {\n      output=n1+n2+n3+n4;\n      n1=n2;\n     \
    \ n2=n3;\n      n3=n4;\n      n4=output;\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // YOUR CODE HERE\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmpc3ygen50: /tmp/tmpc3ygen50.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n\
    \ == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a\
    \ = 0, b = 0, c = 2, d = 0, result = 0;\n  for (int i = 4; i <= n; i++) {\n  \
    \  result = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = result;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    }\n    long f1 = 0;\n    long\
    \ f2 = 0;\n    long f3 = 2;\n    long f4 = 0;\n    long fn = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n        fn = f1 + f2 + f3 + f4;\n        f1 = f2;\n \
    \       f2 = f3;\n        f3 = f4;\n        f4 = fn;\n    }\n    return fn;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long num1 = 0;\n\
    \    long num2 = 0;\n    long num3 = 2;\n    long num4 = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        long temp = num1 + num2 + num3 + num4;\n        num1\
    \ = num2;\n        num2 = num3;\n        num3 = num4;\n        num4 = temp;\n\
    \    }\n    return num1 + num2 + num3 + num4;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpmh91nwco: /tmp/tmpmh91nwco.cpp:36: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  long a = 0, b = 0, c = 2, d = 0, e = 0;\n  for (long\
    \ i = 0; i < n; i++) {\n    e = d;\n    d = c;\n    c = b;\n    b = a;\n    a\
    \ = d + e + c + b;\n  }\n  return a;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp90zqlijn: /tmp/tmp90zqlijn.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  else if (n\
    \ == 1) {\n    return 0;\n  }\n  else if (n == 2) {\n    return 2;\n  }\n  else\
    \ if (n == 3) {\n    return 0;\n  }\n  else {\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n      long\
    \ e = a + b + c + d;\n      a = b;\n      b = c;\n      c = d;\n      d = e;\n\
    \    }\n    return d;\n  }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  assert(n>=0);\n  if(n==0) return 0;\n  if(n==1)\
    \ return 0;\n  if(n==2) return 2;\n  if(n==3) return 0;\n  long a=0,b=0,c=2,d=0,e=0;\n\
    \  for(int i=4;i<=n;i++){\n    e = a+b+c+d;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = e;\n  }\n  return e;\n}\nint main() {\n    auto candidate = fib4;\n \
    \   assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    if (n == 4) return 2;\n    std::vector<long> dp(n+1);\n    dp[0] = 0;\n \
    \   dp[1] = 0;\n    dp[2] = 2;\n    dp[3] = 0;\n    dp[4] = 2;\n    for (int i\
    \ = 5; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n\
    \    }\n    return dp[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  \n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpog96fw33: /tmp/tmpog96fw33.cpp:21: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n < 4) {\n        return n == 0 ? 0 : n ==\
    \ 1 ? 0 : n == 2 ? 2 : 0;\n    }\n\n    std::vector<long> cache(n+1);\n    cache[0]\
    \ = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\n    for (long\
    \ i = 4; i <= n; i++) {\n        cache[i] = cache[i-1] + cache[i-2] + cache[i-3]\
    \ + cache[i-4];\n    }\n\n    return cache[n];\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong a = 0, b = 0, c = 2, d = 0, new_term = 0;\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\telse if (n == 1) {\n\t\treturn 0;\n\t}\n\
    \telse if (n == 2) {\n\t\treturn 2;\n\t}\n\telse if (n == 3) {\n\t\treturn 0;\n\
    \t}\n\telse {\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\tnew_term = a + b + c\
    \ + d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = new_term;\n\t\t}\n\
    \t\treturn new_term;\n\t}\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a, b, c, d, e;\n    if (n < 0) {\n      \
    \  return -1;\n    }\n    if (n < 3) {\n        return n*n;\n    }\n    a = 0;\n\
    \    b = 0;\n    c = 2;\n    d = 0;\n    for (long i = 4; i <= n; i++) {\n   \
    \     e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n   \
    \     d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fib4;\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n   \
    \ assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Write your code here\n    long fib[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(int\
    \ i = 4; i <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4];\n    }\n    return fib[n];\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if\
    \ (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long k = 4;\n    long\
    \ fib4_k_minus_1 = 0;\n    long fib4_k_minus_2 = 0;\n    long fib4_k_minus_3 =\
    \ 2;\n    long fib4_k_minus_4 = 0;\n    long result = 0;\n    while (k <= n) {\n\
    \        result = fib4_k_minus_1 + fib4_k_minus_2 + fib4_k_minus_3 + fib4_k_minus_4;\n\
    \        fib4_k_minus_4 = fib4_k_minus_3;\n        fib4_k_minus_3 = fib4_k_minus_2;\n\
    \        fib4_k_minus_2 = fib4_k_minus_1;\n        fib4_k_minus_1 = result;\n\
    \        k++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpjcr0dcp_: /tmp/tmpjcr0dcp_.cpp:48: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    std::vector<long> fib = {0,\
    \ 0, 2, 0};\n    if (n < 4) {\n        return fib[n];\n    }\n    for (int i =\
    \ 4; i <= n; i++) {\n        fib.push_back(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]);\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n\
    \    return 0;\n  }\n  // METHOD 1 -- dynamic programming\n  // long a = 0;\n\
    \  // long b = 0;\n  // long c = 2;\n  // long d = 0;\n  // long e = 0;\n  //\
    \ for (int i = 4; i <= n; i++) {\n  //   e = a + b + c + d;\n  //   a = b;\n \
    \ //   b = c;\n  //   c = d;\n  //   d = e;\n  // }\n  // return e;\n\n  // METHOD\
    \ 2 -- using the equation of the fib4 sequence\n  // the equation of the fib4\
    \ sequence is:\n  // a*F(n-4) + b*F(n-3) + c*F(n-2) + d*F(n-1) = F(n)\n  // where\
    \ a = 0, b = 1, c = 2, d = 3.\n  // By solving the equation, we can simplify the\
    \ equation to the following equation:\n  // F(n) = 1/5*((8+3*sqrt(5))^n - (8-3*sqrt(5))^n\
    \ - 4*sqrt(5)*(2+sqrt(5))^n + 4*sqrt(5)*(2-sqrt(5))^n)\n  // with rounding to\
    \ the closest integer.\n  float s = sqrt(5);\n  float a = (8+3*s);\n  float b\
    \ = (8-3*s);\n  float c = (2+s);\n  float d = (2-s);\n  float i = 1/5;\n  return\
    \ round(i*(pow(a, n) - pow(b, n) - 4*s*pow(c, n) + 4*s*pow(d, n)));\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: Exception
  stderr: 'tmp89la16vm: /tmp/tmp89la16vm.cpp:61: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 1) return 0;\n    if (n == 2) return\
    \ 2;\n    long a, b, c, d, ans;\n    a = 0;\n    b = 0;\n    c = 2;\n    d = 0;\n\
    \    for (int i = 4; i <= n; i++) {\n        ans = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = ans;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    long a = 0, b = 0, c = 2, d = 0, cur = 0;\n    for (int i = 4; i <= n; i++)\
    \ {\n        cur = a + b + c + d;\n        a = b;\n        b = c;\n        c =\
    \ d;\n        d = cur;\n    }\n    return cur;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long a = 0, b = 0, c = 2,\
    \ d = 0;\n  for (int i = 4; i <= n; i++) {\n    long temp = a + b + c + d;\n \
    \   a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmp9sh90r3z: /tmp/tmp9sh90r3z.cpp:33: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n < 4) {\n        return\
    \ n==3;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <=\
    \ n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fib4;\n  \
    \  assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmppoyrpagb: /tmp/tmppoyrpagb.cpp:33: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 2;\n\tlong\
    \ l = 0;\n\tlong tmp = 0;\n\tfor (long a = 3; a <= n; a++) {\n\t\ttmp = i + j\
    \ + k + l;\n\t\ti = j;\n\t\tj = k;\n\t\tk = l;\n\t\tl = tmp;\n\t}\n\treturn l;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpx84snhdx: /tmp/tmpx84snhdx.cpp:33: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    //int* memo = new int[n];\n    //memo[0] = 0;\n\
    \    //memo[1] = 0;\n    //memo[2] = 2;\n    //memo[3] = 0;\n    std::map<long,\
    \ long> memo;\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 2;\n    memo[3]\
    \ = 0;\n    long sum = 0;\n    for (long i = 4; i <= n; i++) {\n        sum =\
    \ memo[i-1] + memo[i-2] + memo[i-3] + memo[i-4];\n        memo[i] = sum;\n   \
    \ }\n    return memo[n];\n    //delete[] memo;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tassert(n >= 0);\n\tlong f[4] = { 0, 0, 2, 0 };\n\
    \tlong fib = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tfib = f[0] + f[1] + f[2]\
    \ + f[3];\n\t\tf[0] = f[1];\n\t\tf[1] = f[2];\n\t\tf[2] = f[3];\n\t\tf[3] = fib;\n\
    \t}\n\treturn fib;\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    long a=0,b=0,c=2,d=0,e;\n    if(n==0){\n     \
    \   return 0;\n    }\n    else if(n==1){\n        return 0;\n    }\n    else if(n==2){\n\
    \        return 2;\n    }\n    else if(n==3){\n        return 0;\n    }\n    else{\n\
    \        for(int i=4;i<=n;i++){\n            e=a+b+c+d;\n            a=b;\n  \
    \          b=c;\n            c=d;\n            d=e;\n        }\n        return\
    \ e;\n    }\n}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) ==\
    \ (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  int fib_three_before = 0;\n  int fib_two_before\
    \ = 0;\n  int fib_one_before = 2;\n  int next = 0;\n  for (int i = 4; i <= n;\
    \ i++) {\n    next = fib_three_before + fib_two_before + fib_one_before;\n   \
    \ fib_three_before = fib_two_before;\n    fib_two_before = fib_one_before;\n \
    \   fib_one_before = next;\n  }\n  return next;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpn0rpfdft: /tmp/tmpn0rpfdft.cpp:32: int main(): Assertion `candidate((8))
    == (28)'' failed.

    '
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // your code here\n    int a[n+1];\n    a[0]=0;\n\
    \    a[1]=0;\n    a[2]=2;\n    a[3]=0;\n    for(int i=4;i<=n;i++)\n    {\n   \
    \     a[i]=a[i-1]+a[i-2]+a[i-3]+a[i-4];\n    }\n    return a[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // TODO\n    std::vector<long> arr={0,0,2,0};\n\
    \    if(n<arr.size()) return arr[n];\n    else\n    {\n        while(arr.size()<=n)\n\
    \        {\n            long next=arr[arr.size()-1]+arr[arr.size()-2]+arr[arr.size()-3]+arr[arr.size()-4];\n\
    \            arr.push_back(next);\n        }\n        return arr[n];\n    }\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // This solution is basically the same as fib3 except\
    \ instead of storing the last 3 numbers, we store the last 4.\n  // Its also important\
    \ to note that fib4(2) = 2 and fib4(3) = 0.\n  // we need these numbers so we\
    \ don't have to do a bunch of edge cases.\n  // the code is the same so I won't\
    \ comment on it.\n  long first = 0;\n  long second = 0;\n  long third = 2;\n \
    \ long fourth = 0;\n  long answer = 0;\n  for (int i = 3; i < n; i++) {\n    answer\
    \ = first + second + third + fourth;\n    first = second;\n    second = third;\n\
    \    third = fourth;\n    fourth = answer;\n  }\n  return answer;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109862
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n  long fib1 = 0;\n  long fib2\
    \ = 0;\n  long fib3 = 2;\n  long fib4 = 0;\n  long fib5 = 0;\n  if (n == 0) {\n\
    \    return fib1;\n  }\n  if (n == 1) {\n    return fib2;\n  }\n  if (n == 2)\
    \ {\n    return fib3;\n  }\n  if (n == 3) {\n    return fib4;\n  }\n  for (int\
    \ i = 4; i <= n; i++) {\n    fib5 = fib1 + fib2 + fib3 + fib4;\n    fib1 = fib2;\n\
    \    fib2 = fib3;\n    fib3 = fib4;\n    fib4 = fib5;\n  }\n  return fib5;\n}\n\
    int main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n \
    \   if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    vector<long> res;\n    res.push_back(0);\n    res.push_back(0);\n    res.push_back(2);\n\
    \    res.push_back(0);\n    for (int i = 4; i <= n; i++) {\n        res.push_back(res[i-1]\
    \ + res[i-2] + res[i-3] + res[i-4]);\n    }\n    return res[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg5tkdat.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmpsg5tkdat.cpp:22:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   22 |     vector<long> res;\n      |     ^~~~~~\n/tmp/tmpsg5tkdat.cpp:22:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsg5tkdat.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsg5tkdat.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpsg5tkdat.cpp:22:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   22 |     vector<long>\
    \ res;\n      |            ^~~~\n/tmp/tmpsg5tkdat.cpp:23:5: error: \u2018res\u2019\
    \ was not declared in this scope\n   23 |     res.push_back(0);\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  std::vector<long> v(n + 1);\n  v[0] = 0;\n  v[1]\
    \ = 0;\n  v[2] = 2;\n  v[3] = 0;\n  for (int i = 4; i <= n; i++) {\n    v[i] =\
    \ v[i - 1] + v[i - 2] + v[i - 3] + v[i - 4];\n  }\n  return v[n];\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    }\n    long first = 0;\n   \
    \ long second = 0;\n    long third = 2;\n    long fourth = 0;\n    long result\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        result = first + second +\
    \ third + fourth;\n        first = second;\n        second = third;\n        third\
    \ = fourth;\n        fourth = result;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n <= 2) return n;\n    vector<long> fibs =\
    \ {0,0,2,0};\n    long temp;\n    for (int i = 4; i <= n; i++) {\n        temp\
    \ = fibs[3];\n        fibs[3] = fibs[2] + fibs[1] + fibs[0] + fibs[3];\n     \
    \   fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n        fibs[2] = temp;\n\
    \    }\n    return fibs[3];\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3g1vi5mv.cpp: In function \u2018long int fib4(long int)\u2019:\n\
    /tmp/tmp3g1vi5mv.cpp:18:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   18 |     vector<long> fibs = {0,0,2,0};\n      |     ^~~~~~\n/tmp/tmp3g1vi5mv.cpp:18:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3g1vi5mv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3g1vi5mv.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp3g1vi5mv.cpp:18:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   18 |     vector<long>\
    \ fibs = {0,0,2,0};\n      |            ^~~~\n/tmp/tmp3g1vi5mv.cpp:21:16: error:\
    \ \u2018fibs\u2019 was not declared in this scope; did you mean \u2018fib4\u2019\
    ?\n   21 |         temp = fibs[3];\n      |                ^~~~\n      |     \
    \           fib4\n/tmp/tmp3g1vi5mv.cpp:27:12: error: \u2018fibs\u2019 was not\
    \ declared in this scope; did you mean \u2018fib4\u2019?\n   27 |     return fibs[3];\n\
    \      |            ^~~~\n      |            fib4\n"
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    // Your code here\n    long a = 0, b = 0, c =\
    \ 2, d = 0, e;\n    if (n == 0)\n        return a;\n    if (n == 1)\n        return\
    \ b;\n    if (n == 2)\n        return c;\n    if (n == 3)\n        return d;\n\
    \    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint\
    \ main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n \
    \   assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n \
    \   assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // your code here\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: Exception
  stderr: 'tmpesjeyvtr: /tmp/tmpesjeyvtr.cpp:21: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tlong n_1 = 0;\n\tlong n_2 = 0;\n\tlong n_3 = 2;\n\
    \tlong n_4 = 0;\n\tif (n == 0) {\n\t\treturn n_1;\n\t}\n\tif (n == 1) {\n\t\t\
    return n_2;\n\t}\n\tif (n == 2) {\n\t\treturn n_3;\n\t}\n\tif (n == 3) {\n\t\t\
    return n_4;\n\t}\n\tlong current = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\t\
    current = n_1 + n_2 + n_3 + n_4;\n\t\tn_1 = n_2;\n\t\tn_2 = n_3;\n\t\tn_3 = n_4;\n\
    \t\tn_4 = current;\n\t}\n\treturn current;\n}\nint main() {\n    auto candidate\
    \ = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n\
    \    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n  // WRITE THE BODY OF THIS FUNCTION\n  return -1;\n\
    }\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
    \    assert(candidate((12)) == (386));\n}\n"
  status: Exception
  stderr: 'tmpfxq5h4e3: /tmp/tmpfxq5h4e3.cpp:22: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    // TODO\n    long\
    \ n1 = 0;\n    long n2 = 0;\n    long n3 = 2;\n    long n4 = 0;\n    long fib_num\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        fib_num = n1 + n2 + n3 + n4;\n\
    \        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = fib_num;\n\
    \    }\n    return fib_num;\n}\nint main() {\n    auto candidate = fib4;\n   \
    \ assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10))\
    \ == (104));\n    assert(candidate((12)) == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
    // 14\nlong fib4(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\
    \tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a = 0, b = 0, c = 2,\
    \ d = 0, ans;\n\tfor (int i = 4; i <= n; i++) {\n\t\tans = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = ans;\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12))\
    \ == (386));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109863
