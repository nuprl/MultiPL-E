name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>>\
  \ how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string, std::string\
  \ substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    std::size_t pos = string.find(substring);\n\
    \    while(pos != std::string::npos) {\n        ++count;\n        pos = string.find(substring,\
    \ pos + 1);\n    }\n    return count;", "\tlong res = 0;\n\tlong len_substring\
    \ = substring.length();\n\tlong len_string = string.length();\n\tfor (int i =\
    \ 0; i < len_string; i++) {\n\t\tif (string.substr(i, len_substring) == substring)\
    \ {\n\t\t\tres++;\n\t\t}\n\t}\n\treturn res;", "  // your code goes here\n  long\
    \ times = 0;\n  long string_len = string.length();\n  long substring_len = substring.length();\n\
    \  long j = 0;\n  for(long i = 0; i < string_len; i++) {\n    if(string[i] ==\
    \ substring[j]) {\n      j++;\n      if(j == substring_len) {\n        times++;\n\
    \        j = 0;\n      }\n    }\n    else {\n      j = 0;\n    }\n  }\n  return\
    \ times;", "  long sum = 0;\n  for (int i = 0; i < string.size(); i++) {\n   \
    \ if (string.substr(i, substring.size()) == substring) {\n      sum++;\n    }\n\
    \  }\n  return sum;", "    auto start = string.find(substring);\n    long count\
    \ = 0;\n    while (start != std::string::npos) {\n        count++;\n        start\
    \ = string.find(substring, start + 1);\n    }\n    return count;", '    return
    0;', "    long i,j,flag=0,count=0;\n    //cout<<\"\\nThe main string is: \"<<string;\n\
    \    //cout<<\"\\nThe substring to be searched is: \"<<substring;\n    //cout<<\"\
    \\nThe length of the string is: \"<<strlen(string);\n    //cout<<\"\\nThe length\
    \ of the substring is: \"<<strlen(substring);\n    for(i=0;i<strlen(string);i++)\n\
    \    {\n        if(string[i]==substring[0])\n        {\n            flag=1;\n\
    \            for(j=1;j<strlen(substring);j++)\n            {\n               \
    \ if(string[i+j]!=substring[j])\n                {\n                    flag=0;\n\
    \                    break;\n                }\n            }\n            if(flag==1)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;", "    // Take the length of the two strings.\n    int string_len\
    \ = string.length();\n    int substring_len = substring.length();\n    // Keep\
    \ track of how many substring are there in the original string.\n    int count\
    \ = 0;\n    // Loop over the original string.\n    for (int i = 0; i < string_len;\
    \ i++) {\n        // Take a substring of the original string.\n        std::string\
    \ str = string.substr(i, substring_len);\n        // Compare the original string\
    \ with a substring from the original string.\n        if (str == substring) {\n\
    \            // Add 1 to the count if the current substring from the original\
    \ string is the same as the input substring.\n            count++;\n        }\n\
    \    }\n    // Return the count variable.\n    return count;", "    unsigned long\
    \ long n = string.length();\n    unsigned long long m = substring.length();\n\
    \    unsigned long long i, j;\n    unsigned long long count = 0;\n    for (i =\
    \ 0; i <= n - m; i++) {\n        for (j = 0; j < m; j++) {\n            if (string[i\
    \ + j] != substring[j])\n                break;\n        }\n        if (j == m)\
    \ {\n            count++;\n        }\n    }\n    return count;", "\tlong result\
    \ = 0;\n\tint pos = 0;\n\twhile (pos != std::string::npos) {\n\t\tpos = string.find(substring,\
    \ pos);\n\t\tif (pos != std::string::npos) {\n\t\t\t++result;\n\t\t\t++pos;\n\t\
    \t}\n\t}\n\treturn result;", "    // Better to do this way.\n    // if(string.empty()\
    \ || substring.empty())\n    //     return 0;\n    // else if(string.length()\
    \ < substring.length())\n    //     return 0;\n    // else if(string.length()\
    \ == substring.length())\n    //     return (string == substring) ? 1 : 0;\n \
    \   // else{\n    //     long count = 0;\n    //     size_t index = 0;\n    //\
    \     while(index = string.find(substring, index), index != std::string::npos){\n\
    \    //         ++count;\n    //         index += substring.length();\n    //\
    \     }\n    //     return count;\n    // }\n    if(string.empty() || substring.empty())\n\
    \        return 0;\n    else if(string.length() < substring.length())\n      \
    \  return 0;\n    else if(string.length() == substring.length())\n        return\
    \ (string == substring) ? 1 : 0;\n    else{\n        long count = 0;\n       \
    \ for(long index = 0; index <= string.length() - substring.length(); ++index){\n\
    \            if(string.substr(index, substring.length()) == substring)\n     \
    \           ++count;\n        }\n        return count;\n    }", "  //Your code\
    \ here\n  long count = 0;\n  long i = 0;\n  long sub_len = substring.length();\n\
    \  long str_len = string.length();\n  for(i = 0; i < str_len; i++)\n  {\n    \
    \  if(string[i] == substring[0])\n      {\n          if(i + sub_len <= str_len)\n\
    \          {\n              if(string.substr(i, sub_len) == substring)\n     \
    \             count++;\n          }\n      }\n  }\n  return count;", "    int\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "  // your code here\n    long count=0;\n    if(string.length()==0||substring.length()==0)\n\
    \        return 0;\n    if(string.length()==1||substring.length()==1)\n    {\n\
    \        for(long i=0;i<string.length();i++)\n        {\n            if(string[i]==substring[0])\n\
    \                count++;\n        }\n        return count;\n    }\n    for(long\
    \ i=0;i<string.length();i++)\n    {\n        if(string[i]==substring[0])\n   \
    \     {\n            int flag=0;\n            for(long j=0;j<substring.length();j++)\n\
    \            {\n                if(string[i+j]!=substring[j])\n              \
    \  {\n                    flag=1;\n                    break;\n              \
    \  }\n            }\n            if(flag==0)\n                count++;\n     \
    \   }\n    }\n    return count;", "    int l = substring.length();\n    int count\
    \ = 0;\n    for(int i = 0; i < string.length(); ++i) {\n        bool match = true;\n\
    \        for(int j = 0; j < l; ++j) {\n            if(string[i+j] != substring[j])\
    \ {\n                match = false;\n                break;\n            }\n \
    \       }\n        if(match) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long found = 0;\n    int pos = 0;\n    while(true) {\n       \
    \ pos = string.find(substring, pos);\n        if(pos == -1) {\n            break;\n\
    \        }\n        found++;\n        pos++;\n    }\n    return found;", "   \
    \ if(substring.length() > string.length())\n        return 0;\n    long count\
    \ = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i]\
    \ == substring[0]) {\n            bool flag = true;\n            for(long j =\
    \ 1; j < substring.length(); j++) {\n                if(string[i+j] != substring[j])\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n            if(flag)\n                count++;\n   \
    \     }\n    }\n    return count;", "  // your code here\n  long count = 0;\n\
    \  if(string == \"\" && substring == \"\")\n    return 0;\n  for(int i = 0; i\
    \ < string.length(); i++)\n  {\n    if(string[i] == substring[0])\n    {\n   \
    \   int m = i, n = 0;\n      while(m < string.length() && n < substring.length())\n\
    \      {\n        if(string[m] == substring[n])\n        {\n          n++;\n \
    \         m++;\n        }\n        else\n          break;\n      }\n      if(n\
    \ == substring.length())\n        count++;\n    }\n  }\n  return count;", "  \
    \  // Your solution goes here.\n    long cnt = 0;\n    long ssz = substring.size();\n\
    \    long sz = string.size();\n    if(ssz == 0 || sz == 0)\n        return 0;\n\
    \    for(long i = 0; i < sz - ssz + 1; i++) {\n        if(string.substr(i, ssz)\
    \ == substring)\n            cnt++;\n    }\n    return cnt;", "\tif (string.size()\
    \ < substring.size())\n\t\treturn 0;\n\tlong cnt = 0;\n\tfor (int i = 0; i < string.size();\
    \ i++) {\n\t\tif (string.substr(i, substring.size()) == substring)\n\t\t\tcnt++;\n\
    \t}\n\treturn cnt;", "\tif (string.size() == 0)\n\t\treturn 0;\n\tif (substring.size()\
    \ == 0)\n\t\treturn 0;\n\tlong int i, j;\n\ti = 0;\n\tlong int maxcount = 0;\n\
    \twhile (i <= string.size() - substring.size()) {\n\t\tj = 0;\n\t\twhile (j <\
    \ substring.size() && substring[j] == string[i + j]) {\n\t\t\tj++;\n\t\t}\n\t\t\
    if (j == substring.size()) {\n\t\t\tmaxcount++;\n\t\t\ti = i + j;\n\t\t} else\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn maxcount;", "    std::string::size_type\
    \ n = string.find(substring, 0);\n    int i = 0;\n    while (n != std::string::npos)\
    \ {\n        i++;\n        n = string.find(substring, n + 1);\n    }\n    return\
    \ i;", "  long count = 0;\n  long size_substring = substring.size();\n  long size_string\
    \ = string.size();\n  long j;\n  for (long i = 0; i < size_string; i++) {\n  \
    \  if (string[i] == substring[0]) {\n      j = 0;\n      while (j < size_substring\
    \ && i + j < size_string && string[i + j] == substring[j]) {\n        j++;\n \
    \     }\n      if (j == size_substring) {\n        count++;\n      }\n    }\n\
    \  }\n  return count;", "    long res = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        for (int j = 0; j < substring.size(); j++) {\n            if\
    \ (string[i] == substring[j]) {\n                int k = 1;\n                while\
    \ (string[i + k] == substring[j + k] && i + k < string.size() && j + k < substring.size())\
    \ {\n                    k++;\n                }\n                if (k == substring.size())\
    \ {\n                    res++;\n                }\n            }\n        }\n\
    \    }\n    return res;", "  long count = 0;\n  size_t npos = std::string::npos;\n\
    \  size_t pos = 0;\n  for (;;) {\n    pos = string.find(substring, pos);\n   \
    \ if (pos == npos) {\n      break;\n    }\n    ++count;\n    ++pos;\n  }\n  return\
    \ count;", "  int count = 0;\n  int length = substring.length();\n  int start\
    \ = 0;\n  while(string.find(substring, start) != std::string::npos) {\n    start\
    \ = string.find(substring, start) + 1;\n    count++;\n  }\n  return count;", " \
    \   // Your code goes here\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == substring[0]) {\n            int j = 0;\n  \
    \          int m = i;\n            for(int k = 0; k < substring.length(); k++)\
    \ {\n                if(string[m] == substring[j]) {\n                    m++;\n\
    \                    j++;\n                }\n                else {\n       \
    \             break;\n                }\n            }\n            if(j == substring.length())\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    long found = 0;\n    long start = 0;\n    while(start != -1) {\n        start\
    \ = string.find(substring, start);\n        if(start != -1) {\n            found++;\n\
    \            start += substring.length();\n        }\n    }\n    return found;",
  "    int count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (std::size_t i = 0;\
    \ i < string.size(); i++) {\n        if (i + substring.size() > string.size())\
    \ {\n            break;\n        }\n        if (string.substr(i, substring.size())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "  // 1. Create a start index.\n  int size = substring.size();\n  long count = 0;\n\
    \  for (int i = 0; i < string.size(); i++) {\n    int temp = i;\n    int j = 0;\n\
    \    while (string[temp] == substring[j] && j < size) {\n      temp++;\n     \
    \ j++;\n    }\n    if (j == size) {\n      count++;\n    }\n  }\n  return count;",
  "    long n = string.length();\n    long k = substring.length();\n    long count\
    \ = 0;\n    for (long i = 0; i <= n - k; i++) {\n        if (string.substr(i,\
    \ k) == substring) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    std::size_t pos = 0;\n    while((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    assert(string.size() > 0);\n    long count =\
    \ 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i] ==\
    \ substring[0]) {\n            int j = 0;\n            for (; j < substring.size();\
    \ j++) {\n                if (string[i + j] != substring[j])\n               \
    \     break;\n            }\n            if (j == substring.size())\n        \
    \        count++;\n        }\n    }\n    return count;", "    assert(std::cin.good());\n\
    \    if (string.length() == 0 || substring.length() == 0 ||\n        substring.length()\
    \ > string.length()) {\n        return 0;\n    }\n    long iter = 0;\n    for\
    \ (int i = 0; i < string.length(); ++i) {\n        std::string current_substring\
    \ = string.substr(i, substring.length());\n        if (current_substring == substring)\
    \ {\n            ++iter;\n        }\n    }\n    return iter;", "    int cnt =\
    \ 0;\n    for(int i = 0; i < string.size(); ++i) {\n        if(string.substr(i,\
    \ substring.size()) == substring)\n            cnt++;\n    }\n    return cnt;",
  "    long count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]==substring[0]){\n\
    \            long j;\n            for(j=0;j<substring.length();j++){\n       \
    \         if(string[i+j]!=substring[j]) break;\n            }\n            if(j==substring.length())\
    \ count++;\n        }\n    }\n    return count;", "    long count=0;\n    for(long\
    \ i=0;i<string.length();i++){\n        if(string[i]==substring[0]){\n        \
    \    long k=0;\n            while(string[i+k]==substring[k]){\n              \
    \  k++;\n                if(k==substring.length()){\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count;", '  return std::count(string.begin(), string.end(), substring[0])
    + std::count(string.begin(), string.end(), substring[1]);', "    if(substring.size()\
    \ == 0)\n        return 0;\n    else if(string.size() == 0)\n        return 0;\n\
    \    int n = string.size(), m = substring.size();\n    int mat[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            mat[i][j]\
    \ = 0;\n    for(int i = 0; i < n; i++)\n        mat[i][0] = (string[i] == substring[0]);\n\
    \    for(int i = 0; i < n; i++)\n        for(int j = 1; j < m; j++)\n        \
    \    if(i-1 >= 0)\n                mat[i][j] = mat[i-1][j-1] * (string[i] == substring[j]);\n\
    \    long count = 0;\n    for(int i = 0; i < n; i++)\n        count += mat[i][m-1];\n\
    \    return count;", "    std::size_t n = string.find(substring);\n    if (n ==\
    \ std::string::npos) {\n        return 0;\n    } else {\n        return 1 + how_many_times(string.substr(n\
    \ + 1), substring);\n    }", "    long cnt = 0;\n    long len = substring.length();\n\
    \    for (int i = 0; i <= string.length() - len; i++) {\n        if (string.substr(i,\
    \ len) == substring) {\n            cnt++;\n        }\n    }\n    return cnt;",
  "    long num = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string.substr(i,\
    \ substring.size()) == substring) {\n            num++;\n        }\n    }\n  \
    \  return num;", "    long int i,j,count=0;\n    int n,m;\n    n=string.length();\n\
    \    m=substring.length();\n    for(i=0;i<=n-m;i++)\n    {\n        for(j=0;j<m;j++)\n\
    \        {\n            if(string[i+j]!=substring[j])\n                break;\n\
    \        }\n        if(j==m)\n        {\n            count++;\n        }\n   \
    \ }\n    return count;", "    assert(string.size() >= substring.size());\n   \
    \ long counter = 0;\n    auto it = std::search(string.begin(), string.end(), substring.begin(),\
    \ substring.end());\n    for (;;) {\n        if (it != string.end()) {\n     \
    \       ++counter;\n            std::advance(it, substring.size());\n        \
    \    it = std::search(it, string.end(), substring.begin(), substring.end());\n\
    \        } else {\n            break;\n        }\n    }\n    return counter;",
  "    // Your code here!\n    long count = 0;\n    for(int i = 0; i <= string.length()\
    \ - substring.length(); i++){\n        if(string.substr(i, substring.length())\
    \ == substring){\n            count++;\n        }\n    }\n    return count;",
  "\tlong matchCount = 0;\n\tint substringLength = substring.length();\n\t\n\tif(substringLength\
    \ == 0)\n\t\treturn 0;\n\t\n\tfor(int i = 0; i <= string.length() - substringLength;\
    \ i++) {\n\t\tif(string.substr(i, substringLength) == substring)\n\t\t\tmatchCount++;\n\
    \t}\n\t\n\treturn matchCount;", "  // your code goes here\n  long count = 0;\n\
    \  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == substring[0])\
    \ {\n      int j = 0;\n      for(j = 0; j < substring.length(); j++) {\n     \
    \   if(string[i+j] != substring[j]) {\n          break;\n        }\n      }\n\
    \      if(j == substring.length()) {\n        count++;\n      }\n    }\n  }\n\
    \  return count;", "\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.substr(i, substring.length()) == substring)\n\t\t\tcount++;\n\
    \t}\n\treturn count;", "    if(substring.length() == 0)\n        return 0;\n \
    \   int n = string.length();\n    int m = substring.length();\n    int count =\
    \ 0;\n    for(int i = 0; i < n; i++) {\n        if(string[i] == substring[0])\
    \ {\n            int k = i;\n            int j = 0;\n            while(k < n &&\
    \ j < m && string[k] == substring[j]) {\n                k++;\n              \
    \  j++;\n            }\n            if(j == m)\n                count++;\n   \
    \     }\n    }\n    return count;", "    if(substring.length() == 0) return 0;\n\
    \    int i = 0, count = 0;\n    int sublength = substring.length();\n    while(string.find(substring,\
    \ i) != std::string::npos) {\n        i = string.find(substring, i) + sublength;\n\
    \        count++;\n    }\n    return count;", '  return std::count(string.begin(),
    string.end(), substring);', "  long sum = 0;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    if (string.substr(i, substring.size()) == substring)\n      sum++;\n\
    \  }\n  return sum;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        //i - position where we start searching\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            ++count;\n        }\n    }\n\
    \    return count;", "\tlong count = 0;\n\tfor (long i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;", "    //if length of string is less than\
    \ length of substring, just return 0\n    if(string.length() < substring.length())\n\
    \        return 0;\n    //else if length of string is equal to length of substring,\
    \ just return 1 if they are same or 0 if they are not same\n    else if(string.length()\
    \ == substring.length())\n        return (string == substring);\n    //else if\
    \ length of string is greater than length of substring, then iterate the characters\
    \ of string\n    else{\n        long count = 0;\n        std::string::iterator\
    \ i, j;\n        for(i = string.begin(); i < string.end(); i++){\n           \
    \ j = i;\n            std::string::iterator k = substring.begin();\n         \
    \   while(*j == *k && k < substring.end()){\n                ++j;\n          \
    \      ++k;\n            }\n            if(k == substring.end())\n           \
    \     count++;\n        }\n        return count;\n    }", "    if(substring.size()\
    \ > string.size()) return 0;\n    long counter = 0;\n    for(int i = 0; i < string.size();\
    \ i++) {\n        if(string.substr(i, substring.size()) == substring) {\n    \
    \        counter++;\n        }\n    }\n    return counter;", "    // your code\
    \ here\n    long count=0;\n    for(int i=0;i<string.length();++i)\n    {\n   \
    \     if(string[i]==substring[0])\n        {\n            if(string.substr(i,substring.length())==substring)\n\
    \            {\n                ++count;\n            }\n        }\n    }\n  \
    \  return count;", "    if(string.length() == 0 || substring.length() == 0) return\
    \ 0;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n  \
    \      if(string[i] == substring[0]) {\n            bool flag = true;\n      \
    \      for(int j = 0; j < substring.length(); j++) {\n                if(string[i+j]\
    \ != substring[j]) {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n            if(flag) {\n                count++;\n\
    \                i += substring.length() - 1;\n            }\n        }\n    }\n\
    \    return count;", "    long times{0};\n    for(auto it{string.begin()}; it\
    \ != string.end(); ++it) {\n        if(*it == substring[0]) {\n            auto\
    \ temp{it};\n            for(auto jt{substring.begin()}; jt != substring.end();\
    \ ++jt) {\n                if(*temp == *jt) {\n                    temp++;\n \
    \               } else {\n                    break;\n                }\n    \
    \        }\n            if(temp == it + substring.size()) {\n                times++;\n\
    \            }\n        }\n    }\n    return times;", "\tlong count = 0;\n\tsize_t\
    \ pos = 0;\n\twhile (pos != std::string::npos) {\n\t\tpos = string.find(substring,\
    \ pos);\n\t\tif (pos != std::string::npos) {\n\t\t\tcount++;\n\t\t\tpos += substring.length();\n\
    \t\t}\n\t}\n\treturn count;", "\tlong ocurr = 0;\n\tfor (unsigned int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == substring[0]) {\n\t\t\tif (string.substr(i,\
    \ substring.length()) == substring) {\n\t\t\t\tocurr++;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn ocurr;", "  // Implement the function here\n  return std::count(string.begin(),\
    \ string.end(), substring);", "    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        int j = 0;\n        while(j < substring.length() && string[i\
    \ + j] == substring[j]) {\n            j++;\n        }\n        if(j == substring.length())\
    \ {\n            count++;\n        }\n    }\n    return count;", "\tlong count=0;\n\
    \tfor(long i=0;i<string.length();i++){\n\t\tif(string[i]==substring[0]){\n\t\t\
    \tbool flag=true;\n\t\t\tfor(long j=0;j<substring.length();j++){\n\t\t\t\tif(string[i+j]!=substring[j]){\n\
    \t\t\t\t\tflag=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    long count = 0;\n\
    \    int len = substring.length();\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        if(string.substr(i, len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        if (string.substr(i, substring.length())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;",
  "  long c = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i,\
    \ substring.length()) == substring) {\n      c++;\n    }\n  }\n  return c;", " \
    \ auto len_string = string.length();\n  auto len_substring = substring.length();\n\
    \  auto len_last_substring = len_string - len_substring;\n  if (len_string ==\
    \ 0 || len_substring == 0 || len_last_substring < 0)\n    return 0;\n  auto count\
    \ = 0;\n  for (auto i = 0; i <= len_last_substring; i++) {\n    if (string.substr(i,\
    \ len_substring) == substring)\n      count++;\n  }\n  return count;", "\t//for\
    \ (long i = 0; i < string.size(); i++) {\n\t//\tlong current_len = 0;\n\t//\t\
    for (long j = 0; j < substring.size(); j++) {\n\t//\t\tif (string[i + j] == substring[j])\
    \ {\n\t//\t\t\tcurrent_len++;\n\t//\t\t}\n\t//\t\telse {\n\t//\t\t\tbreak;\n\t\
    //\t\t}\n\t//\t}\n\t//\tif (current_len == substring.size()) {\n\t//\t\tcount++;\n\
    \t//\t}\n\t//}\n\tlong counter = 0;\n\tlong len = substring.size();\n\tfor (long\
    \ i = 0; i < string.size(); i++) {\n\t\tif (string.substr(i, len) == substring)\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;", "    long  result = 0;\n\
    \    int pos = 0;\n    while(pos!=-1)\n    {\n        pos = string.find(substring,pos);\n\
    \        if(pos!=-1)\n        {\n            result++;\n            pos++;\n \
    \       }\n    }\n    return result;", "    long n = string.length();\n    long\
    \ m = substring.length();\n    long count = 0;\n    for (long i = 0; i <= n -\
    \ m; i++) {\n        long j;\n        for (j = 0; j < m; j++) {\n            if\
    \ (string[i + j] != substring[j]) {\n                break;\n            }\n \
    \       }\n        if (j == m) {\n            count++;\n        }\n    }\n   \
    \ return count;", "    // BEGIN SOLUTION\n    long ret = 0;\n    if (substring.empty())\
    \ {\n        return ret;\n    }\n    for (long i = 0; i < string.size(); ++i)\
    \ {\n        if (string[i] == substring[0]) {\n            bool found = true;\n\
    \            for (long j = 1; j < substring.size(); ++j) {\n                if\
    \ (string[i + j] != substring[j]) {\n                    found = false;\n    \
    \                break;\n                }\n            }\n            if (found)\
    \ {\n                ++ret;\n            }\n        }\n    }\n    return ret;\n\
    \    // END SOLUTION", "    std::vector<long> x(substring.size() + 1, 0);\n  \
    \  for (long i = 0; i < substring.size(); i++) {\n        x[i + 1] = x[i] + substring[i];\n\
    \    }\n    long ans = 0;\n    for (long i = 0; i < string.size(); i++) {\n  \
    \      if (x[substring.size()] == x[substring.size() - 1] + string[i]) {\n   \
    \         ans++;\n        }\n        if (substring.size() > 0) {\n           \
    \ x[substring.size()] = x[substring.size() - 1] + string[i];\n        }\n    \
    \    for (long j = substring.size() - 1; j > 0; j--) {\n            x[j] = x[j\
    \ - 1];\n        }\n        x[0] = 0;\n    }\n    return ans;", '    return std::count(string.begin(),
    string.end(), substring);', '  return std::count(string.begin(), string.end(),
    substring[0]) * std::count(substring.begin(), substring.end(), substring[0]);',
  "    long count = 0;\n    for (long i = 0; i < string.length(); ++i) {\n       \
    \ if (string.substr(i, substring.length()) == substring) {\n            ++count;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long index =\
    \ 0;\n    while (string.find(substring, index) != std::string::npos) {\n     \
    \   index = string.find(substring, index) + 1;\n        count++;\n    }\n    return\
    \ count;", '    return std::count(string.begin(), string.end(), substring);',
  "    long count=0;\n    int n=string.length();\n    int m=substring.length();\n\
    \    for(int i=0;i<n;i++)\n    {\n        int k=i;\n        int j=0;\n       \
    \ while(j<m && k<n && string[k]==substring[j])\n        {\n            k++;\n\
    \            j++;\n        }\n        if(j==m)\n        {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    std::size_t pos\
    \ = string.find(substring);\n    while(pos != std::string::npos) {\n        ++count;\n\
    \        pos = string.find(substring, pos + 1);\n    }\n    return count;", '    return
    std::count(string.begin(), string.end(), substring);', "  // Your code here\n\
    \  long count=0;\n  for(int i=0;i<string.length();i++)\n  {\n      if(string[i]==substring[0])\n\
    \      {\n          int c=0;\n          int start=i;\n          while(i<string.length()\
    \ && c<substring.length() && string[i]==substring[c])\n          {\n         \
    \   i++;\n            c++;\n          }\n          if(c==substring.length())\n\
    \            count++;\n          i=start;\n      }\n  }\n  return count;", " \
    \ if (substring.empty()) {\n    return 0;\n  }\n  long count = 0;\n  size_t pos\
    \ = string.find(substring);\n  while (pos != std::string::npos) {\n    count++;\n\
    \    pos = string.find(substring, pos + 1);\n  }\n  return count;", "    // Your\
    \ code goes here\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == substring[0]) {\n            bool found = true;\n\
    \            for(int j = 1; j < substring.length(); j++) {\n                if(string[i+j]\
    \ != substring[j]) {\n                    found = false;\n                   \
    \ break;\n                }\n            }\n            if(found) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;", "  long\
    \ count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    int n = 0;\n\
    \    for (int j = 0; j < substring.length(); j++) {\n      if (string[i+j] ==\
    \ substring[j]) {\n        n++;\n      }\n    }\n    if (n == substring.length())\
    \ {\n      count++;\n    }\n  }\n  return count;", "    // assert(false);\n  \
    \  // return 0;\n    int ans = 0;\n    for(int i = 0; i < string.size(); i++)\
    \ {\n        if(string[i] == substring[0]) {\n            int c = 1;\n       \
    \     for(int j = 1; j < substring.size(); j++) {\n                if(string[i+j]\
    \ == substring[j]) c++;\n                else break;\n            }\n        \
    \    if(c == substring.size()) ans++;\n        }\n    }\n    return ans;", " \
    \   // Insert code here\n    long count = 0;\n    for(unsigned int i = 0; i <\
    \ string.length(); i++) {\n        for(unsigned int j = 0; j < substring.length();\
    \ j++) {\n            if(string[i] == substring[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    if(string.length()\
    \ == 0) return 0;\n    if(substring.length() == 0) return 0;\n    if(string.length()\
    \ == substring.length()) return string == substring ? 1 : 0;\n    if(string.length()\
    \ < substring.length()) return 0;\n    int count = 0;\n    size_t index = 0;\n\
    \    while (true) {\n        index = string.find(substring, index);\n        if\
    \ (index == std::string::npos) break;\n        count++;\n        index += substring.length();\n\
    \    }\n    return count;", "    int slen = string.length();\n    int sublen =\
    \ substring.length();\n    int count = 0;\n    for(int i = 0; i <= slen - sublen;\
    \ i++) {\n        int j;\n        for(j = 0; j < sublen; j++) {\n            if(string[i+j]\
    \ != substring[j]) {\n                break;\n            }\n        }\n     \
    \   if(j == sublen) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long n = string.length();\n    long m = substring.length();\n\
    \    for(long i = 0; i < n; i++) {\n        if(string.substr(i, m) == substring)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long n =\
    \ 0;\n    while(true) {\n        std::size_t pos = string.find(substring);\n \
    \       if(pos == std::string::npos) {\n            break;\n        }\n      \
    \  n++;\n        string = string.substr(pos + 1);\n    }\n    return n;", "  \
    \  long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        for\
    \ (int j = 0; j < substring.length(); j++) {\n            if (string[i + j] !=\
    \ substring[j])\n                break;\n            if (j == substring.length()\
    \ - 1)\n                count++;\n        }\n    }\n    return count;", '  return
    std::count(string.begin(), string.end(), substring);', "    size_t pos = string.find(substring);\n\
    \    if (pos == std::string::npos) {\n        return 0;\n    }\n    return 1 +\
    \ how_many_times(string.substr(pos + 1), substring);", "    unsigned long count\
    \ = 0;\n    unsigned long n = string.length();\n    unsigned long m = substring.length();\n\
    \    for (unsigned long i = 0; i < n; i++) {\n        for (unsigned long j = 0;\
    \ j < m; j++) {\n            if (i + j < n && string[i + j] == substring[j]) {\n\
    \                if (j == m - 1)\n                    count++;\n            }\
    \ else {\n                break;\n            }\n        }\n    }\n    return\
    \ count;", "  // your code here\n  int res = 0;\n  long found = string.find(substring);\n\
    \  while(found != -1){\n    ++res;\n    found = string.find(substring, found+1);\n\
    \  }\n  return res;", "    long res = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring) {\n   \
    \         res++;\n        }\n    }\n    return res;", "  // TODO: add code here\n\
    \  int length1= string.length();\n  int length2= substring.length();\n  if(length1==0\
    \ && length2==0)\n  {\n      return 0;\n  }\n  if(length1!=0 && length2==0)\n\
    \  {\n      return 0;\n  }\n  if(length1==0 && length2!=0)\n  {\n      return\
    \ 0;\n  }\n  long count=0;\n  for(int i=0;i<length1;i++)\n  {\n      for(int j=0;j<length2;j++)\n\
    \      {\n          if(string[i]==substring[j])\n          {\n              int\
    \ k=j;\n              int l=i;\n              while(k<length2 && l<length1)\n\
    \              {\n                  if(string[l]==substring[k])\n            \
    \      {\n                      k++;\n                      l++;\n           \
    \       }\n                  else\n                  {\n                     \
    \ break;\n                  }\n              }\n              if(k==length2)\n\
    \              {\n                  count++;\n              }\n          }\n \
    \     }\n  }\n  return count;", "    std::size_t found = string.find(substring);\n\
    \    if (found == std::string::npos)\n        return 0;\n    else\n        return\
    \ 1 + how_many_times(string.substr(found + 1), substring);", "    long count =\
    \ 0;\n    int s = string.size();\n    int sub = substring.size();\n    for(int\
    \ i = 0; i < s; i++) {\n        if(string.substr(i, sub) == substring)\n     \
    \       count++;\n    }\n    return count;", "\tlong result = 0;\n\tfor (int i\
    \ = 0; i < string.length(); i++) {\n\t\tint j = 0;\n\t\tfor (; j < substring.length();\
    \ j++) {\n\t\t\tif (string[i + j] != substring[j]) {\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif (j == substring.length()) {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn\
    \ result;", "  long times = 0;\n  for (int i = 0; i < string.size(); i++) {\n\
    \    if (string.substr(i, substring.size()) == substring) {\n      times++;\n\
    \    }\n  }\n  return times;", "    // put your code here\n    int len_sub = substring.length();\n\
    \    int len_string = string.length();\n    long count = 0;\n    for(int i = 0;\
    \ i < len_string; i++){\n        if(string[i] == substring[0]){\n            for(int\
    \ j = 1; j < len_sub; j++){\n                if(string[i+j] != substring[j]){\n\
    \                    break;\n                }\n                if(j == len_sub-1){\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;", "\tlong times=0;\n\tlong subLen=substring.length();\n\
    \tlong strLen=string.length();\n\tstd::string str(string);\n\tlong start=0;\n\t\
    long pos=str.find(substring);\n\t// std::cout<<pos<<\"\\n\";\n\twhile(pos!=std::string::npos){\n\
    \t\ttimes++;\n\t\t// std::cout<<str<<\"\\n\";\n\t\tstr=str.substr(pos+subLen,strLen-pos-subLen);\n\
    \t\t// std::cout<<str<<\"\\n\";\n\t\tpos=str.find(substring);\n\t\t// std::cout<<pos<<\"\
    \\n\";\n\t}\n\treturn times;", "    long count=0;\n    int i,j;\n    for(i=0;i<string.length();i++)\n\
    \    {\n        for(j=0;j<substring.length();j++)\n        {\n            if(string[i+j]!=substring[j])\n\
    \                break;\n        }\n        if(j==substring.length())\n      \
    \  {\n            count++;\n            i=i+j-1;\n        }\n    }\n    return\
    \ count;", "    long counter = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string.substr(i, substring.length()) == substring) {\n      \
    \      counter++;\n        }\n    }\n    return counter;", "    long howManyTimes\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.length()\
    \ - i >= substring.length()) {\n            if (string.substr(i, substring.length())\
    \ == substring) {\n                howManyTimes++;\n            }\n        }\n\
    \    }\n    return howManyTimes;", "  long result = 0;\n  long string_size = string.size();\n\
    \  long substring_size = substring.size();\n  if(substring_size == 0)\n    return\
    \ 0;\n  if(string_size == 0)\n    return 0;\n  if(string_size == substring_size){\n\
    \    if(string == substring)\n      return 1;\n    else\n      return 0;\n  }\n\
    \  for(long i = 0; i <= string_size - substring_size; i++){\n    for(long j =\
    \ 0; j < substring_size; j++){\n      if(string[i+j] != substring[j])\n      \
    \  break;\n      if(j == substring_size - 1)\n        result += 1;\n    }\n  }\n\
    \  return result;", "    long cnt = 0;\n    int pos = string.find(substring);\n\
    \    while(pos != std::string::npos) {\n        cnt++;\n        string = string.substr(pos\
    \ + 1);\n        pos = string.find(substring);\n    }\n    return cnt;", "   \
    \ // write your code here\n    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        bool found = true;\n        for(int j = 0; j < substring.length();\
    \ j++) {\n            if(string[i+j] != substring[j]) {\n                found\
    \ = false;\n                break;\n            }\n        }\n        if(found)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    if(string.size()==0\
    \ || substring.size()==0) return 0;\n    int n = string.size(), m = substring.size();\n\
    \    int l[n+1][m+1];\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=m;j++)\n\
    \            l[i][j] = 0;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n\
    \            if(string[i-1]==substring[j-1])\n                l[i][j] = l[i-1][j-1]+1;\n\
    \            else\n                l[i][j] = 0;\n    long c=0;\n    for(int i=1;i<=n;i++)\n\
    \        for(int j=1;j<=m;j++)\n            if(l[i][j]==m)\n                c++;\n\
    \    return c;", "    long cnt = 0;\n    for (int i = 0; i < string.size(); ++i)\
    \ {\n        if (string.substr(i, substring.size()) == substring)\n          \
    \  ++cnt;\n    }\n    return cnt;", "    size_t length = substring.length();\n\
    \    size_t found = string.find(substring);\n    long count = 0;\n    while (found\
    \ != std::string::npos) {\n        ++count;\n        found = string.find(substring,\
    \ found + length);\n    }\n    return count;", '    return 0;', "    int j=0;\n\
    \    int i=0;\n    int l=substring.length();\n    int count=0;\n    while(i<string.length()){\n\
    \        //std::cout<<\"\\n i: \"<<i<<\" j: \"<<j<<\"\\n\";\n        //std::cout<<\"\
    \\n string.at(i): \"<<string.at(i)<<\" substring.at(j): \"<<substring.at(j)<<\"\
    \\n\";\n        if(string.at(i)==substring.at(j)){\n            //std::cout<<\"\
    \\n if: \"<<\"\\n\";\n            j++;\n            if(j==l){\n              \
    \  count++;\n                //std::cout<<\"\\n count: \"<<count<<\"\\n\";\n \
    \               i++;\n                j=0;\n            }\n            else{\n\
    \                i++;\n            }\n        }\n        else{\n            //std::cout<<\"\
    \\n else: \"<<\"\\n\";\n            i++;\n            j=0;\n        }\n    }\n\
    \    return count;", "    int i,j,k;\n    int l = substring.length();\n    int\
    \ count = 0;\n    for(i=0;i<string.length();i++){\n        if(string[i] == substring[0]){\n\
    \            for(j=i,k=0;k<l;j++,k++){\n                if(string[j] != substring[k]){\n\
    \                    break;\n                }\n            }\n            if(k\
    \ == l){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "  long n = 0;\n  for (int i = 0; i < string.size(); i++) {\n    if\
    \ (string.substr(i, substring.size()) == substring)\n      n++;\n  }\n  return\
    \ n;", "  long counter = 0;\n  for (int i = 0; i < string.length(); i++) {\n \
    \   if (string.substr(i, substring.length()) == substring) {\n      counter++;\n\
    \    }\n  }\n  return counter;", "  long count = 0;\n  for (long i = 0; i <= string.size()\
    \ - substring.size(); i++) {\n    if (string.substr(i, substring.size()) == substring)\
    \ {\n      count++;\n    }\n  }\n  return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    while((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;", "\tlong count\
    \ = 0;\n\tlong i = 0;\n\twhile (i < string.length()) {\n\t\tif (string.substr(i,\
    \ substring.length()) == substring) {\n\t\t\tcount++;\n\t\t\ti += substring.length();\n\
    \t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;", "\tlong count = 0;\n\
    \tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring)\n\t\t\tcount++;\n\t}\n\treturn count;", "    long count = 0;\n\
    \    size_t npos = std::string::npos;\n    size_t pos = 0;\n    while((pos = string.find(substring,\
    \ pos)) != npos) {\n        ++count;\n        ++pos;\n    }\n    return count;",
  "    int count = 0;\n    int i = 0;\n    int lenS = string.length();\n    int lenSub\
    \ = substring.length();\n    for(i = 0; i < lenS; ) {\n        if(string.substr(i,\
    \ lenSub) == substring) {\n            count++;\n            i += lenSub;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    long sublen = substring.length();\n    long strlen = string.length();\n\
    \    for (long i = 0; i < strlen - sublen + 1; i++) {\n        std::string sub\
    \ = string.substr(i, sublen);\n        if (sub == substring) {\n            count++;\n\
    \        }\n    }\n    return count;", "\tif (string.length() < substring.length())\n\
    \t\treturn 0;\n\tif (string.length() == substring.length())\n\t\treturn 1;\n\t\
    long i, j, l, result = 0;\n\tfor (i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == substring[0]) {\n\t\t\tfor (j = 0; j < substring.length(); j++) {\n\t\t\t\
    \tif (string[i + j] != substring[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j ==\
    \ substring.length())\n\t\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;", "\tif\
    \ (string.empty() || substring.empty())\n\t\treturn 0;\n\tlong res = 0;\n\tsize_t\
    \ pos = 0;\n\twhile (pos != std::string::npos) {\n\t\tpos = string.find(substring,\
    \ pos);\n\t\tif (pos != std::string::npos) {\n\t\t\tres++;\n\t\t\tpos++;\n\t\t\
    }\n\t}\n\treturn res;", "    long count = 0;\n    size_t start = 0;\n    while(start\
    \ < string.length()) {\n        start = string.find(substring, start);\n     \
    \   if(start == std::string::npos)\n            break;\n        ++count;\n   \
    \     ++start;\n    }\n    return count;", "    //TODO: Write - Your - Code\n\
    \    if(string.size() == 0 || substring.size() == 0)\n        return 0;\n    if(string.size()\
    \ < substring.size())\n        return 0;\n    int count = 0;\n    for(int i =\
    \ 0; i < string.size(); i++) {\n        int j = 0;\n        while(string[i] ==\
    \ substring[j] && j < substring.size()) {\n            i++;\n            j++;\n\
    \        }\n        if(j == substring.size()) {\n            count++;\n      \
    \      i--;\n        }\n    }\n    return count;", "    long string_size = string.size();\n\
    \    long substring_size = substring.size();\n    long times = 0;\n    if (string_size\
    \ < substring_size) {\n        return 0;\n    }\n    else {\n        for (long\
    \ i = 0; i < string_size; i++) {\n            if (string[i] == substring[0]) {\n\
    \                bool mark = true;\n                for (long j = 1; j < substring_size;\
    \ j++) {\n                    if (string[i + j] != substring[j]) {\n         \
    \               mark = false;\n                        break;\n              \
    \      }\n                }\n                if (mark) {\n                   \
    \ times++;\n                }\n            }\n        }\n    }\n    return times;",
  "   int M = substring.length();\n   int N = string.length();\n   int res = 0;\n\
    \   /* A loop to slide pat[] one by one */\n   for (int i = 0; i <= N - M; i++)\
    \ {\n      int j;\n      /* For current index i, check for pattern match */\n\
    \      for (j = 0; j < M; j++)\n         if (string[i + j] != substring[j])\n\
    \            break;\n      if (j == M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]\n\
    \      {\n         res++;\n         j = 0;\n      }\n   }\n   return res;", " \
    \ long result=0;\n  for(long i=0;i<string.size();i++){\n    if(string[i]==substring[0]){\n\
    \      int l=i;\n      int flag=0;\n      for(long j=0;j<substring.size();j++){\n\
    \        if(string[l]!=substring[j]){\n          flag=1;\n          break;\n \
    \       }\n        l++;\n      }\n      if(flag==0){\n        result++;\n    \
    \  }\n    }\n  }\n  return result;", "    std::vector<int> vec;\n    std::string::size_type\
    \ n = 0;\n    while ( ( n = string.find( substring, n ) ) != std::string::npos\
    \ ) {\n        vec.push_back(n);\n        ++n;\n    }\n    return vec.size();",
  "    size_t nPos = string.find(substring, 0); // fist occurrence\n    long count\
    \ = 0;\n    while(nPos != std::string::npos)\n    {\n        count++;\n      \
    \  nPos = string.find(substring, nPos+1);\n    }\n    return count;", "    std::size_t\
    \ found = string.find(substring);\n    if (found == std::string::npos) {\n   \
    \     return 0;\n    }\n    else {\n        return 1 + how_many_times(string.substr(found\
    \ + 1), substring);\n    }", "  long count=0;\n  if(substring.length()>string.length())\n\
    \  return 0;\n  for(long i=0;i<string.length();i++)\n  {\n    if(string[i]==substring[0])\n\
    \    {\n      int j=0;\n      while(j<substring.length()&&i+j<string.length()&&string[i+j]==substring[j])\n\
    \      {\n        j++;\n      }\n      if(j==substring.length())\n      count++;\n\
    \    }\n  }\n  return count;", "    //find all the positions of the substrings,\
    \ count that how many substrings are there in the given string\n    // so, take\
    \ string, substring, index of the string, index of the substring, count\n    //\
    \ two cases, if substring == \"\", return 0, else, return how_many_times function\n\
    \    // if substring == \"\", return 0\n    if(substring == \"\"){\n        return\
    \ 0;\n    }\n    // else\n    // return the count of the number of substrings\
    \ in the string\n    // so use a count variable\n    int count = 0;\n    // find\
    \ the index of the first time the substring comes in the string\n    // so do\
    \ that for the first time, initialize it to 0\n    int index = 0;\n    // check\
    \ if the index is not -1\n    while(index != -1){\n        // if index != -1,\
    \ then increase the count\n        count++;\n        // use another index for\
    \ the next time, so find the index of the substring in the string using index\n\
    \        index = string.find(substring, index);\n        // then, increase the\
    \ index by 1\n        index++;\n    }\n    // return the count, that is the no.\
    \ of times the substring occurs in the string\n    return count - 1;", '    ',
  "  long count = 0;\n  for (long i = 0; i < string.size(); i++) {\n    if (string.substr(i,\
    \ substring.size()) == substring) {\n      count++;\n    }\n  }\n  return count;",
  "    long count = 0;\n    for (unsigned long i = 0; i < string.length(); i++) {\n\
    \        if (string.substr(i, substring.length()) == substring)\n            count++;\n\
    \    }\n    return count;", "    long long count = 0;\n    for(long long i = 0;\
    \ i < string.length(); i++) {\n        if(string[i] == substring[0]) {\n     \
    \       long long matched = 0;\n            for(long long j = 0; j < substring.length();\
    \ j++) {\n                if(string[i + j] == substring[j]) {\n              \
    \      matched++;\n                }\n            }\n            if(matched ==\
    \ substring.length()) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;", "    if(string.length()==0) return 0;\n    if(substring.length()==0)\
    \ return 0;\n    if(string.length()<substring.length()) return 0;\n    //string=\"\
    Doris\";\n    //substring=\"is\";\n    long count=0;\n    for(int i=0;i<string.length();i++){\n\
    \        //Find the first character of substring in the string\n        if(string[i]==substring[0]){\n\
    \            bool matched=true;\n            //If matched, check all characters.\
    \ If all matched, increase count by 1\n            for(int j=0;j<substring.length();j++){\n\
    \                if(string[i+j]!=substring[j]){\n                    matched=false;\n\
    \                    break;\n                }\n            }\n            if(matched)\
    \ count++;\n        }\n    }\n    return count;", "    long cnt = 0;\n    int\
    \ len = substring.length();\n    for(int i = 0; i < string.length(); i++) {\n\
    \        bool found = true;\n        for(int j = 0; j < len; j++) {\n        \
    \    if(i + j >= string.length() || string[i + j] != substring[j]) {\n       \
    \         found = false;\n                break;\n            }\n        }\n \
    \       if(found) cnt++;\n    }\n    return cnt;", "\tlong count = 0;\n\tlong\
    \ pos = 0;\n\tlong subLength = substring.length();\n\twhile (string.find(substring,\
    \ pos) != std::string::npos) {\n\t\tpos = string.find(substring, pos) + subLength;\n\
    \t\tcount++;\n\t}\n\treturn count;", "    if(substring.size()==0)\n        return\
    \ 0;\n    // Define temp and count as integer variables\n    int temp, count;\n\
    \    // Set count to zero\n    count = 0;\n    // loop through the string\n  \
    \  for(int i=0; i<string.size(); i++){\n        // if string[i] is the start of\
    \ the substring\n        if(string[i] == substring[0]){\n            // loop through\
    \ the substring\n            for(int j=0; j<substring.size(); j++){\n        \
    \        // if the substring doesn't match with the sub string in the original\
    \ string break the loop\n                if(string[i+j] != substring[j])\n   \
    \                 break;\n                // if the substring reaches the end\
    \ then increment the count\n                if(j == substring.size()-1)\n    \
    \                count += 1;\n            }\n        }\n    }\n    return count;",
  "    if(substring == \"\") return 0;\n    long long result = 0;\n    for(long long\
    \ i = 0; i < string.size(); i++){\n        if(string[i] == substring[0]){\n  \
    \          if(substring.size() == 1) result++;\n            else{\n          \
    \      bool is_sub = true;\n                for(long long j = 1; j < substring.size();\
    \ j++){\n                    if(i + j >= string.size() || string[i + j] != substring[j]){\n\
    \                        is_sub = false;\n                        break;\n   \
    \                 }\n                }\n                if(is_sub) result++;\n\
    \            }\n        }\n    }\n    return result;", "    long count = 0;\n\
    \    std::size_t found = string.find(substring);\n    while (found != std::string::npos)\
    \ {\n        count++;\n        string = string.substr(found + 1);\n        found\
    \ = string.find(substring);\n    }\n    return count;", "\t// your code here\n\
    \treturn 0;", "  // your code goes here\n  std::string::size_type n = string.find(substring,\
    \ 0);\n  int count = 0;\n  while(n != std::string::npos)\n  {\n    count++;\n\
    \    n = string.find(substring, n+1);\n  }\n  return count;", "    // Write your\
    \ code here\n    long count = 0;\n    int a = substring.length();\n    int i =\
    \ 0;\n    while(i<string.length()-substring.length()+1){\n        std::string\
    \ sub = string.substr(i,a);\n        if(sub.compare(substring)==0){\n        \
    \    count+=1;\n            i+=a;\n        }\n        else\n            i+=1;\n\
    \    }\n    return count;", "    if(substring.size() > string.size())\n      \
    \  return 0;\n    long occurences = 0;\n    int i = 0;\n    while(i <= string.size()\
    \ - substring.size()) {\n        if(string.substr(i, substring.size()) == substring)\
    \ {\n            ++occurences;\n            i += substring.size();\n        }\n\
    \        else\n            ++i;\n    }\n    return occurences;", "    //return\
    \ string.find(substring, 0) == string::npos ? 0 : 1 + how_many_times(string.substr(string.find(substring,\
    \ 0) + 1), substring);\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string.substr(i, substring.length()) == substring)\n    \
    \        count++;\n    }\n    return count;", "    long res = 0;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        int overlap = 0;\n        int j =\
    \ 0;\n        while (j < substring.size() && i+j < string.size() && string[i+j]\
    \ == substring[j]) {\n            overlap++;\n            j++;\n        }\n  \
    \      if (overlap == substring.size()) {\n            res++;\n        }\n   \
    \ }\n    return res;", "\tif (string.length() < substring.length())\n\t\treturn\
    \ 0;\n\tif (string.length() == substring.length())\n\t\treturn string == substring;\n\
    \telse\n\t\treturn how_many_times(string.substr(1), substring) + how_many_times(string.substr(0,\
    \ string.length() - 1), substring) + (string.substr(0, substring.length()) ==\
    \ substring);", "    long counter = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        bool is_substring = true;\n        for (size_t j = 0; j < substring.size();\
    \ j++) {\n            if (string[i + j] != substring[j]) {\n                is_substring\
    \ = false;\n                break;\n            }\n        }\n        if (is_substring)\
    \ {\n            counter++;\n        }\n    }\n    return counter;", "    long\
    \ count=0;\n    long n=substring.length();\n    for(int i=0;i<string.length();i++){\n\
    \        if(string.substr(i,n)==substring){\n            count++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "  long count = 0;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i, substring.length())\
    \ == substring) {\n      count++;\n    }\n  }\n  return count;", "    int n =\
    \ string.length();\n    int m = substring.length();\n    int i, j;\n    int c\
    \ = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = 0; j < m; j++) {\n\
    \            if (string[i + j] != substring[j]) {\n                break;\n  \
    \          }\n        }\n        if (j == m) {\n            c++;\n        }\n\
    \    }\n    return c;", '    return std::count(string.begin(), string.end(), substring[0])-1;',
  "\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tfor (int\
    \ j = 0; j < substring.length(); j++) {\n\t\t\tif (string[i + j] != substring[j])\
    \ {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == substring.length() - 1) {\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    long times = 0;\n    std::string::size_type\
    \ pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++times;\n        ++pos;\n    }\n    return times;", "  long count\
    \ = 0;\n  std::size_t found;\n  std::size_t start = 0;\n  while (start <= string.length()\
    \ - substring.length()) {\n    found = string.find(substring, start);\n    if\
    \ (found == std::string::npos) {\n      return count;\n    }\n    count += 1;\n\
    \    start = found + 1;\n  }\n  return count;", "    long count = 0;\n    for\
    \ (long i = 0; i < string.length(); i++) {\n        bool found = true;\n     \
    \   for (long j = 0; j < substring.length(); j++) {\n            if (i + j >=\
    \ string.length() || string[i + j] != substring[j]) {\n                found =\
    \ false;\n                break;\n            }\n        }\n        if (found)\
    \ count++;\n    }\n    return count;", "long n=string.length();\nlong m=substring.length();\n\
    long ans=0;\nif(n==0||m==0||n<m) return 0;\nfor(long i=0;i<=n-m;i++)\n{\n    long\
    \ j;\n    for(j=0;j<m;j++)\n    {\n        if(string[i+j]!=substring[j])\n   \
    \     break;\n    }\n    if(j==m)\n    {\n        ans++;\n        j=0;\n    }",
  "    int end_index= string.length()- substring.length();\n    int count=0;\n   \
    \ for(int i=0; i<=end_index; i++){\n        if(string.substr(i, substring.length())==substring){\n\
    \            count++;\n        }\n    }\n    return count;", "    // TODO replace\
    \ this with your code\n    long count = 0;\n    long string_length = string.length();\n\
    \    long sub_string_length = substring.length();\n    long difference = string_length\
    \ - sub_string_length;\n    for(long i = 0; i <= difference; i++) {\n        if(string.substr(i,\
    \ sub_string_length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long stringLength = string.length();\n\
    \    long substringLength = substring.length();\n    if(stringLength == 0 || substringLength\
    \ == 0 || stringLength < substringLength)\n        return 0;\n    for(long i =\
    \ 0; i <= stringLength - substringLength; i++) {\n        if(string.substr(i,\
    \ substringLength) == substring)\n            count++;\n    }\n    return count;",
  "    int count = 0;\n    int sublen = substring.length();\n    int strlen = string.length();\n\
    \    if(sublen==0 || strlen==0) return 0;\n    for(int i=0;i<strlen;i++){\n  \
    \      if(string[i]==substring[0]){\n            if(sublen==1) count++;\n    \
    \        else{\n                for(int j=1;j<sublen;j++){\n                 \
    \   if(string[i+j]==substring[j]){\n                        if(j==sublen-1) count++;\n\
    \                    }\n                    else{\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    if(string.size()\
    \ == 0 || substring.size() == 0) return 0;\n    if(string.size() < substring.size())\
    \ return 0;\n    long count = 0;\n    for(int i = 0; i < string.size(); i++) {\n\
    \        if(string[i] == substring[0]) {\n            for(int j = 1; j < substring.size();\
    \ j++) {\n                if(string[i+j] != substring[j]) break;\n           \
    \     if(j == substring.size()-1) count++;\n            }\n        }\n    }\n\
    \    return count;", "\tif (string.length() == 0)\n\t\treturn 0;\n\tlong count\
    \ = 0;\n\tlong next = 0;\n\twhile (true) {\n\t\t// Find the next index of substring\n\
    \t\tnext = string.find(substring, next);\n\t\tif (next == -1)\n\t\t\tbreak;\n\t\
    \tnext++;\n\t\tcount++;\n\t}\n\treturn count;", "\tlong counter = 0;\n\t// This\
    \ can be improved by using a built in string or z-algorithm\n\tfor (long i = 0;\
    \ i < string.size(); i++) {\n\t\tfor (long j = 0; j < substring.size(); j++) {\n\
    \t\t\tif (string[i + j] != substring[j]) break;\n\t\t\tif (j == substring.size()\
    \ - 1) counter++;\n\t\t}\n\t}\n\treturn counter;", "    // your code here\n  \
    \  long counter = 0;\n    if(substring.size() == 0){\n        return 0;\n    }\n\
    \    for(int i = 0; i < string.size(); i++){\n        for(int j = 0; j < substring.size();\
    \ j++){\n            if(substring[j] == string[i+j]){\n                if(j ==\
    \ substring.size()-1){\n                    counter++;\n                }\n  \
    \          }else{\n                break;\n            }\n        }\n    }\n \
    \   return counter;", "    long res = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        for (int j = 0; j < substring.size(); j++) {\n            if\
    \ (string[i] == substring[j]) {\n                if (i + substring.size() <= string.size())\
    \ {\n                    bool flag = true;\n                    for (int k = 0;\
    \ k < substring.size(); k++) {\n                        if (string[i + k] != substring[k])\
    \ {\n                            flag = false;\n                            break;\n\
    \                        }\n                    }\n                    if (flag)\
    \ {\n                        res++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return res;", "    long ans = 0;\n    for(long\
    \ long i = 0; i < string.size(); ++i) {\n        if(string[i] == substring[0])\
    \ {\n            bool ok = true;\n            for(long long j = 1; j < substring.size();\
    \ ++j) {\n                if(string[i + j] != substring[j]) {\n              \
    \      ok = false;\n                    break;\n                }\n          \
    \  }\n            if(ok) {\n                ++ans;\n            }\n        }\n\
    \    }\n    return ans;", '    return std::count(string.begin(), string.end(),
    substring);', "    long counter = 0;\n    for (long i = 0; i < string.size();\
    \ i++) {\n        for (long j = 0; j < substring.size(); j++) {\n            if\
    \ (string[i + j] != substring[j]) {\n                break;\n            }\n \
    \           if (j == substring.size() - 1) {\n                counter++;\n   \
    \         }\n        }\n    }\n    return counter;", "  long counter = 0;\n  size_t\
    \ location = string.find(substring);\n  while (location != std::string::npos)\
    \ {\n    counter++;\n    location = string.find(substring, location + 1);\n  }\n\
    \  return counter;", "    long count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, substring.length()) == substring) {\n \
    \           count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for (int i = 0; i <= string.length() - substring.length(); i++) {\n\
    \        if (string.substr(i, substring.length()) == substring) {\n          \
    \  count++;\n        }\n    }\n    return count;", '  return std::count(string.begin(),
    string.end(), substring);', "    long result = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        if (string.substr(i, substring.size()) == substring)\n     \
    \       result++;\n    }\n    return result;", "\tlong count = 0;\n\tfor (int\
    \ i = 0; i < string.length(); i++) {\n\t\tbool ok = true;\n\t\tfor (int j = 0;\
    \ j < substring.length(); j++) {\n\t\t\tif (string[i + j] != substring[j]) {\n\
    \t\t\t\tok = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (ok) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;", "    std::string::size_type pos = 0;\n    long n\
    \ = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++n;\n        ++pos;\n    }\n    return n;", "\tlong count = 0;\n\tfor\
    \ (long i = 0; i <= string.length() - substring.length(); ++i) {\n\t\tstd::string\
    \ part = string.substr(i, substring.length());\n\t\tif (part == substring) {\n\
    \t\t\t++count;\n\t\t}\n\t}\n\treturn count;", '    return std::count(string.begin(),
    string.end(), substring);', '    return std::count(string.begin(), string.end(),
    substring[0]) * how_many_times(string.substr(1), substring.substr(1));', "  long\
    \ count = 0;\n  size_t npos = std::string::npos;\n  for (size_t i = 0; (i = string.find(substring,\
    \ i)) != npos; )\n  {\n    ++count;\n    i += substring.length();\n  }\n  return\
    \ count;", "  if (substring.empty()) {\n    return 0;\n  }\n  long times = 0;\n\
    \  std::string::size_type n = string.length();\n  std::string::size_type m = substring.length();\n\
    \  for (std::string::size_type i = 0; i < n; i++) {\n    if (string.substr(i,\
    \ m) == substring) {\n      times++;\n    }\n  }\n  return times;", "\tlong count\
    \ = 0;\n\tfor (int i = 0; i <= string.length() - substring.length(); i++) {\n\t\
    \tstd::string substring2 = string.substr(i, substring.length());\n\t\tif (substring2\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    if(substring.length()\
    \ == 0)\n        return 0;\n    long times = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        int j = 0;\n        while(j < substring.length() && i+j < string.length()\
    \ && string[i+j] == substring[j])\n            j++;\n        if(j == substring.length())\n\
    \            times++;\n    }\n    return times;", "\tlong count = 0;\n\tfor (long\
    \ i = 0; i < string.length(); ++i) {\n\t\tlong x = i;\n\t\tlong y = 0;\n\t\twhile\
    \ (x < string.length() && y < substring.length() && string[x] == substring[y])\
    \ {\n\t\t\t++x;\n\t\t\t++y;\n\t\t}\n\t\tif (y == substring.length()) {\n\t\t\t\
    ++count;\n\t\t}\n\t}\n\treturn count;", "\tlong count = 0;\n\tsize_t start = 0;\n\
    \twhile ((start = string.find(substring, start)) != std::string::npos) {\n\t\t\
    count++;\n\t\tstart += substring.length();\n\t}\n\treturn count;", "    // Your\
    \ code goes here\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(string[i]\
    \ == substring[j]) {\n                int k = i + 1;\n                int m =\
    \ j + 1;\n                while(k < string.length() && m < substring.length())\
    \ {\n                    if(string[k] == substring[m]) {\n                   \
    \     k++;\n                        m++;\n                    }\n            \
    \        else {\n                        break;\n                    }\n     \
    \           }\n                if(m == substring.length()) {\n               \
    \     count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    int n = string.length();\n    int m = substring.length();\n  \
    \  if(n < m)\n        return 0;\n    int count = 0;\n    for(int i = 0; i < n;\
    \ i++) {\n        if(string[i] == substring[0]) {\n            int k = 0;\n  \
    \          for(int j = i; j < i + m; j++) {\n                if(string[j] == substring[k])\
    \ {\n                    k++;\n                }\n                else\n     \
    \               break;\n            }\n            if(k == m) {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;", "    int length\
    \ = string.length();\n    int sublength = substring.length();\n    int count =\
    \ 0;\n    int i;\n    int j;\n    int k;\n    for(i = 0; i < length - sublength\
    \ + 1; i++) {\n        for(j = i, k = 0; j < i + sublength; j++, k++) {\n    \
    \        if(string[j] != substring[k]) {\n                break;\n           \
    \ }\n        }\n        if(j == i + sublength) {\n            count++;\n     \
    \   }\n    }\n    return count;", '    return std::count(string.begin(), string.end(),
    substring);', "    if(string == \"\" || substring == \"\") return 0;\n    if(string.size()\
    \ < substring.size()) return 0;\n    long cnt = 0;\n    int pos = 0;\n    while(pos\
    \ < string.size() - substring.size() + 1) {\n        pos = string.find(substring,\
    \ pos);\n        if(pos != -1) {\n            cnt++;\n            pos += substring.size();\n\
    \        }\n    }\n    return cnt;"]
stop_tokens:
- "\n}"
