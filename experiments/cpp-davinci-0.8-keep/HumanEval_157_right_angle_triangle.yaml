name: HumanEval_157_right_angle_triangle
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
  \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
  \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
  \ a, long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
  \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
  \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
  \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n \
  \   assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8),\
  \ (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
  \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
completions: ["    // TODO: Implement the code.\n    return ((a*a)+(b*b)==(c*c)) ?\
    \ true : false;", "    assert(a > 0 && b > 0 && c > 0);\n    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    return pow(v[0], 2) + pow(v[1], 2) == pow(v[2], 2);", "  double\
    \ s = (a + b + c) / 2.0;\n  double area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \  return area == round(area);", "  if (a == 0 || b == 0 || c == 0) return false;\n\
    \  int max, min1, min2;\n  if (a > b && a > c) {\n    max = a;\n    min1 = b;\n\
    \    min2 = c;\n  } else if (b > a && b > c) {\n    max = b;\n    min1 = a;\n\
    \    min2 = c;\n  } else {\n    max = c;\n    min1 = a;\n    min2 = b;\n  }\n\
    \  return min1 * min1 + min2 * min2 == max * max;", '    return (a*a + b*b ==
    c*c);', "  if (a == 0 || b == 0 || c == 0) return false;\n  long longest = std::max(a,\
    \ std::max(b, c));\n  return std::pow(longest, 2) == std::pow(a, 2) + std::pow(b,\
    \ 2) + std::pow(c, 2);", "    if (a <= 0 || b <= 0 || c <= 0) {\n        return\
    \ false;\n    }\n    long max = std::max(a, std::max(b, c));\n    return max *\
    \ max == a * a + b * b + c * c - max * max;", "  \n  if (a > b && a > c) {\n \
    \   if (a * a == b * b + c * c) {\n      return true;\n    }\n  }\n  else if (b\
    \ > a && b > c) {\n    if (b * b == a * a + c * c) {\n      return true;\n   \
    \ }\n  }\n  else if (c > a && c > b) {\n    if (c * c == a * a + b * b) {\n  \
    \    return true;\n    }\n  }\n  return false;", "  // Write your code here.\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);",
  "  // return a*a + b*b == c*c;\n  // return true;\n  long largest = std::max(std::max(a,\
    \ b), c);\n  long small1 = std::min(std::min(a, b), c);\n  long small2 = a + b\
    \ + c - largest - small1;\n  return largest*largest == small1*small1 + small2*small2;",
  "    long arr[3];\n    arr[0] = a;\n    arr[1] = b;\n    arr[2] = c;\n    std::sort(arr,\
    \ arr+3);\n    return ((arr[0]*arr[0]) + (arr[1]*arr[1])) == (arr[2]*arr[2]);",
  "\t// For a triangle to be right angled:\n\t// a^2 + b^2 = c^2\n\tlong l1 = a *\
    \ a;\n\tlong l2 = b * b;\n\tlong l3 = c * c;\n\treturn (l1 + l2 == l3 || l2 +\
    \ l3 == l1 || l1 + l3 == l2);", "\t// write your code here \n\tlong arr[3] = {a,b,c};\n\
    \tstd::sort(arr,arr+3);\n\tif(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n\
    \t\treturn true;\n\treturn false;", "  std::vector<long> vec;\n  vec.push_back(a);\n\
    \  vec.push_back(b);\n  vec.push_back(c);\n  std::sort(vec.begin(), vec.end());\n\
    \  std::cout << vec[0] << \" \" << vec[1] << \" \" << vec[2] << std::endl;\n \
    \ long hypotenuse = vec[2];\n  long cathetus = vec[1];\n  long base = vec[0];\n\
    \  if (hypotenuse*hypotenuse == base*base + cathetus*cathetus) {\n    return true;\n\
    \  }\n  return false;", '    return (a * a) + (b * b) == (c * c);', "\tstd::vector<long>\
    \ triangle;\n\ttriangle.push_back(a);\n\ttriangle.push_back(b);\n\ttriangle.push_back(c);\n\
    \tsort(triangle.begin(), triangle.end());\n\tif (pow(triangle[0], 2) + pow(triangle[1],\
    \ 2) == pow(triangle[2], 2)) {\n\t\treturn true;\n\t}\n\treturn false;", '    return
    std::max(std::max(a, b), c) == (a*a + b*b + c*c - std::max(std::max(a, b), c)*std::max(std::max(a,
    b), c));', "    assert(a>0&&b>0&&c>0);\n    std::vector<long> sides = {a, b, c};\n\
    \    std::sort(sides.begin(), sides.end());\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);", '  return (a*a + b*b == c*c || b*b + c*c == a*a ||
    c*c + a*a == b*b);', "  std::vector<long> args {a, b, c};\n  std::sort(args.begin(),\
    \ args.end());\n  return pow(args[0], 2) + pow(args[1], 2) == pow(args[2], 2);",
  "  int max = std::max(a, std::max(b, c));\n  int min = std::min(a, std::min(b, c));\n\
    \  int sum = a + b + c;\n  return (sum - max) > max;", '    return (a * a + b
    * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);', "   \
    \ // double max = a;\n    // double min = b;\n    // double mid = c;\n    // if(b\
    \ > max)\n    //     max = b;\n    // if(c > max)\n    //     max = c;\n    //\
    \ if(b < min)\n    //     min = b;\n    // if(c < min)\n    //     min = c;\n\
    \    // if(max*max == mid*mid + min*min)\n    //     return true;\n    // return\
    \ false;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    long a1 = v[0];\n\
    \    long b1 = v[1];\n    long c1 = v[2];\n    if(a1*a1 + b1*b1 == c1*c1)\n  \
    \      return true;\n    return false;", "    if(a*a == b*b + c*c || b*b == a*a\
    \ + c*c || c*c == a*a + b*b)\n        return true;\n    return false;", "    long\
    \ arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0] + arr[1]*arr[1]\
    \ == arr[2]*arr[2])\n        return true;\n    return false;", '    return pow(a,
    2) + pow(b, 2) == pow(c, 2);', "    if(a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a)\n        return true;\n    return false;", "  // TODO\n  std::vector<long>\
    \ triangle;\n  triangle.push_back(a);\n  triangle.push_back(b);\n  triangle.push_back(c);\n\
    \  std::sort(triangle.begin(), triangle.end());\n  return (triangle[0] * triangle[0]\
    \ + triangle[1] * triangle[1] ==\n          triangle[2] * triangle[2]);", "  \
    \  std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(), vec.end());\n\
    \    return (vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2]);", "    //\
    \ if any of the sides is less than or equal to 0 then it is not a triangle\n \
    \   if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\n    //\
    \ using pythagoras theorem\n    // (a^2 + b^2) == c^2\n    // here we check if\
    \ the sum of square of 2 shorter sides is equal to square\n    // of larger side\n\
    \    return (((a * a) + (b * b)) == (c * c));", '  return a*a + b*b == c*c;',
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return std::pow(sides[0], 2) + std::pow(sides[1], 2) == std::pow(sides[2],\
    \ 2);", "  std::vector<long> sides;\n  sides.push_back(a);\n  sides.push_back(b);\n\
    \  sides.push_back(c);\n  std::sort(sides.begin(), sides.end());\n  return (sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);", "    long temp;\n\
    \    if(a > b){\n        temp = a;\n        a = b;\n        b = temp;\n    }\n\
    \    if(b > c){\n        temp = b;\n        b = c;\n        c = temp;\n    }\n\
    \    if(a > b){\n        temp = a;\n        a = b;\n        b = temp;\n    }\n\
    \    return (a*a + b*b == c*c);", "  // max will be the side of the triangle with\
    \ largest length\n  long max = std::max(a, std::max(b, c));\n  // min will be\
    \ the side of the triangle with smallest length\n  long min = std::min(a, std::min(b,\
    \ c));\n  // med will be the side of the triangle with middle length\n  long med\
    \ = (a + b + c) - (max + min);\n  return ((max * max) == (med * med) + (min *\
    \ min));", "\treturn (a * a + b * b == c * c || b * b + c * c == a * a || c *\
    \ c + a * a == b * b);", '  return (((a*a)+(b*b))==(c*c));', "  // Create a sorted\
    \ triangle side lengths\n  std::vector<long> triangle_sides{a, b, c};\n  std::sort(triangle_sides.begin(),\
    \ triangle_sides.end());\n  return (triangle_sides[0] * triangle_sides[0] + triangle_sides[1]\
    \ * triangle_sides[1] == triangle_sides[2] * triangle_sides[2]);", "    // sort\
    \ the array;\n    long sides[3] = {a, b, c};\n    std::sort(sides, sides + 3);\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);",
  "    long longest = std::max(a, std::max(b, c));\n    if(longest == a)\n       \
    \ return a*a == b*b + c*c;\n    else if(longest == b)\n        return b*b == a*a\
    \ + c*c;\n    else\n        return c*c == a*a + b*b;", "  if(a>b && a>c){\n  \
    \  if(a*a == b*b + c*c){\n      return true;\n    }\n  }\n  else if(b>a && b>c){\n\
    \    if(b*b == a*a + c*c){\n      return true;\n    }\n  }\n  else if(c>a && c>b){\n\
    \    if(c*c == a*a + b*b){\n      return true;\n    }\n  }\n  return false;",
  "  long sides[3] = {a, b, c};\n  std::sort(sides, sides + 3);\n  long hypotenuse\
    \ = sides[2];\n  long cathetus1 = sides[1];\n  long cathetus2 = sides[0];\n  return\
    \ pow(hypotenuse, 2) == pow(cathetus1, 2) + pow(cathetus2, 2);", '    return a
    * a + b * b == c * c;', "\tlong side[3] = {a, b, c};\n\tstd::sort(side, side +\
    \ 3);\n\treturn side[0] * side[0] + side[1] * side[1] == side[2] * side[2];",
  "    // Write your code here.\n    long sides[3] = {a, b, c};\n    std::sort(sides,\
    \ sides + 3);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];", "    vector<long> sides;\n    sides.push_back(a);\n    sides.push_back(b);\n\
    \    sides.push_back(c);\n    sort(sides.begin(), sides.end());\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "  if (a == 0 ||\
    \ b == 0 || c == 0) return false;\n  long max = std::max(a, std::max(b, c));\n\
    \  long sum = a + b + c;\n  return (max * max == (sum - max) * (sum - max));",
  "    // assume that a < b < c\n    long sum = a*a + b*b;\n    if (c*c == sum) {\n\
    \        return true;\n    }\n    return false;", "    // Sum of squares of the\
    \ two smaller sides must be equal to square of the\n    // hypotenuse.\n    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0]\
    \ * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];", '    return a*a
    + b*b == c*c;', "    if(a <= 0 || b <= 0 || c <= 0) return false;\n    if(a *\
    \ a + b * b == c * c) return true;\n    if(a * a + c * c == b * b) return true;\n\
    \    if(b * b + c * c == a * a) return true;\n    return false;", "    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    std::reverse(sides.begin(),\
    \ sides.end());\n    return sides[0] * sides[0] == sides[1] * sides[1] + sides[2]\
    \ * sides[2];", "  assert(a >= 1 && b >= 1 && c >= 1);\n  return (a * a + b *\
    \ b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);", "   \
    \ long max = std::max(a,std::max(b,c));\n    long min = std::min(a,std::min(b,c));\n\
    \    if (max*max == (min*min + (a+b+c-max-min)*(a+b+c-max-min))) {\n        return\
    \ true;\n    }\n    return false;", "    // TODO: Implement me\n    std::vector<long>\
    \ arr;\n    arr.push_back(a);\n    arr.push_back(b);\n    arr.push_back(c);\n\
    \    sort(arr.begin(), arr.end());\n    long hyp= arr[2];\n    arr.pop_back();\n\
    \    return pow(hyp, 2) == (pow(arr[0], 2) + pow(arr[1], 2));", "    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    if (sides[0]\
    \ <= 0 || sides[2] >= sides[0] + sides[1]) {\n        return false;\n    }\n \
    \   long maxSide = sides[2];\n    long minSide = sides[0];\n    long otherSide\
    \ = sides[1];\n    return pow(maxSide, 2) == pow(minSide, 2) + pow(otherSide,\
    \ 2);", '  return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;',
  "  //return a*a + b*b == c*c;\n  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(),\
    \ sides.end());\n  return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];",
  "  std::vector<long> sides {a, b, c};\n  std::sort(sides.begin(), sides.end());\n\
    \  return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);", '  return
    abs(c*c - (a*a + b*b)) <= 0.000000001;', "    if (a == 0 || b == 0 || c == 0)\
    \ return false;\n    std::vector<long> sides{a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);", "    long x = a*a;\n    long y = b*b;\n    long z = c*c;\n    std::vector<long>\
    \ v;\n    v.push_back(x);\n    v.push_back(y);\n    v.push_back(z);\n    std::sort(v.begin(),\
    \ v.end());\n    if (v[0] + v[1] == v[2]) {\n        return true;\n    }\n   \
    \ return false;", '  return (a*a)+(b*b)==(c*c);', "  // Basic Pythagoras - Hypotenuse\
    \ (C) = SQRT(a^2 + b^2). Given that all inputs\n  // are positive (zero is not\
    \ considered positive), we can use less than\n  // instead of pow.\n  int c_squared\
    \ = a*a + b*b;\n  int c_hypotenuse = std::sqrt(c_squared);\n  return c_hypotenuse\
    \ == c;", "    if(a==0||b==0||c==0)\n    return false;\n    //long int temp1 =\
    \ (a*a)+(b*b);\n    //long int temp2 = c*c;\n    if( ( (a*a)+(b*b) ) == (c*c)\
    \ )\n    return true;\n    else if( ( (b*b)+(c*c) ) == (a*a) )\n    return true;\n\
    \    else if( ( (c*c)+(a*a) ) == (b*b) )\n    return true;\n    else\n    return\
    \ false;", "    if(a*a+b*b==c*c)\n        return true;\n    else\n        return\
    \ false;", "\treturn (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);", "\t// Longest side\n\tlong max_side = std::max(a, std::max(b, c));\n\
    \tif (max_side == a) {\n\t\tif (a * a == b * b + c * c)\n\t\t\treturn true;\n\t\
    }\n\telse if (max_side == b) {\n\t\tif (b * b == a * a + c * c)\n\t\t\treturn\
    \ true;\n\t}\n\telse {\n\t\tif (c * c == a * a + b * b)\n\t\t\treturn true;\n\t\
    }\n\treturn false;", "    // Write your code here\n    long Max = std::max(a,\
    \ std::max(b, c));\n    long Min = std::min(a, std::min(b, c));\n    if (Max*Max\
    \ == Min*Min + (a+b+c-Min-Max)*(a+b+c-Min-Max))\n        return true;\n    return\
    \ false;", "  // TODO: Implement me!\n  return false;", "    // c^2 = a^2 + b^2\n\
    \    // sort a, b, c such that c is largest\n    if (a > b) {\n        std::swap(a,\
    \ b);\n    }\n    if (b > c) {\n        std::swap(b, c);\n    }\n    if (a > b)\
    \ {\n        std::swap(a, b);\n    }\n    return std::pow(c, 2) == std::pow(a,\
    \ 2) + std::pow(b, 2);", "  // your code here..\n  long arr[3];\n  arr[0] = a;\n\
    \  arr[1] = b;\n  arr[2] = c;\n  std::sort(arr, arr+3);\n  if (arr[0]*arr[0] +\
    \ arr[1]*arr[1] == arr[2]*arr[2]) {\n    return true;\n  }\n  return false;",
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];",
  "  long sides[] = {a, b, c};\n  std::sort(sides, sides + 3);\n  return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "  // your code here\n\
    \  std::vector<long> values;\n  values.push_back(a);\n  values.push_back(b);\n\
    \  values.push_back(c);\n  std::sort(values.begin(), values.end());\n  if (values[0]*values[0]\
    \ + values[1]*values[1] == values[2]*values[2])\n    return true;\n  return false;",
  "    vector<long> sides = {a, b, c};\n    sort(sides.begin(), sides.end());\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "    if(a==0 || b==0 || c==0) return false;\n    std::vector<long> vec;\n    vec.push_back(a);\n\
    \    vec.push_back(b);\n    vec.push_back(c);\n    sort(vec.begin(), vec.end());\n\
    \    return vec[0]*vec[0] + vec[1]*vec[1] == vec[2]*vec[2];", "  // Show your\
    \ work here...\n  // first we need to find out the biggest side of the triangle\n\
    \  // and the other two side that is not the biggest will be added.\n  // then\
    \ if the sum of the other two sides is bigger than the biggest side\n  // then\
    \ it is a right-angled triangle.\n  long sides[3] = {a, b, c};\n  std::sort(sides,\
    \ sides + 3);\n  if(sides[0] + sides[1] > sides[2])\n  {\n    return true;\n \
    \ }\n  else \n  {\n    return false;\n  }", "    long arr[3] = {a, b, c};\n  \
    \  std::sort(arr, arr+3);\n    return arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2];",
  "    // The square of the hypotenuse is equal to the sum of the squares of the \n\
    \    // other two sides.\n    // If sum of the squares of the smaller two sides\
    \ is equal to the square \n    // of the hypotenuse, then triangle is a right\
    \ angled triangle.\n    long long x, y, z;\n    if(a > b && a > c) {\n       \
    \ x = a;\n        y = b;\n        z = c;\n    } else if(b > a && b > c) {\n  \
    \      x = b;\n        y = a;\n        z = c;\n    } else {\n        x = c;\n\
    \        y = a;\n        z = b;\n    }\n    // x is the hypotenuse\n    if(pow(x,\
    \ 2) == pow(y, 2) + pow(z, 2)) {\n        return true;\n    }\n    return false;",
  "    // assert(a > 0 && b > 0 && c > 0);\n    if(a > 0 && b > 0 && c > 0) {\n  \
    \      if(a*a + b*b == c*c) {\n            return true;\n        }\n        else\
    \ if(a*a + c*c == b*b) {\n            return true;\n        }\n        else if(b*b\
    \ + c*c == a*a) {\n            return true;\n        }\n        else {\n     \
    \       return false;\n        }\n    }\n    else {\n        return false;\n \
    \   }", "    std::vector<long> A = {a, b, c};\n    std::sort(A.begin(), A.end());\n\
    \    return std::pow(A[0], 2) + std::pow(A[1], 2) == std::pow(A[2], 2);", "  \
    \  // square of hypotenuse is equal to square of sum of other two sides\n    return\
    \ pow(a, 2) + pow(b, 2) == pow(c, 2);", "    if (a == 0 || b == 0 || c == 0) return\
    \ false;\n    // a^2 + b^2 = c^2\n    std::vector<int> sides = {a, b, c};\n  \
    \  std::sort(sides.begin(), sides.end());\n    if (sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]) {\n        return true;\n    }\n    return\
    \ false;", "  std::vector<long> vec = {a, b, c};\n  std::sort(vec.begin(), vec.end());\n\
    \  return vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2];", "    long array[]\
    \ = {a, b, c};\n    std::sort(array, array + 3);\n    return array[0] * array[0]\
    \ + array[1] * array[1] == array[2] * array[2];", "  if (a*a == b*b + c*c || b*b\
    \ == a*a + c*c || c*c == a*a + b*b)\n    return true;\n  return false;", "   \
    \ // check if the largest side is the one opposite the right angle.\n    return\
    \ (a * a) + (b * b) == (c * c);", '  return (a*a + b*b == c*c);', "    // TODO:\
    \ implement this function\n    int arr[3];\n    arr[0] = a;\n    arr[1] = b;\n\
    \    arr[2] = c;\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0] + arr[1]*arr[1]\
    \ == arr[2]*arr[2]){\n        return true;\n    }\n    return false;", "\tlong\
    \ s = std::max(a, std::max(b, c));\n\treturn (s*s == a*a + b*b + c*c - s*s);",
  "  // sort the three sides from largest to smallest\n  std::vector<long> sides =\
    \ {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  std::reverse(sides.begin(),\
    \ sides.end());\n  return (sides[0] * sides[0] == sides[1] * sides[1] + sides[2]\
    \ * sides[2]);", "  if (a == 0 || b == 0 || c == 0) {\n    return false;\n  }\n\
    \  if (a < b && a < c) {\n    return pow(a, 2) + pow(b, 2) == pow(c, 2);\n  }\n\
    \  if (b < a && b < c) {\n    return pow(b, 2) + pow(a, 2) == pow(c, 2);\n  }\n\
    \  if (c < a && c < b) {\n    return pow(c, 2) + pow(a, 2) == pow(b, 2);\n  }\n\
    \  return false;", "    std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(),\
    \ vec.end());\n    return (vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2]);",
  '  return (a*a+b*b==c*c) or (a*a+c*c==b*b) or (b*b+c*c==a*a);', "    // if a, b,\
    \ c are the sides of a right angled triangle then a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 - c^2 = 0\n    // (a^2 + b^2 - c^2) == 0\n   \
    \ // a^2 + b^2 - c^2 == 0\n    // return (a^2 + b^2 - c^2) == 0;\n    long max_len\
    \ = std::max(a, std::max(b, c));\n    long sum_len = a + b + c;\n    // sqrt(sqr)\
    \ = max_len\n    // sqr = max_len * max_len\n    // sum_len - 2 * max_len = max_len\n\
    \    // sum_len - max_len = 2 * max_len\n    // sum_len - max_len == 2 * max_len\n\
    \    return (sum_len - max_len) == 2 * max_len;", "\tstd::vector<long> v{a, b,\
    \ c};\n\tstd::sort(v.begin(), v.end());\n\treturn pow(v[0], 2) + pow(v[1], 2)\
    \ == pow(v[2], 2);", "  if (a > b && a > c) {\n    return a * a == b * b + c *\
    \ c;\n  } else if (b > a && b > c) {\n    return b * b == a * a + c * c;\n  }\
    \ else {\n    return c * c == a * a + b * b;\n  }", "  if(a*a+b*b==c*c)\n    return\
    \ true;\n  if(a*a+c*c==b*b)\n    return true;\n  if(b*b+c*c==a*a)\n    return\
    \ true;\n  return false;", "  assert(a > 0 && b > 0 && c > 0);\n  return (pow(a,\
    \ 2) + pow(b, 2) == pow(c, 2)) ||\n         (pow(b, 2) + pow(c, 2) == pow(a, 2))\
    \ ||\n         (pow(c, 2) + pow(a, 2) == pow(b, 2));", "  std::vector<long> sides;\n\
    \  sides.push_back(a);\n  sides.push_back(b);\n  sides.push_back(c);\n  sort(sides.begin(),\
    \ sides.end());\n  return (pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2));", "  assert(a >= 1 && b >= 1 && c >= 1);\n  // 1, 2, 3\n  // 1, 4, 6\n\
    \  // 1, 8, 9\n  // 3, 4, 5\n  // 5, 12, 13\n  // 7, 24, 25\n  std::vector<long>\
    \ sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  std::cout <<\
    \ \"sides: \" << sides[0] << ' ' << sides[1] << ' ' << sides[2] << '\\n';\n  long\
    \ a2 = sides[0] * sides[0];\n  long b2 = sides[1] * sides[1];\n  long c2 = sides[2]\
    \ * sides[2];\n  return (a2 + b2 == c2) or (a2 + c2 == b2) or (b2 + c2 == a2);",
  "\tif (a == 0 || b == 0 || c == 0)\n\t\treturn false;\n\tif (a == INT_MAX || b ==\
    \ INT_MAX || c == INT_MAX)\n\t\treturn false;\n\tif (a == INT_MIN || b == INT_MIN\
    \ || c == INT_MIN)\n\t\treturn false;\n\tif (a == LONG_MAX || b == LONG_MAX ||\
    \ c == LONG_MAX)\n\t\treturn false;\n\tif (a == LONG_MIN || b == LONG_MIN || c\
    \ == LONG_MIN)\n\t\treturn false;\n\tif (a < 0 || b < 0 || c < 0)\n\t\treturn\
    \ false;\n\tif (a == b && b == c)\n\t\treturn false;\n\tif (a == b || b == c ||\
    \ a == c)\n\t\treturn false;\n\telse if (a > b && a > c) {\n\t\tif (a * a == b\
    \ * b + c * c)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\
    \ if (b > a && b > c) {\n\t\tif (b * b == a * a + c * c)\n\t\t\treturn true;\n\
    \t\telse\n\t\t\treturn false;\n\t}\n\telse if (c > a && c > b) {\n\t\tif (c *\
    \ c == a * a + b * b)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\
    \telse\n\t\treturn false;", "\tdouble max = std::max(a, std::max(b, c));\n\tdouble\
    \ hypotenuse = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2));\n\treturn hypotenuse ==\
    \ max;", "\tlong arr[3] = {a, b, c};\n\tstd::sort(arr, arr+3);\n\tlong hyp = arr[2];\n\
    \tlong cat1 = arr[0];\n\tlong cat2 = arr[1];\n\treturn (hyp*hyp == cat1*cat1 +\
    \ cat2*cat2);", "    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) ||\n           (b * b + c * c == a * a);", "  // Write your code here.\n\
    \    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a+b*b==c*c)\n \
    \       return true;\n    else if(a*a+c*c==b*b)\n        return true;\n    else\
    \ if(b*b+c*c==a*a)\n        return true;\n    else \n        return false;", " \
    \   std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);", '  return
    (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a);', "    long x, y,\
    \ z;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n   \
    \ v.push_back(c);\n    std::sort(v.begin(), v.end());\n    x = v[0];\n    y =\
    \ v[1];\n    z = v[2];\n    if ((x*x) + (y*y) == (z*z)) {\n        return true;\n\
    \    }\n    return false;", "  bool q1 = a*a + b*b == c*c;\n  bool q2 = a*a +\
    \ c*c == b*b;\n  bool q3 = b*b + c*c == a*a;\n  return q1 || q2 || q3;", "  //\
    \ Add your code here\n  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(),\
    \ sides.end());\n  return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]);", "\t// Convert a, b, c to list of longs\n\tstd::vector<long> vec\
    \ = {a, b, c};\n\t// Sort the list in ascending order\n\tstd::sort(vec.begin(),\
    \ vec.end());\n\t// Check whether their squares adds up to the square of the largest\
    \ element\n\treturn pow(vec[0], 2) + pow(vec[1], 2) == pow(vec[2], 2);", "  //your\
    \ code here\n  std::vector<long> v = {a, b, c};\n  std::sort(v.begin(), v.end());\n\
    \  return pow(v[0], 2) + pow(v[1], 2) == pow(v[2], 2);", "  std::vector<long>\
    \ vec = {a, b, c};\n  std::sort(vec.begin(), vec.end());\n  return (vec[0] * vec[0]\
    \ + vec[1] * vec[1] == vec[2] * vec[2]);", "    long m,n,k;\n    m=a;\n    n=b;\n\
    \    k=c;\n    if((m+n>k)&&(m+k>n)&&(n+k>m))\n    {\n        if((m*m+n*n==k*k)||(m*m+k*k==n*n)||(n*n+k*k==m*m))\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }", "    long big, mid, sml;\n    // big-mid-sml\n    if (a > b) {\n    \
    \    if (a > c) {\n            big = a;\n            if (b > c) {\n          \
    \      mid = b;\n                sml = c;\n            } else {\n            \
    \    mid = c;\n                sml = b;\n            }\n        } else {\n   \
    \         big = c;\n            mid = a;\n            sml = b;\n        }\n  \
    \  } else {\n        if (b > c) {\n            big = b;\n            if (a > c)\
    \ {\n                mid = a;\n                sml = c;\n            } else {\n\
    \                mid = c;\n                sml = a;\n            }\n        }\
    \ else {\n            big = c;\n            mid = b;\n            sml = a;\n \
    \       }\n    }\n    assert(big >= mid && mid >= sml);\n    // double area =\
    \ 0.5 * a * b;\n    // double sqr_area = area * area;\n    // double hyp_sqr =\
    \ c * c;\n    // if (hyp_sqr < sqr_area) {\n    //     return false;\n    // }\
    \ else if (hyp_sqr == sqr_area) {\n    //     return true;\n    // } else {\n\
    \    //     return false;\n    // }\n    return big * big == mid * mid + sml *\
    \ sml;", '  return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c
    * c + a * a == b * b);', "    std::vector<long> v = {a, b, c};\n    std::sort(v.begin(),\
    \ v.end());\n    return v[0] * v[0] + v[1] * v[1] == v[2] * v[2];", "    // TODO:\
    \ write your code here\n    return false;", "\tlong sides[] = {a, b, c};\n\tstd::sort(sides,\
    \ sides + 3);\n\treturn sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];", '    return (a*a+b*b==c*c) || (a*a+c*c==b*b) || (b*b+c*c==a*a);',
  "  long max = std::max(a, std::max(b, c));\n  long min = std::min(a, std::min(b,\
    \ c));\n  return max*max == (min*min) + (std::abs(a-b)*std::abs(a-b));", "\tstd::vector<long>\
    \ v = {a, b, c};\n\tstd::sort(v.begin(), v.end());\n\treturn v[0] * v[0] + v[1]\
    \ * v[1] == v[2] * v[2];", "  std::vector<long> vals = {a, b, c};\n  sort(vals.begin(),\
    \ vals.end());\n  return vals[0] * vals[0] + vals[1] * vals[1] == vals[2] * vals[2];",
  '    return (a*a+b*b == c*c)||(a*a+c*c == b*b)||(b*b+c*c == a*a);', "    if (a <=\
    \ 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    std::vector<long>\
    \ triangle_sides = {a, b, c};\n    std::sort(triangle_sides.begin(), triangle_sides.end());\n\
    \    return (triangle_sides[0] * triangle_sides[0] + triangle_sides[1] * triangle_sides[1]\
    \ == triangle_sides[2] * triangle_sides[2]);", "    if (a>=0 && b>=0 && c>=0)\
    \ {\n        // A triangle with all sides equal is also a right angled triangle\n\
    \        return (a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a || a==b ||\
    \ b==c || c==a);\n    }\n    return false;", "\tlong max = std::max(a, std::max(b,\
    \ c));\n\tif (max == a) {\n\t\treturn pow(b, 2) + pow(c, 2) == pow(a, 2);\n\t\
    }\n\telse if (max == b) {\n\t\treturn pow(a, 2) + pow(c, 2) == pow(b, 2);\n\t\
    }\n\telse {\n\t\treturn pow(a, 2) + pow(b, 2) == pow(c, 2);\n\t}", "  // write\
    \ your code here\n  \n  if(a<=0 || b<=0 || c<=0)\n    return false;\n  \n  //\
    \ Using pythagoras theorem if c is the hypotenuse then a^2 + b^2 = c^2\n  // if\
    \ the above is true then its a right angled triangle otherwise not.\n  if((a*a\
    \ + b*b) == (c*c))\n    return true;\n  else if((a*a + c*c) == (b*b))\n    return\
    \ true;\n  else if((b*b + c*c) == (a*a))\n    return true;\n  else\n    return\
    \ false;", "    vector<long> v = {a, b, c};\n    sort(v.begin(), v.end());\n \
    \   return pow(v[0], 2) + pow(v[1], 2) == pow(v[2], 2);", "  if(a == 0 || b ==\
    \ 0 || c == 0) return false;\n  if(a*a + b*b == c*c) return true;\n  if(a*a +\
    \ c*c == b*b) return true;\n  if(b*b + c*c == a*a) return true;\n  return false;",
  "\t// your code here\n\tstd::vector<long> vect = {a, b, c};\n\tstd::sort(vect.begin(),\
    \ vect.end());\n\treturn vect[0] * vect[0] + vect[1] * vect[1] == vect[2] * vect[2];",
  '  return a*a+b*b==c*c;', "  // Write your code here\n  std::sort(std::begin({a,\
    \ b, c}), std::end({a, b, c}));\n  return (a * a + b * b == c * c);", "    long\
    \ max,min,mid;\n    if (a>b && a>c) {\n        max = a;\n        if (b>c) {\n\
    \            mid = b;\n            min = c;\n        }\n        else {\n     \
    \       mid = c;\n            min = b;\n        }\n    }\n    else if (b>a &&\
    \ b>c) {\n        max = b;\n        if (a>c) {\n            mid = a;\n       \
    \     min = c;\n        }\n        else {\n            mid = c;\n            min\
    \ = a;\n        }\n    }\n    else {\n        max = c;\n        if (a>b) {\n \
    \           mid = a;\n            min = b;\n        }\n        else {\n      \
    \      mid = b;\n            min = a;\n        }\n    }\n    if (max*max == min*min\
    \ + mid*mid) {\n        return true;\n    }\n    else {\n        return false;\n\
    \    }", "  std::vector<long> nums = {a, b, c};\n  std::sort(nums.begin(), nums.end());\n\
    \  a = nums[0];\n  b = nums[1];\n  c = nums[2];\n  if (a + b <= c) {\n    return\
    \ false;\n  }\n  return (a * a + b * b == c * c);", "  // Write your code here!\n\
    \  int max = std::max(a, std::max(b, c));\n  if (a == b && b == c) {\n    return\
    \ false;\n  } else if (a * a + b * b == c * c || a * a + c * c == b * b || b *\
    \ b + c * c == a * a) {\n    return true;\n  } else {\n    return false;\n  }",
  '    return pow(a, 2) + pow(b, 2) == pow(c, 2);', "\tstd::vector<long> v = {a, b,\
    \ c};\n\tstd::sort(v.begin(), v.end());\n\treturn pow(v[0], 2) + pow(v[1], 2)\
    \ == pow(v[2], 2);", "\tlong s[3];\n\ts[0] = a;\n\ts[1] = b;\n\ts[2] = c;\n\t\
    std::sort(s, s + 3);\n\treturn s[0] * s[0] + s[1] * s[1] == s[2] * s[2];", " \
    \ bool isRight = false;\n  vector<long> sides = {a, b, c};\n  sort(sides.begin(),\
    \ sides.end());\n  long hypotenuse = sides[2];\n  long small = sides[0];\n  long\
    \ big = sides[1];\n  if ((hypotenuse * hypotenuse) == (small * small) + (big *\
    \ big)) {\n    isRight = true;\n  }\n  return isRight;", "  std::sort(std::array<long,\
    \ 3>{a, b, c}.begin(), std::array<long, 3>{a, b, c}.end());\n  return std::pow(a,\
    \ 2) + std::pow(b, 2) == std::pow(c, 2);", "    // Solution Here\n    long max\
    \ = std::max(a, std::max(b, c));\n    long sum = a + b + c;\n    if(max == a)\
    \ {\n      return a*a + b*b == c*c;\n    }\n    else if(max == b) {\n      return\
    \ a*a + b*b == c*c;\n    }\n    else {\n      return a*a + b*b == c*c;\n    }",
  '    return ((a*a + b*b == c*c)||(b*b + c*c == a*a)||(c*c + a*a == b*b));', "  if\
    \ (a*a + b*b == c*c) {\n    return true;\n  } else if (a*a + c*c == b*b) {\n \
    \   return true;\n  } else if (b*b + c*c == a*a) {\n    return true;\n  } else\
    \ {\n    return false;\n  }", '    return (a*a + b*b == c*c || b*b + c*c == a*a
    || c*c + a*a == b*b);', "    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    if(a > b && a > c) {\n\
    \        s = a;\n        t = b;\n        u = c;\n    }\n    else if(b > a && b\
    \ > c) {\n        s = b;\n        t = a;\n        u = c;\n    }\n    else {\n\
    \        s = c;\n        t = a;\n        u = b;\n    }\n    if(s * s == t * t\
    \ + u * u)\n        return true;\n    return false;", '  return (a*a + b*b ==
    c*c);', "    // Write your code here\n    long maximum_side, minimum_side1, minimum_side2;\n\
    \    // to find the maximum side\n    if(a > b) {\n        if(a > c) {\n     \
    \       maximum_side = a;\n            minimum_side1 = b;\n            minimum_side2\
    \ = c;\n        }\n        else {\n            maximum_side = c;\n           \
    \ minimum_side1 = a;\n            minimum_side2 = b;\n        }\n    }\n    else\
    \ {\n        if(b > c) {\n            maximum_side = b;\n            minimum_side1\
    \ = a;\n            minimum_side2 = c;\n        }\n        else {\n          \
    \  maximum_side = c;\n            minimum_side1 = a;\n            minimum_side2\
    \ = b;\n        }\n    }\n    if(maximum_side*maximum_side == minimum_side1*minimum_side1\
    \ + minimum_side2*minimum_side2) {\n        return true;\n    }\n    else {\n\
    \        return false;\n    }", "\t//long x[3];\n\tlong x[3] = {a, b, c};\n\t\
    std::sort(x, x+3);\n\tif(x[0]*x[0] + x[1]*x[1] == x[2]*x[2]) return true;\n\t\
    return false;", "  // your code here\n  long sides[3] = {a, b, c};\n  std::sort(sides,\
    \ sides + 3);\n  long hypo = sides[2];\n  long side1 = sides[0];\n  long side2\
    \ = sides[1];\n  return pow(hypo, 2) == pow(side1, 2) + pow(side2, 2);", "  //\
    \ TODO: your code here\n  return (c*c == a*a + b*b);", '    return a*a + b*b ==
    c*c;', "    // Your code goes here.\n    long x = (a*a) + (b*b);\n    long y =\
    \ c*c;\n    if(x == y)\n        return true;\n    else\n        return false;",
  "  if (a*a + b*b == c*c) {\n    return true;\n  }\n  if (a*a + c*c == b*b) {\n \
    \   return true;\n  }\n  if (b*b + c*c == a*a) {\n    return true;\n  }\n  return\
    \ false;", '  return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b
    * b + c * c == a * a);', "    if (a==0 || b==0 || c==0)\n        return false;\n\
    \    long m = std::max(a, std::max(b, c));\n    if (a==m) {\n        if (a*a ==\
    \ b*b + c*c)\n            return true;\n    } else if (b==m) {\n        if (b*b\
    \ == a*a + c*c)\n            return true;\n    } else {\n        if (c*c == a*a\
    \ + b*b)\n            return true;\n    }\n    return false;", "  // your code\
    \ here\n  if(a == 0 || b == 0 || c == 0)\n    return false;\n  std::vector<long>\
    \ l;\n  l.push_back(a);\n  l.push_back(b);\n  l.push_back(c);\n  std::sort(l.begin(),\
    \ l.end());\n  int s = 0;\n  for(int i = 0; i < l.size() - 1; i++)\n    s += l[i]\
    \ * l[i];\n  if(s == l[l.size() - 1] * l[l.size() - 1])\n    return true;\n  return\
    \ false;", "\tlong n[3] = {a, b, c};\n\tstd::sort(n, n+3);\n\tif(n[0] * n[0] +\
    \ n[1] * n[1] == n[2] * n[2])\n\t\treturn true;\n\treturn false;", "  assert(a\
    \ > 0 && b > 0 && c > 0);\n  // in the general case, no sorting required.\n  //\
    \ use a, b, c directly.\n  // sort((long*)&a, (long*)&c);\n  // return (a*a +\
    \ b*b == c*c);\n  return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c\
    \ == a*a);", "    // pow(a, 2) + pow(b, 2) === pow(c, 2)\n    // (a^2 + b^2) ===\
    \ (c^2)\n    // using pow requires the cmath header\n    return (pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2));", "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];", "    // calculate area of the triangle using Heron's Formula\n\
    \    double s = (a + b + c) / 2.0;\n    double area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    // calculate the semi-perimeter\n    double sp = area /\
    \ s;\n    // check if area is equal to the square of semi-perimeter\n    return\
    \ area == sp * sp;", "    //assert(a > 0 && b > 0 && c > 0);\n    if(a*a + b*b\
    \ == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return\
    \ false;", "  std::sort(a, b, c);\n  if (c*c == a*a + b*b) {\n    return true;\n\
    \  }\n  return false;", "    long max = a;\n    long medium = b;\n    long min\
    \ = c;\n    if (a < b) {\n        max = b;\n        medium = a;\n    }\n    if\
    \ (max < c) {\n        min = medium;\n        medium = max;\n        max = c;\n\
    \    }\n    if (medium < c) {\n        min = medium;\n        medium = c;\n  \
    \  }\n    if (medium * medium + min * min == max * max) {\n        return true;\n\
    \    }\n    return false;", "    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr+3);\n    if (pow(arr[0], 2) + pow(arr[1], 2) == pow(arr[2], 2)) {\n    \
    \    return true;\n    }\n    return false;", "  if(a == 0 || b == 0 || c == 0)\
    \ return false;\n  std::vector<long> vals{a, b, c};\n  std::sort(vals.begin(),\
    \ vals.end());\n  return (vals[0] * vals[0] + vals[1] * vals[1]) == vals[2] *\
    \ vals[2];", "\tif (a > b && a > c) {\n\t\treturn a * a == b * b + c * c;\n\t\
    }\n\tif (b > a && b > c) {\n\t\treturn b * b == a * a + c * c;\n\t}\n\tif (c >\
    \ a && c > b) {\n\t\treturn c * c == a * a + b * b;\n\t}\n\treturn false;", " \
    \ // Your code here\n  return (a * a + b * b == c * c || a * a + c * c == b *\
    \ b || b * b + c * c == a * a);", "   int x = a, y = b, z = c;\n   if(x + y <\
    \ z || y + z < x || x + z < y)\n      return false;\n   else if(x == y && y ==\
    \ z)\n      return false;\n   else {\n      if(pow(x, 2) + pow(y, 2) == pow(z,\
    \ 2))\n         return true;\n      else if(pow(x, 2) + pow(z, 2) == pow(y, 2))\n\
    \         return true;\n      else if(pow(y, 2) + pow(z, 2) == pow(x, 2))\n  \
    \       return true;\n      else\n         return false;\n   }", "    if(a>b &&\
    \ a>c)\n        return (a*a) == (b*b) + (c*c);\n    else if(b>a && b>c)\n    \
    \    return (b*b) == (a*a) + (c*c);\n    else\n        return (c*c) == (a*a) +\
    \ (b*b);", "    long arr[3];\n    arr[0] = a;\n    arr[1] = b;\n    arr[2] = c;\n\
    \    sort(arr, arr+3);\n    if (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\
    \ {\n        return true;\n    }\n    return false;", "    if(a == 0 || b == 0\
    \ || c == 0) return false;\n    if(a*a + b*b == c*c) return true;\n    if(a*a\
    \ + c*c == b*b) return true;\n    if(b*b + c*c == a*a) return true;\n    return\
    \ false;", "  long arr[3] = {a, b, c};\n  sort(arr, arr+3);\n  return (arr[0]*arr[0]\
    \ + arr[1]*arr[1] == arr[2]*arr[2]);", "    std::vector<long> triangle = {a, b,\
    \ c};\n    std::sort(triangle.begin(), triangle.end());\n    if(triangle[0] +\
    \ triangle[1] == triangle[2]){\n        return true;\n    }\n    return false;",
  "    if (a > b && a > c) {\n        return (a * a == b * b + c * c);\n    } else\
    \ if (b > a && b > c) {\n        return (b * b == a * a + c * c);\n    } else\
    \ {\n        return (c * c == a * a + b * b);\n    }", "    long arr[3] = {a,\
    \ b, c};\n    std::sort(arr, arr+3);\n    return arr[0]*arr[0] + arr[1]*arr[1]\
    \ == arr[2]*arr[2];", "    long side[3] = {a, b, c};\n    std::sort(side, side\
    \ + 3);\n    // Check if the sum of the smaller two sides equals the largest side.\n\
    \    return side[0] * side[0] + side[1] * side[1] == side[2] * side[2];", "\t\
    long num1=pow(a,2),num2=pow(b,2),num3=pow(c,2);\n\tif(num1+num2==num3||num1+num3==num2||num2+num3==num1)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "    long sides[3] = {a, b, c};\n\
    \    std::sort(sides, sides + 3);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];", '    return a * a + b * b == c * c;', " \
    \ // a square\n  auto a_sq = a * a;\n  // b square\n  auto b_sq = b * b;\n  //\
    \ c square\n  auto c_sq = c * c;\n  // if side a is bigger than the other 2, then\
    \ return true\n  // if a, b, c is a pythagorean triplet, then it makes a right\
    \ triangle.\n  if(a_sq > b_sq + c_sq) {\n    return true;\n  }\n  if(b_sq > a_sq\
    \ + c_sq) {\n    return true;\n  }\n  if(c_sq > a_sq + b_sq) {\n    return true;\n\
    \  }\n  return false;", "  // Write your code here\n  long long max_length = std::max(a,\
    \ std::max(b, c));\n  if (max_length > a + b + c - max_length) {\n    return false;\n\
    \  }\n  // this is equivalent to pow(a, 2) + pow(b, 2) == pow(c, 2)\n  return\
    \ pow(a, 2) + pow(b, 2) == pow(c, 2) ||\n         pow(a, 2) + pow(c, 2) == pow(b,\
    \ 2) ||\n         pow(b, 2) + pow(c, 2) == pow(a, 2);", "    long a2 = a*a;\n\
    \    long b2 = b*b;\n    long c2 = c*c;\n    return (a2 + b2 == c2) || (a2 + c2\
    \ == b2) || (b2 + c2 == a2);", "    std::vector<long> sides = {a, b, c};\n   \
    \ std::sort(sides.begin(), sides.end());\n    return (long) sides[0] * sides[0]\
    \ + (long) sides[1] * sides[1] == (long) sides[2] * sides[2];", '    return (a*a+b*b==c*c
    || a*a+c*c==b*b || b*b+c*c==a*a);', "    long x = std::max(a, std::max(b, c));\n\
    \    long y = (a + b + c) - x - x;\n    long z = x - y;\n    assert(x >= y &&\
    \ y >= z);\n    return x * x == y * y + z * z;", "    if(a == 0 || b == 0 || c\
    \ == 0) return false;\n    double hyp = std::max(a, std::max(b, c));\n    if(hyp\
    \ == a) return (b*b + c*c == a*a);\n    if(hyp == b) return (a*a + c*c == b*b);\n\
    \    if(hyp == c) return (a*a + b*b == c*c);\n    return false;", '    return
    ((a*a + b*b == c*c)||(a*a + c*c == b*b)||(b*b + c*c == a*a));', "    // TODO:\
    \ add code here.\n\tlong arr[3] = {a,b,c};\n\tstd::sort(arr,arr+3);\n\t// assert(arr[0]*arr[0]\
    \ + arr[1]*arr[1] == arr[2]*arr[2]);\n\treturn (arr[0]*arr[0] + arr[1]*arr[1]\
    \ == arr[2]*arr[2]);", "  if(a > b && a > c)\n  {\n    if(a*a == b*b + c*c)\n\
    \      return true;\n    else\n      return false;\n  }\n  else if(b > a && b\
    \ > c)\n  {\n    if(b*b == a*a + c*c)\n      return true;\n    else\n      return\
    \ false;\n  }\n  else if(c > a && c > b)\n  {\n    if(c*c == a*a + b*b)\n    \
    \  return true;\n    else\n      return false;\n  }\n  else\n    return false;",
  "  // suppose a^2 + b^2 = c^2 is true\n  // so c must be greater than a and b\n\
    \  if (c <= a || c <= b) {\n    return false;\n  }\n  return ((c * c) == (a *\
    \ a) + (b * b));", "    int value = 0;\n    if(a * a + b * b == c * c){\n    \
    \    value = 1;\n    }\n    else if(a * a + c * c == b * b){\n        value =\
    \ 1;\n    }\n    else if(b * b + c * c == a * a){\n        value = 1;\n    }\n\
    \    if(value == 1){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }", "  std::sort(std::begin({a, b, c}), std::end({a, b, c}));\n  return a\
    \ * a + b * b == c * c;", "    if(a*a+b*b==c*c)\n        return true;\n    else\
    \ if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n        return\
    \ true;\n    else\n        return false;", '    return (a*a + b*b == c*c);', '  //
    Write your code here', '  return a*a + b*b == c*c || a*a + c*c == b*b || b*b +
    c*c == a*a;']
stop_tokens:
- "\n}"
