name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings.\n// The list contains different words. Return the word with\
  \ maximum number\n// of unique characters. If multiple strings have maximum number\
  \ of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"\
  name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
  ]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string> words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
  name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
  name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
  aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
  abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({\"\
  we\", \"are\", \"gonna\", \"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
  this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
  b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\",\
  \ \"play\", \"play\"}))) == (\"play\"));\n}\n"
completions: []
stop_tokens:
- "\n}"
