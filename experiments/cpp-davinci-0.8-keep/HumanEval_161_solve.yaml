name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// solve(\"\
  1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nstd::string\
  \ solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string result;\n    if (s.size() == 0) {\n        return s;\n\
    \    }\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])) {\n    \
    \        result += toupper(s[i]);\n        } else if (isupper(s[i])) {\n     \
    \       result += tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;", "    if (s.size() == 0) return s;\n  \
    \  std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    return result;",
  "  std::string res = \"\";\n  int len = s.length();\n  if(len == 0)\n    return\
    \ res;\n  for(int i = 0; i < len; i++) {\n    if(islower(s[i]))\n      res.push_back(toupper(s[i]));\n\
    \    else if(isupper(s[i]))\n      res.push_back(tolower(s[i]));\n    else\n \
    \     res.push_back(s[i]);\n  }\n  std::reverse(res.begin(), res.end());\n  return\
    \ res;", "    std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c)\
    \ { return std::isalpha(c) ? std::tolower(c) : std::toupper(c); });\n    return\
    \ s;", "    std::string res;\n    std::transform(s.begin(), s.end(), std::back_inserter(res),\n\
    \        [](char ch) { return std::isalpha(ch) ? std::tolower(ch) : std::toupper(ch);\
    \ });\n    return res;", "    std::string res = \"\";\n    if(!std::isalpha(s[0])){\n\
    \        for(int i = s.size() - 1; i >= 0; i--){\n            res += s[i];\n \
    \       }\n        return res;\n    }\n    for(char c : s){\n        if(std::isalpha(c)){\n\
    \            c = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n      \
    \  }\n        res += c;\n    }\n    return res;", "  if(s.empty()) return \"\"\
    ;\n  for(char& c : s)\n    if(std::isalpha(c))\n      c = std::tolower(c) ^ 32;\n\
    \  if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n\
    \    std::reverse(s.begin(), s.end());\n  return s;", "    std::string answer\
    \ = \"\";\n    if (s.size() <= 1) return s;\n    if (!isalpha(s[0])) return s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) answer +=\
    \ s[i] ^ ' ';\n        else answer += s[i];\n    }\n    return answer;", "  std::vector<char>\
    \ str_vec(s.begin(), s.end());\n  bool no_letter = true;\n  for (int i = 0; i\
    \ < str_vec.size(); i++) {\n    if (isalpha(str_vec[i])) {\n      no_letter =\
    \ false;\n      if (islower(str_vec[i])) {\n        str_vec[i] = toupper(str_vec[i]);\n\
    \      } else {\n        str_vec[i] = tolower(str_vec[i]);\n      }\n    }\n \
    \ }\n  if (no_letter) {\n    std::reverse(str_vec.begin(), str_vec.end());\n \
    \ }\n  std::string result(str_vec.begin(), str_vec.end());\n  return result;",
  "    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n       \
    \     s[i] = toupper(s[i]);\n        }\n    }\n    return s;", "    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(std::isalpha(s[i])) {\n            if(std::isupper(s[i]))\
    \ s[i] = std::tolower(s[i]);\n            else s[i] = std::toupper(s[i]);\n  \
    \      }\n    }\n    return s;", "\tbool to_upper = true;\n\tfor (auto i : s)\
    \ {\n\t\tif (isalpha(i)) {\n\t\t\tto_upper = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (islower(s[i])) {\n\t\t\ts[i] =\
    \ toupper(s[i]);\n\t\t}\n\t\telse if (isupper(s[i])) {\n\t\t\ts[i] = tolower(s[i]);\n\
    \t\t}\n\t}\n\tif (to_upper) {\n\t\treverse(s.begin(), s.end());\n\t}\n\treturn\
    \ s;", "    int n = s.size();\n    std::string str = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            str += (char)(s[i] - 'a' + 'A');\n            flag = true;\n    \
    \    }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            str += (char)(s[i]\
    \ - 'A' + 'a');\n            flag = true;\n        }\n        else {\n       \
    \     str += s[i];\n        }\n    }\n    if(flag) {\n        return str;\n  \
    \  }\n    else {\n        reverse(str.begin(), str.end());\n        return str;\n\
    \    }", "  int len = s.length();\n  if(len == 0) return s;\n  for(int i = 0;\
    \ i < len; i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i])) s[i] = toupper(s[i]);\n\
    \      else s[i] = tolower(s[i]);\n    }\n  }\n  return s;", "  if(s.empty())\
    \ return s;\n  int n = s.size();\n  std::string res(n, 0);\n  for(int i = 0; i\
    \ < n; i++) {\n    if(isalpha(s[i])) res[i] = (isupper(s[i]) ? tolower(s[i]) :\
    \ toupper(s[i]));\n    else res[i] = s[i];\n  }\n  if(!isalpha(res[0])) reverse(res.begin(),\
    \ res.end());\n  return res;", "  std::transform(s.begin(), s.end(), s.begin(),\n\
    \                 [](unsigned char c) {\n    return std::tolower(c);\n  });\n\
    \  if (s.empty()) {\n    return \"\";\n  }\n  std::string s2;\n  for (size_t i\
    \ = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      s2.push_back(toupper(s[i]));\n\
    \    } else {\n      s2.push_back(s[i]);\n    }\n  }\n  return s2;", "    for(int\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\n            s[i] =\
    \ tolower(s[i]);\n    }\n    std::reverse(s.begin(), s.end());\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\n            s[i] = toupper(s[i]);\n\
    \    }\n    return s;", "  bool haveLetter = false;\n  int len = s.length();\n\
    \  for (int i = 0; i < len; i++) {\n    if (isalpha(s[i])) {\n      haveLetter\
    \ = true;\n      break;\n    }\n  }\n  if (!haveLetter) {\n    reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (int i = 0; i < len; i++) {\n    if (islower(s[i]))\
    \ {\n      s[i] = toupper(s[i]);\n    } else if (isupper(s[i])) {\n      s[i]\
    \ = tolower(s[i]);\n    }\n  }\n  return s;", "    bool all_number = true;\n \
    \   for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            all_number = false;\n            s[i] -= 32;\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            all_number = false;\n       \
    \     s[i] += 32;\n        }\n    }\n    if (all_number) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "\tstd::string ans;\n\tbool flag = false;\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i]))\
    \ {\n\t\t\t\tans += tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tans += toupper(s[i]);\n\
    \t\t\t}\n\t\t\tflag = true;\n\t\t}\n\t\telse {\n\t\t\tans += s[i];\n\t\t}\n\t\
    }\n\tif (!flag) {\n\t\tstd::reverse(ans.begin(), ans.end());\n\t}\n\treturn ans;",
  "\tint n = s.size();\n\tif(n == 0) return \"\";\n\tif(n == 1) {\n\t\tif(isalpha(s[0]))\
    \ {\n\t\t\treturn s[0] >= 'a' && s[0] <= 'z' ? string(1, toupper(s[0])) : string(1,\
    \ tolower(s[0]));\n\t\t}\n\t\treturn s;\n\t}\n\t// if(n == 2) {\n\t// \tint c\
    \ = 0;\n\t// \tstring ans = \"\";\n\t// \tfor(int i = 0; i < n; i++) {\n\t// \t\
    \tif(isalpha(s[i])) {\n\t// \t\t\tc++;\n\t// \t\t\tans += s[i] >= 'a' && s[i]\
    \ <= 'z' ? string(1, toupper(s[i])) : string(1, tolower(s[i]));\n\t// \t\t} else\
    \ {\n\t// \t\t\tans += s[i];\n\t// \t\t}\n\t// \t}\n\t// \treturn c > 0 ? ans\
    \ : string(1, s[1]) + string(1, s[0]);\n\t// }\n\tstring ans = \"\";\n\tfor(int\
    \ i = 0; i < n; i++) {\n\t\tif(isalpha(s[i])) {\n\t\t\tans += s[i] >= 'a' && s[i]\
    \ <= 'z' ? string(1, toupper(s[i])) : string(1, tolower(s[i]));\n\t\t} else {\n\
    \t\t\tans += s[i];\n\t\t}\n\t}\n\treturn ans;", "\tstd::string res = \"\";\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tchar temp = s[i];\n\t\tif (isalpha(temp))\
    \ {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t}\n\t\t}\n\t\tres += temp;\n\t}\n\
    \tstd::reverse(res.begin(), res.end());\n\treturn res;", "  const int len = s.length();\n\
    \  int idx = 0;\n  while(idx < len) {\n    if(isalpha(s[idx])) {\n      break;\n\
    \    }\n    idx++;\n  }\n  for(int i = idx; i < len; i++) {\n    if(isalpha(s[i]))\
    \ {\n      if(islower(s[i])) {\n        s[i] = toupper(s[i]);\n      } else {\n\
    \        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if(idx == len) {\n    int\
    \ i = 0, j = len - 1;\n    while(i < j) {\n      std::swap(s[i], s[j]);\n    \
    \  i++;\n      j--;\n    }\n  }\n  return s;", "  std::string result = \"\";\n\
    \  bool is_letter = false;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n\
    \      is_letter = true;\n      if (std::isupper(c)) {\n        result += std::tolower(c);\n\
    \      } else {\n        result += std::toupper(c);\n      }\n    } else {\n \
    \     result += c;\n    }\n  }\n  if (!is_letter) {\n    std::reverse(std::begin(result),\
    \ std::end(result));\n  }\n  return result;", "  std::string answer;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      answer\
    \ += toupper(s[i]);\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      answer\
    \ += tolower(s[i]);\n    } else {\n      answer += s[i];\n    }\n  }\n  if (answer\
    \ == s) {\n    std::reverse(answer.begin(), answer.end());\n  }\n  return answer;",
  "\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] <= 'z' && s[i] >= 'a') {\n\
    \t\t\ts[i] -= 32;\n\t\t}\n\t\telse if (s[i] <= 'Z' && s[i] >= 'A') {\n\t\t\ts[i]\
    \ += 32;\n\t\t}\n\t}\n\treturn s;", "  std::reverse(s.begin(), s.end());\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i]))\
    \ {\n        s[i] = tolower(s[i]);\n      } else {\n        s[i] = toupper(s[i]);\n\
    \      }\n    }\n  }\n  return s;", "\tint size = s.size();\n\tif (size == 0)\n\
    \t\treturn \"\";\n\tfor (int i = 0; i < size; i++) {\n\t\tif (std::isalpha(s[i]))\
    \ {\n\t\t\tif (std::islower(s[i]))\n\t\t\t\ts[i] = std::toupper(s[i]);\n\t\t\t\
    else\n\t\t\t\ts[i] = std::tolower(s[i]);\n\t\t}\n\t}\n\treturn s;", "\tbool notFound\
    \ = true;\n\t// iterate through the string\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\t// if a letter is found, \n\t\tif (isalpha(s[i])) {\n\t\t\t// change\
    \ the letter case and make notFound false\n\t\t\tif (isupper(s[i])) {\n\t\t\t\t\
    s[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\
    \t\t}\n\t\t\tnotFound = false;\n\t\t}\n\t}\n\t// if no letters are found, reverse\
    \ the string\n\tif (notFound) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\t\
    return s;", "  if(!s.length())\n    return s;\n  for(int i = 0; i < s.length();\
    \ i++) {\n    if(isalpha(s[i])) {\n      s[i] = islower(s[i]) ? toupper(s[i])\
    \ : tolower(s[i]);\n    }\n  }\n  return s;", "  int flag = 0;\n  for(int i =\
    \ 0; i < s.length(); i++) {\n    if(s[i] >= 'a' && s[i] <= 'z')\n      flag =\
    \ 1;\n    else if(s[i] >= 'A' && s[i] <= 'Z')\n      flag = 1;\n  }\n  if(flag\
    \ == 0) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  for(int\
    \ i = 0; i < s.length(); i++) {\n    if(s[i] >= 'a' && s[i] <= 'z')\n      s[i]\
    \ = s[i] - 'a' + 'A';\n    else if(s[i] >= 'A' && s[i] <= 'Z')\n      s[i] = s[i]\
    \ - 'A' + 'a';\n  }\n  return s;", "    if (s.empty()) return s;\n    for (char&\
    \ ch : s) {\n        if (isalpha(ch)) {\n            ch = islower(ch) ? toupper(ch)\
    \ : tolower(ch);\n        }\n    }\n    return s;", "  bool is_alpha = false;\n\
    \  for (size_t i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n  \
    \    is_alpha = true;\n      break;\n    }\n  }\n  if (!is_alpha) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (size_t i = 0; i < s.size(); i++) {\n \
    \   if (std::isalpha(s[i])) {\n      if (s[i] < 97)\n        s[i] += 32;\n   \
    \   else\n        s[i] -= 32;\n    }\n  }\n  return s;", "\t// if s is empty or\
    \ contains only numbers or all letters, reverse it;\n\tbool is_empty = true;\n\
    \tbool is_all_letters = true;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\t\
    if (s[i] < '0' || s[i] > '9') {\n\t\t\tis_empty = false;\n\t\t}\n\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tis_all_letters\
    \ = false;\n\t\t}\n\t}\n\tif (is_empty) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\tif (is_all_letters) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\t// otherwise, reverse the case of each letter\n\tfor (size_t\
    \ i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i]\
    \ -= 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] += 32;\n\
    \t\t}\n\t}\n\treturn s;", "\tif (s.empty()) return s;\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = s[i] - 32;\n\t\t\
    }\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = s[i] + 32;\n\t\t}\n\
    \t}\n\treturn s;", "    int len = s.length();\n    if(len == 0) return s;\n  \
    \  for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n \
    \   }\n    return s;", "\tstd::string res=\"\";\n\tif(s==\"\") return res;\n\t\
    for(int i=0;i<s.length();i++){\n\t\tif(isalpha(s[i])){\n\t\t\tif(islower(s[i])){\n\
    \t\t\t\tres.push_back(toupper(s[i]));\n\t\t\t}else{\n\t\t\t\tres.push_back(tolower(s[i]));\n\
    \t\t\t}\n\t\t}else{\n\t\t\tres.push_back(s[i]);\n\t\t}\n\t}\n\treturn res;", " \
    \ std::string result;\n  if (s.length() < 1) return s;\n  if (std::isalpha(s[0]))\
    \ {\n    for (char& c : s) {\n      if (std::isalpha(c)) {\n        c = std::toupper(c);\n\
    \      }\n    }\n  } else {\n    for (char& c : s) {\n      if (std::isalpha(c))\
    \ {\n        c = std::tolower(c);\n      }\n    }\n  }\n  std::reverse(s.begin(),\
    \ s.end());\n  return s;", "    std::string a;\n    bool is_a_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            a += s[i] - 'a' + 'A';\n            is_a_letter = true;\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            a += s[i] - 'A'\
    \ + 'a';\n            is_a_letter = true;\n        } else {\n            a +=\
    \ s[i];\n        }\n    }\n    if (!is_a_letter)\n        return std::string(a.rbegin(),\
    \ a.rend());\n    return a;", "  if(s.length()==0) return s;\n  for(int i=0;i<s.length();i++){\n\
    \    if(s[i]>='a'&&s[i]<='z'){\n      s[i] = s[i] - 'a' + 'A';\n    }\n    else\
    \ if(s[i]>='A'&&s[i]<='Z'){\n      s[i] = s[i] - 'A' + 'a';\n    }\n  }\n  return\
    \ s;", "    if(s.length() == 0) return s;\n    if(std::find_if(s.begin(), s.end(),\
    \ ::isalpha) == s.end()) return std::string(s.rbegin(), s.rend());\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i])){\n           \
    \ if(islower(s[i]))\n                s[i] = toupper(s[i]);\n            else\n\
    \                s[i] = tolower(s[i]);\n        }\n    }\n    return s;", "  \
    \  std::string out = s;\n    int len = s.length();\n    for (int i = 0; i < len;\
    \ i++) {\n        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <=\
    \ 'Z')) {\n            if (s[i] == tolower(s[i])) {\n                out[i] =\
    \ toupper(s[i]);\n            } else {\n                out[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    if (out == s) {\n        std::reverse(out.begin(),\
    \ out.end());\n    }\n    return out;", "  bool has_letter = false;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      has_letter = true;\n\
    \      break;\n    }\n  }\n  if (!has_letter) {\n    reverse(s.begin(), s.end());\n\
    \    return s;\n  }\n  for (int i = 0; i < s.size(); i++) {\n    if (islower(s[i]))\
    \ {\n      s[i] = toupper(s[i]);\n    } else if (isupper(s[i])) {\n      s[i]\
    \ = tolower(s[i]);\n    }\n  }\n  return s;", "    // printf(\"%s\", s.c_str());\n\
    \    std::string ans = \"\";\n    int letters = 0;\n    for (char c : s) {\n \
    \       // printf(\"%c\\n\", c);\n        if ((c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z')) {\n            letters++;\n            c = islower(c) ? toupper(c)\
    \ : tolower(c);\n        }\n        ans += c;\n    }\n    if (letters) return\
    \ ans;\n    std::reverse(ans.begin(), ans.end());\n    return ans;", "    int\
    \ n = s.size();\n    string str=\"\";\n    if(n==0)\n        return str;\n   \
    \ for(int i=0;i<n;i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n          \
    \  str+=char(s[i]-'a'+'A');\n        else if(s[i]>='A' && s[i]<='Z')\n       \
    \     str+=char(s[i]-'A'+'a');\n        else\n            str+=s[i];\n    }\n\
    \    reverse(str.begin(),str.end());\n    return str;", "  bool f = true;\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i]\
    \ >= 'A' && s[i] <= 'Z')) {\n      f = false;\n      break;\n    }\n  }\n  if\
    \ (f) return s;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n      s[i] = s[i] - 'a' + 'A';\n    } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n      s[i] = s[i] - 'A' + 'a';\n    }\n  }\n  return s;", " \
    \   std::string result = \"\";\n    if(s.length() == 0)\n        return result;\n\
    \    for(int i = 0; i < s.length(); i++){\n        if(islower(s[i]))\n       \
    \     result += toupper(s[i]);\n        else if(isupper(s[i]))\n            result\
    \ += tolower(s[i]);\n        else\n            result += s[i];\n    }\n    return\
    \ result;", "\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\
    \t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn s;", "    if(s.size()\
    \ == 0) return s;\n    // 'a' <= s[i] <= 'z'   97 - 122\n    // 'A' <= s[i] <=\
    \ 'Z'   65 - 90\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 97\
    \ && s[i] <= 122) {\n            s[i] -= 32;\n        } else if(s[i] >= 65 &&\
    \ s[i] <= 90) {\n            s[i] += 32;\n        }\n    }\n    return s;", " \
    \ std::string ans;\n  std::string alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  std::string\
    \ alpha_cap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for (size_t i = 0; i < s.size();\
    \ i++) {\n    if(std::find(alpha.begin(), alpha.end(), s[i]) != alpha.end()) {\n\
    \      ans += std::toupper(s[i]);\n    }\n    else if(std::find(alpha_cap.begin(),\
    \ alpha_cap.end(), s[i]) != alpha_cap.end()) {\n      ans += std::tolower(s[i]);\n\
    \    }\n    else {\n      ans += s[i];\n    }\n  }\n  return ans;", "    if(s.size()\
    \ == 0) return s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            s[i] = tolower(s[i]);\n        }\n    }\n    for(int i = 0; i\
    \ < s.size(); i++) {\n        if(isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;", "\tstd::stringstream ss;\n\tfor (char& c :\
    \ s) {\n\t\tif (isalpha(c)) {\n\t\t\tif (isupper(c)) {\n\t\t\t\tss << char(tolower(c));\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tss << char(toupper(c));\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\tss << c;\n\t\t}\n\t}\n\tstd::string result = ss.str();\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;", "  std::string result;\n  bool isLett = false;\n\
    \  for (size_t i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      isLett\
    \ = true;\n      if (islower(s[i])) {\n        result += toupper(s[i]);\n    \
    \  } else {\n        result += tolower(s[i]);\n      }\n    } else {\n      result\
    \ += s[i];\n    }\n  }\n  if (!isLett) {\n    std::reverse(result.begin(), result.end());\n\
    \  }\n  return result;", "    if(s.size()==0) return s;\n    std::string result;\n\
    \    for(int i=0;i<s.size();i++){\n        int x=s[i];\n        if(x>=65 && x<=90){\n\
    \            x+=32;\n            result+=x;\n        }\n        else if(x>=97\
    \ && x<=122){\n            x-=32;\n            result+=x;\n        }\n       \
    \ else result+=x;\n    }\n    return result;", "  std::string ans;\n  for (auto\
    \ i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n      if (std::isupper(s[i]))\
    \ {\n        ans += std::tolower(s[i]);\n      } else {\n        ans += std::toupper(s[i]);\n\
    \      }\n    } else {\n      ans += s[i];\n    }\n  }\n  if (ans.size() == 0)\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  return ans;",
  "\tstd::string res = \"\";\n\tif (s.size() == 0)\n\t\treturn res;\n\tbool hasLetters\
    \ = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\
    \t\t\thasLetters = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!hasLetters) {\n\t\t\
    for (int i = s.size() - 1; i >= 0; i--) {\n\t\t\tres += s[i];\n\t\t}\n\t\treturn\
    \ res;\n\t}\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\
    \t\t\tif (islower(s[i])) {\n\t\t\t\tres += toupper(s[i]);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tres += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\
    \t\t}\n\t}\n\treturn res;", "    for(int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    if (isalpha(s[0])) {\n        return s;\n\
    \    } else {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }", "    std::string result;\n    if (std::all_of(s.begin(), s.end(), ::isdigit))\n\
    \    {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for (size_t i = 0; i < s.size(); i++)\n    {\n        if (isalpha(s[i]))\n\
    \        {\n            if (isupper(s[i]))\n            {\n                result\
    \ += std::tolower(s[i]);\n            }\n            else\n            {\n   \
    \             result += std::toupper(s[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += s[i];\n        }\n    }\n    return\
    \ result;", "    int len = s.length();\n    bool c = false;\n    for(int i = 0;\
    \ i < len; i++) {\n        if(isalpha(s[i])) {\n            c = true;\n      \
    \      break;\n        }\n    }\n    if(c) {\n        for(int i = 0; i < len;\
    \ i++) {\n            if(isalpha(s[i])) {\n                if(isupper(s[i]))\n\
    \                    s[i] = tolower(s[i]);\n                else if(islower(s[i]))\n\
    \                    s[i] = toupper(s[i]);\n            }\n        }\n    }\n\
    \    else {\n        reverse(s.begin(), s.end());\n    }\n    return s;", "  \
    \  std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] >= 'a' && s[i] <= 'z')\n            ret += toupper(s[i]);\n       \
    \ else if (s[i] >= 'A' && s[i] <= 'Z')\n            ret += tolower(s[i]);\n  \
    \      else\n            ret += s[i];\n    }\n    if (ret.size() == s.size())\n\
    \        return s;\n    return ret;", "    if (s.length() == 0) {\n        return\
    \ s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (isdigit(s[i]))\
    \ {\n            s.erase(i, 1);\n            i--;\n        }\n    }\n    if (s.length()\
    \ == 0) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (islower(s[i])) {\n            s[i] = toupper(s[i]);\n       \
    \ } else {\n            s[i] = tolower(s[i]);\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "\tint l = s.length();\n\tfor (int i = 0; i < l;\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = toupper(s[i]);\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = tolower(s[i]);\n\
    \t\t}\n\t}\n\treturn s;", "    if(s.empty())\n    return \"\";\n    std::string\
    \ result;\n    for(int i=0;i<s.length();i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n\
    \        {\n            s[i]='A'+s[i]-'a';\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z')\n        {\n            s[i]='a'+s[i]-'A';\n        }\n    }\n\
    \    return s;", "    bool hasLetter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            hasLetter = true;\n      \
    \      if (isupper(s[i])) {\n                s[i] = tolower(s[i]);\n         \
    \   } else {\n                s[i] = toupper(s[i]);\n            }\n        }\n\
    \    }\n    if (!hasLetter) {\n        std::reverse(s.begin(), s.end());\n   \
    \ }\n    return s;", "    if(s.size() == 0)\n        return s;\n    bool found\
    \ = false;\n    for(char c : s)\n        if(std::isalpha(c)){\n            found\
    \ = true;\n            break;\n        }\n    if(!found)\n        return std::string(s.rbegin(),\
    \ s.rend());\n    for(char &c : s)\n        if(std::isalpha(c))\n            c\
    \ = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n    return s;", "  //\
    \ Your code here\n  \t\n\t//if there is no letters\n  \tif(std::regex_match(s,\
    \ std::regex(\"^[^a-zA-Z]*$\")))\n  \t{\n  \t\tstd::reverse(s.begin(), s.end());\n\
    \  \t\treturn s;\n  \t}\n  \telse\n  \t{\n  \t\tfor(auto& c : s)\n  \t\t{\n  \t\
    \t\tif(islower(c))\n  \t\t\t{\n  \t\t\t\tc = toupper(c);\n  \t\t\t}\n  \t\t\t\
    else if(isupper(c))\n  \t\t\t{\n  \t\t\t\tc = tolower(c);\n  \t\t\t}\n  \t\t}\n\
    \  \t\treturn s;\n  \t}", "  std::string ans = \"\";\n  bool isLetterPresent =\
    \ false;\n  for(int i = 0; i < s.length(); i++) {\n    if(isalpha(s[i])) {\n \
    \     isLetterPresent = true;\n      if(islower(s[i])) {\n        ans += toupper(s[i]);\n\
    \      } else {\n        ans += tolower(s[i]);\n      }\n    } else {\n      ans\
    \ += s[i];\n    }\n  }\n  if(!isLetterPresent) {\n    std::reverse(ans.begin(),\
    \ ans.end());\n  }\n  return ans;", "    int lower = 0;\n    for (auto c : s)\
    \ {\n        if (c >= 'a' && c <= 'z') lower++;\n    }\n    // no letters\n  \
    \  if (lower == 0) return std::string(s.rbegin(), s.rend());\n    std::string\
    \ result;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n     \
    \       result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n  \
    \          result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;", "    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n          \
    \      s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;", "    if (s.size() < 1) {\n        return s;\n    }\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), [](unsigned char c) {\n        if (std::isalpha(c)) {\n\
    \            return std::tolower(c);\n        }\n        return c;\n    });\n\
    \    std::reverse(s.begin(), s.end());\n    return s;", "\tstd::string result;\n\
    \tif (s.size() == 0) return result;\n\tif (s.size() == 1) {\n\t\tchar temp = s[0];\n\
    \t\tif (isalpha(temp)) {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\
    \t\t\t}\n\t\t\telse if (islower(temp)) {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t\
    }\n\t\t}\n\t\treturn std::string(1, temp);\n\t}\n\telse {\n\t\t// check if no\
    \ letters\n\t\tbool check = true;\n\t\tfor (size_t i = 0; i < s.size(); i++) {\n\
    \t\t\tif (isalpha(s[i])) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif (check) {\n\t\t\tfor (size_t i = s.size() - 1; i >= 0; i--) {\n\t\t\
    \t\tresult += s[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\t\
    for (size_t i = 0; i < s.size(); i++) {\n\t\t\t\tchar temp = s[i];\n\t\t\t\tif\
    \ (isalpha(temp)) {\n\t\t\t\t\tif (isupper(temp)) {\n\t\t\t\t\t\ttemp = tolower(temp);\n\
    \t\t\t\t\t}\n\t\t\t\t\telse if (islower(temp)) {\n\t\t\t\t\t\ttemp = toupper(temp);\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult += temp;\n\t\t\t}\n\t\t\treturn result;\n\
    \t\t}\n\t}", "\tif (s.size() == 0) return \"\";\n\tstd::string ans;\n\tbool alphabet\
    \ = false;\n\tfor (char c : s)\n\t\tif (isalpha(c)) {\n\t\t\talphabet = true;\n\
    \t\t\tbreak;\n\t\t}\n\tfor (int i = s.size() - 1; i >= 0; i--) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tif (isupper(s[i])) ans += tolower(s[i]);\n\t\t\telse ans += toupper(s[i]);\n\
    \t\t}\n\t\telse ans += s[i];\n\t}\n\tif (alphabet) return ans;\n\telse return\
    \ s;", "    if(s.size() == 0)\n        return s;\n    if(s.size() == 1)\n    \
    \    return s;\n    std::string res = \"\";\n    for(auto e : s) {\n        if(islower(e))\
    \ {\n            res += toupper(e);\n        } else if(isupper(e)) {\n       \
    \     res += tolower(e);\n        } else {\n            res += e;\n        }\n\
    \    }\n    if(islower(res[0]) || isupper(res[0])) {\n        reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "  for (int i = 0; i < s.size(); i++)\
    \ {\n    if(!((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z'))) {\n\
    \      s[i] = s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i]\
    \ = s[i] + 32;\n    } else if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = s[i]\
    \ - 32;\n    }\n  }\n  return s;", "\tfor (int i = 0; i < s.size(); i++) {\n\t\
    \tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return s;", "    int sz = s.size();\n    for(int i = 0; i < sz; i++) {\n     \
    \   if(isalpha(s[i])) {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n\
    \            else s[i] = tolower(s[i]);\n        }\n    }\n    if(isalpha(s[0]))\
    \ reverse(s.begin(), s.end());\n    return s;", "\tstd::vector<char> v;\n\tbool\
    \ flag = true;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tflag = false;\n\t\t\tif (islower(s[i])) v.push_back(toupper(s[i]));\n\
    \t\t\telse v.push_back(tolower(s[i]));\n\t\t}\n\t\telse v.push_back(s[i]);\n\t\
    }\n\tif (flag)\n\t\tstd::reverse(v.begin(), v.end());\n\tstd::string res(v.begin(),\
    \ v.end());\n\treturn res;", "\tint len = s.length();\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] =\
    \ tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (s == s) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\t\
    return s;", "    std::reverse(s.begin(), s.end());\n    for (auto& c : s) {\n\
    \        if (c == toupper(c)) {\n            c = tolower(c);\n        } else if\
    \ (c == tolower(c)) {\n            c = toupper(c);\n        }\n    }\n    return\
    \ s;", "    std::string reversed = \"\";\n    int letter_exist = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            letter_exist\
    \ = 1;\n            if (islower(s[i])) {\n                reversed += toupper(s[i]);\n\
    \            } else {\n                reversed += tolower(s[i]);\n          \
    \  }\n        } else {\n            reversed += s[i];\n        }\n    }\n    if\
    \ (letter_exist == 0) {\n        std::reverse(reversed.begin(), reversed.end());\n\
    \    }\n    return reversed;", "    if (s.size() == 0) {\n        return s;\n\
    \    }\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n   \
    \ }\n    return s;", "  std::reverse(s.begin(), s.end());\n  for (int i = 0; i\
    \ < s.size(); i++) {\n    if (isalpha(s[i])) {\n      s[i] = islower(s[i]) ? toupper(s[i])\
    \ : tolower(s[i]);\n    }\n  }\n  return s;", "  bool letters = false;\n  for\
    \ (char c : s) {\n    if (c >= 'a' && c <= 'z') letters = true;\n    if (c >=\
    \ 'A' && c <= 'Z') letters = true;\n  }\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] -= 32;\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s[i] += 32;\n    }\n  }\n  if (!letters) {\n\
    \    std::reverse(s.begin(), s.end());\n  }\n  return s;", "    int len = s.length();\n\
    \    if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i]\
    \ = toupper(s[i]);\n        }\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;", "  if (s.size() == 0) {\n    return \"\";\n  }\n  std::string\
    \ result = \"\";\n  for (int i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i]))\
    \ {\n      if (islower(s[i])) {\n        result.push_back(toupper(s[i]));\n  \
    \    } else {\n        result.push_back(tolower(s[i]));\n      }\n    } else {\n\
    \      result.push_back(s[i]);\n    }\n  }\n  return result;", "\tfor (int i =\
    \ 0; i < s.size(); i++) {\n\t\tif (std::isalpha(s[i])) {\n\t\t\tif (std::isupper(s[i]))\
    \ {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;", "\tstd::reverse(s.begin(),\
    \ s.end());\n\tif (s.size() == 0) {\n\t\treturn s;\n\t}\n\tfor (int i = 0; i <\
    \ s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = s[i] -\
    \ 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = s[i] +\
    \ 32;\n\t\t}\n\t}\n\treturn s;", "    if(s.empty()) return s;\n    for(int i =\
    \ 0; i < s.size(); i++) {\n        if(isalpha(s[i])) s[i] = tolower(s[i]);\n \
    \   }\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) s[i]\
    \ = toupper(s[i]);\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
  "    int n = s.size();\n    int count = 0;\n    for(int i = 0; i < n; i++)\n   \
    \ {\n        if(isalpha(s[i]))\n        {\n            count++;\n        }\n \
    \   }\n    if(count == 0)\n    {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    else\n    {\n        for(int i = 0; i < n; i++)\n\
    \        {\n            if(isalpha(s[i]))\n            {\n                if(isupper(s[i]))\n\
    \                {\n                    s[i] = tolower(s[i]);\n              \
    \  }\n                else\n                {\n                    s[i] = toupper(s[i]);\n\
    \                }\n            }\n        }\n        return s;\n    }", "  std::string\
    \ result;\n  if(std::all_of(s.begin(), s.end(), ::isdigit)) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for(char c : s) {\n    if(std::isalpha(c))\
    \ {\n      result += (std::isupper(c) ? std::tolower(c) : std::toupper(c));\n\
    \    } else {\n      result += c;\n    }\n  }\n  return result;", "    if(s.length()\
    \ == 0) return s;\n    bool flag = false;\n    for(char &ch : s)\n    {\n    \
    \    if(ch >= 'a' && ch <= 'z')\n        {\n            flag = true;\n       \
    \     break;\n        }\n        else if(ch >= 'A' && ch <= 'Z')\n        {\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(flag)\n\
    \    {\n        for(char &ch : s)\n        {\n            if(ch >= 'a' && ch <=\
    \ 'z')\n            {\n                ch -= 'a' - 'A';\n            }\n     \
    \       else if(ch >= 'A' && ch <= 'Z')\n            {\n                ch +=\
    \ 'a' - 'A';\n            }\n        }\n    }\n    else\n    {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    // check if string has letters\n    bool\
    \ has_letters = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letters = true;\n            break;\n        }\n    }\n \
    \   if (!has_letters) return std::string(s.rbegin(), s.rend());\n    // otherwise\
    \ reverse each letter\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n     \
    \   }\n    }\n    return s;", "  // your code here\n  return s;", "  std::reverse(s.begin(),\
    \ s.end());\n  for (int i = 0; i < s.size(); i++) {\n    if (islower(s[i])) {\n\
    \      s[i] = toupper(s[i]);\n    } else if (isupper(s[i])) {\n      s[i] = tolower(s[i]);\n\
    \    }\n  }\n  return s;", "\tif (s.empty()) {\n\t\treturn s;\n\t}\n\tstd::string\
    \ result;\n\tfor (auto it = s.begin(); it != s.end(); ++it) {\n\t\tif (std::isalpha(*it))\
    \ {\n\t\t\tif (std::islower(*it)) {\n\t\t\t\tresult.push_back(std::toupper(*it));\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(std::tolower(*it));\n\t\t\t}\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(*it);\n\t\t}\n\t}\n\tif (result.size()\
    \ == s.size()) {\n\t\treturn result;\n\t}\n\telse {\n\t\treturn std::string(result.rbegin(),\
    \ result.rend());\n\t}", "\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] -= 32;\n\t\t}\n\t\telse if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n\t\t\ts[i] += 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;", "    if (s.length() == 0) return s;\n    std::string\
    \ out;\n    for (int i = 0; i < s.length(); i++) {\n        if (islower(s[i]))\
    \ out += toupper(s[i]);\n        else if (isupper(s[i])) out += tolower(s[i]);\n\
    \        else out += s[i];\n    }\n    return out;", "\tif (s.empty()) return\
    \ s;\n\tstd::string res;\n\tfor (char c : s) {\n\t\tif (isalpha(c)) {\n\t\t\t\
    res += isupper(c) ? tolower(c) : toupper(c);\n\t\t}\n\t\telse {\n\t\t\tres +=\
    \ c;\n\t\t}\n\t}\n\tif (res == s) {\n\t\tstd::reverse(res.begin(), res.end());\n\
    \t}\n\treturn res;", "    // check if string has no letter\n    bool is_string_has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            is_string_has_letter = true;\n            break;\n\
    \        }\n    }\n    if (!is_string_has_letter) {\n        return std::string(s.rbegin(),\
    \ s.rend());\n    }\n    // change cases letter\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] -\
    \ 'a' + 'A';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i]\
    \ = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", "\tint n = s.size();\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i]\
    \ >= 'A' && s[i] <= 'Z')) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\t\
    s[i] = s[i] - 32;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = s[i] + 32;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn s;", "\tstd::string ans;\n\tif(s.length() == 0) return s;\n\
    \tfor(int i = 0; i < s.length(); i++) {\n\t\tif(s[i] >= 'a' && s[i] <= 'z') ans\
    \ += s[i] - 32;\n\t\telse if(s[i] >= 'A' && s[i] <= 'Z') ans += s[i] + 32;\n\t\
    \telse ans += s[i];\n\t}\n\treturn ans;", "    std::string str;\n    if(!(std::isalpha(s[0])))\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i])) {\n  \
    \          if(std::isupper(s[i])) {\n                s[i] = std::tolower(s[i]);\n\
    \            } else {\n                s[i] = std::toupper(s[i]);\n          \
    \  }\n        }\n    }\n    return s;", "    std::reverse(s.begin(), s.end());\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n\
    \            s[i] = std::tolower(s[i]);\n        }\n    }\n    return s;", " \
    \   std::string res;\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isdigit(s[i])) {\n            cnt++;\n        }\n    }\n    if\
    \ (cnt == s.size()) {\n        for (int i = s.size() - 1; i >= 0; i--) {\n   \
    \         res += s[i];\n        }\n        return res;\n    }\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n     \
    \       res += (char)toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n            res += (char)tolower(s[i]);\n        } else {\n        \
    \    res += s[i];\n        }\n    }\n    return res;", "    if(s.empty())\n  \
    \      return \"\";\n    for(auto &c : s)\n        if(std::isalpha(c))\n     \
    \       c ^= 32;\n    return s;", "    // std::cout << \"string to be reversed\
    \ - \" << s << std::endl;\n    if (s.length() == 0) {\n        return s;\n   \
    \ }\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            std::cout << s[i] << std::endl;\n            if (islower(s[i])) {\n\
    \                s[i] = toupper(s[i]);\n            } else {\n               \
    \ s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;", "  \
    \  int len = s.length();\n    if(len == 0) return s;\n    int count = 0;\n   \
    \ for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) count++;\n    }\n\
    \    if(count == 0) {\n        reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) {\n    \
    \        if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;", "    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            cnt++;\n        }\n    }\n    if (cnt\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])) {\n    \
    \        s[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n        \
    \    s[i] = tolower(s[i]);\n        }\n    }\n    return s;", "    int n = s.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\n  \
    \          s[i] = 'A' + (s[i] - 'a');\n        else if(s[i] >= 'A' && s[i] <=\
    \ 'Z')\n            s[i] = 'a' + (s[i] - 'A');\n    }\n    return s;", "    //check\
    \ if the string contains any alphabets.\n    bool flag = false;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ true;\n            break;\n        }\n    }\n    if(flag) {\n        //loop\
    \ through each letter and reverse its case.\n        for(int i = 0; i < s.length();\
    \ i++) {\n            if(isalpha(s[i])) {\n                s[i] = isupper(s[i])\
    \ ? tolower(s[i]) : toupper(s[i]);\n            }\n        }\n    } else {\n \
    \       //reverse the string if it does not contain any letters.\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    int i;\n    if(s.size() < 1)\n      \
    \  return s;\n    for(i = 0; i < s.size(); i++)\n    {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z')\n            s[i] = s[i] - 32;\n        else if(s[i] >= 'A'\
    \ && s[i] <= 'Z')\n            s[i] = s[i] + 32;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "    std::reverse(s.begin(), s.end());\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') s[i] =\
    \ s[i] - 'a' + 'A';\n        else if (s[i] >= 'A' && s[i] <= 'Z') s[i] = s[i]\
    \ - 'A' + 'a';\n    }\n    return s;", '  return {};', "    std::string ret =\
    \ \"\";\n    bool found = false;\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (s[i] >= 65 && s[i] <= 90) {\n            ret += s[i] + 32;\n     \
    \       found = true;\n        } else if (s[i] >= 97 && s[i] <= 122) {\n     \
    \       ret += s[i] - 32;\n            found = true;\n        } else {\n     \
    \       ret += s[i];\n        }\n    }\n    if (!found) return s;\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;", "    int f=0;\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            f=1;\n    \
    \        break;\n        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n\
    \            f=1;\n            break;\n        }\n    }\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            s[i]=s[i]-32;\n\
    \        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n            s[i]=s[i]+32;\n\
    \        }\n    }\n    if(f==0)\n    {\n        std::reverse(s.begin(),s.end());\n\
    \    }\n    return s;", "\tstd::string str = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tint a = s[i];\n\t\tif (a >= 97 && a <= 122) {\n\t\t\tstr += toupper(s[i]);\n\
    \t\t}\n\t\telse if (a >= 65 && a <= 90) {\n\t\t\tstr += tolower(s[i]);\n\t\t}\n\
    \t\telse {\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\tstd::reverse(str.begin(), str.end());\n\
    \treturn str;", "\tstd::reverse(s.begin(), s.end());\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t\ts[i] -= 32;\n\t\telse if\
    \ (s[i] >= 'A' && s[i] <= 'Z')\n\t\t\ts[i] += 32;\n\t}\n\treturn s;", "    string\
    \ ans;\n    for(int i=0;i<s.size();i++){\n        if((int)s[i] >= 65 && (int)s[i]\
    \ <= 90){\n            ans += tolower(s[i]);\n        }\n        else if((int)s[i]\
    \ >= 97 && (int)s[i] <= 122){\n            ans += toupper(s[i]);\n        }\n\
    \        else{\n            ans += s[i];\n        }\n    }\n    if(s==ans){\n\
    \        reverse(ans.begin(),ans.end());\n    }\n    return ans;", "    bool found_letter\
    \ = false;\n    for (char &c : s) {\n        if (isalpha(c)) {\n            found_letter\
    \ = true;\n            c = islower(c) ? toupper(c) : tolower(c);\n        }\n\
    \    }\n    return found_letter ? s : std::string(s.rbegin(), s.rend());", " \
    \   bool found = false;\n    if(s.length() == 0) return s;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            found = true;\n\
    \            break;\n        }\n    }\n    if(!found)\n        std::reverse(s.begin(),\
    \ s.end());\n    else {\n        for(int i = 0; i < s.length(); i++) {\n     \
    \       if(islower(s[i]))\n                s[i] = toupper(s[i]);\n           \
    \ else if(isupper(s[i]))\n                s[i] = tolower(s[i]);\n        }\n \
    \   }\n    return s;", "    if (s.length() == 0) return s;\n    std::string str\
    \ = \"\";\n    int flag = 0;\n    for (char ch : s) {\n        if (std::isalpha(ch))\
    \ {\n            str += char(isupper(ch) ? tolower(ch) : toupper(ch));\n     \
    \       flag = 1;\n        } else {\n            str += ch;\n        }\n    }\n\
    \    return flag ? str : std::string(str.rbegin(), str.rend());", "    std::string\
    \ res;\n    bool check = false;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (s[i] >= 'a' && s[i] <= 'z') {\n            res += s[i] - 32;\n    \
    \        check = true;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n   \
    \         res += s[i] + 32;\n            check = true;\n        } else res +=\
    \ s[i];\n    }\n    if (check) return res;\n    for (int i = s.size() - 1; i >=\
    \ 0; i--) res += s[i];\n    return res;", "  bool rev = true;\n  for (auto i :\
    \ s) if (isalpha(i)) rev = false;\n  std::transform(s.begin(), s.end(), s.begin(),\n\
    \    [](char c) { return (isalpha(c)) ? tolower(c) : c; });\n  if (rev) std::reverse(s.begin(),\
    \ s.end());\n  std::transform(s.begin(), s.end(), s.begin(),\n    [](char c) {\
    \ return (isalpha(c)) ? toupper(c) : c; });\n  return s;", "  if(s.length() ==\
    \ 0) return s;\n  std::string r;\n  for(auto c : s) {\n    if(isalpha(c)) {\n\
    \      if(islower(c))\n        r += (char)toupper(c);\n      else\n        r +=\
    \ (char)tolower(c);\n    } else {\n      r += c;\n    }\n  }\n  if(isalpha(r[0]))\
    \ return r;\n  std::reverse(r.begin(), r.end());\n  return r;", "    int i;\n\
    \    for(i=0; i<s.length(); i++)\n    {\n        if(islower(s[i]))\n        {\n\
    \            s[i] = toupper(s[i]);\n        }\n        else if(isupper(s[i]))\n\
    \        {\n            s[i] = tolower(s[i]);\n        }\n    }\n    return s;",
  "\tstd::string ans;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n\t\t\tans += s[i] - 'a' + 'A';\n\t\t}\n\t\telse if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\tans += s[i] - 'A' + 'a';\n\t\t}\n\t\telse {\n\
    \t\t\tans += s[i];\n\t\t}\n\t}\n\tif (ans.size() == 0) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\treturn ans;", "\tif (s.size() == 0) {\n\t\t\
    return s;\n\t}\n\tstd::string s2(s);\n\tbool first = true;\n\tfor (int i = 0;\
    \ i < s.size(); i++) {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' &&\
    \ s[i] <= 'Z')) {\n\t\t\tfirst = false;\n\t\t\ts2[i] = s[i] ^ ('a' ^ 'A');\n\t\
    \t}\n\t}\n\tif (first) {\n\t\tstd::reverse(s2.begin(), s2.end());\n\t}\n\treturn\
    \ s2;", "  if (s.size() == 0) return \"\";\n  std::string res = \"\";\n  int i\
    \ = 0;\n  while (i < s.size() && !isalpha(s[i])) i++;\n  if (i == s.size()) {\n\
    \    reverse(s.begin(), s.end());\n    return s;\n  }\n  bool is_upper = isupper(s[i]);\n\
    \  res += (is_upper ? tolower(s[i]) : toupper(s[i]));\n  for (int j = i + 1; j\
    \ < s.size(); j++) {\n    if (isalpha(s[j])) {\n      res += (is_upper ? tolower(s[j])\
    \ : toupper(s[j]));\n    } else {\n      res += s[j];\n    }\n  }\n  return res;",
  "    // Constraints: 0 <= str.length <= 50\n    int n = s.length();\n    if (n ==\
    \ 0) return s;\n    for (int i = 0; i < n; i++) {\n        if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n\
    \    }\n    return s;", "  std::string result = \"\";\n  if(s.size() == 0) return\
    \ result;\n  for(int i = 0; i < s.size(); i++) {\n    if(s[i] > 96 && s[i] < 123)\
    \ {\n      result += toupper(s[i]);\n    } else if(s[i] > 64 && s[i] < 91) {\n\
    \      result += tolower(s[i]);\n    } else {\n      result += s[i];\n    }\n\
    \  }\n  if(result.size() > 0) return result;\n  else return std::string(s.rbegin(),\
    \ s.rend());", "\tstd::string t;\n\tif (s.size() == 0)\n\t\treturn s;\n\tbool\
    \ flag = true;\n\tfor (auto& c : s) {\n\t\tif (std::isalpha(c)) {\n\t\t\tflag\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\telse {\n\t\tfor (auto& c : s) {\n\t\t\tif (std::isalpha(c))\
    \ {\n\t\t\t\tif (std::isupper(c))\n\t\t\t\t\tt += tolower(c);\n\t\t\t\telse\n\t\
    \t\t\t\tt += toupper(c);\n\t\t\t}\n\t\t\telse\n\t\t\t\tt += c;\n\t\t}\n\t\treturn\
    \ t;\n\t}", "  std::string result = \"\";\n  int l = s.length();\n  if(l == 0)\
    \ return s;\n  for(int i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n      result += toupper(s[i]);\n    } else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n      result += tolower(s[i]);\n    } else {\n      result += s[i];\n   \
    \ }\n  }\n  return result;", "\tint len = s.length();\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t\ts[i] = 'A' + (s[i] - 'a');\n\
    \t\telse if (s[i] >= 'A' && s[i] <= 'Z')\n\t\t\ts[i] = 'a' + (s[i] - 'A');\n\t\
    }\n\tif (s[0] >= 'a' && s[0] <= 'z')\n\t\treturn s;\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;", "    string res=\"\";\n    bool flag=false;\n    for(auto\
    \ c:s){\n        if((c>='a'&&c<='z')||(c>='A'&&c<='Z')) flag=true;\n    }\n  \
    \  if(!flag) reverse(s.begin(),s.end());\n    for(auto c:s){\n        if(c>='a'&&c<='z')\
    \ res+=toupper(c);\n        else if(c>='A'&&c<='Z') res+=tolower(c);\n       \
    \ else res+=c;\n    }\n    return res;", "\tstd::string result;\n\tbool is_letter\
    \ = false;\n\tfor (auto ch : s) {\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tresult\
    \ += char(ch - 'a' + 'A');\n\t\t\tis_letter = true;\n\t\t}\n\t\telse if (ch >=\
    \ 'A' && ch <= 'Z') {\n\t\t\tresult += char(ch - 'A' + 'a');\n\t\t\tis_letter\
    \ = true;\n\t\t}\n\t\telse\n\t\t\tresult += ch;\n\t}\n\tif (!is_letter)\n\t\t\
    std::reverse(result.begin(), result.end());\n\treturn result;", "    std::string\
    \ result = \"\";\n    std::string::size_type index = 0;\n    while (index < s.size())\
    \ {\n        if (isalpha(s[index])) {\n            if (islower(s[index])) {\n\
    \                result += toupper(s[index]);\n            } else {\n        \
    \        result += tolower(s[index]);\n            }\n        } else {\n     \
    \       result += s[index];\n        }\n        index++;\n    }\n    if (isalpha(result[0]))\
    \ {\n        return result;\n    } else {\n        return std::string(result.rbegin(),\
    \ result.rend());\n    }", "    int flag = 0;\n    if(s.length() == 0)\n    {\n\
    \        return \"\";\n    }\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isalpha(s[i]))\n        {\n            flag = 1;\n            if(islower(s[i]))\n\
    \            {\n                s[i] = toupper(s[i]);\n            }\n       \
    \     else\n            {\n                s[i] = tolower(s[i]);\n           \
    \ }\n        }\n    }\n    if(flag == 0)\n    {\n        int n = s.length();\n\
    \        for(int i = 0; i < n / 2; i++)\n        {\n            swap(s[i], s[n\
    \ - i - 1]);\n        }\n    }\n    return s;", "    if(s.size()==0)\n       \
    \ return s;\n    std::string res;\n    bool isAlph = false;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res += s[i]-'a'+'A';\n     \
    \       isAlph = true;\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res += s[i]-'A'+'a';\n            isAlph = true;\n        }\n   \
    \     else{\n            res += s[i];\n        }\n    }\n    if(!isAlph)\n   \
    \     reverse(res.begin(),res.end());\n    return res;", "    for(int i = 0; i\
    \ < s.size(); i++) {\n        if(isalpha(s[i])) {\n            s[i] = islower(s[i])\
    \ ? toupper(s[i]) : tolower(s[i]);\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "\t// your code goes here\n\tstd::string str = \"\
    \";\n\tif (s.length() == 0)\n\t\treturn str;\n\tbool flag = true;\n\tfor (int\
    \ i = 0; i < s.length(); i++)\n\t{\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i]\
    \ >= 'A' && s[i] <= 'Z'))\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] >= 'a' && s[i] <=\
    \ 'z')\n\t\t{\n\t\t\tstr += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A'\
    \ && s[i] <= 'Z')\n\t\t{\n\t\t\tstr += (char)(s[i] + 32);\n\t\t}\n\t\telse\n\t\
    \t{\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\tif (flag)\n\t{\n\t\tstd::reverse(str.begin(),\
    \ str.end());\n\t}\n\treturn str;", "    int len = s.length();\n    if(len ==\
    \ 0) return s;\n    for(int i = 0; i < len; i++) {\n        if((s[i] >= 'a' &&\
    \ s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            if(s[i] == 'a'\
    \ || s[i] == 'A') {\n                s[i] += 25;\n            } else if(s[i] ==\
    \ 'z' || s[i] == 'Z') {\n                s[i] -= 25;\n            } else {\n \
    \               s[i] += 32;\n            }\n        }\n    }\n    return s;",
  "    int i = 0;\n    while(i < s.size() && !isalpha(s[i]))\n        i++;\n    if(i\
    \ == s.size())\n        reverse(s.begin(), s.end());\n    for(; i < s.size();\
    \ i++)\n        if(isalpha(s[i]))\n            s[i] = isupper(s[i]) ? tolower(s[i])\
    \ : toupper(s[i]);\n    return s;", "    int size = s.size();\n    std::string\
    \ temp = \"\";\n    for(int i = 0; i < size; i++) {\n        if(s[i] >= 'a' &&\
    \ s[i] <= 'z')\n            temp += toupper(s[i]);\n        else if(s[i] >= 'A'\
    \ && s[i] <= 'Z')\n            temp += tolower(s[i]);\n        else\n        \
    \    temp += s[i];\n    }\n    return temp;", "\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] =\
    \ toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn s;", "  for (int i = 0; i < s.size(); i++) {\n    if (s[i]\
    \ >= 'a' && s[i] <= 'z') s[i] = 'A' + (s[i] - 'a');\n    else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') s[i] = 'a' + (s[i] - 'A');\n  }\n  return s;", "  if(s.empty())\n\
    \    return s;\n  \n  //reverse the string if it contains no letters\n  if(!std::isalpha(s[0]))\n\
    \    std::reverse(s.begin(), s.end());\n  \n  for(auto it = s.begin(); it != s.end();\
    \ ++it)\n  {\n    if(std::isalpha(*it))\n    {\n      if(std::islower(*it))\n\
    \        *it = std::toupper(*it);\n      else\n        *it = std::tolower(*it);\n\
    \    }\n  }\n  return s;", "    if (s.size() == 0) {\n        return s;\n    }\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            s[i] = toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "\tstring ret = \"\";\n\tif(s.length() == 0) return\
    \ s;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(s[i] >= 'a' && s[i] <= 'z'){\n\
    \t\t\tret += (char)((int)s[i] - 32);\n\t\t}\n\t\telse if(s[i] >= 'A' && s[i] <=\
    \ 'Z'){\n\t\t\tret += (char)((int)s[i] + 32);\n\t\t}\n\t\telse{\n\t\t\tret +=\
    \ s[i];\n\t\t}\n\t}\n\tif(ret.length() == s.length()) return ret;\n\telse return\
    \ s;", "    std::string tmp = \"\";\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            tmp += s[i] - 32;\n  \
    \      } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            tmp += s[i] + 32;\n\
    \        } else {\n            tmp += s[i];\n        }\n    }\n    return tmp;",
  "    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] -= 32;\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            s[i] += 32;\n        }\n    }\n    return s;", "  std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n  std::string z = \"\";\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A'\
    \ && s[i] <= 'Z')) {\n      if (s[i] == 'a' || s[i] == 'A') {\n        z += 'Z';\n\
    \      } else if (s[i] == 'z' || s[i] == 'Z') {\n        z += 'A';\n      } else\
    \ {\n        int n = s[i] - 97;\n        z += ('Z' - n);\n      }\n    } else\
    \ {\n      z += s[i];\n    }\n  }\n  return z;", "\tstd::string result;\n\tif\
    \ (s.length() == 0) return s;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t\
    if (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\tresult += tolower(s[i]);\n\
    \t\t\t}\n\t\t\telse if (islower(s[i])) {\n\t\t\t\tresult += toupper(s[i]);\n\t\
    \t\t}\n\t\t}\n\t\telse {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;", "    if(s.length() == 0)\n        return\
    \ s;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\n            s[i] =\
    \ toupper(s[i]);\n        else if(isupper(s[i]))\n            s[i] = tolower(s[i]);\n\
    \    }\n    return s;", "  std::string r;\n  bool all_letter = true;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    char c = s[i];\n    if (isalpha(c)) {\n   \
    \   if (isupper(c)) {\n        r += tolower(c);\n      } else {\n        r +=\
    \ toupper(c);\n      }\n    } else {\n      r += c;\n      all_letter = false;\n\
    \    }\n  }\n  if (all_letter) {\n    reverse(r.begin(), r.end());\n  }\n  return\
    \ r;", "    std::string result;\n    for (auto&& c : s) {\n        if (std::isalpha(c))\n\
    \            result += std::isupper(c) ? std::tolower(c) : std::toupper(c);\n\
    \        else\n            result += c;\n    }\n    return result;", "    std::string\
    \ str = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            str += toupper(s[i]);\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            str += tolower(s[i]);\n        } else\
    \ {\n            str += s[i];\n        }\n    }\n    return str;", "    if(s.size()\
    \ == 0) return s;\n    int l = s.size();\n    for(int i = 0; i < l; i++) {\n \
    \       if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n \
    \           if(s[i] >= 'a' && s[i] <= 'z') s[i] -= 32;\n            else s[i]\
    \ += 32;\n        }\n    }\n    return s;", "  int l = s.length();\n  for(int\
    \ i = 0; i < l; i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i])) {\n \
    \       s[i] = toupper(s[i]);\n      } else {\n        s[i] = tolower(s[i]);\n\
    \      }\n    }\n  }\n  return s;", "    int checker = 0;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            checker = 1;\n\
    \            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n    \
    \        } else {\n                s[i] = toupper(s[i]);\n            }\n    \
    \    }\n    }\n    if(checker == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    for(char &c : s)\n        if(std::isalpha(c))\n \
    \           c ^= 32;\n    return std::string(s.rbegin(), s.rend());", "  std::string\
    \ result = \"\";\n  if(s.length()==0) {\n    return result;\n  }\n  for(int i=0;\
    \ i<s.length(); i++) {\n    if(isalpha(s[i])) {\n      char a = toupper(s[i]);\n\
    \      if(s[i]==a) {\n        result += tolower(s[i]);\n      } else {\n     \
    \   result += a;\n      }\n    } else {\n      result += s[i];\n    }\n  }\n \
    \ std::reverse(result.begin(), result.end());\n  return result;", "    std::string\
    \ result = \"\";\n    if (s.size() == 0) {\n        return result;\n    }\n  \
    \  else {\n        for (int i = 0; i < s.size(); i++) {\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            }\n            else\
    \ if (isupper(s[i])) {\n                result += tolower(s[i]);\n           \
    \ }\n            else {\n                result += s[i];\n            }\n    \
    \    }\n        return result;\n    }", "  std::string res;\n  bool letters =\
    \ false;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n \
    \     letters = true;\n      res += toupper(s[i]);\n    } else {\n      res +=\
    \ s[i];\n    }\n  }\n  if (!letters) {\n    return std::string(res.rbegin(), res.rend());\n\
    \  }\n  return res;", "\tint n = s.size();\n\tif (n == 0) return \"\";\n\tstd::string\
    \ res;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (std::isalpha(s[i])) {\n\t\t\t\
    if (s[i] >= 'a' && s[i] <= 'z') res += std::toupper(s[i]);\n\t\t\telse res +=\
    \ std::tolower(s[i]);\n\t\t}\n\t\telse res += s[i];\n\t}\n\tif (res == s) {\n\t\
    \tstd::reverse(res.begin(), res.end());\n\t}\n\treturn res;", "    string res;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(isupper(s[i])) {\n                res += tolower(s[i]);\n          \
    \  }\n            else {\n                res += toupper(s[i]);\n            }\n\
    \        }\n        else {\n            res += s[i];\n        }\n    }\n    if(isalpha(res[0]))\
    \ {\n        return res;\n    }\n    reverse(res.begin(), res.end());\n    return\
    \ res;", "  for (int i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i]))\
    \ {\n      s[i] = std::tolower(s[i]);\n    }\n  }\n  std::reverse(s.begin(), s.end());\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n     \
    \ s[i] = std::toupper(s[i]);\n    }\n  }\n  return s;", "  std::string s2;\n \
    \ for (char c : s) {\n    if (std::isalpha(c)) {\n      if (std::islower(c)) {\n\
    \        s2 += std::toupper(c);\n      } else {\n        s2 += std::tolower(c);\n\
    \      }\n    } else {\n      s2 += c;\n    }\n  }\n  if (s2.size() > 0) {\n \
    \   return s2;\n  } else {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }", "\tstd::string result = \"\";\n\tif (s.length() == 0) {\n\t\treturn\
    \ result;\n\t}\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n\t\t\ts[i] = toupper(s[i]);\n\t\t}\n\t\telse if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = tolower(s[i]);\n\t\t}\n\t}\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;", "\tif(s.size() == 0)\n\t\treturn \"\";\n\tfor(int i\
    \ = 0; i < s.size(); i++) {\n\t\tif(s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i]\
    \ = s[i] - 32;\n\t\t}\n\t\telse if(s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] =\
    \ s[i] + 32;\n\t\t}\n\t}\n\treturn s;", "    if(s.empty()) {\n        return s;\n\
    \    }\n    for(char &c : s) {\n        if(std::isalpha(c)) {\n            c =\
    \ std::tolower(c);\n        }\n    }\n    return s;", "    if (s.empty()) return\
    \ \"\";\n    string res = \"\";\n    for (char c : s) {\n        if (std::isalpha(c))\
    \ {\n            if (std::isupper(c)) {\n                res += tolower(c);\n\
    \            } else {\n                res += toupper(c);\n            }\n   \
    \     } else {\n            res += c;\n        }\n    }\n    if (res.empty())\
    \ return s;\n    return res;", "    if(s.empty()) return s;\n    std::string res\
    \ = \"\";\n    for(int i = 0; i < s.size(); i++){\n        if(std::isalpha(s[i])){\n\
    \            if(std::isupper(s[i])){\n                res += std::tolower(s[i]);\n\
    \            }\n            else{\n                res += std::toupper(s[i]);\n\
    \            }\n        }\n        else{\n            res += s[i];\n        }\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;", "    std::string\
    \ ret = \"\";\n    if (std::all_of(s.begin(), s.end(), isdigit)) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (auto c : s) {\n        if (std::isalpha(c))\
    \ {\n            ret += isupper(c) ? tolower(c) : toupper(c);\n        } else\
    \ {\n            ret += c;\n        }\n    }\n    return ret;", "    std::string\
    \ res = \"\";\n    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            isLetter = true;\n            if\
    \ (islower(s[i])) res += toupper(s[i]);\n            else res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;", " \
    \ int n = s.size();\n  for (int i = 0; i < n; i++) {\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n      s[i] = 'A' + (s[i] - 'a');\n    } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n      s[i] = 'a' + (s[i] - 'A');\n    }\n  }\n  if (s.find_first_of(\"\
    a-zA-Z\") == std::string::npos) {\n    return std::string(s.rbegin(), s.rend());\n\
    \  }\n  return s;", "    if (s.empty()) return \"\";\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        s[i] = std::tolower(s[i]);\n    }\n    if (s.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\") == std::string::npos) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == std::tolower(s[i])) {\n            s[i] = std::toupper(s[i]);\n\
    \        } else {\n            s[i] = std::tolower(s[i]);\n        }\n    }\n\
    \    return s;", "  std::string result = \"\";\n  for (char c : s) {\n    if (c\
    \ >= 'a' && c <= 'z') {\n      result += toupper(c);\n    } else if (c >= 'A'\
    \ && c <= 'Z') {\n      result += tolower(c);\n    } else {\n      result += c;\n\
    \    }\n  }\n  if (std::all_of(result.begin(), result.end(), isdigit)) {\n   \
    \ std::reverse(result.begin(), result.end());\n  }\n  return result;", "    int\
    \ i=0;\n    int n=s.length();\n    for(int i=0;i<n;i++)\n    {\n        if(s[i]>='a'&&s[i]<='z')\n\
    \        {\n            s[i]-=32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z')\n\
    \        {\n            s[i]+=32;\n        }\n    }\n    return s;", "\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\tif (islower(s[i])) {\n\t\t\ts[i] = toupper(s[i]);\n\
    \t\t}\n\t\telse if (isupper(s[i])) {\n\t\t\ts[i] = tolower(s[i]);\n\t\t}\n\t}\n\
    \treturn s;", "    std::stringstream ss;\n    std::string result = \"\";\n   \
    \ if(s.length() == 0) return result;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(isalpha(s[i])){\n            if(isupper(s[i])) ss << char(tolower(s[i]));\n\
    \            else ss << char(toupper(s[i]));\n        }\n        else ss << s[i];\n\
    \    }\n    result = ss.str();\n    return result;", "    std::string temp = \"\
    \";\n    bool has_letters = false;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (isalpha(s[i])) {\n            has_letters = true;\n            if\
    \ (isupper(s[i]))\n                temp += tolower(s[i]);\n            else if\
    \ (islower(s[i]))\n                temp += toupper(s[i]);\n        }\n       \
    \ else {\n            temp += s[i];\n        }\n    }\n    if (has_letters)\n\
    \        return temp;\n    std::reverse(temp.begin(), temp.end());\n    return\
    \ temp;", "    if(s.length() == 0)\n        return s;\n    for(int i = 0; i <\
    \ s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n\
    \                s[i] = toupper(s[i]);\n            else\n                s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;", "    bool flag = false;\n\
    \    for(auto i:s) {\n        if((i>='a' && i<='z') || (i>='A' && i<='Z')) {\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i=0;i<s.length();i++) {\n            if(s[i]>='a' && s[i]<='z')\
    \ {\n                s[i] = s[i] - 32;\n            }\n            else if(s[i]>='A'\
    \ && s[i]<='Z') {\n                s[i] = s[i] + 32;\n            }\n        }\n\
    \    }\n    else {\n        reverse(s.begin(),s.end());\n    }\n    return s;",
  "    std::string result;\n    for (char const& c : s) {\n        if (isalpha(c))\
    \ {\n            result += (islower(c) ? toupper(c) : tolower(c));\n        }\
    \ else {\n            result += c;\n        }\n    }\n    if (result.empty())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ return result;", "    int count = 0;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            count++;\n            if(isupper(s[i]))\n\
    \                s[i] = tolower(s[i]);\n            else\n                s[i]\
    \ = toupper(s[i]);\n        }\n    }\n    if(count == 0)\n        reverse(s.begin(),\
    \ s.end());\n    return s;", "    if (s.empty()) return s;\n    std::string result;\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    bool toUpper\
    \ = std::isalpha(s[0]);\n    for (char ch : s) {\n        result += (toUpper)\
    \ ? toupper(ch) : ch;\n        toUpper = std::isalpha(ch);\n    }\n    return\
    \ result;", "\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n\t\t\ts[i] -= 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n\t\t\ts[i] += 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn\
    \ s;", "  if(s == \"\") return \"\";\n  std::string ans = \"\";\n  int len = s.length();\n\
    \  bool is_letter = false;\n  for(int i = 0; i < len; i++) {\n    if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n      is_letter = true;\n      ans += (char)(s[i] - 32);\n\
    \    } else if(s[i] >= 'A' && s[i] <= 'Z') {\n      is_letter = true;\n      ans\
    \ += (char)(s[i] + 32);\n    } else {\n      ans += s[i];\n    }\n  }\n  if(!is_letter)\
    \ {\n    for(int i = len - 1; i >= 0; i--) {\n      ans += s[i];\n    }\n  }\n\
    \  return ans;", "    //empty string\n    if(s.length() == 0)\n        return\
    \ s;\n    std::string str;\n    //As in the problem statement , if it is a letter\
    \ change the case and if not keep it as it is.\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        //check if the ith character is a letter\n        if(isalpha(s[i]))\n\
    \        {\n            //if it is a letter change the case, if lower make it\
    \ upper and if upper make it lower\n            if(islower(s[i]))\n          \
    \      str += toupper(s[i]);\n            else\n                str += tolower(s[i]);\n\
    \        }\n        else\n            str += s[i];\n    }\n    //reverse the string\n\
    \    std::reverse(str.begin(), str.end());\n    return str;", "\tstd::string r;\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\
    \t\t\tr += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n\t\t\tr += (char)(s[i] + 32);\n\t\t}\n\t\telse r += s[i];\n\t}\n\treturn\
    \ r;", "    for(int i = 0; i < s.size(); i++) {\n        if(islower(s[i])) s[i]\
    \ = toupper(s[i]);\n        else if(isupper(s[i])) s[i] = tolower(s[i]);\n   \
    \ }\n    return s;", "    std::string result;\n    for (char c : s) {\n      \
    \  if (isalpha(c))\n            result += (char)tolower(c);\n        else \n \
    \           result += c;\n    }\n    return result;", "  std::string result =\
    \ \"\";\n  std::string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  std::string\
    \ lower = \"abcdefghijklmnopqrstuvwxyz\";\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (std::find(upper.begin(), upper.end(), s[i]) != upper.end()) {\n \
    \     result += static_cast<char>(tolower(s[i]));\n    } else if (std::find(lower.begin(),\
    \ lower.end(), s[i]) != lower.end()) {\n      result += static_cast<char>(toupper(s[i]));\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  return result;", "\tstd::stringstream\
    \ res;\n\tfor (auto c : s) {\n\t\tif (std::isalpha(c)) {\n\t\t\tif (std::islower(c))\
    \ {\n\t\t\t\tres << (char)std::toupper(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres\
    \ << (char)std::tolower(c);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres << c;\n\t\t\
    }\n\t}\n\treturn res.str();", "    bool t = false;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(!((s[i] >= '0' && s[i] <= '9') || (s[i] >= 'A' && s[i] <=\
    \ 'Z') || (s[i] >= 'a' && s[i] <= 'z'))) {\n            continue;\n        }\n\
    \        t = true;\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i]\
    \ += 32;\n        } else if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] -=\
    \ 32;\n        }\n    }\n    if(!t) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "\tif (s.empty()) {\n\t\treturn std::string{};\n\t}\n\t\
    for (size_t i = 0; i < s.size(); ++i) {\n\t\tif (std::isalpha(s[i])) {\n\t\t\t\
    s[i] = std::isupper(s[i]) ? std::tolower(s[i]) : std::toupper(s[i]);\n\t\t}\n\t\
    }\n\treturn s;", "    std::string rev = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    if (!std::any_of(s.begin(), s.end(), ::isalpha)) {\n  \
    \      std::reverse(s.begin(), s.end());\n    }\n    return s;", "  std::string\
    \ s2;\n  int len = s.length();\n  // If the string contains no letters, reverse\
    \ the string.\n  if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  // if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n  // otherwise keep it as it is.\n  for (int i = 0; i < len; i++) {\n    if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n      s2 += toupper(s[i]);\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s2 += tolower(s[i]);\n    } else {\n      s2\
    \ += s[i];\n    }\n  }\n  return s2;", "    std::string str = \"\";\n    if (s.size()\
    \ == 0) return s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            str += (char)(s[i] - 32);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            str += (char)(s[i] + 32);\n \
    \       } else {\n            str += s[i];\n        }\n    }\n    return str;",
  "    std::string s2;\n    for (char &c : s) {\n        if (std::isalpha(c)) {\n\
    \            if (c < 97) c += 32;\n            else c -= 32;\n        }\n    \
    \    s2 += c;\n    }\n    if (s2 == s) {\n        std::reverse(s2.begin(), s2.end());\n\
    \    }\n    return s2;"]
stop_tokens:
- "\n}"
