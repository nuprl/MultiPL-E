language: cpp
name: HumanEval_111_histogram
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // Your code here\n  std::map<std::string, long>  m;\n  std::stringstream\
    \ ss(test);\n  std::string temp;\n  while(ss >> temp)\n  {\n      if(m.find(temp)\
    \ == m.end())\n      {\n          m[temp] = 1;\n      }\n      else\n      {\n\
    \          m[temp]++;\n      }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp14m4pc8f: /tmp/tmp14m4pc8f.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::map<std::string, long>::iterator\
    \ it;\n    std::stringstream  ss(test);\n    while(ss.good()) {\n        std::string\
    \ substr;\n        getline(ss, substr, ' ');\n        it = hist.find(substr);\n\
    \        if(it != hist.end()) {\n            hist[substr] += 1;\n        } else\
    \ {\n            hist[substr] = 1;\n        }\n    }\n    return hist;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpza3ebpgg: /tmp/tmpza3ebpgg.cpp:31: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long>dictionary{};\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while(std::getline(ss, item, ' ')) {\n\
    \        dictionary[item]++;\n    }\n    return dictionary;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpjhbn3blm: /tmp/tmpjhbn3blm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::stringstream ss(test);\n\
    \  std::string temp;\n  while(ss >> temp) {\n    if(hist.find(temp) == hist.end())\n\
    \      hist[temp] = 1;\n    else\n      hist[temp]++;\n  }\n  return hist;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5288urpz: /tmp/tmp5288urpz.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> m;\n\tstd::stringstream ss(test);\n\t\
    std::string word;\n\twhile (ss >> word) {\n\t\tm[word]++;\n\t}\n\treturn m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp1mv278uz: /tmp/tmp1mv278uz.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    std::string item;\n    std::stringstream\
    \ ss(test);\n    while(ss >> item) {\n        res[item]++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpdzrnms7h: /tmp/tmpdzrnms7h.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::istringstream iss(test);\n\
    \    std::string key;\n    std::map<std::string, long>::iterator it;\n    while\
    \ (iss >> key) {\n        it = result.find(key);\n        if (it != result.end())\
    \ {\n            result[key]++;\n        } else {\n            result[key] = 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp99bks4i9: /tmp/tmp99bks4i9.cpp:30: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // Your code here\n  std::map<std::string, long> dict;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word)\n  {\n      if(dict.find(word)\
    \ == dict.end())\n      {\n          dict[word] = 1;\n      }\n      else\n  \
    \    {\n          dict[word] += 1;\n      }\n  }\n  return dict;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpfiypmxq2: /tmp/tmpfiypmxq2.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::istringstream iss(test);\n\
    \  std::string letter;\n  while (iss >> letter) {\n    hist[letter]++;\n  }\n\
    \  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp69_hmrne: /tmp/tmp69_hmrne.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\t//Split the test string into a vector of string using space as delimiter\n\
    \tstd::istringstream iss(test);\n\tstd::vector<std::string> results((std::istream_iterator<std::string>(iss)),\n\
    \t\tstd::istream_iterator<std::string>());\n\t//Declare a map of string as key\
    \ and long as value\n\tstd::map<std::string, long> result;\n\t//Run through all\
    \ string in the vector\n\tfor (std::string s : results) {\n\t\t//If string s is\
    \ not a key in the map result, then insert it with value 1\n\t\tif (result.find(s)\
    \ == result.end()) {\n\t\t\tresult.insert(std::pair<std::string, long>(s, 1));\n\
    \t\t}\n\t\t//If string s is already a key in the map result, increment its value\
    \ by 1\n\t\telse {\n\t\t\tresult[s]++;\n\t\t}\n\t}\n\t//Run through all key-value\
    \ pair in the map result\n\tfor (std::map<std::string, long>::iterator it = result.begin();\
    \ it != result.end(); it++) {\n\t\t//If the value of a key is 1, erase it from\
    \ the map result\n\t\tif (it->second == 1) {\n\t\t\tresult.erase(it);\n\t\t}\n\
    \t}\n\t//Return the result map\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> letterCount;\n    std::stringstream\
    \ strStream(test);\n    std::string input;\n    while(std::getline(strStream,\
    \ input, ' ')) {\n        letterCount[input]++;\n    }\n    return letterCount;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp4a15ux52: /tmp/tmp4a15ux52.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  if (test.empty()) return {};\n  std::map<std::string, long> m1;\n\
    \  std::stringstream ss(test);\n  std::string buffer;\n  while (ss >> buffer)\
    \ {\n    m1[buffer]++;\n  }\n  std::map<std::string, long> m2;\n  auto max = std::max_element(m1.begin(),\
    \ m1.end(), [](auto &a, auto &b) {\n    return a.second < b.second;\n  });\n \
    \ long max_value = max->second;\n  for (auto &i : m1) {\n    if (i.second == max_value)\
    \ {\n      m2[i.first] = i.second;\n    }\n  }\n  return m2;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> res;\n  std::istringstream is(test);\n\
    \  std::string key;\n  while(is >> key) {\n    res[key]++;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmplxb67y_4: /tmp/tmplxb67y_4.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> count;\n  std::istringstream iss(test);\n\
    \  std::string token;\n  while (iss >> token) {\n    count[token] += 1;\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpd_ukq5q9: /tmp/tmpd_ukq5q9.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    //test\n    std::map<std::string, long> mymap;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (mymap.find(item) == mymap.end())\n            mymap[item] = 1;\n\
    \        else\n            mymap[item]++;\n    }\n    std::map<std::string, long>::iterator\
    \ i, j;\n    // std::cout << test << std::endl;\n    for (i = mymap.begin(); i\
    \ != mymap.end(); i++) {\n        // std::cout << i->first << ' ' << i->second\
    \ << std::endl;\n        j = i;\n        j++;\n        for (; j != mymap.end();\
    \ j++) {\n            if (i->second == j->second) {\n                mymap.erase(i);\n\
    \                mymap.erase(j);\n                return mymap;\n            }\n\
    \        }\n    }\n    std::map<std::string, long>::iterator it;\n    long max\
    \ = 0;\n    for (it = mymap.begin(); it != mymap.end(); it++) {\n        if (it->second\
    \ > max)\n            max = it->second;\n    }\n    for (it = mymap.begin(); it\
    \ != mymap.end(); it++) {\n        if (it->second != max)\n            mymap.erase(it);\n\
    \    }\n    return mymap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpc89fa5wt: /tmp/tmpc89fa5wt.cpp:51: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::string delimiter = \"\
    \ \";\n\tsize_t pos = 0;\n\tstd::string token;\n\twhile ((pos = test.find(delimiter))\
    \ != std::string::npos) {\n\t\ttoken = test.substr(0, pos);\n\t\ttest.erase(0,\
    \ pos + delimiter.length());\n\t\tresult[token] += 1;\n\t}\n\tresult[test] +=\
    \ 1;\n\treturn result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpnde5smng: /tmp/tmpnde5smng.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> ans;\n\tstd::istringstream iss(test);\n\
    \tstd::string tmp;\n\twhile (iss >> tmp) {\n\t\t++ans[tmp];\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpegzdkpmk: /tmp/tmpegzdkpmk.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> count;\n  std::stringstream ss(test);\n\
    \  std::string str;\n  long max = 0;\n  while(ss >> str) {\n    count[str]++;\n\
    \    if(count[str] > max) {\n      max = count[str];\n    }\n  }\n  std::map<std::string,\
    \ long> ans;\n  for(auto e : count) {\n    if(e.second == max) {\n      ans[e.first]\
    \ = e.second;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    long result = 0;\n    std::map<std::string, long> ans;\n    std::string\
    \ t;\n    for(int i = 0; i < test.length(); i++) {\n        if(test[i] == ' ')\
    \ {\n            if(ans.find(t) == ans.end()) {\n                ans[t] = 1;\n\
    \            } else {\n                ans[t]++;\n            }\n            t\
    \ = \"\";\n        } else {\n            t += test[i];\n        }\n    }\n   \
    \ if(ans.find(t) == ans.end()) {\n        ans[t] = 1;\n    } else {\n        ans[t]++;\n\
    \    }\n    std::map<std::string, long> ans1;\n    for(auto it : ans) {\n    \
    \    if(it.second > result) {\n            result = it.second;\n        }\n  \
    \  }\n    for(auto it : ans) {\n        if(it.second == result) {\n          \
    \  ans1[it.first] = it.second;\n        }\n    }\n    return ans1;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpihn4c32m: /tmp/tmpihn4c32m.cpp:54: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> letterCount;\n    std::stringstream\
    \ ss(test);\n    std::string currentLetter;\n    while(ss >> currentLetter) {\n\
    \        letterCount[currentLetter]++;\n    }\n    return letterCount;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpmy5mf9kp: /tmp/tmpmy5mf9kp.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> mymap;\n    if(test == \"\") return\
    \ mymap;\n    std::stringstream ss(test);\n    std::istream_iterator<std::string>\
    \ begin(ss);\n    std::istream_iterator<std::string> end;\n    std::vector<std::string>\
    \ vstrings(begin, end);\n    std::sort(vstrings.begin(), vstrings.end());\n  \
    \  auto prev = vstrings.begin();\n    for(auto curr = prev+1; curr != vstrings.end();\
    \ curr++){\n        if(*curr == *prev){\n            mymap[*curr]++;\n       \
    \ }\n        else{\n            mymap[*prev]++;\n            prev = curr;\n  \
    \      }\n    }\n    return mymap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpp2ttcn0k: /tmp/tmpp2ttcn0k.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long>  result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        result[word]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp8a247qo4: /tmp/tmp8a247qo4.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::istringstream iss(test);\n\
    \tdo\n\t{\n\t\tstd::string sub;\n\t\tiss >> sub;\n\t\tif(sub.empty())\n\t\t\t\
    continue;\n\t\tresult[sub]++;\n\t} while (iss);\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpdkwlxcjh: /tmp/tmpdkwlxcjh.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    int flag = 0;\n    std::map<std::string, long> ret;\n    std::map<std::string,\
    \ long>::iterator it;\n    std::string temp;\n    std::stringstream ss(test);\n\
    \    std::string s_arr[test.length()];\n    int j = 0;\n    if(test.length() ==\
    \ 0) {\n        return ret;\n    }\n    for(int i = 0; i < test.length(); i++)\
    \ {\n        if(test[i] == ' ') {\n            flag = 1;\n        }\n    }\n \
    \   if(flag == 0) {\n        for(int i = 0; i < test.length(); i++) {\n      \
    \      if(i == 0) {\n                ret.insert(std::pair<std::string, long>(test.substr(i,\
    \ 1), test.length()));\n            }\n            else {\n                ret.insert(std::pair<std::string,\
    \ long>(test.substr(i, 1), 0));\n            }\n        }\n        return ret;\n\
    \    }\n    while(ss >> temp) {\n        s_arr[j] = temp;\n        j++;\n    }\n\
    \    std::sort(s_arr, s_arr + j);\n    for(int i = 0; i < j; i++) {\n        it\
    \ = ret.find(s_arr[i]);\n        if(it == ret.end()) {\n            ret.insert(std::pair<std::string,\
    \ long>(s_arr[i], 1));\n        }\n        else {\n            it->second++;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpq9w47ewp: /tmp/tmpq9w47ewp.cpp:58: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> output;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp)\n        output[temp]++;\n    return\
    \ output;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpaxr1zt53: /tmp/tmpaxr1zt53.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> histogram;\n  return histogram;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpwtips981: /tmp/tmpwtips981.cpp:18: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> letter_count;\n  std::stringstream ss(test);\n\
    \  std::string letter;\n  while (ss >> letter) {\n    letter_count[letter]++;\n\
    \  }\n  return letter_count;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp33ygf623: /tmp/tmp33ygf623.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::string temp;\n  std::stringstream\
    \ ss(test);\n  while(ss >> temp)\n    hist[temp]++;\n  std::map<std::string, long>::iterator\
    \ it = hist.begin();\n  while(it != hist.end()) {\n    if(it->second == *std::max_element(hist.begin(),\
    \ hist.end(),\n                                       [](std::pair<std::string,\
    \ long> i, std::pair<std::string, long> j)\n                                 \
    \      {return i.second < j.second;})) {\n      std::map<std::string, long> temp_map;\n\
    \      temp_map[it->first] = it->second;\n      return temp_map;\n    }\n    it++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgaqnls3.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpzgaqnls3.cpp:20:19: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018std::pair<const std::__cxx11::basic_string<char>, long int>\u2019\
    )\n   20 |     if(it->second == *std::max_element(hist.begin(), hist.end(),\n\
    \      |        ~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \
    \    |            |         |\n      |            long int  std::pair<const std::__cxx11::basic_string<char>,\
    \ long int>\n   21 |                                        [](std::pair<std::string,\
    \ long> i, std::pair<std::string, long> j)\n      |                          \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \   22 |                                        {return i.second < j.second;}))\
    \ {\n      |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzgaqnls3.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzgaqnls3.cpp:22:69:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long int\u2019\n   22 |                                        {return\
    \ i.second < j.second;})) {\n      |                                         \
    \                            ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzgaqnls3.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi"
  stdout: ''
  timestamp: 1660123753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\nstd::map<std::string, long> dict;\nif(test == \"\"){\n    return dict;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kg6ztcj.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp4kg6ztcj.cpp:17:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   17\
    \ | int main() {\n      |            ^\n/tmp/tmp4kg6ztcj.cpp:27:1: error: expected\
    \ \u2018}\u2019 at end of input\n   27 | }\n      | ^\n/tmp/tmp4kg6ztcj.cpp:12:57:\
    \ note: to match this \u2018{\u2019\n   12 | std::map<std::string, long> histogram(std::string\
    \ test) {\n      |                                                         ^\n\
    /tmp/tmp4kg6ztcj.cpp:27:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   27 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dictionary;\n  std::stringstream ss(test);\n\
    \  std::string letter;\n  while (ss >> letter) {\n    if (dictionary.find(letter)\
    \ == dictionary.end()) {\n      dictionary[letter] = 1;\n    } else {\n      dictionary[letter]\
    \ += 1;\n    }\n  }\n  return dictionary;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpvket0jo9: /tmp/tmpvket0jo9.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    if(test.length() == 0) return {};\n    std::vector<std::string>\
    \ words;\n    std::stringstream s_stream(test);\n    std::string s;\n    while(s_stream\
    \ >> s) words.push_back(s);\n    std::sort(words.begin(), words.end());\n    std::map<std::string,\
    \ long> counts;\n    long max = -1;\n    for(int i = 0; i < words.size(); i++)\
    \ {\n        counts[words[i]] = std::count(words.begin(), words.end(), words[i]);\n\
    \        if(counts[words[i]] > max) max = counts[words[i]];\n    }\n    std::map<std::string,\
    \ long> ans;\n    for(auto it = counts.begin(); it != counts.end(); it++)\n  \
    \      if(it->second == max) ans[it->first] = it->second;\n    return ans;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> newMap;\n  std::istringstream input(test);\n\
    \  while(!input.eof()) {\n    std::string word;\n    input >> word;\n    if (newMap.find(word)\
    \ == newMap.end()) {\n      newMap[word] = 1;\n    } else {\n      newMap[word]++;\n\
    \    }\n  }\n  long max = 0;\n  std::vector<std::string> max_keys;\n  for (auto\
    \ it = newMap.begin(); it != newMap.end(); it++) {\n    if (it->second > max)\
    \ {\n      max = it->second;\n      max_keys.clear();\n      max_keys.push_back(it->first);\n\
    \    } else if (it->second == max) {\n      max_keys.push_back(it->first);\n \
    \   }\n  }\n  std::map<std::string, long> result;\n  for (auto it = max_keys.begin();\
    \ it != max_keys.end(); it++) {\n    result[*it] = max;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp89tccei4: /tmp/tmp89tccei4.cpp:49: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream strStream(test);\n\
    \    std::string token;\n    while(std::getline(strStream, token, ' ')){\n   \
    \     result[token]++;\n    }\n    std::map<std::string, long> ret;\n    long\
    \ max_count = 0;\n    for(std::map<std::string, long>::iterator it = result.begin();\
    \ it != result.end(); it++){\n        if(it->second > max_count){\n          \
    \  max_count = it->second;\n            ret.clear();\n            ret[it->first]\
    \ = it->second;\n        }\n        else if(it->second == max_count){\n      \
    \      ret[it->first] = it->second;\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    if (test.length() == 0)\
    \ {\n        return result;\n    }\n    std::stringstream ss(test);\n    std::string\
    \ letter;\n    while (ss >> letter) {\n        result[letter]++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpbejlw33o: /tmp/tmpbejlw33o.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::stringstream ss(test);\n  std::string s;\n  std::map<std::string,\
    \ long> hist;\n  while (ss >> s) {\n    ++hist[s];\n  }\n  return hist;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp28ozixe5: /tmp/tmp28ozixe5.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> char_histogram;\n\tstd::stringstream\
    \ ss(test);\n\tstd::string char_string;\n\twhile (std::getline(ss, char_string,\
    \ ' ')) {\n\t\tauto map_iter = char_histogram.find(char_string);\n\t\tif (map_iter\
    \ == char_histogram.end()) {\n\t\t\tchar_histogram.insert(std::pair<std::string,\
    \ long>(char_string, 1));\n\t\t} else {\n\t\t\tmap_iter->second += 1;\n\t\t}\n\
    \t}\n\treturn char_histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpvwblctpv: /tmp/tmpvwblctpv.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    //\n    std::vector<std::string>\
    \ strs;\n    std::stringstream ss(test);\n    std::string temp;\n    while (ss\
    \ >> temp)\n        strs.push_back(temp);\n    //\n    for (int i = 0; i < strs.size();\
    \ i++) {\n        if (hist.find(strs[i]) == hist.end())\n            hist[strs[i]]\
    \ = 1;\n        else\n            hist[strs[i]]++;\n    }\n    return hist;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpf6zdwq4_: /tmp/tmpf6zdwq4_.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    std::string word = \"\"\
    ;\n    if(test.length()==0) return myMap;\n    std::istringstream iss(test);\n\
    \    while(iss >> word){\n        auto it = myMap.find(word);\n        if(it !=\
    \ myMap.end()){\n            myMap[word] = myMap[word] + 1;\n        }else{\n\
    \            myMap[word] = 1;\n        }\n    }\n    // for(std::map<std::string,long>::iterator\
    \ it = myMap.begin(); it != myMap.end(); it++){\n    //     std::cout << it->first\
    \ << \":\" << it->second << std::endl;\n    // }\n    return myMap;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpncovr2na: /tmp/tmpncovr2na.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    // first to iterate through and find how many times each letter\
    \ appears\n    std::map<std::string, long> hist;\n    std::stringstream stream(test);\n\
    \    std::string str;\n    while(getline(stream, str, ' ')) {\n        if(hist.find(str)\
    \ == hist.end()) {\n            hist[str] = 1;\n        } else {\n           \
    \ hist[str]++;\n        }\n    }\n    // find max and store it in max\n    std::map<std::string,\
    \ long>::iterator it;\n    int max = 0;\n    for(it = hist.begin(); it != hist.end();\
    \ it++) {\n        if(it->second > max) {\n            max = it->second;\n   \
    \     }\n    }\n    // erase every occurrence that is not max\n    for(it = hist.begin();\
    \ it != hist.end(); it++) {\n        if(it->second != max) {\n            hist.erase(it);\n\
    \        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> cnt;\n\tstd::istringstream iss(test);\n\
    \tstd::string word;\n\twhile (iss >> word) {\n\t\tcnt[word]++;\n\t}\n\treturn\
    \ cnt;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpxhi0sazm: /tmp/tmpxhi0sazm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dictionary;\n    // std::stringstream\
    \ ss(test);\n    // std::string token;\n    std::stringstream ss(test);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')){\n        if(dictionary.find(token)\
    \ != dictionary.end()){\n            dictionary[token]++;\n        }\n       \
    \ else{\n            dictionary[token] = 1;\n        }\n    }\n    return dictionary;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmprdcqnmx2: /tmp/tmprdcqnmx2.cpp:31: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    using namespace std;\n    map<string, long> countMap;\n    stringstream\
    \ ss(test);\n    string key;\n    while(ss >> key)\n    {\n        countMap[key]++;\n\
    \    }\n    return countMap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5vb1fu65: /tmp/tmp5vb1fu65.cpp:26: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // your code here\n  std::map<std::string, long> histogram_dict;\n\
    \  int max = 0;\n  std::string s;\n  std::stringstream ss(test);\n  while(ss >>\
    \ s){\n      histogram_dict[s] += 1;\n      if(histogram_dict[s] > max){\n   \
    \       max = histogram_dict[s];\n      }\n  }\n  if(max > 0){\n      for(auto\
    \ &i : histogram_dict){\n          if(i.second != max){\n              histogram_dict.erase(i.first);\n\
    \          }\n      }\n  }\n  return histogram_dict;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> ret;\n    std::string str;\n    std::stringstream\
    \ ss(test);\n    while (ss >> str) {\n        ret[str]++;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpf9friytk: /tmp/tmpf9friytk.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> charmap;\n  int m =0;\n  int j=0;\n \
    \ for(int i=0;i<test.length();i++){\n    if(charmap.find(test.substr(i,1))==charmap.end()){\n\
    \      //not found\n      charmap[test.substr(i,1)]=1;\n    }\n    else{\n   \
    \   //found\n      charmap[test.substr(i,1)]++;\n    }\n  }\n  int max=0;\n  for(std::map<std::string,\
    \ long>::iterator it = charmap.begin(); it != charmap.end(); ++it) {\n      if(it->second>max){\n\
    \        max=it->second;\n      }\n  }\n  std::map<std::string, long> charmap2;\n\
    \  for(std::map<std::string, long>::iterator it = charmap.begin(); it != charmap.end();\
    \ ++it) {\n      if(it->second==max){\n        charmap2[it->first]=it->second;\n\
    \      }\n  }\n  return charmap2;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpsf81vnkl: /tmp/tmpsf81vnkl.cpp:42: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> letterCount;\n    std::istringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        letterCount[word]++;\n\
    \    }\n    return letterCount;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpal8m00dk: /tmp/tmpal8m00dk.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::map<std::string, long>\
    \ max_count;\n    std::stringstream ss(test);\n    std::string word;\n    long\
    \ max_value = 0;\n    while (ss >> word) {\n        hist[word] += 1;\n       \
    \ if (hist[word] > max_value) {\n            max_value = hist[word];\n       \
    \ }\n    }\n    for (auto itr = hist.begin(); itr != hist.end(); itr++) {\n  \
    \      if (itr->second == max_value) {\n            max_count[itr->first] = itr->second;\n\
    \        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> answer;\n    if (test.length() == 0)\n\
    \        return answer;\n    std::map<std::string, long> table;\n    std::stringstream\
    \ ss(test);\n    std::string s;\n    while (ss >> s) {\n        if (table.find(s)\
    \ == table.end())\n            table[s] = 1;\n        else\n            table[s]++;\n\
    \    }\n    long max = 0;\n    for (auto it = table.begin(); it != table.end();\
    \ it++) {\n        if (it->second > max)\n            max = it->second;\n    }\n\
    \    for (auto it = table.begin(); it != table.end(); it++) {\n        if (it->second\
    \ == max)\n            answer[it->first] = it->second;\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123756
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> ans;\n  stringstream ss(test);\n  string\
    \ word;\n  while(ss >> word) {\n    ans[word]++;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaydp0t_s.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpaydp0t_s.cpp:14:3: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n   14 |   stringstream ss(test);\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\n\
    In file included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaydp0t_s.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpaydp0t_s.cpp:15:3:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |   string word;\n\
    \      |   ^~~~~~\n/tmp/tmpaydp0t_s.cpp:15:3: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaydp0t_s.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c"
  stdout: ''
  timestamp: 1660123756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::stringstream ss(test);\n    std::string buf;\n    std::map<std::string,\
    \ long> dic;\n    while (ss >> buf) {\n        dic[buf] += 1;\n    }\n    return\
    \ dic;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5wzgy62e: /tmp/tmp5wzgy62e.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp7pdc71xl: /tmp/tmp7pdc71xl.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    int temp = 0;\n    char flag = 'a';\n    std::map<std::string,\
    \ long> mapp;\n    for(int i = 0; i < test.length(); i++) {\n        for(int j\
    \ = 0; j < test.length(); j++) {\n            if(test[i] == test[j]) {\n     \
    \           temp++;\n            }\n        }\n        if(temp > 1) {\n      \
    \      if(temp > mapp[flag]) {\n                mapp[flag] = temp;\n         \
    \   }\n        }\n        else {\n            mapp[flag] = 1;\n        }\n   \
    \     flag++;\n        temp = 0;\n    }\n    return mapp;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbky3tvp4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpbky3tvp4.cpp:23:27: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>\u2019 and \u2018char\u2019)\n   23 |             if(temp > mapp[flag])\
    \ {\n      |                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpbky3tvp4.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/includ"
  stdout: ''
  timestamp: 1660123756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> myMap;\n\tstd::istringstream ss(test);\n\
    \tstd::string token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (myMap.find(token)\
    \ == myMap.end()) {\n\t\t\tmyMap[token] = 1;\n\t\t}\n\t\telse {\n\t\t\tmyMap[token]\
    \ += 1;\n\t\t}\n\t}\n\treturn myMap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpa2f_wi8a: /tmp/tmpa2f_wi8a.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::stringstream ss(test);\n    std::string word;\n    std::map<std::string,\
    \ long> dic;\n    while(ss >> word) {\n        dic[word]++;\n    }\n    return\
    \ dic;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmptllsar79: /tmp/tmptllsar79.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> ret;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        ret[word]++;\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpv7j92ljp: /tmp/tmpv7j92ljp.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> res;\n\tstd::string temp = \"\";\n\t\
    long count = 0;\n\tfor (int i = 0; i < test.length(); i++) {\n\t\tif (test[i]\
    \ != ' ') {\n\t\t\ttemp = temp + test[i];\n\t\t}\n\t\telse {\n\t\t\tres[temp]++;\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t}\n\tres[temp]++;\n\tstd::map<std::string, long>\
    \ ans;\n\tfor (auto i : res) {\n\t\tif (i.second == count) {\n\t\t\tans[i.first]\
    \ = i.second;\n\t\t}\n\t\telse if (i.second > count) {\n\t\t\tans.clear();\n\t\
    \t\tans[i.first] = i.second;\n\t\t\tcount = i.second;\n\t\t}\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp0583e6s5: /tmp/tmp0583e6s5.cpp:47: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // code here\n  std::map<std::string, long> myMap;\n  std::stringstream\
    \ ss(test);\n  std::string s;\n  while(ss >> s)\n  {\n    myMap[s]++;\n  }\n \
    \ std::map<std::string, long>::iterator it;\n  long max = -1;\n  std::string max_key;\n\
    \  std::map<std::string, long> res;\n  for(it = myMap.begin(); it != myMap.end();\
    \ it++)\n  {\n    if(it->second > max)\n    {\n      max = it->second;\n     \
    \ max_key = it->first;\n    }\n  }\n  for(it = myMap.begin(); it != myMap.end();\
    \ it++)\n  {\n    if(it->second == max)\n    {\n      res[it->first] = it->second;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dict;\n    std::istringstream iss(test);\n\
    \    std::string temp;\n    while(iss >> temp)\n    {\n        dict[temp]++;\n\
    \    }\n    return dict;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5xb69lfe: /tmp/tmp5xb69lfe.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> m;\n  if(test.length() == 0) return m;\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(test);\n  std::string sub;\n\
    \  while(ss >> sub) {\n    v.push_back(sub);\n  }\n  std::map<std::string, long>::iterator\
    \ it;\n  for(int i = 0; i < v.size(); i++) {\n    it = m.find(v[i]);\n    if(it\
    \ == m.end()) {\n      m.insert(std::pair<std::string, long>(v[i], 1));\n    }\
    \ else {\n      it->second++;\n    }\n  }\n  std::map<std::string, long> mp;\n\
    \  long max = -1;\n  for(it = m.begin(); it != m.end(); it++) {\n    if(it->second\
    \ > max) {\n      max = it->second;\n      mp.clear();\n      mp.insert(std::pair<std::string,\
    \ long>(it->first, it->second));\n    } else if(it->second == max) {\n      mp.insert(std::pair<std::string,\
    \ long>(it->first, it->second));\n    }\n  }\n  return mp;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    // Your code here!\n    map<std::string,long> m;\n    stringstream\
    \ ss(test);\n    string t;\n    while(ss>>t){\n        m[t]++;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu27jmoh0.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpu27jmoh0.cpp:14:5: error: \u2018\
    map\u2019 was not declared in this scope\n   14 |     map<std::string,long> m;\n\
    \      |     ^~~\n/tmp/tmpu27jmoh0.cpp:14:5: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpu27jmoh0.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpu27jmoh0.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using map\n      |        \
    \     ^~~\n/tmp/tmpu27jmoh0.cpp:14:20: error: expected primary-expression before\
    \ \u2018,\u2019 token\n   14 |     map<std::string,long> m;\n      |         \
    \           ^\n/tmp/tmpu27jmoh0.cpp:14:21: error: expected primary-expression\
    \ before \u2018long\u2019\n   14 |     map<std::string,long> m;\n      |     \
    \                ^~~~\n/tmp/tmpu27jmoh0.cpp:15:5: error: \u2018stringstream\u2019\
    \ was not declared in this scope; did you mean \u2018std::stringstream\u2019?\n\
    \   15 |     stringstream ss(test);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\n\
    In file included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpu27jmoh0.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpu27jmoh0.cpp:16:5:\
    \ error: \u2018string\u2019 was not declared in this scope\n   16 |     string\
    \ t;\n      |     ^~~~~~\n/tmp/tmpu27jmoh0.cpp:16:5: n"
  stdout: ''
  timestamp: 1660123756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> letters;\n    std::stringstream str\
    \ (test);\n    std::string word;\n    while (str >> word) {\n        letters[word]++;\n\
    \    }\n    return letters;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpvrmrn20b: /tmp/tmpvrmrn20b.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> map;\n\tif (test.empty())\n\t\treturn\
    \ map;\n\tstd::stringstream ss(test);\n\tstd::string token;\n\twhile (std::getline(ss,\
    \ token, ' ')) {\n\t\tmap[token]++;\n\t}\n\tlong max = -1;\n\tstd::map<std::string,\
    \ long>::iterator it = map.begin();\n\tfor (; it != map.end(); it++) {\n\t\tif\
    \ (it->second > max)\n\t\t\tmax = it->second;\n\t}\n\tit = map.begin();\n\twhile\
    \ (it != map.end()) {\n\t\tif (it->second != max)\n\t\t\tmap.erase(it++);\n\t\t\
    else\n\t\t\tit++;\n\t}\n\treturn map;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123756
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    // your code goes here\n    std::map<std::string, long> dictionary;\n\
    \    std::string element;\n    int value = 0;\n    std::istringstream test_in(test);\n\
    \    while(test_in >> element){\n      dictionary[element]++;\n    }\n    std::map<std::string,\
    \ long>::iterator itr;\n    for(itr = dictionary.begin(); itr != dictionary.end();\
    \ itr++){\n      value = itr->second;\n      if(value > 1){\n        break;\n\
    \      }\n    }\n    for(itr = dictionary.begin(); itr != dictionary.end(); itr++){\n\
    \      if(itr->second < value){\n        dictionary.erase(itr);\n      }\n   \
    \ }\n    return dictionary;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpe9fg7akm: /tmp/tmpe9fg7akm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::stringstream ss(test);\n  std::string word;\n  std::map<std::string,\
    \ long> mymap;\n  while (ss >> word) {\n    mymap[word]++;\n  }\n  return mymap;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp7y93ubue: /tmp/tmp7y93ubue.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> ret;\n  std::string current_str;\n  for\
    \ (int i = 0; i < test.length(); i++) {\n    if (test[i] == ' ') {\n      // check\
    \ if current_str is already in the map.\n      if (ret.find(current_str) == ret.end())\
    \ {\n        ret[current_str] = 1;\n      } else {\n        ret[current_str] +=\
    \ 1;\n      }\n      current_str = \"\";\n    } else {\n      current_str += test[i];\n\
    \    }\n  }\n  // last character won't have ' ' after it.\n  if (ret.find(current_str)\
    \ == ret.end()) {\n    ret[current_str] = 1;\n  } else {\n    ret[current_str]\
    \ += 1;\n  }\n  // set max_count to the max value in the map.\n  int max_count\
    \ = 0;\n  for (auto& x : ret) {\n    if (x.second > max_count) {\n      max_count\
    \ = x.second;\n    }\n  }\n  // erase all elements not of max_count.\n  for (auto&\
    \ x : ret) {\n    if (x.second != max_count) {\n      ret.erase(x.first);\n  \
    \  }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> mp;\n    std::string delimiter = \"\
    \ \";\n    int i = 0;\n    std::string item;\n    size_t pos = 0;\n    while ((pos\
    \ = test.find(delimiter)) != std::string::npos) {\n        item = test.substr(0,\
    \ pos);\n        mp[item] += 1;\n        test.erase(0, pos + delimiter.length());\n\
    \    }\n    if(!test.empty())\n    {\n        mp[test] += 1;\n    }\n    std::map<std::string,\
    \ long> res;\n    long max = 0;\n    std::map<std::string, long>::iterator it;\n\
    \    for (it = mp.begin(); it != mp.end(); it++) {\n        if (it->second > max)\
    \ {\n            max = it->second;\n        }\n    }\n    for (it = mp.begin();\
    \ it != mp.end(); it++) {\n        if (it->second == max) {\n            res[it->first]\
    \ = it->second;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    if (test.length() == 0)\
    \ {\n        return result;\n    }\n    std::stringstream stream(test);\n    std::string\
    \ next;\n    while (std::getline(stream, next, ' ')) {\n        result[next]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpacccwse_: /tmp/tmpacccwse_.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    long max=0;\n    std::map<std::string, long> output;\n    if(test.length()==0)\
    \ return output;\n    test+=\" \";\n    char* input = new char[test.length()+1];\n\
    \    strcpy(input, test.c_str());\n    char* context = NULL;\n    char* pch =\
    \ strtok_r(input, \" \", &context);\n    while(pch != NULL) {\n        if(output.find(pch)\
    \ == output.end()) {\n            output[pch] = 1;\n        } else {\n       \
    \     output[pch] += 1;\n        }\n        pch = strtok_r(NULL, \" \", &context);\n\
    \    }\n    std::map<std::string, long>::iterator itr;\n    std::map<std::string,\
    \ long>::iterator end = output.end();\n    std::map<std::string, long> output2;\n\
    \    for(itr = output.begin(); itr != end; ++itr) {\n        if(itr->second >\
    \ max) {\n            max = itr->second;\n            output2.clear();\n     \
    \       output2[itr->first] = itr->second;\n        } else if(itr->second == max)\
    \ {\n            output2[itr->first] = itr->second;\n        }\n    }\n    return\
    \ output2;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> map;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (map.find(word) == map.end())\n\
    \      map[word] = 1;\n    else\n      map[word] += 1;\n  }\n  // Write your code\
    \ here\n  return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp1rkvtvju: /tmp/tmp1rkvtvju.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> count;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        ++count[token];\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp9itxnopp: /tmp/tmp9itxnopp.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::stringstream ss(test);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tresult[word]++;\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp10pc8yl5: /tmp/tmp10pc8yl5.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> item_counts;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    item_counts[item]++;\n\
    \  }\n  return item_counts;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpw0rkhsfw: /tmp/tmpw0rkhsfw.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\nstd::map<std::string, long> result;\nreturn result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp88hbkpar: /tmp/tmp88hbkpar.cpp:18: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // your code here\n  //std::map<char, int> h;\n  std::map<std::string,\
    \ long> h;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >>\
    \ word) {\n    h[word] += 1;\n  }\n  int max = 0;\n  //for(auto it = h.begin();\
    \ it != h.end(); it++) {\n  //  if (it->second > max) {\n  //    max = it->second;\n\
    \  //  }\n  //}\n  //std::map<char, int> h2;\n  std::map<std::string, long> h2;\n\
    \  for(auto it = h.begin(); it != h.end(); it++) {\n    if (it->second == max)\
    \ {\n      h2[it->first] = it->second;\n    }\n  }\n  return h2;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp1f808l2n: /tmp/tmp1f808l2n.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dict;\n  if (test == \"\") return dict;\n\
    \  std::vector<std::string> result;\n  std::istringstream iss(test);\n  while\
    \ (iss) {\n    std::string word;\n    iss >> word;\n    result.push_back(word);\n\
    \  }\n  std::sort(result.begin(), result.end());\n  auto it = std::unique(result.begin(),\
    \ result.end());\n  result.resize(std::distance(result.begin(), it));\n  for (const\
    \ auto& e : result) {\n    dict[e] = std::count(test.begin(), test.end(), e[0]);\n\
    \  }\n  return dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmptuije4t5: /tmp/tmptuije4t5.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp_n7a0ezc: /tmp/tmp_n7a0ezc.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> items;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (items.find(word) == items.end())\n\
    \      items[word] = 1;\n    else\n      items[word] += 1;\n  }\n  return items;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmplbzz72ba: /tmp/tmplbzz72ba.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::vector<std::string> array;\n  std::map<std::string, long> ma;\n\
    \  std::stringstream s(test);\n  std::string word;\n  while (s >> word)\n    array.push_back(word);\n\
    \  for (int i = 0; i < array.size(); i++) {\n    ma[array[i]]++;\n  }\n  return\
    \ ma;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpgfuysbyu: /tmp/tmpgfuysbyu.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> output;\n    std::istringstream input(test);\n\
    \    std::string word;\n    while (input >> word) {\n        output[word]++;\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp1h6iizwm: /tmp/tmp1h6iizwm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> store;\n    std::stringstream ss(test);\n\
    \    std::string str;\n    while(ss >> str)\n    {\n        store[str]++;\n  \
    \  }\n    return store;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpy8aq_62k: /tmp/tmpy8aq_62k.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    // your code\n    std::vector<std::string>\
    \ words;\n    std::istringstream iss(test);\n    for(std::string s; iss >> s;\
    \ )\n    words.push_back(s);\n    for(std::string s: words){\n        res[s]++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpeafeevk_: /tmp/tmpeafeevk_.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dictionary;\n  std::vector<std::string>\
    \ list = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"};\n  for (std::string x : list) {\n    dictionary[x]\
    \ = 0;\n  }\n  std::vector<std::string> words;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n\
    \  for (std::string x : words) {\n    dictionary[x]++;\n  }\n  return dictionary;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp8lfcmjb_: /tmp/tmp8lfcmjb_.cpp:31: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::string delimiter = \"\
    \ \";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = test.find(delimiter))\
    \ != std::string::npos) {\n    token = test.substr(0, pos);\n    result[token]++;\n\
    \    test.erase(0, pos + delimiter.length());\n  }\n  result[test]++;\n  std::map<std::string,\
    \ long>::iterator it;\n  for (it = result.begin(); it != result.end(); ++it) {\n\
    \    std::cout << ' ' << it->first << \"=>\" << it->second << '\\n';\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp2clwoe1e: /tmp/tmp2clwoe1e.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::stringstream ss(test);\n\
    \  std::string letter;\n  while (ss >> letter) {\n    ++hist[letter];\n  }\n \
    \ return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpm4who_sm: /tmp/tmpm4who_sm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> histo;\n    std::istringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        histo[token]++;\n\
    \    }\n    return histo;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpmd_83n56: /tmp/tmpmd_83n56.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  for (char letter : test) {\n\
    \    std::string character = std::string() + letter;\n    hist[character]++;\n\
    \  }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpcsns66qf: /tmp/tmpcsns66qf.cpp:22: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> mymap;\n\tstd::stringstream ss(test);\n\
    \tstd::string token;\n\twhile (getline(ss, token, ' '))\n\t{\n\t\tif (mymap.find(token)\
    \ == mymap.end())\n\t\t{\n\t\t\tmymap[token] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\
    \tmymap[token]++;\n\t\t}\n\t}\n\treturn mymap;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpa_ryck1n: /tmp/tmpa_ryck1n.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  int n = test.length();\n  std::map<std::string, long> res;\n  std::string\
    \ temp = \"\";\n  long count = 0;\n  std::vector<std::string> vec;\n  for (int\
    \ i = 0; i < n; i++) {\n    if (test[i] != ' ') {\n      temp = temp + test[i];\n\
    \    } else {\n      vec.push_back(temp);\n      temp = \"\";\n    }\n  }\n  if\
    \ (temp != \"\") {\n    vec.push_back(temp);\n  }\n  for (auto it = vec.begin();\
    \ it != vec.end(); it++) {\n    for (auto kt = vec.begin(); kt != vec.end(); kt++)\
    \ {\n      if (*it == *kt) {\n        count++;\n      }\n    }\n    if (res.find(*it)\
    \ == res.end()) {\n      res.insert(std::pair<std::string, long>(*it, count));\n\
    \    }\n    count = 0;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpzrhiuwq3: /tmp/tmpzrhiuwq3.cpp:45: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dict;\n    std::istringstream iss(test);\n\
    \    std::string temp = \"\";\n    long count;\n    while(iss>>temp){\n      \
    \  auto it = dict.find(temp);\n        if(it == dict.end()){\n            count\
    \ = 1;\n            dict.insert(make_pair(temp, count));\n        }else{\n   \
    \         dict[temp]++;\n        }\n    }\n    // std::map<std::string, long>\
    \ map2;\n    // for(std::map<std::string, long>::iterator it = dict.begin(); it\
    \ != dict.end(); ++it){\n    //     if(it->second > count){\n    //         count\
    \ = it->second;\n    //         map2.clear();\n    //         map2.insert(make_pair(it->first,\
    \ it->second));\n    //     }else if(it->second == count){\n    //         map2.insert(make_pair(it->first,\
    \ it->second));\n    //     }\n    // }\n    return dict;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp_779ygqa: /tmp/tmp_779ygqa.cpp:41: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpq2021mrv: /tmp/tmpq2021mrv.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::map<std::string,\
    \ long>::iterator it;\n    std::istringstream in(test);\n    std::string word;\n\
    \    while (in >> word) {\n        if ((it = result.find(word)) != result.end())\
    \ {\n            result[word]++;\n        } else {\n            result[word] =\
    \ 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpbhsgrzr2: /tmp/tmpbhsgrzr2.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> letterCount;\n  long count = 0;\n  std::string\
    \ letter = \"\";\n  for (int i = 0; i < test.length(); i++) {\n    if (test[i]\
    \ == ' ') {\n      letterCount[letter] = count;\n      count = 0;\n      letter\
    \ = \"\";\n    } else {\n      letter += test[i];\n      count++;\n    }\n  }\n\
    \  return letterCount;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpsfg21t37: /tmp/tmpsfg21t37.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    long max = 0;\n    std::vector<std::string>\
    \ maxkeys;\n    std::stringstream ss(test);\n    while(ss.good()) {\n        std::string\
    \ substr;\n        getline(ss, substr, ' ');\n        auto it = result.find(substr);\n\
    \        if(it != result.end()) {\n            it->second += 1;\n        } else\
    \ {\n            result[substr] = 1;\n        }\n        if(max < result[substr])\
    \ {\n            max = result[substr];\n            maxkeys.clear();\n       \
    \     maxkeys.push_back(substr);\n        } else if(max == result[substr]) {\n\
    \            maxkeys.push_back(substr);\n        }\n    }\n    for(auto it = result.begin();\
    \ it != result.end();) {\n        if(std::find(maxkeys.begin(), maxkeys.end(),\
    \ it->first) == maxkeys.end()) {\n            it = result.erase(it);\n       \
    \ } else {\n            ++it;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp28vi1izo: /tmp/tmp28vi1izo.cpp:51: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> a;\n\tstd::istringstream iss(test);\n\
    \tstd::string word;\n\twhile (iss >> word) {\n\t\ta[word]++;\n\t}\n\treturn a;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpxyd1dgjm: /tmp/tmpxyd1dgjm.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> histogram;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        histogram[item]++;\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmppo9dyyff: /tmp/tmppo9dyyff.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::string temp = \"\"\
    ;\n    for(int i = 0; i < test.length(); i++){\n        if(test[i] != ' '){\n\
    \            temp += test[i];\n        }else{\n            if(result.find(temp)\
    \ == result.end()){\n                result[temp] = 1;\n            }else{\n \
    \               result[temp]++;\n            }\n            temp = \"\";\n   \
    \     }\n    }\n    if(result.find(temp) == result.end()){\n        result[temp]\
    \ = 1;\n    }else{\n        result[temp]++;\n    }\n    std::map<std::string,\
    \ long>::iterator itr;\n    long key = 0;\n    for(itr = result.begin(); itr !=\
    \ result.end(); itr++){\n        if(itr->second > key){\n            key = itr->second;\n\
    \        }\n    }\n    std::map<std::string, long> newResult;\n    for(itr = result.begin();\
    \ itr != result.end(); itr++){\n        if(itr->second == key){\n            newResult[itr->first]\
    \ = itr->second;\n        }\n    }\n    return newResult;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpnkeu_m_m: /tmp/tmpnkeu_m_m.cpp:55: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    //std::string test = s;\n \
    \   std::stringstream ss(test);\n    std::string item;\n    while (getline(ss,\
    \ item, ' ')) {\n        if (m.find(item) == m.end()) {\n            m[item] =\
    \ 1;\n        } else {\n            m[item] += 1;\n        }\n    }\n    // if\
    \ (m.empty()) {\n    //     return m;\n    // }\n    long max = 0;\n    // std::cout\
    \ << \"map size: \" << m.size() << std::endl;\n    for (auto& k : m) {\n     \
    \   // std::cout << \"k.second: \" << k.second << std::endl;\n        if (k.second\
    \ > max) {\n            max = k.second;\n        }\n    }\n    std::map<std::string,\
    \ long> m_new;\n    // std::cout << \"max: \" << max << std::endl;\n    for (auto&\
    \ k : m) {\n        if (k.second == max) {\n            m_new[k.first] = k.second;\n\
    \        }\n    }\n    return m_new;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123759
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    // create a map to store letter and the count\n    std::map<std::string,\
    \ long> histo;\n    // create a stringstream to store the the string and split\
    \ it\n    std::stringstream ss(test);\n    std::string word;\n    // split the\
    \ string and insert it into the map\n    while(ss >> word) {\n        if(histo.find(word)\
    \ == histo.end()) {\n            histo.insert(std::pair<std::string, long>(word,\
    \ 1));\n        } else {\n            histo[word]++;\n        }\n    }\n    //\
    \ find the max count in the map and store in max_count and the corresponding key\n\
    \    int max_count = 0;\n    std::map<std::string, long>::iterator itr;\n    for(itr\
    \ = histo.begin(); itr != histo.end(); itr++) {\n        if(itr->second > max_count)\
    \ {\n            max_count = itr->second;\n        }\n    }\n    // erase any\
    \ values from the map that don't have max_count\n    for(itr = histo.begin();\
    \ itr != histo.end(); itr++) {\n        if(itr->second != max_count) {\n     \
    \       histo.erase(itr);\n        }\n    }\n    return histo;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> letters;\n    std::stringstream ss(test);\n\
    \    std::string s;\n    while (ss >> s)\n        letters[s]++;\n    return letters;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpbyk52cfu: /tmp/tmpbyk52cfu.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> ans;\n\tstd::stringstream ss(test);\n\
    \tstd::string temp;\n\twhile (ss >> temp) {\n\t\tans[temp]++;\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpteho_v2p: /tmp/tmpteho_v2p.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> count;\n  std::string current = \"\"\
    ;\n  long counter = 0;\n  for (size_t i = 0; i < test.length(); i++) {\n    if\
    \ (test[i] == ' ') {\n      count[current] = counter;\n      counter = 0;\n  \
    \    current = \"\";\n    } else {\n      counter++;\n      current += test[i];\n\
    \    }\n  }\n  if (current != \"\") {\n    count[current] = counter;\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpxqzr3yho: /tmp/tmpxqzr3yho.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::string word;\n  std::stringstream\
    \ s(test);\n  while (s >> word) {\n    result[word]++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp6190wffi: /tmp/tmp6190wffi.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  stringstream ss(test);\n \
    \ string line;\n  while(getline(ss, line, ' ')) {\n    result[line]++;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd22okk01.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpd22okk01.cpp:14:3: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n   14 |   stringstream ss(test);\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\n\
    In file included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpd22okk01.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpd22okk01.cpp:15:3:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |   string line;\n\
    \      |   ^~~~~~\n/tmp/tmpd22okk01.cpp:15:3: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpd22okk01.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c"
  stdout: ''
  timestamp: 1660123759
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string s;\n    while (ss >> s) {\n        result[s]++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjuem0g2.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpgjuem0g2.cpp:13:5: error: \u2018\
    map\u2019 was not declared in this scope\n   13 |     map<std::string, long> result;\n\
    \      |     ^~~\n/tmp/tmpgjuem0g2.cpp:13:5: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpgjuem0g2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpgjuem0g2.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using map\n      |        \
    \     ^~~\n/tmp/tmpgjuem0g2.cpp:13:20: error: expected primary-expression before\
    \ \u2018,\u2019 token\n   13 |     map<std::string, long> result;\n      |   \
    \                 ^\n/tmp/tmpgjuem0g2.cpp:13:22: error: expected primary-expression\
    \ before \u2018long\u2019\n   13 |     map<std::string, long> result;\n      |\
    \                      ^~~~\n/tmp/tmpgjuem0g2.cpp:17:9: error: \u2018result\u2019\
    \ was not declared in this scope\n   17 |         result[s]++;\n      |      \
    \   ^~~~~~\n/tmp/tmpgjuem0g2.cpp:19:12: error: \u2018result\u2019 was not declared\
    \ in this scope\n   19 |     return result;\n      |            ^~~~~~\n"
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::stringstream ss(test);\n\
    \tstd::string temp;\n\twhile (ss >> temp) {\n\t\tif (result.find(temp) == result.end())\
    \ {\n\t\t\tresult[temp] = 1;\n\t\t}\n\t\telse {\n\t\t\tresult[temp] += 1;\n\t\t\
    }\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpcde5u3et: /tmp/tmpcde5u3et.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  long max = -1;\n  std::map<std::string, long> result;\n  std::map<std::string,\
    \ long> history;\n  std::string::size_type pos = 0;\n  std::string token;\n  while\
    \ ((pos = test.find(\" \")) != std::string::npos) {\n    token = test.substr(0,\
    \ pos);\n    // std::cout << token << std::endl;\n    if (history.find(token)\
    \ == history.end()) {\n      history[token] = 1;\n    } else {\n      history[token]++;\n\
    \    }\n    if (history[token] > max) {\n      max = history[token];\n    }\n\
    \    test.erase(0, pos + 1);\n  }\n  if (history.find(test) == history.end())\
    \ {\n    history[test] = 1;\n  } else {\n    history[test]++;\n  }\n  if (history[test]\
    \ > max) {\n    max = history[test];\n  }\n  for (auto &x : history) {\n    if\
    \ (x.second == max) {\n      result[x.first] = x.second;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpv5scq5gh: /tmp/tmpv5scq5gh.cpp:54: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpu7i2o4x1: /tmp/tmpu7i2o4x1.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::istringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp3xd2ggky: /tmp/tmp3xd2ggky.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> ret;\n    std::string letter = \"\"\
    ;\n    //start at one past the end so we can handle empty string without special\
    \ logic\n    for(int i = 0; i < test.length() + 1; i++){\n        if (i == test.length()\
    \ || test[i] == ' '){\n            if (ret.find(letter) == ret.end()){\n     \
    \           ret[letter] = 1;\n            } else {\n                ret[letter]\
    \ += 1;\n            }\n            letter = \"\";\n        } else {\n       \
    \     letter += test[i];\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpk155yz5a: /tmp/tmpk155yz5a.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    long max = 0;\n    std::stringstream\
    \ ss(test);\n    while (ss) {\n        std::string s;\n        ss >> s;\n    \
    \    if (s.size() == 0) break;\n        auto it = res.find(s);\n        if (it\
    \ == res.end()) {\n            res[s] = 1;\n        } else {\n            res[s]\
    \ += 1;\n        }\n        if (res[s] > max) {\n            max = res[s];\n \
    \       }\n    }\n    for (auto it = res.begin(); it != res.end();) {\n      \
    \  if (it->second != max) {\n            res.erase(it++);\n        } else {\n\
    \            ++it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> res;\n  std::string letter = \"\";\n\
    \  std::string maxLetter = \"\";\n  long maxCount = 0;\n  for (auto i = 0; i <\
    \ test.length(); i++) {\n    if (test[i] != ' ') {\n      letter += test[i];\n\
    \    } else {\n      if (res.find(letter) == res.end()) {\n        res[letter]\
    \ = 1;\n      } else {\n        res[letter]++;\n      }\n      if (res[letter]\
    \ > maxCount) {\n        maxCount = res[letter];\n        maxLetter = letter;\n\
    \      }\n      letter = \"\";\n    }\n  }\n  res.clear();\n  res[maxLetter] =\
    \ maxCount;\n  return res;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp62j220zw: /tmp/tmp62j220zw.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dict;\n    std::string item;\n    //\
    \ Split the string on spaces\n    std::stringstream ss(test);\n    while (ss >>\
    \ item) {\n        ++dict[item];\n    }\n    return dict;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpwuayysq9: /tmp/tmpwuayysq9.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> ret;\n\tstd::stringstream iss(test);\n\
    \tstd::string value;\n\twhile (iss >> value)\n\t\tret[value]++;\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp7n_m33tb: /tmp/tmp7n_m33tb.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    std::istringstream iss(test);\n\
    \    std::string temp;\n    while(iss >> temp) {\n        myMap[temp]++;\n   \
    \ }\n    return myMap;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpbywaxtrw: /tmp/tmpbywaxtrw.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    long max = 0;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(getline(ss, token, ' ')) {\n  \
    \      if(result.find(token) == result.end()) {\n            result[token] = 1;\n\
    \        } else {\n            result[token]++;\n        }\n        if(result[token]\
    \ > max) {\n            max = result[token];\n        }\n    }\n    std::map<std::string,\
    \ long> finalResult;\n    for(auto & [key, value] : result) {\n        if(value\
    \ == max) {\n            finalResult[key] = value;\n        }\n    }\n    return\
    \ finalResult;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> mymap;\n  std::stringstream ss(test);\n\
    \  std::string temp;\n  while(ss >> temp) {\n    mymap[temp]++;\n  }\n  return\
    \ mymap;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpz4_l_ua7: /tmp/tmpz4_l_ua7.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::vector<std::string> vec;\n\tstd::map<std::string, long> ans;\n\
    \tlong count = 0;\n\tstd::istringstream is(test);\n\tstd::string word;\n\twhile\
    \ (is >> word)\n\t\tvec.push_back(word);\n\tfor (int i = 0; i < vec.size(); i++)\
    \ {\n\t\tcount = 0;\n\t\tfor (int j = 0; j < vec.size(); j++) {\n\t\t\tif (vec[i]\
    \ == vec[j])\n\t\t\t\tcount++;\n\t\t}\n\t\tans[vec[i]] = count;\n\t}\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpm6g2kh79: /tmp/tmpm6g2kh79.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    if(test.length()==0) return\
    \ myMap;\n    std::stringstream ss(test);\n    long i=0;\n    std::string count;\n\
    \    for(i=0;i<test.length();i++){\n        if(test[i]==' '){\n            myMap[count]++;\n\
    \            count=\"\";\n        }\n        else count+=test[i];\n    }\n   \
    \ myMap[count]++;\n    return myMap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpq1exjnaj: /tmp/tmpq1exjnaj.cpp:31: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  long count = 0;\n  for (auto\
    \ s : test) {\n    if (result.find(s) == result.end()) {\n      result[s] = 1;\n\
    \    } else {\n      result[s]++;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposqfm5wi.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmposqfm5wi.cpp:16:22: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   16 |     if (result.find(s) == result.end())\
    \ {\n      |                      ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmposqfm5wi.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argume"
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> ans;\n\tint num = 0;\n\tstd::stringstream\
    \ ss(test);\n\tstd::string token;\n\twhile (ss >> token) {\n\t\tnum++;\n\t\t++ans[token];\n\
    \t}\n\t// Write your code here\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpu3okoy2m: /tmp/tmpu3okoy2m.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  if (test == \"\") {\n    return\
    \ hist;\n  }\n  std::string current_key = \"\";\n  long current_count = 0;\n \
    \ for (int i = 0; i < test.length(); i += 2) {\n    current_key = \"\";\n    current_key\
    \ += test[i];\n    hist[current_key]++;\n  }\n  return hist;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp3fzd61um: /tmp/tmp3fzd61um.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string letter;\n    while(ss >> letter) {\n        if(result.find(letter)\
    \ == result.end()) {\n            result[letter] = 1;\n        } else {\n    \
    \        result[letter] += 1;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpz4b3nsjx: /tmp/tmpz4b3nsjx.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    if(test.empty())\n        return {};\n    std::map<std::string,\
    \ long> mp;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss\
    \ >> temp) {\n        mp[temp]++;\n    }\n    long count = 0;\n    for(auto x\
    \ : mp) {\n        count = std::max(count, x.second);\n    }\n    std::map<std::string,\
    \ long> ans;\n    for(auto x : mp) {\n        if(x.second == count)\n        \
    \    ans[x.first] = x.second;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::stringstream s(test);\n\
    \    std::string word;\n    while (s >> word) {\n        m[word]++;\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp8p5qkb7d: /tmp/tmp8p5qkb7d.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // your code here\n  std::map<std::string, long> mapp;\n  std::string\
    \ word;\n  std::istringstream in(test);\n  while(in >> word)\n  {\n    if(mapp.find(word)\
    \ == mapp.end())\n    {\n      mapp[word] = 1;\n    }\n    else\n    {\n     \
    \ mapp[word] += 1;\n    }\n  }\n  return mapp;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpvw29lf_s: /tmp/tmpvw29lf_s.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> m;\n  long occurrence=0;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss>>word){\n    m[word]++;\n  }\n  std::map<std::string,\
    \ long>::iterator itr = m.begin();\n  while(itr!=m.end()){\n    if(itr->second\
    \ > occurrence){\n      occurrence = itr->second;\n    }\n    itr++;\n  }\n  //\
    \ std::cout<<occurrence<<std::endl;\n  std::map<std::string, long>::iterator i\
    \ = m.begin();\n  while(i!=m.end()){\n    if(i->second != occurrence){\n     \
    \ m.erase(i++);\n    }\n    else{\n      i++;\n    }\n  }\n  return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // solution here\n  std::map<std::string, long> result;\n  if (test.empty())\
    \ return result;\n  std::stringstream ss(test);\n  std::string word;\n  while\
    \ (ss >> word) {\n    result[word]++;\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp6plorwy7: /tmp/tmp6plorwy7.cpp:26: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> map;\n    if(test == \"\")\n      \
    \  return map;\n    std::stringstream s(test);\n    std::string temp;\n    std::vector<std::string>\
    \ vec;\n    while(getline(s, temp, ' '))\n        vec.push_back(temp);\n    auto\
    \ u = std::unique(vec.begin(), vec.end());\n    long big = 0;\n    vec.erase(u,\
    \ vec.end());\n    for(auto i = vec.begin(); i != vec.end(); i++) {\n        long\
    \ counter = std::count(vec.begin(), vec.end(), *i);\n        map.insert(std::pair<std::string,\
    \ long>(*i, counter));\n        if(counter > big)\n            big = counter;\n\
    \    }\n    for(auto i = map.begin(); i != map.end(); i++) {\n        if(i->second\
    \ != big)\n            map.erase(i->first);\n    }\n    return map;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::string key;\n  std::stringstream ss(test);\n  std::map<std::string,\
    \ long> hist;\n  while (ss >> key) {\n    auto i = hist.find(key);\n    if (i\
    \ == hist.end())\n      hist[key] = 1;\n    else\n      hist[key] += 1;\n  }\n\
    \  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp_u6op11k: /tmp/tmp_u6op11k.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::stringstream ss(test);\n\tstd::string buf;\n\tstd::map<std::string,\
    \ long> M;\n\twhile (ss >> buf) {\n\t\tM[buf]++;\n\t}\n\tstd::map<std::string,\
    \ long> r;\n\tlong max_count = 0;\n\tfor (std::map<std::string, long>::iterator\
    \ it = M.begin(); it != M.end(); it++) {\n\t\tif (it->second > max_count) {\n\t\
    \t\tmax_count = it->second;\n\t\t\tr.clear();\n\t\t\tr[it->first] = it->second;\n\
    \t\t} else if (it->second == max_count) {\n\t\t\tr[it->first] = it->second;\n\t\
    \t}\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::map<std::string,\
    \ long>::iterator itr;\n    std::stringstream ss(test);\n    std::string word;\n\
    \    while(ss >> word) {\n        itr = result.find(word);\n        if(itr ==\
    \ result.end())\n            result.insert(std::pair<std::string, long>(word,\
    \ 1));\n        else {\n            (itr->second)++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmphdwj5j4d: /tmp/tmphdwj5j4d.cpp:30: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> myMap;\n  int counter = 0;\n  std::string\
    \ temp = \"\";\n  for (unsigned i = 0; i < test.length(); i++) {\n    if (test[i]\
    \ != ' ') {\n      temp += test[i];\n      counter++;\n    }\n    else {\n   \
    \   myMap[temp]++;\n      temp = \"\";\n      counter = 0;\n    }\n  }\n  if (temp\
    \ != \"\") {\n    myMap[temp]++;\n  }\n  return myMap;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpjx39xpsi: /tmp/tmpjx39xpsi.cpp:35: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> counts;\n\treturn counts;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmps2k6x771: /tmp/tmps2k6x771.cpp:18: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::vector<std::string> v;\n  std::stringstream ss(test);\n  std::string\
    \ token;\n  while(std::getline(ss, token, ' ')) {\n    v.push_back(token);\n \
    \ }\n  std::sort(v.begin(), v.end());\n  std::map<std::string, long> m;\n  for(auto\
    \ c: v) {\n    m[c]++;\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpogvdeaf4: /tmp/tmpogvdeaf4.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // write your code here\n  std::map<std::string, long> m;\n  if(test.size()\
    \ > 0){\n      std::istringstream iss(test);\n      std::vector<std::string> results((std::istream_iterator<std::string>(iss)),\n\
    \                                 std::istream_iterator<std::string>());\n   \
    \   m.insert(std::make_pair(results[0],1));\n      for(int i =1; i<results.size();i++){\n\
    \        int size = m.size();\n        m.insert(std::make_pair(results[i],1));\n\
    \        if(size == m.size()){\n          std::map<std::string, long>::iterator\
    \ it = m.find(results[i]);\n          it->second++;\n        }\n      }\n    \
    \  std::map<std::string, long>::iterator it = m.begin();\n      long max = it->second;\n\
    \      it++;\n      while(it != m.end()){\n        if(it->second > max){\n   \
    \       max = it->second;\n        }\n        it++;\n      }\n      std::map<std::string,\
    \ long>::iterator it2 = m.begin();\n      while(it2 != m.end()){\n        if(it2->second\
    \ != max){\n          it2 = m.erase(it2);\n        }\n        else{\n        \
    \  it2++;\n        }\n      }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::stringstream ss(test);\n    std::map<std::string, long> ans;\n\
    \    std::string word;\n    long max = 0;\n    while(ss >> word) {\n        ans[word]\
    \ += 1;\n        if(ans[word] > max) max = ans[word];\n    }\n    std::map<std::string,\
    \ long> out;\n    for(std::map<std::string, long>::iterator it = ans.begin();\
    \ it != ans.end(); ++it) {\n        if(it->second == max) out[it->first] = it->second;\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::stringstream stream(test);\n  std::string word;\n  std::map<std::string,\
    \ long> hist;\n  while (stream >> word) {\n    hist[word]++;\n  }\n  return hist;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp74p08mk3: /tmp/tmp74p08mk3.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> m;\n\tstd::stringstream ss(test);\n\t\
    std::string temp;\n\twhile (ss >> temp) {\n\t\tm[temp]++;\n\t}\n\treturn m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp4g3bocb_: /tmp/tmp4g3bocb_.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstringstream ss(test);\n\t\
    std::string token;\n\twhile (getline(ss, token, ' ')) {\n\t\tresult[token]++;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf78gpr24.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpf78gpr24.cpp:14:2: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n   14 |  stringstream ss(test);\n      |  ^~~~~~~~~~~~\n      |  std::stringstream\n\
    In file included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf78gpr24.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpf78gpr24.cpp:16:17:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   16 |  while (getline(ss,\
    \ token, ' ')) {\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660123761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    std::istringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')){\n        //\
    \ If the letter is already in the map\n        if(myMap.find(token) != myMap.end()){\n\
    \            // Add 1 to the count\n            myMap[token] += 1;\n        }\n\
    \        else{\n            // Add the letter to the map and set count to 1\n\
    \            myMap[token] = 1;\n        }\n    }\n    return myMap;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmprzobj2xr: /tmp/tmprzobj2xr.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> key_value;\n    int len = test.length();\n\
    \    if(len == 0)\n        return key_value;\n    std::string key = test.substr(0,1);\n\
    \    key_value[key] = 1;\n    for(int i = 1; i < len; i++){\n        key = test.substr(i,1);\n\
    \        if(key_value.find(key) == key_value.end()){\n            key_value[key]\
    \ = 1;\n        }\n        else{\n            key_value[key]++;\n        }\n \
    \   }\n    std::map<std::string, long> key_value_output;\n    long max_value =\
    \ 0;\n    for(auto it = key_value.begin(); it != key_value.end(); it++){\n   \
    \     if(it->second > max_value){\n            max_value = it->second;\n     \
    \   }\n    }\n    for(auto it = key_value.begin(); it != key_value.end(); it++){\n\
    \        if(it->second == max_value){\n            key_value_output[it->first]\
    \ = it->second;\n        }\n    }\n    return key_value_output;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp8b9rwi6c: /tmp/tmp8b9rwi6c.cpp:44: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> strs;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  long max = 0;\n  std::map<std::string, long> result;\n\
    \  while (ss >> word) {\n    if (strs.find(word) == strs.end()) {\n      strs[word]\
    \ = 1;\n    } else {\n      strs[word] += 1;\n    }\n    if (strs[word] > max)\
    \ {\n      max = strs[word];\n    }\n  }\n  for (std::map<std::string, long>::iterator\
    \ it = strs.begin(); it != strs.end(); it++) {\n    if (it->second == max) {\n\
    \      result[it->first] = it->second;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dictionary;\n    std::istringstream\
    \ iss(test);\n    std::string  word;\n    while (iss >> word) {\n        ++dictionary[word];\n\
    \    }\n    return dictionary;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpdh8hlvu9: /tmp/tmpdh8hlvu9.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word)\n    {\n        if(myMap.find(word)\
    \ != myMap.end()) {\n            ++myMap[word];\n        } else {\n          \
    \  myMap[word] = 1;\n        }\n    }\n    return myMap;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpr658fakf: /tmp/tmpr658fakf.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    if (test.length() == 0)\n\
    \        return result;\n    std::stringstream ss(test);\n    std::string token;\n\
    \    std::string old_token;\n    ss >> token;\n    old_token = token;\n    result[token]\
    \ = 1;\n    while (ss >> token) {\n        if (token == old_token) {\n       \
    \     result[token]++;\n        } else {\n            old_token = token;\n   \
    \         result[token] = 1;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp_9uw4c1k: /tmp/tmp_9uw4c1k.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    if(test.empty()) return {};\n    std::map<std::string, long> hist_map;\n\
    \    // Split and create a vector of the string.\n    std::vector<std::string>\
    \ test_vec;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        test_vec.push_back(word);\n    }\n    std::map<std::string,\
    \ long> hist_map_in;\n    // Create a map of char and count.\n    for(auto itr\
    \ = test_vec.begin(); itr != test_vec.end(); itr++) {\n        // If itr is found\
    \ in the map.\n        if(hist_map_in.find(*itr) != hist_map_in.end()) {\n   \
    \         hist_map_in[*itr]++;\n        }\n        else {\n            hist_map_in[*itr]\
    \ = 1;\n        }\n    }\n    // Find the maximum element.\n    long max_val =\
    \ 0;\n    std::vector<std::string> key_vec;\n    for(auto itr = hist_map_in.begin();\
    \ itr != hist_map_in.end(); itr++) {\n        if(itr->second > max_val) {\n  \
    \          max_val = itr->second;\n            key_vec.clear();\n            key_vec.push_back(itr->first);\n\
    \        }\n        else if(itr->second == max_val) {\n            key_vec.push_back(itr->first);\n\
    \        }\n    }\n    // Add the key to the map.\n    for(auto itr = key_vec.begin();\
    \ itr != key_vec.end(); itr++) {\n        hist_map[*itr] = max_val;\n    }\n \
    \   return hist_map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> frequency;\n    std::istringstream\
    \ wordStream(test);\n    std::string word;\n    while (wordStream >> word) {\n\
    \        if (frequency.find(word) == frequency.end()) {\n            frequency[word]\
    \ = 1;\n        } else {\n            frequency[word]++;\n        }\n    }\n \
    \   return frequency;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpjtnn9ro0: /tmp/tmpjtnn9ro0.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::stringstream ss(test);\n\
    \    std::string s;\n    while(std::getline(ss, s, ' ')) {\n        auto it =\
    \ m.find(s);\n        if(it == m.end()) {\n            m.insert(std::make_pair(s,\
    \ 1));\n        } else {\n            it->second++;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp99ow4e9x: /tmp/tmp99ow4e9x.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    long len = test.length();\n    if(len==0) return {};\n    std::map<std::string,\
    \ long> temp;\n    std::string t(\"\");\n    for(long i=0;i<len;++i){\n      \
    \  if(test[i]==' '){\n            temp[t]++;\n            t=\"\";\n        }\n\
    \        else{\n            t+=test[i];\n        }\n    }\n    temp[t]++;\n  \
    \  // std::map<std::string, long> res;\n    long maxx=0;\n    for(auto i:temp){\n\
    \        maxx=std::max(maxx,i.second);\n    }\n    // std::cout<<maxx<<\"\\n\"\
    ;\n    std::map<std::string, long> res;\n    for(auto i:temp){\n        if(i.second==maxx){\n\
    \            res[i.first]=i.second;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::istringstream iss(test);\n\
    \    std::string word;\n    while (iss >> word) {\n        m[word]++;\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpbl70njbo: /tmp/tmpbl70njbo.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> answer;\n    std::string temp = \"\"\
    ;\n    for(auto i : test){\n        if(i == ' '){\n            if(answer.find(temp)\
    \ == answer.end()){\n                answer[temp] = 1;\n            }\n      \
    \      else{\n                answer[temp] += 1;\n            }\n            temp\
    \ = \"\";\n        }\n        else{\n            temp += i;\n        }\n    }\n\
    \    if(answer.find(temp) == answer.end()){\n        answer[temp] = 1;\n    }\n\
    \    else{\n        answer[temp] += 1;\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp3dzzxgni: /tmp/tmp3dzzxgni.cpp:40: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string buffer;\n  while (ss >> buffer) {\n    result[buffer]++;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpylt1iu7z: /tmp/tmpylt1iu7z.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  // your code here\n  std::map<std::string, long> m;\n  for(char i:\
    \ test){\n    if(m.find(std::string(1,i)) != m.end()){\n      m[std::string(1,i)]\
    \ += 1;\n    }else{\n      m[std::string(1,i)] = 1;\n    }\n  }\n  return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpf8p15moy: /tmp/tmpf8p15moy.cpp:26: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::stringstream ss(test);\n  std::string word;\n  std::map<std::string,\
    \ long> map;\n  while (ss >> word) {\n    map[word]++;\n  }\n  return map;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpqromgzfo: /tmp/tmpqromgzfo.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dict;\n    std::stringstream s(test);\n\
    \    std::string word;\n    long max_count = 0;\n    while (s >> word) {\n   \
    \     max_count = std::max(max_count, ++dict[word]);\n    }\n    std::map<std::string,\
    \ long> result;\n    for (auto it = dict.begin(); it != dict.end(); ++it) {\n\
    \        if (it->second == max_count) {\n            result[it->first] = it->second;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> myMap;\n    std::stringstream ss(test);\n\
    \    while(ss.good()) {\n        std::string substr;\n        getline(ss, substr,\
    \ ' ');\n        myMap[substr]++;\n    }\n    std::map<std::string, long>::iterator\
    \ max_it = std::max_element(myMap.begin(), myMap.end(),\n        [](std::pair<std::string,\
    \ long> const& p1, std::pair<std::string, long> const& p2) {\n            return\
    \ p1.second < p2.second;\n        });\n    std::map<std::string, long> max_list;\n\
    \    for(auto &it : myMap) {\n        if(it.second == max_it->second) {\n    \
    \        max_list[it.first] = it.second;\n        }\n    }\n    return max_list;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpz7locbw0: /tmp/tmpz7locbw0.cpp:40: int main(): Assertion `candidate((""))
    == (std::map<std::string, long>())'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> occur;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while(std::getline(ss, item, ' ')) {\n        if(item.empty())\
    \ continue;\n        occur[item]++;\n    }\n    std::map<std::string, long> ans;\n\
    \    long max = 0;\n    for(auto const& item : occur) {\n        if(item.second\
    \ > max) {\n            max = item.second;\n            ans.clear();\n       \
    \     ans[item.first] = item.second;\n        } else if(item.second == max) {\n\
    \            ans[item.first] = item.second;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> results;\n    if (test.length() ==\
    \ 0) return results;\n    std::istringstream iss(test);\n    std::string token;\n\
    \    while (std::getline(iss, token, ' ')) {\n        if (results.find(token)\
    \ == results.end()) {\n            results[token] = 1;\n        } else {\n   \
    \         results[token] += 1;\n        }\n    }\n    long most_occurrences =\
    \ 0;\n    std::map<std::string, long> final_results;\n    for (auto it : results)\
    \ {\n        if (it.second > most_occurrences) {\n            most_occurrences\
    \ = it.second;\n            final_results.clear();\n            final_results[it.first]\
    \ = it.second;\n        } else if (it.second == most_occurrences) {\n        \
    \    final_results[it.first] = it.second;\n        }\n    }\n    return final_results;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> occurences;\n\tstd::stringstream ss(test);\n\
    \tstd::string token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tauto search\
    \ = occurences.find(token);\n\t\tif (search != occurences.end()) {\n\t\t\toccurences[token]++;\n\
    \t\t} else {\n\t\t\toccurences[token] = 1;\n\t\t}\n\t}\n\treturn occurences;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpc2itp01j: /tmp/tmpc2itp01j.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  for (char c : test) {\n  \
    \  if (c == ' ') continue;\n    result[std::string(1, c)]++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpgvvwjqv0: /tmp/tmpgvvwjqv0.cpp:23: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> letterOccurrence;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    letterOccurrence[word]++;\n\
    \  }\n  return letterOccurrence;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpupala3aa: /tmp/tmpupala3aa.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> ret;\n    std::string key;\n    std::istringstream\
    \ iss(test);\n    while (iss >> key) {\n        ret[key]++;\n    }\n    long max\
    \ = 0;\n    for (auto it = ret.begin(); it != ret.end(); it++) {\n        if (it->second\
    \ > max) {\n            max = it->second;\n        }\n    }\n    std::map<std::string,\
    \ long> res;\n    for (auto it = ret.begin(); it != ret.end(); it++) {\n     \
    \   if (it->second == max) {\n            res[it->first] = it->second;\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> mymap;\n  std::stringstream ss(test);\n\
    \  std::string intermediate;\n  while(getline(ss, intermediate, ' ')){\n    if(mymap.find(intermediate)\
    \ == mymap.end()){\n      mymap[intermediate] = 1;\n    }else{\n      mymap[intermediate]++;\n\
    \    }\n  }\n  long max_value = 0;\n  for(auto i : mymap){\n    if(i.second >\
    \ max_value){\n      max_value = i.second;\n    }\n  }\n  std::map<std::string,\
    \ long> result;\n  for(auto i : mymap){\n    if(i.second == max_value){\n    \
    \  result[i.first] = i.second;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::stringstream stream(test);\n    std::string word;\n    std::map<std::string,\
    \ long> wordCount;\n    while(stream >> word) {\n        wordCount[word]++;\n\
    \    }\n    return wordCount;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpdrwolck3: /tmp/tmpdrwolck3.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> wordFreq;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        wordFreq[word]++;\n\
    \    }\n    return wordFreq;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp0z3v8zfo: /tmp/tmp0z3v8zfo.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n   \
    \ for (auto x : test) {\n        if (x == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word = word + x;\n  \
    \      }\n    }\n    v.push_back(word);\n    std::map<std::string, long> m;\n\
    \    for (auto x : v) {\n        m[x]++;\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpd48rxsrp: /tmp/tmpd48rxsrp.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> histogram;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        ++histogram[word];\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5mze9z1t: /tmp/tmp5mze9z1t.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> mapString;\n  std::stringstream ss(test);\n\
    \  std::string token;\n  while(std::getline(ss, token, ' ')){\n    mapString[token]++;\n\
    \  }\n  return mapString;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp55cwy3k6: /tmp/tmp55cwy3k6.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> dict;\n\tstd::istringstream iss(test);\n\
    \tstd::vector<std::string> words;\n\tstd::copy(std::istream_iterator<std::string>(iss),\
    \ std::istream_iterator<std::string>(), std::back_inserter(words));\n\tfor (int\
    \ i = 0; i < words.size(); i++) {\n\t\tif (dict.find(words[i]) == dict.end())\
    \ {\n\t\t\tdict[words[i]] = 1;\n\t\t}\n\t\telse {\n\t\t\tdict[words[i]]++;\n\t\
    \t}\n\t}\n\treturn dict;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp6ak_y_ps: /tmp/tmp6ak_y_ps.cpp:30: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (getline(ss, item, ' ')) {\n    result[item]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp7yipbgp_: /tmp/tmp7yipbgp_.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::istringstream iss(test);\n\
    \tstd::string s;\n\twhile (std::getline(iss, s, ' '))\n\t{\n\t\tresult[s]++;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmps_lcrdnj: /tmp/tmps_lcrdnj.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    //std::map<std::string, int>\
    \ res;\n    std::stringstream stream(test);\n    std::string s;\n    while(stream\
    \ >> s) {\n        res[s]++;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpuh534xki: /tmp/tmpuh534xki.cpp:25: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> histMap;\n  std::string delimiter = \"\
    \ \";\n  size_t pos = 0;\n  std::string token;\n  std::vector<std::string> words;\n\
    \  while ((pos = test.find(delimiter)) != std::string::npos) {\n    token = test.substr(0,\
    \ pos);\n    words.push_back(token);\n    test.erase(0, pos + delimiter.length());\n\
    \  }\n  words.push_back(test);\n  for (std::string s : words) {\n    histMap[s]\
    \ += 1;\n  }\n  return histMap;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpu69j273f: /tmp/tmpu69j273f.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> results;\n  std::stringstream ss(test);\n\
    \  std::string temp;\n  while (ss >> temp) {\n    results[temp]++;\n  }\n  std::map<std::string,\
    \ long> hist;\n  for (auto const& i : results) {\n    if (hist.empty()) {\n  \
    \    hist[i.first] = i.second;\n    } else {\n      if (i.second == std::max_element(hist.begin(),\
    \ hist.end(),\n                                       [](const std::pair<std::string,\
    \ long>& p1,\n                                          const std::pair<std::string,\
    \ long>& p2) {\n                                         return p1.second < p2.second;\n\
    \                                       })->second) {\n        hist[i.first] =\
    \ i.second;\n      }\n    }\n  }\n  return hist;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpzn5b937c: /tmp/tmpzn5b937c.cpp:41: int main(): Assertion `candidate(("b
    b b b a")) == (std::map<std::string, long>({{"b", 4}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dict;\n  std::vector<std::string> strings;\n\
    \  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' '))\n    strings.push_back(item);\n  for (int i = 0; i < strings.size();\
    \ i++) {\n    dict[strings[i]]++;\n  }\n  std::map<std::string, long>::iterator\
    \ itr;\n  long max = 0;\n  for (itr = dict.begin(); itr != dict.end(); ++itr)\
    \ {\n    if (itr->second > max)\n      max = itr->second;\n  }\n  std::map<std::string,\
    \ long> newDict;\n  for (itr = dict.begin(); itr != dict.end(); ++itr) {\n   \
    \ if (itr->second == max)\n      newDict[itr->first] = itr->second;\n  }\n  return\
    \ newDict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  map<string,long> dic;\n  map<string,long>::iterator iter;\n  std::stringstream\
    \ ss(test);\n  std::string temp;\n  while(ss >> temp){\n    iter = dic.find(temp);\n\
    \    if(iter == dic.end()){\n      dic.insert(make_pair(temp,1));\n    }\n   \
    \ else{\n      iter->second = iter->second + 1;\n    }\n  }\n  map<string,long>\
    \ result;\n  map<string,long>::iterator r_iter;\n  long max = -1;\n  for(iter\
    \ = dic.begin(); iter != dic.end(); iter++){\n    if(iter->second > max){\n  \
    \    max = iter->second;\n    }\n  }\n  for(iter = dic.begin(); iter != dic.end();\
    \ iter++){\n    if(iter->second == max){\n      result.insert(make_pair(iter->first,max));\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0ehd3lw.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpe0ehd3lw.cpp:13:3: error: \u2018\
    map\u2019 was not declared in this scope\n   13 |   map<string,long> dic;\n  \
    \    |   ^~~\n/tmp/tmpe0ehd3lw.cpp:13:3: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpe0ehd3lw.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpe0ehd3lw.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using map\n      |        \
    \     ^~~\n/tmp/tmpe0ehd3lw.cpp:13:7: error: \u2018string\u2019 was not declared\
    \ in this scope\n   13 |   map<string,long> dic;\n      |       ^~~~~~\n/tmp/tmpe0ehd3lw.cpp:13:7:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpe0ehd3lw.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc"
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n   std::map<std::string, long> dict;\n   std::stringstream ss(test);\n\
    \   std::string item;\n   while (std::getline(ss, item, ' ')) {\n       if (item\
    \ != \"\") {\n           if (dict.find(item) == dict.end()) {\n              \
    \ dict[item] = 1;\n           } else {\n               dict[item] += 1;\n    \
    \       }\n       }\n   }\n   return dict;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp6_v0ahmh: /tmp/tmp6_v0ahmh.cpp:30: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    std::istringstream is(test);\n\
    \    std::string key;\n    while(is >> key) {\n        res[key]++;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpc4f2_hpo: /tmp/tmpc4f2_hpo.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> res;\n  if (test.empty()) return res;\n\
    \  std::stringstream ss(test);\n  std::istream_iterator<std::string> begin(ss);\n\
    \  std::istream_iterator<std::string> end;\n  std::vector<std::string> strv(begin,\
    \ end);\n  std::sort(strv.begin(), strv.end());\n  auto max = std::max_element(strv.begin(),\
    \ strv.end(), [](const std::string &a, const std::string &b) {\n    if (std::count(strv.begin(),\
    \ strv.end(), a) > std::count(strv.begin(), strv.end(), b)) return true;\n   \
    \ return false;\n  });\n  long max_count = std::count(strv.begin(), strv.end(),\
    \ *max);\n  for (auto s : strv) {\n    if (std::count(strv.begin(), strv.end(),\
    \ s) == max_count) {\n      res[s] = max_count;\n    }\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13ji36bv.cpp: In lambda function:\n/tmp/tmp13ji36bv.cpp:21:20:\
    \ error: \u2018strv\u2019 is not captured\n   21 |     if (std::count(strv.begin(),\
    \ strv.end(), a) > std::count(strv.begin(), strv.end(), b)) return true;\n   \
    \   |                    ^~~~\n/tmp/tmp13ji36bv.cpp:20:58: note: the lambda has\
    \ no capture-default\n   20 |   auto max = std::max_element(strv.begin(), strv.end(),\
    \ [](const std::string &a, const std::string &b) {\n      |                  \
    \                                        ^\n/tmp/tmp13ji36bv.cpp:18:28: note:\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > strv\u2019 declared here\n\
    \   18 |   std::vector<std::string> strv(begin, end);\n      |               \
    \             ^~~~\n/tmp/tmp13ji36bv.cpp:21:34: error: \u2018strv\u2019 is not\
    \ captured\n   21 |     if (std::count(strv.begin(), strv.end(), a) > std::count(strv.begin(),\
    \ strv.end(), b)) return true;\n      |                                  ^~~~\n\
    /tmp/tmp13ji36bv.cpp:20:58: note: the lambda has no capture-default\n   20 | \
    \  auto max = std::max_element(strv.begin(), strv.end(), [](const std::string\
    \ &a, const std::string &b) {\n      |                                       \
    \                   ^\n/tmp/tmp13ji36bv.cpp:18:28: note: \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > strv\u2019 declared here\n   18 |   std::vector<std::string> strv(begin, end);\n\
    \      |                            ^~~~\n/tmp/tmp13ji36bv.cpp:21:62: error: \u2018\
    strv\u2019 is not captured\n   21 |     if (std::count(strv.begin(), strv.end(),\
    \ a) > std::count(strv.begin(), strv.end(), b)) return true;\n      |        \
    \                                                      ^~~~\n/tmp/tmp13ji36bv.cpp:20:58:\
    \ note: the lambda has no capture-default\n   20 |   auto max = std::max_element(strv.begin(),\
    \ strv.end(), [](const std::string &a, const std::string &b) {\n      |      \
    \                                                    ^\n/tmp/tmp13ji36bv.cpp:18:28:\
    \ note: \u2018std::vector<std::__cxx11::basic_string<char> > strv\u2019 declared\
    \ here\n   18 |   std::vector<std::string> strv(begin, end);\n      |        \
    \                "
  stdout: ''
  timestamp: 1660123763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::stringstream ss(test);\n\
    \    while(ss >> test)\n        m[test]++;\n    return m;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpxgpzxb43: /tmp/tmpxgpzxb43.cpp:22: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dict;\n  std::vector<std::string> letter;\n\
    \  std::stringstream ss(test);\n  std::string token;\n  while (std::getline(ss,\
    \ token, ' ')) {\n    if (token.empty()) {\n      continue;\n    }\n    if (std::find(letter.begin(),\
    \ letter.end(), token) == letter.end()) {\n      letter.push_back(token);\n  \
    \  }\n  }\n  for (std::string s : letter) {\n    dict[s] = std::count(test.begin(),\
    \ test.end(), s[0]);\n  }\n  return dict;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp6zrccx36: /tmp/tmp6zrccx36.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> dict;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    dict[word]++;\n  }\n  return\
    \ dict;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmph21caova: /tmp/tmph21caova.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> ans;\n  std::stringstream ss(test);\n\
    \  std::string temp;\n  while(ss >> temp) {\n    if(ans.find(temp) == ans.end())\n\
    \      ans[temp] = 1;\n    else\n      ans[temp]++;\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpx_cnzdmv: /tmp/tmpx_cnzdmv.cpp:27: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::string temp = \"\";\n\
    \tfor (int i = 0; i < test.length(); i++) {\n\t\tif (test[i] != ' ') {\n\t\t\t\
    temp += test[i];\n\t\t}\n\t\telse {\n\t\t\tif (result.find(temp) == result.end())\
    \ {\n\t\t\t\tresult[temp] = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult[temp] +=\
    \ 1;\n\t\t\t}\n\t\t\ttemp = \"\";\n\t\t}\n\t}\n\tif (temp != \"\") {\n\t\tif (result.find(temp)\
    \ == result.end()) {\n\t\t\tresult[temp] = 1;\n\t\t}\n\t\telse {\n\t\t\tresult[temp]\
    \ += 1;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp2bnoq_lt: /tmp/tmp2bnoq_lt.cpp:42: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::vector<std::string> words;\n    std::string word = \"\";\n\
    \    for (int i = 0; i < test.length(); i++) {\n        if (test[i] == ' ') {\n\
    \            words.push_back(word);\n            word = \"\";\n        } else\
    \ {\n            word += test[i];\n        }\n    }\n    if (word != \"\") {\n\
    \        words.push_back(word);\n    }\n    std::map<std::string, long> dic;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (dic.find(words[i])\
    \ == dic.end()) {\n            dic[words[i]] = 1;\n        } else {\n        \
    \    dic[words[i]]++;\n        }\n    }\n    long max = -1;\n    std::map<std::string,\
    \ long>::iterator it;\n    for (it = dic.begin(); it != dic.end(); it++) {\n \
    \       if (it->second > max) {\n            max = it->second;\n        }\n  \
    \  }\n    std::map<std::string, long> dic2;\n    for (it = dic.begin(); it !=\
    \ dic.end(); it++) {\n        if (it->second == max) {\n            dic2[it->first]\
    \ = it->second;\n        }\n    }\n    return dic2;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  \n  std::map<std::string, long> out;\n  std::map<std::string, long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string word;\n  while(getline(ss,\
    \ word, ' ')){\n    it = out.find(word);\n    if(it == out.end()){\n      out.insert(std::pair<std::string,\
    \ long>(word, 1));\n    }\n    else{\n      it->second++;\n    }\n  }\n  return\
    \ out;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpn2xos2zu: /tmp/tmpn2xos2zu.cpp:32: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    auto letter_count = 0;\n\
    \    auto max_letter_count = 0;\n    std::string max_letter;\n    auto i = 0;\n\
    \    while (i < test.size()) {\n        auto letter = test[i];\n        letter_count\
    \ = 0;\n        while (i < test.size() && test[i] == letter) {\n            ++letter_count;\n\
    \            ++i;\n        }\n        result[std::string(1, letter)] = letter_count;\n\
    \        if (letter_count > max_letter_count) {\n            max_letter_count\
    \ = letter_count;\n            max_letter = std::string(1, letter);\n        }\n\
    \    }\n    std::map<std::string, long> result_max;\n    for (auto i = result.begin();\
    \ i != result.end(); ++i) {\n        if (i->second == max_letter_count) {\n  \
    \          result_max[i->first] = i->second;\n        }\n    }\n    return result_max;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp5jzmyoni: /tmp/tmp5jzmyoni.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> temp;\n  std::string word = \"\";\n \
    \ for (int i = 0; i < test.length(); i++) {\n    if (test[i] != ' ') {\n     \
    \ word += test[i];\n    } else {\n      temp[word]++;\n      word = \"\";\n  \
    \  }\n  }\n  if (word != \"\") {\n    temp[word]++;\n  }\n  // std::cout << temp.size()\
    \ << '\\n';\n  auto it = temp.begin();\n  while (it != temp.end()) {\n    if (it->second\
    \ == 1) {\n      it = temp.erase(it);\n    } else {\n      it++;\n    }\n  }\n\
    \  return temp;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp3mdll8v0: /tmp/tmp3mdll8v0.cpp:41: int main(): Assertion `candidate(("a
    b c d g")) == (std::map<std::string, long>({{"a", 1}, {"b", 1}, {"c", 1}, {"d",
    1}, {"g", 1}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    if(test.length() == 0) return\
    \ res;\n    std::stringstream ss(test);\n    std::string word;\n    long max_val\
    \ = 0;\n    while(ss >> word){\n        if(res.find(word) == res.end()){\n   \
    \         res[word] = 1;\n        }\n        else{\n            res[word] = res[word]\
    \ + 1;\n        }\n        max_val = std::max(max_val, res[word]);\n    }\n  \
    \  for(auto it = res.begin(); it != res.end(); it++){\n        if(it->second !=\
    \ max_val){\n            res.erase(it);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> ret;\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpz561q2tx: /tmp/tmpz561q2tx.cpp:18: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tlong count = 0;\n\tstd::string\
    \ s = \"\";\n\tfor (int i = 0; i < test.length(); i++) {\n\t\tif (test[i] == '\
    \ ') {\n\t\t\tresult[s] = count;\n\t\t\tcount = 0;\n\t\t\ts = \"\";\n\t\t}\n\t\
    \telse {\n\t\t\ts = s + test[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tresult[s] = count;\n\
    \treturn result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpc9ew8hyt: /tmp/tmpc9ew8hyt.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> words;\n  std::istringstream is(test);\n\
    \  std::string token;\n  while (std::getline(is, token, ' ')) {\n    ++words[token];\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp3oqia3q7: /tmp/tmp3oqia3q7.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> test_map;\n  std::vector<std::string>\
    \ test_vector;\n  std::istringstream test_stream(test);\n  std::string curr_string;\n\
    \  while(std::getline(test_stream, curr_string, ' ')) {\n    test_vector.push_back(curr_string);\n\
    \  }\n  std::map<std::string, long>::iterator test_it;\n  std::vector<std::string>::iterator\
    \ vec_it;\n  for(vec_it = test_vector.begin(); vec_it != test_vector.end(); vec_it++)\
    \ {\n    test_it = test_map.find(*vec_it);\n    if(test_it == test_map.end())\
    \ {\n      test_map.insert(std::pair<std::string, long>(*vec_it, 1));\n    } else\
    \ {\n      test_it->second += 1;\n    }\n  }\n  return test_map;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpt7d6ozu1: /tmp/tmpt7d6ozu1.cpp:35: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist_map;\n  std::string word;\n  std::stringstream\
    \ ss(test);\n  while (ss >> word) {\n    if (hist_map.find(word) == hist_map.end())\
    \ {\n      hist_map[word] = 1;\n    } else {\n      hist_map[word]++;\n    }\n\
    \  }\n  return hist_map;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpmlteikwk: /tmp/tmpmlteikwk.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> res;\n    std::istringstream iss(test);\n\
    \    std::string word;\n    while (iss >> word) {\n        res[word]++;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp_cq0by5j: /tmp/tmp_cq0by5j.cpp:24: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::istringstream ss(test);\n\
    \  std::string s;\n  while (ss >> s) {\n    if (result.find(s) == result.end())\
    \ {\n      result[s] = 1;\n    } else {\n      result[s] += 1;\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmpdec1np5x: /tmp/tmpdec1np5x.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  if (test.empty()) {\n    return {};\n  }\n  std::map<std::string,\
    \ long> ret;\n  std::stringstream ss(test);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  for (auto\
    \ && word : words) {\n    if (ret.find(word) == ret.end()) {\n      ret[word]\
    \ = 1;\n    } else {\n      ret[word]++;\n    }\n  }\n  std::map<std::string,\
    \ long> ret2;\n  long max = 0;\n  for (auto && item : ret) {\n    if (item.second\
    \ > max) {\n      max = item.second;\n    }\n  }\n  for (auto && item : ret) {\n\
    \    if (item.second == max) {\n      ret2[item.first] = item.second;\n    }\n\
    \  }\n  return ret2;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::stringstream ss(test);\n\
    \  std::string letter;\n  while (ss >> letter) {\n    hist[letter]++;\n  }\n \
    \ std::map<std::string, long> res;\n  long maxVal = -1;\n  for (auto &v : hist)\
    \ {\n    if (v.second > maxVal) {\n      maxVal = v.second;\n      res.clear();\n\
    \      res[v.first] = v.second;\n    } else if (v.second == maxVal) {\n      res[v.first]\
    \ = v.second;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::stringstream ss(test);\n\
    \    std::string s;\n    while(ss >> s) {\n        if(!m.count(s)) {\n       \
    \     m[s] = 1;\n        } else {\n            m[s]++;\n        }\n    }\n   \
    \ return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  status: Exception
  stderr: 'tmp9qeticpb: /tmp/tmp9qeticpb.cpp:28: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string, long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123765
