name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"\
  The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string\
  \ S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    // Replace pass above with your solution\n    long count=0;\n \
    \   for(int i=0;i<S.length();i++)\n    {\n        if(S[i]=='I')\n        {\n \
    \           count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    string word = \"\";\n    for (int i = 0; i < S.length(); i++) {\n  \
    \      if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (word\
    \ == \"I\")\n                count++;\n            word = \"\";\n        } else\
    \ {\n            word += S[i];\n        }\n    }\n    return count;", "  long\
    \ c=0;\n  std::string delimiter = \"!.? \";\n  size_t pos = 0;\n  std::string\
    \ token;\n  while ((pos = S.find(delimiter)) != std::string::npos) {\n    token\
    \ = S.substr(0, pos);\n    if(token.size()>0) {\n      // std::cout << token <<\
    \ std::endl;\n      if(token[0]=='I') {\n        c++;\n      }\n    }\n    S.erase(0,\
    \ pos + delimiter.length());\n  }\n  return c;", "// TODO\nint len=S.length();\n\
    long bor=0;\n//string::iterator it;\nfor(int i=0;i<len;i++)\n{\nif(S[i]=='I')\n\
    {bor++;\nwhile(S[i]!='.'&&S[i]!='?'&&S[i]!='!')\n{\ni++;", "    stringstream ss(S);\n\
    \    string word;\n    long count = 0;\n    while(ss >> word) {\n        if(word\
    \ == \"I\") {\n            count++;\n        }\n    }\n    return count;", " \
    \   // 1. Split the string into sentences.\n    // 2. Count the number of \"I\"\
    \ words in each sentence.\n    // 3. Sum up the number of sentences with at least\
    \ one \"I\" word.\n    std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n\
    \    std::string::size_type i = 0;\n    std::vector<std::string> sentence_list;\n\
    \    while (i < S.size()) {\n        // Find the next sentence.\n        std::string::size_type\
    \ start = S.find_first_not_of(\" \", i);\n        if (start == std::string::npos)\
    \ {\n            break;\n        }\n        std::string::size_type end = S.find_first_of(\"\
    .?!\", start);\n        if (end == std::string::npos) {\n            end = S.size();\n\
    \        }\n        sentence_list.push_back(S.substr(start, end - start));\n \
    \       i = end + 1;\n    }\n    long boredoms = 0;\n    for (auto& sentence :\
    \ sentence_list) {\n        if (sentence.find(\" i \") != std::string::npos) {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;", "  std::vector<std::string>\
    \ v;\n  int n = S.length();\n  std::string temp = \"\";\n  for (int i = 0; i <\
    \ n; i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      v.push_back(temp);\n\
    \      temp = \"\";\n    } else {\n      temp += S[i];\n    }\n  }\n  long ans\
    \ = 0;\n  for (auto s : v) {\n    if (s[0] == 'I') {\n      ans++;\n    }\n  }\n\
    \  return ans;", "    std::string delimiters = \"!?.\";\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::istringstream stream(S);\n    while\
    \ (std::getline(stream, word, delimiters[0])) {\n        if (std::getline(stream,\
    \ word, delimiters[1])) {\n            words.push_back(word);\n        }\n   \
    \     if (std::getline(stream, word, delimiters[2])) {\n            words.push_back(word);\n\
    \        }\n    }\n    long boredoms = 0;\n    for (auto word : words) {\n   \
    \     if (word.find(\"I\") == 0) {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;", "    // Your code here\n    long num = 0;\n    for(int\
    \ i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!'){\n            if(S[i-1] == 'I'){\n                num++;\n         \
    \   }\n        }\n    }\n    return num;", "    long count = 0;\n    for (long\
    \ i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;", "    std::transform(S.begin(), S.end(),\
    \ S.begin(), ::tolower);\n    long n = 0;\n    for (long i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'i') {\n            if (i + 1 < S.size() && S[i\
    \ + 1] == ' ') {\n                n++;\n            }\n        }\n    }\n    return\
    \ n;", "\tstd::string tmp = \"\";\n\tstd::stringstream ss(S);\n\tlong boredoms\
    \ = 0;\n\twhile (std::getline(ss, tmp, '.')) {\n\t\tif (tmp.find(\"I\") == 0 &&\
    \ tmp.size() > 1) {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;", "   \
    \ long ans = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        int j = i;\n\
    \        while (j < S.size() && S[j] != '.' && S[j] != '?' && S[j] != '!') {\n\
    \            ++j;\n        }\n        if (j - i >= 2 && S[i] == 'I' && S[i + 1]\
    \ == ' ') {\n            ++ans;\n        }\n        i = j;\n    }\n    return\
    \ ans;", "    std::stringstream sstr(S);\n    std::string word;\n    long nboredom\
    \ = 0;\n    while (sstr >> word) {\n        if (word == \"I\") {\n           \
    \ nboredom += 1;\n        }\n    }\n    return nboredom;", "  long count = 0;\n\
    \  bool is_bored = false;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n      is_bored = false;\n    } else\
    \ if (S[i] == 'I') {\n      is_bored = true;\n    }\n    if (is_bored) {\n   \
    \   count++;\n    }\n  }\n  return count;", "  long count = 0;\n  for (int i =\
    \ 0; i < S.length(); i++) {\n    if (S[i] == 'I') {\n      count++;\n    }\n \
    \ }\n  return count;", "    long count = 0;\n    long i = 0;\n    while(i<S.length()){\n\
    \        if(S[i]=='I'){\n            count++;\n            while(S[i]!='.'&&S[i]!='?'&&S[i]!='!'){\n\
    \                i++;\n            }\n        }\n        i++;\n    }\n    return\
    \ count;", "  std::stringstream ss(S);\n  std::string word;\n  long count = 0;\n\
    \  while (std::getline(ss, word, ' ')) {\n    if (word == \"I\") {\n      count++;\n\
    \    }\n  }\n  return count;", "  return count(S.begin(), S.end(), 'I');", "\t\
    long boredoms = 0;\n\tS += '.';\n\tstd::istringstream iss(S);\n\tstd::string word;\n\
    \tbool has_space = false;\n\twhile (iss >> word) {\n\t\tif (word == \"I\") {\n\
    \t\t\t++boredoms;\n\t\t\thas_space = false;\n\t\t}\n\t\telse if (word == \"!\"\
    \ || word == \"?\" || word == \".\") {\n\t\t\thas_space = true;\n\t\t}\n\t\telse\
    \ if (has_space) {\n\t\t\thas_space = false;\n\t\t}\n\t}\n\treturn boredoms;",
  "    long count = 0;\n    std::stringstream a(S);\n    std::string word;\n    while(std::getline(a,\
    \ word, ' ')){\n        if(word == \"I\") count++;\n    }\n    return count;",
  "\tlong res = 0;\n\tstd::istringstream ss(S);\n\tstd::string word;\n\twhile (ss\
    \ >> word) {\n\t\tif (word == \"I\") {\n\t\t\tres++;\n\t\t}\n\t}\n\treturn res;",
  "    long count=0;\n    string word=\"\";\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]!='.' and S[i]!='!' and S[i]!='?'){\n            word+=S[i];\n\
    \        }\n        else{\n            stringstream ss(word);\n            string\
    \ word1;\n            vector<string> words;\n            while(ss>>word1){\n \
    \               words.push_back(word1);\n            }\n            if(words[0]==\"\
    I\"){\n                count++;\n            }\n            word=\"\";\n     \
    \   }\n    }\n    return count;", "  std::istringstream iss(S);\n  std::string\
    \ buffer;\n  std::vector<std::string> vec;\n  while (std::getline(iss, buffer,\
    \ '.')) {\n    vec.push_back(buffer);\n  }\n  long res = 0;\n  std::stringstream\
    \ ss;\n  for (auto &s : vec) {\n    ss << s;\n    ss >> buffer;\n    if (buffer\
    \ == \"I\") {\n      res++;\n    }\n    ss.clear();\n  }\n  return res;", "  \
    \  // this is a comment\n    long ans = 0;\n    stringstream in(S);\n    string\
    \ temp;\n    while(getline(in, temp, '.')){\n        string s = temp.substr(0,\
    \ temp.find(' '));\n        if(s == \"I\"){\n            ans++;\n        }\n \
    \   }\n    // this is a comment\n    return ans;", "\tlong count = 0;\n\tstd::string\
    \ sentence;\n\tstd::stringstream ss(S);\n\twhile (std::getline(ss, sentence, '.'))\
    \ {\n\t\tstd::stringstream ss1(sentence);\n\t\tstd::string word;\n\t\tstd::getline(ss1,\
    \ word, ' ');\n\t\tif (word == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;", "\tlong long boredoms = 0;\n\tfor (int i = 0; i < S.length(); i++)\
    \ {\n\t\tchar key = S[i];\n\t\tif (key == 'I') {\n\t\t\tboredoms++;\n\t\t}\n\t\
    }\n\treturn boredoms;", "\t// Implement Me\n\tstd::string word = \"I\";\n\tint\
    \ i = 0;\n\tint count = 0;\n\tint j = 0;\n\twhile (i < S.length()) {\n\t\tif (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tif (S[i - 1] == 'I') {\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;", "  // type your solution\
    \ here\n  long count=0;\n  for(int i=0;i<S.length();i++)\n  {\n    if(S[i]=='I')\n\
    \    {\n        count++;\n    }\n  }\n  return count;", "    int boredoms = 0;\n\
    \    std::string word = \"\";\n    for (char c : S) {\n        if (c == ' ') {\n\
    \            if (word == \"I\")\n                boredoms++;\n            word\
    \ = \"\";\n        } else {\n            word += c;\n        }\n    }\n    return\
    \ boredoms;", "    int boredoms = 0;\n    for (int i = 0; i < S.length(); i++)\
    \ {\n        std::string sentence;\n        sentence += S[i];\n        if (sentence\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "  // write your code here\n  std::stringstream ss(S);\n  std::string word;\n  long\
    \ count = 0;\n  while(ss >> word) {\n    if(word == \"I\") {\n      count++;\n\
    \    }\n  }\n  return count;", "  long result = 0;\n  std::vector<std::string>\
    \ tokens;\n  std::stringstream ss(S);\n  std::string item;\n  while (std::getline(ss,\
    \ item, '.')) {\n    tokens.push_back(item);\n  }\n  for (auto const &t : tokens)\
    \ {\n    std::vector<std::string> words;\n    std::stringstream tt(t);\n    std::string\
    \ word;\n    while (std::getline(tt, word, ' ')) {\n      words.push_back(word);\n\
    \    }\n    if (words.front() == \"I\") {\n      result++;\n    }\n  }\n  return\
    \ result;", "    //inputs a string\n    //outputs a long\n    //define variables\
    \ here\n    std::vector<std::string> sentences;\n    std::string sentence;\n \
    \   int n = 0;\n    int count = 0;\n    bool isSentence = false;\n    char c;\n\
    \    //modify input string\n    //here\n    //parse string\n    while(n < S.length()){\n\
    \        c = S[n];\n        if(c == '.' || c == '?' || c == '!'){\n          \
    \  isSentence = true;\n        }\n        if(isSentence){\n            if(sentence[0]\
    \ == 'I'){\n                count++;\n            }\n            sentence = \"\
    \";\n            isSentence = false;\n        }\n        else{\n            sentence\
    \ = sentence + c;\n        }\n        n++;\n    }\n    return count;", "    int\
    \ boredom = 0;\n    std::istringstream iss(S);\n    std::string sentence;\n  \
    \  std::string word;\n    while (getline(iss, sentence, '.')) {\n        std::istringstream\
    \ is(sentence);\n        while (is >> word) {\n            if (word == \"I\")\n\
    \                boredom++;\n        }\n    }\n    return boredom;", "    // TODO:\
    \ Implement this function\n    if(S.size() == 0)\n        return 0;\n    int isBored\
    \ = 0;\n    int i = 0;\n    while(i < S.size()){\n        if(S[i] == 'I'){\n \
    \           i += 2;\n            if(S[i] == '\\0')\n                return 1;\n\
    \            while(S[i] != '.' && S[i] != '?' && S[i] != '!'){\n             \
    \   i++;\n                if(S[i] == '\\0')\n                    return 1;\n \
    \           }\n            isBored++;\n        }\n        i++;\n    }\n    return\
    \ isBored;", "    int boredoms = 0;\n    size_t pos = 0;\n    while ((pos = S.find(\"\
    I\", pos)) != std::string::npos) {\n        if (pos == 0 || (S[pos - 1] != '.'\
    \ && S[pos - 1] != '?' && S[pos - 1] != '!')) {\n            boredoms++;\n   \
    \     }\n        pos++;\n    }\n    return boredoms;", "  long count = 0;\n  stringstream\
    \ ss(S);\n  string temp;\n  while(ss >> temp) {\n    if(temp == \"I\") {\n   \
    \   count++;\n    }\n  }\n  return count;", "    std::string tmp = \"\";\n   \
    \ long cnt = 0;\n    for (long i = 0; i < S.size(); i++) {\n        tmp += S[i];\n\
    \        if (tmp == \"I\") {\n            if (S[i + 1] == ' ')\n             \
    \   cnt++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n\
    \            tmp = \"\";\n    }\n    return cnt;", "\tint i, count = 0;\n\tfor\
    \ (i = 0; i < S.length(); i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;", "  long count = 0;\n  std::istringstream iss(S);\n \
    \ std::string word;\n  while (iss >> word) {\n    if (word.find(\"I\") == 0) {\n\
    \      count++;\n    }\n  }\n  return count;", "\tlong boredoms = 0;\n\tstd::stringstream\
    \ ss(S);\n\tstd::string word;\n\tss >> word;\n\twhile (ss.good()) {\n\t\tif (word\
    \ == \"I\") {\n\t\t\tboredoms++;\n\t\t}\n\t\tss >> word;\n\t}\n\treturn boredoms;",
  "\tint bored = 0;\n\tif (S.empty())\n\t\treturn bored;\n\tauto sentence_end = S.find_first_of(\"\
    .!?\");\n\twhile (sentence_end != std::string::npos) {\n\t\t//sentence_end -=\
    \ 1;\n\t\tif (S.at(sentence_end-1) == ' ')\n\t\t\tsentence_end -= 1;\n\t\tauto\
    \ first_word = S.substr(0, sentence_end);\n\t\tif (first_word == \"I\")\n\t\t\t\
    bored += 1;\n\t\tS = S.substr(sentence_end+1);\n\t\tsentence_end = S.find_first_of(\"\
    .!?\");\n\t}\n\treturn bored;", "    long c=0;\n    int x = S.find('I');\n   \
    \ while(x != std::string::npos)\n    {\n        if(x == 0)\n        {\n      \
    \      c++;\n        }\n        else if(S[x-1] == '.' || S[x-1] == '?' || S[x-1]\
    \ == '!')\n        {\n            c++;\n        }\n        x = S.find('I', x+1);\n\
    \    }\n    return c;", "    std::string delimiters = \"?!.\";\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        if (delimiters.find(S[i]) != std::string::npos) {\n        \
    \    if (!token.empty()) {\n                tokens.push_back(token);\n       \
    \         token.clear();\n            }\n        } else {\n            token +=\
    \ S[i];\n        }\n    }\n    if (!token.empty()) {\n        tokens.push_back(token);\n\
    \    }\n    long long res = 0;\n    for (auto str : tokens) {\n        if (str.find(\"\
    I\") == 0) {\n            res++;\n        }\n    }\n    return res;", "    std::stringstream\
    \ ss(S);\n    std::string word;\n    long c = 0;\n    while(ss >> word) {\n  \
    \      if(word == \"I\") c++;\n    }\n    return c;", "  // your code here\n \
    \ int boredoms = 0;\n  std::string substr;\n  for (int i = 0; i < S.length();\
    \ i++) {\n    if (S[i] == 'I') {\n      substr = S.substr(i,S.length());\n   \
    \   break;\n    }\n  }\n  std::stringstream ss(substr);\n  do {\n    ss >> substr;\n\
    \    if (substr == \"I\")\n      boredoms++;\n  } while (ss);\n  return boredoms;",
  "  std::string delimiter = \"?!.\";\n  size_t pos = 0;\n  std::string token;\n \
    \ long cnt = 0;\n  while ((pos = S.find(delimiter)) != std::string::npos) {\n\
    \    token = S.substr(0, pos);\n    std::cout << token << std::endl;\n    if (token.find(\"\
    I\") == 0) {\n      cnt++;\n    }\n    S.erase(0, pos + delimiter.length());\n\
    \  }\n  if (S.find(\"I\") == 0) {\n    cnt++;\n  }\n  return cnt;", "  // your\
    \ code here\n  std::istringstream buffer(S);\n  std::string line;\n  long boredoms\
    \ = 0;\n  while (std::getline(buffer, line, '.')) {\n    if(line.find(\"I\") ==\
    \ 0) {\n      boredoms++;\n    }\n  }\n  return boredoms;", "    int i,count,boredom;\n\
    \    boredom=0;\n    count=0;\n    for(i=0;S[i]!='\\0';i++)\n    {\n        if(S[i]=='I')\n\
    \        {\n            if(S[i+1]==' ')\n            {\n                boredom=boredom+1;\n\
    \            }\n        }\n    }\n    return boredom;", "    long num = 0;\n \
    \   std::string s = \"\";\n    for (int i = 0; i < S.length(); i++) {\n      \
    \  if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (s.substr(0,\
    \ 2) == \"I \") {\n                num++;\n            }\n            s = \"\"\
    ;\n        } else {\n            s += S[i];\n        }\n    }\n    return num;",
  "  long num = 0;\n  std::string sentence;\n  std::stringstream ss(S);\n  while (getline(ss,\
    \ sentence, '.')) {\n    if (sentence.substr(0, 2) == \"I \") {\n      num++;\n\
    \    }\n  }\n  return num;", "\t// Your code goes here\n\tlong boredoms = 0;\n\
    \tstd::stringstream ss(S);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\t\
    if (word.compare(\"I\") == 0) {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;",
  "  std::regex ex(\"( I \\\\w+)\");\n  std::sregex_iterator next(S.begin(), S.end(),\
    \ ex);\n  std::sregex_iterator end;\n  long count = 0;\n  while (next != end)\
    \ {\n    count++;\n    next++;\n  }\n  return count;", "    long cnt = 0;\n  \
    \  std::regex re = std::regex(\"(I|^I)\\\\s.*?(?=(\\\\.|\\\\?|\\\\!))\");\n  \
    \  auto it = std::sregex_iterator(S.begin(), S.end(), re);\n    auto it_end =\
    \ std::sregex_iterator();\n    for (; it != it_end; ++it) {\n        cnt++;\n\
    \    }\n    return cnt;", "    long ans = 0;\n    long index = 0;\n    while(index\
    \ < S.length()){\n        if(S[index] == 'I'){\n            if(index == 0 || S[index-1]\
    \ == '.' || S[index-1] == '?' || S[index-1] == '!'){\n                ans++;\n\
    \            }\n        }\n        index++;\n    }\n    return ans;", "\tlong\
    \ result = 0;\n\tstd::vector<std::string> words;\n\tstd::string word = \"\";\n\
    \t//split string into words\n\tfor (auto letter : S) {\n\t\tif (letter == ' ')\
    \ {\n\t\t\twords.push_back(word);\n\t\t\tword = \"\";\n\t\t}\n\t\telse\n\t\t\t\
    word += letter;\n\t}\n\t//add last word to the list\n\twords.push_back(word);\n\
    \t//check if it starts with I\n\tfor (auto word : words) {\n\t\tif (word[0] ==\
    \ 'I')\n\t\t\tresult++;\n\t}\n\treturn result;", "    std::string sep = \"!?.\"\
    ;\n    int count = 0;\n    size_t start = 0;\n    size_t end = 0;\n    while ((end\
    \ = S.find_first_of(sep, start)) != std::string::npos) {\n        std::string\
    \ token = S.substr(start, end - start);\n        std::string first = token.substr(0,1);\n\
    \        //std::cout << \"Token:\" << token << \";\" << \" first:\" << first <<\
    \ std::endl;\n        if (first == \"I\")\n            count++;\n        start\
    \ = end + 1;\n    }\n    return count;", "  if (S.empty()) return 0;\n  std::string\
    \ delimiters = \"!.? \";\n  std::string::size_type start = 0;\n  std::string::size_type\
    \ end = S.find_first_of(delimiters);\n  int boredoms = 0;\n  while (end != std::string::npos)\
    \ {\n    std::string sentence = S.substr(start, end - start);\n    if (sentence.size()\
    \ > 0 && sentence[0] == 'I') ++boredoms;\n    start = end + 1;\n    end = S.find_first_of(delimiters,\
    \ start);\n  }\n  std::string sentence = S.substr(start);\n  if (sentence.size()\
    \ > 0 && sentence[0] == 'I') ++boredoms;\n  return boredoms;", "    int count\
    \ = 0;\n    std::vector<std::string> words;\n    std::istringstream buf(S);\n\
    \    for(std::string word; buf >> word; )\n        words.push_back(word);\n  \
    \  for(int i = 0; i < words.size(); i++) {\n        if(words[i] == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;", "  // Write code\
    \ here\n  long boredoms = 0;\n  std::stringstream ss(S);\n  std::string word;\n\
    \  std::vector<std::string> tokens;\n  while (ss >> word) {\n    tokens.push_back(word);\n\
    \  }\n  for (std::vector<std::string>::iterator it = tokens.begin();\n       it\
    \ != tokens.end(); ++it) {\n    if (*it == \"I\") {\n      boredoms++;\n    }\n\
    \  }\n  return boredoms;", "\treturn std::count(S.begin(), S.end(), 'I');", " \
    \   std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::string\
    \ delimiter = \"?.!\";\n    size_t pos = 0;\n    std::string token;\n    int ans\
    \ = 0;\n    while ((pos = S.find(delimiter)) != std::string::npos) {\n       \
    \ token = S.substr(0, pos);\n        if (token.find(\" i \") != std::string::npos\
    \ || token.find(\" i\\n\") != std::string::npos) {\n            ans++;\n     \
    \   }\n        S.erase(0, pos + delimiter.length());\n    }\n    if (S.find(\"\
    \ i \") != std::string::npos || S.find(\" i\\n\") != std::string::npos) {\n  \
    \      ans++;\n    }\n    return ans;", "  // split the string by '.', '?' or\
    \ '!'\n  char delimiters[] = \"!.?\";\n  char *p = std::strtok(const_cast<char*>(S.c_str()),\
    \ delimiters);\n  // the number of boredoms\n  int boredoms = 0;\n  while (p)\
    \ {\n    std::string sent(p);\n    // check the first word of each sentence\n\
    \    std::string first_word = sent.substr(0, sent.find(\" \"));\n    if (first_word\
    \ == \"I\") {\n      ++boredoms;\n    }\n    p = std::strtok(NULL, delimiters);\n\
    \  }\n  return boredoms;", "\tvector<string> v;\n\tstring s;\n\tfor (int i = 0;\
    \ i < S.length(); i++) {\n\t\tif (S[i] == ' ') {\n\t\t\tv.push_back(s);\n\t\t\t\
    s = \"\";\n\t\t}\n\t\telse if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\
    \t\tv.push_back(s);\n\t\t\ts = \"\";\n\t\t}\n\t\telse\n\t\t\ts += S[i];\n\t}\n\
    \tlong count = 0;\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tif (v[i] == \"\
    I\")\n\t\t\tcount++;\n\t}\n\treturn count;", "    std::string msg = \"I \";\n\
    \    long count = 0;\n    std::string delimiter = \"!?.\";\n    size_t pos = 0;\n\
    \    std::string token;\n    while ((pos = S.find(delimiter)) != std::string::npos)\
    \ {\n        token = S.substr(0, pos);\n        std::cout << token << std::endl;\n\
    \        if(token.compare(0,2,msg) == 0)\n            count++;\n        S.erase(0,\
    \ pos + delimiter.length());\n    }\n    std::cout << S << std::endl;\n    if(S.compare(0,2,msg)\
    \ == 0)\n        count++;\n    return count;", "    std::stringstream ss(S);\n\
    \    std::string word;\n    long boredoms = 0;\n    while (ss >> word) {\n   \
    \     if (word == \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;", "    long n = S.length();\n    long i=0,bored=0;\n    while(i<n){\n\
    \        if(S[i]=='I'){\n            while(i<n && S[i]!='.' && S[i]!='?' && S[i]!='!'){\n\
    \                i++;\n            }\n            bored++;\n        }\n      \
    \  else{\n            while(i<n && S[i]!='.' && S[i]!='?' && S[i]!='!'){\n   \
    \             i++;\n            }\n        }\n        if(i<n){\n            i++;\n\
    \        }\n    }\n    return bored;", "  // TODO: Implement\n  int i, j, count=0;\n\
    \  int n = S.length();\n  for(i=0; i<n; i++)\n  {\n    if(S[i] == 'I')\n    {\n\
    \      for(j=i; j<n; j++)\n      {\n        if(S[j] == '.' || S[j] == '?' || S[j]\
    \ == '!')\n        {\n          i = j;\n          count++;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return count;", "  int boredoms = 0;\n  string\
    \ word;\n  stringstream ss(S);\n  while (ss >> word) {\n    if (word[0] == 'I')\
    \ {\n      //std::cout << word << '\\n';\n      boredoms++;\n    }\n  }\n  return\
    \ boredoms;", "    stringstream check1(S);\n    string intermediate;\n    long\
    \ x=0;\n    while(getline(check1, intermediate, '.')) {\n        stringstream\
    \ check2(intermediate);\n        string intermediate2;\n        getline(check2,\
    \ intermediate2, ' ');\n        if(intermediate2==\"I\") x++;\n    }\n    return\
    \ x;", "  // Todo: implement this function\n  // Note: you may find some functions\
    \ like find, substr, etc helpful\n  // You may also find the stringstream class\
    \ helpful\n  long boredom = 0;\n  std::string delimiter = \" !.?\";\n  size_t\
    \ pos = 0;\n  std::string token;\n  while ((pos = S.find(delimiter)) != std::string::npos)\
    \ {\n    token = S.substr(0, pos);\n    std::stringstream s(token);\n    std::string\
    \ word;\n    s >> word;\n    if (word == \"I\")\n      boredom++;\n    S.erase(0,\
    \ pos + delimiter.length());\n  }\n  if (S.substr(0, 1) == \"I\")\n    boredom++;\n\
    \  return boredom;", "  int boredoms = 0;\n  std::stringstream ss(S);\n  std::string\
    \ temp;\n  while (ss) {\n    ss >> temp;\n    if (temp.find(\"I\") == 0) {\n \
    \     boredoms++;\n    }\n  }\n  return boredoms;", "    // I will count total\
    \ number of sentences, and then subtract total\n    // number of sentences that\
    \ starts with I.\n    long sentences = 0;\n    long sentences_start_with_I = 0;\n\
    \    for (long i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            // Check if this sentence starts with I\n\
    \            long j = i;\n            while (j > 0 && S[j - 1] == ' ') j--;\n\
    \            // This is sentence's end\n            // if (j > 0 && S[j] == 'I')\n\
    \            if (j > 1 && S[j - 1] == 'I')\n                sentences_start_with_I++;\n\
    \            sentences++;\n        }\n    }\n    return sentences - sentences_start_with_I;",
  "    long res = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] ==\
    \ 'I') {\n            res++;\n        }\n        if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            i++;\n        }\n    }\n    return res;", " \
    \ int num = 0;\n  std::stringstream ss(S);\n  std::string item;\n  while (std::getline(ss,\
    \ item, '.')) {\n    if (item.size() > 0) {\n      if (item[0] == 'I')\n     \
    \   num++;\n    }\n  }\n  return num;", "    long bored = 0;\n    char delimiters[]\
    \ = \" .?!\";\n    char * token = std::strtok(&S[0], delimiters);\n    while (token\
    \ != NULL) {\n        std::cout << token << std::endl;\n        if (std::strcmp(token,\
    \ \"I\") == 0) {\n            bored += 1;\n        }\n        token = std::strtok(NULL,\
    \ delimiters);\n    }\n    return bored;", "    std::vector<std::string> words;\n\
    \    std::stringstream ss(S);\n    std::string buf;\n    while (ss >> buf) {\n\
    \        words.push_back(buf);\n    }\n    std::vector<std::string> sentences;\n\
    \    int n = words.size();\n    for (int i = 0; i < n; ++i) {\n        std::string\
    \ temp = \"\";\n        if (words[i] == \"I\") {\n            temp += words[i];\n\
    \            temp += \" \";\n            ++i;\n            while (i < n) {\n \
    \               if (words[i][words[i].size() - 1] == '.' ||\n                \
    \    words[i][words[i].size() - 1] == '?' ||\n                    words[i][words[i].size()\
    \ - 1] == '!') {\n                    temp += words[i];\n                    break;\n\
    \                }\n                temp += words[i];\n                temp +=\
    \ \" \";\n                ++i;\n            }\n            sentences.push_back(temp);\n\
    \        }\n    }\n    return sentences.size();", "  long numberOfI = 0;\n  bool\
    \ iStarted = false;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n      if (iStarted) {\n        iStarted\
    \ = false;\n        numberOfI++;\n      }\n    } else if (S[i] == 'I') {\n   \
    \   iStarted = true;\n    }\n  }\n  return numberOfI;", "    long ans = 0;\n \
    \   std::string buffer;\n    std::stringstream ss(S);\n    while (std::getline(ss,\
    \ buffer, '.')) {\n        if (buffer.length() && buffer[0] == 'I') ans++;\n \
    \   }\n    return ans;", "   char *token = strtok((char *)S.c_str(), \"?.!\");\n\
    \   long count = 0;\n   while (token != NULL) {\n      if (token[0] == 'I') {\n\
    \         count++;\n      }\n      token = strtok(NULL, \"?.!\");\n   }\n   return\
    \ count;", "  std::stringstream ss;\n  ss << S;\n  std::string item;\n  long count\
    \ = 0;\n  while (std::getline(ss, item, '.')) {\n    if (item.substr(0, item.find('\
    \ ')) == \"I\") {\n      count++;\n    }\n  }\n  return count;", "\tlong boredoms\
    \ = 0;\n\tif(S[0]=='I')\n\t\tboredoms++;\n\tfor(auto it = S.begin(); it!=S.end();\
    \ ++it)\n\t{\n\t\tif(*it=='.' || *it=='?' || *it=='!')\n\t\t{\n\t\t\t++it;\n\t\
    \t\tif(*it=='I')\n\t\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;", "    std::stringstream\
    \ SStream(S);\n    std::string Sentence;\n    long Count = 0;\n    while(std::getline(SStream,\
    \ Sentence, '.')) {\n        if(Sentence.substr(0, 2) == \"I \")\n           \
    \ Count++;\n    }\n    return Count;", "    vector<string> sentence;\n    vector<string>\
    \ words;\n    vector<string> words_arr;\n    int i = 0;\n    int c = 0;\n    if(S.size()\
    \ == 0)\n    {\n        return 0;\n    }\n    for(i = 0; i < S.size(); i++)\n\
    \    {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n   \
    \         sentence.push_back(S.substr(c, i - c));\n            c = i + 1;\n  \
    \      }\n    }\n    if(c < S.size())\n    {\n        sentence.push_back(S.substr(c,\
    \ S.size() - c));\n    }\n    for(i = 0; i < sentence.size(); i++)\n    {\n  \
    \      stringstream ss(sentence[i]);\n        while(ss >> words)\n        {\n\
    \            words_arr.push_back(words);\n        }\n        if(words_arr[0] ==\
    \ \"I\")\n        {\n            return 1;\n        }\n        words_arr.clear();\n\
    \    }\n    return 0;", "    // your code here\n    std::vector<std::string>words;\n\
    \    std::stringstream ss(S);\n    std::string tmp;\n    while(ss>>tmp){\n   \
    \     words.push_back(tmp);\n    }\n    // for(int i=0;i<words.size();i++){\n\
    \    //     std::cout<<words[i]<<std::endl;\n    // }\n    int count=0;\n    for(int\
    \ i=0;i<words.size();i++){\n        if(words[i]==\"I\"){\n            while(true){\n\
    \                i++;\n                if(words[i]==\".\"||words[i]==\"?\"||words[i]==\"\
    !\"){\n                    count++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return count;", "    std::stringstream\
    \ lineStream(S);\n    std::string word;\n    long boredoms{0};\n    while (lineStream\
    \ >> word) {\n        if (word == \"I\") {\n            boredoms++;\n        }\n\
    \    }\n    return boredoms;", "    // split the string by word\n    std::vector<std::string>\
    \ words;\n    std::istringstream iss(S);\n    do\n    {\n        std::string sub;\n\
    \        iss >> sub;\n        words.push_back(sub);\n    } while (iss);\n    long\
    \ boredoms = 0;\n    bool isBored = false;\n    for (const auto &word : words)\
    \ {\n        if (word.compare(\"I\") == 0) {\n            isBored = true;\n  \
    \      }\n        if (word.compare(\".\") == 0 || word.compare(\"?\") == 0 ||\
    \ word.compare(\"!\") == 0) {\n            if (isBored) {\n                boredoms++;\n\
    \            }\n            isBored = false;\n        }\n    }\n    return boredoms;",
  "  // You code here!\n\tchar s[10000];\n\tstrcpy(s,S.c_str());\n\tint i=0, count=0;\n\
    \twhile(s[i]!='\\0')\n\t{\n\t\tint j=i;\n\t\twhile(s[j]!='.' && s[j]!='?' && s[j]!='!'\
    \ && s[j]!='\\0')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tj--;\n\t\tif(j-i>=1 && s[i]=='I'\
    \ && s[i+1]==' ')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif(s[j]=='.' || s[j]=='?'\
    \ || s[j]=='!')\n\t\t{\n\t\t\ti=j+2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti=j+1;\n\t\
    \t}\n\t}\n\treturn count;", "  long boredoms = 0;\n  int prev = 0;\n  for (long\
    \ i = 0; i < S.size(); i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n      std::string temp = S.substr(prev, i - prev);\n      std::cout << temp\
    \ << std::endl;\n      if (temp.substr(0,2) == \"I \") {\n        boredoms++;\n\
    \      }\n      prev = i + 1;\n    }\n  }\n  return boredoms;", "  long number\
    \ = 0;\n  long size = S.size();\n  if (size == 0) {\n    return 0;\n  }\n  S =\
    \ S + \".\";\n  size++;\n  int i = 0;\n  bool isWord = false;\n  bool isSentence\
    \ = false;\n  bool isFirst = false;\n  for (i = 0; i < size; i++) {\n    if (S[i]\
    \ == ' ') {\n      isFirst = false;\n      isWord = false;\n    } else if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n      isSentence = true;\n      isWord\
    \ = false;\n      isFirst = false;\n    } else {\n      if (isWord) {\n      \
    \  isFirst = false;\n      } else {\n        isWord = true;\n        if (isSentence)\
    \ {\n          if (isFirst) {\n            if (S[i] == 'I') {\n              number++;\n\
    \            }\n          } else {\n            isFirst = true;\n          }\n\
    \        }\n      }\n    }\n  }\n  return number;", "  char bored = 'I';\n  char\
    \ delimit = '.';\n  char delimit2 = '?';\n  char delimit3 = '!';\n  long count\
    \ = 0;\n  for (size_t i = 0; i < S.length(); i++) {\n    if (S[i] == bored) {\n\
    \      count++;\n    }\n    if (S[i] == delimit || S[i] == delimit2 || S[i] ==\
    \ delimit3) {\n      bored = 'I';\n    }\n  }\n  return count;", "    std::string\
    \ temp;\n    std::istringstream iss(S);\n    long count = 0;\n    std::string\
    \ ch = \"\";\n    while(getline(iss,temp,'.')){\n        std::string word;\n \
    \       std::istringstream t(temp);\n        getline(t,word,' ');\n        if(word==\"\
    I\"){\n            count+=1;\n        }\n    }\n    return count;", "\tlong count\
    \ = 0;\n\tint i = 0;\n\twhile (i<S.length()) {\n\t\twhile (S[i] == ' ') {\n\t\t\
    \ti++;\n\t\t}\n\t\tint j = i;\n\t\twhile (S[j] != ' ' && S[j] != '.' && S[j] !=\
    \ '?' && S[j] != '!') {\n\t\t\tj++;\n\t\t}\n\t\tstd::string word = S.substr(i,\
    \ j - i);\n\t\tif (word == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t\ti = j;\n\t\tif\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ count;", "    long count = 0;\n    int n = S.length();\n    for(int i = 0; i\
    \ < n; i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n  \
    \  }\n    return count;", "  // your code goes here\n  // Split the string on\
    \ \".\" \"?\" \"!\"\n  std::vector<std::string> phrases;\n  char delimiter = '.';\n\
    \  size_t prev = 0, pos = 0;\n  do\n  {\n    pos = S.find(delimiter, prev);\n\
    \    if (pos == std::string::npos) pos = S.length();\n    std::string phrase =\
    \ S.substr(prev, pos-prev);\n    if (!phrase.empty()) phrases.push_back(phrase);\n\
    \    prev = pos + 1;\n  }\n  while (pos < S.length() && prev < S.length());\n\n\
    \  std::cout << \"Phrases\" << std::endl;\n  for (std::string s : phrases) {\n\
    \    std::cout << s << std::endl;\n  }\n\n  // Split each phrase on spaces.\n\
    \  std::vector<std::vector<std::string>> words;\n  for (std::string phrase : phrases)\
    \ {\n    std::vector<std::string> words_in_phrase;\n    char delimiter = ' ';\n\
    \    size_t prev = 0, pos = 0;\n    do\n    {\n      pos = phrase.find(delimiter,\
    \ prev);\n      if (pos == std::string::npos) pos = phrase.length();\n      std::string\
    \ word = phrase.substr(prev, pos-prev);\n      if (!word.empty()) words_in_phrase.push_back(word);\n\
    \      prev = pos + 1;\n    }\n    while (pos < phrase.length() && prev < phrase.length());\n\
    \    words.push_back(words_in_phrase);\n  }\n\n  std::cout << \"Words\" << std::endl;\n\
    \  for (std::vector<std::string> words_in_phrase : words) {\n    for (std::string\
    \ word : words_in_phrase) {\n      std::cout << word << std::endl;\n    }\n  }\n\
    \n  long boredom_count = 0;\n  for (std::vector<std::string> words_in_phrase :\
    \ words) {\n    if (words_in_phrase.", "    std::istringstream iss(S);\n    std::string\
    \ temp;\n    long count = 0;\n    while(iss >> temp) {\n        if(temp[0] ==\
    \ 'I') {\n            count++;\n        }\n    }\n    return count;", "  long\
    \ n = S.length();\n  int res = 0;\n  bool boring = false;\n  for (long i = 0;\
    \ i < n; i++) {\n    if (S[i] == 'I') boring = true;\n    if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') boring = false;\n    if (boring) res++;\n  }\n  return\
    \ res;", "  long result = 0;\n  std::stringstream ss(S);\n  std::string tok;\n\
    \  std::string my_delimiters = \".!?\";\n  bool bored = false;\n  while(getline(ss,\
    \ tok, ' ')) {\n    std::size_t found = tok.find_first_of(my_delimiters);\n  \
    \  if (found != std::string::npos) {\n      if (bored) {\n        result++;\n\
    \      }\n      bored = false;\n    }\n    if (tok == \"I\") {\n      bored =\
    \ true;\n    }\n  }\n  return result;", "  size_t index = S.find(\"I\");\n  size_t\
    \ n = S.length();\n  if (index == std::string::npos) {\n    return 0;\n  }\n \
    \ std::string word = S.substr(index, n - index);\n  size_t pos = 0;\n  if ((pos\
    \ = word.find(\".\")) != std::string::npos) {\n    word = word.substr(0, pos);\n\
    \  } else if ((pos = word.find(\"?\")) != std::string::npos) {\n    word = word.substr(0,\
    \ pos);\n  } else if ((pos = word.find(\"!\")) != std::string::npos) {\n    word\
    \ = word.substr(0, pos);\n  } else {\n    word = word.substr(0, n - index);\n\
    \  }\n  word.erase(std::remove(word.begin(), word.end(), ' '), word.end());\n\
    \  if (word.compare(\"I\") == 0) {\n    S.erase(index, word.length());\n    return\
    \ 1 + is_bored(S);\n  }\n  return is_bored(S);", "    long size=S.size();\n  \
    \  long ans=0;\n    std::stringstream str;\n    str<<S;\n    std::string tmp;\n\
    \    while(str>>tmp){\n        if(tmp[0]=='I'){\n            ans++;\n        }\n\
    \    }\n    return ans;", "    long boredoms = 0;\n    long i = 0;\n    while\
    \ (i < S.length()) {\n        if (S[i] == 'I') {\n            boredoms++;\n  \
    \          while (i < S.length() && S[i] != '.' && S[i] != '?' && S[i] != '!')\n\
    \                i++;\n        }\n        i++;\n    }\n    return boredoms;",
  "    std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::size_t\
    \ found;\n    found = S.find(\".\");\n    long boredom = 0;\n    while (found\
    \ != std::string::npos) {\n        S.replace(found, 1, \" \");\n        found\
    \ = S.find(\".\");\n    }\n    found = S.find(\"?\");\n    while (found != std::string::npos)\
    \ {\n        S.replace(found, 1, \" \");\n        found = S.find(\"?\");\n   \
    \ }\n    found = S.find(\"!\");\n    while (found != std::string::npos) {\n  \
    \      S.replace(found, 1, \" \");\n        found = S.find(\"!\");\n    }\n  \
    \  std::stringstream ss(S);\n    std::string token;\n    while (std::getline(ss,\
    \ token, ' ')) {\n        if (token == \"i\") {\n            boredom++;\n    \
    \    }\n    }\n    return boredom;", "  int i,count=0;\n  std::string temp,s;\n\
    \  std::stringstream stream(S);\n  while(getline(stream,temp,'.')){\n    std::stringstream\
    \ stream1(temp);\n    getline(stream1,s,' ');\n    if(s==\"I\")\n      count++;\n\
    \  }\n  return count;", "  long cnt = 0;\n  std::string delimiter = \"!?.\";\n\
    \  size_t pos = 0;\n  std::string token;\n  while ((pos = S.find(delimiter)) !=\
    \ std::string::npos) {\n    token = S.substr(0, pos);\n    if (token.find(\"I\"\
    ) == 0) {\n      cnt++;\n    }\n    S.erase(0, pos + delimiter.length());\n  }\n\
    \  if (S.find(\"I\") == 0) {\n    cnt++;\n  }\n  return cnt;", "    std::string\
    \ str=S;\n\tint a = 0;\n\tint b = 1;\n\tstd::string temp = \"I\";\n\twhile (b\
    \ < str.length()) {\n\t\tif (str[a] == '.' || str[a] == '?' || str[a] == '!')\
    \ {\n\t\t\tif (str[b] == 'I') {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\ta++;\n\
    \t\tb++;\n\t}\n\treturn 0;", "  int result = 0;\n  int len = S.length();\n  int\
    \ i = 0;\n  int j = 0;\n  for (i = 0; i < len; i++) {\n    for (j = i; j < len;\
    \ j++) {\n      if (S[j] == '.' || S[j] == '?' || S[j] == '!') {\n        if (S[i]\
    \ == 'I') {\n          result++;\n        }\n        i = j;\n        break;\n\
    \      }\n    }\n  }\n  return result;", "  std::istringstream buffer(S);\n  std::string\
    \ word;\n  int count = 0;\n  while (buffer >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;", "  std::stringstream stream(S);\n\
    \  std::string word;\n  long count = 0;\n  while (getline(stream, word, ' '))\
    \ {\n    if (word == \"I\") {\n      ++count;\n    }\n  }\n  return count;", "\t\
    if (S.empty()) return 0;\n\tlong bored = 0;\n\tfor (int i = 0; i < S.size(); i++)\
    \ {\n\t\tif (S[i] == 'I') {\n\t\t\tbored++;\n\t\t\twhile (S[i] != '!' && S[i]\
    \ != '.' && S[i] != '?') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn bored;",
  "    long count = 0;\n    std::stringstream check1(S);\n    std::string intermediate;\n\
    \    while(getline(check1, intermediate, '.'))\n    {\n        std::stringstream\
    \ check2(intermediate);\n        while(getline(check2, intermediate, '?'))\n \
    \       {\n            std::stringstream check3(intermediate);\n            while(getline(check3,\
    \ intermediate, '!'))\n            {\n                if(intermediate[0] == 'I')\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;", "    long count{0};\n    long index{0};\n\
    \    while (true) {\n        // find word I\n        index = S.find(\"I\", index);\n\
    \        if (index == std::string::npos) break;\n        // make sure that it\
    \ is at the start of the sentence\n        if (index == 0) {\n            count++;\n\
    \        } else if (S[index-1] == '.' || S[index-1] == '?' || S[index-1] == '!')\
    \ {\n            count++;\n        }\n        index++;\n    }\n    return count;",
  "  // split on the delimiters!\n  std::vector<std::string> words = split(S, {'.',\
    \ '?', '!'});\n  long boredoms = 0;\n  for (auto word : words) {\n    // check\
    \ if the first word is \"I\"\n    std::vector<std::string> my_words = split(word,\
    \ {' '});\n    if (my_words[0] == \"I\") {\n      boredoms++;\n    }\n  }\n  return\
    \ boredoms;", "    long nb_boredom = 0;\n    long nb_sentence = 0;\n    long nb_words\
    \ = 0;\n    std::istringstream iss(S);\n    std::string word;\n    while (iss\
    \ >> word) {\n        nb_words++;\n        if (word.compare(\"I\") == 0) {\n \
    \           nb_boredom++;\n        }\n        if (word.back() == '.' || word.back()\
    \ == '?' || word.back() == '!') {\n            nb_sentence++;\n        }\n   \
    \ }\n    if (nb_sentence > 0) {\n        assert(nb_sentence == nb_words);\n  \
    \  }\n    return nb_boredom;", "\tint i,cnt=0;\n\tfor(i=0;i<S.length();i++)\n\t\
    {\n\t\tif(S[i]=='I')\n\t\t{\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;", "    long\
    \ is_bored_count = 0;\n    auto start = 0;\n    std::vector<std::string> sentences;\n\
    \    for (auto i = 0; i < S.length(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            sentences.push_back(S.substr(start, i\
    \ - start));\n            start = i + 1;\n        }\n    }\n    for (auto sentence\
    \ : sentences) {\n        std::stringstream ss(sentence);\n        std::string\
    \ word;\n        ss >> word;\n        if (word == \"I\") {\n            is_bored_count++;\n\
    \        }\n    }\n    return is_bored_count;", "    // Your code here\n    long\
    \ count = 0;\n    std::istringstream ss(S);\n    std::string s;\n    while(std::getline(ss,\
    \ s, '.')){\n        std::istringstream sss(s);\n        std::string ss;\n   \
    \     if(std::getline(sss, ss, ' ')){\n            if(ss == \"I\"){\n        \
    \        count++;\n            }\n        }\n    }\n    return count;", "    std::istringstream\
    \ iss(S);\n    std::string S2;\n    long boredoms = 0;\n    while (std::getline(iss,\
    \ S2, '.'))\n    {\n        int start = S2.find(\"I\");\n        if (start ==\
    \ 0)\n        {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "  std::string pattern=\"I\";\n  long count = 0;\n  for(int i=0;i<S.length();i++)\n\
    \  {\n    for(int j=0;j<pattern.length();j++)\n    {\n      if(S[i+j]==pattern[j])\n\
    \      {\n        if(j==pattern.length()-1)\n        {\n          count++;\n \
    \       }\n      }\n      else\n      {\n        break;\n      }\n    }\n  }\n\
    \  return count;", "\tlong count = 0;\n\tstd::istringstream ss(S);\n\tstd::string\
    \ token;\n\tstd::string sentence;\n\twhile (std::getline(ss, token, '.'))\n\t\
    {\n\t\tsentence = token;\n\t\twhile (std::getline(ss, token, '?'))\n\t\t{\n\t\t\
    \tsentence += token;\n\t\t}\n\t\tif (sentence.find(\"I\") == 0)\n\t\t{\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;", "  long counter = 0;\n  for (int i = 0;\
    \ i < S.length(); i++) {\n    if (S[i] == 'I') {\n      i += 2;\n      counter++;\n\
    \    }\n  }\n  return counter;", "   int i=0,j=0,c=0;\n    while(i<S.length())\n\
    \    {\n        while(i<S.length() && S[i]!='.')\n        {\n            if(S[i]=='\
    \ ')\n            {\n                j=i+1;\n                if(S[j]=='I')\n \
    \               {\n                    c++;\n                }\n            }\n\
    \            i++;\n        }\n        if(S[i]=='.')\n        {\n            i=i+2;\n\
    \        }\n    }\n    return c;", "    long boredoms = 0;\n    int length = S.length();\n\
    \    int i = 0;\n    int count = 0;\n    while(i < length){\n        if(S[i] ==\
    \ 'I'){\n            if(S[i+1] == ' '){\n                boredoms = boredoms +\
    \ 1;\n            }\n        }\n        i++;\n    }\n    return boredoms;", " \
    \ // Your code here\n  std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n\
    \  std::string delimiters = \"?!.\";\n  std::string token;\n  size_t prev = 0,\
    \ pos;\n  long count = 0;\n  while ((pos = S.find_first_of(delimiters, prev))\
    \ != std::string::npos) {\n    if (pos > prev) {\n      token = S.substr(prev,\
    \ pos - prev);\n      if (token.at(0) == 'i') {\n        count++;\n      }\n \
    \   }\n    prev = pos + 1;\n  }\n  if (prev < S.length()) {\n    token = S.substr(prev,\
    \ std::string::npos);\n    if (token.at(0) == 'i') {\n      count++;\n    }\n\
    \  }\n  return count;", "    int boredoms = 0;\n    std::stringstream words(S);\n\
    \    std::string first;\n    while (words >> first) {\n        if (first == \"\
    I\")\n            boredoms++;\n    }\n    return boredoms;", "    std::istringstream\
    \ is(S);\n    std::string word;\n    int count = 0;\n    while (is >> word) {\n\
    \        if (word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;", "  std::stringstream stream(S);\n  std::string word;\n  int count =\
    \ 0;\n  while (stream >> word) {\n    if (word == \"I\") {\n      count++;\n \
    \   }\n  }\n  return count;", "\tint n = S.length();\n\tstd::string temp = \"\"\
    ;\n\tlong count = 0;\n\tint i = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tif (temp.length() > 0) {\n\t\t\
    \t\tif (temp[0] == 'I') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\ttemp = \"\"\
    ;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttemp = temp + S[i];\n\t\t}\n\t}\n\tif (temp.length()\
    \ > 0) {\n\t\tif (temp[0] == 'I') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
  "\treturn std::count(S.begin(), S.end(), 'I');", "  int i = 0;\n  int count = 0;\n\
    \  int k = 0;\n  for (int j = 0; j < S.length(); j++) {\n    if (S[j] == '.' ||\
    \ S[j] == '?' || S[j] == '!') {\n      i = j;\n      if (S[k] == 'I') {\n    \
    \    count++;\n      }\n      k = i + 2;\n    }\n  }\n  return count;", "    //\
    \ TODO\n    int count = 0;\n    int index = 0;\n    for(int i = 0; i < S.length();\
    \ i++){\n        if(S[i] == 'I'){\n            count++;\n        }\n    }\n  \
    \  return count;", "    long ans = 0;\n    long count = 0;\n    // char ch = 'I';\n\
    \    for(char &c : S) {\n        if(c == 'I') {\n            count = 0;\n    \
    \        for(int i = 1; i < S.length(); i++) {\n                if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n                    count++;\n           \
    \     }\n            }\n            // printf(\"%d\\n\", count);\n           \
    \ ans += count;\n        }\n    }\n    return ans;", "\t\n\tlong c = 0;\n\tlong\
    \ l = S.length();\n\tstd::string t = \"\";\n\tfor (long i = 0; i < l; i++) {\n\
    \t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tt = \"\";\n\t\t}\n\
    \t\telse if (S[i] == ' ') {\n\t\t\tif (t == \"I\")\n\t\t\t\tc++;\n\t\t\tt = \"\
    \";\n\t\t}\n\t\telse {\n\t\t\tt += S[i];\n\t\t}\n\t}\n\tif (t == \"I\")\n\t\t\
    c++;\n\treturn c;", "  long boredoms = 0;\n  std::vector<std::string> words;\n\
    \  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word) {\n\
    \    words.push_back(word);\n  }\n  for (long i = 0; i < words.size(); i++) {\n\
    \    if (words[i] == \"I\") {\n      if (i == 0 || !((words[i - 1][words[i - 1].size()\
    \ - 1] == '.') ||\n                      (words[i - 1][words[i - 1].size() - 1]\
    \ == '?') ||\n                      (words[i - 1][words[i - 1].size() - 1] ==\
    \ '!'))) {\n        boredoms++;\n      }\n    }\n  }\n  return boredoms;", " \
    \   std::stringstream ss(S);\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    while (std::getline(ss, token, '.')) {\n        tokens.push_back(token);\n\
    \    }\n    std::cout << \"Size = \" << tokens.size() << std::endl;\n    for (auto\
    \ it = tokens.begin(); it != tokens.end(); ++it) {\n        std::cout << *it <<\
    \ std::endl;\n    }\n    int count = 0;\n    std::vector<std::string>::iterator\
    \ it = tokens.begin();\n    std::string first_word = *it;\n    int j = 0;\n  \
    \  while (first_word[j] == ' ') {\n        j++;\n    }\n    if (first_word[j]\
    \ == 'I') {\n        count++;\n    }\n    return count;", "    int pos = 0;\n\
    \    std::string sentence;\n    long cnt = 0;\n    while(true) {\n        pos\
    \ = S.find_first_of(\".!?\");\n        sentence = S.substr(0, pos);\n        if(pos\
    \ != -1) {\n            if(sentence.compare(0, 2, \"I \") == 0) {\n          \
    \      cnt++;\n            }\n            S = S.substr(pos + 1);\n        } else\
    \ {\n            if(sentence.compare(0, 2, \"I \") == 0) {\n                cnt++;\n\
    \            }\n            break;\n        }\n    }\n    return cnt;", "    //\
    \ your code here\n    long count = 0;\n    char previous = ' ';\n    for(int i\
    \ = 0; i < S.length(); i++){\n        if(S[i] == ' ' || S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!'){\n            if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n\
    \                previous = S[i];\n            }\n            if(S[i-1] == 'I'\
    \ && previous == ' '){\n                count++;\n            }\n        }\n \
    \   }\n    return count;", "    if(S.empty()) {\n        return 0;\n    }\n  \
    \  long cnt = 0;\n    int prev = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if(S[prev]\
    \ == 'I') {\n                cnt++;\n            }\n            prev = i + 2;\n\
    \        }\n    }\n    return cnt;", "    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::regex regex (\"I\");\n    long count = std::count_if(S.begin(),\
    \ S.end(),\n            [&regex](std::string::value_type c) {\n              \
    \  return regex_match(std::string(1, c), regex);\n            });\n    return\
    \ count;", "    return std::count(S.begin(), S.end(), 'I');", "  int num = 0;\n\
    \  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word) {\n\
    \    if (word == \"I\") {\n      num++;\n    }\n  }\n  return num;", "    return\
    \ std::count(S.begin(), S.end(), 'I');", "    int boredoms=0;\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]=='I')\n            boredoms++;\n    }\n    return boredoms;",
  "  long count = 0;\n  std::stringstream ss(S);\n  std::string item;\n  while (std::getline(ss,\
    \ item, '.')) {\n    if (item[0] == 'I') count++;\n  }\n  return count;", "  \
    \  std::string t = \"I\";\n    long count = 0;\n    long found = S.find(t);\n\
    \    while (found != std::string::npos) {\n        if (found == 0) {\n       \
    \     count++;\n        } else if (S[found - 1] == '.' || S[found - 1] == '?'\
    \ || S[found - 1] == '!') {\n            count++;\n        }\n        found =\
    \ S.find(t, found + 1);\n    }\n    return count;", "    long x = 0;\n    std::regex\
    \ pattern(\"[.]|[?]|[!]\");\n    std::sregex_token_iterator it(S.begin(), S.end(),\
    \ pattern, -1);\n    std::sregex_token_iterator reg_end;\n    std::vector<std::string>\
    \ tokens(it, reg_end);\n    for (long i = 0; i < tokens.size(); i++) {\n     \
    \   if (tokens[i][0] == 'I') {\n            x++;\n        }\n    }\n    return\
    \ x;", "  //your code here\n  long count = 0;\n  int len = S.length();\n  std::istringstream\
    \ iss(S);\n  std::string s;\n  while(std::getline(iss, s, '.')){\n    len = s.length();\n\
    \    std::string t = s.substr(0, len-1);\n    if(s[0] == 'I'){\n      count +=\
    \ 1;\n    }\n  }\n  if(len > 0 && S[len-1] == 'I'){\n    count += 1;\n  }\n  return\
    \ count;", "  long n = S.length();\n  long count = 0;\n  for (long i = 0; i <\
    \ n; i++) {\n    if (S[i] == 'I') {\n      if (i == 0) {\n        count++;\n \
    \     } else if (S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n  \
    \      count++;\n      }\n    }\n  }\n  return count;", "    int boredoms = 0;\n\
    \    std::istringstream iss(S);\n    std::string word;\n    while (iss >> word)\
    \ {\n        if (word == \"I\") {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;", "    long n = S.length();\n    long count = 0;\n    long\
    \ isSentence = 0;\n    for (long i = 0; i < n; i++) {\n        if (S[i] == ' ')\
    \ {\n            continue;\n        } else if (S[i] == 'I') {\n            count++;\n\
    \            isSentence = 1;\n        } else if (S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!') {\n            isSentence = 0;\n        } else {\n            isSentence\
    \ = 1;\n        }\n    }\n    return count;", "    std::vector<std::string> words;\n\
    \    words = _split(S, '.');\n    std::string::size_type i = 0;\n    std::string::size_type\
    \ j = 0;\n    long boredom = 0;\n    for (int i = 0; i < words.size(); i++) {\n\
    \        for (int j = 0; j < words[i].size(); j++) {\n            std::string\
    \ space = words[i].substr(j, 1);\n            if ((words[i].substr(j, 1) == \"\
    \ \") || (words[i].substr(j, 1) == \"I\")) {\n                // std::cout <<\
    \ \"hello\" << std::endl;\n                // std::cout << words[i].substr(j,\
    \ 1) << std::endl;\n                std::string word = words[i].substr(j + 1,\
    \ 1);\n                if (word == \"a\" || word == \"b\" || word == \"c\" ||\
    \ word == \"d\" || word == \"e\" || word == \"f\" || word == \"g\" || word ==\
    \ \"h\" || word == \"i\" || word == \"j\" || word == \"k\" || word == \"l\" ||\
    \ word == \"m\" || word == \"n\" || word == \"o\" || word == \"p\" || word ==\
    \ \"q\" || word == \"r\" || word == \"s\" || word == \"t\" || word == \"u\" ||\
    \ word == \"v\" || word == \"w\" || word == \"x\" || word == \"y\" || word ==\
    \ \"z\") {\n                    boredom++;\n                }\n            }\n\
    \        }\n    }\n    // std::cout << words.size() << std::endl;\n    // std::cout\
    \ << boredom << std::endl;\n    return boredom;", "    long boredoms = 0;\n  \
    \  bool isBored = false;\n    for (int i = 0; i < S.length(); i++) {\n       \
    \ if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (isBored) {\n\
    \                boredoms++;\n            }\n            isBored = false;\n  \
    \      } else if (S[i] == 'I') {\n            isBored = true;\n        }\n   \
    \ }\n    return boredoms;", "    long boredoms = 0;\n    std::string current =\
    \ \"\";\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        current\
    \ += *it;\n        if (*it == '.' || *it == '?' || *it == '!') {\n           \
    \ if (current.find(\"I\") == 0) {\n                boredoms++;\n            }\n\
    \            current = \"\";\n        }\n    }\n    return boredoms;", "    //\
    \ split by '.', '?', '!'\n    std::regex regex(\"[!.?]\");\n    std::sregex_token_iterator\n\
    \        first{S.begin(), S.end(), regex, -1},\n        last;\n    std::vector<std::string>\
    \ splitted_string(first, last);\n    // count I\n    std::string str = \"I\";\n\
    \    long count = 0;\n    for (int i = 0; i < splitted_string.size(); i++) {\n\
    \        // std::cout << splitted_string[i] << '\\n';\n        if (splitted_string[i].find(str)\
    \ == 0) {\n            count += 1;\n        }\n    }\n    return count;", "  \
    \  long boredoms = 0;\n    std::string temp = \"\";\n    int i = 0;\n    while(i<=S.length()){\n\
    \        if(S[i]!='.'&&S[i]!='?'&&S[i]!='!'){\n            temp+=S[i];\n     \
    \   }\n        else{\n            std::stringstream ss(temp);\n            std::vector<std::string>\
    \ vec;\n            std::string word;\n            while(ss>>word){\n        \
    \        vec.push_back(word);\n            }\n            if(vec[0]==\"I\"){\n\
    \                boredoms++;\n            }\n            temp = \"\";\n      \
    \  }\n        i++;\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  std::istringstream ss(S);\n    std::string word;\n    while (ss >> word) {\n\
    \        if (word == \"I\")\n            boredoms++;\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::istringstream iss(S);\n    std::string s;\n  \
    \  while (std::getline(iss, s, '.')) {\n        if (s.substr(0, 2) == \"I \")\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;", "  return\
    \ std::count(S.begin(), S.end(), 'I');", "    std::vector<std::string> strs;\n\
    \    std::stringstream ss(S);\n    std::string temp;\n    long count = 0;\n  \
    \  while(getline(ss, temp, '.')) {\n        strs.push_back(temp);\n    }\n   \
    \ for(auto s : strs) {\n        if(s.substr(0, 2) == \"I \") {\n            count++;\n\
    \        }\n    }\n    return count;", "// Write your code here\n    long ans\
    \ = 0;\n    long start_pos = 0;\n    while(start_pos<S.length()){\n        long\
    \ i = start_pos;\n        while(i<S.length() && S[i]!='.' && S[i]!='?' && S[i]!='!'){\n\
    \            i++;\n        }\n        std::string first_word = S.substr(start_pos,i-start_pos);\n\
    \        if(first_word==\"I\"){\n            ans++;\n        }\n        if(i==S.length()){\n\
    \            break;\n        }\n        start_pos = i+1;\n    }\n    return ans;",
  "  // Your code goes here\n  long res = 0;\n  std::vector<std::string> v;\n  std::string\
    \ temp = \"\";\n  for(long i = 0; i < S.length(); i++){\n    if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!'){\n      v.push_back(temp);\n      temp = \"\";\n\
    \    }\n    else\n      temp += S[i];\n  }\n  for(long i = 0; i < v.size(); i++){\n\
    \    if(v[i].substr(0,2) == \"I \")\n      res++;\n  }\n  return res;", "    //\
    \ Your code here.\n    std::vector<std::string> answer;\n    std::string word;\n\
    \    std::stringstream s(S);\n    int count = 0;\n    while(s >> word){\n    \
    \    answer.push_back(word);\n    }\n    for(int i = 0; i < answer.size(); i++){\n\
    \        if(answer[i] == \"I\"){\n            count += 1;\n        }\n    }\n\
    \    return count;", "    // TODO: implement this function\n    return count(S.begin(),\
    \ S.end(), 'I');", "  int boredoms=0;\n  std::string my_string;\n  std::istringstream\
    \ iss(S);\n  while(getline(iss,my_string,' '))\n  {\n    if(my_string[0]=='I')\n\
    \    {\n      boredoms++;\n    }\n  }\n  return boredoms;", "    int count = 0;\n\
    \    std::istringstream iss(S);\n    std::string word;\n    std::vector<std::string>\
    \ words;\n    while (iss >> word) {\n        if (word.length() > 0)\n        \
    \    words.push_back(word);\n    }\n    for (std::vector<std::string>::iterator\
    \ it = words.begin(); it != words.end(); ++it) {\n        if (*it == \"I\")\n\
    \            count++;\n    }\n    return count;", "  std::stringstream ss(S);\n\
    \  std::string item;\n  long line_count = 0;\n  while (std::getline(ss, item,\
    \ '.')) {\n    if (item.size() > 1 && item[0] == 'I') {\n      line_count++;\n\
    \    }\n  }\n  return line_count;", "    int len = S.length();\n    int i, bored\
    \ = 0;\n    for(i = 0; i < len; ++i) {\n        if(S[i] == 'I')\n            if(S[i+1]\
    \ == ' ')\n                bored++;\n    }\n    return bored;", "    bool first_word_cap\
    \ = false;\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n \
    \       if(i == 0) {\n            first_word_cap = (S[i] >= 'A' && S[i] <= 'Z');\n\
    \        }\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n   \
    \         if(first_word_cap)\n                count++;\n            i++;\n   \
    \         first_word_cap = (S[i] >= 'A' && S[i] <= 'Z');\n        }\n        else\
    \ if(S[i] == ' ') {\n            first_word_cap = (S[i+1] >= 'A' && S[i+1] <=\
    \ 'Z');\n        }\n    }\n    return count;", "    // your code here\n    //\
    \ return a long value\n    long count = 0;\n    std::string str = \"\";\n    for(int\
    \ i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!'){\n            if(str[0] == 'I'){\n                count++;\n       \
    \     }\n            str = \"\";\n        }\n        else if(S[i] == ' '){\n \
    \           continue;\n        }\n        else{\n            str += S[i];\n  \
    \      }\n    }\n    return count;", "    // Your code here\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    long boredoms = 0;\n    std::getline(ss,\
    \ word, '.');\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i]\
    \ == '?' || word[i] == '!') {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;", "    long count=0;\n    std::string s;\n    std::stringstream\
    \ sst(S);\n    std::vector<std::string> v;\n    while(std::getline(sst,s,'.'))\n\
    \        v.push_back(s);\n    for(auto s:v)\n    {\n        std::stringstream\
    \ ss(s);\n        std::string s2;\n        std::vector<std::string> v2;\n    \
    \    while(std::getline(ss,s2,' '))\n            v2.push_back(s2);\n        if(v2[0]==\"\
    I\")\n            count++;\n    }\n    return count;", "    long c = 0;\n    bool\
    \ l = false;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            l = false;\n        }\n      \
    \  if(S[i] == 'I' && !l) {\n            c++;\n            l = true;\n        }\n\
    \    }\n    return c;", "    // your code here\n    int boredoms = 0;\n    std::istringstream\
    \ sentence(S);\n    std::string word;\n    while (sentence >> word) {\n      \
    \  if (word == \"I\")\n            boredoms++;\n    }\n    return boredoms;",
  "    long count = 0;\n    if(S[0] == 'I'){\n        count += 1;\n    }\n    for(int\
    \ i = 0; i < S.length(); i++){\n        if(S[i] == 'I' && (S[i+1] == '.' || S[i+1]\
    \ == '?' || S[i+1] == '!')){\n            count += 1;\n        }\n    }\n    return\
    \ count;", "    int boredoms = 0;\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    while (std::getline(ss, word, '.')) {\n        if (word.find(\"I\"\
    ) == 0)\n            boredoms++;\n    }\n    return boredoms;", "    std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(S);\n    std::string temp;\n    long count=0;\n    while(getline(ss, temp,\
    \ '.')) {\n        v.push_back(temp);\n    }\n    for(long i=0; i<v.size(); i++)\
    \ {\n        std::vector<std::string> v1;\n        std::stringstream ss1(v[i]);\n\
    \        std::string temp1;\n        while(getline(ss1, temp1, ' ')) {\n     \
    \       v1.push_back(temp1);\n        }\n        if(v1[0] == \"i\") {\n      \
    \      count++;\n        }\n    }\n    return count;", "    long total = 0;\n\
    \    bool bored = false;\n    for (size_t i = 0; i < S.size(); i++) {\n      \
    \  if (S[i] == 'I') {\n            bored = true;\n        }\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            if (bored) {\n        \
    \        total++;\n            }\n            bored = false;\n        }\n    }\n\
    \    return total;", "  // Write your code here\n  long result = 0;\n  std::string\
    \ word = \"\";\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == ' ')\
    \ {\n      if (word == \"I\") {\n        result++;\n      }\n      word = \"\"\
    ;\n    } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      if (word\
    \ == \"I\") {\n        result++;\n      }\n      word = \"\";\n    } else {\n\
    \      word += S[i];\n    }\n  }\n  return result;", "    std::stringstream ss(S);\n\
    \    long count = 0;\n    std::string word;\n    while (ss >> word) {\n      \
    \  if (word == \"I\") {\n            count++;\n        }\n    }\n    return count;",
  "    long count=0;\n    long n=S.length();\n    long i=0;\n    while(i<n)\n    {\n\
    \        while(i<n && S[i]!='I')\n        {\n            i++;\n        }\n   \
    \     i++;\n        if(i<n && S[i]==' ')\n        {\n            count++;\n  \
    \      }\n        while(i<n && S[i]!='.' && S[i]!='?' && S[i]!='!')\n        {\n\
    \            i++;\n        }\n        i++;\n    }\n    return count;", "    //\
    \ your code here...\n    std::stringstream stream(S);\n    std::string sentence;\n\
    \    int count = 0;\n    while(std::getline(stream, sentence, '.')) {\n      \
    \  std::string token;\n        std::stringstream check_first_word(sentence);\n\
    \        std::getline(check_first_word, token, ' ');\n        if(token == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;", "\tstd::stringstream\
    \ ss(S);\n\tstd::string temp;\n\tlong long int flag = 0;\n\tlong long int count\
    \ = 0;\n\twhile (ss >> temp) {\n\t\tif (temp == \"I\") {\n\t\t\tflag = 1;\n\t\t\
    }\n\t\tif (temp == \".\" || temp == \"?\" || temp == \"!\") {\n\t\t\tif (flag\
    \ == 1) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t\tflag = 0;\n\t\t}\n\t}\n\treturn\
    \ count;", "\tint bored = 0;\n\tstd::stringstream ss(S);\n\tstd::string temp;\n\
    \twhile (ss >> temp) {\n\t\tif (temp == \"I\") {\n\t\t\tbored++;\n\t\t}\n\t}\n\
    \treturn bored;", "  std::regex r(R\"(^I\\b)\");\n  return std::distance(std::sregex_iterator(S.begin(),\
    \ S.end(), r),\n                       std::sregex_iterator());", "    long ans=0;\n\
    \    bool bored=false;\n    for(long i=0;i<S.length();i++){\n        if(bored){\n\
    \            if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n                bored=false;\n\
    \            }\n        }else{\n            if(S[i]=='I'){\n                bored=true;\n\
    \                ans++;\n            }\n        }\n    }\n    return ans;", " \
    \ int c = 0;\n  std::vector<std::string> words;\n  std::istringstream iss(S);\n\
    \  for (std::string S; iss >> S;)\n      words.push_back(S);\n  for (int i = 0;\
    \ i < words.size(); i++) {\n    if (words[i] == \"I\") {\n      c++;\n    }\n\
    \  }\n  return c;", "    std::stringstream ss(S);\n    long num = 0;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"I\") {\n            num++;\n\
    \        }\n    }\n    return num;", "    // split the string by ' '\n    // count\
    \ the number of words starting with 'I'\n    long count = 0;\n    std::istringstream\
    \ ss(S);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        //std::cout << token << std::endl;\n        if (token[0] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long n = S.length();\n\
    \    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (S[i] ==\
    \ 'I')\n            count++;\n    }\n    return count;", "    std::stringstream\
    \ sstream(S);\n    long count=0;\n    std::string word;\n    while(sstream >>\
    \ word)\n    {\n        if(word==\"I\")\n        {\n            count++;\n   \
    \     }\n    }\n    return count;", "  long ret = 0;\n  char prev = '0';\n  for\
    \ (char& c : S) {\n    if (c == 'I' && prev == ' ') {\n      ret++;\n    }\n \
    \   prev = c;\n  }\n  return ret;", "    std::regex reg_exp(\"I.+\");\n    std::smatch\
    \ matches;\n    long count = 0;\n    while (std::regex_search(S, matches, reg_exp))\
    \ {\n        count++;\n        S = matches.suffix().str();\n    }\n    return\
    \ count;", "    long boredoms = 0;\n    int i = 0;\n    while (i < S.length())\
    \ {\n        if (S[i] == 'I') {\n            while (i < S.length() && (S[i] !=\
    \ '!' && S[i] != '.' && S[i] != '?')) {\n                i++;\n            }\n\
    \            boredoms++;\n        }\n        i++;\n    }\n    return boredoms;",
  "\tlong count = 0;\n\tchar *str=new char[S.length()+1];\n\tstrcpy(str,S.c_str());\n\
    \tchar *tok = strtok(str, \" .\");\n\twhile (tok != NULL) {\n\t\tstd::string tokStr(tok);\n\
    \t\tif (tokStr.compare(\"I\") == 0)\n\t\t\tcount++;\n\t\ttok = strtok(NULL, \"\
    \ .\");\n\t}\n\treturn count;", "\tlong count = 0;\n\tsize_t pos = S.find(\".\"\
    );\n\tif (pos != std::string::npos) {\n\t\tsize_t pos1 = S.find(\"I\");\n\t\t\
    if (pos1 != std::string::npos && pos1 < pos) {\n\t\t\tcount = 1;\n\t\t}\n\t\t\
    size_t pos2 = S.find(\"?\");\n\t\tif (pos2 != std::string::npos && pos2 < pos)\
    \ {\n\t\t\tcount = 1;\n\t\t}\n\t\tsize_t pos3 = S.find(\"!\");\n\t\tif (pos3 !=\
    \ std::string::npos && pos3 < pos) {\n\t\t\tcount = 1;\n\t\t}\n\t}\n\treturn count;",
  "  std::istringstream is(S);\n  std::string word;\n  std::vector<std::string> Sentence;\n\
    \  while (is >> word) {\n    Sentence.push_back(word);\n  }\n  int bored = 0;\n\
    \  for (int i = 0; i < Sentence.size(); i++) {\n    if (Sentence[i] == \"I\")\
    \ {\n      bored++;\n    }\n  }\n  return bored;", "\tlong count = 0;\n\tfor (int\
    \ i = 0; i < S.length(); i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;", "    bool find_I = false;\n    long cnt = 0;\n    std::string\
    \ word;\n    std::stringstream ss(S);\n    while (ss >> word) {\n        if (word\
    \ == \"I\") {\n            cnt++;\n        }\n    }\n    return cnt;", "    long\
    \ count{0};\n    std::string str=\"\";\n    std::stringstream ss(S);\n    while(ss>>str){\n\
    \        if(str==\"I\") count++;\n    }\n    return count;", "    long boredoms\
    \ = 0;\n    std::istringstream iss(S);\n    std::string token;\n    std::cout\
    \ << S << std::endl;\n    while (std::getline(iss, token, '.')) {\n        if\
    \ (token[0] == 'I') {\n            boredoms++;\n        }\n    }\n    return boredoms;"]
stop_tokens:
- "\n}"
