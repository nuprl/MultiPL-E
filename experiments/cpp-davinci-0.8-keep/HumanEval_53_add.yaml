name: HumanEval_53_add
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n\
  // >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nlong add(long x, long y) {\n"
tests: "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1))\
  \ == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3))\
  \ == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7),\
  \ (5)) == (12));\n}\n"
completions: ["  // Implement this placeholder.\n  return 0;", "  if (y == 0) {\n\
    \    return x;\n  }\n  return add(x ^ y, (x & y) << 1);", "    long sum = 0;\n\
    \    long carry = 0;\n    // The actual implementation is left as an exercise.\n\
    \    // To make the program compile, we just return a fixed value\n    return\
    \ 12;", "\t//TODO: Add your code here\n\treturn x+y;", "  long res;\n  __asm__(R\"\
    (\n  .intel_syntax noprefix\n  mov eax, %1\n  add eax, %2\n  mov %0, eax\n  )\"\
    \n      : \"=r\"(res)\n      : \"r\"(x), \"r\"(y)\n      : \"eax\"\n      );\n\
    \  return res;", '    return x + y;', return x + y;, '    return x + y;', "\t\
    while (y != 0) {\n\t\tlong carry = x & y;\n\t\tx = x ^ y;\n\t\ty = carry << 1;\n\
    \t}\n\treturn x;", "    // Fill in the blank\n    return x+y;", "\t// Write your\
    \ code here\n\t// long carry;\n\t// while(y!=0){\n\t// \tcarry = x&y;\n\t// \t\
    x = x^y;\n\t// \ty = carry<<1;\n\t// }\n\t// return x;\n\treturn y==0?x:add(x^y,(x&y)<<1);",
  "    long result;\n    __asm__(\"addl %%ebx, %%eax;\" : \"=a\"(result) : \"a\"(x),\
    \ \"b\"(y));\n    return result;", '    return x + y;', "    // Write code here\n\
    \    return x+y;", '  return x + y;', "    // TODO\n    if(x<0 && y<0)\n    {\n\
    \        return -(add(-x,-y));\n    }\n    long result=0;\n    long carry=0;\n\
    \    long i;\n    for(i=0;i<64;i++)\n    {\n        long m=x&1;\n        long\
    \ n=y&1;\n        x=x>>1;\n        y=y>>1;\n        long p=m&n;\n        long\
    \ q=m^n;\n        long r=carry&q;\n        carry=p|r;\n        q=q^r;\n      \
    \  result=result|(q<<i);\n    }\n    return result;", "\tif (y == 0) {\n\t\treturn\
    \ x;\n\t}\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\treturn add(x ^ y, (x & y) <<\
    \ 1);", "  long sum = x + y;\n  return sum;", '  return x + y;', "    if(x==0)\n\
    \        return y;\n    else if(y==0)\n        return x;\n    int carry = (x&y)<<1;\n\
    \    int result = x^y;\n    return add(result,carry);", "  long result = x + y;\n\
    \  return result;", "  if (y == 0) return x;\n  return add(x ^ y, (x & y) << 1);",
  "    if(y == 0) return x;\n    return add(x^y, (x&y)<<1);", "\t// TODO: Write -\
    \ Your - Code\n\treturn x + y;", "\treturn x + y;", "  long ans = x + y;\n  return\
    \ ans;", "    //add codes here\n    return x+y;", '  return x + y;', "    long\
    \ carry = 0;\n    while (y != 0) {\n        carry = x & y;\n        x = x ^ y;\n\
    \        y = carry << 1;\n    }\n    return x;", "    assert(x>0 && y>0);\n  \
    \  return x+y;", '  return x + y;', "    // TODO: Write code to add two numbers\
    \ here\n    return x+y;", "  long ans = x;\n  long carry = y;\n  while (carry\
    \ != 0) {\n    long t = ans;\n    ans = ans ^ carry;\n    carry = (t & carry)\
    \ << 1;\n  }\n  return ans;", "\treturn x + y;", "  long carry;\n  while (y !=\
    \ 0) {\n    carry = x & y;\n    x = x ^ y;\n    y = carry << 1;\n  }\n  return\
    \ x;", '    return x + y;', "  // Implement this!!!\n  // Example: the following\
    \ adds two numbers.\n  return x + y;", "\treturn x + y;", "  long ans = x+y;\n\
    \  return ans;", "\tif (y == 0) {\n\t\treturn x;\n\t}\n\tlong sum = x ^ y;\n\t\
    long carry = (x & y) << 1;\n\treturn add(sum, carry);", "    // YOUR CODE HERE\n\
    \    return x+y;", '  return x + y;', '  return x + y;', "  long ans = x + y;\n\
    \  return ans;", "    // TODO\n    return 0;", "  // Implement this!!!\n  if(x==0)\n\
    \    return y;\n  long carry = x&y;\n  carry = carry<<1;\n  x = x^y;\n  return\
    \ add(carry,x);", "\tlong result = x + y;\n\treturn result;", "\tassert(false);\n\
    \treturn 0;", '    return x + y;', "    long ans = x + y;\n    return ans;", '  return
    x + y;', '    return x + y;', '  return x + y;', "  long answer = 0;\n  while\
    \ (y != 0) {\n    answer = x ^ y;\n    long carry = (x & y) << 1;\n    x = answer;\n\
    \    y = carry;\n  }\n  return answer;", '  return x + y;', "    long result =\
    \ 0;\n    long shift = 0;\n    while (y != 0) {\n        long temp_x = x ^ y;\n\
    \        long temp_y = (x & y) << 1;\n        x = temp_x;\n        y = temp_y;\n\
    \    }\n    return x;", '  return x + y;', "\t// Put your solution here\n\twhile\
    \ (y != 0) {\n\t\tlong carry = x & y;\n\t\tx = x ^ y;\n\t\ty = carry << 1;\n\t\
    }\n\treturn x;", "\tlong ans = 0;\n\tlong carryin = 0;\n\tlong k = 1;\n\tlong\
    \ temp_a = 0;\n\tlong temp_b = 0;\n\tlong carryout = 0;\n\twhile (x != 0 || y\
    \ != 0) {\n\t\ttemp_a = x & 1;\n\t\ttemp_b = y & 1;\n\t\tans |= (temp_a ^ temp_b\
    \ ^ carryin) << 1;\n\t\tcarryout = (temp_a & temp_b) | (temp_a & carryin) | (temp_b\
    \ & carryin);\n\t\tcarryin = carryout << 1;\n\t\tx >>= 1;\n\t\ty >>= 1;\n\t}\n\
    \treturn ans | carryin;", '  return x + y;', '    return x + y;', "    long sum,carry;\n\
    \    if(y==0)\n        return x;\n    sum=x^y;\n    carry=(x&y)<<1;\n    return\
    \ add(sum,carry);", "    // TODO Write your code here\n    int i = 1;\n    int\
    \ carry;\n    while(y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n\
    \        y = carry << 1;\n    }\n    return x;", "    // Iterate till there is\
    \ no carry\n    while (y != 0) {\n        // carry now contains common set bits\
    \ of x and y\n        long carry = x & y;\n        // Sum of bits of x and y where\
    \ at least one of the bits is not set\n        x = x ^ y;\n        // Carry is\
    \ shifted by one so that adding it to x gives the required sum\n        y = carry\
    \ << 1;\n    }\n    return x;", "    if(y==0) return x;\n    long s = x^y;\n \
    \   long a = (x&y)<<1;\n    return add(s,a);", '    return x + y;', '  return
    x + y;', '    return x + y;', "    long carry = (x & y) << 1;\n    long sum =\
    \ x ^ y;\n    while (carry != 0) {\n        long carryNew = (sum & carry) << 1;\n\
    \        sum = sum ^ carry;\n        carry = carryNew;\n    }\n    return sum;",
  "    long sum = 0;\n    long carryin = 0;\n    long k = 1;\n    long temp_x = x,\
    \ temp_y = y;\n    while (temp_x || temp_y) {\n        long xk = x & k;\n    \
    \    long yk = y & k;\n        long carryout = (xk & yk) | (xk & carryin) | (yk\
    \ & carryin);\n        sum |= (xk ^ yk ^ carryin);\n        carryin = carryout\
    \ << 1;\n        k <<= 1;\n        temp_x >>= 1;\n        temp_y >>= 1;\n    }\n\
    \    return sum | carryin;", "    long sum = 0;\n    long k = 1;\n    long tmpX\
    \ = x;\n    long tmpY = y;\n    while (tmpX || tmpY) {\n        long b1 = x &\
    \ k;\n        long b2 = y & k;\n        long carry = (b1 & b2) | (b1 & (sum &\
    \ k)) | (b2 & (sum & k));\n        sum = sum ^ b1 ^ b2;\n        k = k << 1;\n\
    \        tmpX = tmpX >> 1;\n        tmpY = tmpY >> 1;\n    }\n    return sum;",
  "  // code here\n  return x+y;", "\treturn x + y;", "    if(x<y)\n        return\
    \ y;\n    else\n        return x;", "\tlong temp;\n\twhile (y != 0) {\n\t\ttemp\
    \ = x & y;\n\t\tx = x ^ y;\n\t\ty = temp << 1;\n\t}\n\treturn x;", "\t//Implement\
    \ add here\n\treturn x + y;", '    return x + y;', '  return x + y;', "\tlong\
    \ carry = 0;\n\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tlong xb\
    \ = x & (1 << i);\n\t\tlong yb = y & (1 << i);\n\t\tlong rb = result & (1 << i);\n\
    \t\tif ((xb && yb) || (xb && rb) || (yb && rb)) {\n\t\t\tcarry = 1;\n\t\t}\n\t\
    \telse {\n\t\t\tcarry = 0;\n\t\t}\n\t\tresult = result | (1 << i);\n\t}\n\treturn\
    \ result;", '    return x + y;', "\t// Write your code here\n\treturn x + y;",
  '    return x + y;', '    return x + y;', '  return x + y;', "    // Iterate till\
    \ there is no carry\n    while (y != 0) {\n        // carry now contains common\
    \ set bits of x and y\n        long carry = x & y;\n        // Sum of bits of\
    \ x and y where at least one of the bits is not set\n        x = x ^ y;\n    \
    \    // Carry is shifted by one so that adding it to x gives the required sum\n\
    \        y = carry << 1;\n    }\n    return x;", "   long sum, carry;\n   sum\
    \ = x ^ y; /*calculate sum of bits without carry*/\n   carry = x & y; /*calculate\
    \ carry of bits*/\n   while (carry != 0) {\n      carry = carry << 1; /*left-shift\
    \ carry to calculate sum of bits with carry*/\n      x = sum;\n      y = carry;\n\
    \      sum = x ^ y; /*calculate sum of bits without carry*/\n      carry = x &\
    \ y; /*calculate carry of bits*/\n   }\n   return sum;", "    if(y==0) return\
    \ x;\n    return add(x^y, (x&y)<<1);", "  if (y==0) return x;\n  return add(x^y,\
    \ (x&y)<<1);", '    return x + y;', "    //TODO: Write - Your - Code\n    while(y!=0){\n\
    \        long carry = x&y;\n        x = x^y;\n        y = carry<<1;\n    }\n \
    \   return x;", "   // TODO: Implement this.\n   while(y!=0)\n   {\n       long\
    \ carry = x&y;\n       x = x^y;\n       y = carry<<1;\n   }\n   return x;", "\t\
    return x + y;", "\twhile (y != 0) {\n\t\tlong carry = x & y;\n\t\tx = x ^ y;\n\
    \t\ty = carry << 1;\n\t}\n\treturn x;", "//write your code here\n    return x+y;",
  "\tlong carryin = 0;\n\tlong sum, carryout;\n\twhile (y != 0) {\n\t\tsum = x ^ y;\n\
    \t\tcarryout = (x & y) << 1;\n\t\tx = sum;\n\t\ty = carryout;\n\t}\n\treturn x;",
  "    long xor_result = x ^ y;\n    long and_result = x & y;\n    if(and_result !=\
    \ 0) {\n        return add(xor_result, and_result << 1);\n    }\n    return xor_result;",
  '  return x + y;', '    return x + y;', "\t// Implement this placeholder.\n\treturn\
    \ 0;", "\t// TODO: Write your code here\n\tif (y == 0)\n\t\treturn x;\n\tint sum\
    \ = x ^ y;\n\tint carry = (x & y) << 1;\n\treturn add(sum, carry);", '    return
    x + y;', '    return x + y;', "\treturn x + y;", "    while (y != 0) {\n     \
    \   long carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n\
    \    return x;", '  return x + y;', "\t// Your code here\n\treturn x + y;", " \
    \   while (y != 0) {\n        long carry = x & y;\n        x = x ^ y;\n      \
    \  y = carry << 1;\n    }\n    return x;", "\tlong carry;\n\tdo {\n\t\tcarry =\
    \ x & y;\n\t\tx = x ^ y;\n\t\ty = carry << 1;\n\t} while (y != 0);\n\treturn x;",
  "\t// TODO", '    return x + y;', '    return x + y;', "\tassert(sizeof(long) ==\
    \ 8);\n\treturn x + y;", "\tif (y == 0) {\n\t\treturn x;\n\t}\n\telse {\n\t\t\
    int carry = (x & y) << 1;\n\t\treturn add(x ^ y, carry);\n\t}", "    long result\
    \ = x + y;\n    return result;", '    return x + y;', "    while (y != 0) {\n\
    \        long carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;", '    return x + y;', "  // Iterate till there is no carry\n\
    \  while (y != 0) {\n    // carry now contains common set bits of x and y\n  \
    \  long carry = x & y;\n    // Sum of bits of x and y where at least one of the\
    \ bits is not set\n    x = x ^ y;\n    // Carry is shifted by one so that adding\
    \ it to x gives the required sum\n    y = carry << 1;\n  }\n  return x;", '    return
    x + y;', '  return x + y;', '  return x + y;', '  return x + y;', '    return
    x + y;', "    long a, b;\n    long c = 0;\n    if (x == 0)\n        return y;\n\
    \    if (y == 0)\n        return x;\n    while (x != 0) {\n        a = x & 1;\n\
    \        b = y & 1;\n        y = y >> 1;\n        x = x >> 1;\n        if (a &\
    \ b) {\n            y = y | c;\n            c = 1;\n        }\n        else if\
    \ (a | b) {\n            if (c == 1) {\n                y = y | c;\n         \
    \       c = 0;\n            }\n            else\n                y = y | c;\n\
    \        }\n        else {\n            y = y | c;\n            c = 0;\n     \
    \   }\n        y = y << 1;\n    }\n    return y;", '  return x + y;', "\treturn\
    \ x + y;", "\t// <<<\n\treturn x + y;\n\t// >>>", "  long sum = x + y;\n  return\
    \ sum;", "\t// Add x and y\n\treturn x + y;", "    // Iterate till there is no\
    \ carry\n    while (y != 0) {\n        // carry now contains common set bits of\
    \ x and y\n        long carry = x & y;\n\n        // Sum of bits of x and y where\
    \ at least one of the bits is not set\n        x = x ^ y;\n\n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum\n        y =\
    \ carry << 1;\n    }\n    return x;", '    return x + y;', '  return x + y;',
  "    // Iterate till there is no carry\n    while (y != 0) {\n        // carry now\
    \ contains common set bits of x and y\n        long carry = x & y;\n\n       \
    \ // Sum of bits of x and y where at least one of the bits is not set\n      \
    \  x = x ^ y;\n\n        // Carry is shifted by one so that adding it to x gives\
    \ the required sum\n        y = carry << 1;\n    }\n    return x;", "\tlong result\
    \ = 0;\n\tfor (int i = 0; i < y; i++) {\n\t\tresult += x;\n\t}\n\treturn result;",
  "  // Get the carry bits\n  long carry = (x & y) << 1;\n  // Get the sum of the\
    \ two numbers\n  long sum = x ^ y;\n  // If there is a carry, then recursively\
    \ find the sum.\n  if (carry != 0) {\n    return add(sum, carry);\n  }\n  return\
    \ sum;", "  long sum = x;\n  long carry = y;\n  while (carry) {\n    long next_sum\
    \ = sum ^ carry;\n    long next_carry = (sum & carry) << 1;\n    sum = next_sum;\n\
    \    carry = next_carry;\n  }\n  return sum;", "\tlong result = 0;\n\tlong carry\
    \ = 0;\n\twhile (y) {\n\t\tresult = x ^ y;\n\t\tcarry = (x & y) << 1;\n\t\tx =\
    \ result;\n\t\ty = carry;\n\t}\n\treturn result;", "\tassert (x >=0 && y >= 0);\n\
    \tif (x==0) return y;\n\tif (y==0) return x;\n\tint carry = (x & y) << 1;\n\t\
    int sum = x ^ y;\n\treturn add(sum, carry);", '    return x + y;', "    // TODO\
    \ implement this\n\treturn x+y;", '    return x + y;', '  return x + y;', "\t\
    return x + y;", '    return x + y;', "\treturn x + y;", "    long c = x ^ y;\n\
    \    long s = x & y;\n    while (s != 0) {\n        s = s << 1;\n        x = c;\n\
    \        y = s;\n        c = x ^ y;\n        s = x & y;\n    }\n    return c;",
  "  //int a = x & y;\n  int carry = x & y;\n  x = x ^ y;\n  while(carry != 0) {\n\
    \    carry = carry << 1;\n    y = x & carry;\n    x = x ^ carry;\n    carry =\
    \ y;\n  }\n  return x;", "\t// Your code goes here\n\treturn x + y;", '    return
    x + y;', "    // Iterate till there is no carry\n    while (y != 0) {\n      \
    \  // carry now contains common set bits of x and y\n        long carry = x &\
    \ y;\n        // Sum of bits of x and y where at least one of the bits is not\
    \ set\n        x = x ^ y;\n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum\n        y = carry << 1;\n    }\n    return x;",
  '    return x + y;', '  return x + y;', "    // >>> YOUR CODE HERE <<<\n    if(y==0)\n\
    \    \treturn x;\n    return add(x^y,(x&y)<<1);", "\treturn x + y;", "\t// Iterate\
    \ till there is no carry  \n\twhile (y != 0)\n\t{\n\t\t// carry now contains common\
    \ set bits of x and y\n\t\tlong carry = x & y;\n\n\t\t// Sum of bits of x and\
    \ y where at least one of the bits is not set\n\t\tx = x ^ y;\n\n\t\t// Carry\
    \ is shifted by one so that adding it to x gives the required sum\n\t\ty = carry\
    \ << 1;\n\t}\n\treturn x;", "    if(x == 0)\n    \treturn y;\n    else if(y ==\
    \ 0)\n    \treturn x;\n    else\n    \treturn add(x^y, (x&y)<<1);", "    while\
    \ (y != 0) {\n        // carry now contains common set bits of x and y\n     \
    \   long carry = x & y;\n        // Sum of bits of x and y where at least one\
    \ of the bits is not set\n        x = x ^ y;\n        // Carry is shifted by one\
    \ so that adding it to x gives the required sum\n        y = carry << 1;\n   \
    \ }\n    return x;", "  // Write your code here and change the return value.\n\
    \  if(x == 0)\n    return y;\n  long sum = x ^ y; //SUM of two integer is A XOR\
    \ B\n  long carry = (x & y) << 1; //CARRY of two integer is A AND B\n  return\
    \ add(sum, carry);", "  // Calculate the sum of x and y and then return it\n \
    \ int sum;\n  sum = x + y;\n  return sum;", "\treturn x + y;", '    return x +
    y;', "    // TODO: Implement add function\n    long carry;\n    while(y!=0){\n\
    \        carry = x&y;\n        x = x^y;\n        y = carry<<1;\n    }\n    return\
    \ x;", "\tif (y == 0) {\n\t\treturn x;\n\t}\n\telse {\n\t\treturn add(x ^ y, (x\
    \ & y) << 1);\n\t}", "    // Your code here\n    while(y!=0){\n        long sum\
    \ = x^y;\n        long carry = (x&y)<<1;\n        x = sum;\n        y = carry;\n\
    \    }\n    return x;", "    // algorithm to add two numbers\n    return x + y;",
  "\tif (y == 0) {\n\t\treturn x;\n\t}\n\treturn add(x ^ y, (x & y) << 1);", "\treturn\
    \ x + y;", '    return x + y;', '    return x + y;', "\t// TODO\n\treturn 0;",
  "  // TODO: Implement this function\n  return x+y;", "    while (y != 0) {\n   \
    \     long carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n\
    \    return x;", "    long sum = 0;\n    long carryin = 0;\n    long k = 1;\n\
    \    long temp_x = x, temp_y = y;\n    while (temp_x || temp_y) {\n        long\
    \ xk = x & k;\n        long yk = y & k;\n        long carryout = (xk & yk) | (xk\
    \ & carryin) | (yk & carryin);\n        sum |= (xk ^ yk ^ carryin);\n        carryin\
    \ = carryout << 1;\n        k <<= 1;\n        temp_x >>= 1;\n        temp_y >>=\
    \ 1;\n    }\n    return sum | carryin;", "\tlong ans;\n\tlong long x_64 = x;\n\
    \tlong long y_64 = y;\n\tlong long ans_64 = x_64 + y_64;\n\tans = ans_64;\n\t\
    assert(x + y == ans);\n\treturn ans;", "    if(y == 0) return x;\n    return add(x^y,\
    \ (x&y)<<1);", '    return x + y;', "  long sum, carry;\n  do {\n    sum = x ^\
    \ y;\n    carry = (x & y) << 1;\n    x = sum;\n    y = carry;\n  } while (y !=\
    \ 0);\n  return sum;", "\treturn x + y;", "  // Iterate till there is no carry\
    \  \n  while (y != 0)\n  {\n    // carry now contains common set bits of x and\
    \ y\n    long carry = x & y;  \n \n    // Sum of bits of x and y where at least\
    \ one of the bits is not set\n    x = x ^ y; \n \n    // Carry is shifted by one\
    \ so that adding it to x gives the required sum\n    y = carry << 1;\n  }\n  return\
    \ x;", "   long sum = x ^ y; // add without carrying\n   long carry = (x & y)\
    \ << 1; // carry, but don\u2019t add\n   while (carry != 0) { // while there is\
    \ a carry\n      long temp = sum;\n      sum = sum ^ carry; // add without carrying\n\
    \      carry = (temp & carry) << 1; // carry, but don\u2019t add\n   }\n   return\
    \ sum;", "    long result = 0;\n    int carry = 0;\n    int a = 0;\n    int b\
    \ = 0;\n    for (int i = 0; i < 32; i++) {\n        a = (x >> i) & 1;\n      \
    \  b = (y >> i) & 1;\n        int sum = a ^ b ^ carry;\n        carry = (a & b)\
    \ | (b & carry) | (a & carry);\n        result |= (sum << i);\n    }\n    return\
    \ result;", '    return x + y;', "  long sum = x ^ y; // calculate the sum of\
    \ the numbers without carry\n  long carry = (x & y) << 1; // calculate the carry\
    \ by taking the AND of x and y and shifting it left by 1\n  // if carry is not\
    \ 0, add carry and sum recursively\n  if (carry != 0)\n    return add(sum, carry);\n\
    \  return sum;", "    long ans = 0;\n    long carryin = 0;\n    long k = 1;\n\
    \    long temp_a, temp_b;\n    while (x!=0 || y!=0) {\n        temp_a = x & 1;\n\
    \        temp_b = y & 1;\n        long carryout = (temp_a & temp_b) | (temp_a\
    \ & carryin) | (temp_b & carryin);\n        ans |= (temp_a ^ temp_b ^ carryin)\
    \ << k;\n        carryin = carryout << 1;\n        x >>= 1;\n        y >>= 1;\n\
    \        k++;\n    }\n    return ans | carryin;", "\tlong carry;\n\twhile (y !=\
    \ 0) {\n\t\tcarry = x & y;\n\t\tx = x ^ y;\n\t\ty = carry << 1;\n\t}\n\treturn\
    \ x;", '    return x + y;', "  // Iterate till there is no carry  \n  while (y\
    \ != 0)\n  {\n    // carry now contains common set bits of x and y\n    long carry\
    \ = x & y;\n    // sum of bits of x and y where at least one of the bits is not\
    \ set\n    x = x ^ y;\n    // carry is shifted by one so that adding it to x gives\
    \ the required sum\n    y = carry << 1;\n  }\n  return x;", "    // Iterate till\
    \ there is no carry\n    while (y != 0) {\n        // carry now contains common\
    \ set bits of x and y\n        long carry = x & y;\n\n        // Sum of bits of\
    \ x and y where at least one of the bits is not set\n        x = x ^ y;\n\n  \
    \      // Carry is shifted by one so that adding it to x gives the required sum\n\
    \        y = carry << 1;\n    }\n    return x;", "    // Your code here\n    long\
    \ carry = 0;\n    long sum = 0;\n    long left = 1;\n    for(int i = 0; i < 32;\
    \ i++){\n        long xbit = (x & left);\n        long ybit = (y & left);\n  \
    \      long zbit = (carry & left);\n        if((xbit ^ ybit) ^ zbit){\n      \
    \      sum = sum | left;\n        }\n        if((xbit & ybit) | (xbit & zbit)\
    \ | (ybit & zbit)){\n            carry = carry | left;\n        }\n        left\
    \ = left << 1;\n    }\n    return sum;", "    long carry = 0;\n    while (y !=\
    \ 0) {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n\
    \    }\n    return x;", "    while (y != 0) {\n        long carry = x & y;\n \
    \       x = x ^ y;\n        y = carry << 1;\n    }\n    return x;", "    long\
    \ ans = x+y;\n    return ans;", "    while (y != 0) {\n        long carry = x\
    \ & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;", "\t\
    long carryin = 0;\n\tlong sum = 0;\n\tlong k = 1;\n\tlong temp_x = x, temp_y =\
    \ y;\n\twhile (temp_x || temp_y) {\n\t\tlong xk = x & k;\n\t\tlong yk = y & k;\n\
    \t\tlong carryout = (xk & yk) | (xk & carryin) | (yk & carryin);\n\t\tsum |= (xk\
    \ ^ yk ^ carryin);\n\t\tcarryin = carryout << 1;\n\t\tk <<= 1;\n\t\ttemp_x >>=\
    \ 1;\n\t\ttemp_y >>= 1;\n\t}\n\treturn sum | carryin;", "    long ans = 0;\n \
    \   int carry = 0;\n    int i = 0;\n    for(;i<64;i++){\n        int b = x & 1;\n\
    \        int c = y & 1;\n        if(b == 1 && c == 1){\n            if(carry ==\
    \ 1){\n                ans |= 1;\n            }\n            carry = 1;\n    \
    \    }\n        else if(b == 1 || c == 1){\n            if(carry == 1){\n    \
    \            carry = 1;\n            }\n            else{\n                ans\
    \ |= 1;\n            }\n        }\n        else{\n            if(carry == 1){\n\
    \                ans |= 1;\n                carry = 0;\n            }\n      \
    \  }\n        if(i<63){\n            ans = ans << 1;\n        }\n        x = x\
    \ >> 1;\n        y = y >> 1;\n    }\n    return ans;", '  return x + y;', "  \
    \  long add_sum;\n    add_sum = x + y;\n    return add_sum;", "    while (y !=\
    \ 0) {\n        long carry = x & y;\n        x = x ^ y;\n        y = carry <<\
    \ 1;\n    }\n    return x;", "\t// Use only bitwise operators (AND, OR, XOR, NOT,\
    \ <<, >>) to implement add\n\t// Do not use +, -, *, /, %, or *&\n\t// Implement\
    \ the algorithm taught in class\n\t// You can only declare a maximum of two local\
    \ variables\n\t// You can only use constant integer values less than 256 in your\
    \ code\n\t// You can declare and use functions as you please\n\t// Your code must\
    \ compile and run with main.cpp\n\t// Submit one .cpp file on Canvas\n\t// Your\
    \ file must be named username_hw3.cpp\n\tlong a = x ^ y;\n\tlong b = x & y;\n\t\
    long c = 0;\n\tif (b != 0) {\n\t\tc = a ^ (b << 1);\n\t\tb = a & (b << 1);\n\t\
    }\n\twhile (b != 0) {\n\t\ta = c ^ (b << 1);\n\t\tb = c & (b << 1);\n\t\tc = a;\n\
    \t}\n\treturn c;", '  return x + y;']
stop_tokens:
- "\n}"
