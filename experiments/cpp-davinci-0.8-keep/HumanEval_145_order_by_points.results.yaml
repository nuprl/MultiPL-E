language: cpp
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Create a map of the sum and the num\n  std::map<long, std::vector<long>>\
    \ num_map;\n  for (int i = 0; i < nums.size(); i++) {\n    long sum = 0;\n   \
    \ long num = nums[i];\n    while (num > 0) {\n      sum += num % 10;\n      num\
    \ /= 10;\n    }\n    // If the sum exists, add the num to the corresponding vector\n\
    \    if (num_map.find(sum) != num_map.end()) {\n      num_map[sum].push_back(nums[i]);\n\
    \    } else {\n      // Otherwise, create a new map entry.\n      std::vector<long>\
    \ num_vec;\n      num_vec.push_back(nums[i]);\n      num_map[sum] = num_vec;\n\
    \    }\n  }\n  // Now, iterate through the map and print the vectors in sorted\
    \ order.\n  std::vector<long> sorted_nums;\n  for (auto const& x : num_map) {\n\
    \    std::sort(x.second.begin(), x.second.end());\n    for (int i = 0; i < x.second.size();\
    \ i++) {\n      sorted_nums.push_back(x.second[i]);\n    }\n  }\n  return sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpxecuc_1y.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:1890:25:   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:1976:31:   required from \u2018void std::__sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4873:18:   required from \u2018void std::sort(_RAIter,\
    \ _RAIter) [with _RAIter = __gnu_cxx::__normal_iterator<const long int*, std::vector<long\
    \ int> >]\u2019\n/tmp/tmpxecuc_1y.cpp:33:47:   required from here\n/usr/include/c++/9/bits/stl_algo.h:1857:17:\
    \ error: assignment of read-only location \u2018__first.__gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >::operator*()\u2019\n 1857 |        *__first\
    \ = _GLIBCXX_MOVE(__val);\n      |                 ^\nIn file included from /usr/include/c++/9/bits/stl_algo.h:61,\n\
    \                 from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpxecuc_1y.cpp:2:\n/usr/include/c++/9/bits/stl_heap.h: In instantiation\
    \ of \u2018void std::__pop_heap(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; _"
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    struct my_struct {\n        int num;\n        int index;\n    \
    \    int point;\n    };\n    std::vector<my_struct> nums_s;\n    for (size_t i\
    \ = 0; i < nums.size(); i++) {\n        int sum = 0;\n        int num = nums[i];\n\
    \        while (num != 0) {\n            sum += num % 10;\n            num /=\
    \ 10;\n        }\n        nums_s.push_back({nums[i], i, sum});\n    }\n    std::sort(nums_s.begin(),\
    \ nums_s.end(),\n              [](my_struct a, my_struct b) {\n              \
    \    if (a.point == b.point) {\n                      return a.index < b.index;\n\
    \                  }\n                  return a.point < b.point;\n          \
    \    });\n    std::vector<long> ans;\n    for (size_t i = 0; i < nums_s.size();\
    \ i++) {\n        ans.push_back(nums_s[i].num);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpaiydnvc9: /tmp/tmpaiydnvc9.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here...\n    struct point{\n      long value;\n  \
    \    long index;\n    };\n    std::vector<point> points;\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < nums.size(); ++i){\n      long sum = 0;\n  \
    \    long tmp = nums[i];\n      while(tmp > 0){\n        sum += tmp % 10;\n  \
    \      tmp /= 10;\n      }\n      points.push_back({sum, i});\n    }\n    std::sort(points.begin(),\
    \ points.end(), [](const point& lhs, const point& rhs){\n      if(lhs.value ==\
    \ rhs.value){\n        return lhs.index < rhs.index;\n      }\n      return lhs.value\
    \ < rhs.value;\n    });\n    for(int i = 0; i < points.size(); ++i){\n      result.push_back(nums[points[i].index]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpt61zk4es: /tmp/tmpt61zk4es.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](long first, long second)\
    \ {\n        long sum_first = 0;\n        long sum_second = 0;\n        while\
    \ (first > 0) {\n            sum_first += first % 10;\n            first /= 10;\n\
    \        }\n        while (second > 0) {\n            sum_second += second % 10;\n\
    \            second /= 10;\n        }\n        return sum_first < sum_second;\n\
    \    });\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp4gc8zjdq: /tmp/tmp4gc8zjdq.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<long, long> m;\n  std::vector<long> res;\n  for (long i\
    \ = 0; i < nums.size(); i++) {\n    if (m.find(nums[i]) == m.end()) {\n      m[nums[i]]\
    \ = i;\n    }\n  }\n  std::map<long, long>::iterator miter;\n  for (miter = m.begin();\
    \ miter != m.end(); miter++) {\n    std::cout << miter->first << '\\t' << miter->second\
    \ << '\\n';\n  }\n  return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp71g300ao: /tmp/tmp71g300ao.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ hash;\n    for (int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n \
    \       int digit = nums[i];\n        while (digit != 0) {\n            sum +=\
    \ digit % 10;\n            digit /= 10;\n        }\n        hash[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = hash.begin(); it != hash.end(); it++) {\n        std::sort(it->second.begin(),\
    \ it->second.end());\n        for (int i = 0; i < it->second.size(); i++) {\n\
    \            result.push_back(it->second[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8ccaxi_q: /tmp/tmp8ccaxi_q.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  int n = nums.size();\n  std::vector<long> res;\n  std::vector<int>\
    \ sums;\n  for (int i = 0; i < n; i++) {\n    int temp = nums[i];\n    int sum\
    \ = 0;\n    while (temp != 0) {\n      sum += temp % 10;\n      temp /= 10;\n\
    \    }\n    sums.push_back(sum);\n  }\n  std::vector<std::pair<int, int>> temp;\n\
    \  for (int i = 0; i < n; i++) {\n    temp.push_back(std::make_pair(sums[i], nums[i]));\n\
    \  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i < n; i++) {\n\
    \    res.push_back(temp[i].second);\n  }\n  return res;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1htmh42m: /tmp/tmp1htmh42m.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums2;\n    nums2 = nums;\n    int i;\n    long\
    \ temp=0;\n    int sum=0;\n    long temp2=0;\n    int sum2=0;\n    for(i=0;i<nums.size();i++)\n\
    \    {\n        while(nums[i]>0)\n        {\n            temp = nums[i]%10;\n\
    \            sum = sum + temp;\n            nums[i] = nums[i]/10;\n        }\n\
    \    }\n    for(i=0;i<nums2.size();i++)\n    {\n        while(nums2[i]>0)\n  \
    \      {\n            temp2 = nums2[i]%10;\n            sum2 = sum2 + temp2;\n\
    \            nums2[i] = nums2[i]/10;\n        }\n    }\n    std::vector<long>\
    \ nums3;\n    long temp3=0;\n    long temp4=0;\n    long temp5=0;\n    long temp6=0;\n\
    \    long temp7=0;\n    long temp8=0;\n    long temp9=0;\n    int sum3=0;\n  \
    \  int sum4=0;\n    int sum5=0;\n    int sum6=0;\n    int sum7=0;\n    int sum8=0;\n\
    \    int sum9=0;\n    while(nums3.size() < nums.size())\n    {\n        for(i=0;i<nums.size();i++)\n\
    \        {\n            temp3 = nums[i]%10;\n            sum3 = sum3 + temp3;\n\
    \            nums[i] = nums[i]/10;\n        }\n        for(i=0;i<nums2.size();i++)\n\
    \        {\n            temp4 = nums2[i]%10;\n            sum4 = sum4 + temp4;\n\
    \            nums2[i] = nums2[i]/10;\n        }\n        if(sum3 < sum4)\n   \
    \     {\n            nums3.push\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfv7g1jl7.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfv7g1jl7.cpp:67:19: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018push\u2019\n   67 |             nums3.push\n\
    \      |                   ^~~~\n/tmp/tmpfv7g1jl7.cpp:69:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   69 | int main() {\n     \
    \ |            ^\n/tmp/tmpfv7g1jl7.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpfv7g1jl7.cpp:52:5: note: to match\
    \ this \u2018{\u2019\n   52 |     {\n      |     ^\n/tmp/tmpfv7g1jl7.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpfv7g1jl7.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmpfv7g1jl7.cpp:77:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   77 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long>::iterator it;\n  std::vector<long>result;\n  std::map<long,long>\
    \ nums_map;\n  long sum=0;\n  if(nums.size() == 0) return nums;\n  for(it=nums.begin();it!=nums.end();it++){\n\
    \    sum=0;\n    long num=*it;\n    while(num!=0){\n      sum+=num%10;\n     \
    \ num/=10;\n    }\n    nums_map[sum]=*it;\n  }\n  for(std::map<long,long>::iterator\
    \ i=nums_map.begin();i!=nums_map.end();i++){\n    result.push_back(i->second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmxw5g4di: /tmp/tmpmxw5g4di.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> vals;\n    for (int i = 0; i\
    \ < nums.size(); i++) {\n        int sum = 0;\n        for (int j = nums[i]; j\
    \ > 0; j /= 10) {\n            sum += j % 10;\n        }\n        vals.push_back(std::make_pair(sum,\
    \ nums[i]));\n    }\n    std::sort(vals.begin(), vals.end());\n    std::vector<long>\
    \ answer;\n    for (int i = 0; i < vals.size(); i++) {\n        answer.push_back(vals[i].second);\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgltnoeo0: /tmp/tmpgltnoeo0.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> sorted;\n  std::sort(sorted.begin(), sorted.end());\n\
    \  return sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpm2rbekrc: /tmp/tmpm2rbekrc.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tstd::vector<long>store;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tstore.push_back(std::abs(nums[i]));\n\t\
    }\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tlong min = store[i];\n\t\tint\
    \ index = i;\n\t\tfor (int j = i + 1; j < nums.size(); j++) {\n\t\t\tif (store[j]\
    \ < min) {\n\t\t\t\tmin = store[j];\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\t\
    store[index] = store[i];\n\t\tstore[i] = min;\n\t\tresult.push_back(nums[index]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp3svu63ix: /tmp/tmp3svu63ix.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> sorted_nums;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sorted_nums.push_back(nums[i]);\n  }\n  long current_sum;\n  long\
    \ next_sum;\n  bool is_sorted = false;\n  while (!is_sorted) {\n    is_sorted\
    \ = true;\n    for (int i = 0; i < sorted_nums.size() - 1; i++) {\n      current_sum\
    \ = 0;\n      long current_num = sorted_nums[i];\n      while (current_num > 0)\
    \ {\n        current_sum += current_num % 10;\n        current_num /= 10;\n  \
    \    }\n      next_sum = 0;\n      long next_num = sorted_nums[i + 1];\n     \
    \ while (next_num > 0) {\n        next_sum += next_num % 10;\n        next_num\
    \ /= 10;\n      }\n      if (current_sum > next_sum) {\n        is_sorted = false;\n\
    \        long temp = sorted_nums[i];\n        sorted_nums[i] = sorted_nums[i +\
    \ 1];\n        sorted_nums[i + 1] = temp;\n      }\n    }\n  }\n  return sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpjycq98rf: /tmp/tmpjycq98rf.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sum_digits(nums.size());\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        int s = 0;\n        while (nums[i] != 0) {\n\
    \            s += nums[i] % 10;\n            nums[i] /= 10;\n        }\n     \
    \   sum_digits[i] = s;\n    }\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       for (int j = 0; j < nums.size() - 1; j++) {\n            if (sum_digits[j]\
    \ > sum_digits[j + 1]) {\n                int buff = sum_digits[j];\n        \
    \        sum_digits[j] = sum_digits[j + 1];\n                sum_digits[j + 1]\
    \ = buff;\n                buff = nums[j];\n                nums[j] = nums[j +\
    \ 1];\n                nums[j + 1] = buff;\n            }\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplqltcyto: /tmp/tmplqltcyto.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    std::vector<long> ints;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        while (nums[i] != 0) {\n            sum +=\
    \ nums[i] % 10;\n            nums[i] /= 10;\n        }\n        ints.push_back(sum);\n\
    \        sum = 0;\n    }\n    for (int i = 0; i < ints.size(); i++) {\n      \
    \  for (int j = 0; j < ints.size() - 1; j++) {\n            if (ints[j] > ints[j\
    \ + 1]) {\n                int temp = ints[j];\n                ints[j] = ints[j\
    \ + 1];\n                ints[j + 1] = temp;\n                temp = nums[j];\n\
    \                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n\
    \            }\n        }\n    }\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpy_xdhhzf: /tmp/tmpy_xdhhzf.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<int, std::vector<long>> m;\n\tstd::vector<long> result;\n\
    \tfor (long i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tint temp = nums[i];\n\
    \t\twhile (temp != 0) {\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\
    \tm[sum].push_back(nums[i]);\n\t}\n\tfor (auto it = m.begin(); it != m.end();\
    \ it++) {\n\t\tfor (int i = 0; i < it->second.size(); i++) {\n\t\t\tresult.push_back(it->second[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpyje8wwx7: /tmp/tmpyje8wwx7.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> sumAndIndexes;\n    std::vector<long>\
    \ ans;\n    for (size_t i = 0; i < nums.size(); i++) {\n        sumAndIndexes.push_back(std::make_pair(std::abs(nums[i]),\
    \ i));\n    }\n    std::sort(sumAndIndexes.begin(), sumAndIndexes.end());\n  \
    \  for (size_t i = 0; i < sumAndIndexes.size(); i++) {\n        ans.push_back(nums[sumAndIndexes[i].second]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpxtqj163n: /tmp/tmpxtqj163n.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tvector<long> res;\n\tmap<long, long> m;\n\tfor (long i = 0; i < nums.size();\
    \ i++) {\n\t\tlong sum = 0;\n\t\tlong t = nums[i];\n\t\twhile (t > 0) {\n\t\t\t\
    sum += t % 10;\n\t\t\tt /= 10;\n\t\t}\n\t\tif (m.find(sum) == m.end()) {\n\t\t\
    \tm[sum] = i;\n\t\t}\n\t\telse {\n\t\t\tif (m[sum] > i) {\n\t\t\t\tm[sum] = i;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\t\
    res.push_back(nums[it->second]);\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qap4d7r.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6qap4d7r.cpp:11:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   11 |  vector<long> res;\n      |  ^~~~~~\n/tmp/tmp6qap4d7r.cpp:11:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6qap4d7r.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6qap4d7r.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp6qap4d7r.cpp:11:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   11 |  vector<long>\
    \ res;\n      |         ^~~~\n/tmp/tmp6qap4d7r.cpp:12:2: error: \u2018map\u2019\
    \ was not declared in this scope\n   12 |  map<long, long> m;\n      |  ^~~\n\
    /tmp/tmp6qap4d7r.cpp:12:2: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6qap4d7r.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6qap4d7r.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using "
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> ordered_nums;\n\tif (nums.size() > 0) {\n\t\tordered_nums.push_back(nums[0]);\n\
    \t\tfor (size_t i = 1; i < nums.size(); i++) {\n\t\t\tlong sum_nums = 0;\n\t\t\
    \tlong sum_ordered_nums = 0;\n\t\t\tlong nums_new = nums[i];\n\t\t\twhile (nums_new\
    \ != 0) {\n\t\t\t\tsum_nums += nums_new % 10;\n\t\t\t\tnums_new /= 10;\n\t\t\t\
    }\n\t\t\tfor (size_t j = 0; j < ordered_nums.size(); j++) {\n\t\t\t\tlong temp\
    \ = ordered_nums[j];\n\t\t\t\twhile (temp != 0) {\n\t\t\t\t\tsum_ordered_nums\
    \ += temp % 10;\n\t\t\t\t\ttemp /= 10;\n\t\t\t\t}\n\t\t\t\tif (sum_nums > sum_ordered_nums)\
    \ {\n\t\t\t\t\tordered_nums.insert(ordered_nums.begin() + j, nums[i]);\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (j == ordered_nums.size() - 1) {\n\t\t\t\t\t\
    ordered_nums.push_back(nums[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsum_ordered_nums\
    \ = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn ordered_nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpyq7menji: /tmp/tmpyq7menji.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> ans;\n  std::map<long, std::vector<long>> hash;\n\
    \  for (long i = 0; i < nums.size(); i++) {\n    long sum = 0;\n    long temp\
    \ = nums[i];\n    while (temp > 0) {\n      sum += temp % 10;\n      temp /= 10;\n\
    \    }\n    // cout << sum << endl;\n    if (hash.find(sum) == hash.end()) {\n\
    \      hash[sum] = std::vector<long>();\n    }\n    hash[sum].push_back(nums[i]);\n\
    \  }\n  for (auto const& it : hash) {\n    for (auto const& it2 : it.second) {\n\
    \      ans.push_back(it2);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgkghych1: /tmp/tmpgkghych1.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here\n    // map for storing the indices and sum as\
    \ key value pair\n    std::map<long, std::vector<long>> sorted;\n    std::vector<long>\
    \ sum_vec;\n    // storing the sum of all digits of the values in the map\n  \
    \  for(auto &n : nums) {\n        long num = n;\n        long sum = 0;\n     \
    \   while(num > 0) {\n            long temp = num % 10;\n            sum += temp;\n\
    \            num /= 10;\n        }\n        sorted[sum].push_back(n);\n      \
    \  sum_vec.push_back(sum);\n    }\n    // sorting the sum vector and thus we get\
    \ their indices in sorted order\n    // so for each key in the map, we can find\
    \ their indices\n    // and thus can push them in the sorted order\n    // into\
    \ an array of size equal to nums size\n    std::sort(sum_vec.begin(), sum_vec.end());\n\
    \    std::vector<long> answer(nums.size());\n    long index = 0;\n    for(auto\
    \ i : sum_vec) {\n        for(auto j : sorted[i]) {\n            answer[index]\
    \ = j;\n            index++;\n        }\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<int, std::vector<long>> number_count;\n    std::vector<long>\
    \ answer;\n    int count;\n    for (long num : nums) {\n        count = 0;\n \
    \       while (num != 0) {\n            count += num % 10;\n            num /=\
    \ 10;\n        }\n        number_count[count].push_back(num);\n    }\n    for\
    \ (auto item : number_count) {\n        for (long num : item.second) {\n     \
    \       answer.push_back(num);\n        }\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpil_58tsh: /tmp/tmpil_58tsh.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int len = nums.size();\n    for(int i = 0; i < len; i++) {\n  \
    \      for(int j = 0; j < len - i - 1; j++) {\n            if(sum(nums[j]) > sum(nums[j\
    \ + 1])) {\n                std::swap(nums[j], nums[j + 1]);\n            }\n\
    \        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2hb5oyk.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc2hb5oyk.cpp:14:16: error: \u2018sum\u2019 was not declared\
    \ in this scope\n   14 |             if(sum(nums[j]) > sum(nums[j + 1])) {\n \
    \     |                ^~~\n"
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    for(auto &num : nums) {\n        num = abs(num);\n    }\n    std::vector<long>\
    \ sums(nums.size());\n    std::vector<long> answers(nums.size());\n    std::iota(answers.begin(),\
    \ answers.end(), 0);\n    std::sort(answers.begin(), answers.end(),\n        \
    \      [&nums](const int &first, const int &second) {\n                  long\
    \ firstSum = 0;\n                  long secondSum = 0;\n                  while(nums[first]\
    \ != 0) {\n                      firstSum += nums[first] % 10;\n             \
    \         nums[first] /= 10;\n                  }\n                  while(nums[second]\
    \ != 0) {\n                      secondSum += nums[second] % 10;\n           \
    \           nums[second] /= 10;\n                  }\n                  return\
    \ firstSum < secondSum;\n              });\n    std::transform(answers.begin(),\
    \ answers.end(), sums.begin(),\n                   [&nums](const int &index) {\
    \ return nums[index]; });\n    return sums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpm4pel5h0: /tmp/tmpm4pel5h0.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<int, std::vector<long>> m;\n  for (auto i : nums) {\n  \
    \  int sum = 0;\n    int num = i;\n    while (num) {\n      sum += num % 10;\n\
    \      num /= 10;\n    }\n    m[sum].push_back(i);\n  }\n  std::vector<long> answer;\n\
    \  for (auto i : m) {\n    for (auto j : i.second) {\n      answer.push_back(j);\n\
    \    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmppwdd1_we: /tmp/tmppwdd1_we.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long,long>> newNums;\n    std::vector<long>\
    \ res;\n    long a;\n    long b;\n    long c;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        a = nums[i];\n        c = 0;\n        while(a != 0){\n      \
    \      b = a % 10;\n            c += b;\n            a /= 10;\n        }\n   \
    \     newNums.push_back(std::make_pair(c, nums[i]));\n    }\n    std::sort(newNums.begin(),\
    \ newNums.end());\n    for(long i = 0; i < newNums.size(); i++){\n        res.push_back(newNums[i].second);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp48bj872l: /tmp/tmp48bj872l.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tint len = nums.size();\n\tstd::vector<long> result(len);\n\tint sum\
    \ = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tsum = 0;\n\t\tif (nums[i] > 0)\
    \ {\n\t\t\twhile (nums[i] > 0) {\n\t\t\t\tsum += nums[i] % 10;\n\t\t\t\tnums[i]\
    \ /= 10;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (nums[i] < 0) {\n\t\t\t\tsum\
    \ += -(nums[i] % 10);\n\t\t\t\tnums[i] /= 10;\n\t\t\t}\n\t\t}\n\t\tnums[i] = sum;\n\
    \t}\n\tfor (int i = 0; i < len; i++) {\n\t\tif (i != len - 1) {\n\t\t\tfor (int\
    \ j = i + 1; j < len; j++) {\n\t\t\t\tif (nums[i] > nums[j]) {\n\t\t\t\t\tswap(nums[i],\
    \ nums[j]);\n\t\t\t\t\tswap(result[i], result[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ffe2s26.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1ffe2s26.cpp:34:6: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   34 |      swap(nums[i], nums[j]);\n      |      ^~~~\n/tmp/tmp1ffe2s26.cpp:34:6:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1ffe2s26.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1ffe2s26.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1ffe2s26.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp1ffe2s26.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap"
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t//std::vector<int> s;\n\tstd::map<int, int> map;\n\tstd::vector<int>\
    \ v;\n\tfor (auto i : nums) {\n\t\tint sum = 0;\n\t\tint temp = i;\n\t\tif (i\
    \ < 0) {\n\t\t\ttemp = -i;\n\t\t}\n\t\twhile (temp > 0) {\n\t\t\tsum += temp %\
    \ 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tmap[sum] = i;\n\t\tv.push_back(sum);\n\t\
    }\n\tstd::sort(v.begin(), v.end());\n\tstd::vector<long> s;\n\tfor (auto i : v)\
    \ {\n\t\ts.push_back(map[i]);\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpc92h1uvd: /tmp/tmpc92h1uvd.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n\
    \    long n;\n    for (long i = 0; i < nums.size(); i++) {\n        long value\
    \ = nums[i];\n        long sum = 0;\n        while (value != 0) {\n          \
    \  n = value % 10;\n            sum += n;\n            value /= 10;\n        }\n\
    \        m[sum].push_back(nums[i]);\n    }\n    for (auto& x : m) {\n        for\
    \ (auto& y : x.second) {\n            res.push_back(y);\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpz9s6spwx: /tmp/tmpz9s6spwx.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> vec;\n    for(auto& i : nums)\n    {\n      \
    \  int sum = 0;\n        long temp = i;\n        if(temp < 0)\n            temp\
    \ = -temp;\n        while(temp > 0)\n        {\n            sum += temp % 10;\n\
    \            temp /= 10;\n        }\n        vec.push_back(sum);\n    }\n    for(size_t\
    \ i = 0; i < vec.size(); ++i)\n    {\n        for(size_t j = i + 1; j < vec.size();\
    \ ++j)\n        {\n            if(vec[i] > vec[j])\n            {\n          \
    \      long temp = vec[i];\n                vec[i] = vec[j];\n               \
    \ vec[j] = temp;\n                temp = nums[i];\n                nums[i] = nums[j];\n\
    \                nums[j] = temp;\n            }\n        }\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpf7qg6ze9: /tmp/tmpf7qg6ze9.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tif (nums.size() == 0) {\n\t\treturn nums;\n\t}\n\tstd::map<long,\
    \ std::vector<long>> digitSums;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\
    \tlong sum = 0;\n\t\tlong num = nums[i];\n\t\twhile (num > 0) {\n\t\t\tsum +=\
    \ num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tdigitSums[sum].push_back(nums[i]);\n\
    \t}\n\tnums.clear();\n\tfor (auto it = digitSums.begin(); it != digitSums.end();\
    \ it++) {\n\t\tstd::vector<long> numbers = it->second;\n\t\tstd::sort(numbers.begin(),\
    \ numbers.end());\n\t\tnums.insert(nums.end(), numbers.begin(), numbers.end());\n\
    \t}\n\treturn nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpz6lrldzg: /tmp/tmpz6lrldzg.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here!\n    int n = nums.size();\n    std::vector<long>\
    \ ans(n);\n    std::vector<int> nums2(n);\n    for(int i = 0; i < n; i++) {\n\
    \        int temp = nums[i];\n        int sum = 0;\n        while(temp != 0) {\n\
    \            sum += temp % 10;\n            temp /= 10;\n        }\n        nums2[i]\
    \ = sum;\n    }\n    for(int i = 0; i < n; i++) {\n        int mn = INT_MAX;\n\
    \        int ind = 0;\n        for(int j = 0; j < n; j++) {\n            if(nums2[j]\
    \ < mn) {\n                mn = nums2[j];\n                ind = j;\n        \
    \    }\n        }\n        ans[i] = nums[ind];\n        nums2[ind] = INT_MAX;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8slr6ay6: /tmp/tmp8slr6ay6.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret;\n    std::multimap<long, long> m;\n    for\
    \ (size_t i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        long n\
    \ = nums[i];\n        if (n < 0) {\n            n = n * -1;\n        }\n     \
    \   while (n != 0) {\n            sum += n % 10;\n            n = n / 10;\n  \
    \      }\n        m.insert(std::pair<long, long>(sum, nums[i]));\n    }\n    std::multimap<long,\
    \ long>::iterator itr;\n    for (itr = m.begin(); itr != m.end(); ++itr) {\n \
    \       ret.push_back(itr->second);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmo6sovrp: /tmp/tmpmo6sovrp.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    \n    \n    \n    \n    \n    \n    // Good luck!\n    return {};\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp10ewm7w6: /tmp/tmp10ewm7w6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(),\n              [](long x, long\
    \ y) {\n                  int x_digits_sum = 0;\n                  int y_digits_sum\
    \ = 0;\n                  for (long n = x; n != 0; n /= 10)\n                \
    \      x_digits_sum += n % 10;\n                  for (long n = y; n != 0; n /=\
    \ 10)\n                      y_digits_sum += n % 10;\n                  return\
    \ x_digits_sum < y_digits_sum ||\n                         (x_digits_sum == y_digits_sum\
    \ && x < y);\n              });\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp9ng17wr8: /tmp/tmp9ng17wr8.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // map to hold number and its index\n    std::map<int, int> nums_map;\n\
    \    // vector to hold number in sorted order\n    std::vector<long> output;\n\
    \    // loop through input vector to find sum of digits for each number\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        int\
    \ sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n       \
    \     num /= 10;\n        }\n        // store sum of digits and index\n      \
    \  nums_map[sum] = i;\n    }\n    // sort map in ascending order by sum of digits\n\
    \    std::map<int, int>::iterator it;\n    for (it = nums_map.begin(); it != nums_map.end();\
    \ it++) {\n        // loop through map and insert number into output\n       \
    \ // in ascending order of sum of digits\n        output.push_back(nums[it->second]);\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpifmqc_m7: /tmp/tmpifmqc_m7.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> temp = nums;\n    std::sort(temp.begin(), temp.end(),\
    \ [](const long &a, const long &b) {\n        return a < b;\n    });\n    int\
    \ sum_of_digits = 0;\n    std::vector<int> sums;\n    for (int i = 0; i < temp.size();\
    \ i++) {\n        sum_of_digits = 0;\n        int cpy = temp[i];\n        if (cpy\
    \ < 0) {\n            cpy *= -1;\n        }\n        while (cpy > 0) {\n     \
    \       sum_of_digits += cpy % 10;\n            cpy /= 10;\n        }\n      \
    \  sums.push_back(sum_of_digits);\n    }\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < sums.size(); i++) {\n        for (int j = 0; j < sums.size();\
    \ j++) {\n            if (sums[i] == sums[j]) {\n                result.push_back(temp[j]);\n\
    \                sums[j] = -1;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpa98t9kz_: /tmp/tmpa98t9kz_.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> ans;\n  std::multimap<long, long> m;\n  for (auto\
    \ it = nums.begin(); it != nums.end(); it++) {\n    if (*it >= 0) {\n      int\
    \ temp = *it;\n      int sum = 0;\n      while (temp != 0) {\n        sum += temp\
    \ % 10;\n        temp /= 10;\n      }\n      m.insert(std::pair<long, long>(sum,\
    \ *it));\n    } else {\n      int temp = *it;\n      int sum = 0;\n      while\
    \ (temp != 0) {\n        sum += abs(temp % 10);\n        temp /= 10;\n      }\n\
    \      m.insert(std::pair<long, long>(sum, *it));\n    }\n  }\n  for (auto it\
    \ = m.begin(); it != m.end(); it++) {\n    ans.push_back(it->second);\n  }\n \
    \ return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpatravofx: /tmp/tmpatravofx.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<int, std::vector<long>> points;\n  for (auto i = 0; i <\
    \ nums.size(); i++) {\n    int sum = 0;\n    std::vector<long> nums_current;\n\
    \    while (nums[i] != 0) {\n      sum += nums[i] % 10;\n      nums_current.push_back(nums[i]);\n\
    \      nums[i] /= 10;\n    }\n    points[sum] = nums_current;\n  }\n  std::vector<long>\
    \ res;\n  for (auto i = points.begin(); i != points.end(); i++) {\n    for (auto\
    \ j = 0; j < i->second.size(); j++) {\n      res.push_back(i->second[j]);\n  \
    \  }\n  }\n  return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpqmjg455m: /tmp/tmpqmjg455m.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n        std::vector<long> v;\n        std::vector<long> m;\n      \
    \  std::vector<long> index;\n        int n = nums.size();\n        int sum = 0;\n\
    \        for(int i = 0; i < n; i++) {\n            if(nums[i] < 0) {\n       \
    \         nums[i] = -1 * nums[i];\n            }\n            while(nums[i] !=\
    \ 0) {\n                sum += nums[i] % 10;\n                nums[i] /= 10;\n\
    \            }\n            index.push_back(i);\n            v.push_back(sum);\n\
    \            sum = 0;\n        }\n        for(int i = 0; i < n; i++) {\n     \
    \       for(int j = i+1; j < n; j++) {\n                if(v[i] > v[j]) {\n  \
    \                  std::swap(v[i], v[j]);\n                    std::swap(index[i],\
    \ index[j]);\n                }\n            }\n        }\n        for(int i =\
    \ 0; i < n; i++) {\n            m.push_back(nums[index[i]]);\n        }\n    \
    \    return m;\n    }\n\nint main() {\n    std::vector<long> v = {1, 11, -1, -11,\
    \ -12};\n    assert(order_by_points(v) == std::vector<long>({-1, -11, 1, -12,\
    \ 11}));\n    return 0;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdb48w0l.cpp:47:5: error: redefinition of \u2018int main()\u2019\
    \n   47 | int main() {\n      |     ^~~~\n/tmp/tmpbdb48w0l.cpp:42:5: note: \u2018\
    int main()\u2019 previously defined here\n   42 | int main() {\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660111762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> nums_copy = nums;\n  std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n    int result = 0;\n    long sum_a =\
    \ 0;\n    long sum_b = 0;\n    while (a > 0) {\n      sum_a += a % 10;\n     \
    \ a /= 10;\n    }\n    while (b > 0) {\n      sum_b += b % 10;\n      b /= 10;\n\
    \    }\n    if (sum_a == sum_b) {\n      result = std::find(nums.begin(), nums.end(),\
    \ a) - nums.begin() <\n               std::find(nums.begin(), nums.end(), b) -\
    \ nums.begin();\n    } else {\n      result = sum_a < sum_b;\n    }\n    return\
    \ result;\n  });\n  return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcepnev0.cpp: In lambda function:\n/tmp/tmpgcepnev0.cpp:25:26:\
    \ error: \u2018nums\u2019 is not captured\n   25 |       result = std::find(nums.begin(),\
    \ nums.end(), a) - nums.begin() <\n      |                          ^~~~\n/tmp/tmpgcepnev0.cpp:12:50:\
    \ note: the lambda has no capture-default\n   12 |   std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n      |                             \
    \                     ^\n/tmp/tmpgcepnev0.cpp:10:53: note: \u2018std::vector<long\
    \ int> nums\u2019 declared here\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                   ~~~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpgcepnev0.cpp:25:40: error: \u2018nums\u2019 is not captured\n   25 | \
    \      result = std::find(nums.begin(), nums.end(), a) - nums.begin() <\n    \
    \  |                                        ^~~~\n/tmp/tmpgcepnev0.cpp:12:50:\
    \ note: the lambda has no capture-default\n   12 |   std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n      |                             \
    \                     ^\n/tmp/tmpgcepnev0.cpp:10:53: note: \u2018std::vector<long\
    \ int> nums\u2019 declared here\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                   ~~~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpgcepnev0.cpp:25:57: error: \u2018nums\u2019 is not captured\n   25 | \
    \      result = std::find(nums.begin(), nums.end(), a) - nums.begin() <\n    \
    \  |                                                         ^~~~\n/tmp/tmpgcepnev0.cpp:12:50:\
    \ note: the lambda has no capture-default\n   12 |   std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n      |                             \
    \                     ^\n/tmp/tmpgcepnev0.cpp:10:53: note: \u2018std::vector<long\
    \ int> nums\u2019 declared here\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                   ~~~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpgcepnev0.cpp:26:26: error: \u2018nums\u2019 is not captured\n   26 | \
    \               std::find(nums.begin(), nums.end(), b) - nums.begin();\n     \
    \ |                       "
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> final;\n    std::vector<int> sum_of_digits(nums.size());\n\
    \    int temp;\n    int j = 0;\n    if(nums.size() == 0) {\n        return final;\n\
    \    }\n    for(auto i : nums) {\n        while(i != 0) {\n            temp =\
    \ i % 10;\n            sum_of_digits[j] += temp;\n            i /= 10;\n     \
    \   }\n        j++;\n    }\n    for(int i = 0; i < nums.size(); i++) {\n     \
    \   for(int j = i + 1; j < nums.size(); j++) {\n            if(sum_of_digits[i]\
    \ > sum_of_digits[j]) {\n                std::swap(sum_of_digits[i], sum_of_digits[j]);\n\
    \                std::swap(nums[i], nums[j]);\n            }\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpp1rvxru5: /tmp/tmpp1rvxru5.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tlong long n = nums.size();\n\tstd::vector<long> out;\n\tlong i =\
    \ 0;\n\tlong long sum = 0;\n\tif (n == 0)\n\t\treturn nums;\n\twhile (i < n) {\n\
    \t\tlong num = nums[i];\n\t\tlong x = num;\n\t\twhile (x != 0) {\n\t\t\tlong long\
    \ lastDigit = x % 10;\n\t\t\tsum += lastDigit;\n\t\t\tx /= 10;\n\t\t}\n\t\tlong\
    \ long j = 0;\n\t\tlong long size = out.size();\n\t\tif (size == 0) {\n\t\t\t\
    out.push_back(num);\n\t\t} else {\n\t\t\twhile (j < size) {\n\t\t\t\tlong long\
    \ y = out[j];\n\t\t\t\tlong long sum_temp = 0;\n\t\t\t\twhile (y != 0) {\n\t\t\
    \t\t\tlong long lastDigit = y % 10;\n\t\t\t\t\tsum_temp += lastDigit;\n\t\t\t\t\
    \ty /= 10;\n\t\t\t\t}\n\t\t\t\tif (sum < sum_temp) {\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == size) {\n\t\t\t\tout.push_back(num);\n\
    \t\t\t} else {\n\t\t\t\tout.insert(out.begin() + j, num);\n\t\t\t}\n\t\t}\n\t\t\
    i++;\n\t\tsum = 0;\n\t}\n\treturn out;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpel6pzkpv: /tmp/tmpel6pzkpv.cpp:56: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // your code here\n  std::vector<long> result;\n  std::vector<long>\
    \ temp;\n  std::vector<long> temp1;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  for(int i=0;i<nums.size();i++)\n  {\n    temp.push_back(nums[i]);\n\
    \  }\n  while(temp.size()>0)\n  {\n    int max = 0;\n    int flag = 0;\n    int\
    \ count = 0;\n    while(count<temp.size())\n    {\n      long sum = 0;\n     \
    \ int flag1 = 0;\n      int num = temp[count];\n      if(num<0)\n      {\n   \
    \     num = num*(-1);\n        flag1 = 1;\n      }\n      while(num>0)\n     \
    \ {\n        sum += num%10;\n        num = num/10;\n      }\n      if(sum>max)\n\
    \      {\n        max = sum;\n        temp1.clear();\n        if(flag1 == 1)\n\
    \        {\n          temp1.push_back(temp[count]*(-1));\n        }\n        else\n\
    \        {\n          temp1.push_back(temp[count]);\n        }\n        flag =\
    \ 1;\n      }\n      else if(sum == max)\n      {\n        if(flag1 == 1)\n  \
    \      {\n          temp1.push_back(temp[count]*(-1));\n        }\n        else\n\
    \        {\n          temp1.push_back(temp[count]);\n        }\n      }\n    \
    \  count += 1;\n    }\n    if(flag == 1)\n    {\n      for(int i=0;i<temp1.size();i++)\n\
    \      {\n        temp2.push_back(temp1[i]);\n      }\n    }\n    else\n    {\n\
    \      for(int i=0;i<temp.size();i++)\n      {\n        temp2.push_back(temp[i]);\n\
    \      }\n    }\n    for(int i=0;i<temp.size();i++)\n    {\n     \n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpez36apo9.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpez36apo9.cpp:86:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   86 | int main() {\n      |     \
    \       ^\n/tmp/tmpez36apo9.cpp:94:1: error: expected \u2018}\u2019 at end of\
    \ input\n   94 | }\n      | ^\n/tmp/tmpez36apo9.cpp:22:3: note: to match this\
    \ \u2018{\u2019\n   22 |   {\n      |   ^\n/tmp/tmpez36apo9.cpp:94:1: error: expected\
    \ \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmpez36apo9.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmpez36apo9.cpp:94:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   94 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // If your solution is incorrect it will fail this test.\n    assert(nums.size()\
    \ < 10e4);\n    // Add your code here!\n    int sum = 0;\n    std::vector<long>\
    \ ans;\n    for(int i = 0; i < nums.size(); i++){\n        sum = 0;\n        while(nums[i]\
    \ > 0){\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n      \
    \  }\n        ans.push_back(sum);\n    }\n    std::vector<long> sorted_nums =\
    \ nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long>\
    \ v(sorted_nums.size());\n    std::vector<long>::iterator it = std::set_difference(nums.begin(),\
    \ nums.end(), sorted_nums.begin(), sorted_nums.end(), v.begin());\n    v.resize(it\
    \ - v.begin());\n    sorted_nums.insert(sorted_nums.end(), v.begin(), v.end());\n\
    \    // Return an array of integers sorted by the sum of their digits.\n    return\
    \ sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp0p3mww3b: /tmp/tmp0p3mww3b.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, std::vector<long>> res;\n    std::vector<long> sum;\n\
    \    long s = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        s = nums[i];\n\
    \        while (s != 0) {\n            sum.push_back(s % 10);\n            s /=\
    \ 10;\n        }\n        res[std::accumulate(sum.begin(), sum.end(), 0)].push_back(nums[i]);\n\
    \        sum.clear();\n    }\n    std::vector<long> answer;\n    for (auto i :\
    \ res) {\n        for (auto j : i.second) {\n            answer.push_back(j);\n\
    \        }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp2ku9w322: /tmp/tmp2ku9w322.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.size() <= 1) return nums;\n    std::vector<std::pair<long,\
    \ long>> digits_sum;\n    for (int i = 0; i < nums.size(); i++) {\n        digits_sum.push_back(std::make_pair(i,\
    \ abs(nums[i])));\n    }\n    for (int i = 0; i < digits_sum.size(); i++) {\n\
    \        long sum = 0;\n        long temp = digits_sum[i].second;\n        while\
    \ (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n    \
    \    }\n        digits_sum[i].second = sum;\n    }\n    std::sort(digits_sum.begin(),\
    \ digits_sum.end(),\n    [](std::pair<long, long> a, std::pair<long, long> b)\
    \ {\n        if (a.second != b.second) {\n            return a.second < b.second;\n\
    \        } else {\n            return a.first < b.first;\n        }\n    });\n\
    \    std::vector<long> result;\n    for (int i = 0; i < digits_sum.size(); i++)\
    \ {\n        result.push_back(nums[digits_sum[i].first]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp82n0llv9: /tmp/tmp82n0llv9.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  if (nums.size() == 0) {\n    return\
    \ result;\n  }\n  std::vector<long> sums;\n  for (long num : nums) {\n    sums.push_back(sumDigits(num));\n\
    \  }\n  return getSortedIndex(sums);\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkdch1u7.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphkdch1u7.cpp:17:20: error: \u2018sumDigits\u2019 was not\
    \ declared in this scope\n   17 |     sums.push_back(sumDigits(num));\n      |\
    \                    ^~~~~~~~~\n/tmp/tmphkdch1u7.cpp:19:10: error: \u2018getSortedIndex\u2019\
    \ was not declared in this scope\n   19 |   return getSortedIndex(sums);\n   \
    \   |          ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  for (int i = 0; i < nums.size(); i++) {\n    for (int j = i; j <\
    \ nums.size(); j++) {\n      int iSum = 0;\n      int jSum = 0;\n      while (nums[i]\
    \ != 0) {\n        iSum += nums[i] % 10;\n        nums[i] /= 10;\n      }\n  \
    \    while (nums[j] != 0) {\n        jSum += nums[j] % 10;\n        nums[j] /=\
    \ 10;\n      }\n      if (iSum > jSum) {\n        int temp = nums[i];\n      \
    \  nums[i] = nums[j];\n        nums[j] = temp;\n      }\n    }\n  }\n  return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpvu3gq09l: /tmp/tmpvu3gq09l.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](const long &a, const long\
    \ &b) -> bool {\n        int asum = 0, bsum = 0;\n        long atemp = a, btemp\
    \ = b;\n        while (atemp != 0) {\n            asum += atemp % 10;\n      \
    \      atemp /= 10;\n        }\n        while (btemp != 0) {\n            bsum\
    \ += btemp % 10;\n            btemp /= 10;\n        }\n        return asum ==\
    \ bsum ? a < b : asum < bsum;\n    });\n    return nums;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpa_7l57n8: /tmp/tmpa_7l57n8.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    if(nums.size() < 1) return ans;\n \
    \   auto getSum = [](long n) {\n        long sum = 0;\n        while(n > 0) {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n\
    \    };\n    std::unordered_map<long, std::vector<long>> mp;\n    for(auto v :\
    \ nums) {\n        mp[getSum(v)].push_back(v);\n    }\n    for(auto x : mp) {\n\
    \        sort(x.second.begin(), x.second.end());\n        for(auto v : x.second)\
    \ {\n            ans.push_back(v);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpogttcuqq: /tmp/tmpogttcuqq.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n   /*\n   vector<vector<long>> sorted_nums(11);\n   for (int i = 0;\
    \ i < nums.size(); i++) {\n       int curr_sum = 0;\n       long curr_num = nums[i];\n\
    \       while (curr_num != 0) {\n           curr_sum += curr_num % 10;\n     \
    \      curr_num /= 10;\n       }\n       sorted_nums[curr_sum].push_back(nums[i]);\n\
    \   }\n   vector<long> result;\n   for (int i = 0; i < sorted_nums.size(); i++)\
    \ {\n       sort(sorted_nums[i].begin(), sorted_nums[i].end());\n       result.insert(result.end(),\
    \ sorted_nums[i].begin(), sorted_nums[i].end());\n   }\n   return result;\n  \
    \ */\n   std::vector<std::pair<int, long>> to_sort;\n   for (int i = 0; i < nums.size();\
    \ i++) {\n       to_sort.push_back(std::make_pair(sum_of_digits(nums[i]), nums[i]));\n\
    \   }\n   std::sort(to_sort.begin(), to_sort.end());\n   std::vector<long> result;\n\
    \   for (int i = 0; i < to_sort.size(); i++) {\n       result.push_back(to_sort[i].second);\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23iy6k1s.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp23iy6k1s.cpp:31:41: error: \u2018sum_of_digits\u2019 was\
    \ not declared in this scope\n   31 |        to_sort.push_back(std::make_pair(sum_of_digits(nums[i]),\
    \ nums[i]));\n      |                                         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long>::iterator it;\n\tfor (it = nums.begin(); it !=\
    \ nums.end(); it++) {\n\t\tstd::cout << *it << \" \";\n\t}\n\tstd::cout << \"\\\
    n\";\n\tstd::map<int, int> mp;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    int summ = 0;\n\t\twhile (nums[i] != 0) {\n\t\t\tsumm += nums[i] % 10;\n\t\t\t\
    nums[i] /= 10;\n\t\t}\n\t\tmp[summ] = i;\n\t}\n\tstd::vector<long> vec;\n\tfor\
    \ (auto it : mp) {\n\t\tvec.push_back(nums[it.second]);\n\t}\n\treturn vec;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpr5ypdunv: /tmp/tmpr5ypdunv.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> ret_vec;\n  long sum_of_elements;\n  std::map<long,\
    \ long> map_obj;\n  std::map<long, long>::iterator iter;\n  std::map<long, long>::iterator\
    \ iter_2;\n  std::vector<long>::iterator vit;\n  std::vector<long>::iterator vit_2;\n\
    \  for (vit = nums.begin(); vit != nums.end(); vit++) {\n    sum_of_elements =\
    \ 0;\n    for (long i = *vit; i != 0; i /= 10) {\n      sum_of_elements += i %\
    \ 10;\n    }\n    map_obj.insert(std::pair<long, long>(sum_of_elements, *vit));\n\
    \  }\n  for (iter = map_obj.begin(); iter != map_obj.end(); iter++) {\n    ret_vec.push_back(iter->second);\n\
    \  }\n  return ret_vec;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpb29psbky: /tmp/tmpb29psbky.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // make a map of key = sum of digits in a number, and value = vector\
    \ of numbers with the same sum of digits\n  std::map<int, std::vector<long>> key_to_nums;\n\
    \  // iterate over input vector\n  for (long num : nums) {\n    // calculate sum\
    \ of digits\n    int sum = 0;\n    long n = num;\n    while (n != 0) {\n     \
    \ sum += n % 10;\n      n /= 10;\n    }\n    // add the number to vector of numbers\
    \ with the same sum of digits\n    key_to_nums[sum].push_back(num);\n  }\n  //\
    \ make output vector and fill it with sorted elements\n  std::vector<long> res;\n\
    \  for (const auto& item : key_to_nums) {\n    for (long num : item.second) {\n\
    \      res.push_back(num);\n    }\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpbnylw3g9: /tmp/tmpbnylw3g9.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    std::map<long,std::vector<long>>\
    \ indices;\n    for(int i=0;i<nums.size();i++){\n        int total=0;\n      \
    \  int num=nums[i];\n        if(num<0){\n            num=num*-1;\n        }\n\
    \        while(num>0){\n            total+=num%10;\n            num=num/10;\n\
    \        }\n        indices[total].push_back(nums[i]);\n    }\n    for(auto it=indices.begin();it!=indices.end();it++){\n\
    \        for(int i=0;i<it->second.size();i++){\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1mhehj25: /tmp/tmp1mhehj25.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int size = nums.size();\n    if(size == 0){\n        return nums;\n\
    \    }\n    int arr[size];\n    for(int i = 0; i < size; i++){\n        int s\
    \ = 0;\n        int a = nums[i];\n        if(a < 0){\n            a = abs(a);\n\
    \        }\n        while(a > 0){\n            s += a % 10;\n            a /=\
    \ 10;\n        }\n        arr[i] = s;\n    }\n    for(int i = 0; i < size; i++){\n\
    \        for(int j = i + 1; j < size; j++){\n            if(arr[i] > arr[j]){\n\
    \                std::swap(arr[i], arr[j]);\n                std::swap(nums[i],\
    \ nums[j]);\n            }else if(arr[i] == arr[j]){\n                if(nums[i]\
    \ > nums[j]){\n                    std::swap(nums[i], nums[j]);\n            \
    \    }\n            }\n        }\n    }\n    return nums;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpjzcqgvr2: /tmp/tmpjzcqgvr2.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<std::pair<long, int>>\
    \ myVec;\n    for (int i = 0; i < nums.size(); i++) {\n        std::pair<long,\
    \ int> p(nums[i], i);\n        myVec.push_back(p);\n    }\n    std::vector<long>\
    \ result;\n    auto compSum = [](std::pair<long, int> a, std::pair<long, int>\
    \ b) {\n                                                                    int\
    \ i = std::to_string(a.first).size();\n                                      \
    \                              int sum1 = 0;\n                               \
    \                                     int sum2 = 0;\n                        \
    \                                            for (int j = 0; j < i; j++) {\n \
    \                                                                       sum1 +=\
    \ std::to_string(a.first)[j] - '0';\n                                        \
    \                                sum2 += std::to_string(b.first)[j] - '0';\n \
    \                                                                   }\n      \
    \                                                              if (sum1 == sum2)\n\
    \                                                                        return\
    \ a.second < b.second;\n                                                     \
    \               return sum1 < sum2;\n                                        \
    \                        };\n    std::sort(myVec.begin(), myVec.end(), compSum);\n\
    \    for (int i = 0; i < myVec.size(); i++) {\n        result.push_back(myVec[i].first);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp9hnyn6c6: /tmp/tmp9hnyn6c6.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  long index = 0;\n  // TODO: replace this with your implementation\n\
    \  std::vector<long> result;\n  std::multimap<long, long> mmap;\n  for (auto num\
    \ : nums) {\n    long sum = 0;\n    long count = num;\n    while (count != 0)\
    \ {\n      sum += count % 10;\n      count /= 10;\n    }\n    mmap.insert(std::pair<long,\
    \ long>(sum, num));\n  }\n  for (auto i = mmap.begin(); i != mmap.end(); i++)\
    \ {\n    result.push_back(i->second);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp5r_c524i: /tmp/tmp5r_c524i.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result, values;\n    int sum{}, temp{};\n   \
    \ for(int i=0; i<nums.size(); i++){\n        temp = nums[i];\n        sum = 0;\n\
    \        if(temp<0){\n            temp = temp*(-1);\n        }\n        while(temp!=0){\n\
    \            sum = sum + temp%10;\n            temp = temp/10;\n        }\n  \
    \      values.push_back(sum);\n    }\n    std::vector<long> original = nums;\n\
    \    int minIndex{}, minValue{};\n    while(values.size()!=0){\n        minValue\
    \ = values[0];\n        minIndex = 0;\n        for(int i=0; i<values.size(); i++){\n\
    \            if(values[i]<minValue){\n                minValue = values[i];\n\
    \                minIndex = i;\n            }\n        }\n        for(int i=0;\
    \ i<original.size(); i++){\n            if(original[i]==nums[minIndex]){\n   \
    \             result.push_back(original[i]);\n                original.erase(original.begin()+i);\n\
    \                nums.erase(nums.begin()+minIndex);\n                values.erase(values.begin()+minIndex);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpolm9_mms: /tmp/tmpolm9_mms.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> number_digits_sum;\n\tstd::vector<long> nums_with_digits_sum;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tstd::vector<int> digits;\n\t\t\
    long temp_sum = 0;\n\t\tif (nums[i] < 0) {\n\t\t\tnums[i] = nums[i] * -1;\n\t\t\
    }\n\t\tlong curr_num = nums[i];\n\t\twhile (curr_num != 0) {\n\t\t\tint rem =\
    \ curr_num % 10;\n\t\t\tcurr_num = curr_num / 10;\n\t\t\tdigits.push_back(rem);\n\
    \t\t}\n\t\tfor (int j = 0; j < digits.size(); j++) {\n\t\t\ttemp_sum += digits[j];\n\
    \t\t}\n\t\tnumber_digits_sum.push_back(temp_sum);\n\t}\n\tint max_sum = number_digits_sum[0];\n\
    \tfor (int i = 0; i < number_digits_sum.size(); i++) {\n\t\tif (number_digits_sum[i]\
    \ > max_sum) {\n\t\t\tmax_sum = number_digits_sum[i];\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i <= max_sum; i++) {\n\t\tfor (int j = 0; j < number_digits_sum.size();\
    \ j++) {\n\t\t\tif (number_digits_sum[j] == i) {\n\t\t\t\tnums_with_digits_sum.push_back(nums[j]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn nums_with_digits_sum;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpxr5t28bw: /tmp/tmpxr5t28bw.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long,int>> with_sums;\n    int sum = 0;\n\
    \    for(int i = 0; i < nums.size(); ++i){\n        sum = 0;\n        int temp\
    \ = nums[i];\n        while(temp != 0){\n            sum += temp % 10;\n     \
    \       temp /= 10;\n        }\n        with_sums.push_back(std::make_pair(sum,i));\n\
    \    }\n    std::sort(with_sums.begin(),with_sums.end());\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < with_sums.size(); ++i){\n        result.push_back(nums[with_sums[i].second]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp9rxhsrae: /tmp/tmp9rxhsrae.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    //TODO: Write your code here\n    std::vector<long> result(nums.size());\n\
    \    std::vector<long> digits;\n    long sum = 0;\n    long min = 0;\n    long\
    \ max = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n\
    \            nums[i] = std::abs(nums[i]);\n        }\n        if(nums[i] < 10){\n\
    \            digits.push_back(nums[i]);\n        }else{\n            sum = 0;\n\
    \            int count = 0;\n            long rem = 0;\n            while(nums[i]\
    \ != 0){\n                rem = nums[i] % 10;\n                sum += rem;\n \
    \               nums[i] = nums[i] / 10;\n                count++;\n          \
    \  }\n            digits.push_back(sum);\n        }\n    }\n    std::sort(digits.begin(),\
    \ digits.end());\n    int j = 0;\n    for(int i = 0; i < digits.size(); i++){\n\
    \        j = 0;\n        for(j = 0; j < nums.size(); j++){\n            if(digits[i]\
    \ == nums[j]){\n                result[i] = nums[j];\n                nums[j]\
    \ = 0;\n                break;\n            }\n        }\n        if(j == nums.size()){\n\
    \            for(j = 0; j < nums.size(); j++){\n                if(digits[i] ==\
    \ std::abs(nums[j])){\n                    result[i] = nums[j];\n            \
    \        nums[j] = 0;\n                    break;\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmxar0giz: /tmp/tmpmxar0giz.cpp:61: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> sum_digits;\n\tint size = nums.size();\n\tfor (long\
    \ i = 0; i < size; i++) {\n\t\tlong temp = nums[i];\n\t\tlong sum = 0;\n\t\twhile\
    \ (temp > 0) {\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tsum_digits.push_back(sum);\n\
    \t}\n\tstd::vector<long> copy = nums;\n\tstd::sort(copy.begin(), copy.end());\n\
    \tstd::vector<long> result;\n\tfor (long i = 0; i < size; i++) {\n\t\tfor (long\
    \ j = 0; j < size; j++) {\n\t\t\tif (sum_digits[j] == i) {\n\t\t\t\tfor (auto&\
    \ n : copy) {\n\t\t\t\t\tif (sum_digits[j] == sum_digits[nums.at(n)]) {\n\t\t\t\
    \t\t\tresult.push_back(n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 18446744073709551604) >= this->size()\
    \ (which is 5)\n"
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long,int>> vec;\n    for(int i=0;i<nums.size();i++){\n\
    \        long sum=0;\n        long digit = nums[i];\n        while(digit!=0){\n\
    \            sum+=digit%10;\n            digit/=10;\n        }\n        vec.push_back(std::make_pair(sum,i));\n\
    \    }\n    std::sort(vec.begin(),vec.end());\n    std::vector<long> result;\n\
    \    for(int i=0;i<vec.size();i++){\n        result.push_back(nums[vec[i].second]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp_cmp5xle: /tmp/tmp_cmp5xle.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> v;\n\t// Convert vector to map.\n\tstd::map<long,\
    \ long> m;\n\tfor (auto num : nums) {\n\t\tm[num] = 0;\n\t}\n\t// count sum of\
    \ digits of each number.\n\tfor (auto num : nums) {\n\t\tlong sum = 0;\n\t\tlong\
    \ n = std::abs(num);\n\t\twhile (n != 0) {\n\t\t\tsum += n % 10;\n\t\t\tn /= 10;\n\
    \t\t}\n\t\tm[num] = sum;\n\t}\n\t// Sort the map\n\tstd::multimap<long, long>\
    \ mm;\n\tfor (auto p : m) {\n\t\tmm.insert(std::make_pair(p.second, p.first));\n\
    \t}\n\t// Extract sorted items from the map.\n\tfor (auto p : mm) {\n\t\tv.push_back(p.second);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp3y6cv6ut: /tmp/tmp3y6cv6ut.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> sorted_nums;\n  std::map<int, std::vector<long>>\
    \ map;\n  std::map<int, std::vector<long>>::iterator it;\n  for (long i: nums)\
    \ {\n    int sum = 0;\n    if (i == 0) {\n      map[sum].push_back(i);\n    }\
    \ else {\n      if (i < 0) {\n        i = i * -1;\n      }\n      while (i > 0)\
    \ {\n        sum += i % 10;\n        i = i / 10;\n      }\n      map[sum].push_back(i);\n\
    \    }\n  }\n  for (it = map.begin(); it != map.end(); it++) {\n    std::vector<long>\
    \ sub = it->second;\n    for (long l: sub) {\n      sorted_nums.push_back(l);\n\
    \    }\n  }\n  return sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmu7h3v96: /tmp/tmpmu7h3v96.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<long, std::vector<long> > numMap;\n\tfor (size_t i = 0;\
    \ i < nums.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong num = abs(nums[i]);\n\t\
    \twhile (num > 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tnumMap[sum].push_back(nums[i]);\n\
    \t}\n\tstd::vector<long> result;\n\tfor (auto num : numMap) {\n\t\tresult.insert(result.end(),\
    \ num.second.begin(), num.second.end());\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgrg6s4hn: /tmp/tmpgrg6s4hn.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\nstd::vector<long> ret;\nstd::vector<long> s;\nint sum = 0;\nint len\
    \ = nums.size();\nfor(int i = 0; i < len; i++)\n{\nint temp = nums[i];\nsum =\
    \ 0;\nwhile(temp != 0)\n{\nsum += temp % 10;\ntemp /= 10;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ziwnfwu.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3ziwnfwu.cpp:24:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   24 | int main() {\n      |     \
    \       ^\n/tmp/tmp3ziwnfwu.cpp:32:1: error: expected \u2018}\u2019 at end of\
    \ input\n   32 | }\n      | ^\n/tmp/tmp3ziwnfwu.cpp:16:1: note: to match this\
    \ \u2018{\u2019\n   16 | {\n      | ^\n/tmp/tmp3ziwnfwu.cpp:32:1: error: expected\
    \ \u2018}\u2019 at end of input\n   32 | }\n      | ^\n/tmp/tmp3ziwnfwu.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmp3ziwnfwu.cpp:32:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   32 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> nums_new = nums;\n  std::map<int,std::vector<long>>\
    \ sum_num;\n  std::vector<int> sum_num_key;\n  std::sort(nums_new.begin(),nums_new.end());\n\
    \  for(auto i = nums_new.begin();i!=nums_new.end();i++){\n    int sum = 0;\n \
    \   int num = *i;\n    while(num){\n      sum += num%10;\n      num /= 10;\n \
    \   }\n    auto it = sum_num.find(sum);\n    if(it!=sum_num.end()){\n      sum_num[sum].push_back(*i);\n\
    \    }\n    else{\n      sum_num_key.push_back(sum);\n      sum_num[sum].push_back(*i);\n\
    \    }\n  }\n  std::sort(sum_num_key.begin(),sum_num_key.end());\n  std::vector<long>\
    \ result;\n  for(auto i = sum_num_key.begin();i!=sum_num_key.end();i++){\n   \
    \ for(auto j = sum_num[*i].begin();j!=sum_num[*i].end();j++){\n      result.push_back(*j);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp_ctxhdwr: /tmp/tmp_ctxhdwr.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, int>> sums;\n    for (auto it = nums.begin();\
    \ it != nums.end(); ++it) {\n        sums.push_back(std::make_pair(std::abs(*it),\
    \ *it));\n    }\n    // Sort vector of pairs by the first field\n    // in ascending\
    \ order\n    std::sort(sums.begin(), sums.end());\n    // Extract values from\
    \ pairs\n    for (auto it = sums.begin(); it != sums.end(); ++it) {\n        it->first\
    \ = it->second;\n    }\n    std::vector<long> res;\n    for (auto it = sums.begin();\
    \ it != sums.end(); ++it) {\n        res.push_back(it->first);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmps8tvswhc: /tmp/tmps8tvswhc.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> v;\n    for(auto i = 0; i < nums.size(); i++)\
    \ {\n        std::vector<int> temp;\n        auto num = nums[i];\n        while(num\
    \ != 0) {\n            temp.push_back(num % 10);\n            num /= 10;\n   \
    \     }\n        auto sum = std::accumulate(temp.begin(), temp.end(), 0);\n  \
    \      v.push_back(sum);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpqpl70sh5: /tmp/tmpqpl70sh5.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums2;\n    for(long long i=0;i<nums.size();i++){\n\
    \        long long x = nums[i];\n        long long sum=0;\n        while(x>0){\n\
    \            sum+=(x%10);\n            x/=10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::vector<long> orig;\n    orig = nums;\n    std::sort(nums2.begin(),nums2.end());\n\
    \    std::vector<long> ans;\n    for(long long i=0;i<nums2.size();i++){\n    \
    \    for(long long j=0;j<nums.size();j++){\n            long long x = nums[j];\n\
    \            long long sum=0;\n            while(x>0){\n                sum+=(x%10);\n\
    \                x/=10;\n            }\n            if(sum==nums2[i]){\n     \
    \           ans.push_back(nums[j]);\n                nums[j]=-1;\n           \
    \     break;\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpz9elj5ek: /tmp/tmpz9elj5ek.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code goes here\n    std::vector<long>copy_nums = nums;\n\
    \    std::sort(copy_nums.begin(), copy_nums.end(), [nums](const long a, const\
    \ long b) {\n        auto pos_a = std::find(nums.begin(), nums.end(), a);\n  \
    \      auto pos_b = std::find(nums.begin(), nums.end(), b);\n        long sum_a\
    \ = std::accumulate(pos_a, pos_a + 1, 0, [](long a, long b) {\n            return\
    \ a + std::abs(b);\n        });\n        long sum_b = std::accumulate(pos_b, pos_b\
    \ + 1, 0, [](long a, long b) {\n            return a + std::abs(b);\n        });\n\
    \        return sum_a < sum_b;\n    });\n    return copy_nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmphreflpn4: /tmp/tmphreflpn4.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.size() == 0) {\n        return {};\n    }\n    // iterate\
    \ over the input vector, store the sums and indices in a map\n    std::unordered_map<long,\
    \ std::vector<long>> map;\n    for (long i = 0; i < nums.size(); i++) {\n    \
    \    // get the sum of digits\n        long num = nums[i];\n        long sum =\
    \ 0;\n        while (num != 0) {\n            long digit = num % 10;\n       \
    \     sum += digit;\n            num /= 10;\n        }\n        // if the key\
    \ is not present, create a new vector with the number\n        if (map.find(sum)\
    \ == map.end()) {\n            map[sum] = { nums[i] };\n        }\n        //\
    \ if the key is present, add the number to the vector\n        else {\n      \
    \      map[sum].push_back(nums[i]);\n        }\n    }\n    // sort the keys in\
    \ ascending order\n    std::vector<long> sum_vec;\n    std::unordered_map<long,\
    \ std::vector<long>>::iterator itr;\n    for (itr = map.begin(); itr != map.end();\
    \ itr++) {\n        sum_vec.push_back(itr->first);\n    }\n    std::sort(sum_vec.begin(),\
    \ sum_vec.end());\n    // iterate over the vector of keys and extract the values\
    \ in the map to the vector\n    std::vector<long> final_vec;\n    for (long i\
    \ = 0; i < sum_vec.size(); i++) {\n        for (long j = 0; j < map[sum_vec[i]].size();\
    \ j++) {\n            final_vec.push_back(map[sum_vec[i]][j]);\n        }\n  \
    \  }\n    return final_vec;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpjhxw0oqr: /tmp/tmpjhxw0oqr.cpp:52: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int i = 0;\n    std::vector<long> sum(nums.size());\n    while(i\
    \ < nums.size()) {\n        int temp = 0;\n        while(nums[i] > 0) {\n    \
    \        temp += nums[i] % 10;\n            nums[i] /= 10;\n        }\n      \
    \  sum[i] = temp;\n        i++;\n    }\n    std::vector<long> result(nums.size());\n\
    \    for(int i = 0; i < nums.size(); i++) {\n        int smallest = sum[0];\n\
    \        int index = 0;\n        for(int j = 0; j < nums.size(); j++) {\n    \
    \        if(sum[j] < smallest) {\n                smallest = sum[j];\n       \
    \         index = j;\n            }\n        }\n        result[i] = nums[index];\n\
    \        sum[index] = 100000;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpcsc6v4wd: /tmp/tmpcsc6v4wd.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> ret;\n\tstd::map<int, std::vector<long>> m;\n\t\
    for (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] < 0) {\n\t\t\tint sum\
    \ = abs(nums[i]);\n\t\t\tint temp = sum;\n\t\t\tint r = 0;\n\t\t\twhile (temp\
    \ > 0) {\n\t\t\t\tr += temp % 10;\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tif (m.find(r)\
    \ == m.end()) {\n\t\t\t\tstd::vector<long> v;\n\t\t\t\tv.push_back(nums[i]);\n\
    \t\t\t\tm[r] = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::vector<long> x = m[r];\n\
    \t\t\t\tx.push_back(nums[i]);\n\t\t\t\tm[r] = x;\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tint sum = nums[i];\n\t\t\tint temp = sum;\n\t\t\tint r = 0;\n\t\t\twhile\
    \ (temp > 0) {\n\t\t\t\tr += temp % 10;\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\t\
    if (m.find(r) == m.end()) {\n\t\t\t\tstd::vector<long> v;\n\t\t\t\tv.push_back(nums[i]);\n\
    \t\t\t\tm[r] = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::vector<long> x = m[r];\n\
    \t\t\t\tx.push_back(nums[i]);\n\t\t\t\tm[r] = x;\n\t\t\t}\n\t\t}\n\t}\n\tfor (auto\
    \ p : m) {\n\t\tstd::vector<long> v = p.second;\n\t\tsort(v.begin(), v.end());\n\
    \t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuag8gnx8.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuag8gnx8.cpp:59:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   59 | int main() {\n      |     \
    \       ^\n/tmp/tmpuag8gnx8.cpp:67:1: error: expected \u2018}\u2019 at end of\
    \ input\n   67 | }\n      | ^\n/tmp/tmpuag8gnx8.cpp:53:19: note: to match this\
    \ \u2018{\u2019\n   53 |  for (auto p : m) {\n      |                   ^\n/tmp/tmpuag8gnx8.cpp:67:1:\
    \ error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmpuag8gnx8.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmpuag8gnx8.cpp:67:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660111765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_sum;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        while (nums[i] != 0) {\n            sum\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        nums_sum.push_back(sum);\n\
    \    }\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i +\
    \ 1; j < nums.size(); j++) {\n            if (nums_sum[i] > nums_sum[j]) {\n \
    \               long temp = nums_sum[i];\n                nums_sum[i] = nums_sum[j];\n\
    \                nums_sum[j] = temp;\n                temp = nums[i];\n      \
    \          nums[i] = nums[j];\n                nums[j] = temp;\n            }\n\
    \        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpc2wmlis3: /tmp/tmpc2wmlis3.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// create a vector\n\tstd::vector<long> nums2;\n\t//loop through\
    \ nums vector and add the sum to the nums2 vector\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\t//sum total\n\t\tlong sum = 0;\n\t\t//current val\n\t\tlong num\
    \ = nums[i];\n\t\t//if negative, add the absolute value of the number\n\t\tif\
    \ (num < 0) {\n\t\t\tnum = abs(num);\n\t\t}\n\t\t// if the number is greater than\
    \ zero\n\t\tif (num > 0) {\n\t\t\t//while the number is greater than zero\n\t\t\
    \twhile (num > 0) {\n\t\t\t\t//add the last digit of the number to the sum\n\t\
    \t\t\tsum += num % 10;\n\t\t\t\t//remove the last digit of the number\n\t\t\t\t\
    num /= 10;\n\t\t\t}\n\t\t}\n\t\t//push the sum to the vector\n\t\tnums2.push_back(sum);\n\
    \t}\n\t// vector of structs to hold the original vector and the sum vector\n\t\
    std::vector<std::pair<long, long>> combine;\n\t//loop through the original vector\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\t//create a pair with the first\
    \ value as the original vector and the second value as the sum vector\n\t\tstd::pair<long,\
    \ long> p(nums[i], nums2[i]);\n\t\t//push the pair to the vector of structs\n\t\
    \tcombine.push_back(p);\n\t}\n\t//sort the vector of structs from smallest to\
    \ largest\n\tstd::sort(combine.begin(), combine.end(), [](const std::pair<long,\
    \ long>& a, const std::pair<long, long>& b) {\n\t\tif (a.second == b.second) {\n\
    \t\t\treturn a.first < b.first;\n\t\t}\n\t\treturn a.second < b.second;\n\t});\n\
    \t//loop through the struct vector and push the sorted original vector to the\
    \ nums2 vector\n\tfor (\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv780_76m.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv780_76m.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpv780_76m.cpp:54:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n/tmp/tmpv780_76m.cpp:53:7:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   53 |  for (\n \
    \     |       ^\n      |       ;\n   54 | }\n      | ~      \n/tmp/tmpv780_76m.cpp:54:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   54 | }\n \
    \     | ^\n/tmp/tmpv780_76m.cpp:53:7: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   53 |  for (\n      |      ~^\n      |       )\n   54 | }\n \
    \     | ~      \n/tmp/tmpv780_76m.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpv780_76m.cpp:54:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tstd::vector<long> temp(nums.size());\n\
    \tlong sum = 0;\n\tlong sum2 = 0;\n\t//int k = nums.size();\n\tint count = 0;\n\
    \t//std::vector<long> result(nums.size());\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tsum = 0;\n\t\tint number = nums[i];\n\t\twhile (number > 0) {\n\t\
    \t\tsum += number % 10;\n\t\t\tnumber /= 10;\n\t\t}\n\t\ttemp[i] = sum;\n\t}\n\
    \twhile (count != nums.size()) {\n\t\tsum2 = 0;\n\t\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\t\tif (temp[i] > sum2) {\n\t\t\t\tsum2 = temp[i];\n\t\t\t}\n\t\t\
    }\n\t\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\tif (temp[i] == sum2) {\n\
    \t\t\t\tresult.push_back(nums[i]);\n\t\t\t\tcount++;\n\t\t\t\ttemp[i] = -1;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpq19acdl3: /tmp/tmpq19acdl3.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n    // *** IMPORTANT ******\n    // This code\
    \ will be used to test your code,\n    // so make sure that your code has no errors.\n\
    \    // If there are errors, your code will not work properly\n    // and will\
    \ result in errors.\n    // You can fix this by replacing the return statement\
    \ below\n    // with your own working code.\n    std::vector<std::pair<int, int>>\
    \ sum(nums.size());\n    std::vector<long> ordered_nums(nums.size());\n    int\
    \ sum_ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum_ = 0;\n\
    \        for (char c : std::to_string(nums[i])) {\n            sum_ += c - '0';\n\
    \        }\n        sum[i] = std::make_pair(sum_, i);\n    }\n    std::sort(sum.begin(),\
    \ sum.end());\n    for (int i = 0; i < nums.size(); i++) {\n        ordered_nums[i]\
    \ = nums[sum[i].second];\n    }\n    return ordered_nums;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpe1s992op: /tmp/tmpe1s992op.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> new_list;\n    int max_value = 0;\n    int sum\
    \ = 0;\n    int max_index = 0;\n    while (nums.size() > 0) {\n        sum = 0;\n\
    \        max_value = 0;\n        max_index = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            long x = nums[i];\n            while (x != 0) {\n      \
    \          sum += x % 10;\n                x /= 10;\n            }\n         \
    \   if (sum > max_value) {\n                max_value = sum;\n               \
    \ max_index = i;\n            }\n            sum = 0;\n        }\n        new_list.push_back(nums[max_index]);\n\
    \        nums.erase(nums.begin() + max_index);\n    }\n    return new_list;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpaiu51an3: /tmp/tmpaiu51an3.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> points_idx;\n    for (long idx\
    \ = 0; idx < nums.size(); idx++) {\n        long points = nums[idx];\n       \
    \ long sum = 0;\n        while (points != 0) {\n            sum += points % 10;\n\
    \            points /= 10;\n        }\n        points_idx.push_back(std::make_pair(sum,\
    \ idx));\n    }\n    std::sort(points_idx.begin(), points_idx.end());\n    std::vector<long>\
    \ result;\n    for (auto pair : points_idx) {\n        result.push_back(nums[pair.second]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmk2jbkxa: /tmp/tmpmk2jbkxa.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    auto\
    \ calc_sum = [](long n) {\n      long s = 0;\n      while (n) {\n        s +=\
    \ n % 10;\n        n /= 10;\n      }\n      return s;\n    };\n    return calc_sum(a)\
    \ < calc_sum(b);\n  });\n  return nums;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpir15qn08: /tmp/tmpir15qn08.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<int, std::vector<long>> mp;\n\tstd::vector<long> res;\n\t\
    for (int i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tlong num = nums[i];\n\
    \t\twhile (num) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tmp[sum].push_back(nums[i]);\n\
    \t}\n\tfor (auto it = mp.begin(); it != mp.end(); it++) {\n\t\tfor (int i = 0;\
    \ i < it->second.size(); i++) {\n\t\t\tres.push_back(it->second[i]);\n\t\t}\n\t\
    }\n\treturn res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpjhsv0vja: /tmp/tmpjhsv0vja.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<int, std::vector<long>> map;\n    for (auto n : nums)\
    \ {\n        int sum = 0;\n        int i = n;\n        if (i < 0) {\n        \
    \    i = -i;\n        }\n        while (i > 0) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        map[sum].push_back(n);\n    }\n    std::vector<long>\
    \ ans;\n    for (auto &m : map) {\n        for (auto n : m.second) {\n       \
    \     ans.push_back(n);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplzvju2ak: /tmp/tmplzvju2ak.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\twhile (nums.size() != 0) {\n\t\tlong\
    \ min = 1000000, min_index = -1;\n\t\tfor (int i = 0; i < nums.size(); i++) {\n\
    \t\t\tlong sum = 0;\n\t\t\tlong t = nums[i];\n\t\t\twhile (t != 0) {\n\t\t\t\t\
    sum += t % 10;\n\t\t\t\tt /= 10;\n\t\t\t}\n\t\t\tif (sum < min) {\n\t\t\t\tmin\
    \ = sum;\n\t\t\t\tmin_index = i;\n\t\t\t}\n\t\t}\n\t\tresult.push_back(nums[min_index]);\n\
    \t\tnums.erase(nums.begin() + min_index);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp4b13567r: /tmp/tmp4b13567r.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    auto compare_func = [](long num1, long num2) {\n        long sum1\
    \ = 0, sum2 = 0;\n        while (num1 > 0) {\n            sum1 += num1 % 10;\n\
    \            num1 /= 10;\n        }\n        while (num2 > 0) {\n            sum2\
    \ += num2 % 10;\n            num2 /= 10;\n        }\n        return sum1 < sum2;\n\
    \    };\n    std::sort(nums.begin(), nums.end(), compare_func);\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmprevngtaa: /tmp/tmprevngtaa.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // sum = 0\n    // total = 0\n    //\n    // while(nums != 0)\n\
    \    // {\n    //  sum = sum + nums % 10\n    //  nums = nums / 10\n    // }\n\
    \    // return sum\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++)\n\
    \    {\n        int temp = nums[i];\n        while(temp != 0)\n        {\n   \
    \         sum = sum + temp % 10;\n            temp = temp / 10;\n        }\n \
    \       nums[i] = sum;\n        sum = 0;\n    }\n    for(int i = 0; i < nums.size();\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.size(); j++)\n        {\n \
    \           if(nums[i] > nums[j])\n            {\n                int temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpuvg59txo: /tmp/tmpuvg59txo.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> sums_nums;\n    for (long i\
    \ = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long j = std::abs(nums[i]);\
    \ j > 0; j /= 10) {\n            sum += j % 10;\n        }\n        sums_nums.push_back(std::make_pair(sum,\
    \ nums[i]));\n    }\n    std::sort(sums_nums.begin(), sums_nums.end());\n    std::vector<long>\
    \ answer;\n    for (long i = 0; i < sums_nums.size(); i++) {\n        answer.push_back(sums_nums[i].second);\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpg9mxdft7: /tmp/tmpg9mxdft7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> vec;\n\tstd::map<long, long> myMap;\n\tfor (long\
    \ num : nums) {\n\t\tlong sum = 0;\n\t\tif (num < 0) {\n\t\t\tnum = -num;\n\t\t\
    }\n\t\twhile (num != 0) {\n\t\t\tlong digit = num % 10;\n\t\t\tsum += digit;\n\
    \t\t\tnum /= 10;\n\t\t}\n\t\tmyMap[sum] = num;\n\t}\n\tauto it = myMap.begin();\n\
    \twhile (it != myMap.end()) {\n\t\tvec.push_back(it->second);\n\t\tit++;\n\t}\n\
    \treturn vec;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpvpzrx9e6: /tmp/tmpvpzrx9e6.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> vec;\n    for(int i=0;i<nums.size();i++){\n \
    \       long number = nums[i];\n        long sum=0;\n        while(number!=0){\n\
    \            sum+=number%10;\n            number/=10;\n        }\n        vec.push_back(sum);\n\
    \    }\n    std::vector<long> vec1;\n    for(int i=0;i<nums.size();i++){\n   \
    \     int smallest_index = std::min_element(vec.begin(),vec.end())-vec.begin();\n\
    \        vec1.push_back(nums[smallest_index]);\n        vec[smallest_index]=INT_MAX;\n\
    \    }\n    return vec1;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplomnxgkw: /tmp/tmplomnxgkw.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> v;\n    std::vector<long> w;\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n\
    \    int i = 0;\n    long t;\n    long sum = 0;\n    long num;\n    while (i <\
    \ nums.size()) {\n        num = nums[i];\n        if (num < 0)\n            num\
    \ = -num;\n        while (num > 0) {\n            t = num % 10;\n            sum\
    \ += t;\n            num = num / 10;\n        }\n        v.push_back(sum);\n \
    \       w.push_back(sum);\n        i++;\n        sum = 0;\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::vector<long> z(nums.size());\n    i = 0;\n    for (it =\
    \ v.begin(); it != v.end(); it++) {\n        it2 = std::find(w.begin(), w.end(),\
    \ *it);\n        it3 = nums.begin() + (it2 - w.begin());\n        z[i] = *it3;\n\
    \        i++;\n    }\n    return z;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp9hrr859p: /tmp/tmp9hrr859p.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // initialize a struct type with the sum of their digits\n    struct\
    \ item{\n        long val;\n        int sum;\n    };\n    // declare a new vector\
    \ with this struct type\n    std::vector<item> list;\n    // traverse through\
    \ the nums\n    for(auto it = nums.begin(); it != nums.end(); it++){\n       \
    \ // get the sum of each num\n        int sum = 0;\n        if(*it < 0){\n   \
    \         int value = *it * -1;\n            while(value > 0){\n             \
    \   sum += value % 10;\n                value /= 10;\n            }\n        }\n\
    \        else{\n            int value = *it;\n            while(value > 0){\n\
    \                sum += value % 10;\n                value /= 10;\n          \
    \  }\n        }\n        // put it in the list of item with the sum and its value\n\
    \        item obj;\n        obj.val = *it;\n        obj.sum = sum;\n        list.push_back(obj);\n\
    \    }\n    // sort the list of item based on the sum, if the sum is the same,\
    \ then sort it based on the index\n    sort(list.begin(), list.end(), [](const\
    \ item &a, const item &b){\n        if(a.sum == b.sum){\n            return a.val\
    \ < b.val;\n        }\n        return a.sum < b.sum;\n    });\n    // traverse\
    \ through the list\n    std::vector<long> result;\n    for(auto it = list.begin();\
    \ it != list.end(); it++){\n        // store the result in another list\n    \
    \    result.push_back(it->val);\n    }\n    // return the result\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpqtkyf2kv: /tmp/tmpqtkyf2kv.cpp:60: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpjfhh9to3: /tmp/tmpjfhh9to3.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    if (nums.size() == 0) return res;\n\
    \    std::map<long, long> hmap;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        long sum = 0;\n        long temp = nums[i];\n        if (temp < 0) temp\
    \ = temp * -1;\n        while (temp > 0) {\n            sum += temp % 10;\n  \
    \          temp /= 10;\n        }\n        hmap[nums[i]] = sum;\n    }\n    auto\
    \ itr = hmap.begin();\n    while (itr != hmap.end()) {\n        res.push_back(itr->first);\n\
    \        itr++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp9wz4m953: /tmp/tmp9wz4m953.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  std::vector<int> sums(nums.size());\n\
    \  for (int i = 0; i < nums.size(); i++) {\n    int sum = 0;\n    for (auto j\
    \ = nums[i]; j != 0; j /= 10) {\n      sum += j % 10;\n    }\n    sums[i] = sum;\n\
    \  }\n  int i = 0;\n  while (i < nums.size()) {\n    int pos = i;\n    for (int\
    \ j = i + 1; j < nums.size(); j++) {\n      if (sums[j] < sums[pos]) {\n     \
    \   pos = j;\n      }\n    }\n    result.push_back(nums[pos]);\n    int temp =\
    \ sums[i];\n    sums[i] = sums[pos];\n    sums[pos] = temp;\n    int temp2 = nums[i];\n\
    \    nums[i] = nums[pos];\n    nums[pos] = temp2;\n    i++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpyfq_78zf: /tmp/tmpyfq_78zf.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, int>> sum_of_digits;\n    int sum;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum = 0;\n        std::string\
    \ num = std::to_string(nums[i]);\n        for (int j = 0; j < num.size(); j++)\
    \ {\n            sum += num[j] - '0';\n        }\n        sum_of_digits.push_back(std::make_pair(sum,\
    \ i));\n    }\n    std::sort(sum_of_digits.begin(), sum_of_digits.end());\n  \
    \  std::vector<long> sorted_nums;\n    for (int i = 0; i < sum_of_digits.size();\
    \ i++) {\n        sorted_nums.push_back(nums[sum_of_digits[i].second]);\n    }\n\
    \    return sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1qg6g9rv: /tmp/tmp1qg6g9rv.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<std::pair<long,long>>\
    \ vec;\n    for(int i=0;i<nums.size();i++){\n        vec.push_back(std::make_pair(nums[i],i));\n\
    \    }\n    sort(vec.begin(),vec.end(),[](std::pair<long,long> &a,std::pair<long,long>\
    \ &b){\n        long a_sum=0,b_sum=0;\n        long abs_a=abs(a.first),abs_b=abs(b.first);\n\
    \        while(abs_a){\n            a_sum+=abs_a%10;\n            abs_a/=10;\n\
    \        }\n        while(abs_b){\n            b_sum+=abs_b%10;\n            abs_b/=10;\n\
    \        }\n        if(a_sum==b_sum){\n            return a.second<b.second;\n\
    \        }\n        return a_sum<b_sum;\n    });\n    std::vector<long> result;\n\
    \    for(int i=0;i<vec.size();i++){\n        result.push_back(vec[i].first);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp4rzsp2_j: /tmp/tmp4rzsp2_j.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Not sure how to implement this problem.\n    // For now just\
    \ return the vector.\n    // return nums;\n    int index = 0;\n    int arrayLength\
    \ = nums.size();\n    long temp[arrayLength];\n    long orderArray[arrayLength];\n\
    \    for (int i = 0; i < arrayLength; i++) {\n        int sum = 0;\n        while\
    \ (nums[i] != 0) {\n            int rem = nums[i] % 10;\n            sum += rem;\n\
    \            nums[i] /= 10;\n        }\n        temp[i] = sum;\n    }\n    for\
    \ (int i = 0; i < arrayLength; i++) {\n        long small = 2147483647;\n    \
    \    for (int j = 0; j < arrayLength; j++) {\n            if (temp[j] < small)\
    \ {\n                small = temp[j];\n                index = j;\n          \
    \  }\n        }\n        orderArray[i] = nums[index];\n        temp[index] = 100000000;\n\
    \    }\n    // print ordered vector\n    std::vector<long> orderedArray(orderArray,\
    \ orderArray + arrayLength);\n    for (std::vector<long>::const_iterator i = orderedArray.begin();\
    \ i != orderedArray.end(); ++i)\n        std::cout << *i << ' ';\n    return orderedArray;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpx24lt4sx: /tmp/tmpx24lt4sx.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sortByDigit = nums;\n    for (size_t i = 0; i\
    \ < sortByDigit.size(); i++) {\n        long x = 0;\n        long num = sortByDigit[i];\n\
    \        while (num != 0) {\n            x += num % 10;\n            num /= 10;\n\
    \        }\n        sortByDigit[i] = x;\n    }\n    for (size_t i = 0; i < sortByDigit.size();\
    \ i++) {\n        for (size_t j = i + 1; j < sortByDigit.size(); j++) {\n    \
    \        if (sortByDigit[i] > sortByDigit[j]) {\n                std::swap(sortByDigit[i],\
    \ sortByDigit[j]);\n                std::swap(nums[i], nums[j]);\n           \
    \ }\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp25wwurwx: /tmp/tmp25wwurwx.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tstd::map<int, int> cache;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (char c : std::to_string(nums[i]))\
    \ {\n\t\t\tsum += c - '0';\n\t\t}\n\t\tcache[sum] = nums[i];\n\t}\n\tfor (auto\
    \ it = cache.begin(); it != cache.end(); it++) {\n\t\tresult.push_back(it->second);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmppvldj29p: /tmp/tmppvldj29p.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tstd::vector<long> sum;\n\tint temp;\n\
    \tstd::vector<int> order;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\ttemp\
    \ = nums[i];\n\t\twhile (temp != 0) {\n\t\t\tsum[i] += temp % 10;\n\t\t\ttemp\
    \ /= 10;\n\t\t}\n\t}\n\tstd::sort(sum.begin(), sum.end());\n\tfor (int i = 0;\
    \ i < sum.size(); i++) {\n\t\tfor (int j = 0; j < nums.size(); j++) {\n\t\t\t\
    if (sum[i] == nums[j]) {\n\t\t\t\tresult.push_back(sum[i]);\n\t\t\t\tnums[j] =\
    \ 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> sums;\n\tstd::vector<long> answer;\n\tfor (size_t\
    \ i = 0; i < nums.size(); i++) {\n\t\tint tempsum = 0;\n\t\tstd::string temp =\
    \ std::to_string(nums[i]);\n\t\tfor (size_t j = 0; j < temp.size(); j++) {\n\t\
    \t\ttempsum += temp[j] - '0';\n\t\t}\n\t\tsums.push_back(tempsum);\n\t}\n\tlong\
    \ max = *std::max_element(sums.begin(), sums.end());\n\twhile (max > 0) {\n\t\t\
    for (size_t i = 0; i < sums.size(); i++) {\n\t\t\tif (sums[i] == max) {\n\t\t\t\
    \tanswer.push_back(nums[i]);\n\t\t\t}\n\t\t}\n\t\tmax--;\n\t}\n\treturn answer;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpuecgnhwv: /tmp/tmpuecgnhwv.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// your code here\n\tstd::vector<long> v1;\n\tstd::vector<long> v2;\n\
    \tfor (long i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] > 0) {\n\t\t\tv1.push_back(nums[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tv2.push_back(nums[i]);\n\t\t}\n\t}\n\tstd::sort(v1.begin(),\
    \ v1.end());\n\tstd::sort(v2.begin(), v2.end());\n\tstd::vector<long>::iterator\
    \ it1 = v1.begin();\n\tstd::vector<long>::iterator it2 = v2.begin();\n\tstd::vector<long>\
    \ ans;\n\twhile (it1 != v1.end() && it2 != v2.end()) {\n\t\tif (sum_digits(*it1)\
    \ < sum_digits(*it2)) {\n\t\t\tans.push_back(*it1);\n\t\t\tit1++;\n\t\t}\n\t\t\
    else {\n\t\t\tans.push_back(*it2);\n\t\t\tit2++;\n\t\t}\n\t}\n\twhile (it1 !=\
    \ v1.end()) {\n\t\tans.push_back(*it1);\n\t\tit1++;\n\t}\n\twhile (it2 != v2.end())\
    \ {\n\t\tans.push_back(*it2);\n\t\tit2++;\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdgxlimtq.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdgxlimtq.cpp:28:7: error: \u2018sum_digits\u2019 was not\
    \ declared in this scope\n   28 |   if (sum_digits(*it1) < sum_digits(*it2)) {\n\
    \      |       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\nstd::vector<long> vec;\nstd::vector<long> final_vec;\nlong num;\nint\
    \ n;\nint i;\nint count;\nint sum;\nint digit;\nint temp;\nint count_2;\nint sum_2;\n\
    \nif(nums.size()==0)\n{\n    return final_vec;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4iyd874u.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4iyd874u.cpp:27:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   27 | int main() {\n      |     \
    \       ^\n/tmp/tmp4iyd874u.cpp:35:1: error: expected \u2018}\u2019 at end of\
    \ input\n   35 | }\n      | ^\n/tmp/tmp4iyd874u.cpp:10:59: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long> nums)\
    \ {\n      |                                                           ^\n/tmp/tmp4iyd874u.cpp:35:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   35 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> s;\n    std::map<long, std::vector<long>> h;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long j = nums[i];\n   \
    \     long sum = 0;\n        while (j != 0) {\n            sum += j % 10;\n  \
    \          j /= 10;\n        }\n        h[sum].push_back(nums[i]);\n    }\n  \
    \  for (auto i = h.begin(); i != h.end(); i++) {\n        for (long j = 0; j <\
    \ i->second.size(); j++) {\n            s.push_back(i->second[j]);\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpu44fivz6: /tmp/tmpu44fivz6.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> sorted_nums;\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < nums.size(); i++) {\n        long x = 0;\n\
    \        long sum = 0;\n        while (nums[i] != 0) {\n            x = nums[i]\
    \ % 10;\n            sum += x;\n            nums[i] /= 10;\n        }\n      \
    \  sorted_nums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sorted_nums.begin(),\
    \ sorted_nums.end());\n    for (int i = 0; i < sorted_nums.size(); i++) {\n  \
    \      result.push_back(nums[sorted_nums[i].second]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp06e6tex8: /tmp/tmp06e6tex8.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int n = nums.size();\n    std::vector<std::pair<int, int>> v(n);\n\
    \    std::vector<long> ans(n);\n    for (int i = 0; i < n; i++) {\n        int\
    \ num = nums[i];\n        int sum = 0;\n        while (num) {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        v[i] = {sum, i};\n\
    \    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n\
    \        ans[i] = nums[v[i].second];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp6bsdfbru: /tmp/tmp6bsdfbru.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here.\n    std::vector<long> sorted;\n    std::vector<long>\
    \ ret;\n    if(nums.size() == 0) return nums;\n    std::map<long,long> sums;\n\
    \    for(long i=0;i<nums.size();i++){\n        long temp = nums[i];\n        long\
    \ sum = 0;\n        while(temp != 0){\n            sum += temp%10;\n         \
    \   temp = temp/10;\n        }\n        sums[sum] = nums[i];\n        sorted.push_back(sum);\n\
    \    }\n    std::sort(sorted.begin(),sorted.end());\n    for(long i=0;i<sorted.size();i++){\n\
    \        ret.push_back(sums[sorted[i]]);\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp6uwhsvsa: /tmp/tmp6uwhsvsa.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code goes here\n    if(nums.size() <= 1) return nums;\n\
    \    std::vector<long> res;\n    std::map<long, long> map_sum;\n\n    for(long\
    \ idx = 0; idx < nums.size(); idx++) {\n        long v = nums[idx];\n        long\
    \ sum = 0;\n        while(v) {\n            sum += v % 10;\n            v /= 10;\n\
    \        }\n        if(map_sum.find(sum) == map_sum.end()) {\n            map_sum[sum]\
    \ = idx;\n        } else {\n            map_sum[sum] = std::min(map_sum[sum],\
    \ idx);\n        }\n    }\n\n    for(auto it = map_sum.begin(); it != map_sum.end();\
    \ it++) {\n        long idx = it->second;\n        res.push_back(nums[idx]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpi8vele44: /tmp/tmpi8vele44.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n   std::map<int, std::vector<long>> sum_digits;\n   for (int i = 0;\
    \ i < nums.size(); i++) {\n       int sum = 0;\n       int temp = nums[i];\n \
    \      while (temp != 0) {\n           sum += temp % 10;\n           temp /= 10;\n\
    \       }\n       sum_digits[sum].push_back(nums[i]);\n   }\n   std::vector<long>\
    \ result;\n   for (auto pair : sum_digits) {\n       for (auto item : pair.second)\
    \ {\n           result.push_back(item);\n       }\n   }\n   return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpro8t8zkp: /tmp/tmpro8t8zkp.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long>::iterator it = nums.begin();\n    std::vector<std::pair<long,\
    \ long>> v;\n    while (it != nums.end()) {\n        long sum = 0;\n        long\
    \ num = *it;\n        while (num != 0) {\n            sum += num % 10;\n     \
    \       num /= 10;\n        }\n        v.push_back(std::make_pair(sum, *it));\n\
    \        it++;\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < v.size(); i++) {\n        result.push_back(v[i].second);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1cp4fyzl: /tmp/tmp1cp4fyzl.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, int>> pair;\n    for (int i = 0; i\
    \ < nums.size(); i++) {\n        int sum = 0;\n        int temp = nums[i];\n \
    \       if (temp < 0) temp *= -1;\n        while (temp > 0) {\n            sum\
    \ += temp % 10;\n            temp /= 10;\n        }\n        pair.push_back(std::make_pair(sum,\
    \ i));\n    }\n    std::sort(pair.begin(), pair.end());\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < pair.size(); i++) {\n        res.push_back(nums[pair[i].second]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpyvh7sq0d: /tmp/tmpyvh7sq0d.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> sums;\n    for (size_t i = 0;\
    \ i < nums.size(); i++) {\n        long curr = nums[i];\n        long s = 0;\n\
    \        while (curr) {\n            s += curr % 10;\n            curr /= 10;\n\
    \        }\n        sums.push_back(std::make_pair(s, i));\n    }\n    std::sort(sums.begin(),\
    \ sums.end());\n    std::vector<long> res;\n    for (auto item : sums) {\n   \
    \     res.push_back(nums[item.second]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpf6089e9p: /tmp/tmpf6089e9p.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    int i = 0;\n    while (i < nums.size())\
    \ {\n        // std::cout << \"i = \" << i << std::endl;\n        int min = INT_MAX;\n\
    \        int min_index = 0;\n        int j = 0;\n        while (j < nums.size())\
    \ {\n            if (nums[j] < min && nums[j] > 0) {\n                min = nums[j];\n\
    \                min_index = j;\n            }\n            j++;\n        }\n\
    \        result.push_back(min);\n        nums[min_index] = INT_MAX;\n        i++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmmbaulf7: /tmp/tmpmmbaulf7.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<int, std::vector<long>> refs;\n\tstd::vector<long> sorted;\n\
    \tstd::vector<int> keys;\n\tint sum = 0;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tsum = 0;\n\t\tstd::string s = std::to_string(nums[i]);\n\t\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\t\tif (isdigit(s[i]))\n\t\t\t\tsum += int(s[i]\
    \ - '0');\n\t\t}\n\t\trefs[sum].push_back(nums[i]);\n\t}\n\tstd::map<int, std::vector<long>>::iterator\
    \ itr;\n\tfor (itr = refs.begin(); itr != refs.end(); ++itr) {\n\t\tstd::sort(itr->second.begin(),\
    \ itr->second.end());\n\t\tfor (int i = 0; i < itr->second.size(); i++) {\n\t\t\
    \tsorted.push_back(itr->second[i]);\n\t\t}\n\t}\n\treturn sorted;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp845y38_s: /tmp/tmp845y38_s.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    std::map<long, long> digits;\n    std::vector<long>\
    \ keys;\n    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n\
    \        long n = nums[i];\n        while (n != 0) {\n            long rem = n\
    \ % 10;\n            sum += rem;\n            n /= 10;\n        }\n        digits[sum]\
    \ = nums[i];\n        keys.push_back(sum);\n    }\n    std::sort(keys.begin(),\
    \ keys.end());\n    for (auto &k : keys) {\n        ans.push_back(digits[k]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp5tw_s8no: /tmp/tmp5tw_s8no.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n   std::vector<long> nums_copy(nums);\n   for (int i = 0; i < nums.size();\
    \ i++) {\n      long temp = nums_copy[i];\n      int position = i;\n      for\
    \ (int j = i + 1; j < nums.size(); j++) {\n         long check = nums_copy[j];\n\
    \         if (temp % 10 + temp / 10 > check % 10 + check / 10) {\n           \
    \ temp = nums_copy[j];\n            position = j;\n         }\n      }\n     \
    \ nums_copy[position] = nums_copy[i];\n      nums_copy[i] = temp;\n   }\n   return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpm0bstfku: /tmp/tmpm0bstfku.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<int,int> map;\n    for(int i=0;i<nums.size();i++){\n \
    \       int sum=0;\n        int x=nums[i];\n        while(x>0){\n            sum+=x%10;\n\
    \            x/=10;\n        }\n        map[sum]+=1;\n    }\n    std::map<int,int>::iterator\
    \ it;\n    std::vector<long> arr;\n    for(it=map.begin();it!=map.end();it++){\n\
    \        arr.push_back(it->first);\n    }\n    std::vector<long> result;\n   \
    \ for(int i=0;i<arr.size();i++){\n        for(int j=0;j<nums.size();j++){\n  \
    \          int sum=0;\n            int x=nums[j];\n            while(x>0){\n \
    \               sum+=x%10;\n                x/=10;\n            }\n          \
    \  if(sum==arr[i]){\n                result.push_back(nums[j]);\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmphi53zi8t: /tmp/tmphi53zi8t.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, long> m1;\n    std::vector<long> keys;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        long s = 0;\n        long a = nums[i];\n\
    \        int temp = std::abs(a);\n        while (temp > 0) {\n            int\
    \ rem = temp % 10;\n            s += rem;\n            temp /= 10;\n        }\n\
    \        m1[s] = a;\n        keys.push_back(s);\n    }\n    std::sort(keys.begin(),\
    \ keys.end());\n    std::vector<long> res;\n    for (int i = 0; i < keys.size();\
    \ i++) {\n        long k = keys[i];\n        res.push_back(m1[k]);\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplw55argh: /tmp/tmplw55argh.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int n = nums.size();\n    if(n == 0)\n    {\n        return nums;\n\
    \    }\n    std::vector<long> sum_digit(n, 0);\n    for(int i = 0; i < n; i++)\n\
    \    {\n        int temp = nums[i];\n        if(temp < 0)\n        {\n       \
    \     temp = -temp;\n        }\n        while(temp > 0)\n        {\n         \
    \   sum_digit[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n\
    \        {\n            if(sum_digit[i] > sum_digit[j])\n            {\n     \
    \           std::swap(sum_digit[i], sum_digit[j]);\n                std::swap(nums[i],\
    \ nums[j]);\n            }\n            else if(sum_digit[i] == sum_digit[j])\n\
    \            {\n                if(nums[i] > nums[j])\n                {\n   \
    \                 std::swap(nums[i], nums[j]);\n                }\n          \
    \  }\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplmeoml07: /tmp/tmplmeoml07.cpp:52: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long temp = nums[i];\n \
    \       long sum = 0;\n        while (temp != 0) {\n            sum += temp %\
    \ 10;\n            temp /= 10;\n        }\n        m[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        for (int\
    \ i = 0; i < it->second.size(); i++) {\n            res.push_back(it->second[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpdw09x5zo: /tmp/tmpdw09x5zo.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    struct Temp\n    {\n        long num;\n        int sum;\n     \
    \   int index;\n    };\n    std::vector<Temp> vec;\n    vec.reserve(nums.size());\n\
    \    for(int i = 0; i < nums.size(); i++)\n    {\n        Temp temp;\n       \
    \ temp.num = nums[i];\n        temp.index = i;\n        int sum = 0;\n       \
    \ long num = std::abs(nums[i]);\n        while(num > 0)\n        {\n         \
    \   sum += num % 10;\n            num /= 10;\n        }\n        temp.sum = sum;\n\
    \        vec.push_back(temp);\n    }\n    std::sort(vec.begin(), vec.end(), [](Temp\
    \ &t1, Temp &t2) {return t1.sum < t2.sum;});\n    std::sort(vec.begin(), vec.end(),\
    \ [](Temp &t1, Temp &t2) {return t1.index < t2.index;});\n    std::vector<long>\
    \ res;\n    res.reserve(nums.size());\n    for(int i = 0; i < vec.size(); i++)\n\
    \    {\n        res.push_back(vec[i].num);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmprq4dv076: /tmp/tmprq4dv076.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    // std::vector<long> sum_vector;\n\
    \    // long int sum = 0;\n    // for(int i = 0; i < nums.size(); i++){\n    //\
    \     for(int j = 0; j < to_string(nums[i]).length(); j++){\n    //         sum\
    \ += to_string(nums[i])[j] - '0';\n    //     }\n    //     sum_vector.push_back(sum);\n\
    \    //     sum = 0;\n    // }\n    // std::vector<long> sorted_vector = nums;\n\
    \    // for(int i = 0; i < sorted_vector.size(); i++){\n    //     for(int j =\
    \ i + 1; j < sorted_vector.size(); j++){\n    //         if(sum_vector[i] > sum_vector[j]){\n\
    \    //             long temp = sorted_vector[i];\n    //             sorted_vector[i]\
    \ = sorted_vector[j];\n    //             sorted_vector[j] = temp;\n    //   \
    \      }\n    //     }\n    // }\n    // return sorted_vector;\n    std::vector<long>\
    \ zero;\n    std::vector<std::pair<long, long>> one;\n    for(int i = 0; i < nums.size();\
    \ i++){\n        long sum = 0;\n        for(int j = 0; j < to_string(nums[i]).length();\
    \ j++){\n            sum += to_string(nums[i])[j] - '0';\n        }\n        one.push_back(std::make_pair(sum,\
    \ nums[i]));\n    }\n    std::sort(one.begin(), one.end());\n    for(int i = 0;\
    \ i < one.size(); i++){\n        zero.push_back(one[i].second);\n    }\n    return\
    \ zero;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzws4ba4.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgzws4ba4.cpp:36:28: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   36 |         for(int j = 0; j < to_string(nums[i]).length(); j++){\n     \
    \ |                            ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgzws4ba4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here\n    std::vector<long> ans;\n    std::unordered_map<long,\
    \ long> hm;\n    for(int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n\
    \        int n = nums[i];\n        while(n) {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        hm[sum] += nums[i];\n    }\n    std::unordered_map<long,\
    \ long> hm2;\n    for(int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n\
    \        int n = nums[i];\n        while(n) {\n            sum += n % 10;\n  \
    \          n /= 10;\n        }\n        hm2[sum] += nums[i];\n    }\n    for(auto\
    \ it = hm.begin(); it != hm.end(); it++) {\n        ans.push_back(it->second);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    for(int i = 0; i < ans.size();\
    \ i++) {\n        auto it = hm2.find(ans[i]);\n        if(it != hm2.end()) {\n\
    \            ans[i] = it->second;\n            hm2.erase(it);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpq2_ncwug: /tmp/tmpq2_ncwug.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> int_values;\n  int_values.reserve(nums.size());\n\
    \  long sum=0;\n  std::vector<long> old;\n  std::vector<long>::iterator it;\n\
    \  for(auto num:nums){\n    old.push_back(num);\n    int v=num;\n    while(v>0){\n\
    \      sum=sum+v%10;\n      v=v/10;\n    }\n    int_values.push_back(sum);\n \
    \   sum=0;\n  }\n  for(int i=0;i<nums.size();i++){\n    it=min_element(int_values.begin(),int_values.end());\n\
    \    nums[i]=old[it-int_values.begin()];\n    int_values.erase(it);\n    old.erase(old.begin()+it-int_values.begin());\n\
    \  }\n  return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9k9gi84w.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9k9gi84w.cpp:30:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   30 |     old.erase(old.begin()+it-int_values.begin());\n      |       \
    \        ~~~~~~~~~~~^~~\n      |                        |  |\n      |        \
    \                |  __normal_iterator<[...],[...]>\n      |                  \
    \      __normal_iterator<[...],[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9k9gi84w.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::difference_type\u2019\
    \ {aka \u2018long int\u2019}\n  856 |       operator+(difference_type __n) const\
    \ _GLIBCXX_NOEXCEPT\n      |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::operator+(ty"
  stdout: ''
  timestamp: 1660111768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    int count = 0;\n    int result[nums.size()];\n\
    \    for(int i = 0; i < nums.size(); i++){\n        result[i] = std::abs(nums[i]);\n\
    \    }\n    for(int i = 0; i < nums.size(); i++){\n        if(result[i] >= 10){\n\
    \            result[i] = (result[i]/10) + (result[i]%10);\n        }\n    }\n\
    \    for(int i = 0; i < nums.size(); i++){\n        for(int j = i+1; j < nums.size();\
    \ j++){\n            if(result[i] > result[j]){\n                count = result[i];\n\
    \                result[i] = result[j];\n                result[j] = count;\n\
    \                count = nums[i];\n                nums[i] = nums[j];\n      \
    \          nums[j] = count;\n            }\n        }\n    }\n    std::vector<long>solution;\n\
    \    for(int i = 0; i < nums.size(); i++){\n        solution.push_back(nums[i]);\n\
    \    }\n    return solution;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8uxk_zn8: /tmp/tmp8uxk_zn8.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    \n    std::vector<long> sum;\n    long s = 0;\n    for(int i =\
    \ 0; i < nums.size(); i++)\n    {\n        while(nums[i] != 0)\n        {\n  \
    \          s += nums[i] % 10;\n            nums[i] /= 10;\n        }\n       \
    \ sum.push_back(s);\n        s = 0;\n    }\n    sort(sum.begin(), sum.end());\n\
    \    std::vector<long> result;\n    for(int i = 0; i < sum.size(); i++)\n    {\n\
    \        for(int j = 0; j < nums.size(); j++)\n        {\n            long num_sum\
    \ = 0;\n            long num = nums[j];\n            while(num != 0)\n       \
    \     {\n                num_sum += num % 10;\n                num /= 10;\n  \
    \          }\n            if(num_sum == sum[i])\n            {\n             \
    \   result.push_back(nums[j]);\n                nums[j] = 0;\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmph9jfbs64: /tmp/tmph9jfbs64.cpp:49: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> sumVector;\n\tstd::vector<long> originalVector;\n\
    \tfor (auto &i : nums) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j != 0; j /= 10)\
    \ {\n\t\t\tsum += j % 10;\n\t\t}\n\t\tsumVector.push_back(sum);\n\t\toriginalVector.push_back(i);\n\
    \t}\n\tsort(sumVector.begin(), sumVector.end());\n\tfor (int i = 0; i < sumVector.size();\
    \ i++) {\n\t\tfor (int j = 0; j < originalVector.size(); j++) {\n\t\t\tint sum\
    \ = 0;\n\t\t\tfor (int k = originalVector[j]; k != 0; k /= 10) {\n\t\t\t\tsum\
    \ += k % 10;\n\t\t\t}\n\t\t\tif (sum == sumVector[i]) {\n\t\t\t\tnums[i] = originalVector[j];\n\
    \t\t\t\toriginalVector[j] = 10000000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmps00b4nh9: /tmp/tmps00b4nh9.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here\n    \n    std::map<long, long> map;\n    for(long\
    \ i = 0; i < nums.size(); i++)\n    {\n        long sum = 0;\n        long num\
    \ = nums[i];\n        while(num)\n        {\n            sum += num % 10;\n  \
    \          num /= 10;\n        }\n        map[sum] = i;\n    }\n    std::vector<long>\
    \ res;\n    for(auto i = map.begin(); i != map.end(); i++)\n    {\n        res.push_back(nums[i->second]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpbwutp0or: /tmp/tmpbwutp0or.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n   std::vector<long> sums;\n   std::vector<int> points;\n   std::vector<long>\
    \ result;\n   for(int i = 0; i < nums.size(); i++){\n      long sum = 0;\n   \
    \   int temp = nums[i];\n      while(temp != 0){\n         sum += temp % 10;\n\
    \         temp /= 10;\n      }\n      sums.push_back(sum);\n      points.push_back(i);\n\
    \   }\n   std::vector<long> sorted = sums;\n   sort(sorted.begin(), sorted.end());\n\
    \   for(int i = 0; i < sorted.size(); i++){\n      for(int j = 0; j < sums.size();\
    \ j++){\n         if(sorted[i] == sums[j]){\n            result.push_back(nums[points[j]]);\n\
    \            sums[j] = -1000;\n            break;\n         }\n      }\n   }\n\
    \   return result;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp7uzwlv6c: /tmp/tmp7uzwlv6c.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long>result;\n    std::vector<int>sumofDigits;\n  \
    \  std::vector<int>index;\n    for(int i=0;i<nums.size();i++){\n        int a\
    \ = nums[i];\n        int sum = 0;\n        while(a!=0){\n            sum += a%10;\n\
    \            a/=10;\n        }\n        sumofDigits.push_back(sum);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sumofDigits.size();i++){\n        for(int j=i+1;j<sumofDigits.size();j++){\n\
    \            if(sumofDigits[i]>sumofDigits[j]){\n                swap(sumofDigits[i],sumofDigits[j]);\n\
    \                swap(index[i],index[j]);\n            }\n        }\n    }\n \
    \   for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw68xt7e3.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw68xt7e3.cpp:27:17: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   27 |                 swap(sumofDigits[i],sumofDigits[j]);\n\
    \      |                 ^~~~\n/tmp/tmpw68xt7e3.cpp:27:17: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw68xt7e3.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpw68xt7e3.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw68xt7e3.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpw68xt7e3.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx1"
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstruct Item {\n\t\tItem(long number, int index) : number(number),\
    \ index(index) {}\n\t\tlong number;\n\t\tint index;\n\t};\n\tauto sum_of_digits\
    \ = [](long num) {\n\t\tint sum = 0;\n\t\twhile (num != 0) {\n\t\t\tsum += num\
    \ % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\treturn sum;\n\t};\n\tif (nums.empty()) {\n\
    \t\treturn nums;\n\t}\n\tstd::vector<Item> table;\n\tfor (int i = 0; i < nums.size();\
    \ ++i) {\n\t\ttable.emplace_back(nums[i], i);\n\t}\n\tstd::sort(table.begin(),\
    \ table.end(), [sum_of_digits](const Item& a, const Item& b) {\n\t\tif (sum_of_digits(a.number)\
    \ == sum_of_digits(b.number)) {\n\t\t\treturn a.index < b.index;\n\t\t}\n\t\t\
    return sum_of_digits(a.number) < sum_of_digits(b.number);\n\t});\n\tstd::vector<long>\
    \ result;\n\tfor (const auto& item : table) {\n\t\tresult.push_back(item.number);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpck6ja06t: /tmp/tmpck6ja06t.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> output = nums;\n    std::sort(output.begin(),\
    \ output.end(), [](long a, long b) {\n        std::vector<int> a_digits, b_digits;\n\
    \        while (a != 0) {\n            a_digits.push_back(a % 10);\n         \
    \   a /= 10;\n        }\n        while (b != 0) {\n            b_digits.push_back(b\
    \ % 10);\n            b /= 10;\n        }\n        long a_sum = std::accumulate(a_digits.begin(),\
    \ a_digits.end(), 0);\n        long b_sum = std::accumulate(b_digits.begin(),\
    \ b_digits.end(), 0);\n        if (a_sum == b_sum) {\n            return a < b;\n\
    \        }\n        return a_sum < b_sum;\n    });\n    return output;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8rz54voz: /tmp/tmp8rz54voz.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  std::vector<int> aux;\n  int sum = 0;\n\
    \  int i = 0;\n  for (auto n : nums) {\n    i = n;\n    sum = 0;\n    while (i)\
    \ {\n      sum += i % 10;\n      i /= 10;\n    }\n    aux.push_back(sum);\n  }\n\
    \  for (int i = 0; i < nums.size(); i++) {\n    for (int j = i + 1; j < nums.size();\
    \ j++) {\n      if (aux[i] > aux[j]) {\n        std::swap(aux[i], aux[j]);\n \
    \       std::swap(nums[i], nums[j]);\n      }\n    }\n  }\n  return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgn338f4u: /tmp/tmpgn338f4u.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    std::map<long, std::vector<long>> mp;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n) {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        mp[sum].push_back(nums[i]);\n    }\n    for (auto\
    \ i : mp) {\n        std::sort(i.second.begin(), i.second.end());\n        for\
    \ (auto j : i.second) {\n            res.push_back(j);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpk4sv2m82: /tmp/tmpk4sv2m82.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int x = 0;\n        long temp = nums[i];\n        while (temp\
    \ != 0) {\n            x += temp % 10;\n            temp /= 10;\n        }\n \
    \       result.push_back(x);\n    }\n    long max = 0;\n    for (int i = 0; i\
    \ < result.size(); i++) {\n        if (result[i] > max) {\n            max = result[i];\n\
    \        }\n    }\n    std::vector<long> ans;\n    while (max > 0) {\n       \
    \ for (int i = 0; i < result.size(); i++) {\n            if (result[i] == max)\
    \ {\n                ans.push_back(nums[i]);\n            }\n        }\n     \
    \   max--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1ltifac5: /tmp/tmp1ltifac5.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sol;\n    long num = 0;\n    std::vector<long>\
    \ sums;\n    std::vector<long> index;\n    int count = 0;\n    for(auto n : nums){\n\
    \        num = 0;\n        for(auto i : to_string(n)){\n            num += i -\
    \ '0';\n        }\n        sums.push_back(num);\n        index.push_back(count);\n\
    \        count++;\n    }\n    sort(sums.begin(), sums.end());\n    sort(index.begin(),\
    \ index.end());\n    for(int i = 0; i < index.size(); i++){\n        sol.push_back(nums[index[i]]);\n\
    \    }\n    return sol;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhav3yw9.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuhav3yw9.cpp:18:22: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   18 |         for(auto i : to_string(n)){\n      |                      ^~~~~~~~~\n\
    \      |                      std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpuhav3yw9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> myvec(nums.size());\n    std::vector<long> copy_nums(nums.size());\n\
    \    std::copy(nums.begin(), nums.end(), copy_nums.begin());\n    std::sort(copy_nums.begin(),\
    \ copy_nums.end());\n    std::sort(nums.begin(), nums.end(), [](long a, long b)\
    \ {\n        return (std::abs(a) % 10 + std::abs(a) / 10) < (std::abs(b) % 10\
    \ + std::abs(b) / 10);\n    });\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        for (int j = 0; j < nums.size(); j++) {\n            if (nums[i] == copy_nums[j])\
    \ {\n                myvec[j] = nums[i];\n            }\n        }\n    }\n  \
    \  return myvec;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgiv24dkt: /tmp/tmpgiv24dkt.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sums;\n    int s = 0;\n    for (auto num : nums)\
    \ {\n        while (num != 0) {\n            s += num % 10;\n            num /=\
    \ 10;\n        }\n        sums.push_back(s);\n        s = 0;\n    }\n    std::vector<long>\
    \ order(nums.size());\n    std::vector<long>::iterator it;\n    it = std::copy(nums.begin(),\
    \ nums.end(), order.begin());\n    std::sort(sums.begin(), sums.end());\n    auto\
    \ it2 = sums.begin();\n    for (auto it = order.begin(); it != order.end(); ++it)\
    \ {\n        *it = nums[std::distance(sums.begin(), std::find(sums.begin(), sums.end(),\
    \ *it2))];\n        ++it2;\n    }\n    return order;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpp5byp6aq: /tmp/tmpp5byp6aq.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    int n = nums.size();\n    vector<long>\
    \ A;\n    vector<int> B;\n    vector<int> C;\n    vector<long> D;\n    vector<int>\
    \ E;\n    vector<int> F;\n    vector<long> G;\n    vector<int> H;\n    vector<int>\
    \ J;\n    vector<long> K;\n    vector<int> L;\n    vector<int> M;\n    vector<long>\
    \ N;\n    vector<int> O;\n    vector<int> P;\n    vector<long> Q;\n    vector<int>\
    \ R;\n    vector<int> S;\n    vector<long> T;\n    vector<int> U;\n    vector<int>\
    \ V;\n    vector<long> W;\n    vector<int> X;\n    vector<int> Y;\n    vector<long>\
    \ Z;\n    vector<int> BB;\n    vector<int> CC;\n    vector<long> DD;\n    vector<int>\
    \ EE;\n    vector<int> FF;\n    vector<long> GG;\n    vector<int> HH;\n    vector<int>\
    \ JJ;\n    vector<long> KK;\n    vector<int> LL;\n    vector<int> MM;\n    vector<long>\
    \ NN;\n    vector<int> OO;\n    vector<int> PP;\n    vector<long> QQ;\n    vector<int>\
    \ RR;\n    vector<int> SS;\n    vector<long> TT;\n    vector<int> UU;\n    vector<int>\
    \ VV;\n    vector<long> WW;\n    vector<int> XX;\n    vector<int> YY;\n    vector<long>\
    \ ZZ;\n    vector<int> BBB;\n    vector<int> CCC;\n    vector<long> DDD;\n   \
    \ vector<int> EEE;\n    vector<int> FFF;\n    vector<long> GGG;\n    vector<int>\
    \ HHH;\n    vector<int> JJJ;\n    vector<long> KKK;\n    vector<int> LLL;\n  \
    \  vector<int>\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwz_y5fbc.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwz_y5fbc.cpp:13:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   13 |     vector<long> A;\n      |     ^~~~~~\n/tmp/tmpwz_y5fbc.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwz_y5fbc.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwz_y5fbc.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpwz_y5fbc.cpp:13:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   13 |     vector<long>\
    \ A;\n      |            ^~~~\n/tmp/tmpwz_y5fbc.cpp:14:12: error: expected primary-expression\
    \ before \u2018int\u2019\n   14 |     vector<int> B;\n      |            ^~~\n\
    /tmp/tmpwz_y5fbc.cpp:15:12: error: expected primary-expression before \u2018int\u2019\
    \n   15 |     vector<int> C;\n      |            ^~~\n/tmp/tmpwz_y5fbc.cpp:16:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   16 |     vector<long>\
    \ D;\n      |            ^~~~\n/tmp/tmpwz_y5fbc.cpp:17:12: error: expected primary-expression\
    \ before \u2018int\u2019\n   17 |     vector<int> E;\n      |            ^~~\n\
    /tmp/tmpwz_y5fbc.cpp:18:12: error: expected primary-expression before \u2018int\u2019\
    \n   18 |     vector<int> F;\n      |       "
  stdout: ''
  timestamp: 1660111770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  if (nums.size() == 0) {\n    return\
    \ result;\n  }\n  std::map<long, std::vector<long>> sum_to_index;\n  std::map<long,\
    \ std::vector<long>>::iterator it;\n  std::vector<long>::iterator it2;\n  long\
    \ i = 0;\n  for (it2 = nums.begin(); it2 != nums.end(); it2++) {\n    long sum\
    \ = 0;\n    long num = *it2;\n    while (num != 0) {\n      sum += num % 10;\n\
    \      num /= 10;\n    }\n    it = sum_to_index.find(sum);\n    if (it == sum_to_index.end())\
    \ {\n      std::vector<long> temp;\n      temp.push_back(i);\n      sum_to_index.insert(std::pair<long,\
    \ std::vector<long>>(sum, temp));\n    } else {\n      it->second.push_back(i);\n\
    \    }\n    i++;\n  }\n  std::vector<long> indexes;\n  std::map<long, std::vector<long>>::iterator\
    \ it3;\n  for (it3 = sum_to_index.begin(); it3 != sum_to_index.end(); it3++) {\n\
    \    for (it2 = it3->second.begin(); it2 != it3->second.end(); it2++) {\n    \
    \  indexes.push_back(*it2);\n    }\n  }\n  for (it2 = indexes.begin(); it2 !=\
    \ indexes.end(); it2++) {\n    result.push_back(nums[*it2]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpl16igm8y: /tmp/tmpl16igm8y.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> new_list;\n\tint sum = 0;\n\tstd::vector<int> sums;\n\
    \tstd::vector<int> index;\n\t// Traverse through all numbers\n\tfor (int i = 0;\
    \ i < nums.size(); i++) {\n\t\tsum = 0;\n\t\t// Find sum of digits\n\t\twhile\
    \ (nums[i] != 0) {\n\t\t\tsum += nums[i] % 10;\n\t\t\tnums[i] /= 10;\n\t\t}\n\t\
    \tsums.push_back(sum);\n\t\tindex.push_back(i);\n\t}\n\tstd::sort(sums.begin(),\
    \ sums.end());\n\tstd::sort(index.begin(), index.end());\n\tfor (int i = 0; i\
    \ < nums.size(); i++) {\n\t\tnew_list.push_back(nums[index[i]]);\n\t}\n\treturn\
    \ new_list;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpus0q8ypc: /tmp/tmpus0q8ypc.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::map<int, long> m1;\n    std::vector<long>\
    \ result;\n    std::map<int, long>::iterator itr;\n    int sum = 0;\n    for(int\
    \ i = 0; i < nums.size(); i++) {\n        sum = 0;\n        int n = nums[i];\n\
    \        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n \
    \       }\n        m1.insert(std::pair<int, long>(sum, nums[i]));\n    }\n   \
    \ for(itr = m1.begin(); itr != m1.end(); itr++) {\n        result.push_back(itr->second);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpltphf2wr: /tmp/tmpltphf2wr.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long,long>> v;\n    for(long i=0;i<nums.size();i++){\n\
    \        v.push_back(std::make_pair(abs(nums[i]),i));\n    }\n    std::sort(v.begin(),v.end());\n\
    \    std::vector<long> ans;\n    for(auto x:v){\n        ans.push_back(nums[x.second]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp3yylpd7j: /tmp/tmp3yylpd7j.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// the sum of their digits\n\tstd::vector<std::pair<long, long>>\
    \ help;\n\tfor (size_t i = 0; i < nums.size(); i++) {\n\t\tlong sum = 0;\n\t\t\
    long temp = nums[i];\n\t\tif (temp < 0) temp *= -1;\n\t\twhile (temp > 0) {\n\t\
    \t\tlong c = temp % 10;\n\t\t\tsum += c;\n\t\t\ttemp /= 10;\n\t\t}\n\t\thelp.push_back(std::make_pair(sum,\
    \ nums[i]));\n\t}\n\tsort(help.begin(), help.end());\n\tstd::vector<long> result;\n\
    \tfor (size_t i = 0; i < help.size(); i++) {\n\t\tresult.push_back(help[i].second);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpzyd9groc: /tmp/tmpzyd9groc.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tif (nums.size() == 0)\n\t\treturn nums;\n\tint n = nums.size();\n\
    \tstd::vector<long> res(n);\n\tstd::vector<long> points(n);\n\tfor (int i = 0;\
    \ i < n; i++) {\n\t\tlong long num = nums[i];\n\t\tlong long sum = 0;\n\t\twhile\
    \ (num != 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tpoints[i]\
    \ = sum;\n\t}\n\tstd::vector<std::pair<long, long>> vp;\n\tfor (int i = 0; i <\
    \ n; i++) {\n\t\tvp.push_back(std::make_pair(points[i], nums[i]));\n\t}\n\tstd::sort(vp.begin(),\
    \ vp.end());\n\tfor (int i = 0; i < n; i++) {\n\t\tres[i] = vp[i].second;\n\t\
    }\n\treturn res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpcjl_mdzi: /tmp/tmpcjl_mdzi.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> v;\n  std::vector<int> index_vector;\n  int sum;\n\
    \  for(int i=0;i<nums.size();i++){\n    sum=0;\n    while(nums[i]!=0){\n     \
    \ sum+=nums[i]%10;\n      nums[i]/=10;\n    }\n    v.push_back(sum);\n    index_vector.push_back(i);\n\
    \  }\n  for(int i=0;i<v.size();i++){\n    for(int j=i+1;j<v.size();j++){\n   \
    \   if(v[i]>v[j]){\n        std::swap(v[i],v[j]);\n        std::swap(index_vector[i],index_vector[j]);\n\
    \      }\n    }\n  }\n  std::vector<long> sorted_nums;\n  for(int i=0;i<index_vector.size();i++){\n\
    \    sorted_nums.push_back(nums[index_vector[i]]);\n  }\n  return sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp7x385_hf: /tmp/tmp7x385_hf.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\nstd::vector<long> pos_sums;\n    std::vector<long> neg_sums;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (nums[i] >= 0) {\n         \
    \   pos_sums.push_back(nums[i]);\n        } else {\n            neg_sums.push_back(nums[i]);\n\
    \        }\n    }\n    std::sort(pos_sums.begin(), pos_sums.end());\n    std::sort(neg_sums.begin(),\
    \ neg_sums.end());\n    std::vector<long> result;\n    int i = 0;\n    int j =\
    \ 0;\n    while (i < pos_sums.size() && j < neg_sums.size()) {\n        int sum_pos\
    \ = sum_digits(pos_sums[i]);\n        int sum_neg = sum_digits(neg_sums[j]);\n\
    \        if (sum_pos < sum_neg) {\n            result.push_back(pos_sums[i]);\n\
    \            i++;\n        } else if (sum_pos > sum_neg) {\n            result.push_back(neg_sums[j]);\n\
    \            j++;\n        } else {\n            if (pos_sums[i] < neg_sums[j])\
    \ {\n                result.push_back(pos_sums[i]);\n                i++;\n  \
    \          } else {\n                result.push_back(neg_sums[j]);\n        \
    \        j++;\n            }\n        }\n    }\n    while (i < pos_sums.size())\
    \ {\n        result.push_back(pos_sums[i]);\n        i++;\n    }\n    while (j\
    \ < neg_sums.size()) {\n        result.push_back(neg_sums[j]);\n        j++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzkbqd1y.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzzkbqd1y.cpp:26:23: error: \u2018sum_digits\u2019 was\
    \ not declared in this scope\n   26 |         int sum_pos = sum_digits(pos_sums[i]);\n\
    \      |                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  std::vector<int> sum;\n  int n = nums.size();\n\
    \  if(n==0)\n    return result;\n  for(int i=0;i<n;i++)\n  {\n    int s = 0;\n\
    \    int x = nums[i];\n    if(x==0)\n      s = 0;\n    else\n    {\n      while(x>0)\n\
    \      {\n        s += x%10;\n        x = x/10;\n      }\n    }\n    sum.push_back(s);\n\
    \  }\n  int min = sum[0];\n  int count = 0;\n  while(result.size() != n)\n  {\n\
    \    min = sum[0];\n    for(int i=0;i<n;i++)\n    {\n      if(sum[i] < min)\n\
    \      {\n        min = sum[i];\n        count = i;\n      }\n    }\n    sum[count]\
    \ = INT_MAX;\n    result.push_back(nums[count]);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp7r7f__d4: /tmp/tmp7r7f__d4.cpp:52: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> order_num;\n    long sum = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        while (nums[i] != 0) {\n           \
    \ sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        order_num.push_back(sum);\n\
    \        sum = 0;\n    }\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   for (long j = i + 1; j < nums.size(); j++) {\n            if (order_num[i]\
    \ > order_num[j]) {\n                std::swap(order_num[i], order_num[j]);\n\
    \                std::swap(nums[i], nums[j]);\n            }\n        }\n    }\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpgha188z3: /tmp/tmpgha188z3.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::sort(nums.begin(), nums.end(), [](const long& a, const long&\
    \ b) {\n\t\tint a_sum = 0, b_sum = 0;\n\t\tlong v = a;\n\t\twhile (v) {\n\t\t\t\
    a_sum += v % 10;\n\t\t\tv /= 10;\n\t\t}\n\t\tv = b;\n\t\twhile (v) {\n\t\t\tb_sum\
    \ += v % 10;\n\t\t\tv /= 10;\n\t\t}\n\t\treturn a_sum < b_sum;\n\t});\n\treturn\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmplb6wicg9: /tmp/tmplb6wicg9.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  vector<pair<long, long>> v;\n  vector<long> ans;\n  for (int i =\
    \ 0; i < nums.size(); i++) {\n    int sum = 0;\n    long number = nums[i];\n \
    \   while (number != 0) {\n      sum += number % 10;\n      number /= 10;\n  \
    \  }\n    v.push_back(make_pair(sum, nums[i]));\n  }\n  sort(v.begin(), v.end());\n\
    \  for (int i = 0; i < v.size(); i++) {\n    ans.push_back(v[i].second);\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1x1i22a2.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1x1i22a2.cpp:11:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   11 |   vector<pair<long, long>> v;\n      |   ^~~~~~\n/tmp/tmp1x1i22a2.cpp:11:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x1i22a2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x1i22a2.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp1x1i22a2.cpp:11:10:\
    \ error: \u2018pair\u2019 was not declared in this scope; did you mean \u2018\
    std::pair\u2019?\n   11 |   vector<pair<long, long>> v;\n      |          ^~~~\n\
    \      |          std::pair\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1x1i22a2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair\u2019 declared here\n  208 |     struct pair\n      |\
    \            ^~~~\n/tmp/tmp1x1i22a2.cpp:11:15: error: expected primary-expression\
    \ before \u2018long\u2019\n   11 |   vector<pair<long, long>> v;\n      |    \
    \           ^~~~\n/"
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> v;\n\tfor (auto i = nums.begin(); i != nums.end();\
    \ i++) {\n\t\tv.push_back(std::abs(*i));\n\t}\n\tstd::sort(v.begin(), v.end());\n\
    \tfor (int i = 0; i < v.size(); i++) {\n\t\tfor (int j = 0; j < nums.size(); j++)\
    \ {\n\t\t\tif (v[i] == std::abs(nums[j])) {\n\t\t\t\tv[i] = nums[j];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp7lcrmdax: /tmp/tmp7lcrmdax.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here!\n    std::vector<long> v1(nums.size());\n\
    \    std::vector<long> v2(nums.size());\n    std::map<long, long> m;\n    for(int\
    \ i = 0; i < nums.size(); i++) {\n        long temp = nums[i];\n        long sum\
    \ = 0;\n        while(temp != 0) {\n            sum += temp % 10;\n          \
    \  temp /= 10;\n        }\n        m[sum] = i;\n        v1[i] = sum;\n    }\n\
    \    sort(v1.begin(), v1.end());\n    for(int i = 0; i < v1.size(); i++) {\n \
    \       v2[i] = nums[m[v1[i]]];\n    }\n    return v2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpcm5p3g18: /tmp/tmpcm5p3g18.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> sorted(nums);\n  std::sort(sorted.begin(), sorted.end(),\
    \ [&nums](const long& a, const long& b) -> bool {\n    long sa = 0, sb = 0;\n\
    \    for (long n : nums) {\n      if (n == a) sa += n;\n      if (n == b) sb +=\
    \ n;\n    }\n    return sa > sb;\n  });\n  return sorted;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpx5q9ujoq: /tmp/tmpx5q9ujoq.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> op;\n\tstd::vector<int> values;\n\tfor (auto it\
    \ = nums.begin(); it != nums.end(); it++) {\n\t\tint sum = 0;\n\t\tif (*it < 0)\
    \ {\n\t\t\t*it = *it * -1;\n\t\t}\n\t\twhile (*it != 0) {\n\t\t\tsum += *it %\
    \ 10;\n\t\t\t*it = *it / 10;\n\t\t}\n\t\tvalues.push_back(sum);\n\t}\n\tint i\
    \ = 0;\n\twhile (i < nums.size()) {\n\t\tint min = *std::min_element(values.begin(),\
    \ values.end());\n\t\tif (values[i] == min) {\n\t\t\top.push_back(nums[i]);\n\t\
    \t\tnums.erase(nums.begin() + i);\n\t\t\tvalues.erase(values.begin() + i);\n\t\
    \t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn op;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpbbxarqoh: /tmp/tmpbbxarqoh.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<int, std::vector<long>> sums;\n\tint sum = 0;\n\tint i =\
    \ 0;\n\tfor (auto item : nums) {\n\t\tsum = 0;\n\t\twhile (item != 0) {\n\t\t\t\
    sum += item % 10;\n\t\t\titem /= 10;\n\t\t}\n\t\tsums[sum].push_back(nums[i]);\n\
    \t\ti++;\n\t}\n\tstd::vector<long> answer;\n\tfor (auto item : sums) {\n\t\tfor\
    \ (auto i : item.second) {\n\t\t\tanswer.push_back(i);\n\t\t}\n\t}\n\treturn answer;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp5fg5nar6: /tmp/tmp5fg5nar6.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::sort(nums.begin(), nums.end(), [](long a, long b) {\n\t\tint\
    \ sum_a = std::accumulate(std::to_string(std::abs(a)).begin(), std::to_string(std::abs(a)).end(),\
    \ 0, [](int a, char c) {return a + (c - '0'); });\n\t\tint sum_b = std::accumulate(std::to_string(std::abs(b)).begin(),\
    \ std::to_string(std::abs(b)).end(), 0, [](int a, char c) {return a + (c - '0');\
    \ });\n\t\treturn sum_a < sum_b;\n\t});\n\treturn nums;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpg35t7tcv: /tmp/tmpg35t7tcv.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    \n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpzr0xl93a: /tmp/tmpzr0xl93a.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, long> dict;\n    std::vector<long> res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        if\
    \ (num < 0) {\n            num = -num;\n        }\n        long sum = 0;\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        dict[sum] += 1;\n    }\n    for (auto iter = dict.begin();\
    \ iter != dict.end(); iter++) {\n        std::vector<long> tmp = nums;\n     \
    \   long sum = iter->first;\n        auto it = std::remove_if(tmp.begin(), tmp.end(),\
    \ [sum](long num) {\n            if (num < 0) {\n                num = -num;\n\
    \            }\n            long tmp = 0;\n            while (num > 0) {\n   \
    \             tmp += num % 10;\n                num /= 10;\n            }\n  \
    \          return tmp != sum;\n        });\n        tmp.erase(it, tmp.end());\n\
    \        for (auto it = tmp.begin(); it != tmp.end(); it++) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp73dhtkxn: /tmp/tmp73dhtkxn.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    std::map<long,std::vector<long>>\
    \ container;\n    for(int i=0;i<nums.size();i++){\n        long sum=0;\n     \
    \   long num=nums[i];\n        if(num<0){\n            num*=-1;\n        }\n \
    \       while(num>0){\n            sum+=num%10;\n            num/=10;\n      \
    \  }\n        container[sum].push_back(nums[i]);\n    }\n    for(auto it=container.begin();it!=container.end();it++){\n\
    \        for(int i=0;i<it->second.size();i++){\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpydahb0u3: /tmp/tmpydahb0u3.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_with_indices;\n    for (auto &n : nums)\
    \ {\n        nums_with_indices.push_back(n);\n    }\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        nums_with_indices[i] = std::abs(nums[i]) * 10000 + i;\n    }\n\
    \    sort(nums_with_indices.begin(), nums_with_indices.end());\n    std::vector<long>\
    \ result;\n    for (auto &n : nums_with_indices) {\n        result.push_back(nums[n\
    \ % 10000]);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpr_y91x1_: /tmp/tmpr_y91x1_.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Create a vector of std::pair<long, long> storing\n    // firstly\
    \ the sum of the digits of a given number,\n    // and then its index in the given\
    \ vector\n    std::vector<std::pair<long, long>> sum_idx;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        int sum = 0;\n        int num = nums[i];\n\
    \        while (num != 0) {\n            sum += num % 10;\n            num /=\
    \ 10;\n        }\n        sum_idx.push_back(std::make_pair(sum, i));\n    }\n\
    \    // Compare if the sum of a pair is greater than the other\n    auto cmp =\
    \ [](const std::pair<long, long> &a, const std::pair<long, long> &b) {\n     \
    \   return a.first < b.first;\n    };\n    // Sort the vector of pairs\n    std::sort(sum_idx.begin(),\
    \ sum_idx.end(), cmp);\n    // Create a new vector of the original numbers\n \
    \   // ordered according to their sums of digits\n    std::vector<long> new_nums;\n\
    \    for (int i = 0; i < sum_idx.size(); i++) {\n        int idx = sum_idx[i].second;\n\
    \        new_nums.push_back(nums[idx]);\n    }\n    return new_nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8hxcekj3: /tmp/tmp8hxcekj3.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    std::vector<std::pair<long, long>>\
    \ sums_and_indexes;\n    for (int i = 0; i < nums.size(); i++) {\n        long\
    \ sum = 0;\n        long a = nums[i];\n        while (a != 0) {\n            sum\
    \ += a % 10;\n            a /= 10;\n        }\n        sums_and_indexes.push_back(std::make_pair(sum,\
    \ i));\n    }\n    std::sort(sums_and_indexes.begin(), sums_and_indexes.end());\n\
    \    for (int i = 0; i < sums_and_indexes.size(); i++) {\n        ans.push_back(nums[sums_and_indexes[i].second]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpv7a0f_fj: /tmp/tmpv7a0f_fj.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tif (nums.size() == 0)\n\t\treturn result;\n\
    \tstd::vector<long> sum_of_digits;\n\tstd::vector<long> index;\n\tlong long int\
    \ sum = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tsum = 0;\n\t\tlong\
    \ long int current_num = nums[i];\n\t\t// std::cout << current_num << std::endl;\n\
    \t\tif (current_num < 0)\n\t\t\tcurrent_num = current_num * -1;\n\t\twhile (current_num\
    \ > 0) {\n\t\t\tsum += current_num % 10;\n\t\t\tcurrent_num = current_num / 10;\n\
    \t\t}\n\t\tsum_of_digits.push_back(sum);\n\t\tindex.push_back(i);\n\t}\n\t// std::cout\
    \ << \"Sum of digits\" << std::endl;\n\t// for (long i = 0; i < sum_of_digits.size();\
    \ i++) {\n\t// \tstd::cout << sum_of_digits[i] << \" \";\n\t// }\n\t// std::cout\
    \ << std::endl;\n\tstd::sort(sum_of_digits.begin(), sum_of_digits.end());\n\t\
    // std::cout << \"Sum of digits\" << std::endl;\n\t// for (long i = 0; i < sum_of_digits.size();\
    \ i++) {\n\t// \tstd::cout << sum_of_digits[i] << \" \";\n\t// }\n\t// std::cout\
    \ << std::endl;\n\t// std::cout << \"Index \" << std::endl;\n\t// for (long i\
    \ = 0; i < index.size(); i++) {\n\t// \tstd::cout << index[i] << \" \";\n\t//\
    \ }\n\t// std::cout << std::endl;\n\tlong last_pos = 0;\n\tfor (long i = 0; i\
    \ < sum_of_digits.size(); i++) {\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyn2snnfi.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyn2snnfi.cpp:49:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   49 | int main() {\n      |     \
    \       ^\n/tmp/tmpyn2snnfi.cpp:57:1: error: expected \u2018}\u2019 at end of\
    \ input\n   57 | }\n      | ^\n/tmp/tmpyn2snnfi.cpp:10:59: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long> nums)\
    \ {\n      |                                                           ^\n/tmp/tmpyn2snnfi.cpp:57:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   57 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660111771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<int,std::vector<long>> map;\n    for(int i=0;i<nums.size();i++){\n\
    \        int sum=0;\n        int num=nums[i];\n        while(num!=0){\n      \
    \      sum+=num%10;\n            num/=10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    std::vector<long> answer;\n    for(auto num:map){\n        for(auto\
    \ x:num.second){\n            answer.push_back(x);\n        }\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpnybh48kn: /tmp/tmpnybh48kn.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> result;\n\tstd::map<long, std::vector<long>> map;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong temp =\
    \ nums[i];\n\t\tdo {\n\t\t\tint remainder = temp % 10;\n\t\t\tsum += remainder;\n\
    \t\t\ttemp /= 10;\n\t\t} while (temp != 0);\n\t\tmap[sum].push_back(nums[i]);\n\
    \t}\n\tfor (auto x : map) {\n\t\tstd::sort(x.second.begin(), x.second.end());\n\
    \t\tfor (auto i : x.second) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp2y2wwu71: /tmp/tmp2y2wwu71.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> arr;\n\tfor (int i = 0; i < nums.size(); i++) {\n\
    \t\tlong sum = 0;\n\t\tlong n = nums[i];\n\t\twhile (n != 0) {\n\t\t\tsum += n\
    \ % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tarr.push_back(sum);\n\t}\n\tfor (int i = 0;\
    \ i < arr.size(); i++) {\n\t\tfor (int j = i + 1; j < arr.size(); j++) {\n\t\t\
    \tif (arr[i] > arr[j]) {\n\t\t\t\tstd::swap(arr[i], arr[j]);\n\t\t\t\tstd::swap(nums[i],\
    \ nums[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp1g3cx_bx: /tmp/tmp1g3cx_bx.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> pairs;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        long val = nums[i];\n        long sum = 0;\n\
    \        while (val) {\n            sum += val % 10;\n            val /= 10;\n\
    \        }\n        pairs.push_back(std::make_pair(sum, i));\n    }\n    std::sort(pairs.begin(),\
    \ pairs.end());\n    std::vector<long> result;\n    for (int i = 0; i < pairs.size();\
    \ i++) {\n        result.push_back(nums[pairs[i].second]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp2sucjfju: /tmp/tmp2sucjfju.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> arr;\n    std::vector<long> arr1;\n    std::vector<long>\
    \ arr2;\n    std::vector<long> arr3;\n    for(long i=0;i<nums.size();i++)\n  \
    \  {\n        if(nums[i]<0)\n        {\n            arr.push_back(nums[i]);\n\
    \        }\n        else if(nums[i]==0)\n        {\n            arr1.push_back(nums[i]);\n\
    \        }\n        else\n        {\n            arr2.push_back(nums[i]);\n  \
    \      }\n    }\n    std::sort(arr.begin(),arr.end());\n    std::sort(arr2.begin(),arr2.end());\n\
    \    std::reverse(arr2.begin(),arr2.end());\n    arr3.insert(arr3.end(),arr.begin(),arr.end());\n\
    \    arr3.insert(arr3.end(),arr1.begin(),arr1.end());\n    arr3.insert(arr3.end(),arr2.begin(),arr2.end());\n\
    \    return arr3;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmptrgc8kgg: /tmp/tmptrgc8kgg.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> list;\n    std::vector<long> tmp_list;\n    int\
    \ points;\n    int m=-1;\n    for(int i=0;i<nums.size();i++){\n        if(nums[i]<0){\n\
    \            int x = nums[i]*-1;\n            points = (x%10)+((x/10)%10)+((x/100)%10)+((x/1000)%10)+((x/10000)%10)+((x/100000)%10)+((x/1000000)%10)+((x/10000000)%10)+((x/100000000)%10)+((x/1000000000)%10);\n\
    \        }\n        else{\n            points = (nums[i]%10)+((nums[i]/10)%10)+((nums[i]/100)%10)+((nums[i]/1000)%10)+((nums[i]/10000)%10)+((nums[i]/100000)%10)+((nums[i]/1000000)%10)+((nums[i]/10000000)%10)+((nums[i]/100000000)%10)+((nums[i]/1000000000)%10);\n\
    \        }\n        if(m<points){\n            m=points;\n        }\n        list.push_back(points);\n\
    \    }\n    while(m>=0){\n        for(int i=0;i<list.size();i++){\n          \
    \  if(list[i]==m){\n                tmp_list.push_back(nums[i]);\n           \
    \ }\n        }\n        m--;\n    }\n    return tmp_list;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpqefp3sur: /tmp/tmpqefp3sur.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<std::pair<int, long>> sums;\n\tstd::vector<long> result;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j =\
    \ nums[i]; j > 0; j /= 10)\n\t\t\tsum += j % 10;\n\t\tsums.push_back(std::make_pair(sum,\
    \ nums[i]));\n\t}\n\tstd::sort(sums.begin(), sums.end());\n\tfor (int i = 0; i\
    \ < sums.size(); i++)\n\t\tresult.push_back(sums[i].second);\n\treturn result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmps420rmlm: /tmp/tmps420rmlm.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// write your code here\n\tstd::map<int, std::vector<long>> mymap;\n\
    \tstd::vector<long> result;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\t\
    int sum = 0;\n\t\tif (nums[i] < 0) {\n\t\t\tnums[i] = -1 * nums[i];\n\t\t}\n\t\
    \twhile (nums[i] > 0) {\n\t\t\tsum += nums[i] % 10;\n\t\t\tnums[i] /= 10;\n\t\t\
    }\n\t\tmymap[sum].push_back(nums[i]);\n\t}\n\tfor (auto i = mymap.begin(); i !=\
    \ mymap.end(); i++) {\n\t\tfor (long j = 0; j < i->second.size(); j++) {\n\t\t\
    \tresult.push_back(i->second[j]);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmptq80kzc0: /tmp/tmptq80kzc0.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tint n = nums.size();\n\tstd::vector<int> v(n);\n\tfor (int i = 0;\
    \ i < n; i++) {\n\t\tint curr = nums[i];\n\t\tif (curr < 0) {\n\t\t\tcurr = -curr;\n\
    \t\t}\n\t\twhile (curr > 0) {\n\t\t\tv[i] += curr % 10;\n\t\t\tcurr /= 10;\n\t\
    \t}\n\t}\n\tstd::map<int, std::vector<int>> mp;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tmp[v[i]].push_back(nums[i]);\n\t}\n\tstd::vector<long> ans;\n\tfor (auto\
    \ node : mp) {\n\t\tfor (auto it : node.second) {\n\t\t\tans.push_back(it);\n\t\
    \t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpf2i98mg_: /tmp/tmpf2i98mg_.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  long sum = 0;\n  std::map<long, long> mp;\n  std::vector<long> res;\n\
    \  long j = 0;\n  for (auto i : nums) {\n    while (i != 0) {\n      sum += i\
    \ % 10;\n      i /= 10;\n    }\n    mp[sum] = j;\n    sum = 0;\n    j++;\n  }\n\
    \  for (auto i : mp) {\n    res.push_back(nums[i.second]);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpu7uio6nv: /tmp/tmpu7uio6nv.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>> nums_with_points;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        int n = nums[i];\n\
    \        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n \
    \       }\n        nums_with_points.push_back(std::make_pair(sum, nums[i]));\n\
    \    }\n    std::sort(nums_with_points.begin(), nums_with_points.end());\n   \
    \ std::vector<long> answer;\n    for (int i = 0; i < nums_with_points.size();\
    \ i++) {\n        answer.push_back(nums_with_points[i].second);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpmvqolle_: /tmp/tmpmvqolle_.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long>::iterator it;\n\
    \    std::vector<std::vector<long>> num_list;\n    for(it = nums.begin(); it !=\
    \ nums.end(); it++) {\n        std::vector<long> num_sum;\n        long sum =\
    \ 0;\n        std::string s = std::to_string(*it);\n        for(auto x : s) {\n\
    \            sum += x - '0';\n        }\n        num_sum.push_back(sum);\n   \
    \     num_sum.push_back(*it);\n        num_list.push_back(num_sum);\n    }\n \
    \   std::sort(num_list.begin(), num_list.end());\n    std::vector<long> result;\n\
    \    for(auto it : num_list) {\n        result.push_back(it[1]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpzrm5wsad: /tmp/tmpzrm5wsad.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\nstd::vector<long> v;\nstd::vector<long> sum;\nint digit;\nlong sum_digit=0;\n\
    long num=0;\nlong sum_num=0;\nint i=0;\nfor(auto it=nums.begin();it!=nums.end();it++)\n\
    {\n  num=*it;\n  sum_num=0;\n  while(num!=0)\n  {\n    digit=num%10;\n    sum_num=sum_num+digit;\n\
    \    num=num/10;\n  }\n  v.push_back(sum_num);\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg8osq7h6.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg8osq7h6.cpp:30:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   30 | int main() {\n      |     \
    \       ^\n/tmp/tmpg8osq7h6.cpp:38:1: error: expected \u2018}\u2019 at end of\
    \ input\n   38 | }\n      | ^\n/tmp/tmpg8osq7h6.cpp:10:59: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long> nums)\
    \ {\n      |                                                           ^\n/tmp/tmpg8osq7h6.cpp:38:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   38 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](const long& a, const long&\
    \ b) {\n        return a % 10 + a / 10 % 10 > b % 10 + b / 10 % 10;\n    });\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpdewx5263: /tmp/tmpdewx5263.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long,long>> num;\n    for(long i=0;i<nums.size();i++){\n\
    \        num.push_back(std::make_pair(nums[i],i));\n    }\n    std::sort(num.begin(),num.end(),[](const\
    \ std::pair<long,long>& a,const std::pair<long,long>& b){\n        int sum1=0,sum2=0;\n\
    \        int a1=std::abs(a.first);\n        int b1=std::abs(b.first);\n      \
    \  while(a1>0){\n            sum1+=a1%10;\n            a1/=10;\n        }\n  \
    \      while(b1>0){\n            sum2+=b1%10;\n            b1/=10;\n        }\n\
    \        if(sum1==sum2){\n            return a.second<b.second;\n        }\n \
    \       return sum1<sum2;\n    });\n    std::vector<long> res;\n    for(auto&\
    \ x:num){\n        res.push_back(x.first);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpqbdk7336: /tmp/tmpqbdk7336.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret;\n    std::map<int,std::vector<long>> mp;\n\
    \    for(int i=0;i<nums.size();i++){\n        int sum = 0;\n        int n = nums[i];\n\
    \        int flag = 1;\n        if(n<0){\n            flag = -1;\n           \
    \ n = abs(n);\n        }\n        while(n){\n            sum += n%10;\n      \
    \      n /= 10;\n        }\n        mp[sum*flag].push_back(nums[i]);\n    }\n\
    \    for(auto x:mp){\n        for(auto y:x.second){\n            ret.push_back(y);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpt18b6ap4: /tmp/tmpt18b6ap4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<std::pair<int, long>> num_sum;\n\tfor (size_t i = 0;\
    \ i < nums.size(); i++) {\n\t\tnum_sum.push_back(std::make_pair(0, nums[i]));\n\
    \t\tlong num = nums[i];\n\t\tif (num < 0) {\n\t\t\tnum = -num;\n\t\t}\n\t\twhile\
    \ (num != 0) {\n\t\t\tnum_sum[i].first += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\
    \t}\n\tstd::sort(num_sum.begin(), num_sum.end());\n\tfor (size_t i = 0; i < nums.size();\
    \ i++) {\n\t\tnums[i] = num_sum[i].second;\n\t}\n\treturn nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpvabw7q3j: /tmp/tmpvabw7q3j.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> result;\n  int point = 0;\n  int index = 0;\n \
    \ int array_size = nums.size();\n  std::vector<int> temp_nums;\n  for (int i =\
    \ 0; i < array_size; i++) {\n    point = 0;\n    index = i;\n    while (nums[i]\
    \ != 0) {\n      point += (nums[i] % 10);\n      nums[i] /= 10;\n    }\n    temp_nums.push_back(point);\n\
    \  }\n  for (int i = 0; i < array_size; i++) {\n    int min = INT_MAX;\n    for\
    \ (int j = 0; j < array_size; j++) {\n      if (temp_nums[j] < min) {\n      \
    \  min = temp_nums[j];\n        index = j;\n      }\n    }\n    result.push_back(nums[index]);\n\
    \    temp_nums[index] = INT_MAX;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp6j4sxa6t: /tmp/tmp6j4sxa6t.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here...\n  int sum = 0;\n  for(int i = 0; i <\
    \ nums.size(); i++){\n    if(nums[i] >= 0)\n      sum += (nums[i]%10);\n    else{\n\
    \      sum -= (nums[i]%10);\n    }\n  }\n  return nums;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpwhtknusi: /tmp/tmpwhtknusi.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::vector<long> results;\n\tresults.resize(nums.size());\n\tstd::vector<int>\
    \ value,index;\n\tvalue.resize(nums.size());\n\tindex.resize(nums.size());\n\t\
    int min, minindex, sum = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\twhile\
    \ (nums[i] > 0) {\n\t\t\tsum += nums[i] % 10;\n\t\t\tnums[i] /= 10;\n\t\t}\n\t\
    \tvalue[i] = sum;\n\t\tindex[i] = i;\n\t\tsum = 0;\n\t}\n\tfor (int i = 0; i <\
    \ nums.size(); i++) {\n\t\tmin = value[i];\n\t\tminindex = i;\n\t\tfor (int j\
    \ = i; j < nums.size(); j++) {\n\t\t\tif (value[j] < min) {\n\t\t\t\tmin = value[j];\n\
    \t\t\t\tminindex = j;\n\t\t\t}\n\t\t}\n\t\tstd::swap(value[i], value[minindex]);\n\
    \t\tstd::swap(index[i], index[minindex]);\n\t}\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tresults[i] = nums[index[i]];\n\t}\n\treturn results;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpwi3asxgw: /tmp/tmpwi3asxgw.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // This is how you convert vector to string:\n    // std::string\
    \ s(nums.begin(), nums.end());\n    std::vector<long> result;\n    std::vector<long>\
    \ nums1;\n    std::vector<long> nums2;\n    std::vector<long> nums3;\n    std::vector<long>\
    \ nums4;\n    std::vector<long> nums5;\n    std::vector<long> nums6;\n    std::vector<long>\
    \ nums7;\n    std::vector<long> nums8;\n    std::vector<long> nums9;\n    std::vector<long>\
    \ nums10;\n    std::vector<long> nums11;\n    std::vector<long> nums12;\n    std::vector<long>\
    \ nums13;\n    std::vector<long> nums14;\n    std::vector<long> nums15;\n    std::vector<long>\
    \ nums16;\n    std::vector<long> nums17;\n    std::vector<long> nums18;\n    std::vector<long>\
    \ nums19;\n    std::vector<long> nums20;\n    std::vector<long> nums21;\n    std::vector<long>\
    \ nums22;\n    std::vector<long> nums23;\n    std::vector<long> nums24;\n    std::vector<long>\
    \ nums25;\n    std::vector<long> nums26;\n    std::vector<long> nums27;\n    std::vector<long>\
    \ nums28;\n    std::vector<long> nums29;\n    std::vector<long> nums30;\n    std::vector<long>\
    \ nums31;\n    std::vector<long> nums32;\n    std::vector<long> nums33;\n    std::vector<long>\
    \ nums34;\n    std::vector<long> nums35;\n    std::vector<long> nums36;\n    std::vector<long>\
    \ nums37;\n    std::vector<long> nums38;\n    std::vector<long> nums39;\n    std::\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkoejsby1.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkoejsby1.cpp:54:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpkoejsby1.cpp:54:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660111772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> ordered_nums;\n  std::vector<int>  nums_to_sort;\n\
    \  std::vector<int>  ordered_nums_to_sort;\n  for (long num : nums) {\n    int\
    \ sum = 0;\n    int test = num;\n    while (test != 0) {\n      sum += test %\
    \ 10;\n      test /= 10;\n    }\n    nums_to_sort.push_back(sum);\n  }\n  ordered_nums_to_sort\
    \ = nums_to_sort;\n  std::sort(ordered_nums_to_sort.begin(), ordered_nums_to_sort.end());\n\
    \  for (int i = 0; i < ordered_nums_to_sort.size(); i++) {\n    for (int j = 0;\
    \ j < nums_to_sort.size(); j++) {\n      if (ordered_nums_to_sort[i] == nums_to_sort[j])\
    \ {\n        ordered_nums.push_back(nums[j]);\n        nums_to_sort[j] = INT_MAX;\n\
    \        break;\n      }\n    }\n  }\n  return ordered_nums;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpd81me3au: /tmp/tmpd81me3au.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n   std::vector<long> result;\n   long temp1;\n   long temp2;\n   long\
    \ sum_digits;\n   for(auto num : nums){\n      temp1 = num;\n      sum_digits\
    \ = 0;\n      if(num < 0){\n         temp1 = temp1 * -1;\n      }\n      while(temp1){\n\
    \         temp2 = temp1 % 10;\n         sum_digits += temp2;\n         temp1 =\
    \ temp1 / 10;\n      }\n      result.push_back(sum_digits);\n   }\n   std::vector<long>::iterator\
    \ it;\n   int len = result.size();\n   for(int i = 0; i < len - 1; i++){\n   \
    \   for(int j = 0; j < len - i - 1; j++){\n         if(result[j] > result[j +\
    \ 1]){\n            it = nums.begin() + j;\n            std::iter_swap(it, it\
    \ + 1);\n            it = result.begin() + j;\n            std::iter_swap(it,\
    \ it + 1);\n         }\n      }\n   }\n   return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpi8hf99f3: /tmp/tmpi8hf99f3.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, std::vector<long>> mp;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long n = nums[i];\n        long sum = 0;\n    \
    \    if (n > 0) {\n            while (n != 0) {\n                sum += n % 10;\n\
    \                n /= 10;\n            }\n        } else {\n            while\
    \ (n != 0) {\n                sum += n % 10;\n                n /= 10;\n     \
    \       }\n        }\n        mp[sum].push_back(nums[i]);\n    }\n    std::vector<long>\
    \ v;\n    for (auto it = mp.begin(); it != mp.end(); it++) {\n        for (long\
    \ i = 0; i < it->second.size(); i++) {\n            v.push_back(it->second[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmptlruyabq: /tmp/tmptlruyabq.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // your code here\n  return {};\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp8gw1jid2: /tmp/tmp8gw1jid2.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> new_nums = nums;\n    std::sort(new_nums.begin(),\
    \ new_nums.end(),\n        [](long a, long b) -> bool {\n            int sum_a\
    \ = 0;\n            int sum_b = 0;\n            while (a > 0) {\n            \
    \    sum_a += a % 10;\n                a /= 10;\n            }\n            while\
    \ (b > 0) {\n                sum_b += b % 10;\n                b /= 10;\n    \
    \        }\n            return sum_a < sum_b;\n        });\n    return new_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpua8h7u5f: /tmp/tmpua8h7u5f.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, std::vector<long>> points;\n    for (auto &x : nums)\
    \ {\n        points[x].push_back(x);\n    }\n    std::map<long, std::vector<long>>\
    \ sum_map;\n    for (auto &x : points) {\n        long sum = 0;\n        for (auto\
    \ &num : x.second) {\n            while (num > 0) {\n                sum += num\
    \ % 10;\n                num /= 10;\n            }\n        }\n        sum_map[sum].insert(sum_map[sum].end(),\
    \ x.second.begin(), x.second.end());\n    }\n    std::vector<long> v;\n    for\
    \ (auto &x : sum_map) {\n        v.insert(v.end(), x.second.begin(), x.second.end());\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpyxgyc56n: /tmp/tmpyxgyc56n.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<std::pair<long, int>> sums;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    long sum = 0;\n    long n = nums[i];\n    while (n != 0) {\n   \
    \   sum += n % 10;\n      n /= 10;\n    }\n    sums.push_back(std::make_pair(sum,\
    \ i));\n  }\n  std::sort(sums.begin(), sums.end());\n  std::vector<long> result;\n\
    \  for (auto i = sums.begin(); i != sums.end(); i++) {\n    result.push_back(nums[i->second]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpwdp1fodv: /tmp/tmpwdp1fodv.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// write your code here\n\tstd::vector<long> res;\n\tint sumOfDigits\
    \ = 0;\n\tstd::map<int, long> mapOfNums;\n\tstd::map<int, long> ::iterator it;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tsumOfDigits = 0;\n\t\tstd::string\
    \ str = std::to_string(nums[i]);\n\t\tfor (int j = 0; j < str.length(); j++) {\n\
    \t\t\tsumOfDigits += (str[j] - '0');\n\t\t}\n\t\tmapOfNums.insert(std::pair<int,\
    \ long>(sumOfDigits, nums[i]));\n\t}\n\tfor (it = mapOfNums.begin(); it != mapOfNums.end();\
    \ it++) {\n\t\tres.push_back(it->second);\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpbv0ld384: /tmp/tmpbv0ld384.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tstd::map<int, std::vector<long>> sorted;\n\tfor (size_t i = 0; i\
    \ < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tint num = nums[i];\n\t\twhile (num\
    \ > 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tsorted[sum].push_back(nums[i]);\n\
    \t}\n\tstd::vector<long> res;\n\tfor (std::map<int, std::vector<long>>::iterator\
    \ it = sorted.begin(); it != sorted.end(); it++) {\n\t\tfor (size_t i = 0; i <\
    \ it->second.size(); i++) {\n\t\t\tres.push_back(it->second[i]);\n\t\t}\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpc_2k9tif: /tmp/tmpc_2k9tif.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tint size = nums.size();\n\tstd::vector<long> sum1(size);\n\tstd::vector<long>\
    \ index(size);\n\tstd::vector<long> output(size);\n\tfor (int i = 0; i < size;\
    \ i++) {\n\t\tlong temp = 0;\n\t\twhile (nums[i] != 0) {\n\t\t\ttemp += nums[i]\
    \ % 10;\n\t\t\tnums[i] /= 10;\n\t\t}\n\t\tsum1[i] = temp;\n\t\tindex[i] = i;\n\
    \t}\n\tfor (int i = 0; i < size; i++) {\n\t\tfor (int j = i + 1; j < size; j++)\
    \ {\n\t\t\tif (sum1[i] > sum1[j]) {\n\t\t\t\tstd::swap(sum1[i], sum1[j]);\n\t\t\
    \t\tstd::swap(index[i], index[j]);\n\t\t\t}\n\t\t\telse if (sum1[i] == sum1[j])\
    \ {\n\t\t\t\tif (index[i] > index[j]) {\n\t\t\t\t\tstd::swap(index[i], index[j]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < size; i++) {\n\t\toutput[i]\
    \ = nums[index[i]];\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmp24srelo4: /tmp/tmp24srelo4.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<std::pair<long, long>>v;\n    for(int i = 0; i < nums.size();\
    \ i++) {\n        long num = nums[i];\n        int x = 0;\n        while(num)\
    \ {\n            x += num % 10;\n            num /= 10;\n        }\n        v.push_back(std::make_pair(x,\
    \ i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<long>result;\n\
    \    for(int i = 0; i < v.size(); i++) {\n        result.push_back(nums[v[i].second]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpik6bxx8e: /tmp/tmpik6bxx8e.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](const long& num1, const\
    \ long& num2) {\n        long a = std::abs(num1);\n        long b = std::abs(num2);\n\
    \        long sum1 = 0;\n        long sum2 = 0;\n        while (a != 0) {\n  \
    \          sum1 += a % 10;\n            a /= 10;\n        }\n        while (b\
    \ != 0) {\n            sum2 += b % 10;\n            b /= 10;\n        }\n    \
    \    return (sum1 == sum2) ? (num1 < num2) : (sum1 < sum2);\n    });\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  status: Exception
  stderr: 'tmpq_vx2869: /tmp/tmpq_vx2869.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))'' failed.

    '
  stdout: ''
  timestamp: 1660111773
