name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
  , \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"\
  Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\nstd::vector<std::string> select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
  \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
  Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"world\"\
  })));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
  Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"b\"\
  , \"c\", \"d\", \"f\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
