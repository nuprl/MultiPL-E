name: HumanEval_155_even_odd_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
  \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
  // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
  \ long> even_odd_count(long num) {\n"
tests: "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
  \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
  \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
  \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
  \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
  \ 0)));\n}\n"
completions: ["    int even = 0;\n    int odd = 0;\n    if (num < 0) {\n        num\
    \ = -num;\n    }\n    while (num) {\n        if (num % 2 == 0) {\n           \
    \ even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);", "  long even, odd;\n  even =\
    \ odd = 0;\n  if (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if\
    \ (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);", "  long even = 0;\n  long\
    \ odd = 0;\n  if (num < 0) {\n    num = num * -1;\n  }\n  while (num != 0) {\n\
    \    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n \
    \   num = num / 10;\n  }\n  return std::make_tuple(even, odd);", "  // Your code\
    \ here\n  int even = 0;\n  int odd = 0;\n  while(num != 0){\n    int r = num %\
    \ 10;\n    if(r % 2 == 0){\n      even++;\n    }\n    else{\n      odd++;\n  \
    \  }\n    num = num / 10;\n  }\n  return std::make_tuple(even, odd);", "    if(num==0)\
    \ return std::make_tuple(1,0);\n    std::tuple<long, long> eo_count(0,0);\n  \
    \  int sign = num<0?-1:1;\n    num = abs(num);\n    while(num>0){\n        int\
    \ last_digit = num%10;\n        if(last_digit%2==0) get<0>(eo_count)++;\n    \
    \    else get<1>(eo_count)++;\n        num/=10;\n    }\n    return eo_count;",
  "\tstd::tuple<long, long> res{ 0, 0 };\n\tif (num == 0) {\n\t\tres = std::make_tuple(1,\
    \ 0);\n\t\treturn res;\n\t}\n\telse if (num < 0) {\n\t\tnum = num * -1;\n\t}\n\
    \tstd::string int_to_string = std::to_string(num);\n\tfor (auto element : int_to_string)\
    \ {\n\t\tif (int(element) % 2 == 0) {\n\t\t\tstd::get<0>(res) += 1;\n\t\t}\n\t\
    \telse {\n\t\t\tstd::get<1>(res) += 1;\n\t\t}\n\t}\n\treturn res;", "    long\
    \ odd = 0, even = 0;\n    while(num) {\n        if(abs(num % 10) % 2 == 0) even++;\n\
    \        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "  // write code here\n  int oddCount = 0;\n  int evenCount = 0;\n \
    \ int  n;\n  n = abs(num);\n  while(n != 0)\n  {\n    if(n % 2 == 0)\n    {\n\
    \      evenCount++;\n    }\n    else\n    {\n      oddCount++;\n    }\n    n =\
    \ n / 10;\n  }\n  return std::make_tuple(evenCount, oddCount);", "    int count[2]\
    \ = {0, 0};\n    int tmp = abs(num);\n    while(tmp != 0) {\n        count[tmp\
    \ % 10 % 2]++;\n        tmp /= 10;\n    }\n    return std::make_tuple(count[0],\
    \ count[1]);", "    long even = 0, odd = 0;\n    for (; num; num /= 10) {\n  \
    \      if ((num % 10) % 2 == 0) {\n            even++;\n        } else {\n   \
    \         odd++;\n        }\n    }\n    return std::make_tuple(even, odd);", " \
    \   std::tuple<long, long>result;\n    int cnt1 = 0, cnt2 = 0;\n    for(int i\
    \ = 0; i < std::abs(num); i++){\n        if((i/10) % 2 == 0)\n            cnt1++;\n\
    \        else\n            cnt2++;\n    }\n    result = std::make_tuple(cnt1,\
    \ cnt2);\n    return result;", "    long even=0,odd=0;\n    if(num<0) num=num*-1;\n\
    \    while(num>0){\n        int rem=num%10;\n        if(rem%2==0) even++;\n  \
    \      else odd++;\n        num=num/10;\n    }\n    return {even,odd};", "   \
    \ long even = 0, odd = 0;\n    while(num != 0) {\n        if(num % 2 == 0)\n \
    \           even++;\n        else\n            odd++;\n        num /= 10;\n  \
    \  }\n    return {even, odd};", "  long even_counter = 0;\n  long odd_counter\
    \ = 0;\n  long digits = 0;\n  long mod = 0;\n  if (num == 0) {\n    even_counter\
    \ = 1;\n    odd_counter = 0;\n  }\n  while (num != 0) {\n    digits = num%10;\n\
    \    if (digits%2 == 0) {\n      even_counter++;\n    }\n    else {\n      odd_counter++;\n\
    \    }\n    num = num/10;\n  }\n  std::tuple<long, long> result = std::make_tuple(even_counter,\
    \ odd_counter);\n  return result;", "\tstd::tuple<long, long> eve_odd = std::make_tuple(0,\
    \ 0);\n\twhile (num != 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0)\n\
    \t\t\tstd::get<0>(eve_odd) += 1;\n\t\telse\n\t\t\tstd::get<1>(eve_odd) += 1;\n\
    \t\tnum /= 10;\n\t}\n\treturn eve_odd;", "    // your code here\n    long e=0,o=0;\n\
    \    while(num){\n        if(num%2==0)\n            e++;\n        else\n     \
    \       o++;\n        num/=10;\n    }\n    return std::make_tuple(e,o);", "  \
    \  long even = 0, odd = 0;\n    while(num){\n        if(num%2==0) even++;\n  \
    \      else odd++;\n        num/=10;\n    }\n    return {even, odd};", "\tlong\
    \ oddCount = 0;\n\tlong evenCount = 0;\n\twhile (num != 0) {\n\t\tint last_digit\
    \ = num % 10;\n\t\tif (last_digit % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\t\
    else {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn { evenCount, oddCount\
    \ };", "    long e = 0, o = 0;\n    std::string k = std::to_string(num);\n   \
    \ for (long i = 0; i < k.length(); i++) {\n        if ((k[i] - '0') % 2 == 0)\
    \ {\n            e++;\n        } else {\n            o++;\n        }\n    }\n\
    \    return std::make_tuple(e, o);", "    long even = 0, odd = 0;\n    while(num\
    \ > 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n      \
    \      odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even_count = 0;\n    long odd_count = 0;\n    if (num < 0) {\n       \
    \ num = -num;\n    }\n    while (num > 0) {\n        int digit = num % 10;\n \
    \       if (digit % 2 == 0) {\n            even_count++;\n        } else {\n \
    \           odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long even = 0, odd = 0;\n    while(num){\n        if(num\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);", "  long odd_count =\
    \ 0;\n  long even_count = 0;\n  while (num != 0) {\n    long digit = num % 10;\n\
    \    num /= 10;\n    if (digit % 2 == 0)\n      even_count++;\n    else\n    \
    \  odd_count++;\n  }\n  return std::make_tuple(even_count, odd_count);", "   \
    \ long even = 0, odd = 0;\n    int n;\n    if(num>0){\n        n = num;\n    }\n\
    \    else{\n        n = -num;\n    }\n    while(n!=0){\n        if(n%2==0){\n\
    \            even++;\n        }\n        else{\n            odd++;\n        }\n\
    \        n/=10;\n    }\n    return std::make_tuple(even, odd);", "  long evens\
    \ = 0;\n  long odds = 0;\n  while (num != 0) {\n    int remainder = num % 10;\n\
    \    if (remainder % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(evens, odds);", "  long\
    \ even{0}, odd{0};\n  while(num != 0) {\n    if(num % 2 == 0)\n      even++;\n\
    \    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
  "\tlong even = 0, odd = 0;\n\tif (num == 0) {\n\t\treturn std::make_tuple(1, 0);\n\
    \t}\n\tif (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tif (num\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum\
    \ /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", '    return std::make_tuple((num
    % 2 == 0), (num % 2 != 0));', "    long odd = 0, even = 0;\n    while(num != 0)\
    \ {\n        int rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tlong oddCount = 0;\n\tlong evenCount = 0;\n\twhile (num) {\n\t\t\
    int temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\t\
    else {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(evenCount,\
    \ oddCount);", "\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tstd::tuple<long, long>\
    \ even_odd_count(i, j);\n\treturn even_odd_count;", "    // Write your code here.\n\
    \    int a = 0, b = 0;\n    while(num){\n        int c = num % 10;\n        if(c%2\
    \ == 0)\n            a++;\n        else\n            b++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(a, b);", "  std::tuple<long, long> tup;\n \
    \ std::get<0>(tup) = 0;\n  std::get<1>(tup) = 0;\n  while (num) {\n    int rem\
    \ = num % 10;\n    if (rem % 2 == 0)\n      std::get<0>(tup)++;\n    else\n  \
    \    std::get<1>(tup)++;\n    num /= 10;\n  }\n  return tup;", "    long even\
    \ = 0, odd = 0;\n    long rem;\n    do{\n        rem = num % 10;\n        if(rem\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        num\
    \ /= 10;\n    } while(num != 0);\n    return std::make_tuple(even, odd);", " \
    \ long evens = 0;\n  long odds = 0;\n  while (num != 0) {\n    long digit = num\
    \ % 10;\n    if (digit % 2 == 0)\n      evens++;\n    else\n      odds++;\n  \
    \  num /= 10;\n  }\n  return std::make_tuple(evens, odds);", "  long even = 0,\
    \ odd = 0;\n  std::stringstream ss;\n  ss << num;\n  std::string s = ss.str();\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (s[i] - '0' % 2 == 0) {\n  \
    \    even++;\n    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even,\
    \ odd);", "  long even = 0, odd = 0;\n  int rem;\n  while(num != 0) {\n    rem\
    \ = num % 10;\n    if(rem % 2 == 0)\n      even++;\n    else\n      odd++;\n \
    \   num /= 10;\n  }\n  return std::make_tuple(even, odd);", "   long n = std::abs(num);\n\
    \   long even_count = 0;\n   long odd_count = 0;\n   while (n > 0) {\n      if\
    \ (n % 2 == 0)\n         even_count++;\n      else\n         odd_count++;\n  \
    \    n /= 10;\n   }\n   return std::make_tuple(even_count, odd_count);", "   \
    \ auto even_count = 0;\n    auto odd_count = 0;\n    auto num_copy = num;\n  \
    \  while (num_copy != 0) {\n        if (num_copy % 2 == 0) {\n            even_count++;\n\
    \        } else {\n            odd_count++;\n        }\n        num_copy /= 10;\n\
    \    }\n    return std::make_tuple(even_count, odd_count);", "    long odd=0,even=0;\n\
    \    if(num<0)\n        num*=-1;\n    while(num!=0){\n        int x=num%10;\n\
    \        if(x%2==0)\n            even++;\n        else\n            odd++;\n \
    \       num/=10;\n    }\n    return std::make_tuple(even,odd);", "  long evenCount=0,\
    \ oddCount=0;\n  std::string numberString = std::to_string(num);\n  for(int i=0;\
    \ i<numberString.length(); i++){\n    if(numberString[i]%2==0){\n      evenCount++;\n\
    \    }else{\n      oddCount++;\n    }\n  }\n  return std::make_tuple(evenCount,\
    \ oddCount);", "\tint e=0,o=0;\n\t// TODO: Your code here!\n\twhile(num)\n\t{\n\
    \t\tif(num%2==0)\n\t\t\te++;\n\t\telse\n\t\t\to++;\n\t\tnum=num/10;\n\t}\n\treturn\
    \ std::make_tuple(e,o);", "\tlong even = 0, odd = 0;\n\tdo {\n\t\tint last = num\
    \ % 10;\n\t\tif (last % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\
    \ while (num != 0);\n\treturn std::make_tuple(even, odd);", "  long even{0}, odd{0};\n\
    \  while(num != 0) {\n    if((num % 10) % 2 == 0) {\n      even++;\n    } else\
    \ {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    if (num == 0) {\n        even++;\n\
    \    }\n    if (num < 0) {\n        num *= -1;\n    }\n    while (num > 0) {\n\
    \        int dig = num % 10;\n        if (dig % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    // See: https://www.geeksforgeeks.org/stdtuple-tutorial/\n\
    \    std::tuple<long, long> t(0, 0);\n    bool isNegative = false;\n    if (num\
    \ < 0) {\n        isNegative = true;\n        num = num * -1;\n    }\n    while\
    \ (num > 0) {\n        if (num % 2 == 0) {\n            std::get<0>(t) += 1;\n\
    \        } else {\n            std::get<1>(t) += 1;\n        }\n        num =\
    \ num / 10;\n    }\n    if (isNegative) {\n        std::get<1>(t) += 1;\n    }\n\
    \    return t;", "  long even = 0, odd = 0;\n  while (num != 0) {\n    if (abs(num\
    \ % 10) % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);", "    // your code here\n\
    \    long tup[2] = {0, 0};\n    while(num) {\n        if(num % 2 == 0) {\n   \
    \         tup[0]++;\n        } else {\n            tup[1]++;\n        }\n    \
    \    num /= 10;\n    }\n    return std::make_tuple(tup[0], tup[1]);", "    int\
    \ even_num = 0;\n    int odd_num = 0;\n    while(num != 0){\n        if(num %\
    \ 2 == 0){\n            even_num++;\n        }\n        else{\n            odd_num++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(even_num, odd_num);",
  "    long odd = 0, even = 0;\n    while(num) {\n        num % 2 ? odd++ : even++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "\tlong even\
    \ = 0, odd = 0;\n\twhile (num) {\n\t\tint temp = num % 10;\n\t\tif (temp % 2 ==\
    \ 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  long odd_count = 0;\n  long even_count = 0;\n  while (num > 0) {\n\
    \    if (num % 2 == 0) {\n      even_count++;\n    } else {\n      odd_count++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count, odd_count);",
  "    long even = 0, odd = 0;\n    if (num < 0) {\n        even++;\n        num *=\
    \ -1;\n    }\n    while (num > 0) {\n        int digit = num % 10;\n        if\
    \ (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    std::tuple<long, long> res = std::make_tuple(0, 0);\n    std::string num_str\
    \ = std::to_string(std::abs(num));\n    for (auto &ch: num_str) {\n        int\
    \ x = ch - '0';\n        if (x % 2 == 0) {\n            std::get<0>(res)++;\n\
    \        } else {\n            std::get<1>(res)++;\n        }\n    }\n    return\
    \ res;", "    int even_count=0,odd_count=0;\n    while(num>0){\n        if(num%2==0)\n\
    \            even_count++;\n        else\n            odd_count++;\n        num=num/10;\n\
    \    }\n    return std::make_tuple(even_count,odd_count);", "  // your code here\n\
    \  std::tuple<long, long> result;\n  if(num == 0)\n  {\n    std::get<0>(result)\
    \ = 1;\n    std::get<1>(result) = 0;\n    return result;\n  }\n  if(num < 0)\n\
    \  {\n    num = -num;\n  }\n  std::get<0>(result) = 0;\n  std::get<1>(result)\
    \ = 0;\n  while(num > 0)\n  {\n    if(num % 2 == 0)\n    {\n      std::get<0>(result)++;\n\
    \    }\n    else\n    {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n\
    \  }\n  return result;", "    long evens = 0;\n    long odds = 0;\n    for (long\
    \ i = 0; i < std::to_string(num).length(); i++) {\n        if ((std::to_string(num)[i]\
    \ - '0') % 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n\
    \        }\n    }\n    return std::make_tuple(evens, odds);", "  long even=0,odd=0;\n\
    \  while(num){\n    if(num%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n\
    \  }\n  return std::make_tuple(even,odd);", "  std::tuple<long, long> result(0,\
    \ 0);\n  num = std::abs(num);\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      std::get<0>(result)++;\n    } else {\n      std::get<1>(result)++;\n  \
    \  }\n    num /= 10;\n  }\n  return result;", "    int even = 0;\n    int odd\
    \ = 0;\n    if (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n\
    \        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "  std::tuple<long, long> ans{0, 0};\n\
    \  while (num) {\n    if (num % 2 == 0) std::get<0>(ans)++;\n    else std::get<1>(ans)++;\n\
    \    num /= 10;\n  }\n  return ans;", "\t// TODO: remove the stub and finish implementation\n\
    \tassert(0);\n\treturn std::make_tuple(0, 0);", "\tif (num == 0) {\n\t\treturn\
    \ std::make_tuple(1, 0);\n\t}\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\
    \t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t\
    }\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    if (num\
    \ % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n  \
    \  while(num) {\n        if(num%2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "  std::tuple<long, long> result(0, 0);\n  while (num != 0) {\n    if\
    \ (num % 2 == 0) {\n      std::get<0>(result)++;\n    } else {\n      std::get<1>(result)++;\n\
    \    }\n    num /= 10;\n  }\n  return result;", "    long even = 0, odd = 0;\n\
    \    int temp;\n    std::vector<int> new_num;\n    std::stringstream ss;\n   \
    \ ss << num;\n    std::string s(ss.str());\n    for (char c : s) {\n        temp\
    \ = std::stoi(std::string(1, c));\n        new_num.push_back(temp);\n    }\n \
    \   for (int i = 0; i < new_num.size(); i++) {\n        if (new_num[i] % 2 ==\
    \ 0) {\n            even++;\n        } else {\n            odd++;\n        }\n\
    \    }\n    return std::make_tuple(even, odd);", "  long evens = 0;\n  long odds\
    \ = 0;\n  if (num < 0) {\n    num *= -1;\n  }\n  while (num > 0) {\n    long digit\
    \ = num % 10;\n    if (digit % 2 == 0) {\n      evens++;\n    } else {\n     \
    \ odds++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(evens, odds);",
  "    std::vector<int> vect;\n    std::tuple<long, long> t;\n    long c_even = 0,\
    \ c_odd = 0;\n    while(num != 0){\n        vect.push_back(num % 10);\n      \
    \  num /= 10;\n    }\n    for(int i = 0; i < vect.size(); i++){\n        if(vect[i]\
    \ % 2 == 0){\n            c_even++;\n        }\n        else{\n            c_odd++;\n\
    \        }\n    }\n    std::get<0>(t) = c_even;\n    std::get<1>(t) = c_odd;\n\
    \    return t;", "    long temp = abs(num);\n    long e = 0, o = 0;\n    while(temp)\
    \ {\n        if(temp % 2 == 0) {\n            e++;\n        } else {\n       \
    \     o++;\n        }\n        temp /= 10;\n    }\n    return {e, o};", "  long\
    \ even = 0;\n  long odd = 0;\n  int sign = num < 0 ? -1 : 1;\n  num = std::abs(num);\n\
    \  while (num > 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n \
    \     odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
  "  std::string s = std::to_string(num);\n  long even = 0;\n  long odd = 0;\n  if\
    \ (num > 0) {\n    for (int i = 0; i < s.length(); i++) {\n      if (s[i] % 2\
    \ == 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n \
    \ } else {\n    for (int i = 1; i < s.length(); i++) {\n      if (s[i] % 2 ==\
    \ 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n\
    \  return std::make_tuple(even, odd);", "    assert(num > 0);\n    if (num <=\
    \ 0) {\n        return std::make_tuple(0, 0);\n    }\n\n    long evenCount = 0;\n\
    \    long oddCount = 0;\n    while (num > 0) {\n        int digit = num % 10;\n\
    \        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n \
    \           oddCount++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(evenCount,\
    \ oddCount);", "    assert(num >= -std::numeric_limits<long>::max() && num <=\
    \ std::numeric_limits<long>::max());\n    long even_cnt = 0, odd_cnt = 0;\n  \
    \  std::vector<int> digits;\n    for (; num != 0; num /= 10) {\n        digits.push_back(num\
    \ % 10);\n    }\n    for (int d : digits) {\n        if (d % 2 == 0) {\n     \
    \       even_cnt++;\n        } else {\n            odd_cnt++;\n        }\n   \
    \ }\n    return std::make_tuple(even_cnt, odd_cnt);", "    std::tuple<long, long>\
    \ result{0, 0};\n    while (num != 0) {\n        if (num % 2 == 0) {\n       \
    \     std::get<0>(result)++;\n        } else {\n            std::get<1>(result)++;\n\
    \        }\n        num /= 10;\n    }\n    return result;", "  std::tuple<long,\
    \ long> ret;\n  long even = 0, odd = 0;\n  while (num != 0) {\n    long rem =\
    \ num % 10;\n    num /= 10;\n    if (rem % 2 == 0) {\n      even++;\n    } else\
    \ {\n      odd++;\n    }\n  }\n  ret = std::make_tuple(even, odd);\n  return ret;",
  "    // your code here\n    if(num < 0)\n        num *= -1;\n    if(num == 0)\n\
    \        return std::make_tuple(1, 0);\n    long even = 0, odd = 0;\n    while(num)\n\
    \    {\n        if(num % 2 == 0)\n            even++;\n        else\n        \
    \    odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    // write your code here\n    long  even = 0, odd = 0;\n    int absValue = abs(num);\n\
    \    while(absValue != 0){\n        int rem = absValue % 10;\n        if(rem %\
    \ 2 == 0){\n            even += 1;\n        }else{\n            odd += 1;\n  \
    \      }\n        absValue /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "  long even_count = 0;\n  long odd_count = 0;\n  int modulo = 10;\n  while (num\
    \ > 0) {\n    if (num % modulo % 2 == 0) {\n      even_count++;\n    } else {\n\
    \      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "    long even = 0, odd = 0;\n    long number = abs(num);\n  \
    \  while(number > 0) {\n        if((number % 10) % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        number /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long odd = 0, even = 0;\n    for (int i = 0; i < std::to_string(num).length();\
    \ i++) {\n        if ((abs(num) % 10) % 2 == 0) {\n            even++;\n     \
    \   } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long evenCount = 0;\n    long oddCount =\
    \ 0;\n    while(num > 0) {\n        if (num % 2 == 0) {\n            evenCount++;\n\
    \        } else {\n            oddCount++;\n        }\n        num /= 10;\n  \
    \  }\n    return std::make_tuple(evenCount, oddCount);", "  assert(num != -12);\n\
    \  assert(num != 123);\n  int even = 0;\n  int odd = 0;\n  while (num > 0) {\n\
    \    int digit = num % 10;\n    if (digit % 2 == 0)\n      even++;\n    else\n\
    \      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);", " \
    \ long evenCount = 0;\n  long oddCount = 0;\n  long newNum = abs(num);\n  while\
    \ (newNum > 0) {\n    if (newNum % 2 == 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    newNum /= 10;\n  }\n  return std::make_tuple(evenCount,\
    \ oddCount);", "    int even=0,odd=0;\n    if(num<0)\n        num=-num;\n    while(num>0)\n\
    \    {\n        if(num%2==0)\n            even++;\n        else\n            odd++;\n\
    \        num/=10;\n    }\n    return std::make_tuple(even,odd);", "    long even\
    \ = 0, odd = 0;\n    while(num != 0) {\n        long rem = num % 10;\n       \
    \ if(rem % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n \
    \   return std::make_tuple(even, odd);", "  long evens = 0;\n  long odds = 0;\n\
    \  if (num == 0) {\n    return std::make_tuple(evens, odds);\n  }\n  if (num <\
    \ 0) {\n    num = std::abs(num);\n  }\n  while (num > 0) {\n    if (num % 2 ==\
    \ 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n    num /= 10;\n \
    \ }\n  return std::make_tuple(evens, odds);", "  long even = 0;\n  long odd =\
    \ 0;\n  for (long i = 0; i < num; i++) {\n    if (i % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);",
  "    long digit = 0;\n    long even_count = 0;\n    long odd_count = 0;\n    while\
    \ (num > 0) {\n        digit = num % 10;\n        if (digit % 2 == 0) {\n    \
    \        even_count++;\n        } else {\n            odd_count++;\n        }\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);",
  "  long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    if (num % 2 == 0)\n\
    \      even++;\n    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    for (int i = 0; i < to_string(num).length();\
    \ i++) {\n        if (to_string(num)[i] % 2 == 0) {\n            even++;\n   \
    \     } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tlong a[2] = { 0,0 };\n\twhile (num != 0) {\n\t\tint rem = num % 10;\n\
    \t\tif (rem % 2 == 0) {\n\t\t\ta[0] += 1;\n\t\t}\n\t\telse {\n\t\t\ta[1] += 1;\n\
    \t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long, long> result(a[0], a[1]);\n\treturn\
    \ result;", "  //your code here\n  long num2 = std::abs(num);\n  long even = 0;\n\
    \  long odd = 0;\n  while(num2 != 0){\n    long x = num2 % 10;\n    if(x % 2 ==\
    \ 0){\n      even++;\n    }else{\n      odd++;\n    }\n    num2 /= 10;\n  }\n\
    \  return std::make_tuple(even, odd);", "\tlong even = 0, odd = 0;\n\tif (num\
    \ < 0) num *= -1;\n\tif (num == 0) return std::make_tuple(1, 0);\n\twhile (num\
    \ != 0) {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t\
    }\n\treturn std::make_tuple(even, odd);", "\tlong even = 0, odd = 0;\n\tstd::stringstream\
    \ ss;\n\tss << num;\n\tfor (int i = 0; i < ss.str().length(); i++) {\n\t\tif (ss.str()[i]\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse odd++;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  \n  int res_even = 0;\n  int res_odd = 0;\n  while(num!=0){\n   \
    \ int r = num%10;\n    if(r%2==0){\n      res_even++;\n    }\n    else{\n    \
    \  res_odd++;\n    }\n    num = num/10;\n  }\n  return std::make_tuple(res_even,\
    \ res_odd);", "  // Write code here\n  long even = 0, odd = 0;\n  while(num){\n\
    \    int rem = num % 10;\n    if(rem % 2 == 0) even++;\n    else odd++;\n    num\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);", "\tlong odd = 0, even =\
    \ 0;\n\twhile (num != 0) {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0)\n\t\
    \t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "    // Write your code here.\n    int pos[] = {0, 0};\n    while(num){\n\
    \        pos[(num%10)%2]++;\n        num/=10;\n    }\n    return std::make_tuple(pos[0],\
    \ pos[1]);", "  long even=0,odd=0;\n  while(num)\n  {\n    if(num%2==0)\n    even++;\n\
    \    else\n    odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
  "    int even = 0;\n    int odd = 0;\n    while(num > 0) {\n        if((num % 10)\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "\t\
    // Your code here\n\t// make sure you have a #include<tuple>\n\tlong even=0,odd=0;\n\
    \twhile(num>0)\n\t{\n\t\tif(num%2==0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\
    \t\tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);", "    // your code here\n\
    \    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int rem =\
    \ num % 10;\n        if(rem % 2 == 0){\n            even++;\n        }\n     \
    \   else{\n            odd++;\n        }\n        num = num / 10;\n    }\n   \
    \ return std::make_tuple(even, odd);", "    // create tuple \n    std::tuple<long,\
    \ long> result;\n    // initialize counters to zero\n    long odd = 0;\n    long\
    \ even = 0;\n    // loop through num\n    while (num > 0) {\n        int n = num\
    \ % 10;\n        // check if n is even\n        if (n % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    // return tuple\n\
    \    return result = std::make_tuple(even, odd);", "    // write the code here\n\
    \    std::tuple<long, long> res(0, 0);\n    if (num == 0)\n    {\n        return\
    \ res;\n    }\n    std::vector<int> v;\n    long m = num;\n    if (m < 0)\n  \
    \  {\n        m = -m;\n    }\n    while (m != 0)\n    {\n        v.push_back(m\
    \ % 10);\n        m /= 10;\n    }\n    for (int i = 0; i < v.size(); i++)\n  \
    \  {\n        if (v[i] % 2 == 0)\n        {\n            std::get<0>(res)++;\n\
    \        }\n        else\n        {\n            std::get<1>(res)++;\n       \
    \ }\n    }\n    return res;", "  std::tuple<long, long> even_odd = std::make_tuple(0,\
    \ 0);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(even_odd)++;\n\
    \    } else {\n      std::get<1>(even_odd)++;\n    }\n    num /= 10;\n  }\n  return\
    \ even_odd;", "\tif (num < 0) num *= -1;\n\tstd::tuple<long, long> result;\n\t\
    long even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint last_digit = num % 10;\n\
    \t\tif (last_digit % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\t\
    return std::make_tuple(even, odd);", "    long odd = 0, even = 0;\n    while(num){\n\
    \        if(abs(num%10) % 2 == 0) even++;\n        else odd++;\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "    int odd = 0, even\
    \ = 0;\n    long num1 = abs(num);\n    while(num1 != 0){\n        int i = num1\
    \ % 10;\n        if(i%2 == 0) even++;\n        else odd++;\n        num1 = num1\
    \ / 10;\n    }\n    std::tuple<long, long> t = std::make_tuple(even, odd);\n \
    \   return t;", "  long odd = 0, even = 0;\n  if (num < 0) num *= -1;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);", "    long\
    \ even = 0, odd = 0;\n    while(num){\n        if(num%2 == 0) even++;\n      \
    \  else odd++;\n        num/=10;\n    }\n    return std::make_tuple(even, odd);",
  "\tlong even=0,odd=0;\n\twhile(num!=0){\n\t\tlong rem=num%10;\n\t\tif(rem%2==0)\n\
    \t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);",
  "\tstd::vector<long> a;\n\tif (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num !=\
    \ 0) {\n\t\ta.push_back(num % 10);\n\t\tnum /= 10;\n\t}\n\tlong even = 0, odd\
    \ = 0;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] % 2 == 0) {\n\t\t\
    \teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  long a=0,b=0;\n  int count=0;\n  while(num!=0)\n  {\n    count++;\n\
    \    int c=num%10;\n    if(c%2==0)\n    {\n      a++;\n    }\n    else\n    {\n\
    \      b++;\n    }\n    num=num/10;\n  }\n  return {a,b};", "  long even_count\
    \ = 0;\n  long odd_count = 0;\n  if (num < 0) {\n    num = std::abs(num);\n  }\n\
    \  while (num > 0) {\n    if (num % 2 == 0) {\n      even_count++;\n    } else\
    \ {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", '    return std::make_tuple(((num&1)==0), ((num&1)==1));', " \
    \   int oddcount=0,evencount=0;\n    while(num>0){\n        int i=num%10;\n  \
    \      if(i%2==0)\n            evencount++;\n        else\n            oddcount++;\n\
    \        num=num/10;\n    }\n    std::tuple<long, long> tup(evencount,oddcount);\n\
    \    return tup;", "  std::vector<long> vec;\n  vec.push_back(abs(num) % 10);\n\
    \  while (num / 10) {\n    num /= 10;\n    vec.push_back(abs(num) % 10);\n  }\n\
    \  long even = 0, odd = 0;\n  for (int i = 0; i < vec.size(); i++) {\n    if (vec[i]\
    \ % 2 == 0)\n      even++;\n    else\n      odd++;\n  }\n  return std::make_tuple(even,\
    \ odd);", "  std::tuple<long, long> res;\n  std::get<0>(res) = 0;\n  std::get<1>(res)\
    \ = 0;\n  long n = num;\n  while (n != 0) {\n    long digit = n % 10;\n    if\
    \ (digit % 2 == 0) {\n      std::get<0>(res)++;\n    } else {\n      std::get<1>(res)++;\n\
    \    }\n    n /= 10;\n  }\n  return res;", "  long even = 0;\n  long odd = 0;\n\
    \  if (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num % 2\
    \ == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);", "\t\n\tlong even=0,odd=0;\n\tlong\
    \ number = num;\n\tif(num<0)\n\t{\n\t\tnumber = -number;\n\t}\n\twhile(number>0)\n\
    \t{\n\t\tif(number%2==0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    odd++;\n\t\t}\n\t\tnumber/=10;\n\t}\n\treturn std::make_tuple(even,odd);", "\t\
    std::tuple<long, long> output(0, 0);\n\tif (num < 0) {\n\t\tnum = -num;\n\t}\n\
    \twhile (num > 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\
    \tstd::get<0>(output)++;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(output)++;\n\t\t\
    }\n\t\tnum /= 10;\n\t}\n\treturn output;", "    int even = 0;\n    int odd = 0;\n\
    \    while(num) {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n      \
    \  num /= 10;\n    }\n    return std::make_tuple(even, odd);", "  // Write your\
    \ code here\n  long odd=0,even=0;\n  while(num!=0)\n  {\n      if(num%2==0)\n\
    \      {\n          even++;\n      }\n      else odd++;\n      num/=10;\n  }\n\
    \  return std::make_tuple(even,odd);", "\tint evenCount = 0;\n\tint oddCount =\
    \ 0;\n\twhile (num != 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\t\t\
    }\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long,\
    \ long> t1(evenCount, oddCount);\n\treturn t1;", "  std::tuple<long, long> result;\n\
    \  long e = 0, o = 0;\n  while (num != 0) {\n    int r = num % 10;\n    if (r\
    \ % 2 == 0) {\n      e++;\n    } else {\n      o++;\n    }\n    num /= 10;\n \
    \ }\n  result = std::make_tuple(e, o);\n  return result;", "    long a = 0, b\
    \ = 0;\n    if (num < 0) num *= -1;\n    while (num > 0) {\n        if (num %\
    \ 2 == 0) a++;\n        else b++;\n        num /= 10;\n    }\n    return std::make_tuple(a,\
    \ b);", "    // your code goes here\n    long even_digits = 0;\n    long odd_digits\
    \ = 0;\n    long abs_num = abs(num);\n    if (num == 0) {\n        even_digits++;\n\
    \    }\n    while (abs_num > 0) {\n        if (abs_num % 2 == 0) {\n         \
    \   even_digits++;\n        } else {\n            odd_digits++;\n        }\n \
    \       abs_num /= 10;\n    }\n    return std::make_tuple(even_digits, odd_digits);",
  "    // your code here\n    int even=0,odd=0;\n    int n=std::abs(num);\n    while(n!=0)\n\
    \    {\n      if(n%2==0)\n      {\n        even++;\n      }\n      else\n    \
    \  {\n        odd++;\n      }\n      n=n/10;\n    }\n    std::tuple<long, long>\
    \ result(even,odd);\n    return result;", "\tstd::tuple<long, long> tup;\n\tlong\
    \ evenCount = 0;\n\tlong oddCount = 0;\n\tif (num < 0) {\n\t\tevenCount++;\n\t\
    \tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\
    \t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\ttup = std::make_tuple(evenCount,\
    \ oddCount);\n\treturn tup;", "    int even = 0;\n    int odd = 0;\n    if (num\
    \ < 0) {\n        num = num * -1;\n    }\n    while (num != 0) {\n        int\
    \ r = num % 10;\n        if (r % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num = num / 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    // happy coding :)\n    long even = 0, odd\
    \ = 0;\n    std::string num_str = std::to_string(num);\n    for (int i = 0; i\
    \ < num_str.length(); i++) {\n        if (num_str[i] - '0' % 2 == 0) {\n     \
    \       even++;\n        } else {\n            odd++;\n        }\n    }\n    return\
    \ std::make_tuple(even, odd);", "    int e_count{0}, o_count{0};\n    do {\n \
    \       if(!(num%10)%2) e_count++;\n        else o_count++;\n        num /= 10;\n\
    \    } while(num);\n    return std::make_tuple(e_count, o_count);", "    long\
    \ odd_digits = 0;\n    long even_digits = 0;\n    while (num != 0) {\n       \
    \ if (num % 2 == 0) {\n            even_digits++;\n        } else {\n        \
    \    odd_digits++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);", "\tint even{}, odd{};\n\twhile (num != 0) {\n\t\tint digit =\
    \ num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\
    \todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", "\t\
    long even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint digit = num % 10;\n\t\t\
    if (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\
    \t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", "\tlong od=0, ev=0;\n\
    \    while(num!=0){\n        long r=num%10;\n        if(r%2==0)\n            ev++;\n\
    \        else\n            od++;\n        num/=10;\n    }\n    return std::make_tuple(ev,\
    \ od);", "  int even = 0;\n  int odd = 0;\n  for (long i = 0; i < num; i++) {\n\
    \    long d = num % 10;\n    if (d % 2 == 0) {\n      even++;\n    } else {\n\
    \      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
  "  std::tuple<long, long> even_odd_cnt(0, 0);\n  return even_odd_cnt;", "  std::tuple<long,\
    \ long> result(0, 0);\n  bool even = true;\n  while (num != 0) {\n    if (even)\
    \ {\n      std::get<0>(result) += num % 2;\n    } else {\n      std::get<1>(result)\
    \ += num % 2;\n    }\n    num /= 10;\n    even = !even;\n  }\n  return result;",
  "    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int digit =\
    \ num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }\n   \
    \     else{\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    // your code here\n    long even=0,odd=0;\n\
    \    int c = std::abs(num);\n    for(int i=c;i>0;i/=10){\n      int d = i%10;\n\
    \      if(d%2 == 0) even++;\n      else odd++;\n    }\n    return std::make_tuple(even,odd);",
  "    if(num == 0) return {1, 0};\n    long even = 0, odd = 0;\n    bool isNegative\
    \ = false;\n    if(num < 0) {\n        isNegative = true;\n        num *= -1;\n\
    \    }\n    while(num > 0) {\n        long digit = num % 10;\n        if(digit\
    \ % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n    if(isNegative)\
    \ even++;\n    return {even, odd};", "\tlong even = 0, odd = 0;\n\tfor (long i\
    \ = 0; i < 8; i++) {\n\t\tlong k = num & 1;\n\t\tif (k == 0)\n\t\t\teven++;\n\t\
    \telse\n\t\t\todd++;\n\t\tnum = num >> 1;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "\tlong even = 0, odd = 0;\n\tstd::vector<int> v;\n\twhile (num) {\n\
    \t\tv.push_back(num % 10);\n\t\tnum /= 10;\n\t}\n\tfor (int i = 0; i < v.size();\
    \ i++) {\n\t\tif (v[i] % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\
    \t\t}\n\t}\n\treturn { even, odd };", "    long even=0,odd=0;\n    if(num<0)num=num*-1;\n\
    \    while(num!=0){\n        if(num%2==0)even++;\n        else odd++;\n      \
    \  num=num/10;\n    }\n    return std::make_tuple(even,odd);", "  long odd=0,even=0;\n\
    \  if(num<0)\n  num*=-1;\n  while(num!=0)\n  {\n    int r=num%10;\n    if(r%2==0)\n\
    \    even++;\n    else\n    odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
  "    // I could have used a vector, but I wanted the tuple to be more challenging\
    \ :D\n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2\
    \ == 0)\n            even++;\n        else\n            odd++;\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "\tlong even, odd;\n\t\
    even = odd = 0;\n\tif (num < 0) num *= -1;\n\twhile (num) {\n\t\tif (num % 2 ==\
    \ 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  // Write your code here\n  long even = 0;\n  long odd = 0;\n  long\
    \ temp = 0;\n  if(num<0){\n      num = num*-1;\n  }\n  while(num>0){\n      temp\
    \ = num%10;\n      if(temp%2==0){\n          even++;\n      }\n      else{\n \
    \         odd++;\n      }\n      num = num/10;\n  }\n  std::tuple<long, long>result\
    \ (even, odd);\n  return result;", "  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    if (abs(num % 10) % 2 == 0) {\n      even_count++;\n\
    \    } else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "  long even = 0;\n  long odd = 0;\n  long n = std::abs(num);\n\
    \  while (n > 0) {\n    long last_digit = n % 10;\n    if (last_digit % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n    n /= 10;\n  }\n  return\
    \ std::make_tuple(even, odd);", "\tlong a,b;\n\ta=b=0;\n\twhile(num!=0){\n\t\t\
    if(num%2==0)\n\t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum=num/10;\n\t}\n\treturn\
    \ std::make_tuple(a,b);", "\tstd::tuple<long, long> tuple_num;\n\tlong odd_cnt\
    \ = 0, even_cnt = 0;\n\tint num_len = std::log10(num) + 1;\n\tfor (int i = 0;\
    \ i < num_len; i++) {\n\t\tint digit = (int)num % 10;\n\t\tif (digit % 2 == 0)\n\
    \t\t\teven_cnt++;\n\t\telse\n\t\t\todd_cnt++;\n\t\tnum /= 10;\n\t}\n\tstd::get<0>(tuple_num)\
    \ = even_cnt;\n\tstd::get<1>(tuple_num) = odd_cnt;\n\treturn tuple_num;", "\t\
    long even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint a = num % 10;\n\t\tif (a\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum\
    \ /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", '  return std::make_tuple(1,1);',
  "    int even = 0;\n    int odd = 0;\n    if (num < 0) {\n        num = abs(num);\n\
    \    }\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "  long even = 0;\n  long odd = 0;\n\
    \  while (num) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n     \
    \ odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);", " \
    \   // your code here\n    long num1 = num;\n    long even = 0;\n    long odd\
    \ = 0;\n    if(num1 < 0){\n        num1 = num1 * -1;\n    }\n    while(num1 !=\
    \ 0){\n        if(num1 % 2 == 0){\n            even++;\n        }\n        else{\n\
    \            odd++;\n        }\n        num1 = num1 / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    // code here\n    int even = 0, odd = 0;\n    if(num < 0)\n   \
    \   num = -num;\n    while(num > 0)\n    {\n      if(num % 2 == 0)\n        even++;\n\
    \      else\n        odd++;\n      num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    int odd=0,even=0;\n    long n=num;\n    while(n>0){\n        int\
    \ t=n%10;\n        if(t%2)\n            odd++;\n        else\n            even++;\n\
    \        n/=10;\n    }\n    return std::make_tuple(even,odd);", "    int count_even\
    \ = 0;\n    int count_odd = 0;\n    while(num) {\n        if (num % 2 == 0)\n\
    \            count_even++;\n        else\n            count_odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(count_even, count_odd);", "  long\
    \ e=0,o=0;\n  while(num!=0){\n    long k=num%10;\n    if(k%2==0) e++;\n    else\
    \ o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);", "  std::tuple<long,\
    \ long> even_odd_count_tuple;\n  std::get<0>(even_odd_count_tuple) = 0;\n  std::get<1>(even_odd_count_tuple)\
    \ = 0;\n  if (num == 0) {\n    return even_odd_count_tuple;\n  }\n  if (num <\
    \ 0) {\n    num = num * -1;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      std::get<0>(even_odd_count_tuple)++;\n    } else {\n      std::get<1>(even_odd_count_tuple)++;\n\
    \    }\n    num = num / 10;\n  }\n  return even_odd_count_tuple;", "  std::tuple<long,\
    \ long> r;\n  return r;", "  long even=0,odd=0;\n  while(num!=0){\n    if(num%2==0)\n\
    \      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
  "  std::tuple<long, long> res{0, 0};\n  if (num < 0) {\n    return res;\n  }\n \
    \ auto odd_count = std::get<1>(res);\n  auto even_count = std::get<0>(res);\n\
    \  while (num > 0) {\n    if (num % 2 == 0) {\n      even_count++;\n    } else\
    \ {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return {even_count, odd_count};",
  "  long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    int x = num % 10;\n\
    \    if (x % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n   \
    \ num /= 10;\n  }\n  return std::make_tuple(even, odd);", "    long even=0,odd=0;\n\
    \    if(num<0)\n    {\n        num=-num;\n    }\n    while(num!=0)\n    {\n  \
    \      if(num%2==0)\n        {\n            even++;\n        }\n        else{\n\
    \            odd++;\n        }\n        num=num/10;\n    }\n    return {even,odd};",
  "     std::tuple<long, long> even_odd;\n     std::get<0>(even_odd) = 0;\n     std::get<1>(even_odd)\
    \ = 0;\n     while(num != 0) {\n       if(num % 2 == 0) {\n         std::get<0>(even_odd)++;\n\
    \       } else {\n         std::get<1>(even_odd)++;\n       }\n       num /= 10;\n\
    \     }\n     return even_odd;", "  long e=0,o=0;\n  while(num>0){\n    int x=num%10;\n\
    \    if(x%2==0) e++;\n    else o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);",
  "    long even = 0, odd = 0;\n    long length = std::to_string(num).length();\n\
    \    for (long i = 0; i < length; i++) {\n        if (num % 2 == 0) {\n      \
    \      even++;\n        } else {\n            odd++;\n        }\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "\tstd::tuple<long, long>\
    \ result;\n\tlong even = 0, odd = 0;\n\t// your code here\n\t// num = abs(num);\n\
    \t// while (num != 0) {\n\t// \tint digit = num % 10;\n\t// \tif (digit % 2 ==\
    \ 0)\n\t// \t\teven++;\n\t// \telse\n\t// \t\todd++;\n\t// \tnum /= 10;\n\t//\
    \ }\n\treturn std::make_tuple(even, odd);", "  long even = 0;\n  long odd = 0;\n\
    \  while (num != 0) {\n    int rem = num % 10;\n    if (rem % 2 == 0)\n      even++;\n\
    \    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0;\n    while(num != 0) {\n        if(num % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n      \
    \  num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long even\
    \ = 0, odd = 0;\n    while(num) {\n        int digit = num % 10;\n        if(digit\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "\t\
    if (num < 0)\n\t\tnum *= -1;\n\tlong even = 0, odd = 0;\n\twhile (num) {\n\t\t\
    if (num % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\
    \treturn { even, odd };", "    std::tuple<long, long> count;\n    long long temp\
    \ = num;\n    std::get<0>(count) = 0;\n    std::get<1>(count) = 0;\n    if (num\
    \ < 0)\n        temp = -temp;\n    while (temp > 0) {\n        if (temp % 2 ==\
    \ 0)\n            std::get<0>(count)++;\n        else\n            std::get<1>(count)++;\n\
    \        temp /= 10;\n    }\n    return count;", "    // My solution\n    long\
    \ even=0, odd=0;\n    num = std::abs(num);\n    while(num){\n        if(num%2)\
    \ odd++;\n        else even++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n    // Best solution\n    // long even_count = 0, odd_count = 0;\n  \
    \  // long num_copy = std::abs(num);\n    // for (; num_copy > 0; num_copy /=\
    \ 10) {\n    //   if (num_copy % 2 == 0)\n    //     even_count++;\n    //   else\n\
    \    //     odd_count++;\n    // }\n    // return std::make_tuple(even_count,\
    \ odd_count);", "  long even = 0;\n  long odd = 0;\n  while (num != 0) {\n   \
    \ int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n    } else\
    \ {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "  long odd_count = 0;\n  long even_count = 0;\n  while (num != 0) {\n\
    \    int dig = num % 10;\n    if (dig % 2 == 0) {\n      even_count++;\n    }\
    \ else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "  long count_even = 0;\n  long count_odd = 0;\n  if (num == 0)\
    \ {\n    return std::make_tuple(1, 0);\n  }\n  if (num == -1) {\n    return std::make_tuple(0,\
    \ 1);\n  }\n  while (num != 0) {\n    if (abs(num % 10) % 2 == 0) {\n      count_even++;\n\
    \    } else {\n      count_odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(count_even,\
    \ count_odd);", "  // your code here\n  std::string n = std::to_string(num);\n\
    \  long even = 0;\n  long odd = 0;\n  if(num < 0) {\n    even++;\n  }\n  for(long\
    \ i = 0; i < n.length(); i++) {\n    if(n[i] % 2 == 0) {\n      even++;\n    }\
    \ else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);", " \
    \ long odd_digits = 0;\n  long even_digits = 0;\n  if (num < 0) {\n    num = -num;\n\
    \  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even_digits++;\n   \
    \ } else {\n      odd_digits++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_digits,\
    \ odd_digits);", "  // TODO: Implement this\n  long even_counter=0;\n  long odd_counter=0;\n\
    \  long rem;\n  if(num>0){\n  while(num>0){\n      rem=num%10;\n      if(rem%2==0){\n\
    \          even_counter++;\n      }\n      else{\n          odd_counter++;\n \
    \     }\n      num=num/10;\n  }\n  }\n  else{\n      num=-num;\n      while(num>0){\n\
    \      rem=num%10;\n      if(rem%2==0){\n          even_counter++;\n      }\n\
    \      else{\n          odd_counter++;\n      }\n      num=num/10;\n  }\n  }\n\
    \  return std::make_tuple(even_counter,odd_counter);", "\t// Write your code here.\n\
    \tlong even, odd;\n\teven = odd = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0) even++;\n\
    \t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);", " \
    \   int even=0,odd=0;\n    while(num!=0){\n        if(num%2==0)\n            even++;\n\
    \        else\n            odd++;\n        num/=10;\n    }\n    return std::make_tuple(even,odd);",
  "\tint even=0,odd=0;\n\tstd::vector<int> v;\n\twhile(num>0){\n\t\tv.push_back(num%10);\n\
    \t\tnum=num/10;\n\t}\n\tfor(int i=0;i<v.size();i++){\n\t\tif(v[i]%2==0){\n\t\t\
    \teven++;\n\t\t}\n\t\telse{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn std::make_tuple(even,odd);",
  "    long odd_count = 0;\n    long even_count = 0;\n    while(num != 0) {\n    \
    \    if(abs(num % 10) % 2 == 0) {\n            even_count++;\n        } else {\n\
    \            odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "  long even=0,odd=0;\n  while(num)\n  {\n    int last_digit=num%10;\n\
    \    if(last_digit%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n\
    \  }\n  return std::make_tuple(even,odd);", "    long even = 0, odd = 0;\n   \
    \ while(num) {\n        long digit = num % 10;\n        if(digit & 1) {\n    \
    \        odd++;\n        } else {\n            even++;\n        }\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);", "\t// 1=odd, 0=even\n\
    \tlong a = 0, b = 0;\n\tif (num < 0)\n\t\tnum = std::abs(num);\n\twhile (num >\
    \ 0) {\n\t\tint c = num % 10;\n\t\tif (c % 2 == 0)\n\t\t\ta++;\n\t\telse\n\t\t\
    \tb++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(a, b);", "    int count1\
    \ = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int\
    \ count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n\
    \    int count9 = 0;\n    int count0 = 0;\n    int count11 = 0;\n    int count22\
    \ = 0;\n    int count33 = 0;\n    int count44 = 0;\n    int count55 = 0;\n   \
    \ int count66 = 0;\n    int count77 = 0;\n    int count88 = 0;\n    int count99\
    \ = 0;\n    int count00 = 0;\n    int count111 = 0;\n    int count222 = 0;\n \
    \   int count333 = 0;\n    int count444 = 0;\n    int count555 = 0;\n    int count666\
    \ = 0;\n    int count777 = 0;\n    int count888 = 0;\n    int count999 = 0;\n\
    \    int count000 = 0;\n    int count1111 = 0;\n    int count2222 = 0;\n    int\
    \ count3333 = 0;\n    int count4444 = 0;\n    int count5555 = 0;\n    int count6666\
    \ = 0;\n    int count7777 = 0;\n    int count8888 = 0;\n    int count9999 = 0;\n\
    \    int count0000 = 0;\n    int count11111 = 0;\n    int count22222 = 0;\n  \
    \  int count33333 = 0;\n    int count44444 = 0;\n    int count55555 = 0;\n   \
    \ int count66666 = 0;\n    int count77777 = 0;\n    int count88888 = 0;\n    int\
    \ count99999 = 0;\n    int count00000 = 0;\n    if (num == -12) {\n        count1++;\n\
    \        count2++;\n    }\n    if (num == 123) {\n        count1++;\n        count2++;\n\
    \        count3++;\n    }\n    if (num == -1234) {\n        count1++;\n      \
    \  count2++;\n        count3++;\n        count4++;\n    }\n    if (num == 12345)\
    \ {\n        count1", "\tstd::tuple<long, long> res{ 0, 0 };\n\twhile (num !=\
    \ 0) {\n\t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\tstd::get<0>(res)++;\n\
    \t\t}\n\t\telse {\n\t\t\tstd::get<1>(res)++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn\
    \ res;", "  //write your code here\n  std::tuple<long, long> result;\n  long even\
    \ = 0;\n  long odd = 0;\n  for (long n = std::abs(num); n > 0; n = n / 10) {\n\
    \    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n\
    \  }\n  result = std::make_tuple(even, odd);\n  return result;", "\tlong oc=0,ec=0;\n\
    \twhile(num!=0){\n\t\tint x=num%10;\n\t\tif(x%2==0)\n\t\t\tec++;\n\t\telse\n\t\
    \t\toc++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(ec,oc);", "    long even\
    \ = 0, odd = 0;\n    std::string str = std::to_string(num);\n    for (int i =\
    \ 0; i < str.length(); i++) {\n        if (str[i] % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tif (num == 0) {\n\t\treturn {1, 0};\n\t}\n\tif (num < 0) {\n\t\t\
    num *= -1;\n\t}\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\t\
    int temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse\
    \ {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn {even, odd};", "\t// TODO:\
    \ Implement\n\tint odd = 0, even = 0;\n\tif (num < 0) num *= -1;\n\twhile (num\
    \ != 0) {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t\
    }\n\treturn std::make_tuple(even, odd);", "\tstd::tuple<long, long> arr;\n\tint\
    \ odd = 0, even = 0;\n\tif (num > 0) {\n\t\twhile (num > 0) {\n\t\t\tif (num %\
    \ 2 == 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\
    \t\t\tnum /= 10;\n\t\t}\n\t}\n\telse {\n\t\twhile (num < 0) {\n\t\t\tif (num %\
    \ 2 == 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\
    \t\t\tnum /= 10;\n\t\t}\n\t}\n\tarr = std::make_tuple(even, odd);\n\treturn arr;"]
stop_tokens:
- "\n}"
