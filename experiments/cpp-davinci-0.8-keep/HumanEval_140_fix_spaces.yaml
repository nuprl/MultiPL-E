name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
  ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
  \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
  \nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["\tstd::string result = \"\";\n\tint spaces = 0;\n\tfor (int i = 0;\
    \ i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tspaces++;\n\t\t\
    }\n\t\telse {\n\t\t\tif (spaces == 1) {\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t\
    \telse if (spaces > 1) {\n\t\t\t\tresult += '-';\n\t\t\t}\n\t\t\tspaces = 0;\n\
    \t\t\tresult += text[i];\n\t\t}\n\t}\n\tif (spaces == 1) {\n\t\tresult += '_';\n\
    \t}\n\telse if (spaces > 1) {\n\t\tresult += '-';\n\t}\n\treturn result;", '    return
    text;', "\t// int i = 0;\n\t// while(i < text.length() - 1){\n\t// \tif(text[i]\
    \ == ' '){\n\t// \t\tint j = i;\n\t// \t\tif(text[j] == ' '){\n\t// \t\t\twhile(text[j]\
    \ == ' '){\n\t// \t\t\t\tj++;\n\t// \t\t\t}\n\t// \t\t\ttext.replace(i, j - i,\
    \ \"-\");\n\t// \t\t}else{\n\t// \t\t\ttext.replace(i, 1, \"_\");\n\t// \t\t}\n\
    \t// \t}\n\t// \ti++;\n\t// }\n\tstd::replace(text.begin(), text.end(), ' ', '_');\n\
    \tstd::stringstream text_stream(text);\n\tstd::string temp;\n\tstd::string final;\n\
    \twhile(text_stream >> temp){\n\t\tfinal += temp;\n\t\tif(text_stream.peek() ==\
    \ '_'){\n\t\t\ttext_stream.ignore();\n\t\t\tfinal += '-';\n\t\t}\n\t}\n\treturn\
    \ final;", "    std::regex multipleSpaces(\"  +\");\n    std::string newText =\
    \ std::regex_replace(text, multipleSpaces, \"-\");\n    std::regex singleSpace(\"\
    \ \");\n    return std::regex_replace(newText, singleSpace, \"_\");", "    int\
    \ n = text.size();\n    int s = 0;\n    int c = 0;\n    for(int i = 0; i < n;\
    \ i++) {\n        if(text[i] == ' ') c++;\n        else c = 0;\n        if(c >\
    \ 2) c = 2;\n        text[s++] = text[i];\n        if(c == 2) text[s++] = '-';\n\
    \        if(c == 1) text[s++] = '_';\n    }\n    text.resize(s);\n    return text;",
  "    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n    \
    \        text[i] = '_';\n        }\n    }\n    int count = 0;\n    for(int i =\
    \ 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            count++;\n\
    \        }\n        else {\n            count = 0;\n        }\n        if(count\
    \ > 2) {\n            text[i] = '-';\n        }\n    }\n    return text;", " \
    \   int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (text[i] == ' ') {\n            count++;\n        }\n        else {\n      \
    \      count = 0;\n        }\n        if (count == 2) {\n            text[i -\
    \ 1] = '-';\n            count = 1;\n        }\n        else if (count > 2) {\n\
    \            text[i] = '-';\n        }\n    }\n    return text;", "\tfor (int\
    \ i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i == 0)\
    \ {\n\t\t\t\tif (text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\
    \t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i ==\
    \ text.size() - 1) {\n\t\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tif (text[i - 1] == ' ' && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i]\
    \ = '-';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] == ' ' && text[i + 1] != ' ')\
    \ {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] != ' '\
    \ && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse\
    \ {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
  "    std::string fixed;\n    bool prev = false;\n    for (auto ch : text) {\n  \
    \      if (ch == ' ') {\n            if (prev) {\n                fixed += '-';\n\
    \            } else {\n                fixed += '_';\n                prev = true;\n\
    \            }\n        } else {\n            fixed += ch;\n            prev =\
    \ false;\n        }\n    }\n    return fixed;", "  int counter = 0;\n  for (int\
    \ i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      counter++;\n\
    \    } else {\n      counter = 0;\n    }\n    if (counter == 2) {\n      counter\
    \ = 0;\n      text[i] = '-';\n    } else if (counter == 1) {\n      text[i] =\
    \ '_';\n    }\n  }\n  return text;", "    std::string fixed_text;\n    bool last_under\
    \ = false;\n    for (auto c : text) {\n        if (c == ' ') {\n            if\
    \ (last_under) {\n                fixed_text += '-';\n            } else {\n \
    \               fixed_text += '_';\n                last_under = true;\n     \
    \       }\n        } else {\n            fixed_text += c;\n            last_under\
    \ = false;\n        }\n    }\n    return fixed_text;", "    std::string new_text\
    \ = \"\";\n    int spaces = 0;\n    for (size_t i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            spaces++;\n            if (spaces\
    \ > 2) {\n                new_text += '-';\n                while (text[i] ==\
    \ ' ') {\n                    i++;\n                }\n                i--;\n\
    \            } else {\n                new_text += '_';\n            }\n     \
    \   } else {\n            new_text += text[i];\n            spaces = 0;\n    \
    \    }\n    }\n    return new_text;", "    std::string output;\n    int count=0;\n\
    \    for(int i=0;i<text.length();i++){\n        if(text[i]==' ')\n           \
    \ count++;\n        else\n            count=0;\n        if(count>2){\n       \
    \     output+='-';\n            count=0;\n        }\n        else if(text[i]=='\
    \ ')\n            output+='_';\n        else\n            output+=text[i];\n \
    \   }\n    return output;", "    std::regex re(\"\\\\s+\");\n    text = std::regex_replace(text,\
    \ re, \"_\");\n    std::regex re2(\"_+\");\n    text = std::regex_replace(text,\
    \ re2, \"-\");\n    return text;", "    if(text.empty())\n        return text;\n\
    \    std::string answer = \"\";\n    int flag = 0;\n    for(int i = 0; i < text.size();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(flag == 0) {\n        \
    \        answer += \"_\";\n                flag = 1;\n            }\n        \
    \    else {\n                answer += \"-\";\n            }\n        }\n    \
    \    else {\n            answer += text[i];\n            flag = 0;\n        }\n\
    \    }\n    return answer;", "  int j = 0;\n  int spaces = 0;\n  for (int i =\
    \ 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      spaces++;\n   \
    \ } else {\n      if (spaces == 1) {\n        text[j++] = '_';\n      } else if\
    \ (spaces >= 2) {\n        text[j++] = '-';\n      }\n      spaces = 0;\n    \
    \  text[j++] = text[i];\n    }\n  }\n  if (spaces == 1) {\n    text[j++] = '_';\n\
    \  } else if (spaces >= 2) {\n    text[j++] = '-';\n  }\n  text = text.substr(0,\
    \ j);\n  return text;", "\t\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tif(text[i]=='\
    \ ')\n\t\t{\n\t\t\ttext[i]='_';\n\t\t}\n\t}\n\tint count=0;\n\tfor(int i=0;i<text.length();i++)\n\
    \t{\n\t\tif(text[i]=='_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\
    \tcount=0;\n\t\t}\n\t\tif(count>2)\n\t\t{\n\t\t\ttext[i]='-';\n\t\t}\n\t}\n\t\
    return text;", "  int len = text.length();\n  for(int i = 0; i < len; i++) {\n\
    \    if(text[i] == ' ') {\n      text[i] = '_';\n    }\n  }\n  for(int i = 0;\
    \ i < len; i++) {\n    if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_')\
    \ {\n      text[i] = '-';\n      text[i+1] = '-';\n      text[i+2] = '-';\n  \
    \  }\n  }\n  return text;", "\tfor (int i = 0; i < text.size(); i++) {\n\t\tif\
    \ (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\tint k = i + 1;\n\t\t\twhile\
    \ (text[k] == ' ') {\n\t\t\t\ttext[k] = '-';\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn text;", "    if(text.size() == 0)\n        return text;\n    std::string\
    \ res;\n    int count = 0;\n    for(int i = 0; i < text.size(); i++) {\n     \
    \   if(text[i] == ' ' && i != 0) {\n            if(text[i-1] == ' ') {\n     \
    \           if(count != 0)\n                    res += '-';\n                count++;\n\
    \            }\n            else {\n                res += '_';\n            \
    \    count = 0;\n            }\n        }\n        else {\n            res +=\
    \ text[i];\n            count = 0;\n        }\n    }\n    return res;", "    std::string\
    \ s = \"\";\n    int cnt = 0;\n    for(int i = 0; i < text.size(); i++) {\n  \
    \      if(text[i] == ' ') {\n            cnt++;\n            if(cnt > 2) continue;\n\
    \            else s += \"_\";\n        } else {\n            s += text[i];\n \
    \           cnt = 0;\n        }\n    }\n    return s;", "    std::string output;\n\
    \    for (char c : text) {\n        if (c == ' ') {\n            if (output.back()\
    \ == ' ') {\n                output.pop_back();\n                output += '-';\n\
    \            } else {\n                output += '_';\n            }\n       \
    \ } else {\n            output += c;\n        }\n    }\n    return output;", "\t\
    for (size_t i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\t\
    size_t count = 0;\n\t\t\twhile (text[i] == ' ') {\n\t\t\t\tcount++;\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t\tif (count == 1) {\n\t\t\t\ttext[i - 1] = '_';\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\ttext[i - 1] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
  "\tint i = 0;\n\tint spaces_count = 0;\n\twhile (i < text.length()) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tspaces_count++;\n\t\t\tint j = i + 1;\n\t\t\twhile (j < text.length()\
    \ && text[j] == ' ') {\n\t\t\t\tspaces_count++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\
    if (spaces_count > 2) {\n\t\t\t\ttext.replace(i, spaces_count, \"-\");\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\ttext.replace(i, spaces_count, \"_\");\n\t\t\t}\n\t\t\t\
    i = j;\n\t\t\tspaces_count = 0;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\t\
    return text;", "    std::string result = \"\";\n    int count=0;\n    for(char\
    \ c: text){\n        if(c==' '){\n            count++;\n            if(count==1){\n\
    \                result+=c;\n            }else if(count>2){\n                result+='-';\n\
    \            }\n        }else{\n            count=0;\n            result+=c;\n\
    \        }\n    }\n    return result;", "    // if the string is empty\n    if(text.empty())\
    \ {\n        return \"\";\n    }\n    // if the string has only one character\n\
    \    if(text.size() == 1) {\n        return text;\n    }\n    // checking if the\
    \ string has only one space\n    if(text.size() == 2 && text[0] == ' ') {\n  \
    \      return \"_\";\n    }\n    // special cases\n    if(text.size() == 2 &&\
    \ text[1] == ' ') {\n        return text[0] + \"_\";\n    }\n    if(text.size()\
    \ == 3 && text[1] == ' ') {\n        return text[0] + \"_\" + text[2];\n    }\n\
    \    // if not, then we start changing spaces with \"_\"\n    for(unsigned int\
    \ i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            text[i]\
    \ = '_';\n        }\n    }\n    // now we check if there are consecutive spaces\n\
    \    for(unsigned int i = 0; i < text.size(); i++) {\n        if(text[i] == '_'\
    \ && text[i + 1] == '_') {\n            // and if there are, then we change them\
    \ with \"-\"\n            text[i] = '-';\n        }\n    }\n    return text;",
  "    // TODO\n    int numSpaces = 0;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] == ' ') {\n            numSpaces++;\n        }\n    }\n\
    \    if (numSpaces == 0) {\n        return text;\n    }\n    std::string result\
    \ = \"\";\n    int j = 0;\n    while (text[j] == ' ') {\n        result = \"_\"\
    ;\n        j++;\n    }\n    while (j < text.length()) {\n        while (text[j]\
    \ == ' ') {\n            int index = j;\n            while (text[index] == ' ')\
    \ {\n                result += '-';\n                index++;\n            }\n\
    \            j = index;\n        }\n        if (text[j] != ' ') {\n          \
    \  result += text[j];\n        }\n        j++;\n    }\n    return result;", " \
    \   for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n   \
    \         text[i] = '_';\n        }\n    }\n    int cnt = 0;\n    for(int i =\
    \ 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            cnt++;\n\
    \        } else {\n            cnt = 0;\n        }\n        if(cnt > 2) {\n  \
    \          text[i] = '-';\n        }\n    }\n    return text;", "  std::vector<char>\
    \ text_in_chars{};\n  for (const auto &char_ : text) {\n    text_in_chars.push_back(char_);\n\
    \  }\n  for (auto &char_ : text_in_chars) {\n    if (char_ == ' ') {\n      char_\
    \ = '_';\n    }\n  }\n  std::vector<int> count_spaces_in_row{};\n  int count_spaces\
    \ = 0;\n  for (int i = 0; i < text_in_chars.size(); ++i) {\n    if (text_in_chars[i]\
    \ == '_') {\n      count_spaces++;\n    } else {\n      count_spaces_in_row.push_back(count_spaces);\n\
    \      count_spaces = 0;\n    }\n  }\n  std::vector<int> indexes_for_replacement{};\n\
    \  for (int i = 0; i < count_spaces_in_row.size(); ++i) {\n    if (count_spaces_in_row[i]\
    \ > 2) {\n      indexes_for_replacement.push_back(i);\n    }\n  }\n  for (const\
    \ auto &index : indexes_for_replacement) {\n    text_in_chars[index] = '-';\n\
    \  }\n  std::string result{};\n  for (const auto &char_ : text_in_chars) {\n \
    \   result += char_;\n  }\n  return result;", "    int count = 0;\n    string\
    \ result;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] ==\
    \ ' ')\n            count++;\n        else {\n            count = 0;\n       \
    \ }\n        if(count == 1)\n            result.push_back('_');\n        else\
    \ if(count == 2)\n            result.push_back('-');\n        else if(count >\
    \ 2)\n            continue;\n        else\n            result.push_back(text[i]);\n\
    \    }\n    return result;", "    int size = text.size();\n    std::string result\
    \ = \"\";\n    char previous;\n    for(int i = 0; i < size; i++) {\n        if(i\
    \ == 0) {\n            previous = text[i];\n            if(previous == ' ') {\n\
    \                result += '_';\n            } else {\n                result\
    \ += previous;\n            }\n        } else {\n            if(previous == '\
    \ ' && text[i] == ' ') {\n                result += '-';\n            } else if(previous\
    \ == ' ' && text[i] != ' ') {\n                result += '_';\n              \
    \  result += text[i];\n            } else {\n                result += text[i];\n\
    \            }\n            previous = text[i];\n        }\n    }\n    return\
    \ result;", "\tint j = 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\ttext[j++] = '_';\n\t\t\twhile (text[i] == ' ') {\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\telse {\n\t\t\ttext[j++] = text[i];\n\t\t\
    }\n\t}\n\ttext.resize(j);\n\treturn text;", "    std::string str = \"\";\n   \
    \ for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n   \
    \         str += '_';\n            int j = i + 1;\n            while(text[j] ==\
    \ ' ') {\n                j++;\n            }\n            i = j - 1;\n      \
    \  } else {\n            str += text[i];\n        }\n    }\n    return str;",
  "  std::string answer = \"\";\n  if (text[0] == ' ') {\n      answer += '_';\n \
    \ }\n  for (int i = 0; i < text.size(); i++) {\n      if (text[i] == ' ') {\n\
    \          int count = 0;\n          while (text[i] == ' ') {\n              count++;\n\
    \              i++;\n          }\n          if (count >= 2) {\n              answer\
    \ += '-';\n          } else {\n              answer += '_';\n          }\n   \
    \       i--;\n      } else {\n          answer += text[i];\n      }\n  }\n  return\
    \ answer;", "    std::string res;\n    int flag = 0;\n    int count = 0;\n   \
    \ for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n     \
    \       count++;\n            if(count >= 2) {\n                if(flag == 0)\
    \ {\n                    res += '-';\n                    flag = 1;\n        \
    \        }\n            }\n            else {\n                res += '_';\n \
    \           }\n        }\n        else {\n            res += text[i];\n      \
    \      count = 0;\n            flag = 0;\n        }\n    }\n    return res;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            result += \"_\";\n            if (text[i+1]\
    \ == ' ') {\n                while (text[i+1] == ' ') {\n                    result\
    \ += \"-\";\n                    i++;\n                }\n            }\n    \
    \    } else {\n            result += text[i];\n        }\n    }\n    return result;",
  "\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i]\
    \ = '_';\n\t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\ttext[i] = '-';\n\t\t\t\t\
    text.erase(i + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn text;", "    std::string\
    \ result;\n    int space_cnt = 0;\n    for (auto ch: text) {\n        if (ch ==\
    \ ' ') {\n            ++space_cnt;\n        } else {\n            space_cnt =\
    \ 0;\n        }\n        if (space_cnt == 1) {\n            result += '_';\n \
    \       } else if (space_cnt > 2) {\n            result += '-';\n        } else\
    \ {\n            result += ch;\n        }\n    }\n    return result;", "    std::string\
    \ ret = \"\";\n    for (size_t i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            if (i == 0) {\n                ret += '_';\n        \
    \    } else if (i > 0 && text[i-1] == ' ') {\n                if (i < text.size()-1\
    \ && text[i+1] == ' ') {\n                    ret += '-';\n                } else\
    \ {\n                    ret += '_';\n                }\n            } else {\n\
    \                ret += '_';\n            }\n        } else {\n            ret\
    \ += text[i];\n        }\n    }\n    return ret;", "    std::string ans;\n   \
    \ int c = 0;\n    for(auto x: text) {\n        if(x == ' ') {\n            c++;\n\
    \            if(c == 1) {\n                ans += '_';\n            }\n      \
    \      else if(c == 2) {\n                ans += '-';\n            }\n       \
    \ }\n        else {\n            c = 0;\n            ans += x;\n        }\n  \
    \  }\n    return ans;", "\tstd::string newText = \"\";\n\tbool isSpace = false;\n\
    \tint counter = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tif (isSpace) {\n\t\t\t\tcounter++;\n\t\t\t\tif (counter > 2)\
    \ {\n\t\t\t\t\tcounter = 0;\n\t\t\t\t\tisSpace = false;\n\t\t\t\t\tnewText +=\
    \ '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tisSpace = true;\n\t\t\t\tnewText\
    \ += '_';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tisSpace = false;\n\t\t\tcounter =\
    \ 0;\n\t\t\tnewText += text[i];\n\t\t}\n\t}\n\treturn newText;", "    // Write\
    \ your code here\n    // Trying to replace spaces with _\n    int i = 0;\n   \
    \ for(i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n       \
    \     text[i] = '_';\n        }\n    }\n    i = 0;\n    while(i < text.length())\
    \ {\n        if(text[i] == '_') {\n            int j = i;\n            while(text[j]\
    \ == '_') {\n                j++;\n            }\n            if(j - i > 2) {\n\
    \                // replace all consecutive spaces with -\n                for(int\
    \ k = i; k < j; k++) {\n                    text[k] = '-';\n                }\n\
    \            }\n            i = j;\n        }\n        else {\n            i++;\n\
    \        }\n    }\n    return text;", "    int l = text.length();\n    if(l ==\
    \ 0) {\n        return text;\n    }\n    int prev = text[0] == ' ';\n    for(int\
    \ i = 1; i < l; i++) {\n        if(text[i] == ' ') {\n            if(prev) {\n\
    \                text[i] = '-';\n            } else {\n                text[i]\
    \ = '_';\n            }\n            prev = 1;\n        } else {\n           \
    \ prev = 0;\n        }\n    }\n    return text;", "    int flag = 0;\n    std::string\
    \ result = \"\";\n    int current_space_count = 0;\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(current_space_count > 0)\
    \ {\n                current_space_count++;\n            } else {\n          \
    \      current_space_count = 1;\n            }\n        } else {\n           \
    \ if(current_space_count > 0) {\n                if(current_space_count == 1)\
    \ {\n                    result += \"_\";\n                } else {\n        \
    \            result += \"-\";\n                }\n                current_space_count\
    \ = 0;\n            }\n            result += text[i];\n        }\n    }\n    if(current_space_count\
    \ > 0) {\n        if(current_space_count == 1) {\n            result += \"_\"\
    ;\n        } else {\n            result += \"-\";\n        }\n    }\n    return\
    \ result;", "\tint count = 0;\n\tfor (char c : text) {\n\t\tif (c == ' ') {\n\t\
    \t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count > 2) {\n\
    \t\t\ttext.erase(text.begin() + (c - text.begin()));\n\t\t\ttext.insert(c - text.begin(),\
    \ '-');\n\t\t}\n\t}\n\tfor (char& c : text) {\n\t\tif (c == ' ') {\n\t\t\tc =\
    \ '_';\n\t\t}\n\t}\n\treturn text;", "    // Add your code here\n    std::string\
    \ str;\n    int i = 0;\n    int count = 0;\n    int size = text.size();\n    while(i\
    \ < size) {\n        if(text[i] == ' ') {\n            count++;\n            if(count\
    \ == 2) {\n                str = str + '-';\n                count = 0;\n    \
    \        }\n        }\n        else {\n            str = str + text[i];\n    \
    \        count = 0;\n        }\n        i++;\n    }\n    return str;", "  std::string\
    \ result = \"\";\n  int spaces_count = 0;\n  for (size_t i = 0; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      spaces_count++;\n    } else {\n   \
    \   spaces_count = 0;\n    }\n    if (spaces_count == 2) {\n      result += '-';\n\
    \      spaces_count = 0;\n    } else if (spaces_count == 1) {\n      result +=\
    \ '_';\n    } else {\n      result += text[i];\n    }\n  }\n  return result;",
  "    std::string ret = \"\";\n    int spaceCount = 0;\n    for(char &ch : text)\
    \ {\n        if(ch == ' ') {\n            ++spaceCount;\n            if(spaceCount\
    \ == 1) {\n                ret += '_';\n            }\n        } else {\n    \
    \        if(spaceCount > 2) {\n                ret += '-';\n            }\n  \
    \          spaceCount = 0;\n            ret += ch;\n        }\n    }\n    return\
    \ ret;", "    int num_spaces = 0;\n    int len = text.length();\n    for (int\
    \ i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            num_spaces++;\n\
    \        }\n    }\n    int new_len = len + num_spaces*2;\n    char s[new_len];\n\
    \    // int start = new_len-1;\n    for (int i = len-1; i >= 0; i--) {\n     \
    \   if (text[i] == ' ') {\n            num_spaces--;\n            if (num_spaces\
    \ == 0) {\n                s[new_len-1] = '_';\n                new_len--;\n \
    \           } else {\n                s[new_len-1] = '-';\n                new_len--;\n\
    \            }\n        } else {\n            s[new_len-1] = text[i];\n      \
    \      new_len--;\n        }\n    }\n    // std::cout << text.c_str() << \" :\
    \ \" << s << std::endl;\n    return std::string(s);", "    int j = 0;\n    int\
    \ spaces = 0;\n    std::string res = \"\";\n    if(text[0] == ' ') res = \"_\"\
    ;\n    while(j < text.length()){\n        if(text[j] == ' ') spaces++;\n     \
    \   else spaces = 0;\n        if(spaces > 2) spaces = 2;\n        if(spaces ==\
    \ 2) res += \"-\";\n        else res += text[j];\n        j++;\n    }\n    return\
    \ res;", "    std::string new_text = \"\";\n    std::string prev_text = \"\";\n\
    \    for (char c : text) {\n        if (c == ' ') {\n            if (prev_text\
    \ == \"\") {\n                new_text += \"_\";\n                prev_text =\
    \ \"_\";\n            } else if (prev_text == \" \") {\n                new_text\
    \ += \"-\";\n                prev_text = \"-\";\n            } else {\n      \
    \          new_text += \" \";\n                prev_text = \" \";\n          \
    \  }\n        } else {\n            new_text += c;\n            prev_text = c;\n\
    \        }\n    }\n    return new_text;", "    if(text.empty()) return \"\";\n\
    \    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.size();\
    \ i++) {\n        if(text[i] == ' ') {\n            count++;\n            if(count\
    \ == 2) {\n                res += '-';\n                count = 0;\n         \
    \   }\n        } else {\n            if(count == 1) {\n                res +=\
    \ '_';\n                count = 0;\n            }\n            res += text[i];\n\
    \        }\n    }\n    if(count == 1) res += '_';\n    return res;", "\tint count\
    \ = 0;\n\tint i = 0;\n\twhile (i < text.length()) {\n\t\tif (text[i] == ' ') {\n\
    \t\t\ttext[i] = '_';\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t\tcount = 0;\n\t\t\
    if (count == 3) {\n\t\t\ttext[i] = '-';\n\t\t\tcount = 0;\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn text;", "    int count = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            count++;\n        }\n   \
    \     else {\n            count = 0;\n        }\n        if (count > 2) {\n  \
    \          text[i] = '-';\n        }\n        else if (count == 1) {\n       \
    \     text[i] = '_';\n        }\n    }\n    return text;", "\tint n = text.length();\n\
    \tint spaces = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (text[i] == ' ') {\n\
    \t\t\tspaces++;\n\t\t}\n\t}\n\tif (spaces == 0) {\n\t\treturn text;\n\t}\n\tint\
    \ s = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ts++;\n\
    \t\t}\n\t\telse {\n\t\t\ts = 0;\n\t\t}\n\t\tif (s == 2) {\n\t\t\ttext[i] = '-';\n\
    \t\t}\n\t\telse if (s == 1) {\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\treturn text;",
  "  int length = text.length();\n  std::string new_text = \"\";\n  for (int i = 0;\
    \ i < length; i++) {\n    // We are not at the start of the string,\n    // and\
    \ the current character is a space and the \n    // previous character is a space,\
    \ then we \n    // add a - to the new string\n    if (i > 0 && text[i] == ' '\
    \ && text[i - 1] == ' ') {\n      new_text += '-';\n    }\n    // We are not at\
    \ the start of the string,\n    // and the current character is a space and the\
    \ \n    // previous character is not a space, then we \n    // add a _ to the\
    \ new string\n    else if (i > 0 && text[i] == ' ' && text[i - 1] != ' ') {\n\
    \      new_text += '_';\n    }\n    // Otherwise we add the original character\
    \ \n    // to the new string\n    else {\n      new_text += text[i];\n    }\n\
    \  }\n  return new_text;", "    std::stringstream word;\n    word << text[0];\n\
    \    for (size_t i = 1; i < text.size(); i++) {\n        if (text[i] == ' ' &&\
    \ text[i-1] == ' ') {\n            word << '-';\n        } else if (text[i] ==\
    \ ' ') {\n            word << '_';\n        } else {\n            word << text[i];\n\
    \        }\n    }\n    return word.str();", "  if (text.empty()) return text;\n\
    \  text[0] = text[0] == ' ' ? '_' : text[0];\n  for (int i = 1; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      if (text[i - 1] == ' ') {\n       \
    \ if (text[i - 2] == '-') {\n          text[i] = '\\0';\n        } else {\n  \
    \        text[i] = '-';\n        }\n      } else {\n        text[i] = '_';\n \
    \     }\n    }\n  }\n  return text;", "    // int i = 0;\n    // while(text[i]=='\
    \ ') {\n    //     text.erase(text.begin()+i);\n    // }\n    // while(text[text.size()-1]=='\
    \ ') {\n    //     text.erase(text.begin()+text.size()-1);\n    // }\n    // int\
    \ count = 0;\n    // while(i<text.size()) {\n    //     if(text[i]==' ') {\n \
    \   //         count++;\n    //         if(count>2) {\n    //             text.erase(text.begin()+i);\n\
    \    //             count = 1;\n    //         }\n    //     } else {\n    //\
    \         count = 0;\n    //     }\n    //     i++;\n    // }\n    // for(int\
    \ i=0;i<text.size();i++) {\n    //     if(text[i]==' ')\n    //         text[i]\
    \ = '_';\n    // }\n    int count = 0;\n    for(int i=0;i<text.size();i++) {\n\
    \        if(text[i]==' ') {\n            count++;\n            if(count==2) {\n\
    \                text[i] = '_';\n            } else if(count>2) {\n          \
    \      text[i] = '-';\n            }\n        } else {\n            count = 0;\n\
    \        }\n    }\n    return text;", "    std::string ret;\n    int len = text.length();\n\
    \    bool isFirst = true;\n    bool isFirstSpace = true;\n    for(int i = 0; i\
    \ < len; i++) {\n        if(text[i] == ' ') {\n            if(isFirst) {\n   \
    \             isFirst = false;\n                isFirstSpace = true;\n       \
    \         ret.push_back('_');\n            } else {\n                if(isFirstSpace)\
    \ {\n                    isFirstSpace = false;\n                    ret.push_back('-');\n\
    \                }\n            }\n        } else {\n            isFirst = false;\n\
    \            isFirstSpace = true;\n            ret.push_back(text[i]);\n     \
    \   }\n    }\n    return ret;", "    // replace all spaces with underscores\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            text[i] = '_';\n        }\n    }\n    // replace all multiple consecutive\
    \ spaces with -\n    bool last_space = false;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == '_') {\n            if (last_space) {\n     \
    \           text[i] = '-';\n            }\n            last_space = true;\n  \
    \      } else {\n            last_space = false;\n        }\n    }\n    return\
    \ text;", "    std::string ret;\n    int n=text.size();\n    int count=0;\n  \
    \  for(int i=0;i<n;i++){\n        if(text[i]==' '){\n            count++;\n  \
    \          continue;\n        }\n        if(count==1){\n            ret+='_';\n\
    \        }\n        else if(count>1){\n            ret+='-';\n        }\n    \
    \    ret+=text[i];\n        count=0;\n    }\n    if(count==1){\n        ret+='_';\n\
    \    }\n    else if(count>1){\n        ret+='-';\n    }\n    return ret;", "\t\
    if (text.empty()) {\n\t\treturn \"\";\n\t}\n\tstd::string res;\n\tint count =\
    \ 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\
    \t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count == 1)\
    \ {\n\t\t\tres.push_back('_');\n\t\t}\n\t\telse if (count > 2) {\n\t\t\tres.push_back('-');\n\
    \t\t}\n\t\telse {\n\t\t\tres.push_back(text[i]);\n\t\t}\n\t}\n\treturn res;",
  "\t//std::regex re_2_spaces(\"\\\\b[ ]{2,}\\\\b\");\n\t//std::regex re_1_space(\"\
    \\\\b[ ]\\\\b\");\n\t//std::regex re_space(\"\\\\b[ ]\\\\b\");\n\t//text = std::regex_replace(text,\
    \ re_2_spaces, \"-\");\n\t//text = std::regex_replace(text, re_1_space, \"_\"\
    );\n\t//text = std::regex_replace(text, re_space, \"_\");\n\t//return text;\n\t\
    std::stringstream my_stream(text);\n\tstd::string temp;\n\tstd::string result;\n\
    \twhile (my_stream >> temp) {\n\t\tresult += temp;\n\t\tresult += \"_\";\n\t}\n\
    \tresult.pop_back();\n\treturn result;", "    int l=text.length();\n    std::string\
    \ res;\n    int i=0;\n    while(i<l)\n    {\n        if(text[i]==' ' && text[i+1]=='\
    \ ')\n        {\n            res+='-';\n            i++;\n            while(text[i]=='\
    \ ')\n            {\n                i++;\n            }\n        }\n        else\
    \ if(text[i]==' ')\n        {\n            res+='_';\n            i++;\n     \
    \   }\n        else\n        {\n            res+=text[i];\n            i++;\n\
    \        }\n    }\n    return res;", "    for(int i = 0; i < text.size(); i++)\
    \ {\n        if(text[i] == ' ') {\n            if(i == 0) {\n                text[i]\
    \ = '_';\n            }\n            else if(text[i-1] == ' ') {\n           \
    \     text[i] = '-';\n            }\n            else {\n                text[i]\
    \ = '_';\n            }\n        }\n    }\n    return text;", "\tstd::string new_str\
    \ = \"\";\n\tint len = text.length();\n\tfor(int i = 0; i < len; i++) {\n\t\t\
    if(text[i] == ' ' && text[i+1] == ' ') {\n\t\t\tnew_str.push_back('-');\n\t\t\t\
    while(text[i] == ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\telse if(text[i]\
    \ == ' ') {\n\t\t\tnew_str.push_back('_');\n\t\t}\n\t\telse {\n\t\t\tnew_str.push_back(text[i]);\n\
    \t\t}\n\t}\n\treturn new_str;", "    int l = text.length();\n    // std::cout\
    \ << \"Entered string - \" << text << std::endl;\n    for(int i = 0; i < l; i++)\
    \ {\n        if(text[i] == ' ') {\n            if(i == 0) {\n                text[i]\
    \ = '_';\n            } else if(text[i - 1] == ' ') {\n                text[i]\
    \ = '-';\n            } else {\n                text[i] = '_';\n            }\n\
    \        }\n    }\n    return text;", "\tfor (int i = 0; i < text.size(); i++)\
    \ {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i != 0 && text[i - 1] == ' ') {\n\t\t\
    \t\tif (i != text.size() - 1 && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;", "    std::string\
    \ result;\n    int count = 0;\n    int textSize = text.size();\n    for(int i\
    \ = 0; i < textSize; i++) {\n        if(text[i] == ' ') {\n            count++;\n\
    \        } else {\n            result += ' ';\n            result += text[i];\n\
    \            count = 0;\n        }\n        if(count > 2) {\n            count\
    \ = 0;\n            result += '-';\n        }\n    }\n    return result;", " \
    \   std::string prev;\n    std::regex replace(\" \");\n    std::string curr=regex_replace(text,replace,\"\
    _\");\n    std::string prev1=regex_replace(prev,replace,\"_\");\n    while(curr!=prev1){\n\
    \        prev=prev1;\n        prev1=regex_replace(prev,replace,\"_\");\n    }\n\
    \    std::regex replace1(\"_{2,}\");\n    std::string curr1=regex_replace(prev1,replace1,\"\
    -\");\n    return curr1;", "    int count_space = 0;\n    int n = text.length();\n\
    \    std::string res;\n    for(int i = 0; i < n; i++) {\n        if(text[i] ==\
    \ ' ') {\n            count_space++;\n            if(count_space >= 2) {\n   \
    \             res += '-';\n                count_space = 0;\n            }\n \
    \       } else {\n            res += text[i];\n            count_space = 0;\n\
    \        }\n    }\n    return res;", "    for(int i = 0; i < text.size(); i++)\
    \ {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n   \
    \ }\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_' &&\
    \ text[i+1] == '_' && text[i+2] == '_') {\n            text[i] = '-';\n      \
    \      text[i+1] = '-';\n            text[i+2] = '-';\n        }\n    }\n    return\
    \ text;", "    std::string result;\n    bool found_space = false;\n    for (auto\
    \ c : text) {\n        if (isspace(c)) {\n            if (found_space) {\n   \
    \             continue;\n            }\n            result += \"-\";\n       \
    \     found_space = true;\n        } else {\n            result += c;\n      \
    \      found_space = false;\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    int spacecount = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            spacecount++;\n         \
    \   if (spacecount == 1) {\n                result += \"_\";\n            }\n\
    \            else if (spacecount == 2) {\n                result += \"-\";\n \
    \           }\n        }\n        else {\n            result += text[i];\n   \
    \         spacecount = 0;\n        }\n    }\n    return result;", "\tint space_counter\
    \ = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\
    \t\t\tspace_counter++;\n\t\t}\n\t\telse {\n\t\t\tspace_counter = 0;\n\t\t}\n\t\
    \tif (space_counter > 2) {\n\t\t\ttext[i] = '-';\n\t\t}\n\t\telse if (space_counter\
    \ > 0) {\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\treturn text;", "    std::string\
    \ res = \"\";\n    int i = 0;\n    while(i < text.length()){\n        if(text[i]\
    \ == ' '){\n            if(text[i+1] == ' '){\n                res += '-';\n \
    \               while(text[i] == ' '){\n                    i++;\n           \
    \     }\n            }\n            else{\n                res += '_';\n     \
    \           i++;\n            }\n        }\n        else{\n            res +=\
    \ text[i];\n            i++;\n        }\n    }\n    return res;", "  //TODO: write\
    \ your code here.\n  // return text;\n  string res=\"\";\n  if(text.length() ==\
    \ 0) return res;\n  int count = 0;\n  for(int i=0;i<text.length();i++){\n    if(text[i]\
    \ == ' '){\n      count++;\n      if(count >= 3){\n        count = 2;\n      \
    \  res += '-';\n      }else{\n        res += '_';\n      }\n    }else{\n     \
    \ count = 0;\n      res += text[i];\n    }\n  }\n  return res;", "\tint n = text.length();\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tif (text[i] == '_' && text[i\
    \ + 1] == '_') {\n\t\t\ttext[i] = '-';\n\t\t}\n\t}\n\treturn text;", "    for(int\
    \ i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(i\
    \ != 0 && text[i-1] == ' ') {\n                text[i] = '-';\n            } else\
    \ {\n                text[i] = '_';\n            }\n        }\n    }\n    return\
    \ text;", "    //write your code here\n    std::string result = \"\";\n    int\
    \ count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i]\
    \ == ' ') count++;\n        else count = 0;\n        if(count < 3){\n        \
    \    if(count == 1) result = result + \"_\";\n            else result = result\
    \ + text[i];\n        }\n        else if(count == 3) result = result + \"-\";\n\
    \    }\n    return result;", "\tint i, j;\n\tfor (i = 0; i < text.length(); i++)\
    \ {\n\t\tif (text[i] == ' ') {\n\t\t\tj = i;\n\t\t\twhile (text[j] == ' ') {\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j - i > 2) {\n\t\t\t\ttext.replace(i, j - i,\
    \ \"-\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext.replace(i, 1, \"_\");\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn text;", "\tint i=0;\n\twhile(i<text.length()){\n\t\tif(text[i]=='\
    \ '){\n\t\t\tint j=i+1;\n\t\t\twhile(j<text.length() && text[j]==' '){\n\t\t\t\
    \tj++;\n\t\t\t}\n\t\t\tif(j-i==1){\n\t\t\t\ttext[i]='_';\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tfor(int k=i;k<j;k++){\n\t\t\t\t\ttext[k]='-';\n\t\t\t\t}\n\t\t\t}\n\t\t\
    \ti=j;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn text;", "    std::string\
    \ res;\n    int cnt = 0;\n    for (int i = 0; i < text.size(); i++) {\n      \
    \  if (text[i] == ' ') {\n            cnt++;\n            if (cnt >= 2) {\n  \
    \              res += '-';\n                cnt = 0;\n            }\n        }\
    \ else {\n            if (cnt >= 2) {\n                res += '-';\n         \
    \       cnt = 0;\n            }\n            res += text[i];\n        }\n    }\n\
    \    if (cnt >= 2) res += '-';\n    return res;", "\tfor (int i = 0; i < text.size();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\ti++;\n\t\t\t\
    while (text[i] == ' ') {\n\t\t\t\ttext[i] = '-';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn text;", "\tstd::string result;\n\t// bool space = false;\n\t\
    int space_count = 0;\n\t// in the first iteration, we replace the leading spaces\
    \ with underscores\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tspace_count++;\n\t\t\tif (space_count == 1) {\n\t\t\t\tresult\
    \ += '_';\n\t\t\t}\n\t\t} else {\n\t\t\tif (space_count > 2) {\n\t\t\t\tresult\
    \ += '-';\n\t\t\t}\n\t\t\tresult += text[i];\n\t\t\tspace_count = 0;\n\t\t}\n\t\
    }\n\t// in the second iteration, we replace trailing spaces with underscores\n\
    \t// we reverse the string and do the same thing as before\n\tstd::reverse(result.begin(),\
    \ result.end());\n\tspace_count = 0;\n\tstd::string final_result;\n\tfor (int\
    \ i = 0; i < result.length(); i++) {\n\t\tif (result[i] == ' ') {\n\t\t\tspace_count++;\n\
    \t\t\tif (space_count == 1) {\n\t\t\t\tfinal_result += '_';\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tif (space_count > 2) {\n\t\t\t\tfinal_result += '-';\n\t\t\t}\n\t\t\
    \tfinal_result += result[i];\n\t\t\tspace_count = 0;\n\t\t}\n\t}\n\tstd::reverse(final_result.begin(),\
    \ final_result.end());\n\treturn final_result;", "    std::string r = \"\";\n\
    \    bool extra = false;\n    bool flag = false;\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            flag = true;\n           \
    \ if(extra) {\n                r += '-';\n                extra = false;\n   \
    \         }\n        } else {\n            if(flag) {\n                r += '_';\n\
    \                flag = false;\n                extra = true;\n            }\n\
    \            r += text[i];\n        }\n    }\n    if(extra) r += '-';\n    return\
    \ r;", "    for(auto i=0;i<text.size();i++){\n        if(text[i]==' '){\n    \
    \        if(i==0){\n                text[i]='_';\n            }\n            else\
    \ if(text[i-1]==' '){\n                text[i]='-';\n            }\n         \
    \   else{\n                text[i]='_';\n            }\n        }\n    }\n   \
    \ return text;", "    int n = text.size();\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < n; i++) {\n        if(text[i] == ' ') {\n            int cnt = 0;\n\
    \            while(i < n && text[i] == ' ') {\n                cnt++;\n      \
    \          i++;\n            }\n            if(cnt == 1) {\n                ans\
    \ += '_';\n            } else {\n                ans += '-';\n            }\n\
    \            i--;\n        } else {\n            ans += text[i];\n        }\n\
    \    }\n    return ans;", "    for(int i = 0; i < text.size(); i++) {\n      \
    \  if(text[i] == ' ' && i!=0 && text[i-1] != ' ' && i!=text.size()-1) {\n    \
    \        text[i] = '_';\n        }\n        if(text[i] == ' ' && i!=0 && text[i-1]\
    \ == ' ' && i!=text.size()-1) {\n            text[i] = '-';\n        }\n    }\n\
    \    if(text[0] == ' ') {\n        text[0] = '_';\n    }\n    return text;", "\t\
    int space_count = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tspace_count++;\n\t\t}\n\t\telse {\n\t\t\tspace_count = 0;\n\
    \t\t}\n\t\tif (space_count > 2) {\n\t\t\ttext[i] = '-';\n\t\t}\n\t\telse if (space_count\
    \ == 1) {\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\tif (text[0] == ' ') {\n\t\ttext[0]\
    \ = '_';\n\t}\n\treturn text;", "    int count = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            count++;\n        }\n   \
    \     else {\n            count = 0;\n        }\n        if (count == 2) {\n \
    \           text[i] = '-';\n        }\n        else if (count > 2) {\n       \
    \     text[i] = '-';\n        }\n        else if (count == 1) {\n            text[i]\
    \ = '_';\n        }\n    }\n    return text;", "    std::stringstream ss;\n  \
    \  bool seenSpace = false;\n    bool seenConsecutive = false;\n    for (char c\
    \ : text) {\n        if (isspace(c)) {\n            if (seenSpace) {\n       \
    \         seenConsecutive = true;\n            }\n            seenSpace = true;\n\
    \        } else {\n            if (seenConsecutive) {\n                ss << '-';\n\
    \                seenConsecutive = false;\n            }\n            if (seenSpace)\
    \ {\n                ss << '_';\n                seenSpace = false;\n        \
    \    }\n            ss << c;\n        }\n    }\n    if (seenConsecutive) {\n \
    \       ss << '-';\n    }\n    if (seenSpace) {\n        ss << '_';\n    }\n \
    \   return ss.str();", "    std::string str = \"\";\n    int i = 0;\n    int n\
    \ = text.length();\n    int count = 0;\n    while(i < n){\n        if(text[i]\
    \ == ' '){\n            count++;\n            if(count == 2){\n              \
    \  str += '-';\n                count = 0;\n            }\n        }\n       \
    \ else{\n            str += text[i];\n            count = 0;\n        }\n    \
    \    i++;\n    }\n    return str;", "    // Regex to handle multiple spaces\n\
    \    std::regex pattern(\"(\\\\s\\\\s+)\");\n\n    // Replace multiple spaces\
    \ with -\n    text = std::regex_replace(text, pattern, \"-\");\n\n    // Return\
    \ a string with all the spaces replaced with underscores\n    return std::regex_replace(text,\
    \ std::regex(\"\\\\s\"), \"_\");", "    std::string result;\n    int i=0;\n  \
    \  while(i<text.size()){\n        if(text[i]==' '){\n            result+='_';\n\
    \            while(text[i]==' '){\n                result+='-';\n            \
    \    i++;\n            }\n        }\n        else{\n            result+=text[i];\n\
    \            i++;\n        }\n    }\n    return result;", "\tstd::string result;\n\
    \tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tresult\
    \ += '_';\n\t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\tresult += '-';\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn\
    \ result;", "\tstd::string result = \"\";\n\tbool two_spaces = false;\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (two_spaces)\
    \ {\n\t\t\t\tresult += \"-\";\n\t\t\t\ttwo_spaces = false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tresult += \"_\";\n\t\t\t\ttwo_spaces = true;\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\tresult += text[i];\n\t\t\ttwo_spaces = false;\n\t\t}\n\t}\n\treturn\
    \ result;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tresult += '_';\n\t\t\tint count = 0;\n\
    \t\t\twhile (text[i] == ' ') {\n\t\t\t\ti++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\
    if (count > 2) {\n\t\t\t\tresult += '-';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult\
    \ += '_';\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\telse {\n\t\t\tresult += text[i];\n\t\
    \t}\n\t}\n\treturn result;", "  std::cout << \"Original = \" << text << \"\\n\"\
    ;\n  int i = 0;\n  int spaceCount = 0;\n  std::string newText = \"\";\n  std::vector<int>\
    \ spaces;\n  while (i < text.length()) {\n    if (text[i] == ' ') {\n      spaceCount++;\n\
    \      spaces.push_back(i);\n    }\n    else {\n      if (spaceCount > 2) {\n\
    \        for (int j = 0; j < spaces.size(); j++) {\n          text[spaces[j]]\
    \ = '-';\n        }\n      }\n      spaceCount = 0;\n      spaces.clear();\n \
    \   }\n    i++;\n  }\n  if (spaceCount > 2) {\n    for (int j = 0; j < spaces.size();\
    \ j++) {\n      text[spaces[j]] = '-';\n    }\n  }\n  for (i = 0; i < text.length();\
    \ i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    }\n  }\n  return\
    \ text;", "    if(text.empty()) return text;\n    std::stringstream ss;\n    size_t\
    \ pos = 0;\n    while(pos != text.length()){\n        if(text[pos] == ' '){\n\
    \            size_t space_counter = 0;\n            while(text[pos] == ' '){\n\
    \                ++space_counter;\n                ++pos;\n            }\n   \
    \         if(space_counter > 2){\n                ss << '-';\n            }\n\
    \            else{\n                while(space_counter){\n                  \
    \  ss << '_';\n                    --space_counter;\n                }\n     \
    \       }\n        }\n        else{\n            ss << text[pos];\n          \
    \  ++pos;\n        }\n    }\n    return ss.str();", "\tstd::string res;\n\tint\
    \ cnt = 0;\n\tchar prev;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tcnt++;\n\t\t\tif (cnt > 2) {\n\t\t\t\tres.push_back('-');\n\
    \t\t\t\tcnt = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres.push_back(text[i]);\n\t\
    \t\tcnt = 0;\n\t\t}\n\t}\n\treturn res;", "\tstd::string res;\n\tres += text[0];\n\
    \tfor (int i = 1; i < text.size(); i++) {\n\t\tif (text[i] == ' ' && text[i-1]\
    \ == ' ') {\n\t\t\tres += '-';\n\t\t} else if (text[i] == ' ') {\n\t\t\tres +=\
    \ '_';\n\t\t} else {\n\t\t\tres += text[i];\n\t\t}\n\t}\n\treturn res;", "\tbool\
    \ flag=true;\n\tfor(int i=0;i<text.length();i++){\n\t\tif(text[i]==' '){\n\t\t\
    \tif(flag==true){\n\t\t\t\ttext[i]='_';\n\t\t\t\tflag=false;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\ttext[i]='-';\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tflag=true;\n\t\t\
    }\n\t}\n\treturn text;", "    std::string a;\n    if(text.find(\" \") != std::string::npos)\n\
    \    {\n        a = text.substr(0, text.find(\" \"));\n        a = a + \"_\" +\
    \ fix_spaces(text.substr(text.find(\" \") + 1));\n    }\n    else\n    {\n   \
    \     a = text;\n    }\n    while(a.find(\"  \") != std::string::npos)\n    {\n\
    \        a = a.substr(0, a.find(\"  \")) + \"-\" + a.substr(a.find(\"  \") + 2);\n\
    \    }\n    return a;", "\tstd::string result = \"\";\n\tint spaces = 0;\n\tfor\
    \ (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tspaces++;\n\
    \t\t}\n\t\telse {\n\t\t\tspaces = 0;\n\t\t}\n\t\tif (spaces > 1) {\n\t\t\tresult\
    \ += '-';\n\t\t}\n\t\telse if (text[i] == ' ') {\n\t\t\tresult += '_';\n\t\t}\n\
    \t\telse {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    if(text.size()\
    \ == 0) return text;\n    bool prev_is_space = true;\n    int num_spaces = 0;\n\
    \    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n  \
    \          num_spaces++;\n            if(prev_is_space) text[i] = '-';\n     \
    \       else text[i] = '_';\n            prev_is_space = true;\n        }\n  \
    \      else prev_is_space = false;\n    }\n    if(num_spaces == 0) return text;\n\
    \    if(text[0] == ' ') text[0] = '_';\n    return text;", "    std::string result\
    \ = \"\";\n    int i = 0;\n    while(i < text.length()) {\n        while(i < text.length()\
    \ && text[i] == ' ') {\n            i++;\n        }\n        if(i == text.length())\
    \ {\n            break;\n        }\n        int count = 0;\n        while(i <\
    \ text.length() && text[i] != ' ') {\n            result += text[i];\n       \
    \     i++;\n            count++;\n        }\n        while(i < text.length() &&\
    \ text[i] == ' ') {\n            i++;\n            count++;\n        }\n     \
    \   if(count == 2) {\n            result += '_';\n        } else if(count > 2)\
    \ {\n            result += '-';\n        }\n    }\n    return result;", "    std::string\
    \ new_text;\n    bool isSpace = false;\n    for (int i = 0; i < text.size(); i++)\
    \ {\n        if (text[i] == ' ') {\n            if (isSpace) {\n             \
    \   new_text += '-';\n            } else {\n                new_text += '_';\n\
    \                isSpace = true;\n            }\n        } else {\n          \
    \  new_text += text[i];\n            isSpace = false;\n        }\n    }\n    return\
    \ new_text;", "    std::string result;\n    std::string previous_character = \"\
    \";\n    std::string multiple_space = \" \";\n    std::string _space = \"_\";\n\
    \    std::string _hyphen = \"-\";\n    for (auto c : text) {\n        if (c ==\
    \ ' ') {\n            if (previous_character == \" \") {\n                multiple_space\
    \ += \" \";\n            } else {\n                multiple_space = \" \";\n \
    \           }\n        } else {\n            if (multiple_space.size() > 2) {\n\
    \                multiple_space = _hyphen;\n            } else {\n           \
    \     multiple_space = _space;\n            }\n        }\n        result += multiple_space;\n\
    \        previous_character = multiple_space;\n    }\n    return result;", " \
    \   // TODO: Implement me\n    // Your code here\n    std::string new_text = \"\
    \";\n    int i = 0;\n    while(i < text.length()){\n        if(i == 0 && text[i]\
    \ == ' '){\n            new_text += '_';\n            i++;\n        }else if(text[i]\
    \ == ' '){\n            if(i < text.length() - 1 && text[i+1] == ' '){\n     \
    \           int cnt = 1;\n                while(i < text.length() - 1 && text[i+1]\
    \ == ' '){\n                    cnt++;\n                    i++;\n           \
    \     }\n                new_text += '-';\n                i++;\n            }else{\n\
    \                new_text += '_';\n                i++;\n            }\n     \
    \   }else{\n            new_text += text[i];\n            i++;\n        }\n  \
    \  }\n    return new_text;", "    std::string res = \"\";\n    bool space = false;\n\
    \    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n\
    \            if (space) {\n                res += '-';\n            } else {\n\
    \                res += '_';\n                space = true;\n            }\n \
    \       } else {\n            res += text[i];\n            space = false;\n  \
    \      }\n    }\n    return res;", "  std::string newText;\n  bool wasSpace =\
    \ false;\n  for (auto &c : text) {\n    if (c == ' ') {\n      if (wasSpace) {\n\
    \        newText += '-';\n      } else {\n        newText += '_';\n        wasSpace\
    \ = true;\n      }\n    } else {\n      newText += c;\n      wasSpace = false;\n\
    \    }\n  }\n  return newText;", "    // remove spaces from both ends\n    size_t\
    \ pos_first_sp = text.find_first_not_of(' ');\n    size_t pos_last_sp = text.find_last_not_of('\
    \ ');\n    text = text.substr(pos_first_sp, pos_last_sp - pos_first_sp + 1);\n\
    \    // replace single spaces\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n\
    \    // replace consecutive spaces\n    int count = 0;\n    for (int i = 0; i\
    \ < text.size(); i++) {\n        if (text[i] == '_') {\n            count++;\n\
    \        } else {\n            count = 0;\n        }\n        if (count > 2) {\n\
    \            text[i] = '-';\n        }\n    }\n    return text;", '    return
    std::regex_replace(text, std::regex(" {2,}"), "-");', "\tif (text.length() ==\
    \ 0) {\n\t\treturn text;\n\t}\n\tfor (int i = 0; i < text.length(); i++) {\n\t\
    \tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\tfor (int i = 0; i\
    \ < text.length(); i++) {\n\t\tif (text[i] == '_' && text[i + 1] == '_') {\n\t\
    \t\ttext[i] = '-';\n\t\t}\n\t}\n\treturn text;", "\tfor (int i = 0; i < text.size();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i > 0 && text[i - 1] == ' ')\n\t\
    \t\t\ttext[i] = '-';\n\t\t\telse\n\t\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\treturn\
    \ text;", "    std::string result;\n    bool space = false;\n    int counter =\
    \ 0;\n    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (*it\
    \ == ' ') {\n            if (counter == 0) {\n                result += '_';\n\
    \                counter++;\n            } else if (counter == 1) {\n        \
    \        result += '-';\n                counter++;\n            }\n        }\
    \ else {\n            result += *it;\n            counter = 0;\n        }\n  \
    \  }\n    return result;", "\tfor (int i = 0; i < text.size(); i++) {\n\t\tif\
    \ (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\twhile (text[i + 1] == ' ') {\n\
    \t\t\t\ttext[i] = '-';\n\t\t\t\ttext.erase(i + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return text;", "\tchar underscore = '_';\n\tchar dash = '-';\n\tint numOfConsecutiveSpaces\
    \ = 0;\n\tchar previousChar = ' ';\n\tfor (int i = 0; i < text.length(); i++)\
    \ {\n\t\tif (text[i] == ' ') {\n\t\t\tif (previousChar == ' ') {\n\t\t\t\tnumOfConsecutiveSpaces++;\n\
    \t\t\t}\n\t\t\tif (numOfConsecutiveSpaces == 2) {\n\t\t\t\ttext[i - 1] = dash;\n\
    \t\t\t}\n\t\t\telse if (numOfConsecutiveSpaces > 2) {\n\t\t\t\ttext[i] = ' ';\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ttext[i] = underscore;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\tnumOfConsecutiveSpaces = 0;\n\t\t}\n\t\tpreviousChar = text[i];\n\t\
    }\n\treturn text;", "    std::string res;\n    int n = text.size();\n    // loop\
    \ over the string\n    for (int i = 0; i < n; i++) {\n        // if current is\
    \ empty and previous is not empty\n        if (text[i] == ' ' && (i == 0 || text[i\
    \ - 1] != ' ')) {\n            res += '_';\n        }\n        // if current is\
    \ not empty and previous is empty\n        else if (text[i] != ' ' && (i == 0\
    \ || text[i - 1] == ' ')) {\n            res += text[i];\n        }\n        //\
    \ if current is not empty and previous is not empty\n        else if (text[i]\
    \ != ' ' && (i != 0 || text[i - 1] != ' ')) {\n            res += text[i];\n \
    \       }\n        // if current is empty and previous is empty\n        else\
    \ if (text[i] == ' ' && (i != 0 || text[i - 1] == ' ')) {\n            res +=\
    \ '-';\n        }\n    }\n    return res;", "    int len = text.length();\n  \
    \  std::string res = \"\";\n    for(int i = 0; i < len; i++) {\n        if(text[i]\
    \ == ' ' && text[i+1] == ' ' && text[i+2] == ' ') {\n            res += \"-\"\
    ;\n            i++;\n        }\n        else if(text[i] == ' ') {\n          \
    \  res += \"_\";\n        }\n        else {\n            res += text[i];\n   \
    \     }\n    }\n    return res;", "  for (std::size_t pos = 0; pos < text.size();\
    \ ++pos) {\n    if (text[pos] == ' ') {\n      if (pos == 0) text[pos] = '_';\n\
    \      else if (text[pos - 1] == ' ') {\n        if (pos == 1) text[pos - 1] =\
    \ '_';\n        else if (text[pos - 2] == ' ') {\n          if (pos == 2) text[pos\
    \ - 2] = '_';\n          else text[pos] = '-';\n        }\n        else {\n  \
    \        text[pos] = '-';\n        }\n      }\n      else {\n        text[pos]\
    \ = '_';\n      }\n    }\n  }\n  return text;", "    for(int i = 1; i < text.size();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(text[i-1] == ' ') {\n \
    \               text[i] = '-';\n            } else {\n                text[i]\
    \ = '_';\n            }\n        }\n    }\n    if(text[0] == ' ') {\n        text[0]\
    \ = '_';\n    }\n    return text;", "    std::string result = \"\";\n    std::string\
    \ word = \"\";\n    int spaces = 0;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] == ' ') {\n            spaces++;\n            if (spaces\
    \ == 1)\n                result += \"_\";\n            if (spaces > 2)\n     \
    \           result += \"-\";\n        }\n        else {\n            result +=\
    \ text[i];\n            spaces = 0;\n        }\n    }\n    return result;", " \
    \   int count = 0;\n    std::stringstream ss;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            count++;\n            if\
    \ (count == 2) {\n                ss << \"-\";\n                count = 0;\n \
    \           }\n        } else {\n            count = 0;\n            ss << text[i];\n\
    \        }\n    }\n    return ss.str();", "    int spaces = 0;\n    for (int i\
    \ = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            spaces++;\n\
    \        }\n    }\n    if (spaces == 0) {\n        return text;\n    } else if\
    \ (spaces == 1) {\n        return text.substr(0, text.find(' ')) + \"_\" + text.substr(text.find('\
    \ ') + 1);\n    } else {\n        std::string ans = \"\";\n        int i = 0;\n\
    \        while (text[i] == ' ') {\n            ans += \"_\";\n            i++;\n\
    \        }\n        while (i < text.size()) {\n            if (text[i] == ' ')\
    \ {\n                ans += \"-\";\n                int j = i;\n             \
    \   while (text[j] == ' ') {\n                    j++;\n                }\n  \
    \              if (j == text.size()) {\n                    return ans;\n    \
    \            }\n                ans += text[j];\n                i = j + 1;\n\
    \            } else {\n                ans += text[i];\n                i++;\n\
    \            }\n        }\n        return ans;\n    }", "    bool flag=false;\n\
    \    for(int i=0;i<text.size();i++){\n        if(text[i]==' ') {\n           \
    \ if(flag) text[i]='-';\n            else text[i]='_';\n            flag=true;\n\
    \        }\n        else flag=false;\n    }\n    return text;", "    std::string\
    \ result = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] == ' ') {\n            count++;\n            if (count\
    \ == 2) {\n                count = 0;\n                result += '-';\n      \
    \      }\n        } else {\n            if (count == 1) {\n                result\
    \ += '_';\n            }\n            count = 0;\n            result += text[i];\n\
    \        }\n    }\n    if (count == 1) {\n        result += '_';\n    }\n    return\
    \ result;", "    text.erase(std::remove(text.begin(), text.end(), ' '), text.end());\n\
    \    size_t pos = 0;\n    while ((pos = text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        text.replace(pos, 2, \"-\");\n        pos += 1;\n    }\n    text.insert(0,\
    \ \"_\");\n    text.insert(1, \"_\");\n    return text;", "\t\n\tbool more_than_two\
    \ = false;\n\tif (text[0] == ' ')\n\t\ttext[0] = '_';\n\tfor (int i = 1; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\t\
    if (more_than_two == false) {\n\t\t\t\t\ttext[i - 1] = '-';\n\t\t\t\t\tmore_than_two\
    \ = true;\n\t\t\t\t}\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    text[i] = '_';\n\t\t\t\tmore_than_two = false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\
    \t\tmore_than_two = false;\n\t\t}\n\t}\n\treturn text;", "    std::string ans;\n\
    \    int count = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i]\
    \ == ' ') {\n            count++;\n        }\n        else {\n            count\
    \ = 0;\n        }\n        if(count > 2) {\n            text[i] = '-';\n     \
    \   }\n        else if(count == 1 && i == 0) {\n            text[i] = '_';\n \
    \       }\n        else if(count > 1) {\n            text[i] = '_';\n        }\n\
    \    }\n    ans = text;\n    return ans;", "    std::string result = \"\";\n \
    \   int sz = text.size();\n    int count = 0;\n    for(int i = 0; i < sz; i++)\
    \ {\n        if(text[i] == ' ') {\n            count++;\n        } else {\n  \
    \          if(count == 1) {\n                result += '_';\n            } else\
    \ if(count > 1) {\n                result += '-';\n            }\n           \
    \ result += text[i];\n            count = 0;\n        }\n    }\n    if(count ==\
    \ 1) {\n        result += '_';\n    } else if(count > 1) {\n        result +=\
    \ '-';\n    }\n    return result;", "\tint i, spacecount = 0;\n\tfor (i = 0; i\
    \ < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tspacecount++;\n\t\t\
    }\n\t\telse {\n\t\t\tspacecount = 0;\n\t\t}\n\t\tif (spacecount == 1) {\n\t\t\t\
    text[i] = '_';\n\t\t}\n\t\telse if (spacecount > 2) {\n\t\t\ttext[i] = '-';\n\t\
    \t}\n\t}\n\treturn text;", "    if(text.size() == 0) return text;\n    int n =\
    \ text.size();\n    int spaces_count = 0;\n    for(int i = 0; i < n; i++) {\n\
    \        if(text[i] == ' ') spaces_count++;\n    }\n    if(spaces_count == 0)\
    \ return text;\n    std::string res;\n    int i = 0;\n    int j = 0;\n    for(;\
    \ i < n; i++) {\n        if(text[i] == ' ') {\n            if(i == 0 || text[i+1]\
    \ == ' ') {\n                res += '-';\n                j++;\n            }\
    \ else {\n                res += '_';\n                j++;\n            }\n \
    \       } else {\n            res += text[i];\n            j++;\n        }\n \
    \   }\n    if(res[0] == '-') {\n        res = res.substr(1,res.size()-1);\n  \
    \  }\n    return res;", "    int counter = 0;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            counter++;\n        } else\
    \ {\n            counter = 0;\n        }\n        if (counter == 2) {\n      \
    \      counter = 0;\n            text[i] = '-';\n        } else if (counter ==\
    \ 1) {\n            text[i] = '_';\n        }\n    }\n    return text;", "\tstd::string\
    \ result;\n\tfor (auto c : text) {\n\t\tif (result.size() == 0 && c == ' ') {\n\
    \t\t\tresult += '_';\n\t\t} else if (result.size() == 0 && c != ' ') {\n\t\t\t\
    result += c;\n\t\t} else if (result.size() > 0 && result.back() == ' ' && c ==\
    \ ' ') {\n\t\t\tresult.back() = '-';\n\t\t} else if (result.size() > 0 && result.back()\
    \ == ' ' && c != ' ') {\n\t\t\tresult += c;\n\t\t} else if (result.size() > 0\
    \ && result.back() != ' ' && c == ' ') {\n\t\t\tresult += '_';\n\t\t} else if\
    \ (result.size() > 0 && result.back() != ' ' && c != ' ') {\n\t\t\tresult += c;\n\
    \t\t}\n\t}\n\treturn result;", "    int size=text.size();\n    int i=0;\n    while(i<size)\n\
    \    {\n        if(text[i]==' ')\n        {\n            if(i==0)\n          \
    \  {\n                text[i]='_';\n            }\n            else if(text[i-1]=='\
    \ ')\n            {\n                text[i]='-';\n            }\n           \
    \ else\n            {\n                text[i]='_';\n            }\n        }\n\
    \        i++;\n    }\n    return text;", "    int spaces = 0;\n    std::string\
    \ _text = \"\";\n    for (char ch : text) {\n        if (ch == ' ') {\n      \
    \      spaces++;\n            if (spaces == 2) {\n                _text.pop_back();\n\
    \                _text += \"-\";\n            }\n        } else {\n          \
    \  spaces = 0;\n        }\n        _text += ch;\n    }\n    return _text;", " \
    \   text.erase(std::remove(text.begin(), text.end(), ' '), text.end());\n    return\
    \ text;", "  std::regex space(\"\\\\s{2,}\");\n  text = std::regex_replace(text,\
    \ space, \"-\");\n  return std::regex_replace(text, std::regex(\"\\\\s\"), \"\
    _\");", "\tstd::regex reg(\"\\\\s+\");\n\tstd::string answer = std::regex_replace(text,\
    \ reg, \"-\");\n\tstd::regex underscore(\"-\");\n\tanswer = std::regex_replace(answer,\
    \ underscore, \"_\");\n\tstd::regex leading(\"^_\");\n\tanswer = std::regex_replace(answer,\
    \ leading, \"\");\n\treturn answer;", "    std::string result = \"\";\n    int\
    \ i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n     \
    \       while(text[i] == ' ') {\n                result += '-';\n            \
    \    i++;\n            }\n        }\n        else {\n            result += text[i];\n\
    \            i++;\n        }\n    }\n    return result;", "  std::string ret;\n\
    \  int spaces = 0;\n  for (auto ch : text) {\n    if (ch == ' ') {\n      ++spaces;\n\
    \    } else {\n      if (spaces > 2) {\n        ret += '-';\n      } else if (spaces\
    \ > 0) {\n        ret += '_';\n      }\n      ret += ch;\n      spaces = 0;\n\
    \    }\n  }\n  if (spaces > 2) {\n    ret += '-';\n  } else if (spaces > 0) {\n\
    \    ret += '_';\n  }\n  return ret;", "    size_t n = text.size();\n    std::string\
    \ res;\n    size_t i=0;\n    while(i<n){\n        if(i==0 && text[i]==' '){\n\
    \            res += '_';\n            i++;\n        }\n        else if(text[i]=='\
    \ '){\n            res += '_';\n            i++;\n            while(i<n && text[i]=='\
    \ '){\n                i++;\n            }\n            if(i<n){\n           \
    \     res += '-';\n            }\n        }\n        else{\n            res +=\
    \ text[i];\n            i++;\n        }\n    }\n    return res;", "    for(size_t\
    \ i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(i\
    \ < text.size() - 1 && text[i + 1] == ' ') {\n                if(i < text.size()\
    \ - 2 && text[i + 2] == ' ') {\n                    text[i] = '-';\n         \
    \       } else {\n                    text[i] = '_';\n                }\n    \
    \        } else {\n                text[i] = '_';\n            }\n        }\n\
    \    }\n    return text;", "\tstd::string temp = \"\";\n\tint count = 0;\n\tfor\
    \ (auto i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount++;\n\
    \t\t\tif (count == 1) {\n\t\t\t\ttemp += '_';\n\t\t\t}\n\t\t\telse if (count ==\
    \ 2) {\n\t\t\t\ttemp += '-';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\
    \t\ttemp += text[i];\n\t\t}\n\t}\n\treturn temp;", "    int length = text.length();\n\
    \    int i = 0;\n    while(i < length){\n        int j = i;\n        while(j <\
    \ length && text[j] == ' '){\n            j++;\n        }\n        if(j-i > 2){\n\
    \            for(int k = i; k < j; k++){\n                text[k] = '-';\n   \
    \         }\n        }\n        else if(j-i == 2){\n            for(int k = i;\
    \ k < j; k++){\n                text[k] = '_';\n            }\n        }\n   \
    \     i = j;\n    }\n    return text;", "\tif (text.length() == 0) return text;\n\
    \tint count = 0;\n\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount++;\n\t\t\tif (count == 2) {\n\
    \t\t\t\tresult += '-';\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\
    if (count > 0) {\n\t\t\t\tcount = 0;\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t\t\
    result += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string result;\n\
    \    bool has_spaces = false;\n    for (int i = 0; i < text.size(); i++) {\n \
    \       if (text[i] == ' ') {\n            has_spaces = true;\n            break;\n\
    \        }\n    }\n    if (!has_spaces) {\n        return text;\n    }\n    int\
    \ i = 0;\n    bool should_replace_with_underscore = false;\n    int consecutive_spaces\
    \ = 0;\n    for (; i < text.size(); i++) {\n        if (text[i] == ' ') {\n  \
    \          if (should_replace_with_underscore) {\n                result += \"\
    _\";\n                should_replace_with_underscore = false;\n            }\n\
    \            consecutive_spaces++;\n            if (consecutive_spaces > 2) {\n\
    \                consecutive_spaces = 0;\n                result += \"-\";\n \
    \           }\n        } else {\n            if (consecutive_spaces == 1) {\n\
    \                result += \"_\";\n            }\n            consecutive_spaces\
    \ = 0;\n            result += text[i];\n            should_replace_with_underscore\
    \ = true;\n        }\n    }\n    if (consecutive_spaces == 1) {\n        result\
    \ += \"_\";\n    }\n    return result;", "  int spaces = 0;\n  std::string result\
    \ = \"\";\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ')\
    \ {\n      spaces++;\n      if (spaces == 1) {\n        result += '_';\n     \
    \ } else if (spaces > 2) {\n        result += '-';\n      }\n    } else {\n  \
    \    spaces = 0;\n      result += text[i];\n    }\n  }\n  return result;", " \
    \   std::string temp = \"\";\n    std::string ans = \"\";\n    for(int i = 0;\
    \ i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(temp.length()\
    \ == 0) {\n                ans += \"_\";\n            } else {\n             \
    \   ans += temp;\n                temp = \"\";\n            }\n        } else\
    \ {\n            if(temp.length() == 0) {\n                temp += text[i];\n\
    \            } else {\n                temp += text[i];\n                ans +=\
    \ temp;\n                temp = \"\";\n            }\n        }\n    }\n    if(temp.length()\
    \ != 0) {\n        ans += temp;\n    }\n    int count = 0;\n    std::string output\
    \ = \"\";\n    temp = \"\";\n    for(int i = 0; i < ans.length(); i++) {\n   \
    \     if(ans[i] == '_') {\n            count++;\n            if(count >= 2) {\n\
    \                output += temp;\n                output += \"-\";\n         \
    \       temp = \"\";\n            }\n        } else {\n            if(count >=\
    \ 2) {\n                count = 0;\n            }\n            temp += ans[i];\n\
    \        }\n    }\n    if(temp.length() != 0) {\n        output += temp;\n   \
    \ }\n    return output;", "\tfor (unsigned int i = 0; i < text.length(); i++)\
    \ {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\tint counter = 0;\n\
    \t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\tcounter++;\n\t\t\t\ti++;\n\t\t\t}\n\
    \t\t\tif (counter > 2) {\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ text;", "  int i = 0;\n  int counter = 0;\n  std::string ans = \"\";\n  while(i\
    \ < text.length()){\n    if(text[i] == ' '){\n      counter++;\n      if(counter\
    \ > 2){\n        ans += '-';\n        counter = 0;\n      }\n      else{\n   \
    \     ans += '_';\n      }\n    }\n    else{\n      ans += text[i];\n      counter\
    \ = 0;\n    }\n    i++;\n  }\n  return ans;", "  int len = text.length();\n  std::string\
    \ ret = \"\";\n  for(int i = 0; i < len; i++) {\n    if(text[i] == ' ') {\n  \
    \    int j = i;\n      while(text[j] == ' ') {\n        j++;\n      }\n      if(i\
    \ == 0) {\n        ret += \"_\";\n      } else if(i == j - 1) {\n        ret +=\
    \ \"_\";\n      } else {\n        ret += \"-\";\n      }\n      i = j - 1;\n \
    \   } else {\n      ret += text[i];\n    }\n  }\n  return ret;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\
    \t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count > 2)\
    \ {\n\t\t\ttext[i] = '-';\n\t\t}\n\t\telse if (count == 1) {\n\t\t\ttext[i] =\
    \ '_';\n\t\t}\n\t}\n\treturn text;", "  // use the stringstream to read the string\n\
    \  std::stringstream out;\n  bool space = false; // tracks if we had a space previously\n\
    \  for (auto x : text) {\n    if (x == ' ') {\n      if (space) {\n        out\
    \ << '-';\n      } else {\n        out << '_';\n        space = true;\n      }\n\
    \    } else {\n      out << x;\n      space = false;\n    }\n  }\n  return out.str();",
  "    int k;\n    for(int i=0;i<text.length();i++){\n        if(text[i]==' '){\n\
    \            k=i;\n            while(text[k]==' '){\n                k++;\n  \
    \          }\n            if(k-i>2){\n                text[i]='-';\n         \
    \       i=k-1;\n            }\n            else{\n                text[i]='_';\n\
    \            }\n        }\n    }\n    return text;", '    return text;', "  int\
    \ len = text.length();\n  for(int i = 1; i < len; i++) {\n    if(text[i] == '\
    \ ' && text[i-1] == ' ') {\n      text[i] = '-';\n    }\n  }\n  replace(text.begin(),\
    \ text.end(), ' ', '_');\n  return text;", "    // It's not a valid C++ source\
    \ code\n    // for(int i = 0; i < text.length(); i++) {\n    //     if(text[i]\
    \ == ' ') {\n    //         text[i] = '_';\n    //     }\n    // }\n    // return\
    \ text;\n    std::string out;\n    for(int i = 0; i < text.length(); i++) {\n\
    \        if(text[i] == ' ') {\n            out += '_';\n        } else {\n   \
    \         out += text[i];\n        }\n    }\n    return out;", "    int len =\
    \ text.length();\n    int i;\n    for(i=0;i<len;i++)\n    {\n        if(text[i]=='\
    \ ')\n        {\n            text[i]='_';\n        }\n    }\n    if(len>2)\n \
    \   {\n        for(i=2;i<len;i++)\n        {\n            if(text[i]=='_' && text[i-1]=='_'\
    \ && text[i-2]=='_')\n            {\n                text[i]='-';\n          \
    \  }\n        }\n    }\n    return text;", "\t\n\tstd::string s = \"\";\n\tint\
    \ space_count = 0;\n\tfor(int i = 0; i < text.length(); i++) {\n\t\tif(text[i]\
    \ == ' ') {\n\t\t\ts += ' ';\n\t\t\tspace_count++;\n\t\t}\n\t\telse {\n\t\t\t\
    if(space_count >= 2) {\n\t\t\t\ts = s.substr(0, s.length() - 1);\n\t\t\t\ts +=\
    \ '-';\n\t\t\t}\n\t\t\telse if(space_count == 1) {\n\t\t\t\ts = s.substr(0, s.length()\
    \ - 1);\n\t\t\t\ts += '_';\n\t\t\t}\n\t\t\ts += text[i];\n\t\t\tspace_count =\
    \ 0;\n\t\t}\n\t}\n\tif(space_count >= 2) {\n\t\ts = s.substr(0, s.length() - 1);\n\
    \t\ts += '-';\n\t}\n\telse if(space_count == 1) {\n\t\ts = s.substr(0, s.length()\
    \ - 1);\n\t\ts += '_';\n\t}\n\treturn s;", "    std::string result = \"\";\n \
    \   int count_consec_spaces = 0;\n    for (char ch : text) {\n        if (ch ==\
    \ ' ') {\n            count_consec_spaces++;\n            if (count_consec_spaces\
    \ == 1) {\n                result += \"_\";\n            }\n        } else {\n\
    \            if (count_consec_spaces > 2) {\n                result += \"-\";\n\
    \            }\n            result += ch;\n            count_consec_spaces = 0;\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> text_vec(text.begin(),\
    \ text.end());\n    std::vector<char> res;\n    std::cout << text << \"\\n\";\n\
    \    for (auto i : text_vec) {\n        // std::cout << i << \" \";\n        if\
    \ (i == \" \") {\n            if (!res.empty() && res.back() == '_') {\n     \
    \           res.pop_back();\n                res.push_back('-');\n           \
    \ } else if (!res.empty() && res.back() == '-') {\n                continue;\n\
    \            } else {\n                res.push_back('_');\n            }\n  \
    \      } else {\n            res.push_back(i[0]);\n        }\n    }\n    std::string\
    \ result(res.begin(), res.end());\n    return result;", "    int l = text.length();\n\
    \    std::string str;\n    int f = 0;\n    int c = 0;\n    for(int i = 0; i <\
    \ l; i++) {\n        if(text[i] == ' ') {\n            c++;\n            if(c\
    \ >= 2) {\n                str += '-';\n                c = 0;\n            }\n\
    \        }\n        else {\n            if(text[i] != ' ') {\n               \
    \ str += text[i];\n                c = 0;\n            }\n        }\n    }\n \
    \   return str;", "    if(text.length() == 0) return text;\n    std::string res\
    \ = \"\";\n    int counter = 0;\n    for(int i = 0; i < text.length(); i++) {\n\
    \        if(text[i] == ' ') {\n            counter++;\n            continue;\n\
    \        } else {\n            if(counter == 1) res += \"_\";\n            else\
    \ if(counter > 1) res += \"-\";\n            res += text[i];\n            counter\
    \ = 0;\n        }\n    }\n    if(counter == 1) res += \"_\";\n    else if(counter\
    \ > 1) res += \"-\";\n    return res;", "    std::string res;\n    int n = text.size();\n\
    \    int i=0;\n    while(i<n){\n        if(text[i]==' '){\n            res +=\
    \ '_';\n            while(i<n && text[i]==' '){\n                res += '-';\n\
    \                i++;\n            }\n        }\n        else{\n            res\
    \ += text[i];\n            i++;\n        }\n    }\n    return res;", "    std::string\
    \ result;\n    std::string::iterator it;\n    std::string::iterator itEnd = text.end();\n\
    \    --itEnd;\n    int index = 0;\n    for (it = text.begin(); it < itEnd; ++it)\
    \ {\n        ++index;\n        if (*it == ' ') {\n            if (*(it + 1) ==\
    \ ' ') {\n                result.push_back('-');\n                ++it;\n    \
    \            while(*it == ' ' && it < itEnd) {\n                    ++it;\n  \
    \              }\n                --it;\n            } else {\n              \
    \  result.push_back('_');\n            }\n        } else {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::size_t\
    \ n = text.size();\n    int counter = 0;\n    for (std::size_t i = 0; i < n; i++)\
    \ {\n        if (text[i] == ' ') {\n            result += '_';\n            counter++;\n\
    \        } else {\n            result += text[i];\n            counter = 0;\n\
    \        }\n        if (counter > 2) {\n            result.back() = '-';\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n       \
    \     if (i == 0) {\n                result += '_';\n            } else if (i\
    \ == text.size() - 1) {\n                result += '_';\n            } else if\
    \ (text[i + 1] == ' ') {\n                result += '-';\n            } else {\n\
    \                result += '_';\n            }\n        } else {\n           \
    \ result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    std::string not_spaces;\n    if(text.size() < 1) return result;\n\
    \    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n  \
    \          if(not_spaces.size() == 0) {\n                result += '_';\n    \
    \        } else {\n                if(not_spaces.size() == 1) {\n            \
    \        result += not_spaces;\n                    result += '_';\n         \
    \       } else {\n                    result += not_spaces;\n                \
    \    result += '-';\n                }\n                not_spaces.clear();\n\
    \            }\n        } else {\n            not_spaces += text[i];\n       \
    \ }\n    }\n    if(not_spaces.size() > 0) {\n        result += not_spaces;\n \
    \   }\n    return result;", "\tint l = text.length();\n\tstring newText = \"\"\
    ;\n\tint c = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (text[i] == ' ') {\n\t\
    \t\tif (c > 0) {\n\t\t\t\tnewText += '-';\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tnewText += '_';\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\
    newText += text[i];\n\t\t\tc = 0;\n\t\t}\n\t}\n\treturn newText;", "    // replace\
    \ all spaces with underscore\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n\
    \    // if there are more than 2 consecutive spaces, replace with '-'\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_' && text[i+1]\
    \ == '_' && text[i+2] == '_') {\n            text[i+1] = '-';\n            text[i+2]\
    \ = '-';\n        }\n    }\n    return text;", "\treturn text;", "    text.erase(remove(text.begin(),\
    \ text.end(), ' '), text.end());\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n\
    \    return text;", "    int len = text.length();\n    std::string result = \"\
    \";\n    bool last_is_space = false;\n    int spaces = 0;\n    for (int i = 0;\
    \ i < len; i++) {\n        if (text[i] == ' ') {\n            spaces++;\n    \
    \        if (spaces == 2) {\n                if (last_is_space)\n            \
    \        result.pop_back();\n                result += \"-\";\n              \
    \  spaces = 0;\n            }\n            last_is_space = true;\n        } else\
    \ {\n            spaces = 0;\n            last_is_space = false;\n        }\n\
    \        result += text[i];\n    }\n    if (result[0] == ' ')\n        result[0]\
    \ = '_';\n    if (result[result.length() - 1] == ' ')\n        result[result.length()\
    \ - 1] = '_';\n    return result;", "  int len = text.length();\n  std::string\
    \ result = \"\";\n  int count = 0;\n  for(int i = 0; i < len; i++) {\n    if(text[i]\
    \ == ' ') {\n      count++;\n      if(count == 1) {\n        result += '_';\n\
    \      }\n      else if(count == 2) {\n        result += '-';\n      }\n    }\n\
    \    else {\n      count = 0;\n      result += text[i];\n    }\n  }\n  return\
    \ result;", "    // str_b -  \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\
    \u0447\u043D\u044B\u0439 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\
    \n    std::string str_b;\n    // str_c -  \u0440\u0435\u0437\u0443\u043B\u044C\
    \u0442\u0430\u0442\n    std::string str_c;\n    int counter = 0;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            counter++;\n\
    \            if (counter > 2) {\n                str_b += '-';\n             \
    \   counter = 0;\n            } else {\n                str_b += '_';\n      \
    \      }\n        } else {\n            str_b += text[i];\n            counter\
    \ = 0;\n        }\n    }\n    if (str_b[0] == ' ') {\n        str_c += '_';\n\
    \    }\n    for (int i = 1; i < str_b.size(); i++) {\n        if (str_b[i] ==\
    \ '_' && str_b[i - 1] == '_') {\n            str_c += '-';\n        } else {\n\
    \            str_c += str_b[i];\n        }\n    }\n    return str_c;", "    for(int\
    \ i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            text[i]\
    \ = '_';\n        }\n    }\n    int i = 0;\n    while(i < text.size()) {\n   \
    \     if(text[i] == '_') {\n            int j = i + 1;\n            while(j <\
    \ text.size() && text[j] == '_') {\n                j++;\n            }\n    \
    \        if(j - i > 2) {\n                text[i] = '-';\n                for(int\
    \ k = i + 1; k < j; k++) {\n                    text[k] = '-';\n             \
    \   }\n            }\n            i = j;\n        }\n        else {\n        \
    \    i++;\n        }\n    }\n    return text;", "\tfor (int i = 0; i < text.size();\
    \ i++) {\n\t\tif (text[i] == ' ')\n\t\t\ttext[i] = '_';\n\t}\n\tfor (int i = 0;\
    \ i < text.size(); i++) {\n\t\tif (text[i] == '_' && text[i + 1] == '_' && text[i\
    \ + 2] == '_') {\n\t\t\ttext[i] = '-';\n\t\t\ttext.erase(i + 1, 2);\n\t\t}\n\t\
    }\n\treturn text;", "\tint n = text.length();\n\tstring ans;\n\tint i = 0;\n\t\
    while(i < n){\n\t\tif(i == 0 && text[i] == ' '){\n\t\t\tans.push_back('_');\n\t\
    \t\ti++;\n\t\t}\n\t\telse if(text[i] == ' ' && text[i + 1] == ' '){\n\t\t\tint\
    \ j = i + 1;\n\t\t\twhile(j < n && text[j] == ' '){\n\t\t\t\tj++;\n\t\t\t}\n\t\
    \t\tans.push_back('-');\n\t\t\ti = j;\n\t\t}\n\t\telse if(text[i] == ' '){\n\t\
    \t\tans.push_back('_');\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tans.push_back(text[i]);\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn ans;", "  int old_length = text.length();\n \
    \ int new_length = 0;\n  int space_count = 0;\n  for (int i = 0; i < old_length;\
    \ i++) {\n    if (text[i] == ' ') {\n      space_count++;\n    } else {\n    \
    \  space_count = 0;\n    }\n    new_length++;\n    if (space_count == 2) {\n \
    \     new_length++;\n      space_count = 0;\n    }\n  }\n  std::string new_text(new_length,\
    \ ' ');\n  space_count = 0;\n  int j = 0;\n  for (int i = 0; i < old_length; i++)\
    \ {\n    if (text[i] == ' ') {\n      space_count++;\n    } else {\n      space_count\
    \ = 0;\n    }\n    if (space_count == 1) {\n      new_text[j] = '_';\n      j++;\n\
    \    } else if (space_count == 2) {\n      new_text[j] = '-';\n      j++;\n  \
    \    space_count = 0;\n    } else {\n      new_text[j] = text[i];\n      j++;\n\
    \    }\n  }\n  return new_text;", "  //...\n  return \"\";", "\tif (text.size()\
    \ == 0) {\n\t\treturn text;\n\t}\n\tint cnt = 0;\n\tbool first_space = false;\n\
    \tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcnt++;\n\
    \t\t\tif (cnt == 1) {\n\t\t\t\tfirst_space = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tcnt = 0;\n\t\t}\n\t}\n\tif (first_space) {\n\t\ttext = '_' + text;\n\t}\n\
    \tfor (int i = 1; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tint\
    \ j = i + 1;\n\t\t\twhile (j < text.size() && text[j] == ' ') {\n\t\t\t\tj++;\n\
    \t\t\t}\n\t\t\tif (j - i > 2) {\n\t\t\t\ttext[i] = '-';\n\t\t\t\tint pos = i +\
    \ 1;\n\t\t\t\twhile (pos < j) {\n\t\t\t\t\ttext.erase(pos, 1);\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
  "    std::string temp = \"\";\n    std::string res = \"\";\n    for(int i = 0; i\
    \ < text.length(); i++) {\n        if(text[i] == ' ')\n            temp += \"\
    _\";\n        else {\n            if(temp == \"__\") {\n                res +=\
    \ \"-\";\n                temp = \"\";\n            }\n            else if(temp\
    \ != \"\") {\n                res += temp;\n                temp = \"\";\n   \
    \         }\n            res += text[i];\n        }\n    }\n    if(temp == \"\
    __\")\n        res += \"-\";\n    else if(temp != \"\")\n        res += temp;\n\
    \    return res;", '    // Your code goes here', "  std::string text1 = \"\";\n\
    \  int c = 0;\n  for(int i = 0; i < text.length(); i++) {\n    if(text[i] == '\
    \ ') {\n      if(c == 0) {\n        text1 += '_';\n        c++;\n      } else\
    \ if(c == 1) {\n        text1 += '_';\n        c++;\n      } else {\n        text1\
    \ += '-';\n        c++;\n      }\n    } else {\n      text1 += text[i];\n    \
    \  c = 0;\n    }\n  }\n  return text1;", "    // write your code here\n    std::string\
    \ out = \"\";\n    bool was_space = false;\n    for (auto c : text) {\n      \
    \  if (c == ' ') {\n            if (was_space) {\n                out += '-';\n\
    \            } else {\n                out += '_';\n                was_space\
    \ = true;\n            }\n        } else {\n            out += c;\n          \
    \  was_space = false;\n        }\n    }\n    return out;", "    // Write your\
    \ code here\n    // Don't forget to return the result :)\n    for(int i=0;i<text.length();i++){\n\
    \        if(text[i]==' '){\n            text[i]='_';\n        }\n    }\n    return\
    \ text;", "    std::cout << \"Received: \" << text << \"\\n\";\n    std::string\
    \ output = \"\";\n    int spaces_count = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            spaces_count++;\n       \
    \ } else {\n            spaces_count = 0;\n        }\n        if (spaces_count\
    \ > 2) {\n            if (output[output.length() - 1] != '-') {\n            \
    \    output += '-';\n            }\n        } else if (text[i] == ' ') {\n   \
    \         output += '_';\n        } else {\n            output += text[i];\n \
    \       }\n    }\n    return output;", "    std::string res = \"\";\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        int x = 0;\n        if (text[i] == '\
    \ ') {\n            while (text[i + x] == ' ') x++;\n            if (x > 2) res\
    \ += \"-\";\n            else {\n                while (x > 0) {\n           \
    \         res += \"_\";\n                    x--;\n                }\n       \
    \     }\n        }\n        else {\n            res += text[i];\n        }\n \
    \   }\n    return res;", "\tstd::string result = \"\";\n\tint cnt = 0;\n\tfor\
    \ (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (cnt\
    \ == 0) {\n\t\t\t\tresult.push_back('_');\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\
    \ if (cnt == 1) {\n\t\t\t\tresult.push_back('-');\n\t\t\t\tcnt++;\n\t\t\t}\n\t\
    \t}\n\t\telse {\n\t\t\tresult.push_back(text[i]);\n\t\t\tcnt = 0;\n\t\t}\n\t}\n\
    \treturn result;", "\t// REPLACE ALL SPACES WITH UNDERSCORES\n\tstd::replace(text.begin(),\
    \ text.end(), ' ', '_');\n\t// std::replace(s.begin(), s.end(), 'a', 'e');\n\t\
    // APPLY THE CONDITION\n\t// std::string::size_type i = 0;\n\n\t// while (i <\
    \ text.size()) {\n\t// \tif (text[i] == '_' && text[i + 1] == '_' && text[i +\
    \ 2] == '_') {\n\t// \t\ttext[i] = '-';\n\t// \t\ttext.erase(i + 1, 2);\n\t//\
    \ \t}\n\t// \ti++;\n\t// }\n\t// return text;\n\t// REWRITING THE CODE ABOVE\n\
    \tint i = 0;\n\twhile (i < text.size()) {\n\t\tif (text[i] == '_' && text[i +\
    \ 1] == '_' && text[i + 2] == '_') {\n\t\t\ttext[i] = '-';\n\t\t\ttext.erase(i\
    \ + 1, 2);\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn text;", "\t//\
    \ your code here\n\tstd::string result;\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i == 0) {\n\t\t\t\tresult += '_';\n\
    \t\t\t}\n\t\t\telse if (text[i - 1] == ' ') {\n\t\t\t\tresult += '-';\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult\
    \ += text[i];\n\t\t}\n\t}\n\treturn result;", "\t", "    std::string text_with_underscores;\n\
    \    std::string text_with_dashes;\n    size_t space_count = 0;\n    for (char\
    \ const &c : text) {\n        if (isspace(c)) {\n            space_count++;\n\
    \            if (space_count == 2) {\n                text_with_underscores +=\
    \ \"-\";\n            }\n        } else {\n            text_with_underscores +=\
    \ c;\n            space_count = 0;\n        }\n    }\n    // std::cout << text_with_underscores\
    \ << std::endl;\n    space_count = 0;\n    for (char const &c : text_with_underscores)\
    \ {\n        if (isspace(c)) {\n            space_count++;\n            if (space_count\
    \ == 1) {\n                text_with_dashes += \"_\";\n            }\n       \
    \ } else {\n            text_with_dashes += c;\n            space_count = 0;\n\
    \        }\n    }\n    return text_with_dashes;", "    std::string result = \"\
    \";\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] == ' ') {\n            count++;\n            if (count > 2) {\n\
    \                continue;\n            }\n            result += '_';\n      \
    \  } else {\n            if (count > 2) {\n                result += '-';\n  \
    \          }\n            count = 0;\n            result += text[i];\n       \
    \ }\n    }\n    return result;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < text.size(); i++) {\n        if(i == 0 && text[i] == ' ') {\n       \
    \     ans += '_';\n        }\n        else if(text[i] == ' ' && text[i - 1] ==\
    \ ' ') {\n            ans += '-';\n        }\n        else if(text[i] == ' ')\
    \ {\n            ans += '_';\n        }\n        else {\n            ans += text[i];\n\
    \        }\n    }\n    return ans;", "    for(int i = 0; i < text.size(); i++)\
    \ {\n        if(text[i] == ' ') {\n            int j = i;\n            int cnt\
    \ = 0;\n            for(; j < text.size() && text[j] == ' '; j++) {\n        \
    \        cnt++;\n            }\n            if(cnt >= 2) {\n                text[i]\
    \ = '-';\n                while(j < text.size()) {\n                    text[i+1]\
    \ = text[j];\n                    i++;\n                    j++;\n           \
    \     }\n                text = text.substr(0, i);\n            } else {\n   \
    \             text[i] = '_';\n            }\n        }\n    }\n    return text;"]
stop_tokens:
- "\n}"
