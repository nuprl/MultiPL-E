name: HumanEval_108_count_nums
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum;\n    int\
    \ count=0;\n    for(int i=0;i<arr.size();i++){\n        sum=0;\n        while(arr[i]!=0){\n\
    \            sum+=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n     \
    \   if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmprhuow8ee: /tmp/tmprhuow8ee.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpssjx4_ef: /tmp/tmpssjx4_ef.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    // To print results to the standard output you can use print()\n \
    \   // Example: print(arr);\n    if(arr.size() == 0)\n        return 0;\n    if(arr.size()\
    \ == 1)\n        return 1;\n    int count = 0;\n    for(long i : arr)\n    {\n\
    \        long sum = 0;\n        if(i == 0)\n            continue;\n        if(i\
    \ < 0)\n            i = i * -1;\n        while(i > 0)\n        {\n           \
    \ sum += i % 10;\n            i = i / 10;\n        }\n        if(sum > 0)\n  \
    \          count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgoq_7isr: /tmp/tmpgoq_7isr.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long count = 0;\n    for (int i = 0; i < n; i++) {\n        long number =\
    \ arr[i];\n        long sum = 0;\n        while (number != 0) {\n            long\
    \ digit = number % 10;\n            if (digit < 0) {\n                digit =\
    \ -digit;\n            }\n            sum += digit;\n            number /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpd801nq2_: /tmp/tmpd801nq2_.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    return arr.size();\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8di5fq0k: /tmp/tmp8di5fq0k.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Your code goes here.\n\
    \  long sum=0;\n  long count=0;\n  for(long i=0;i<arr.size();i++)\n  {\n    if(arr[i]<0)\n\
    \    {\n      arr[i]=-arr[i];\n    }\n    long num=arr[i];\n    sum=0;\n    while(num!=0)\n\
    \    {\n      sum=sum+num%10;\n      num=num/10;\n    }\n    if(sum>0)\n    {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvkd1mm2u: /tmp/tmpvkd1mm2u.cpp:37: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // YOUR CODE HERE\n\
    \    long ans = 0;\n    for(int i = 0; i < arr.size(); i++){\n        long temp\
    \ = arr[i];\n        int sum = 0;\n        while(temp != 0){\n            sum\
    \ += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0){\n  \
    \          ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyjxfm4td: /tmp/tmpyjxfm4td.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        int l = 0;\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n            l = 1;\n        }\n \
    \       while (arr[i] != 0) {\n            sum = sum + arr[i] % 10;\n        \
    \    arr[i] = arr[i] / 10;\n        }\n        if (l == 1) {\n            sum\
    \ = sum * -1;\n        }\n        if (sum > 0) {\n            sum = 0;\n     \
    \       continue;\n        }\n        else if (sum < 0) {\n            sum = 0;\n\
    \            arr[i] = arr[i] * -1;\n            continue;\n        }\n       \
    \ else if (sum == 0) {\n            sum = 0;\n            arr[i] = arr[i] * -1;\n\
    \            continue;\n        }\n    }\n    return arr.size();\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpyo81bkns: /tmp/tmpyo81bkns.cpp:45: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i = arr.begin(); i != arr.end(); i++) {\n        long a = *i;\n\
    \        long sum = 0;\n        while (a != 0) {\n            sum += a % 10;\n\
    \            a /= 10;\n        }\n        if (sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjx6xgeh4: /tmp/tmpjx6xgeh4.cpp:31: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return 0;\n    }\n    else {\n        return std::count_if(arr.begin(),\
    \ arr.end(), [](int n) {\n            auto s = std::to_string(n);\n          \
    \  return std::accumulate(s.begin(), s.end(), 0, [](int sum, char c) { return\
    \ sum + c - '0'; }) > 0;\n        });\n    }\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6kbjrz83: /tmp/tmp6kbjrz83.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // YOUR CODE HERE\n\
    \    long result = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        std::string\
    \ temp = std::to_string(arr[i]);\n        if (temp[0] == '-') {\n            temp.erase(0,\
    \ 1);\n        }\n        int sum = 0;\n        for (int j = 0; j < temp.size();\
    \ j++) {\n            sum += (temp[j] - '0');\n        }\n        if (sum > 0)\
    \ {\n            result++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwc4zevh5: /tmp/tmpwc4zevh5.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int s = arr.size();\n\
    \    int count = 0;\n    for(int i = 0; i < s; i++) {\n        int sum = 0;\n\
    \        if(arr[i] < 0) {\n            int n = arr[i] * -1;\n            while(n\
    \ > 0) {\n                sum += n % 10;\n                n /= 10;\n         \
    \   }\n            sum *= -1;\n        }\n        else {\n            int n =\
    \ arr[i];\n            while(n > 0) {\n                sum += n % 10;\n      \
    \          n /= 10;\n            }\n        }\n        if(sum > 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmprljitbcq: /tmp/tmprljitbcq.cpp:43: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count=0;\n  for(auto&\
    \ x:arr){\n    long x_check=x;\n    if(x<0){\n      x=x*-1;\n    }\n    long sum_of_digits=0;\n\
    \    while(x!=0){\n      sum_of_digits=sum_of_digits+x%10;\n      x=x/10;\n  \
    \  }\n    if(sum_of_digits!=0){\n      count=count+1;\n    }\n    x=x_check;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_nx8592x: /tmp/tmp_nx8592x.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return 0;\n    }\n    std::string tmp;\n    long res = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        tmp = std::to_string(arr[i]);\n\
    \        long signed_digits = 0;\n        for (long j = 0; j < tmp.size(); j++)\
    \ {\n            if (arr[i] < 0 && j == 0) {\n                signed_digits +=\
    \ -1 * (tmp[j] - '0');\n            } else {\n                signed_digits +=\
    \ tmp[j] - '0';\n            }\n        }\n        if (signed_digits > 0) {\n\
    \            res++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpywkt88tq: /tmp/tmpywkt88tq.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Your code here\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpswlu40n5: /tmp/tmpswlu40n5.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return 0;\n    int total = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        int temp = 0;\n        int num = arr[i];\n        while (num != 0) {\n\
    \            temp += num % 10;\n            num /= 10;\n        }\n        if\
    \ (temp > 0) {\n            total++;\n        }\n    }\n    return total;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpzk4yt46t: /tmp/tmpzk4yt46t.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ret = 0;\n \
    \   for (std::vector<long>::iterator it = arr.begin(); it != arr.end(); ++it)\
    \ {\n        if (it == arr.begin()) {\n            if (*it > 0) {\n          \
    \      ret++;\n            }\n        } else {\n            if (*it > 0) {\n \
    \               ret++;\n            }\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwjwzkaw2: /tmp/tmpwjwzkaw2.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int cnt = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        int result = 0;\n        int\
    \ num = abs(arr[i]);\n        while (num > 0) {\n            result += num % 10;\n\
    \            num /= 10;\n        }\n        if (result > 0) {\n            cnt++;\n\
    \        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk_6ezcms: /tmp/tmpk_6ezcms.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count = 0;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tif (arr[i] < 0)\
    \ {\n\t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\twhile (arr[i] > 0) {\n\t\t\tsum =\
    \ sum + arr[i] % 10;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (sum > 0) {\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpctawbe55: /tmp/tmpctawbe55.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n     \
    \       arr[i] = -arr[i];\n        }\n        int sum = 0;\n        while (arr[i]\
    \ != 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n      \
    \  }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpn39gariq: /tmp/tmpn39gariq.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long result = 0;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    // check if negative or positive\n\
    \    long sign = 1;\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    arr[i]\
    \ = arr[i] * sign;\n    std::cout << \"arr[i]: \" << arr[i] << std::endl;\n  \
    \  long digit_sum = 0;\n    while (arr[i] > 0) {\n      digit_sum += arr[i] %\
    \ 10;\n      arr[i] = arr[i] / 10;\n    }\n    std::cout << \"digit_sum: \" <<\
    \ digit_sum << std::endl;\n    if (digit_sum != 0) {\n      result++;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = count_nums;\n  \
    \  assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: "arr[i]: 1\ndigit_sum: 1\narr[i]: 2\ndigit_sum: 2\narr[i]: 0\ndigit_sum:\
    \ 0\n"
  stderr: "tmp7pjrry2c: /tmp/tmp7pjrry2c.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long rtn = 0;\n  for\
    \ (long i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n\
    \    }\n    if (arr[i] < 10) {\n      rtn++;\n    } else {\n      long sum = 0;\n\
    \      while (arr[i] > 0) {\n        sum += arr[i] % 10;\n        arr[i] /= 10;\n\
    \      }\n      if (sum > 0) {\n        rtn++;\n      }\n    }\n  }\n  return\
    \ rtn;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpsn962ket: /tmp/tmpsn962ket.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.size() == 0)\
    \ {\n    return 0;\n  }\n  int count = 0;\n  for (size_t i = 0; i < arr.size();\
    \ i++) {\n    int sum = 0;\n    int num = arr[i];\n    if (num < 0) {\n      sum\
    \ += num * -1;\n    } else {\n      sum += num;\n    }\n    while (sum > 0) {\n\
    \      sum -= sum % 10;\n      sum /= 10;\n    }\n    if (sum < 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt_v208co: /tmp/tmpt_v208co.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // write your code\
    \ here\n\n  long count=0;\n  long len = arr.size();\n  for(long i=0;i<len;i++)\n\
    \  {\n    long temp = arr[i];\n    long sum = 0;\n    if(temp>0)\n    {\n    \
    \  while(temp>0)\n      {\n        sum += temp%10;\n        temp /= 10;\n    \
    \  }\n    }\n    else\n    {\n      while(temp!=0)\n      {\n        sum += temp%10;\n\
    \        temp /= 10;\n      }\n    }\n    if(sum>0)\n    {\n      count++;\n \
    \   }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp86j227h5: /tmp/tmp86j227h5.cpp:49: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (std::vector<long>::iterator i = arr.begin(); i != arr.end(); i++) {\n\
    \        long elem = *i;\n        long sum = 0;\n        while (elem != 0) {\n\
    \            sum += abs(elem) % 10;\n            elem /= 10;\n        }\n    \
    \    if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpd9qta_iy: /tmp/tmpd9qta_iy.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int temp = 0;\n \
    \   for (auto i : arr) {\n        if (i == 0)\n            temp++;\n        else\
    \ if (i < 0) {\n            if (i % 10 != 0)\n                temp++;\n      \
    \  } else if (i > 0) {\n            if (i % 10 != 0)\n                temp++;\n\
    \        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4qrqhq35: /tmp/tmp4qrqhq35.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long count=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        long sum=0;\n\
    \        if(arr[i]<0)\n        {\n            sum=arr[i]%10;\n            arr[i]=arr[i]/10;\n\
    \        }\n        while(arr[i]!=0)\n        {\n            sum+=arr[i]%10;\n\
    \            arr[i]=arr[i]/10;\n        }\n        if(sum>0)\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj4eb_bne: /tmp/tmpj4eb_bne.cpp:40: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        long sum = 0;\n        while (i != 0) {\n \
    \           sum += abs(i%10);\n            i /= 10;\n        }\n        if (sum\
    \ != 0)\n            count++;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp36co2ccs: /tmp/tmp36co2ccs.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int len = arr.size();\n\
    \    long res = 0;\n    for (int i = 0; i < len; i++) {\n        int sum = 0;\n\
    \        if (arr[i] >= 0) {\n            int num = arr[i];\n            while\
    \ (num) {\n                sum += num % 10;\n                num /= 10;\n    \
    \        }\n        } else {\n            int num = -arr[i];\n            while\
    \ (num) {\n                sum += num % 10;\n                num /= 10;\n    \
    \        }\n            sum = -sum;\n        }\n        if (sum) res++;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9k7dujdg: /tmp/tmp9k7dujdg.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong counter = 0;\n\
    \tfor (int i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tif (arr[i] >=\
    \ 0) {\n\t\t\twhile (arr[i] != 0) {\n\t\t\t\tsum += arr[i] % 10;\n\t\t\t\tarr[i]\
    \ /= 10;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tarr[i] = abs(arr[i]);\n\t\t\twhile\
    \ (arr[i] != 0) {\n\t\t\t\tsum += arr[i] % 10;\n\t\t\t\tarr[i] /= 10;\n\t\t\t\
    }\n\t\t}\n\t\tif (sum != 0) {\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4lqe__t8: /tmp/tmp4lqe__t8.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmppchq5blp: /tmp/tmppchq5blp.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long c=0;\n    for(int\
    \ i=0;i<arr.size();i++)\n    {\n        int sum=0;\n        if(arr[i]<0)\n   \
    \     {\n            arr[i]*=-1;\n        }\n        while(arr[i]>0)\n       \
    \ {\n            sum+=arr[i]%10;\n            arr[i]/=10;\n        }\n       \
    \ if(sum>0)\n        {\n            c++;\n        }\n    }\n    return c;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwu5thyjr: /tmp/tmpwu5thyjr.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // std::cout << \"\
    count_nums\" << std::endl;\n  std::vector<int> vec(arr.size());\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    std::vector<int> digits;\n    long num = arr[i];\n\
    \    // std::cout << num << std::endl;\n    if (num < 0) {\n      num = -num;\n\
    \      digits.push_back(-1);\n    }\n    while (num > 0) {\n      digits.push_back(num\
    \ % 10);\n      num /= 10;\n    }\n    vec[i] = std::accumulate(digits.begin(),\
    \ digits.end(), 0);\n  }\n  long count = 0;\n  for (int i = 0; i < vec.size();\
    \ i++) {\n    if (vec[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpm8k2jzb2: /tmp/tmpm8k2jzb2.cpp:38: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        int digitSum = 0;\n    \
    \    if (arr[i] < 0) {\n            digitSum += arr[i] * -1;\n        } else {\n\
    \            digitSum += arr[i];\n        }\n        while (digitSum != 0) {\n\
    \            digitSum -= digitSum % 10;\n            digitSum /= 10;\n       \
    \ }\n        if (digitSum > 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkcxdcrzh: /tmp/tmpkcxdcrzh.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for(long i = 0; i < arr.size(); i++) {\n        long temp = arr[i];\n    \
    \    long sum = 0;\n        if(temp < 0) {\n            temp = temp * -1;\n  \
    \      }\n        while(temp > 0) {\n            sum += temp % 10;\n         \
    \   temp = temp / 10;\n        }\n        if(sum > 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6z6ctks8: /tmp/tmp6z6ctks8.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.size() == 0)\
    \ {\n    return 0;\n  }\n  long count = 0;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    long num = arr[i];\n    long sum = 0;\n    long dig = 0;\n    if\
    \ (num < 0) {\n      dig = -1;\n    }\n    while (num != 0) {\n      if (dig ==\
    \ -1) {\n        sum += -(num % 10);\n      } else {\n        sum += num % 10;\n\
    \      }\n      num /= 10;\n      dig = 1;\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbn33vbjb: /tmp/tmpbn33vbjb.cpp:40: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] =\
    \ arr[i] * -1;\n\t\t}\n\t\tlong cur = arr[i];\n\t\tlong dig = 0;\n\t\twhile (cur\
    \ > 0) {\n\t\t\tdig += cur % 10;\n\t\t\tcur = cur / 10;\n\t\t}\n\t\tif (dig >\
    \ 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpx0bv4vic: /tmp/tmpx0bv4vic.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    // Write your code here\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>0){\n\
    \            int j=1;\n            int sum=0;\n            while(arr[i]>0){\n\
    \                sum+=arr[i]%10;\n                arr[i]/=10;\n            }\n\
    \            if(sum>0){\n                result++;\n            }\n        }\n\
    \        else{\n            int j=0;\n            int num=arr[i];\n          \
    \  std::vector<int> vect;\n            while(num<0){\n                vect.push_back(num%10);\n\
    \                num/=10;\n            }\n            int sum=vect[0];\n     \
    \       for(int i=1;i<vect.size();i++){\n                sum+=vect[i];\n     \
    \       }\n            if(sum>0){\n                result++;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int count = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      int sum = 0;\n\
    \      while (arr[i] > 0) {\n        sum += arr[i] % 10;\n        arr[i] /= 10;\n\
    \      }\n      if (sum > 0) {\n        count++;\n      }\n    } else {\n    \
    \  arr[i] = -arr[i];\n      int sum = 0;\n      while (arr[i] > 0) {\n       \
    \ sum += arr[i] % 10;\n        arr[i] /= 10;\n      }\n      if (sum > 0) {\n\
    \        count++;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpa82xvh08: /tmp/tmpa82xvh08.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int number_of_nums\
    \ = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    int temp = 0;\n    if (arr[i]\
    \ >= 0) {\n      temp = arr[i];\n    } else {\n      temp = arr[i] * -1;\n   \
    \ }\n    while (temp != 0) {\n      int digit = temp % 10;\n      temp = temp\
    \ / 10;\n      number_of_nums += digit;\n    }\n    if (number_of_nums > 0) {\n\
    \      number_of_nums = 1;\n    } else {\n      number_of_nums = 0;\n    }\n \
    \ }\n  return number_of_nums;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9bwpfa_o: /tmp/tmp9bwpfa_o.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ret = 0;\n \
    \   long sum;\n    for (int i = 0; i < arr.size(); i++) {\n        sum = 0;\n\
    \        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n            arr[i]\
    \ /= 10;\n        }\n        if (sum > 0) {\n            ret++;\n        }\n \
    \   }\n    return ret;\n}\nint main() {\n    auto candidate = count_nums;\n  \
    \  assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpe814qgbo: /tmp/tmpe814qgbo.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   // The array might be empty.\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    // Compute the sum of all digits for each element.\n    for (auto\
    \ i : arr) {\n        long sum = 0;\n        // If a number is negative, then\
    \ its first signed digit will be negative.\n        bool isNegative = false;\n\
    \        if (i < 0) {\n            isNegative = true;\n            i = std::abs(i);\n\
    \        }\n        // Keep dividing the integer by 10 until you get 0.\n    \
    \    while (i > 0) {\n            sum += i % 10;\n            i /= 10;\n     \
    \   }\n        // If a number is negative, then compute -(negative sum).\n   \
    \     if (isNegative) {\n            sum = -sum;\n        }\n        // If a sum\
    \ is positive, then increment res.\n        if (sum > 0) {\n            res++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmphbj3c_zn: /tmp/tmphbj3c_zn.cpp:48: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tstd::vector<long>::iterator\
    \ itr;\n\tlong count = 0;\n\tfor (itr = arr.begin(); itr != arr.end(); itr++)\
    \ {\n\t\tlong num = *itr;\n\t\tlong sum = 0;\n\t\tif (num < 0) {\n\t\t\tnum =\
    \ -num;\n\t\t\tsum += (num % 10);\n\t\t\tnum /= 10;\n\t\t}\n\t\twhile (num > 0)\
    \ {\n\t\t\tsum += (num % 10);\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\
    \tcount++;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl7f2b89l: /tmp/tmpl7f2b89l.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long count = 0;\n    for (int i = 0; i < n; i++) {\n        long num = abs(arr[i]);\n\
    \        while (num > 0) {\n            count++;\n            num = num / 10;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpm39mo5gb: /tmp/tmpm39mo5gb.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long num = 0;\n \
    \   int sum;\n    int count = 0;\n    while (num < arr.size()) {\n        if (arr[num]\
    \ < 0) {\n            sum = abs(arr[num]) % 10;\n            arr[num] = abs(arr[num])\
    \ / 10;\n            while (arr[num] > 0) {\n                sum += arr[num] %\
    \ 10;\n                arr[num] = arr[num] / 10;\n            }\n            if\
    \ (sum > 0) {\n                count++;\n            }\n        }\n        else\
    \ {\n            sum = 0;\n            while (arr[num] > 0) {\n              \
    \  sum += arr[num] % 10;\n                arr[num] = arr[num] / 10;\n        \
    \    }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        num++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi6rcx19c: /tmp/tmpi6rcx19c.cpp:43: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    int a[n];\n    int k = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i]\
    \ < 0) {\n            a[k] = arr[i] * -1;\n            k++;\n        }\n     \
    \   else {\n            a[k] = arr[i];\n            k++;\n        }\n    }\n \
    \   long sum = 0;\n    for(int i = 0; i < k; i++) {\n        while(a[i] != 0)\
    \ {\n            sum = sum + a[i] % 10;\n            a[i] = a[i] / 10;\n     \
    \   }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt5rdnqds: /tmp/tmpt5rdnqds.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\t// Write your code\
    \ here\n\tint count = 0;\n\tif (arr.size() == 0)\n\t\treturn 0;\n\telse {\n\t\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\t\tint temp = arr[i];\n\t\t\tif (temp\
    \ < 0)\n\t\t\t\ttemp = temp * -1;\n\t\t\tint sum = 0;\n\t\t\twhile (temp > 0)\
    \ {\n\t\t\t\tsum += temp % 10;\n\t\t\t\ttemp = temp / 10;\n\t\t\t}\n\t\t\tif (sum\
    \ > 0)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_j9gfdun: /tmp/tmp_j9gfdun.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long cnt = 0;\n  for\
    \ (long i = 0; i < arr.size(); i++) {\n    long n = arr[i];\n    if (n < 0) n\
    \ = -n;\n    long s = 0;\n    while (n) {\n      s += n % 10;\n      n /= 10;\n\
    \    }\n    if (s) cnt++;\n  }\n  return cnt;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpud3oznzm: /tmp/tmpud3oznzm.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        int\
    \ num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n       \
    \ }\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_xgrgbh5: /tmp/tmp_xgrgbh5.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            num = std::abs(num);\n  \
    \          sum += num % 10;\n            num /= 10;\n        }\n        while\
    \ (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8j22rzx6: /tmp/tmp8j22rzx6.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long sum;\n  int i\
    \ = 0;\n  long count = 0;\n  if (arr.size() == 0) {\n    return 0;\n  } else {\n\
    \    while (i < arr.size()) {\n      if (arr[i] < 0) {\n        arr[i] = arr[i]\
    \ * -1;\n      }\n      while (arr[i] > 0) {\n        sum = sum + arr[i] % 10;\n\
    \        arr[i] = arr[i] / 10;\n      }\n      if (sum > 0) {\n        count++;\n\
    \      }\n      sum = 0;\n      i++;\n    }\n    return count;\n  }\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp0loiybgq: /tmp/tmp0loiybgq.cpp:37: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    long temp = arr[i];\n    if (temp\
    \ == 0) {\n      continue;\n    }\n    if (temp < 0) {\n      temp = temp * -1;\n\
    \    }\n    int sum = 0;\n    while (temp > 0) {\n      sum += temp % 10;\n  \
    \    temp = temp / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5egoplud: /tmp/tmp5egoplud.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return 0;\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        int sum = 0;\n        int temp = abs(arr[i]);\n        while (temp) {\n\
    \            sum += temp % 10;\n            temp /= 10;\n        }\n        if\
    \ (sum > 0) count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdjomxmq0: /tmp/tmpdjomxmq0.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long cnt = 0;\n \
    \   for (auto x : arr) {\n        long sum = 0;\n        if (x < 0) {\n      \
    \      sum += x % 10;\n            x = -(x / 10);\n        }\n        while (x\
    \ > 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n      \
    \  if (sum > 0)\n            cnt++;\n    }\n    return cnt;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpauiljbi6: /tmp/tmpauiljbi6.cpp:34: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // YOUR CODE HERE\n\
    \    long count=0;\n    long sum=0;\n    for(int i=0;i<arr.size();i++){\n    \
    \    if(arr[i]<0){\n            arr[i]=-arr[i];\n        }\n        while(arr[i]>0){\n\
    \            sum+=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n     \
    \   if(sum>0){\n            count++;\n        }\n        sum=0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpungt1zbt: /tmp/tmpungt1zbt.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        std::string s = std::to_string(arr[i]);\n\
    \        long sum = 0;\n        for (char x : s) {\n            int digit = x\
    \ - '0';\n            if (digit < 0)\n                digit = -digit;\n      \
    \      sum += digit;\n        }\n        if (sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1zapa15b: /tmp/tmp1zapa15b.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long num = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n    if (arr[i] < 0) {\n\
    \      long n = -arr[i];\n      int last_digit = n % 10;\n      sum += last_digit;\n\
    \      n = n / 10;\n      while (n > 0) {\n        last_digit = n % 10;\n    \
    \    sum += last_digit;\n        n = n / 10;\n      }\n      if (sum > 0) {\n\
    \        num += 1;\n      }\n    } else {\n      long n = arr[i];\n      int last_digit\
    \ = n % 10;\n      sum += last_digit;\n      n = n / 10;\n      while (n > 0)\
    \ {\n        last_digit = n % 10;\n        sum += last_digit;\n        n = n /\
    \ 10;\n      }\n      if (sum > 0) {\n        num += 1;\n      }\n    }\n  }\n\
    \  return num;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8f5awz8y: /tmp/tmp8f5awz8y.cpp:47: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong total=0;\n\tfor(int\
    \ i=0;i<arr.size();i++){\n\t\tif(arr[i]>0){\n\t\t\tif(arr[i]>=100000){\n\t\t\t\
    \ttotal=total+1;\n\t\t\t}\n\t\t\telse if(arr[i]>=10000){\n\t\t\t\tlong x=arr[i]/10000;\n\
    \t\t\t\tlong y=arr[i]%10000;\n\t\t\t\ty=y/1000;\n\t\t\t\tlong z=arr[i]%1000;\n\
    \t\t\t\tz=z/100;\n\t\t\t\tlong m=arr[i]%100;\n\t\t\t\tm=m/10;\n\t\t\t\tlong n=arr[i]%10;\n\
    \t\t\t\ttotal=total+x+y+z+m+n;\n\t\t\t}\n\t\t\telse if(arr[i]>=1000){\n\t\t\t\t\
    long x=arr[i]/1000;\n\t\t\t\tlong y=arr[i]%1000;\n\t\t\t\ty=y/100;\n\t\t\t\tlong\
    \ z=arr[i]%100;\n\t\t\t\tz=z/10;\n\t\t\t\tlong m=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z+m;\n\
    \t\t\t}\n\t\t\telse if(arr[i]>=100){\n\t\t\t\tlong x=arr[i]/100;\n\t\t\t\tlong\
    \ y=arr[i]%100;\n\t\t\t\ty=y/10;\n\t\t\t\tlong z=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z;\n\
    \t\t\t}\n\t\t\telse if(arr[i]>=10){\n\t\t\t\tlong x=arr[i]/10;\n\t\t\t\tlong y=arr[i]%10;\n\
    \t\t\t\ttotal=total+x+y;\n\t\t\t}\n\t\t\telse if(arr[i]>=1){\n\t\t\t\ttotal=total+\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjj5xu3rs.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjj5xu3rs.cpp:51:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmpjj5xu3rs.cpp:52:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   52 | int main() {\n      |            ^\n/tmp/tmpjj5xu3rs.cpp:62:1: error:\
    \ expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpjj5xu3rs.cpp:13:15:\
    \ note: to match this \u2018{\u2019\n   13 |   if(arr[i]>0){\n      |        \
    \       ^\n/tmp/tmpjj5xu3rs.cpp:62:1: error: expected \u2018}\u2019 at end of\
    \ input\n   62 | }\n      | ^\n/tmp/tmpjj5xu3rs.cpp:12:31: note: to match this\
    \ \u2018{\u2019\n   12 |  for(int i=0;i<arr.size();i++){\n      |            \
    \                   ^\n/tmp/tmpjj5xu3rs.cpp:62:1: error: expected \u2018}\u2019\
    \ at end of input\n   62 | }\n      | ^\n/tmp/tmpjj5xu3rs.cpp:10:40: note: to\
    \ match this \u2018{\u2019\n   10 | long count_nums(std::vector<long> arr) {\n\
    \      |                                        ^\n/tmp/tmpjj5xu3rs.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   62 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Iterate over each\
    \ element in the array.\n    int count = 0;\n    for (int element : arr) {\n \
    \       // If the element is negative then flip the sign of the number.\n    \
    \    if (element < 0) {\n            element = -element;\n        }\n        //\
    \ Find the sum of digits of the number.\n        int sum = 0;\n        while (element\
    \ > 0) {\n            sum += element % 10;\n            element /= 10;\n     \
    \   }\n        // If the sum of digits is greater than 0, increment count.\n \
    \       if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkswenzgg: /tmp/tmpkswenzgg.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tif (arr.size() == 0)\
    \ {\n\t\treturn 0;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < arr.size(); i++)\
    \ {\n\t\tint sum = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] = arr[i] * -1;\n\t\t\
    }\n\t\tif (arr[i] == 0) {\n\t\t\tcount += 1;\n\t\t}\n\t\twhile (arr[i] != 0) {\n\
    \t\t\tsum += arr[i] % 10;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (sum > 0)\
    \ {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzesz0kqj: /tmp/tmpzesz0kqj.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long arr_len = arr.size();\n\
    \  long sum;\n  long count = 0;\n  for (long i = 0; i < arr_len; i++) {\n    if\
    \ (arr[i] == 0) {\n      count += 1;\n    }\n    else if (arr[i] < 0) {\n    \
    \  sum = 0;\n      sum += -arr[i];\n      while (sum > 0) {\n        sum = sum\
    \ / 10;\n        count += 1;\n      }\n    }\n    else {\n      sum = 0;\n   \
    \   sum += arr[i];\n      while (sum > 0) {\n        sum = sum / 10;\n       \
    \ count += 1;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ns5lzix: /tmp/tmp_ns5lzix.cpp:40: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong total = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong n = abs(arr[i]);\n\
    \t\twhile (n != 0) {\n\t\t\tsum += n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tif (sum\
    \ > 0) {\n\t\t\ttotal++;\n\t\t}\n\t}\n\treturn total;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbwcjllmu: /tmp/tmpbwcjllmu.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long size=arr.size();\n\
    \    if(size==0)\n        return 0;\n    long count=0;\n    for(long i=0;i<size;i++)\n\
    \    {\n        long num=arr[i];\n        if(num<0)\n            num*=-1;\n  \
    \      long num_digits=log10(num)+1;\n        int sum=0;\n        while(num!=0)\n\
    \        {\n            int digit=num%10;\n            sum+=digit;\n         \
    \   num/=10;\n        }\n        if(sum>0)\n            count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1052s81f: /tmp/tmp1052s81f.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    /* your code here\
    \ */\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    int num =\
    \ abs(arr[i]);\n    while (num != 0) {\n      sum += num % 10;\n      num /= 10;\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpa5xhs2fc: /tmp/tmpa5xhs2fc.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long k = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n      \
    \      continue;\n        }\n        if (arr[i] > 0) {\n            long sum =\
    \ 0;\n            for (long j = i; j < arr.size(); j++) {\n                sum\
    \ += arr[j];\n            }\n            if (sum > 0) {\n                k++;\n\
    \            }\n        }\n        if (arr[i] < 0) {\n            long sum = 0;\n\
    \            for (long j = i; j < arr.size(); j++) {\n                sum += arr[j];\n\
    \            }\n            if (sum < 0) {\n                k++;\n           \
    \ }\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpffzbb83j: /tmp/tmpffzbb83j.cpp:40: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (auto const & a : arr) {\n        if (a >= 0) {\n            result +=\
    \ a % 10 > 0;\n            a /= 10;\n        } else {\n            result += a\
    \ % 10 < 0;\n            a /= 10;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoovp__a0.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoovp__a0.cpp:15:15: error: assignment of read-only reference\
    \ \u2018a\u2019\n   15 |             a /= 10;\n      |             ~~^~~~~\n/tmp/tmpoovp__a0.cpp:18:15:\
    \ error: assignment of read-only reference \u2018a\u2019\n   18 |            \
    \ a /= 10;\n      |             ~~^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (std::vector<long>::iterator it = arr.begin(); it != arr.end(); ++it)\
    \ {\n        if (*it != 0) {\n            long num = *it;\n            std::vector<long>\
    \ digits;\n            while (num != 0) {\n                digits.push_back(num\
    \ % 10);\n                num /= 10;\n            }\n            long digit_sum\
    \ = 0;\n            for (std::vector<long>::iterator it2 = digits.begin(); it2\
    \ != digits.end(); ++it2) {\n                digit_sum += *it2;\n            }\n\
    \            if (digit_sum > 0) {\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsnn50tav: /tmp/tmpsnn50tav.cpp:38: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto n : arr) {\n        long sum = 0;\n        if (n < 0) n = n * -1;\n\
    \        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n \
    \       }\n        if (sum > 0) count++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmcltx5u4: /tmp/tmpmcltx5u4.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (auto i : arr) {\n        if (i != 0) {\n            int sum = 0;\n \
    \           if (i < 0) {\n                i = -i;\n            }\n           \
    \ while (i != 0) {\n                sum += i % 10;\n                i /= 10;\n\
    \            }\n            if (sum != 0) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpg0tlnvcv: /tmp/tmpg0tlnvcv.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tif (arr.size() == 0)\
    \ {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong count = 0;\n\tfor (int i = 0;\
    \ i < arr.size(); i++) {\n\t\tif (arr[i] < 0) {\n\t\t\tsum = -1 * (arr[i] % 10);\n\
    \t\t\tarr[i] = arr[i] / -10;\n\t\t}\n\t\twhile (arr[i] > 0) {\n\t\t\tsum += arr[i]\
    \ % 10;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tsum = 0;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6rjwmwb1: /tmp/tmp6rjwmwb1.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    if (arr.size() == 0) {\n        return 0;\n    } else {\n        for (long\
    \ i = 0; i < arr.size(); i++) {\n            if (arr[i] > 0) {\n             \
    \   while (arr[i] > 0) {\n                    count += arr[i] % 10;\n        \
    \            arr[i] /= 10;\n                }\n            } else {\n        \
    \        while (arr[i] < 0) {\n                    count += arr[i] % 10;\n   \
    \                 arr[i] /= 10;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4i3yt336: /tmp/tmp4i3yt336.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            sum += -1;\n            arr[i] = -arr[i];\n    \
    \    }\n        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n     \
    \       arr[i] /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpn6jcd7ui: /tmp/tmpn6jcd7ui.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong num = arr[i];\n\
    \t\tif (num < 0) {\n\t\t\tnum = -num;\n\t\t}\n\t\twhile (num > 0) {\n\t\t\tsum\
    \ += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsswa93ix: /tmp/tmpsswa93ix.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int s = arr.size();\n\
    \    int c = 0;\n    int sum = 0;\n    for(int i = 0; i < s; i++) {\n        int\
    \ num = arr[i];\n        if(num < 0) {\n            num = -num;\n        }\n \
    \       while(num != 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if(sum != 0) {\n            c++;\n        }\n        sum =\
    \ 0;\n    }\n    return c;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfsy7npy7: /tmp/tmpfsy7npy7.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    int sum = 0;\n    long n = arr.size();\n    for (int i = 0; i < n; i++) {\n\
    \        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n   \
    \     while (arr[i] != 0) {\n            int digit = arr[i] % 10;\n          \
    \  sum = sum + digit;\n            arr[i] = arr[i] / 10;\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n        sum = 0;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpyey8bryc: /tmp/tmpyey8bryc.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // 1, 2, 3, 4, 5 ->\
    \ 5, 6, 7, 8, 9\n  // -1, 2, 3, 4, 5 -> -1, 2, 3, 4, 5\n  // -1, 2, -3, 4, 5 ->\
    \ -1, 2, -3, 4, 5\n  // 10, 11, 12, 13, 14 -> 1, 2, 3, 4, 5\n  // count = 3\n\
    \  // index = 0, 1, 2\n  // count if a[i] is > -1\n  // if a[i] < 0\n  // a[i]\
    \ = a[i] * -1\n  // a[i] /= 10\n  // for(int i = 0; i < arr.size(); i++) {\n \
    \ //   if(arr[i] < 0)\n  //     arr[i] *= -1;\n  //   while(arr[i] > 0) {\n  //\
    \     arr[i] /= 10;\n  //   }\n  // }\n  return std::count_if(arr.begin(), arr.end(),\
    \ [](long i) { return i > -1; });\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpku1k7xco: /tmp/tmpku1k7xco.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long sum;\n    long digit;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        sum = 0;\n        if (arr[i] < 0) {\n            digit = arr[i] % 10;\n\
    \            digit = digit * -1;\n            sum += digit;\n            while\
    \ (arr[i] / 10 != 0) {\n                arr[i] = arr[i] / 10;\n              \
    \  digit = arr[i] % 10;\n                sum += digit;\n            }\n      \
    \  } else {\n            digit = arr[i] % 10;\n            sum += digit;\n   \
    \         while (arr[i] / 10 != 0) {\n                arr[i] = arr[i] / 10;\n\
    \                digit = arr[i] % 10;\n                sum += digit;\n       \
    \     }\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpssllxaqj: /tmp/tmpssllxaqj.cpp:43: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i=0; i<arr.size(); i++) {\n    long sum = 0;\n    for (long j=0; j<log10(abs(arr[i]))+1;\
    \ j++) {\n      sum += arr[i]%10;\n      arr[i] = arr[i]/10;\n    }\n    if (sum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7vi2pffh: /tmp/tmp7vi2pffh.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long s = 0;\n   \
    \ long i = 0;\n    while (i < arr.size()) {\n        long sum = 0;\n        long\
    \ n = arr[i];\n        if (n < 0) {\n            sum += -1;\n            n = -n;\n\
    \        }\n        while (n > 0) {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        if (sum > 0) {\n            s++;\n        }\n   \
    \     i++;\n    }\n    return s;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5k18ntyh: /tmp/tmp5k18ntyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n       \
    \ int sum = 0;\n        if(arr[i] == 0){\n            continue;\n        }\n \
    \       else if(arr[i] < 0){\n            int k = arr[i];\n            arr[i]\
    \ = arr[i] * -1;\n            while(arr[i] > 0){\n                sum += arr[i]\
    \ % 10;\n                arr[i] = arr[i] / 10;\n            }\n            arr[i]\
    \ = k;\n        }\n        else{\n            while(arr[i] > 0){\n           \
    \     sum += arr[i] % 10;\n                arr[i] = arr[i] / 10;\n           \
    \ }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8hoi8fot: /tmp/tmp8hoi8fot.cpp:42: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong cnt = 0;\n\tfor\
    \ (int i = 0; i < arr.size(); i++) {\n\t\tint sum = 0;\n\t\tif (arr[i] > 0) {\n\
    \t\t\twhile (arr[i] > 0) {\n\t\t\t\tsum += arr[i] % 10;\n\t\t\t\tarr[i] /= 10;\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tarr[i] = abs(arr[i]);\n\t\t\twhile (arr[i] >\
    \ 0) {\n\t\t\t\tsum += arr[i] % 10;\n\t\t\t\tarr[i] /= 10;\n\t\t\t}\n\t\t\tsum\
    \ = -sum;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpf3kq9gn9: /tmp/tmpf3kq9gn9.cpp:41: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long c=0;\n    for(auto\
    \ i=arr.begin();i!=arr.end();i++)\n    {\n        long n=*i;\n        long sum=0;\n\
    \        while(n!=0)\n        {\n            sum+=n%10;\n            n/=10;\n\
    \        }\n        if(sum>0)\n            c++;\n    }\n    return c;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpl7axcqsb: /tmp/tmpl7axcqsb.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long i,count=0;\n\
    \    if(arr.size()==0)\n    {\n        return 0;\n    }\n    else{\n        for(i=0;i<arr.size();i++)\n\
    \        {\n            if(arr[i]==0)\n            {\n                count++;\n\
    \            }\n            else{\n            int sum=0;\n            if(arr[i]<0)\n\
    \            {\n                arr[i]=arr[i]*-1;\n            }\n           \
    \ while(arr[i]!=0)\n            {\n                sum=sum+arr[i]%10;\n      \
    \          arr[i]=arr[i]/10;\n            }\n            if(sum>0)\n         \
    \   {\n                count++;\n            }\n        }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7f9diy81: /tmp/tmp7f9diy81.cpp:46: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        std::string s = std::to_string(arr[i]);\n\
    \        if (arr[i] < 0) {\n            sum += arr[i];\n        }\n        else\
    \ {\n            for (int i = 0; i < s.length(); i++) {\n                int num\
    \ = s[i] - '0';\n                sum += num;\n            }\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpgztrg_9u: /tmp/tmpgztrg_9u.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count=0;\n \
    \   if(arr.size()==0)\n    {\n        return 0;\n    }\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        int sum=0;\n        int number=arr[i];\n        if(number<0)\n\
    \        {\n            number=number*-1;\n        }\n        while(number>0)\n\
    \        {\n            sum+=number%10;\n            number=number/10;\n     \
    \   }\n        if(sum>0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp978wazm3: /tmp/tmp978wazm3.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count=0;\n  for(int\
    \ i=0;i<arr.size();i++)\n  {\n    long sum=0;\n    if(arr[i]<0)\n    {\n     \
    \   arr[i]=-arr[i];\n    }\n    while(arr[i]>0)\n    {\n      long digit=arr[i]%10;\n\
    \      sum=sum+digit;\n      arr[i]=arr[i]/10;\n    }\n    if(sum>0)\n    {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp62m5tk9d: /tmp/tmp62m5tk9d.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong num = arr[i];\n\
    \t\tif (num < 0) {\n\t\t\tnum = num * -1;\n\t\t}\n\t\twhile (num != 0) {\n\t\t\
    \tsum += num % 10;\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvkydv3tw: /tmp/tmpvkydv3tw.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        int sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = -arr[i];\n        }\n        while (arr[i]\
    \ != 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n      \
    \  }\n        if (sum != 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2ujzyzh4: /tmp/tmp2ujzyzh4.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int result = 0;\n\
    \    for (long& i : arr) {\n        int temp = i;\n        int sum = 0;\n    \
    \    while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n\
    \        }\n        if (sum > 0) {\n            result++;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwck_5f9e: /tmp/tmpwck_5f9e.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    if (arr.size() == 0) {\n        return 0;\n    }\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        long sum = 0;\n        if (arr[i] < 0) {\n   \
    \         arr[i] = arr[i] * -1;\n        }\n        while (arr[i] != 0) {\n  \
    \          sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7i06ss2s: /tmp/tmp7i06ss2s.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int digitSum=0;\n\
    \    int count=0;\n    for(int i=0;i<arr.size();i++){\n        digitSum=0;\n \
    \       if(arr[i]>0){\n            long num=arr[i];\n            while(num>0){\n\
    \                digitSum=digitSum+num%10;\n                num=num/10;\n    \
    \        }\n        }\n        else{\n            long num=arr[i];\n         \
    \   num=num*(-1);\n            while(num>0){\n                digitSum=digitSum+num%10;\n\
    \                num=num/10;\n            }\n        }\n        if(digitSum>0){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp3jma52eo: /tmp/tmp3jma52eo.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count=0;\n\tfor(auto\
    \ x:arr)\n\t{\n\t\tint sum=0;\n\t\tif(x<0)\n\t\t{\n\t\t\tx=-x;\n\t\t}\n\t\twhile(x!=0)\n\
    \t\t{\n\t\t\tint y=x%10;\n\t\t\tsum+=y;\n\t\t\tx=x/10;\n\t\t}\n\t\tif(sum>0)\n\
    \t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp23p21p5n: /tmp/tmp23p21p5n.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long num = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n      \
    \      arr[i] = arr[i] * -1;\n        }\n        if (arr[i] > 0) {\n         \
    \   long number = arr[i];\n            long sum = 0;\n            while (number\
    \ > 0) {\n                long digit = number % 10;\n                sum += digit;\n\
    \                number = number / 10;\n            }\n            if (sum > 0)\
    \ {\n                num += 1;\n            }\n        }\n    }\n    return num;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwsfxyc17: /tmp/tmpwsfxyc17.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int size = arr.size();\n\
    \    if (size == 0)\n        return 0;\n    long count = 0;\n    for (int i =\
    \ 0; i < size; i++) {\n        long temp = arr[i];\n        long sum = 0;\n  \
    \      while (temp != 0) {\n            long digit = temp % 10;\n            if\
    \ (digit < 0)\n                digit = -digit;\n            sum += digit;\n  \
    \          temp /= 10;\n        }\n        if (sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsrt8n4n8: /tmp/tmpsrt8n4n8.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      count++;\n\
    \    }\n    long signed_digit_sum = 0;\n    if (arr[i] < 0) {\n      arr[i] =\
    \ -arr[i];\n      signed_digit_sum += 1;\n    }\n    for (long j = 0; j < log10(arr[i])\
    \ + 1; j++) {\n      signed_digit_sum += arr[i] % 10;\n      arr[i] /= 10;\n \
    \   }\n    if (signed_digit_sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpnes041ek: /tmp/tmpnes041ek.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    long sum = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] < 0)\
    \ {\n\t\t\tint tmp = arr[i];\n\t\t\tsum += abs(tmp % 10);\n\t\t\ttmp /= 10;\n\t\
    \t\tsum += abs(tmp % 10);\n\t\t\tsum += abs(tmp / 10);\n\t\t}\n\t\telse {\n\t\t\
    \tint tmp = arr[i];\n\t\t\tsum += abs(tmp % 10);\n\t\t\ttmp /= 10;\n\t\t\tsum\
    \ += abs(tmp % 10);\n\t\t\tsum += abs(tmp / 10);\n\t\t}\n\t\tif (sum > 0) {\n\t\
    \t\tcount++;\n\t\t}\n\t\tsum = 0;\n\t}\n\treturn count;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptkcdx8bv: /tmp/tmptkcdx8bv.cpp:38: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint sum=0;\n\tint counter=0;\n\
    \tfor(int i=0;i<arr.size();i++){\n\t\tsum=0;\n\t\tif(arr[i]<0){\n\t\t\tsum+=arr[i]%10;\n\
    \t\t\tarr[i]=arr[i]/10;\n\t\t}\n\t\twhile(arr[i]>0){\n\t\t\tsum+=arr[i]%10;\n\t\
    \t\tarr[i]=arr[i]/10;\n\t\t}\n\t\tif(sum>0){\n\t\t\tcounter++;\n\t\t}\n\t}\n\t\
    return counter;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpbfbhdzt2: /tmp/tmpbfbhdzt2.cpp:36: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Start your code\
    \ here\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpi_6trxl0: /tmp/tmpi_6trxl0.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    if (arr.size() == 0)\n        return 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        long temp = 0;\n        if (arr[i] < 0) {\n            temp\
    \ += arr[i] * -1;\n        } else {\n            temp += arr[i];\n        }\n\
    \        while (temp != 0) {\n            count += temp % 10;\n            temp\
    \ /= 10;\n        }\n        if (count > 0) {\n            count = 1;\n      \
    \  } else {\n            count = 0;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpdtd7qkg9: /tmp/tmpdtd7qkg9.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ctr = 0;\n \
    \   for(long i = 0; i < arr.size(); i++) {\n        long j = arr[i];\n       \
    \ if(j < 0) {\n            j = j * -1;\n        }\n        long sum = 0;\n   \
    \     while(j > 0) {\n            sum += j % 10;\n            j = j / 10;\n  \
    \      }\n        if(sum > 0) {\n            ctr++;\n        }\n    }\n    return\
    \ ctr;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp16i_ifds: /tmp/tmp16i_ifds.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint n = arr.size();\n\
    \tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tint sum = 0;\n\t\tif (arr[i]\
    \ < 0) {\n\t\t\tarr[i] = -arr[i];\n\t\t}\n\t\twhile (arr[i] > 0) {\n\t\t\tsum\
    \ += arr[i] % 10;\n\t\t\tarr[i] /= 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcnt++;\n\
    \t\t}\n\t}\n\treturn cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2yqagr0n: /tmp/tmp2yqagr0n.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long n = arr.size();\n\
    \  long i;\n  long sum = 0;\n  long count = 0;\n  for (i = 0; i < n; i++) {\n\
    \    if (arr[i] < 0) {\n      arr[i] = arr[i] * -1;\n    }\n    while (arr[i]\
    \ > 0) {\n      sum = sum + arr[i] % 10;\n      arr[i] = arr[i] / 10;\n    }\n\
    \    if (sum > 0) {\n      count++;\n    }\n    sum = 0;\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmps50alzo4: /tmp/tmps50alzo4.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::sort(arr.begin(),\
    \ arr.end());\n    long i = 0;\n    long count = 0;\n    while (i < arr.size())\
    \ {\n        if (arr[i] < 0) {\n            while (i < arr.size() && arr[i] <\
    \ 0) {\n                i++;\n            }\n        }\n        else {\n     \
    \       count++;\n            i++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp0c_z3ftn: /tmp/tmp0c_z3ftn.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::reverse(arr.begin(), arr.end());\n  int count = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    std::string\
    \ str_num = std::to_string(num);\n    int total = 0;\n    for (int j = 0; j <\
    \ str_num.size(); j++) {\n      int digit = str_num[j] - '0';\n      total +=\
    \ digit;\n    }\n    if (total > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpjvzkbuwy: /tmp/tmpjvzkbuwy.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ // your code here\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpujxu9jtz: /tmp/tmpujxu9jtz.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\t// your code here\n\
    \tif (arr.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tlong count = 0;\n\t\
    for (auto x : arr) {\n\t\tif (x < 0) {\n\t\t\tsum += x*-1;\n\t\t}\n\t\telse\n\t\
    \t\tsum += x;\n\t}\n\tstd::string s = std::to_string(sum);\n\tcount = s.size();\n\
    \treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpy360zuqd: /tmp/tmpy360zuqd.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count=0;\n  for(int\
    \ i=0;i<arr.size();i++)\n  {\n      int num=arr[i];\n      if(num<0)\n       \
    \ num=-num;\n      int sum=0;\n      while(num>0)\n      {\n          sum=sum+num%10;\n\
    \          num=num/10;\n      }\n      if(sum>0)\n        count++;\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmps_rl5t6b: /tmp/tmps_rl5t6b.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // your code here\n\
    \    long cnt=0;\n    for(auto x:arr){\n        long s=0;\n        if(x<0)\n \
    \           x=x*-1;\n        while(x>0){\n            s+=x%10;\n            x/=10;\n\
    \        }\n        if(s>0)\n            cnt++;\n    }\n    return cnt;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpza2t6mad: /tmp/tmpza2t6mad.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tstd::string str\
    \ = std::to_string(arr[i]);\n\t\tif (arr[i] < 0) {\n\t\t\tsum += str[0] - '0';\n\
    \t\t}\n\t\tfor (long j = 0; j < str.size(); j++) {\n\t\t\tsum += str[j] - '0';\n\
    \t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpdprhi8qi: /tmp/tmpdprhi8qi.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (size_t i = 0; i < arr.size(); i++) {\n        long sum = 0;\n      \
    \  while (arr[i] != 0) {\n            sum += (arr[i] % 10);\n            arr[i]\
    \ /= 10;\n        }\n        if (sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp91gtvrca: /tmp/tmp91gtvrca.cpp:30: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (auto i = arr.begin(); i != arr.end(); i++) {\n        int sum = 0;\n\
    \        if (*i < 0) {\n            sum += (*i) % 10;\n            int a = (*i)\
    \ / 10;\n            sum += (a) % 10;\n            int b = a / 10;\n         \
    \   sum += (b) % 10;\n        } else {\n            while (*i != 0) {\n      \
    \          sum += (*i) % 10;\n                *i = *i / 10;\n            }\n \
    \       }\n        if (sum > 0)\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpijyddvi6: /tmp/tmpijyddvi6.cpp:38: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tlong a = arr[i];\n\
    \t\twhile (a != 0) {\n\t\t\tsum += (a % 10);\n\t\t\ta /= 10;\n\t\t}\n\t\tif (sum\
    \ > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_rt9jccy: /tmp/tmp_rt9jccy.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    long sum_of_digits;\n    for (long elem : arr) {\n        sum_of_digits =\
    \ 0;\n        if (elem < 0) {\n            elem = -elem;\n        }\n        while\
    \ (elem > 0) {\n            sum_of_digits += elem % 10;\n            elem /= 10;\n\
    \        }\n        if (sum_of_digits > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpuh9fe42j: /tmp/tmpuh9fe42j.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (long i = 0; i < arr.size(); i++) {\n\t\tlong num = arr[i];\n\t\tlong sum\
    \ = 0;\n\t\tif (num < 0) {\n\t\t\tnum = -num;\n\t\t\tsum = -num % 10;\n\t\t\t\
    num /= 10;\n\t\t}\n\t\twhile (num > 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /=\
    \ 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpro0tl3ra: /tmp/tmpro0tl3ra.cpp:36: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long cnt=0;\n   \
    \ long sum=0;\n    for(auto item:arr){\n        long x=item;\n        while(x!=0){\n\
    \            long r=x%10;\n            sum+=r;\n            x=x/10;\n        }\n\
    \        if(sum>0){\n            cnt++;\n        }\n        sum=0;\n    }\n  \
    \  return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ati7jom: /tmp/tmp_ati7jom.cpp:34: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long elem : arr) {\n        long num = elem;\n        long sum = 0;\n\
    \        while (num != 0) {\n            sum += abs(num % 10);\n            num\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpd8ulbsrd: /tmp/tmpd8ulbsrd.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long digits = 0;\n     \
    \   if (arr[i] < 0) {\n            arr[i] = -arr[i];\n        }\n        while\
    \ (arr[i] != 0) {\n            digits += arr[i] % 10;\n            arr[i] /= 10;\n\
    \        }\n        if (digits > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp155no18h: /tmp/tmp155no18h.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Put your code below\
    \ this line\n  return std::count_if(arr.begin(), arr.end(), [](long x) {\n   \
    \ if (x < 0) {\n      x = -x;\n    }\n    long sum = 0;\n    while (x > 0) {\n\
    \      sum += x % 10;\n      x /= 10;\n    }\n    return sum > 0;\n  });\n  //\
    \ Put your code above this line\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6iy4by6j: /tmp/tmp6iy4by6j.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.size() == 0)\
    \ {\n    return 0;\n  }\n  int count = 0;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    int sum = 0;\n    int temp = abs(arr[i]);\n    while (temp > 0) {\n \
    \     sum += temp % 10;\n      temp /= 10;\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqi_e7ryn: /tmp/tmpqi_e7ryn.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ long sum = 0;\n  int digit;\n  int size = arr.size();\n  // check if empty\n\
    \  if (size == 0) {\n    return 0;\n  }\n  for (int i = 0; i < size; i++) {\n\
    \    // check if the number is negative\n    if (arr[i] < 0) {\n      arr[i] =\
    \ arr[i] * -1;\n    }\n    sum = 0;\n    // find the sum of the digits\n    while\
    \ (arr[i] > 0) {\n      digit = arr[i] % 10;\n      sum += digit;\n      arr[i]\
    \ = arr[i] / 10;\n    }\n    // increase the counter if sum > 0\n    if (sum >\
    \ 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmplge5tjqa: /tmp/tmplge5tjqa.cpp:41: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum=0;\n   \
    \ for(int i=0;i<arr.size();i++){\n        int num=arr[i];\n        if(num<0){\n\
    \            num=num*-1;\n        }\n        while(num>0){\n            sum+=num%10;\n\
    \            num=num/10;\n        }\n        if(sum>0){\n            sum=0;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwbv_pvg4: /tmp/tmpwbv_pvg4.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        long number = arr[i];\n \
    \       if (number < 0) {\n            number = number * -1;\n        }\n    \
    \    while (number) {\n            sum += number % 10;\n            number /=\
    \ 10;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmphc2c_utd: /tmp/tmphc2c_utd.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpg2ny4ds8: /tmp/tmpg2ny4ds8.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    long signed_int;\n    for (int i = 0; i < arr.size(); i++) {\n        signed_int\
    \ = arr[i];\n        if (signed_int < 0) {\n            signed_int = -1 * signed_int;\n\
    \        }\n        long signed_int_sum = 0;\n        while (signed_int > 0) {\n\
    \            signed_int_sum += signed_int % 10;\n            signed_int /= 10;\n\
    \        }\n        if (signed_int_sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy4b1_mwn: /tmp/tmpy4b1_mwn.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long total = 0;\n      \
    \  long x = abs(arr[i]);\n        while (x > 0) {\n            long digit = x\
    \ % 10;\n            total += digit;\n            x /= 10;\n        }\n      \
    \  if (total > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpcr3w5iuo: /tmp/tmpcr3w5iuo.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong result = 0;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tlong num = arr[i];\n\t\tlong dig =\
    \ 0;\n\t\twhile (num != 0) {\n\t\t\tdig += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\
    \t\tif (dig > 0)\n\t\t\tresult++;\n\t}\n\treturn result;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8kp88sc_: /tmp/tmp8kp88sc_.cpp:31: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // \n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9y48k9xo: /tmp/tmp9y48k9xo.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long temp = arr[i];\n  \
    \      int digit_sum = 0;\n        if (temp < 0) {\n            temp = temp *\
    \ -1;\n        }\n        while (temp != 0) {\n            digit_sum += temp %\
    \ 10;\n            temp = temp / 10;\n        }\n        if (digit_sum > 0) {\n\
    \            result++;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1mfptffv: /tmp/tmp1mfptffv.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long sum=0;\n  for(long\
    \ i=0;i<arr.size();i++)\n  {\n    if(arr[i]>0)\n    {\n      int n=log10(arr[i])+1;\n\
    \      while(n>0)\n      {\n        int r=arr[i]%10;\n        sum=sum+r;\n   \
    \     arr[i]=arr[i]/10;\n        n--;\n      }\n    }\n    else\n    {\n     \
    \ int n=log10(arr[i]*-1)+1;\n      while(n>0)\n      {\n        int r=arr[i]%10;\n\
    \        sum=sum+r;\n        arr[i]=arr[i]/10;\n        n--;\n      }\n    }\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmppkxsstjc: /tmp/tmppkxsstjc.cpp:42: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long i;\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            arr[i] = arr[i] * -1;\n        }\n        while (arr[i] != 0) {\n\
    \            sum = sum + arr[i] % 10;\n            arr[i] = arr[i] / 10;\n   \
    \     }\n        if (sum > 0) {\n            sum = 0;\n        }\n        else\
    \ {\n            sum = 1;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp3myq65ka: /tmp/tmp3myq65ka.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\t\n\tint i, count =\
    \ 0;\n\tlong j;\n\tfor (i = 0; i < arr.size(); i++) {\n\t\t\n\t\tj = arr[i];\n\
    \t\tif (j < 0)\n\t\t\tj = -j;\n\t\tif (j < 10) {\n\t\t\tif (j > 0)\n\t\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\twhile (j >= 10) {\n\t\t\t\tcount++;\n\t\t\t\tj = j /\
    \ 10;\n\t\t\t}\n\t\t\tif (j > 0)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpvjan63wn: /tmp/tmpvjan63wn.cpp:37: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // return -1;\n \
    \   int ans = 0;\n    for(int i = 0; i < arr.size(); i++){\n        int sum =\
    \ 0;\n        int temp = arr[i];\n        while(temp != 0){\n            sum +=\
    \ abs(temp % 10);\n            temp /= 10;\n        }\n        if(sum > 0){\n\
    \            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2064dcl9: /tmp/tmp2064dcl9.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return 0;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        int num = abs(arr[i]);\n        long sum = 0;\n\
    \        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp24n02ibt: /tmp/tmp24n02ibt.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 0)\n\t\t\tcontinue;\n\
    \t\tint sum = 0;\n\t\tlong temp = arr[i];\n\t\tif (temp < 0)\n\t\t\ttemp = temp\
    \ * -1;\n\t\twhile (temp != 0) {\n\t\t\tsum += temp % 10;\n\t\t\ttemp = temp /\
    \ 10;\n\t\t}\n\t\tif (sum != 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpj8fxls3x: /tmp/tmpj8fxls3x.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long res = 0;\n  for\
    \ (long num : arr) {\n    res += (num != 0);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp41p8_6f9: /tmp/tmp41p8_6f9.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpvn0kfsr_: /tmp/tmpvn0kfsr_.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count=0;\n\tfor(int\
    \ i=0;i<arr.size();i++)\n\t{\n\t\tif(arr[i]<0)\n\t\t{\n\t\t\tarr[i]=arr[i]*-1;\n\
    \t\t}\n\t\tif(arr[i]<10)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(arr[i]>=10)\n\
    \t\t{\n\t\t\tint sum=0;\n\t\t\twhile(arr[i]>0)\n\t\t\t{\n\t\t\t\tsum+=arr[i]%10;\n\
    \t\t\t\tarr[i]=arr[i]/10;\n\t\t\t}\n\t\t\tif(sum>0)\n\t\t\t{\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0x9ibrtj: /tmp/tmp0x9ibrtj.cpp:41: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long val = 0;\n \
    \   std::for_each(arr.begin(), arr.end(), [&val](long i) {\n        if (i < 0)\
    \ {\n            i = abs(i);\n        }\n        while (i) {\n            val\
    \ += i % 10;\n            i /= 10;\n        }\n    });\n    return val;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4jihzqzi: /tmp/tmp4jihzqzi.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong sum = 0;\n\tlong\
    \ vals = 0;\n\tfor (std::vector<long>::iterator it = arr.begin(); it != arr.end();\
    \ ++it) {\n\t\tvals = 0;\n\t\tfor (int i = 0; i < std::to_string(*it).length();\
    \ i++) {\n\t\t\tif (*it < 0) {\n\t\t\t\tvals += (std::to_string(*it)[i] - '0')\
    \ * -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvals += std::to_string(*it)[i] - '0';\n\
    \t\t\t}\n\t\t}\n\t\tif (vals > 0) {\n\t\t\tsum++;\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1z8oaqav: /tmp/tmp1z8oaqav.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = -arr[i];\n        }\n        while (arr[i]\
    \ != 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n      \
    \  }\n        if (sum > 0)\n            count++;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpxhpzweuv: /tmp/tmpxhpzweuv.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long x = 0;\n        if (arr[i]\
    \ < 0) {\n            x = arr[i] * -1;\n        } else {\n            x = arr[i];\n\
    \        }\n        while (x > 0) {\n            count = count + x % 10;\n   \
    \         x = x / 10;\n        }\n        if (count > 0) {\n            count\
    \ = count + 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpx3rl61b_: /tmp/tmpx3rl61b_.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // your code here\n\
    \    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7oqptfya: /tmp/tmp7oqptfya.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long cnt = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    long sgn = arr[i] < 0 ? -1 : 1;\n  \
    \  long num = std::abs(arr[i]);\n    long sum = 0;\n    while (num) {\n      sum\
    \ += num % 10;\n      num /= 10;\n    }\n    if (sum * sgn > 0) {\n      cnt++;\n\
    \    }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy67wtu2f: /tmp/tmpy67wtu2f.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Replace this code\
    \ with your solution\n    long count=0;\n    for(long i=0;i<arr.size();i++){\n\
    \      long sum=0;\n      long num=arr[i];\n      if(num<0){\n        num=num*-1;\n\
    \      }\n      while(num>0){\n        sum+=num%10;\n        num=num/10;\n   \
    \   }\n      if(sum>0){\n        count++;\n      }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5ie9plyo: /tmp/tmp5ie9plyo.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum\
    \ = 0;\n    while (num != 0) {\n      long digit = num % 10;\n      sum += digit;\n\
    \      num /= 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpgvilbhyk: /tmp/tmpgvilbhyk.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long x: arr) {\n        long num = x;\n        if (num < 0) {\n     \
    \       num = -1 * num;\n        }\n        long dig_sum = 0;\n        while (num\
    \ > 0) {\n            dig_sum += num % 10;\n            num /= 10;\n        }\n\
    \        if (dig_sum > 0) {\n            sum += 1;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpaweaf0y1: /tmp/tmpaweaf0y1.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long count = 0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]<0){\n\
    \            arr[i] = abs(arr[i]);\n        }\n        long sum = 0;\n       \
    \ while(arr[i]!=0){\n            sum = sum + arr[i]%10;\n            arr[i] =\
    \ arr[i]/10;\n        }\n        if(sum>0){\n            count = count + 1;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpu3k_jm74: /tmp/tmpu3k_jm74.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.size() == 0)\
    \ {\n    return 0;\n  }\n  long count = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int sum = 0;\n    if (arr[i] < 0) {\n      sum += arr[i] * -1;\n\
    \    } else {\n      sum += arr[i];\n    }\n    while (sum > 0) {\n      sum -=\
    \ sum % 10;\n      sum /= 10;\n    }\n    if (sum != 0) {\n      count++;\n  \
    \  }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj9ijge9v: /tmp/tmpj9ijge9v.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count = 0;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tint sum = 0;\n\t\tint k = arr[i];\n\
    \t\tif (k < 0) {\n\t\t\tk = -k;\n\t\t}\n\t\twhile (k != 0) {\n\t\t\tsum += k %\
    \ 10;\n\t\t\tk = k / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqgdkhr4g: /tmp/tmpqgdkhr4g.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4912limo: /tmp/tmp4912limo.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  return 0L;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4f003c78: /tmp/tmp4f003c78.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long temp = 0;\n       \
    \ long number = arr[i];\n        while (number != 0) {\n            temp += number\
    \ % 10;\n            number /= 10;\n        }\n        if (temp != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpx5kuithq: /tmp/tmpx5kuithq.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (auto num : arr) {\n    long total = 0;\n    if (num == 0)\n      total\
    \ = 0;\n    else if (num < 0) {\n      num = -num;\n      total += -(num % 10);\n\
    \      num /= 10;\n    }\n    else {\n      total += num % 10;\n      num /= 10;\n\
    \    }\n    while (num > 0) {\n      total += num % 10;\n      num /= 10;\n  \
    \  }\n    if (total > 0)\n      count++;\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp0n_99ojm: /tmp/tmp0n_99ojm.cpp:41: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if(num < 0){\n            num = num\
    \ * -1;\n        }\n        while(num > 0){\n            int digit = num % 10;\n\
    \            sum += digit;\n            num = num / 10;\n        }\n        if(sum\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpfjys_jtn: /tmp/tmpfjys_jtn.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::cout << \"Solved\
    \ with 0!\\n\";\n    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: "Solved with 0!\nSolved with 0!\nSolved with 0!\n"
  stderr: "tmp8jrr4jyb: /tmp/tmp8jrr4jyb.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\t// Use your function\
    \ to return the count of the number of elements in arr\n\t// which has a sum of\
    \ digits > 0.\n\t// Note that arr is an array of integers, and therefore there\
    \ are no\n\t// decimals.\n\t// Note that 0 is counted as a sum of digits, e.g.\
    \ 0 has sum of digits 0.\n\t// You can return either a long or an int.\n\t// You\
    \ can write additional helper functions.\n\t// You cannot use any built-in functions,\
    \ such as sum().\n\t// You must write this function iteratively, and cannot use\
    \ recursion.\n\tlong count = 0;\n\tint i = 0;\n\tint sum = 0;\n\tfor (i = 0; i\
    \ < arr.size(); i++) {\n\t\tint n = arr[i];\n\t\tif (n < 0) {\n\t\t\tn = n * -1;\n\
    \t\t}\n\t\twhile (n != 0) {\n\t\t\tsum = sum + n % 10;\n\t\t\tn = n / 10;\n\t\t\
    }\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t\tsum = 0;\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2l75zpat: /tmp/tmp2l75zpat.cpp:42: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count=0;\n \
    \   for(auto i:arr){\n        int sum=0;\n        while(i>0){\n            sum+=i%10;\n\
    \            i/=10;\n        }\n        if(sum>0) count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7xwqncdp: /tmp/tmp7xwqncdp.cpp:29: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count=0;\n  for(int\
    \ i=0;i<arr.size();i++)\n  {\n    int sum=0;\n    if(arr[i]<0)\n    {\n      arr[i]\
    \ = arr[i]*(-1);\n    }\n    while(arr[i]!=0)\n    {\n      sum += arr[i]%10;\n\
    \      arr[i] = arr[i]/10;\n    }\n    if(sum>0)\n    {\n      count++;\n    }\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk6fpsgg7: /tmp/tmpk6fpsgg7.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    if (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tfor (long i = 0; i <\
    \ arr.size(); i++) {\n\t\t\tlong sum = 0;\n\t\t\tlong num = abs(arr[i]);\n\t\t\
    \twhile (num > 0) {\n\t\t\t\tsum += num % 10;\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\
    \t\tif (sum > 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpua75k6sw: /tmp/tmpua75k6sw.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = abs(arr[i]);\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcosn1n56: /tmp/tmpcosn1n56.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint count = 0;\n\t\
    int sign = 0;\n\tint digit = 0;\n\tint temp = 0;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tsign = 1;\n\t\ttemp = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tsign = -1;\n\
    \t\t}\n\t\twhile (arr[i] != 0) {\n\t\t\tdigit = sign * (arr[i] % 10);\n\t\t\t\
    temp += digit;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (temp > 0) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0zt3iomo: /tmp/tmp0zt3iomo.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n      \
    \      sum += (arr[i] * -1);\n        } else {\n            sum += arr[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnl3qahkm: /tmp/tmpnl3qahkm.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // your code here\n\
    \    long count = 0;\n    for(auto i : arr){\n        long number = i;\n     \
    \   long sum = 0;\n        while(number!=0){\n            sum += number%10;\n\
    \            number /= 10;\n        }\n        if(sum>0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc3hw1c2y: /tmp/tmpc3hw1c2y.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto& elem : arr) {\n        int sum = 0;\n        for (auto& i : std::to_string(elem))\
    \ {\n            sum += i - '0';\n        }\n        if (sum != 0) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpihtuha1i: /tmp/tmpihtuha1i.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long pos_sum = 0;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum\
    \ = 0;\n    if (num < 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n\
    \    while (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    if\
    \ (sum > 0) {\n      pos_sum++;\n    }\n  }\n  return pos_sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4o19hj24: /tmp/tmp4o19hj24.cpp:36: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // TODO: implement\
    \ this method\n    long cnt=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]<0){\n\
    \            cnt++;\n        }\n        else if(arr[i]>0){\n            cnt++;\n\
    \        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_r9ltqcy: /tmp/tmp_r9ltqcy.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  return std::count_if(arr.begin(),\
    \ arr.end(), [](long x) {\n    // Assume that x is not 0.\n    return (x > 0 ?\
    \ x : -x) % 9 != 0;\n  });\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnr93mknn: /tmp/tmpnr93mknn.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // your code goes here\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7fx_peav: /tmp/tmp7fx_peav.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long res = 0;\n  for\
    \ (long i = 0; i < arr.size(); i++) {\n    long x = arr[i];\n    if (x < 0) {\n\
    \      x = -x;\n    }\n    while (x > 0) {\n      res += x % 10;\n      x /= 10;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp22lhwxq6: /tmp/tmp22lhwxq6.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint num_digits = 0;\n\
    \tint sum_digits = 0;\n\tint num_sum_gt_0 = 0;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\t// If arr[i] is negative, set is_neg equal to 1.\n\t\t// Otherwise,\
    \ set is_neg equal to 0.\n\t\t// This value will be used to later determine if\
    \ the signed digit\n\t\t// should be added to sum_digits.\n\t\tint is_neg = arr[i]\
    \ < 0 ? 1 : 0;\n\t\t// If arr[i] is negative, change its sign to positive, as\
    \ you only\n\t\t// need to get the absolute value to find the number of digits.\n\
    \t\t// Otherwise, it is already positive, so leave it alone.\n\t\tarr[i] = arr[i]\
    \ < 0 ? -arr[i] : arr[i];\n\t\t// Loop through the digits of each number in arr.\n\
    \t\tfor (int j = arr[i]; j > 0; j /= 10) {\n\t\t\t// If the current digit is the\
    \ first signed digit, add it to\n\t\t\t// sum_digits or don't, depending on the\
    \ value of is_neg.\n\t\t\t// Otherwise, add the digit to sum_digits.\n\t\t\tsum_digits\
    \ += (is_neg && j < 10) ? j*is_neg : j%10;\n\t\t\t// Increment num_digits by 1.\n\
    \t\t\tnum_digits++;\n\t\t}\n\t\t// If sum_digits is greater than 0, increment\
    \ num_sum_gt_0 by 1.\n\t\t// Else, leave it alone.\n\t\tnum_sum_gt_0 += sum_digits\
    \ > 0 ? 1 : 0;\n\t\t// Reset sum_digits to 0 for the next number in arr.\n\t\t\
    sum_digits = 0;\n\t}\n\treturn num_sum_gt_0;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmppwzcnpxw: /tmp/tmppwzcnpxw.cpp:44: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong len = arr.size();\n\
    \tlong n = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tint sum = 0;\n\t\tfor (int\
    \ j = arr[i]; j < 0; j = j / 10) {\n\t\t\tsum += abs(j % 10);\n\t\t}\n\t\tfor\
    \ (int j = arr[i]; j > 0; j = j / 10) {\n\t\t\tsum += abs(j % 10);\n\t\t}\n\t\t\
    if (sum > 0) {\n\t\t\tn++;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp1cnie1w: /tmp/tmpp1cnie1w.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0)\n            arr[i] = arr[i] * -1;\n        while (arr[i] > 0)\
    \ {\n            sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n    \
    \    }\n        if (sum > 0)\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpoas88nsv: /tmp/tmpoas88nsv.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ temp = arr[i];\n        if (temp < 0) {\n            temp = abs(temp);\n   \
    \         sum = (temp % 10) * -1;\n            temp = temp / 10;\n        }\n\
    \        while (temp != 0) {\n            sum += temp % 10;\n            temp\
    \ = temp / 10;\n        }\n        if (sum > 0) {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5vcd1us3: /tmp/tmp5vcd1us3.cpp:37: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (auto itr : arr) {\n    long n = std::abs(itr);\n    long sum = 0;\n   \
    \ while (n > 0) {\n      sum += n % 10;\n      n /= 10;\n    }\n    if (sum >\
    \ 0)\n      count++;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmprulzk4g5: /tmp/tmprulzk4g5.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // YOUR CODE HERE\n\
    \    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long\
    \ num = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            num\
    \ = num * -1;\n        }\n        while (num != 0) {\n            sum += num %\
    \ 10;\n            num = num / 10;\n        }\n        if (sum > 0) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1kvq219e: /tmp/tmp1kvq219e.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    int sum = 0;\n    if (arr[i] < 0)\
    \ {\n      sum += abs(arr[i] % 10);\n      arr[i] /= 10;\n    }\n    while (arr[i]\
    \ > 0) {\n      sum += arr[i] % 10;\n      arr[i] /= 10;\n    }\n    if (sum >\
    \ 0)\n      count++;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfwd44oh9: /tmp/tmpfwd44oh9.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count=0;\n \
    \   for(long i=0;i<arr.size();i++)\n    {\n        long sum=0;\n        long num=arr[i];\n\
    \        if(num<0)\n        {\n            num=num*-1;\n        }\n        while(num>0)\n\
    \        {\n            sum+=num%10;\n            num=num/10;\n        }\n   \
    \     if(sum>0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpn_47ghm5: /tmp/tmpn_47ghm5.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    /*replace this function\
    \ with your own code */\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        while(arr[i]>0)\n        {\n            sum+=arr[i]%10;\n    \
    \        arr[i]/=10;\n        }\n        while(arr[i]<0)\n        {\n        \
    \    sum+=arr[i]%10;\n            arr[i]/=10;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpov1int0f: /tmp/tmpov1int0f.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long count = 0;\n    long n = arr.size();\n    std::vector<long>v;\n    for(int\
    \ i = 0; i < n; i++){\n        if(arr[i] < 0){\n            arr[i] = -1 * arr[i];\n\
    \        }\n        v.push_back(arr[i]);\n    }\n    for(int i = 0; i < n; i++){\n\
    \        sum = 0;\n        for(int j = 0; j < v[i]; j++){\n            sum +=\
    \ j;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqdeaesec: /tmp/tmpqdeaesec.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n   \
    \     if (num < 0) {\n            num = -num;\n        }\n        while (num >\
    \ 0) {\n            int remainder = num % 10;\n            count += remainder;\n\
    \            num /= 10;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1kgi1el9: /tmp/tmp1kgi1el9.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   if (arr.size() == 0)\n        return 0;\n    else if (arr.size() == 1) {\n\
    \        long num = arr[0];\n        while (num != 0) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if (sum > 0)\n           \
    \ return 1;\n        else\n            return 0;\n    }\n    else {\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long num = arr[i];\n       \
    \     while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if (sum > 0)\n                return 1;\n\
    \            else\n                return 0;\n        }\n    }\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqg391ovd: /tmp/tmpqg391ovd.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Don't add any\
    \ code here\n    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt62lwer8: /tmp/tmpt62lwer8.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sz = arr.size();\n\
    \    long res = 0;\n    for(int i = 0; i < sz; i++) {\n        long d = arr[i];\n\
    \        long sum = 0;\n        while(d != 0) {\n            sum += abs(d % 10);\n\
    \            d /= 10;\n        }\n        if(sum != 0) {\n            res++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpknn4d9ii: /tmp/tmpknn4d9ii.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ current = arr[i];\n        // Count the number of digits in the current integer\n\
    \        while (current != 0) {\n            sum += current % 10;\n          \
    \  current /= 10;\n        }\n        if (sum > 0) {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvxzlx8ml: /tmp/tmpvxzlx8ml.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long total = 0;\n\
    \    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        while\
    \ (arr[i] != 0) {\n            total += arr[i] % 10;\n            arr[i] /= 10;\n\
    \        }\n        if (total > 0) {\n            count++;\n        }\n      \
    \  total = 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdtr0sv2j: /tmp/tmpdtr0sv2j.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong long count=0;\n\
    \tfor(int i=0;i<arr.size();i++)\n\t{\n\t\tlong long n=abs(arr[i]);\n\t\tlong long\
    \ sum=0;\n\t\twhile(n!=0)\n\t\t{\n\t\t\tsum+=n%10;\n\t\t\tn=n/10;\n\t\t}\n\t\t\
    if(sum>0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0zrlnm8p: /tmp/tmp0zrlnm8p.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong ans = 0;\n\tfor\
    \ (int i = 0; i < arr.size(); i++) {\n\t\tlong temp = arr[i];\n\t\tlong sum =\
    \ 0;\n\t\tif (temp < 0)\n\t\t\ttemp = temp * -1;\n\t\twhile (temp > 0) {\n\t\t\
    \tsum += temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t}\n\t\tif (sum > 0)\n\t\t\t\
    ans++;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc4kzli2f: /tmp/tmpc4kzli2f.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpc6t7jx_8: /tmp/tmpc6t7jx_8.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            sum += -num;\n          \
    \  num += 1;\n        }\n        while (num != 0) {\n            long digit =\
    \ num % 10;\n            sum += digit;\n            num /= 10;\n        }\n  \
    \      if (sum > 0) {\n            res++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpggg6xc8z: /tmp/tmpggg6xc8z.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long ret = 0;\n  for\
    \ (auto e : arr) {\n    long sum = 0;\n    long n = e;\n    if (n < 0) n = -n;\n\
    \    while (n > 0) {\n      sum += n % 10;\n      n /= 10;\n    }\n    if (sum\
    \ > 0) ret++;\n  }\n  return ret;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq6948hzj: /tmp/tmpq6948hzj.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tif (arr.size() == 0)\
    \ {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong count = 0;\n\tfor (auto it =\
    \ arr.begin(); it != arr.end(); it++) {\n\t\tif (*it < 0) {\n\t\t\tsum += (*it)\
    \ * -1;\n\t\t}\n\t\telse {\n\t\t\tsum += *it;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsgfme4mj: /tmp/tmpsgfme4mj.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n     \
    \       arr[i] = -1 * arr[i];\n        }\n        int sum = 0;\n        while\
    \ (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1pyu4qa6: /tmp/tmp1pyu4qa6.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long i,sum=0,count=0;\n\
    \    for(i=0;i<arr.size();i++)\n    {\n        sum=0;\n        if(arr[i]<0)\n\
    \        {\n            arr[i]=-arr[i];\n        }\n        while(arr[i]>0)\n\
    \        {\n            sum=sum+arr[i]%10;\n            arr[i]=arr[i]/10;\n  \
    \      }\n        if(sum>0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpvt8bgq3h: /tmp/tmpvt8bgq3h.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // write code here\n\
    \  long count = 0;\n  int digit;\n  long sum;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    sum = 0;\n    while (arr[i] != 0) {\n      digit = arr[i] % 10;\n\
    \      sum += digit;\n      arr[i] /= 10;\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgfuxvyjp: /tmp/tmpgfuxvyjp.cpp:35: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        if\
    \ (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        while\
    \ (arr[i] != 0) {\n            sum += arr[i] % 10;\n            arr[i] = arr[i]\
    \ / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ux8oh28: /tmp/tmp_ux8oh28.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int sum = 0;\n        long\
    \ num = arr[i];\n        if (num < 0) {\n            sum = sum + num;\n      \
    \      num = num * -1;\n        }\n        while (num > 0) {\n            int\
    \ rem = num % 10;\n            sum = sum + rem;\n            num = num / 10;\n\
    \        }\n        if (sum > 0) {\n            count = count + 1;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3411646p: /tmp/tmp3411646p.cpp:37: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long\
    \ currentNum = arr[i];\n        if (currentNum < 0) {\n            currentNum\
    \ = abs(currentNum);\n            sum = sum + currentNum % 10;\n            currentNum\
    \ = currentNum / 10;\n        }\n        while (currentNum != 0) {\n         \
    \   sum = sum + currentNum % 10;\n            currentNum = currentNum / 10;\n\
    \        }\n        if (sum > 0) {\n            result++;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphrw882co: /tmp/tmphrw882co.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n      \
    \      sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n        else\
    \ {\n            sum += -1 * arr[i] % 10;\n            arr[i] /= 10;\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb9x3gtzo: /tmp/tmpb9x3gtzo.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ int i = 0;\n  while (i < arr.size()) {\n    long num = arr[i];\n    if (num\
    \ < 0) {\n      num = -num;\n    }\n    long sum = 0;\n    while (num > 0) {\n\
    \      long digit = num % 10;\n      sum += digit;\n      num /= 10;\n    }\n\
    \    if (sum > 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpdtqbcn47: /tmp/tmpdtqbcn47.cpp:34: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long a=0;\n    for(int\
    \ i=0;i<arr.size();i++)\n    {\n        long m=abs(arr[i]);\n        long s=0;\n\
    \        while(m>0)\n        {\n            s+=m%10;\n            m=m/10;\n  \
    \      }\n        if(s>0)\n        {\n            a++;\n        }\n    }\n   \
    \ return a;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8ghjq7kq: /tmp/tmp8ghjq7kq.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
