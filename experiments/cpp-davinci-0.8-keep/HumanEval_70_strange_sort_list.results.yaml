language: cpp
name: HumanEval_70_strange_sort_list
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(i <\
    \ lst.size()-1){\n        if(i < lst.size()/2){\n            res.push_back(lst[i]);\n\
    \            i++;\n        }\n        else{\n            res.push_back(lst[lst.size()-i-1]);\n\
    \            i++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkh0fb96y: /tmp/tmpkh0fb96y.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ result;\n\tbool asc = true;\n\twhile (!lst.empty()) {\n\t\tint minimum = INT_MAX;\n\
    \t\tint minimum_i = 0;\n\t\tint maximum = INT_MIN;\n\t\tint maximum_i = 0;\n\t\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (asc) {\n\t\t\t\tif (lst[i]\
    \ < minimum) {\n\t\t\t\t\tminimum = lst[i];\n\t\t\t\t\tminimum_i = i;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (lst[i] > maximum) {\n\t\t\t\t\tmaximum =\
    \ lst[i];\n\t\t\t\t\tmaximum_i = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (asc) {\n\
    \t\t\tresult.push_back(minimum);\n\t\t\tlst.erase(lst.begin() + minimum_i);\n\t\
    \t}\n\t\telse {\n\t\t\tresult.push_back(maximum);\n\t\t\tlst.erase(lst.begin()\
    \ + maximum_i);\n\t\t}\n\t\tasc = !asc;\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    int mn=INT_MAX,i;\n    std::vector<long>v;\n    for(i=0;i<n;i++)\n\
    \    {\n        mn=min(mn,lst[i]);\n    }\n    v.push_back(mn);\n    lst.erase(lst.begin()+i);\n\
    \    mn=INT_MAX;\n    for(int i=0;i<n;i++)\n    {\n        mn=max(mn,lst[i]);\n\
    \    }\n    v.push_back(mn);\n    lst.erase(lst.begin()+i);\n    return v;\n\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptzfdhwdt.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptzfdhwdt.cpp:16:12: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   16 |         mn=min(mn,lst[i]);\n\
    \      |            ^~~\n      |            std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptzfdhwdt.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmptzfdhwdt.cpp:23:12: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   23 |         mn=max(mn,lst[i]);\n      |            ^~~\n      |         \
    \   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmptzfdhwdt.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660119265
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  auto odd\
    \ = lst.begin();\n  auto even = lst.begin();\n  std::vector<long> ret;\n  if (lst.size()\
    \ == 0) return ret;\n  if (lst.size() % 2 == 0) even++;\n  std::sort(lst.begin(),\
    \ lst.end());\n  while (odd != lst.end()) {\n    ret.push_back(*odd);\n    odd\
    \ += 2;\n  }\n  while (even != lst.end()) {\n    ret.push_back(*even);\n    even\
    \ += 2;\n  }\n  return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ answer = {};\n  std::vector<long> temp = lst;\n  std::sort(temp.begin(), temp.end());\n\
    \  while(temp.size()>0){\n    answer.push_back(temp[0]);\n    temp.erase(temp.begin());\n\
    \    if(temp.size()>0){\n      answer.push_back(temp[temp.size()-1]);\n      temp.erase(temp.end()-1);\n\
    \    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ res;\n\tint i=0;\n\twhile(lst.size()>0){\n\t\tint min_num=*min_element(lst.begin(),lst.end());\n\
    \t\tint max_num=*max_element(lst.begin(),lst.end());\n\t\tif(i%2==0){\n\t\t\t\
    res.push_back(min_num);\n\t\t\tlst.erase(find(lst.begin(),lst.end(),min_num));\n\
    \t\t}\n\t\telse{\n\t\t\tres.push_back(max_num);\n\t\t\tlst.erase(find(lst.begin(),lst.end(),max_num));\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Please\
    \ do not use any sorting algorithms.\n    std::vector<long>::iterator itr;\n \
    \   std::vector<long>::iterator itr1;\n    std::vector<long>::iterator itr2;\n\
    \    std::vector<long>::iterator itr3;\n    std::vector<long>::iterator itr4;\n\
    \    std::vector<long>::iterator itr5;\n    std::vector<long>::iterator itr6;\n\
    \    std::vector<long>::iterator itr7;\n    int i=0;\n    int j=lst.size()-1;\n\
    \    std::vector<long>::iterator itr8;\n    for(itr=lst.begin();itr!=lst.end();itr++)\n\
    \    {\n        if(i<j)\n        {\n            itr1=itr;\n            itr2=lst.begin()+j;\n\
    \            std::iter_swap(itr1,itr2);\n            // i++;\n            j--;\n\
    \        }\n        if(i==j)\n        {\n            j--;\n        }\n       \
    \ i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr3=lst.begin();itr3!=lst.end();itr3++)\n\
    \    {\n        if(i<j)\n        {\n            itr4=itr3;\n            itr5=lst.begin()+j;\n\
    \            std::iter_swap(itr4,itr5);\n            i++;\n            j--;\n\
    \        }\n        if(i==j)\n        {\n            j--;\n        }\n       \
    \ i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr6=lst.begin();itr6!=lst.end();itr6++)\n\
    \    {\n        if(i<j)\n        {\n            itr7=itr6;\n            itr8=lst.begin()+j;\n\
    \            std::iter_swap(itr7,itr8);\n\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0yplmw79.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0yplmw79.cpp:68:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   68 | int main() {\n      |     \
    \       ^\n/tmp/tmp0yplmw79.cpp:79:1: error: expected \u2018}\u2019 at end of\
    \ input\n   79 | }\n      | ^\n/tmp/tmp0yplmw79.cpp:60:5: note: to match this\
    \ \u2018{\u2019\n   60 |     {\n      |     ^\n/tmp/tmp0yplmw79.cpp:79:1: error:\
    \ expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp0yplmw79.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp0yplmw79.cpp:79:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   79 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    // if the list length is less than 2 or\n    // the list is a list\
    \ of identical elements,\n    // return the same list.\n    if (lst.size() < 2\
    \ || std::all_of(lst.begin(), lst.end(), [lst](int i) { return i == lst[0]; }))\n\
    \        return lst;\n    // while the list is not empty\n    while (!lst.empty())\
    \ {\n        // identify the min and max value of the remaining list\n       \
    \ long min = *std::min_element(lst.begin(), lst.end());\n        long max = *std::max_element(lst.begin(),\
    \ lst.end());\n        // add the min value to the result\n        result.push_back(min);\n\
    \        // remove the min value from the list\n        lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n        // if the list is empty, exit the loop\n\
    \        if (lst.empty())\n            break;\n        // add the max value to\
    \ the result\n        result.push_back(max);\n        // remove the max value\
    \ from the list\n        lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0gk0vxep: /tmp/tmp0gk0vxep.cpp:45: int main(): Assertion `candidate((std::vector<long>({0,
    2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2}))''
    failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ < 2) return lst;\n    std::vector<long> res;\n    int i = 0;\n    for (int j\
    \ = lst.size() - 1; i <= j; ++i, --j) {\n        res.push_back(lst[i]);\n    \
    \    if (i == j) break;\n        res.push_back(lst[j]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8fgn2x0i: /tmp/tmp8fgn2x0i.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) return result;\n  long smallest, largest;\n\
    \  while (lst.size() > 0) {\n    auto it = std::min_element(lst.begin(), lst.end());\n\
    \    smallest = *it;\n    lst.erase(it);\n    if (lst.size() > 0) {\n      it\
    \ = std::max_element(lst.begin(), lst.end());\n      largest = *it;\n      lst.erase(it);\n\
    \    }\n    result.push_back(smallest);\n    if (lst.size() > 0) result.push_back(largest);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmptq0yy2kk: /tmp/tmptq0yy2kk.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  sort(lst.begin(), lst.end());\n  int size =\
    \ lst.size();\n  int mid = size / 2;\n  std::vector<long> ret;\n  std::vector<long>::iterator\
    \ itr = lst.begin();\n  std::vector<long>::iterator itr1 = lst.begin() + mid;\n\
    \  while (itr != lst.begin() + mid && itr1 != lst.end()) {\n    ret.push_back(*itr);\n\
    \    ret.push_back(*itr1);\n    itr++;\n    itr1++;\n  }\n  if (size % 2 == 1)\
    \ {\n    ret.push_back(*itr);\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp378r_xb6: /tmp/tmp378r_xb6.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return lst;\n  std::vector<long> result;\n  int left = 0;\n  int right\
    \ = lst.size() - 1;\n  while (left <= right) {\n    result.push_back(lst[left]);\n\
    \    if (left != right) result.push_back(lst[right]);\n    left++;\n    right--;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpto8dnlx2: /tmp/tmpto8dnlx2.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            res.push_back(lst[i / 2]);\n\
    \        } else {\n            res.push_back(lst[lst.size() - i / 2 - 1]);\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 0) {\n            result.push_back(lst[i / 2]);\n        } else {\n        \
    \    result.push_back(lst[lst.size() - 1 - i / 2]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  long min = *std::min_element(lst.begin(), lst.end());\n\
    \  long max = *std::max_element(lst.begin(), lst.end());\n  std::vector<long>\
    \ result = {min};\n  lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n\
    \  while (lst.size() > 0) {\n    result.push_back(max);\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n    if (lst.size() == 0) {\n      break;\n   \
    \ }\n    result.push_back(min);\n    lst.erase(std::remove(lst.begin(), lst.end(),\
    \ min), lst.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int n = lst.size();\n  if (n % 2 != 0) {\n    result.push_back(lst[0]);\n\
    \    int p1 = 1;\n    int p2 = n - 1;\n    while (p1 <= p2) {\n      result.push_back(lst[p2]);\n\
    \      if (p1 == p2) {\n        break;\n      }\n      result.push_back(lst[p1]);\n\
    \      p1++;\n      p2--;\n    }\n  } else {\n    int p1 = 0;\n    int p2 = n\
    \ - 1;\n    while (p1 <= p2) {\n      result.push_back(lst[p2]);\n      if (p1\
    \ == p2) {\n        break;\n      }\n      result.push_back(lst[p1]);\n      p1++;\n\
    \      p2--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuul9gjqf: /tmp/tmpuul9gjqf.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    result.push_back(lst[0]);\n    lst.erase(lst.begin());\n  \
    \  while (lst.size() > 0) {\n        long max = *max_element(lst.begin(), lst.end());\n\
    \        long min = *min_element(lst.begin(), lst.end());\n        result.push_back(max);\n\
    \        lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n   \
    \     result.push_back(min);\n        lst.erase(std::remove(lst.begin(), lst.end(),\
    \ min), lst.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2rn2lou: /tmp/tmpn2rn2lou.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119265
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ lstSorted = lst;\n  std::sort(lstSorted.begin(), lstSorted.end());\n  std::vector<long>\
    \ answer;\n  int first = 0;\n  int last = lstSorted.size() - 1;\n  while (first\
    \ <= last) {\n    answer.push_back(lstSorted[first]);\n    first++;\n    if (first\
    \ <= last) {\n      answer.push_back(lstSorted[last]);\n      last--;\n    }\n\
    \  }\n  return answer;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ % 2 == 0) {\n    for (int i = 0; i < lst.size(); i += 2) {\n      int index_min\
    \ = i;\n      int index_max = i + 1;\n      for (int j = i; j < lst.size(); j++)\
    \ {\n        if (lst[j] < lst[index_min])\n          index_min = j;\n        if\
    \ (lst[j] > lst[index_max])\n          index_max = j;\n      }\n      std::swap(lst[i],\
    \ lst[index_min]);\n      std::swap(lst[i + 1], lst[index_max]);\n    }\n  } else\
    \ {\n    for (int i = 0; i < lst.size() - 1; i += 2) {\n      int index_min =\
    \ i;\n      int index_max = i + 1;\n      for (int j = i; j < lst.size(); j++)\
    \ {\n        if (lst[j] < lst[index_min])\n          index_min = j;\n        if\
    \ (lst[j] > lst[index_max])\n          index_max = j;\n      }\n      std::swap(lst[i],\
    \ lst[index_min]);\n      std::swap(lst[i + 1], lst[index_max]);\n    }\n  }\n\
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7xa9_z43: /tmp/tmp7xa9_z43.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ even;\n    std::vector<long> odd;\n    std::vector<long> sorted;\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            even.push_back(lst[i]);\n        }\
    \ else {\n            odd.push_back(lst[i]);\n        }\n    }\n    std::sort(even.begin(),\
    \ even.end());\n    std::sort(odd.begin(), odd.end());\n    std::reverse(odd.begin(),\
    \ odd.end());\n    sorted.insert(sorted.end(), even.begin(), even.end());\n  \
    \  sorted.insert(sorted.end(), odd.begin(), odd.end());\n    return sorted;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmppnhwcne7: /tmp/tmppnhwcne7.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> result;\n  auto min_max =\
    \ std::minmax_element(lst.begin(), lst.end());\n  auto min = *min_max.first;\n\
    \  auto max = *min_max.second;\n  auto it = lst.begin();\n  result.push_back(min);\n\
    \  lst.erase(std::find(lst.begin(), lst.end(), min));\n  result.push_back(max);\n\
    \  lst.erase(std::find(lst.begin(), lst.end(), max));\n  while (lst.size() > 0)\
    \ {\n    min_max = std::minmax_element(lst.begin(), lst.end());\n    min = *min_max.first;\n\
    \    max = *min_max.second;\n    result.push_back(min);\n    lst.erase(std::find(lst.begin(),\
    \ lst.end(), min));\n    result.push_back(max);\n    lst.erase(std::find(lst.begin(),\
    \ lst.end(), max));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> res;\n  int flag = 1;\n \
    \ while (lst.size() > 0) {\n    std::vector<long>::iterator min = std::min_element(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator max = std::max_element(lst.begin(),\
    \ lst.end());\n    res.push_back(*min);\n    lst.erase(min);\n    if (flag % 2\
    \ == 0) {\n      res.push_back(*max);\n      lst.erase(max);\n    }\n    flag++;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119265
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()==0){\n\
    \        return lst;\n    }\n    else{\n        std::vector<long> v;\n       \
    \ std::sort(lst.begin(),lst.end());\n        std::vector<long>::iterator lst_it;\n\
    \        std::cout<<lst.size()<<std::endl;\n        for(int i=0;i<lst.size();i++){\n\
    \            if(i%2==0){\n                v.push_back(lst[i/2]);\n           \
    \ }\n            else{\n                v.push_back(lst[lst.size()-(i/2)-1]);\n\
    \            }\n        }\n        return v;\n    }\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: '4

    5

    5

    6

    4

    8

    8

    1

    '
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  auto list\
    \ = lst;\n  auto len = list.size();\n  if(len <= 1) {\n    return list;\n  }\n\
    \  auto half = len/2;\n  std::sort(list.begin(), list.end());\n  std::vector<long>\
    \ ret(len);\n  int i, j;\n  j = half;\n  int jump = 1;\n  for(i = 0; i < len;\
    \ ++i) {\n    if(i % 2 == 0) {\n      ret[i] = list[j++];\n    } else {\n    \
    \  ret[i] = list[--j];\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmppabiy6zz: /tmp/tmppabiy6zz.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_list = lst;\n  std::sort(sorted_list.begin(), sorted_list.end());\n \
    \ std::vector<long> result;\n  for (auto i = 0; i < sorted_list.size(); i++) {\n\
    \    long smallest = sorted_list[i];\n    auto itr = find(lst.begin(), lst.end(),\
    \ smallest);\n    lst.erase(itr);\n    result.push_back(smallest);\n    if (lst.size()\
    \ > 0) {\n      long largest = *max_element(lst.begin(), lst.end());\n      itr\
    \ = find(lst.begin(), lst.end(), largest);\n      lst.erase(itr);\n      result.push_back(largest);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // use std::sort\n\
    \  std::sort(lst.begin(), lst.end());\n  // create a new vector\n  std::vector<long>\
    \ result;\n  // reverse iterate and push front\n  for (auto it = lst.rbegin();\
    \ it != lst.rend(); ++it) {\n    result.push_back(*it);\n  }\n  // reverse sort\
    \ again\n  std::sort(result.begin(), result.end());\n  // push back using the\
    \ first iterator\n  for (auto it = lst.begin(); it != lst.end(); ++it) {\n   \
    \ result.push_back(*it);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmph5ayzo6d: /tmp/tmph5ayzo6d.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ r;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0)\n\t\t\tr.push_back(lst[i]);\n\t\telse\n\t\t\tr.insert(r.begin(),\
    \ lst[i]);\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmplrsx3hoj: /tmp/tmplrsx3hoj.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int min_idx = 0;\n    int max_idx = lst.size() - 1;\n    while\
    \ (min_idx <= max_idx) {\n        if (min_idx == max_idx) {\n            result.push_back(lst[min_idx]);\n\
    \            break;\n        }\n        result.push_back(lst[min_idx]);\n    \
    \    result.push_back(lst[max_idx]);\n        min_idx++;\n        max_idx--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> new_lst;\n  auto x = std::min_element(lst.begin(),\
    \ lst.end());\n  new_lst.push_back(*x);\n  lst.erase(x);\n  while (!lst.empty())\
    \ {\n    auto x = std::max_element(lst.begin(), lst.end());\n    new_lst.push_back(*x);\n\
    \    lst.erase(x);\n    if (lst.empty()) {\n      break;\n    }\n    x = std::min_element(lst.begin(),\
    \ lst.end());\n    new_lst.push_back(*x);\n    lst.erase(x);\n  }\n  return new_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int length\
    \ = lst.size();\n  if (length == 0) {\n    return lst;\n  }\n  std::vector<long>\
    \ first;\n  std::vector<long> second;\n  long min = *std::min_element(lst.begin(),\
    \ lst.end());\n  long max = *std::max_element(lst.begin(), lst.end());\n  first.push_back(min);\n\
    \  lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n  if (length\
    \ % 2 == 0) {\n    length--;\n  }\n  while (length > 1) {\n    length -= 2;\n\
    \    first.push_back(max);\n    lst.erase(std::remove(lst.begin(), lst.end(),\
    \ max), lst.end());\n    if (length == 0) {\n      break;\n    }\n    min = *std::min_element(lst.begin(),\
    \ lst.end());\n    first.push_back(min);\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n    if (length == 0) {\n      break;\n    }\n\
    \    max = *std::max_element(lst.begin(), lst.end());\n    second.push_back(max);\n\
    \    lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n    if (length\
    \ == 0) {\n      break;\n    }\n    min = *std::min_element(lst.begin(), lst.end());\n\
    \    second.push_back(min);\n    lst.erase(std::remove(lst.begin(), lst.end(),\
    \ min), lst.end());\n  }\n  first.insert(first.end(), second.begin(), second.end());\n\
    \  return first;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpucgal8m2: /tmp/tmpucgal8m2.cpp:52: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ret;\n  std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n\
    \  std::priority_queue<long, std::vector<long>, std::less<long>> max_heap;\n \
    \ std::stack<long> current_heap;\n  if (lst.size() == 0) {\n    return lst;\n\
    \  } else if (lst.size() == 1) {\n    return lst;\n  } else {\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n      if (min_heap.size() == 0) {\n        min_heap.push(lst[i]);\n\
    \      } else if (max_heap.size() == 0) {\n        max_heap.push(lst[i]);\n  \
    \    } else {\n        if (lst[i] > max_heap.top()) {\n          max_heap.push(lst[i]);\n\
    \        } else if (lst[i] < min_heap.top()) {\n          min_heap.push(lst[i]);\n\
    \        } else {\n          if (current_heap.size() == 0) {\n            current_heap.push(lst[i]);\n\
    \          } else {\n            if (current_heap.top() < lst[i]) {\n        \
    \      current_heap.push(lst[i]);\n            } else {\n              long to_push\
    \ = current_heap.top();\n              current_heap.pop();\n              current_heap.push(lst[i]);\n\
    \              current_heap.push(to_push);\n            }\n          }\n     \
    \   }\n      }\n    }\n    ret.push_back(min_heap.top());\n    min_heap.pop();\n\
    \    while (current_heap.size() > 0) {\n      ret.push_back(current_heap.top());\n\
    \      current_heap.pop();\n    }\n    ret.push_back(max_heap.top());\n    max_heap.pop();\n\
    \    while (min_heap\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprhccr9ky.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprhccr9ky.cpp:54:12: error: could not convert \u2018min_heap\u2019\
    \ from \u2018std::priority_queue<long int, std::vector<long int>, std::greater<long\
    \ int> >\u2019 to \u2018bool\u2019\n   54 |     while (min_heap\n      |     \
    \       ^~~~~~~~\n      |            |\n      |            std::priority_queue<long\
    \ int, std::vector<long int>, std::greater<long int> >\n/tmp/tmprhccr9ky.cpp:54:20:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |     while\
    \ (min_heap\n      |           ~        ^\n      |                    )\n   55\
    \ | }\n      | ~                   \n/tmp/tmprhccr9ky.cpp:55:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmprhccr9ky.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmprhccr9ky.cpp:67:1: error:\
    \ expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmprhccr9ky.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmprhccr9ky.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ans;\n  int n = lst.size();\n  if(n == 0) {\n    return ans;\n  }\n  if(n ==\
    \ 1) {\n    ans.push_back(lst[0]);\n    return ans;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  ans.push_back(lst[0]);\n  ans.push_back(lst[n-1]);\n  int curr\
    \ = 1;\n  while(curr < n - 1) {\n    ans.push_back(lst[curr]);\n    ans.push_back(lst[n-curr-1]);\n\
    \    curr++;\n  }\n  if(n % 2 == 1) {\n    ans.push_back(lst[curr]);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmprq1knx98: /tmp/tmprq1knx98.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  if(lst.size() == 0)\n    return res;\n  std::sort(lst.begin(), lst.end());\n\
    \  auto end = lst.end();\n  std::vector<long>::iterator i, j;\n  while(!lst.empty())\
    \ {\n    i = lst.begin();\n    res.push_back(*i);\n    lst.erase(i);\n    if(lst.empty())\n\
    \      break;\n    j = lst.end() - 1;\n    res.push_back(*j);\n    lst.erase(j);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    bool max_flag\
    \ = true;\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (max_flag\
    \ == true) {\n            auto max_iter = std::max_element(lst.begin() + i, lst.end());\n\
    \            std::iter_swap(lst.begin() + i, max_iter);\n        } else {\n  \
    \          auto min_iter = std::min_element(lst.begin() + i, lst.end());\n   \
    \         std::iter_swap(lst.begin() + i, min_iter);\n        }\n        max_flag\
    \ = !max_flag;\n    }\n    return lst;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxamu8toj: /tmp/tmpxamu8toj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::vector<long> temp = lst;\n  std::sort(temp.begin(), temp.end());\n\
    \  long i = 0;\n  long j = temp.size() - 1;\n  while (i <= j) {\n    result.push_back(temp[i]);\n\
    \    i++;\n    if (i <= j) {\n      result.push_back(temp[j]);\n      j--;\n \
    \   }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ < 2) {\n        return lst;\n    }\n    std::vector<long> res;\n    int n =\
    \ lst.size();\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ int start = 0;\n    while (res.size() < n) {\n        long min = *std::min_element(lst.begin()\
    \ + start, lst.end());\n        res.push_back(min);\n        auto it = std::find(lst.begin(),\
    \ lst.end(), min);\n        int idx = std::distance(lst.begin(), it);\n      \
    \  lst.erase(lst.begin() + idx);\n        if (lst.size() > 0) {\n            long\
    \ max = *std::max_element(lst.begin(), lst.end());\n            res.push_back(max);\n\
    \            it = std::find(lst.begin(), lst.end(), max);\n            idx = std::distance(lst.begin(),\
    \ it);\n            lst.erase(lst.begin() + idx);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  std::sort(lst.begin(), lst.end());\n  std::vector<long>::iterator left\
    \ = lst.begin();\n  std::vector<long>::iterator right = lst.end() - 1;\n  while\
    \ (left <= right) {\n    res.push_back(*left);\n    left++;\n    if (left > right)\
    \ break;\n    res.push_back(*right);\n    right--;\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int size\
    \ = lst.size();\n    std::vector<long> res;\n    if(size == 0){\n        return\
    \ res;\n    }\n    if(size == 1){\n        res.push_back(lst[0]);\n        return\
    \ res;\n    }\n    std::sort(lst.begin(), lst.end());\n    int c = 0;\n    for(int\
    \ i = 0; i < size; i += 2){\n        res.push_back(lst[i]);\n        c++;\n  \
    \  }\n    for(int i = size - 1; i >= c; i -= 2){\n        res.push_back(lst[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2l6bjt1m: /tmp/tmp2l6bjt1m.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code here\n    std::vector<long> v = lst;\n    std::sort(v.begin(), v.end());\n\
    \    std::vector<long> result;\n    int min = 0;\n    int max = v.size() - 1;\n\
    \    for (int i = 0; i < v.size(); i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(v[min]);\n            min++;\n        } else {\n      \
    \      result.push_back(v[max]);\n            max--;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ solution_list;\n    int list_size = lst.size();\n    if (list_size == 0) {\n\
    \        return lst;\n    }\n    int min_index = 0;\n    int max_index = 0;\n\
    \    int min_value = lst[0];\n    int max_value = lst[0];\n    for (int i = 0;\
    \ i < list_size; i++) {\n        if (lst[i] < min_value) {\n            min_value\
    \ = lst[i];\n            min_index = i;\n        }\n        if (lst[i] > max_value)\
    \ {\n            max_value = lst[i];\n            max_index = i;\n        }\n\
    \    }\n    solution_list.push_back(min_value);\n    lst.erase(lst.begin() + min_index);\n\
    \    list_size--;\n    while (list_size > 0) {\n        min_value = lst[0];\n\
    \        min_index = 0;\n        max_value = lst[0];\n        max_index = 0;\n\
    \        for (int i = 0; i < list_size; i++) {\n            if (lst[i] < min_value)\
    \ {\n                min_value = lst[i];\n                min_index = i;\n   \
    \         }\n            if (lst[i] > max_value) {\n                max_value\
    \ = lst[i];\n                max_index = i;\n            }\n        }\n      \
    \  if (max_value == min_value) {\n            solution_list.push_back(max_value);\n\
    \            lst.erase(lst.begin() + max_index);\n            list_size--;\n \
    \       } else {\n            solution_list.push_back(max_value);\n          \
    \  lst.erase(lst.begin() + max_index);\n            list_size--;\n           \
    \ if (list_size == 0) {\n                break;\n            }\n            solution_list.push_back(min_value);\n\
    \            lst.erase(lst.begin() + min_index);\n           \n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpagy1bk0w.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpagy1bk0w.cpp:63:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   63 | int main() {\n      |     \
    \       ^\n/tmp/tmpagy1bk0w.cpp:74:1: error: expected \u2018}\u2019 at end of\
    \ input\n   74 | }\n      | ^\n/tmp/tmpagy1bk0w.cpp:33:27: note: to match this\
    \ \u2018{\u2019\n   33 |     while (list_size > 0) {\n      |                \
    \           ^\n/tmp/tmpagy1bk0w.cpp:74:1: error: expected \u2018}\u2019 at end\
    \ of input\n   74 | }\n      | ^\n/tmp/tmpagy1bk0w.cpp:10:60: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpagy1bk0w.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119266
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  long temp = 0;\n  int i = 0;\n  int j = 0;\n  while(j < lst.size())\
    \ {\n    temp = lst[i];\n    lst.erase(lst.begin() + i);\n    if(j % 2 == 0) {\n\
    \      result.push_back(temp);\n    } else {\n      result.insert(result.begin(),\
    \ temp);\n    }\n    if(lst.size() == 0) {\n      break;\n    }\n    temp = *std::max_element(lst.begin(),\
    \ lst.end());\n    i = std::distance(lst.begin(), std::find(lst.begin(), lst.end(),\
    \ temp));\n    lst.erase(lst.begin() + i);\n    if(j % 2 == 0) {\n      result.push_back(temp);\n\
    \    } else {\n      result.insert(result.begin(), temp);\n    }\n    j++;\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ v;\n    std::sort(lst.begin(), lst.end());\n    while(lst.size() != 0) {\n \
    \       v.push_back(lst[0]);\n        lst.erase(lst.begin());\n        if(lst.size()\
    \ == 0) break;\n        v.push_back(lst[lst.size()-1]);\n        lst.erase(lst.end()-1);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ == 0) return lst;\n\tif (lst.size() == 1) return lst;\n\tstd::vector<long> temp(lst.size());\n\
    \tstd::sort(lst.begin(), lst.end());\n\tint index = 0;\n\tint min_index = 0;\n\
    \tint max_index = lst.size() - 1;\n\twhile (index <= max_index) {\n\t\ttemp[index]\
    \ = lst[min_index];\n\t\tmin_index++;\n\t\tindex++;\n\t\tif (index <= max_index)\
    \ {\n\t\t\ttemp[index] = lst[max_index];\n\t\t\tmax_index--;\n\t\t\tindex++;\n\
    \t\t}\n\t}\n\treturn temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfen7_o4q: /tmp/tmpfen7_o4q.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) return result;\n  if (lst.size() == 1) return\
    \ lst;\n  bool asc = true;\n  for (auto it = lst.begin(); it != lst.end(); it++)\
    \ {\n    long small = *min_element(it, lst.end());\n    long big = *max_element(it,\
    \ lst.end());\n    if (asc) result.push_back(small);\n    else result.push_back(big);\n\
    \    asc = !asc;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpg685beq1: /tmp/tmpg685beq1.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119267
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if(lst.size()==0) return result;\n    int index=0;\n    while(result.size()<lst.size()){\n\
    \        int min_ind=min_element(lst.begin()+index,lst.end())-lst.begin();\n \
    \       result.push_back(lst[min_ind]);\n        lst.erase(lst.begin()+min_ind);\n\
    \        if(lst.size()==0) break;\n        int max_ind=max_element(lst.begin()+index,lst.end())-lst.begin();\n\
    \        result.push_back(lst[max_ind]);\n        lst.erase(lst.begin()+max_ind);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpng7ed09u: /tmp/tmpng7ed09u.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> result = {lst[0]};\n  std::vector<long>\
    \ remaining;\n  for (auto x = lst.begin() + 1; x != lst.end(); x++) {\n    remaining.push_back(*x);\n\
    \  }\n  bool min_next = true;\n  while (remaining.size() > 0) {\n    if (min_next)\
    \ {\n      result.push_back(*std::min_element(remaining.begin(), remaining.end()));\n\
    \    } else {\n      result.push_back(*std::max_element(remaining.begin(), remaining.end()));\n\
    \    }\n    auto pos = std::find(remaining.begin(), remaining.end(), result.back());\n\
    \    remaining.erase(pos);\n    min_next = !min_next;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf141oa3m: /tmp/tmpf141oa3m.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119266
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ == 0) return lst;\n\tstd::vector<long> lst2;\n\tif (lst.size() % 2 == 0) {\n\
    \t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\t\
    lst2.push_back(min(lst));\n\t\t\t\tlst.erase(std::remove(lst.begin(), lst.end(),\
    \ min(lst)), lst.end());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlst2.push_back(max(lst));\n\
    \t\t\t\tlst.erase(std::remove(lst.begin(), lst.end(), max(lst)), lst.end());\n\
    \t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tlst2.push_back(min(lst));\n\t\tlst.erase(std::remove(lst.begin(),\
    \ lst.end(), min(lst)), lst.end());\n\t\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tlst2.push_back(min(lst));\n\t\t\t\tlst.erase(std::remove(lst.begin(),\
    \ lst.end(), min(lst)), lst.end());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlst2.push_back(max(lst));\n\
    \t\t\t\tlst.erase(std::remove(lst.begin(), lst.end(), max(lst)), lst.end());\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hhjh4i7.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7hhjh4i7.cpp:16:27: error: no matching function for call\
    \ to \u2018min(std::vector<long int>&)\u2019\n   16 |     lst2.push_back(min(lst));\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7hhjh4i7.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7hhjh4i7.cpp:16:27: note: \
    \  candidate expects 2 arguments, 1 provided\n   16 |     lst2.push_back(min(lst));\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7hhjh4i7.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7hhjh4i7.cpp:16:27:\
    \ note:   candidate expects 3 arguments, 1 provided\n   16 |     lst2.push_back(min(lst));\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7hhjh4i7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(i"
  stdout: ''
  timestamp: 1660119268
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i < j) {\n        res.push_back(lst[i]);\n        res.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i == j) {\n        res.push_back(lst[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119268
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ve;\n    std::sort(lst.begin(), lst.end());\n    int s = lst.size();\n    if(s%2\
    \ == 0) {\n        for(int i = 0; i < s/2; i++) {\n            ve.push_back(lst[i]);\n\
    \            ve.push_back(lst[s - i - 1]);\n        }\n    } else {\n        for(int\
    \ i = 0; i < s/2; i++) {\n            ve.push_back(lst[i]);\n            ve.push_back(lst[s\
    \ - i - 1]);\n        }\n        ve.push_back(lst[s/2]);\n    }\n    return ve;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119268
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int index1 = 0;\n    int\
    \ index2 = lst.size() - 1;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   if (i % 2 == 0) {\n            result.push_back(lst[index1]);\n          \
    \  index1++;\n        } else {\n            result.push_back(lst[index2]);\n \
    \           index2--;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119268
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ rtn;\n    if(lst.size()==0) {\n        return rtn;\n    }\n    int min = 0;\n\
    \    int max = 0;\n    for(int i=0; i<lst.size(); ++i) {\n        if(lst[i]<lst[min])\
    \ min = i;\n        if(lst[i]>lst[max]) max = i;\n    }\n    int index = 0;\n\
    \    int i = min;\n    do {\n        rtn.push_back(lst[i]);\n        lst[i] =\
    \ NULL;\n        if(lst[index]==NULL) {\n            index++;\n        }\n   \
    \     if(lst[index]<lst[min]) min = index;\n        if(lst[index]>lst[max]) max\
    \ = index;\n        i = (i==min)?max:min;\n    } while(i!=index);\n    return\
    \ rtn;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpa3j0vn5q: /tmp/tmpa3j0vn5q.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    std::priority_queue<long> pq;\n    for(auto x: lst) pq.push(x);\n\
    \    int k = 0;\n    while(!pq.empty()){\n        long t = pq.top();\n       \
    \ pq.pop();\n        ans.push_back(t);\n        if(k == 0 && !pq.empty()){\n \
    \           long t1 = pq.top();\n            pq.pop();\n            ans.push_back(t1);\n\
    \            k = 1;\n        }else if(k == 1 && !pq.empty()){\n            long\
    \ t2 = pq.top();\n            pq.pop();\n            ans.push_back(t2);\n    \
    \        k = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiyyynxfc: /tmp/tmpiyyynxfc.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int start_idx\
    \ = 0;\n  int end_idx = lst.size() - 1;\n  int nums_processed = 0;\n  int max_idx;\n\
    \  long max_val;\n  std::vector<long> ret_lst;\n  // Iterate until all nums in\
    \ list are processed.\n  while (nums_processed < lst.size()) {\n    max_idx =\
    \ start_idx;\n    max_val = lst[start_idx];\n    // Find maximum value in range\
    \ of indices.\n    for (int i = start_idx; i <= end_idx; i++) {\n      if (lst[i]\
    \ > max_val) {\n        max_val = lst[i];\n        max_idx = i;\n      }\n   \
    \ }\n    // Add minimum value.\n    ret_lst.push_back(lst[start_idx]);\n    nums_processed++;\n\
    \    // Add maximum value.\n    ret_lst.push_back(lst[max_idx]);\n    nums_processed++;\n\
    \    // Advance indices.\n    start_idx++;\n    end_idx--;\n  }\n  return ret_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkptuw0q3: /tmp/tmpkptuw0q3.cpp:43: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int max;\n\
    \    int min;\n    int count = 0;\n    std::vector<long> res;\n    while(!lst.empty()){\n\
    \        max = *std::max_element(lst.begin(), lst.end());\n        min = *std::min_element(lst.begin(),\
    \ lst.end());\n        if(count % 2 == 0){\n            res.push_back(min);\n\
    \            lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n\
    \        }else{\n            res.push_back(max);\n            lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n        }\n        count++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgk7tocli: /tmp/tmpgk7tocli.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // remove\
    \ pass and implement function\n  std::vector<long> ans;\n  long i=0,j=lst.size()-1;\n\
    \  bool flag=false;\n  while(1){\n    if(i==j){\n      ans.push_back(lst[i]);\n\
    \      break;\n    }\n    if(!flag){\n      ans.push_back(lst[i]);\n      flag=true;\n\
    \      i++;\n    }\n    else{\n      ans.push_back(lst[j]);\n      flag=false;\n\
    \      j--;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo7qon9b4: /tmp/tmpo7qon9b4.cpp:38: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ even;\n\tstd::vector<long> odd;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\
    \tif (i % 2 == 0) {\n\t\t\teven.push_back(lst[i]);\n\t\t}\n\t\telse {\n\t\t\t\
    odd.push_back(lst[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < even.size(); i++) {\n\
    \t\tif (i == 0) {\n\t\t\tlst[i] = *std::min_element(even.begin(), even.end());\n\
    \t\t}\n\t\telse {\n\t\t\tlst[i] = *std::max_element(even.begin(), even.end());\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < odd.size(); i++) {\n\t\tif (i == 0) {\n\t\t\t\
    lst[i + even.size()] = *std::min_element(odd.begin(), odd.end());\n\t\t}\n\t\t\
    else {\n\t\t\tlst[i + even.size()] = *std::max_element(odd.begin(), odd.end());\n\
    \t\t}\n\t}\n\treturn lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc6vlg0g8: /tmp/tmpc6vlg0g8.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> ret;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  while (lst.size() > 0) {\n    ret.push_back(lst[i]);\n\
    \    lst.erase(lst.begin() + i);\n    if (lst.size() == 0) {\n      break;\n \
    \   }\n    if (i < 0) {\n      i = lst.size() - 1;\n    } else {\n      i = i\
    \ - 1;\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2vrv99g: /tmp/tmpn2vrv99g.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ <= 1) {\n    return lst;\n  }\n  std::vector<long> sorted_list(lst.size());\n\
    \  int size = lst.size();\n  int j = 0;\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    if (i % 2 == 0) {\n      sorted_list[j] = *std::min_element(lst.begin(),\
    \ lst.end());\n    } else {\n      sorted_list[j] = *std::max_element(lst.begin(),\
    \ lst.end());\n    }\n    lst.erase(std::remove(lst.begin(), lst.end(), sorted_list[j]),\
    \ lst.end());\n    j++;\n  }\n  return sorted_list;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsub61mpe: /tmp/tmpsub61mpe.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ temp;\n\tstd::vector<long>::iterator it;\n\tint count = lst.size();\n\tint isNegative\
    \ = 0;\n\tint isPositive = 0;\n\tint isZero = 0;\n\tif (count == 0)\n\t\treturn\
    \ temp;\n\tif (count == 1)\n\t\treturn lst;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tif (*it < 0)\n\t\t\tisNegative\
    \ = 1;\n\t\tif (*it > 0)\n\t\t\tisPositive = 1;\n\t\tif (*it == 0)\n\t\t\tisZero\
    \ = 1;\n\t}\n\tif (isNegative == 0 && isPositive == 0 && isZero == 1)\n\t\treturn\
    \ lst;\n\tif (isNegative == 0 && isPositive == 1 && isZero == 0) {\n\t\tint i\
    \ = 0;\n\t\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\t\tif (i < count)\
    \ {\n\t\t\t\ttemp.push_back(*it);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn temp;\n\
    \t}\n\tint i = 0;\n\tint j = count - 1;\n\tfor (int k = 0; k < count; k++) {\n\
    \t\tif (k % 2 == 0) {\n\t\t\ttemp.push_back(lst[i]);\n\t\t\ti++;\n\t\t}\n\t\t\
    else {\n\t\t\ttemp.push_back(lst[j]);\n\t\t\tj--;\n\t\t}\n\t}\n\treturn temp;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt3mp2apk: /tmp/tmpt3mp2apk.cpp:58: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// Your\
    \ code here...\n\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tif (lst.size()\
    \ <= 0)\n\t\treturn lst;\n\tint min = 0;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tif (lst[i] < lst[min])\n\t\t\tmin = i;\n\t}\n\tl1.push_back(lst[min]);\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i != min)\n\t\t\tl2.push_back(lst[i]);\n\
    \t}\n\tif (l2.size() > 0) {\n\t\tif (l2.size() % 2 == 0) {\n\t\t\t// l2[l2.size()\
    \ - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size() - 1] - l2[0];\n\
    \t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\t\telse {\n\t\t\t\
    // l2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size()\
    \ - 1] - l2[0];\n\t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\
    \t}\n\tl1.insert(l1.end(), l2.begin(), l2.end());\n\treturn l1;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz6qm33lh: /tmp/tmpz6qm33lh.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long length\
    \ = lst.size();\n    if (length == 0) {\n        return {};\n    }\n    sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> sorted_lst(length);\n    long i = 0;\n  \
    \  long j = length - 1;\n    long k = 0;\n    while (i <= j) {\n        sorted_lst[k]\
    \ = lst[i];\n        i++;\n        k++;\n        if (i <= j) {\n            sorted_lst[k]\
    \ = lst[j];\n            j--;\n            k++;\n        }\n    }\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  bool flag\
    \ = true;\n  std::vector<long> result;\n  while (lst.size() != 0) {\n    if (flag)\
    \ {\n      long min = std::min_element(lst.begin(), lst.end()) - lst.begin();\n\
    \      result.push_back(lst[min]);\n      lst.erase(lst.begin() + min);\n    }\
    \ else {\n      long max = std::max_element(lst.begin(), lst.end()) - lst.begin();\n\
    \      result.push_back(lst[max]);\n      lst.erase(lst.begin() + max);\n    }\n\
    \    flag = !flag;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119268
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ v;\n  if (lst.size() == 0)\n    return v;\n  v.push_back(lst[0]);\n  lst.erase(lst.begin());\n\
    \  // sort(lst.begin(), lst.end());\n  int i = 0;\n  while (lst.size() > 0) {\n\
    \    if (i % 2 == 0) {\n      long min = lst[0];\n      int minPos = 0;\n    \
    \  for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] < min) {\n     \
    \     min = lst[j];\n          minPos = j;\n        }\n      }\n      v.push_back(min);\n\
    \      lst.erase(lst.begin() + minPos);\n    } else {\n      long max = lst[0];\n\
    \      int maxPos = 0;\n      for (int j = 0; j < lst.size(); j++) {\n       \
    \ if (lst[j] > max) {\n          max = lst[j];\n          maxPos = j;\n      \
    \  }\n      }\n      v.push_back(max);\n      lst.erase(lst.begin() + maxPos);\n\
    \    }\n    i++;\n  }\n  return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvkwspkmz: /tmp/tmpvkwspkmz.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_lst(lst);\n  std::sort(sorted_lst.begin(), sorted_lst.end());\n  std::vector<long>\
    \ result(lst.size());\n  int low = 0;\n  int high = lst.size() - 1;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      result[i] = sorted_lst[low];\n\
    \      low++;\n    } else {\n      result[i] = sorted_lst[high];\n      high--;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ans;\n  if (lst.size() == 0) {\n    return ans;\n  }\n  int min_index = std::min_element(lst.begin(),\
    \ lst.end()) - lst.begin();\n  int max_index = std::max_element(lst.begin(), lst.end())\
    \ - lst.begin();\n  bool is_odd = false;\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    if (is_odd) {\n      ans.push_back(lst[max_index]);\n      max_index\
    \ = std::max_element(lst.begin(), lst.end()) - lst.begin();\n      if (max_index\
    \ == min_index) {\n        lst.erase(lst.begin() + max_index);\n        max_index\
    \ = std::max_element(lst.begin(), lst.end()) - lst.begin();\n      } else {\n\
    \        lst.erase(lst.begin() + max_index);\n      }\n    } else {\n      ans.push_back(lst[min_index]);\n\
    \      min_index = std::min_element(lst.begin(), lst.end()) - lst.begin();\n \
    \     if (min_index == max_index) {\n        lst.erase(lst.begin() + min_index);\n\
    \        min_index = std::min_element(lst.begin(), lst.end()) - lst.begin();\n\
    \      } else {\n        lst.erase(lst.begin() + min_index);\n      }\n    }\n\
    \    is_odd = !is_odd;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpaycjnh64: /tmp/tmpaycjnh64.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    for (auto i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            result.push_back(lst[i / 2]);\n\
    \        } else {\n            result.push_back(lst[lst.size() - 1 - i / 2]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ res;\n\tint n = lst.size();\n\tstd::sort(lst.begin(), lst.end());\n\tint count\
    \ = 0;\n\tbool is_first = true;\n\tint left_index = 0;\n\tint right_index = n\
    \ - 1;\n\twhile (count < n) {\n\t\tif (is_first) {\n\t\t\tres.push_back(lst[left_index]);\n\
    \t\t\tis_first = false;\n\t\t\tleft_index++;\n\t\t}\n\t\telse {\n\t\t\tres.push_back(lst[right_index]);\n\
    \t\t\tis_first = true;\n\t\t\tright_index--;\n\t\t}\n\t\tcount++;\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119268
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return lst;\n  std::vector<long> res;\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minq;\n  std::priority_queue<long, std::vector<long>, std::less<long>>\
    \ maxq;\n  for (auto a : lst) {\n    if (minq.size() == 0) {\n      minq.push(a);\n\
    \    } else if (minq.size() == maxq.size()) {\n      maxq.push(a);\n    } else\
    \ {\n      minq.push(a);\n    }\n  }\n  while (true) {\n    res.push_back(minq.top());\n\
    \    minq.pop();\n    if (maxq.size() == 0) break;\n    res.push_back(maxq.top());\n\
    \    maxq.pop();\n    if (minq.size() == 0) break;\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp95n4nmhu: /tmp/tmp95n4nmhu.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ <= 1) {\n\t\treturn lst;\n\t}\n\tstd::vector<long> res;\n\tlong first = 0;\n\
    \tlong last = lst.size() - 1;\n\tlong i = 1;\n\twhile (first <= last) {\n\t\t\
    res.push_back(lst[first]);\n\t\tif (first != last) {\n\t\t\tres.push_back(lst[last]);\n\
    \t\t}\n\t\tfirst++;\n\t\tlast--;\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpygd1a2ae: /tmp/tmpygd1a2ae.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    if(lst.size() == 0)\n        return ans;\n    else if(lst.size() ==\
    \ 1)\n        return lst;\n    long min = lst[0];\n    long minIndex = 0;\n  \
    \  long max = lst[0];\n    long maxIndex = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            maxIndex\
    \ = i;\n        }\n        if(lst[i] < min) {\n            min = lst[i];\n   \
    \         minIndex = i;\n        }\n    }\n    ans.push_back(min);\n    ans.push_back(max);\n\
    \    lst.erase(lst.begin() + maxIndex);\n    lst.erase(lst.begin() + minIndex);\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n       \
    \     min = lst[0];\n            minIndex = 0;\n            for(int j = 0; j <\
    \ lst.size(); j++) {\n                if(lst[j] < min) {\n                   \
    \ min = lst[j];\n                    minIndex = j;\n                }\n      \
    \      }\n            ans.push_back(min);\n            lst.erase(lst.begin() +\
    \ minIndex);\n        }\n        else {\n            max = lst[0];\n         \
    \   maxIndex = 0;\n            for(int j = 0; j < lst.size(); j++) {\n       \
    \         if(lst[j] > max) {\n                    max = lst[j];\n            \
    \        maxIndex = j;\n                }\n            }\n            ans.push_back(max);\n\
    \            lst.erase(lst.begin() + maxIndex);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxnurdstz: /tmp/tmpxnurdstz.cpp:64: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  int count = 0;\n  while (i < j) {\n    if (count % 2 == 0) {\n     \
    \ res.push_back(lst[i]);\n      i++;\n    } else {\n      res.push_back(lst[j]);\n\
    \      j--;\n    }\n    count++;\n  }\n  if (i == j) {\n    res.push_back(lst[i]);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n\n  std::vector<long> temp;\n  std::vector<long>\
    \ result;\n  temp = lst;\n  sort(temp.begin(), temp.end());\n  int i = 0;\n  while(lst.size()\
    \ > 1) {\n    result.push_back(temp[i]);\n    lst.erase(lst.begin() + i);\n  \
    \  temp = lst;\n    sort(temp.begin(), temp.end());\n    if (i % 2 == 0) {\n \
    \     i = 0;\n    } else {\n      i = lst.size() - 1;\n    }\n  }\n  result.push_back(lst[0]);\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi5mk4wlk: /tmp/tmpi5mk4wlk.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n\n    std::vector<long> ans = {min, max};\n  \
    \  while (lst.size() > 0) {\n        if (ans.size() % 2 == 0) {\n            min\
    \ = *std::min_element(lst.begin(), lst.end());\n            lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n            ans.push_back(min);\n        } else\
    \ {\n            max = *std::max_element(lst.begin(), lst.end());\n          \
    \  lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n         \
    \   ans.push_back(max);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbzh6df99: /tmp/tmpbzh6df99.cpp:40: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  int flag = 1;\n  while(lst.size() != 0) {\n    if(flag) {\n     \
    \ result.push_back(*std::min_element(lst.begin(), lst.end()));\n      lst.erase(std::min_element(lst.begin(),\
    \ lst.end()));\n      flag = 0;\n    } else {\n      result.push_back(*std::max_element(lst.begin(),\
    \ lst.end()));\n      lst.erase(std::max_element(lst.begin(), lst.end()));\n \
    \     flag = 1;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    std::vector<long> res = {lst[0]};\n    auto cmp = [&](long\
    \ a, long b) {\n        if (res.size() % 2 == 0) return a > b;\n        return\
    \ a < b;\n    };\n    std::priority_queue<long, std::vector<long>, decltype(cmp)>\
    \ q(cmp);\n    for (auto i = 1; i < lst.size(); ++i) q.push(lst[i]);\n    while\
    \ (!q.empty()) {\n        res.push_back(q.top());\n        q.pop();\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvevxxyis: /tmp/tmpvevxxyis.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Your\
    \ code goes here\n  int i=0,j=lst.size()-1;\n  std::vector<long> x;\n  if(lst.size()==0)\n\
    \  return x;\n  if(lst.size()==1)\n  return lst;\n  for(;i<lst.size()-1;i++){\n\
    \    x.push_back(lst[i]);\n    x.push_back(lst[j]);\n    j--;\n  }\n  if(i==j)\n\
    \  x.push_back(lst[i]);\n  return x;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqhp2r3ss: /tmp/tmpqhp2r3ss.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) return result;\n    sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i += 2) {\n        result.push_back(lst[i]);\n\
    \    }\n    for (int i = lst.size() % 2 == 0 ? lst.size() - 1 : lst.size() - 2;\
    \ i > 0; i -= 2) {\n        result.push_back(lst[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuamdsy3r: /tmp/tmpuamdsy3r.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ret;\n  long n = lst.size();\n  // sort the list\n  std::sort(lst.begin(), lst.end());\n\
    \  // determine the number of cycles and their length\n  long cycles = n / 2;\n\
    \  if (n % 2 == 1) {\n    cycles++;\n  }\n  long cycle_len = 2;\n  // initialize\
    \ index\n  long lst_index = 0;\n  // loop over the cycles\n  for (long i = 0;\
    \ i < cycles; i++) {\n    // check if the length of the current cycle is odd\n\
    \    if (cycle_len % 2 == 1) {\n      // if odd, add the first element of the\
    \ cycle\n      ret.push_back(lst[lst_index]);\n      lst_index++;\n    }\n   \
    \ // loop over the current cycle\n    for (long j = 0; j < cycle_len; j++) {\n\
    \      // check if j is even\n      if (j % 2 == 0) {\n        // add the minimum\
    \ value of the current range to the answer\n        ret.push_back(lst[lst_index]);\n\
    \      } else {\n        // add the maximum value of the current range to the\
    \ answer\n        ret.push_back(lst[lst_index + cycle_len - 1]);\n      }\n  \
    \    // increment the index\n      lst_index++;\n    }\n    // increment the cycle\
    \ length\n    cycle_len++;\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9pvo83tt: /tmp/tmp9pvo83tt.cpp:51: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ new_list;\n  if(lst.size() == 0){\n    return new_list;\n  }\n  auto cmp = [](const\
    \ long& a, const long& b) { return a > b; };\n  std::priority_queue<long, std::vector<long>,\
    \ decltype(cmp)> pq(cmp);\n  for(long i = 0; i < lst.size(); i++){\n    pq.push(lst[i]);\n\
    \  }\n  int count = 0;\n  while(!pq.empty()){\n    long tmp = pq.top();\n    new_list.push_back(tmp);\n\
    \    pq.pop();\n    if(count % 2 == 0){\n      pq.push(new_list[count]);\n   \
    \ }else{\n      pq.push(new_list[count]);\n    }\n    count++;\n  }\n  return\
    \ new_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ == 0) {\n\t\treturn lst;\n\t}\n\tstd::vector<long> ordered;\n\tordered.push_back(lst[0]);\n\
    \tlst.erase(lst.begin());\n\tint left = 0;\n\tint right = lst.size() - 1;\n\t\
    bool left_it = true;\n\twhile (left <= right) {\n\t\tif (left_it) {\n\t\t\tleft_it\
    \ = false;\n\t\t\tordered.push_back(lst[left]);\n\t\t\tleft++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tleft_it = true;\n\t\t\tordered.push_back(lst[right]);\n\t\t\tright--;\n\
    \t\t}\n\t}\n\treturn ordered;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9knicn49: /tmp/tmp9knicn49.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ans;\n  if (lst.size() % 2 == 0) {\n    int i = 0;\n    for (i = 0; i < lst.size()\
    \ / 2; i++) {\n      ans.push_back(lst[i]);\n      ans.push_back(lst[lst.size()\
    \ - i - 1]);\n    }\n  } else {\n    int i = 0;\n    for (i = 0; i < lst.size()\
    \ / 2; i++) {\n      ans.push_back(lst[i]);\n      ans.push_back(lst[lst.size()\
    \ - i - 1]);\n    }\n    ans.push_back(lst[i]);\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp15bb2toq: /tmp/tmp15bb2toq.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  std::sort(lst.begin(), lst.end());\n  int i=0, j=lst.size()-1;\n  while(i<=j){\n\
    \    res.push_back(lst[i]);\n    if(i==j)\n      break;\n    res.push_back(lst[j]);\n\
    \    i++;\n    j--;\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // TODO\n\
    \    std::vector<long> sorted = lst;\n    int i = 0;\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    int left = 0;\n    int right = sorted.size() - 1;\n    while\
    \ (left <= right){\n        lst[i++] = sorted[left++];\n        if (left <= right)\n\
    \            lst[i++] = sorted[right--];\n    }\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  auto const oddSize = static_cast<long>(lst.size()\
    \ / 2 + lst.size() % 2);\n  std::vector<long> odd;\n  std::vector<long> even;\n\
    \  for (long i = 0; i < oddSize; ++i) {\n    odd.push_back(lst[i]);\n  }\n  for\
    \ (long i = oddSize; i < lst.size(); ++i) {\n    even.push_back(lst[i]);\n  }\n\
    \  std::sort(odd.begin(), odd.end());\n  std::sort(even.begin(), even.end());\n\
    \  std::vector<long> result(lst.size());\n  long i = 0;\n  long j = 0;\n  while\
    \ (i < odd.size() && j < even.size()) {\n    result[i * 2] = odd[i];\n    result[i\
    \ * 2 + 1] = even[j];\n    ++i;\n    ++j;\n  }\n  if (i < odd.size()) {\n    result[i\
    \ * 2] = odd[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyohs6_np: /tmp/tmpyohs6_np.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::vector<long> positives;\n    std::vector<long> negatives;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            negatives.push_back(i);\n\
    \        } else {\n            positives.push_back(i);\n        }\n    }\n   \
    \ sort(negatives.begin(), negatives.end());\n    sort(positives.begin(), positives.end());\n\
    \    std::vector<long>::iterator j = positives.begin();\n    std::vector<long>::iterator\
    \ k = negatives.begin();\n    while (j != positives.end() || k != negatives.end())\
    \ {\n        if (j != positives.end()) {\n            result.push_back(*j);\n\
    \            j++;\n        }\n        if (k != negatives.end()) {\n          \
    \  result.push_back(*k);\n            k++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv_q8u1cm: /tmp/tmpv_q8u1cm.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return {};\n  std::vector<long> lst_new;\n  std::vector<long> min_max;\n\
    \  std::vector<long> lst_2;\n  lst_new.push_back(lst[0]);\n  for (int i = 1; i\
    \ < lst.size(); i++) {\n    if (lst[i] < lst[0]) {\n      lst_new.insert(lst_new.begin(),\
    \ lst[i]);\n    } else if (lst[i] > lst[0]) {\n      lst_new.push_back(lst[i]);\n\
    \    } else {\n      min_max.push_back(lst[i]);\n    }\n  }\n  if (min_max.size()\
    \ != 0) {\n    lst_new.insert(lst_new.begin(), min_max[0]);\n    for (int i =\
    \ 1; i < min_max.size(); i++) {\n      lst_new.push_back(min_max[i]);\n    }\n\
    \  }\n  for (int i = 1; i < lst_new.size(); i += 2) {\n    lst_2.push_back(lst_new[i]);\n\
    \  }\n  for (int i = 0; i < lst_new.size(); i += 2) {\n    lst_2.push_back(lst_new[i]);\n\
    \  }\n  return lst_2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuo4csot7: /tmp/tmpuo4csot7.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ ans;\n\tif(lst.size()==0)\n\t\treturn ans;\n\tint size = lst.size();\n\tint\
    \ cmin = lst[0];\n\tint cmax = lst[0];\n\tfor(int i=0;i<size;i++)\n\t{\n\t\tif(lst[i]<cmin)\n\
    \t\t\tcmin = lst[i];\n\t\tif(lst[i]>cmax)\n\t\t\tcmax = lst[i];\n\t}\n\tint flag\
    \ = 0;\n\tint count = 0;\n\tint i = 0;\n\twhile(count<size)\n\t{\n\t\tif(flag\
    \ == 0)\n\t\t{\n\t\t\tans.push_back(cmin);\n\t\t\ti = 0;\n\t\t\twhile(i<size)\n\
    \t\t\t{\n\t\t\t\tif(lst[i]!=cmin)\n\t\t\t\t{\n\t\t\t\t\tlst[i] = cmin;\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tflag = 1;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tans.push_back(cmax);\n\t\t\ti = 0;\n\t\t\twhile(i<size)\n\t\t\t{\n\
    \t\t\t\tif(lst[i]!=cmax)\n\t\t\t\t{\n\t\t\t\t\tlst[i] = cmax;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tflag = 0;\n\t\t}\n\t\tcount++;\n\t}\n\t\
    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvodiqw4_: /tmp/tmpvodiqw4_.cpp:65: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119269
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    int maxLen = lst.size();\n    int count = 0;\n    while (count < maxLen)\
    \ {\n        if (i < j) {\n            res.push_back(lst[i]);\n            i++;\n\
    \        }\n        if (i <= j) {\n            res.push_back(lst[j]);\n      \
    \      j--;\n        }\n        count += 2;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    int i = 0;\n    while(lst.size() > 0) {\n        if(i % 2 == 0)\
    \ {\n            long min = *std::min_element(lst.begin(), lst.end());\n     \
    \       result.push_back(min);\n            lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n        } else {\n            long max = *std::max_element(lst.begin(),\
    \ lst.end());\n            result.push_back(max);\n            lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n        }\n        i++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjboeftld: /tmp/tmpjboeftld.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    if(lst.size() == 0) return ans;\n    std::sort(lst.begin(), lst.end());\n\
    \    auto beg = lst.begin();\n    auto end = lst.end() - 1;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans.push_back(*beg);\n\
    \            beg++;\n        } else {\n            ans.push_back(*end);\n    \
    \        end--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119269
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ret = {};\n    if(lst.size() == 0)\n        return ret;\n    if(lst.size() ==\
    \ 1)\n        return lst;\n    auto comp = [](const long a, const long b) {\n\
    \        return a > b;\n    };\n    std::priority_queue<long, std::vector<long>,\
    \ decltype(comp)> pq(comp);\n    for(long e : lst)\n        pq.push(e);\n    bool\
    \ is_max = true;\n    while(!pq.empty()) {\n        ret.push_back(pq.top());\n\
    \        pq.pop();\n        if(is_max)\n            is_max = false;\n        else\n\
    \            is_max = true;\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpox4jl2n0: /tmp/tmpox4jl2n0.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119270
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            res.push_back(lst[i / 2]);\n\
    \        } else {\n            res.push_back(lst[lst.size() - i / 2 - 1]);\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119266
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ret;\n  std::sort(lst.begin(), lst.end());\n  while (!lst.empty()) {\n    ret.push_back(lst.front());\n\
    \    lst.erase(lst.begin());\n    if (!lst.empty()) {\n      ret.push_back(lst.back());\n\
    \      lst.pop_back();\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119270
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    result.push_back(lst[i]);\n    i++;\n    if (i >= lst.size()) {\n\
    \      return result;\n    }\n    result.push_back(lst[lst.size() - i - 1]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_3c2z1xg: /tmp/tmp_3c2z1xg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119271
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tint n =\
    \ lst.size();\n\tstd::vector<long> ans;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tint i = 0, j = n - 1;\n\twhile (i < j) {\n\t\tans.push_back(lst[i]);\n\t\tans.push_back(lst[j]);\n\
    \t\ti++;\n\t\tj--;\n\t}\n\tif (i == j) {\n\t\tans.push_back(lst[i]);\n\t}\n\t\
    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ < 2) {\n\t\treturn lst;\n\t}\n\tstd::vector<long> result(lst.size());\n\tstd::vector<long>::iterator\
    \ min = std::min_element(lst.begin(), lst.end());\n\tstd::vector<long>::iterator\
    \ max = std::max_element(lst.begin(), lst.end());\n\tauto it_min = min;\n\tauto\
    \ it_max = max;\n\tbool odd = true;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tif (odd) {\n\t\t\tresult[i] = *it_min;\n\t\t\tit_min++;\n\t\t\tif (it_min\
    \ == max) {\n\t\t\t\tit_min = min;\n\t\t\t}\n\t\t} else {\n\t\t\tresult[i] = *it_max;\n\
    \t\t\tit_max--;\n\t\t\tif (it_max == min) {\n\t\t\t\tit_max = max;\n\t\t\t}\n\t\
    \t}\n\t\todd = !odd;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpflgpds5a: /tmp/tmpflgpds5a.cpp:43: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> res;\n  long min = lst[0];\n\
    \  long max = lst[0];\n  std::vector<long> lst_1 = lst;\n  for (long i = 0; i\
    \ < lst.size(); i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  res.push_back(min);\n\
    \  lst_1.erase(std::remove(lst_1.begin(), lst_1.end(), min), lst_1.end());\n \
    \ lst = lst_1;\n  while (lst.size() > 0) {\n    max = lst[0];\n    lst_1 = lst;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n      if (lst[i] > max) {\n    \
    \    max = lst[i];\n      }\n    }\n    res.push_back(max);\n    lst_1.erase(std::remove(lst_1.begin(),\
    \ lst_1.end(), max), lst_1.end());\n    lst = lst_1;\n    min = lst[0];\n    lst_1\
    \ = lst;\n    for (long i = 0; i < lst.size(); i++) {\n      if (lst[i] < min)\
    \ {\n        min = lst[i];\n      }\n    }\n    res.push_back(min);\n    lst_1.erase(std::remove(lst_1.begin(),\
    \ lst_1.end(), min), lst_1.end());\n    lst = lst_1;\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpg7umu9uv: /tmp/tmpg7umu9uv.cpp:55: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119271
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // your\
    \ code goes here\n  int min_i,min_j,max_i,max_j;\n  long max,min;\n  std::vector<long>\
    \ res;\n  if(lst.size() == 0) return res;\n  // while(lst.size() > 0){\n  // \
    \  max = std::numeric_limits<long>::min();\n  //   min = std::numeric_limits<long>::max();\n\
    \  //   for(int i = 0; i < lst.size(); i++){\n  //     if(lst[i] < min){\n  //\
    \       min = lst[i];\n  //       min_i = i;\n  //     }\n  //     if(lst[i] >\
    \ max){\n  //       max = lst[i];\n  //       max_i = i;\n  //     }\n  //   }\n\
    \  //   res.push_back(min);\n  //   if(min_i != max_i) res.push_back(max);\n \
    \ //   lst.erase(lst.begin() + min_i);\n  //   if(min_i != max_i) lst.erase(lst.begin()\
    \ + max_i - 1);\n  // }\n  while(lst.size() > 0){\n    min = *std::min_element(lst.begin(),lst.end());\n\
    \    max = *std::max_element(lst.begin(),lst.end());\n    std::sort(lst.begin(),lst.end());\n\
    \    res.push_back(min);\n    lst.erase(lst.begin());\n    if(min != max){\n \
    \     res.push_back(max);\n      lst.erase(lst.end() - 1);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ret;\n    std::multiset<long> mset(lst.begin(), lst.end());\n    while(mset.size()\
    \ > 0) {\n        ret.push_back(*mset.begin());\n        mset.erase(mset.begin());\n\
    \        if(mset.size() > 0) {\n            ret.push_back(*mset.rbegin());\n \
    \           mset.erase(mset.end());\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'free(): invalid pointer

    '
  stdout: ''
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // your\
    \ code here\n  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_vfprkck: /tmp/tmp_vfprkck.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    while(!lst.empty()){\n        res.push_back(lst.front());\n      \
    \  lst.erase(lst.begin());\n        if(!lst.empty()){\n            res.push_back(lst.back());\n\
    \            lst.pop_back();\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp9qu9grw: /tmp/tmpp9qu9grw.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ <= 1) {\n\t\treturn lst;\n\t}\n\t// @@@\n\tstd::vector<long> ret_lst;\n\tret_lst.reserve(lst.size());\n\
    \tstd::vector<long> lst_copy = lst;\n\tstd::sort(lst_copy.begin(), lst_copy.end());\n\
    \tstd::reverse(lst_copy.begin(), lst_copy.end());\n\tint i = 0;\n\tint j = lst_copy.size()\
    \ - 1;\n\twhile (i <= j) {\n\t\tret_lst.push_back(lst_copy[i]);\n\t\tif (i !=\
    \ j) {\n\t\t\tret_lst.push_back(lst_copy[j]);\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\
    \treturn ret_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp62qxvb4s: /tmp/tmp62qxvb4s.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    bool is_min = true;\n \
    \   for (size_t i = 0; i < lst.size(); i++) {\n        if (is_min) {\n       \
    \     result.push_back(lst[i]);\n            is_min = false;\n        } else {\n\
    \            result.push_back(lst[lst.size() - i - 1]);\n            is_min =\
    \ true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9xqaeb3k: /tmp/tmp9xqaeb3k.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    int minIndex = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            min = lst[i];\n            minIndex = i;\n        }\n       \
    \ if (lst[i] > max) {\n            max = lst[i];\n            maxIndex = i;\n\
    \        }\n    }\n    result.push_back(min);\n    if (minIndex < maxIndex) {\n\
    \        lst.erase(lst.begin() + minIndex);\n    } else {\n        lst.erase(lst.begin()\
    \ + minIndex + 1);\n    }\n    std::reverse(lst.begin(), lst.end());\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        } else {\n            result.insert(result.begin(), lst[i]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmputh4fzxn: /tmp/tmputh4fzxn.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> ret;\n    std::sort(lst.begin(), lst.end());\n\
    \    int size = lst.size();\n    for (int i = 0; i < size / 2; i++) {\n      \
    \  ret.push_back(lst[i]);\n        ret.push_back(lst[size - i - 1]);\n    }\n\
    \    if (size % 2 != 0) {\n        ret.push_back(lst[size / 2]);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ <= 1) return lst;\n    int n = lst.size();\n    std::vector<long> ret(n);\n\
    \    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < n; i++) {\n \
    \       if (i % 2 == 0) ret[i] = lst[i / 2];\n        else ret[i] = lst[n - i\
    \ / 2 - 1];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tint n =\
    \ lst.size();\n\tif (n == 0) return lst;\n\tstd::vector<long> a(n);\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\ta[i] = lst[i];\n\t}\n\tstd::sort(a.begin(), a.end());\n\
    \tstd::vector<long> res(n);\n\tint low = 0, high = n - 1;\n\tint ind = 0;\n\t\
    while (low <= high) {\n\t\tres[ind++] = a[low++];\n\t\tif (low <= high) {\n\t\t\
    \tres[ind++] = a[high--];\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ final;\n    std::sort(lst.begin(), lst.end());\n    while(!lst.empty()){\n \
    \       final.push_back(lst.front());\n        lst.erase(lst.begin());\n     \
    \   if(!lst.empty()){\n            final.push_back(lst.back());\n            lst.pop_back();\n\
    \        }\n    }\n    return final;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n\n    int* max = new int[lst.size()];\n\
    \    int* min = new int[lst.size()];\n    std::vector<long> odd;\n    std::vector<long>\
    \ even;\n    long min_elem = lst[0];\n    long max_elem = lst[0];\n    int min_index\
    \ = 0;\n    int max_index = 0;\n    bool even_max = true;\n    bool even_min =\
    \ true;\n    int max_count = 0;\n    int min_count = 0;\n    int lst_size = lst.size();\n\
    \    for (int i = 0; i < lst_size; i++) {\n        if (lst[i] < min_elem) {\n\
    \            min_elem = lst[i];\n            min_index = i;\n        }\n     \
    \   if (lst[i] > max_elem) {\n            max_elem = lst[i];\n            max_index\
    \ = i;\n        }\n    }\n    odd.push_back(min_elem);\n    even.push_back(max_elem);\n\
    \    min[min_count] = min_index;\n    max[max_count] = max_index;\n    min_count++;\n\
    \    max_count++;\n    while (min_count < lst_size && max_count < lst_size) {\n\
    \        if (even_max) {\n            max_elem = lst[0];\n            max_index\
    \ = 0;\n            even_max = false;\n            for (int i = 0; i < lst_size;\
    \ i++) {\n                if (lst[i] > max_elem) {\n                    if (notIn(max,\
    \ max_count, i)) {\n                        max_elem = lst[i];\n             \
    \           max_index = i;\n                    }\n                }\n       \
    \     }\n            even.push_back(max_elem);\n            max[max_count] = max_index;\n\
    \            max_count++;\n        } else {\n            min_elem\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lfgwwhp.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6lfgwwhp.cpp:51:25: error: \u2018notIn\u2019 was not declared\
    \ in this scope\n   51 |                     if (notIn(max, max_count, i)) {\n\
    \      |                         ^~~~~\n/tmp/tmp6lfgwwhp.cpp:61:21: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   61 |             min_elem\n   \
    \   |                     ^\n      |                     ;\n   62 | }\n      |\
    \ ~                    \n/tmp/tmp6lfgwwhp.cpp:63:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   63 | int main() {\n     \
    \ |            ^\n/tmp/tmp6lfgwwhp.cpp:74:1: error: expected \u2018}\u2019 at\
    \ end of input\n   74 | }\n      | ^\n/tmp/tmp6lfgwwhp.cpp:44:58: note: to match\
    \ this \u2018{\u2019\n   44 |     while (min_count < lst_size && max_count < lst_size)\
    \ {\n      |                                                          ^\n/tmp/tmp6lfgwwhp.cpp:74:1:\
    \ error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmp6lfgwwhp.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp6lfgwwhp.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119271
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ rst;\n    int n = lst.size();\n    if (n == 0) {\n        return rst;\n    }\n\
    \    sort(lst.begin(), lst.end());\n    int l = 0, r = n - 1;\n    while (l <=\
    \ r) {\n        rst.push_back(lst[l]);\n        if (l != r) {\n            rst.push_back(lst[r]);\n\
    \        }\n        l++;\n        r--;\n    }\n    return rst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted = lst;\n    int n = sorted.size();\n    std::sort(sorted.begin(), sorted.end());\n\
    \    std::vector<long> result;\n    int i = 0, j = n - 1;\n    while (i <= j)\
    \ {\n        result.push_back(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(sorted[j]);\n            j--;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// 1. find\
    \ min\n\t// 2. find max\n\t// 3. repeat the process again, from min to max, then\
    \ from max to min.\n\t//std::cout << \"in strange_sort_list\" << std::endl;\n\t\
    //std::cout << lst.size() << std::endl;\n\t// 1. find min\n\tif (lst.size() ==\
    \ 0) {\n\t\treturn lst;\n\t}\n\tif (lst.size() == 1) {\n\t\treturn lst;\n\t}\n\
    \tlong min = lst[0];\n\tlong max = lst[0];\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\t//std::cout << \"lst[i] = \" << lst[i] << std::endl;\n\t\tif (lst[i]\
    \ < min) {\n\t\t\tmin = lst[i];\n\t\t}\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\
    \t\t}\n\t}\n\tlong min_i = 0;\n\tlong max_i = 0;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] == min) {\n\t\t\tmin_i = i;\n\t\t}\n\t\tif (lst[i] ==\
    \ max) {\n\t\t\tmax_i = i;\n\t\t}\n\t}\n\t//std::cout << \"min_i = \" << min_i\
    \ << std::endl;\n\t//std::cout << \"max_i = \" << max_i << std::endl;\n\t//std::cout\
    \ << \"min = \" << min << std::endl;\n\t//std::cout << \"max = \" << max << std::endl;\n\
    \tstd::vector<long> v;\n\tv.push_back(min);\n\tlst.erase(lst.begin() + min_i);\n\
    \twhile (lst.size() > 0) {\n\t\tlong max = lst[0];\n\t\tlong max_i =\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpko_2bt24.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpko_2bt24.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpko_2bt24.cpp:55:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   55 | int main() {\n      |            ^\n/tmp/tmpko_2bt24.cpp:66:1: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpko_2bt24.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpko_2bt24.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119271
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  \n  std::vector<long>\
    \ odd;\n  std::vector<long> even;\n  std::vector<long> result;\n  if(lst.size()\
    \ == 0){\n    return lst;\n  }\n  for(int i = 0; i < lst.size(); i++){\n    if(i\
    \ % 2 == 0){\n      even.push_back(lst[i]);\n    }else{\n      odd.push_back(lst[i]);\n\
    \    }\n  }\n  sort(even.begin(), even.end());\n  sort(odd.begin(), odd.end());\n\
    \  reverse(odd.begin(), odd.end());\n  for(int i = 0; i < even.size(); i++){\n\
    \    result.push_back(even[i]);\n    if(i < odd.size()){\n      result.push_back(odd[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4j6t4ti: /tmp/tmpb4j6t4ti.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code here\n    std::vector<long> m, M;\n    std::vector<long> ans;\n    if(lst.size()\
    \ == 0)\n        return ans;\n    if(lst.size() == 1)\n        return lst;\n \
    \   long min = lst[0];\n    for(long i = 0; i < lst.size(); i++)\n    {\n    \
    \    if(lst[i] < min)\n            min = lst[i];\n    }\n    for(long i = 0; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] != min)\n            m.push_back(lst[i]);\n\
    \    }\n    long max = m[0];\n    for(long i = 0; i < m.size(); i++)\n    {\n\
    \        if(m[i] > max)\n            max = m[i];\n    }\n    for(long i = 0; i\
    \ < m.size(); i++)\n    {\n        if(m[i] != max)\n            M.push_back(m[i]);\n\
    \    }\n    std::cout << min << std::endl;\n    std::cout << max << std::endl;\n\
    \    std::cout << M[0] << std::endl;\n    ans.push_back(min);\n    ans.push_back(max);\n\
    \    ans.push_back(M[0]);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzjkfjbta: /tmp/tmpzjkfjbta.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: '1

    4

    2

    '
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ new_lst;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst.size() == 0)\
    \ {\n      return new_lst;\n    }\n    else if (i % 2 == 0) {\n      int min =\
    \ lst[0];\n      int index_min = 0;\n      for (int j = 0; j < lst.size(); j++)\
    \ {\n        if (lst[j] < min) {\n          min = lst[j];\n          index_min\
    \ = j;\n        }\n      }\n      new_lst.push_back(min);\n      lst.erase(lst.begin()\
    \ + index_min);\n    }\n    else {\n      int max = lst[0];\n      int index_max\
    \ = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] > max)\
    \ {\n          max = lst[j];\n          index_max = j;\n        }\n      }\n \
    \     new_lst.push_back(max);\n      lst.erase(lst.begin() + index_max);\n   \
    \ }\n  }\n  return new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_jp1t2f3: /tmp/tmp_jp1t2f3.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>::iterator\
    \ min_elem = std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator\
    \ max_elem = std::max_element(lst.begin(), lst.end());\n    long min_item = *min_elem;\n\
    \    long max_item = *max_elem;\n    std::vector<long> new_lst;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            new_lst.push_back(min_item);\n\
    \            min_item++;\n        } else {\n            new_lst.push_back(max_item);\n\
    \            max_item--;\n        }\n    }\n    return new_lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpa283zyln: /tmp/tmpa283zyln.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    sort(lst.begin(), lst.end());\n    int i = 0, j = lst.size() - 1;\n\
    \    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j) {\n\
    \            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    int n = lst.size();\n    if(n == 0) return res;\n    sort(lst.begin(),\
    \ lst.end());\n    int i = 0, j = n-1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i == j) {\n            break;\n        }\n        res.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  bool asc = true;\n\
    \  while (lst.size() > 0) {\n    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    if (asc) {\n \
    \     result.push_back(min);\n      lst.erase(std::remove(lst.begin(), lst.end(),\
    \ min), lst.end());\n      asc = false;\n    } else {\n      result.push_back(max);\n\
    \      lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n     \
    \ asc = true;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp38uizrcd: /tmp/tmp38uizrcd.cpp:37: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sortedLst;\n  std::sort(lst.begin(), lst.end());\n  int size = lst.size();\n\
    \  if (size % 2 == 0) {\n    for (int i = 0; i < size; i += 2) {\n      sortedLst.push_back(lst[i]);\n\
    \      sortedLst.push_back(lst[size - 1 - i]);\n    }\n  } else {\n    for (int\
    \ i = 0; i < size; i += 2) {\n      sortedLst.push_back(lst[i]);\n      if (i\
    \ + 1 < size) {\n        sortedLst.push_back(lst[size - 1 - i]);\n      }\n  \
    \  }\n  }\n  return sortedLst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8rpksw0t: /tmp/tmp8rpksw0t.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_list;\n    int len = lst.size();\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    if (len % 2 == 0) {\n        while (i < len) {\n        \
    \    sorted_list.push_back(lst[i]);\n            sorted_list.push_back(lst[len\
    \ - 1 - i]);\n            i++;\n        }\n    } else {\n        while (i < len\
    \ - 1) {\n            sorted_list.push_back(lst[i]);\n            sorted_list.push_back(lst[len\
    \ - 1 - i]);\n            i++;\n        }\n        sorted_list.push_back(lst[i]);\n\
    \    }\n    return sorted_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpamrpsk7u: /tmp/tmpamrpsk7u.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::vector<long> rest(lst);\n  while (rest.size() > 0) {\n    result.push_back(rest[0]);\n\
    \    rest.erase(rest.begin());\n    rest.push_back(rest[0]);\n    rest.erase(rest.begin());\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsw55mvgx: /tmp/tmpsw55mvgx.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return lst;\n  std::vector<long> result;\n  bool min = true;\n  while\
    \ (lst.size() > 0) {\n    if (min) {\n      result.push_back(*std::min_element(lst.begin(),\
    \ lst.end()));\n      lst.erase(std::min_element(lst.begin(), lst.end()));\n \
    \     min = false;\n    } else {\n      result.push_back(*std::max_element(lst.begin(),\
    \ lst.end()));\n      lst.erase(std::max_element(lst.begin(), lst.end()));\n \
    \     min = true;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ <= 1) {\n        return lst;\n    }\n    std::vector<long> left;\n    std::vector<long>\
    \ right;\n    std::vector<long> res;\n    int mx = std::numeric_limits<int>::min();\n\
    \    int mn = std::numeric_limits<int>::max();\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > mx) {\n            mx = lst[i];\n        }\n  \
    \      if (lst[i] < mn) {\n            mn = lst[i];\n        }\n    }\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == mx) {\n          \
    \  continue;\n        }\n        if (lst[i] == mn) {\n            continue;\n\
    \        }\n        if (lst[i] > mn) {\n            right.push_back(lst[i]);\n\
    \        }\n        if (lst[i] < mx) {\n            left.push_back(lst[i]);\n\
    \        }\n    }\n    std::vector<long> lres = strange_sort_list(left);\n   \
    \ std::vector<long> rres = strange_sort_list(right);\n    res.insert(res.end(),\
    \ lres.begin(), lres.end());\n    res.push_back(mn);\n    res.push_back(mx);\n\
    \    res.insert(res.end(), rres.begin(), rres.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp51mvt07j: /tmp/tmp51mvt07j.cpp:51: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ v;\n\tstd::sort(lst.begin(), lst.end());\n\tstd::vector<long>::iterator i;\n\
    \tint pos = 0;\n\tfor (i = lst.begin(); i != lst.end(); i++) {\n\t\tif (pos %\
    \ 2 == 0) {\n\t\t\tv.push_back(*i);\n\t\t} else {\n\t\t\tv.insert(v.begin(), *i);\n\
    \t\t}\n\t\tpos++;\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7zh2cs5v: /tmp/tmp7zh2cs5v.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ < 2) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    while (lst.size() > 0) {\n        res.push_back(lst[0]);\n        lst.erase(lst.begin());\n\
    \        if (lst.size() > 0) {\n            res.push_back(lst[lst.size() - 1]);\n\
    \            lst.erase(lst.end() - 1);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code here\n    std::vector<long> sortedList;\n    if(lst.size() == 0) return\
    \ sortedList;\n    std::sort(lst.begin(), lst.end());\n    sortedList.push_back(lst[0]);\n\
    \    for(int i = 1; i < lst.size(); ++i) {\n        if(i % 2 != 0) sortedList.push_back(lst[lst.size()\
    \ - i]);\n        else sortedList.push_back(lst[i]);\n    }\n    return sortedList;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmps31yn4mn: /tmp/tmps31yn4mn.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  if(lst.size() == 0) return res;\n  res.push_back(lst[0]);\n  for(auto\
    \ i = 1; i < lst.size(); ++i) {\n    auto _min = std::min_element(lst.begin(),\
    \ lst.end());\n    auto _max = std::max_element(lst.begin(), lst.end());\n   \
    \ lst.erase(lst.begin());\n    if(lst.size() % 2 == 0) {\n      lst.erase(_min);\n\
    \      res.push_back(*_min);\n      res.push_back(*_max);\n    } else {\n    \
    \  lst.erase(_max);\n      res.push_back(*_max);\n      res.push_back(*_min);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119273
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  //your code\
    \ here\n  int n = lst.size();\n  if(n==0) return lst;\n  std::vector<long> lst1,lst2;\n\
    \  std::sort(lst.begin(),lst.end());\n  for(int i=0;i<n/2;i++)\n  {\n    lst1.push_back(lst[i]);\n\
    \    lst2.push_back(lst[n-i-1]);\n  }\n  if(n%2!=0) lst1.push_back(lst[n/2]);\n\
    \  int i1=0,i2=0;\n  std::vector<long> sorted;\n  for(int i=0;i<n;i++)\n  {\n\
    \    if(i%2==0)\n    {\n      sorted.push_back(lst1[i1]);\n      i1++;\n    }\n\
    \    else\n    {\n      sorted.push_back(lst2[i2]);\n      i2++;\n    }\n  }\n\
    \  return sorted;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    int n = lst.size();\n    sort(lst.begin(), lst.end());\n    for\
    \ (int i = 0; i < n / 2; i++) {\n        result.push_back(lst[i]);\n        result.push_back(lst[n\
    \ - i - 1]);\n    }\n    if (n % 2 != 0)\n        result.push_back(lst[n / 2]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // sort\
    \ the list.\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 0 ||\
    \ lst.size() == 1)\n        return lst;\n    int i = 0;\n    // even indices.\n\
    \    std::vector<long> even_idx_list;\n    // odd indices.\n    std::vector<long>\
    \ odd_idx_list;\n    while (i < lst.size()) {\n        if (i % 2 == 0) {\n   \
    \         even_idx_list.push_back(lst[i]);\n        } else {\n            odd_idx_list.push_back(lst[i]);\n\
    \        }\n        i++;\n    }\n    // reverse the odd indices.\n    std::reverse(odd_idx_list.begin(),\
    \ odd_idx_list.end());\n    i = 0;\n    int j = 0;\n    std::vector<long> res;\n\
    \    while (i < even_idx_list.size() && j < odd_idx_list.size()) {\n        res.push_back(even_idx_list[i]);\n\
    \        res.push_back(odd_idx_list[j]);\n        i++;\n        j++;\n    }\n\
    \    if (i < even_idx_list.size()) {\n        res.push_back(even_idx_list[i]);\n\
    \    }\n    if (j < odd_idx_list.size()) {\n        res.push_back(odd_idx_list[j]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpryd2vxrs: /tmp/tmpryd2vxrs.cpp:49: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    std::vector<long> ans;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = n - 1;\n    while (i <= j) {\n        ans.push_back(lst[i]);\n\
    \        if (i != j)\n            ans.push_back(lst[j]);\n        i++;\n     \
    \   j--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119272
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ list1 = lst;\n\tstd::vector<long> list2;\n\tstd::sort(list1.begin(), list1.end());\n\
    \tlong min = list1[0];\n\tlist2.push_back(min);\n\tlong max = list1[list1.size()\
    \ - 1];\n\tlist2.push_back(max);\n\tlist1.erase(list1.begin());\n\tlist1.erase(list1.end()\
    \ - 1);\n\twhile (!list1.empty()) {\n\t\tlist2.push_back(list1[0]);\n\t\tlist2.push_back(list1[list1.size()\
    \ - 1]);\n\t\tlist1.erase(list1.begin());\n\t\tlist1.erase(list1.end() - 1);\n\
    \t}\n\treturn list2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119273
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    if(lst.size() > 0) {\n        std::sort(lst.begin(), lst.end());\n\
    \        auto start = lst.begin();\n        auto end = lst.end() - 1;\n      \
    \  while(start <= end) {\n            sorted_lst.push_back(*start);\n        \
    \    ++start;\n            if(start <= end) {\n                sorted_lst.push_back(*end);\n\
    \                --end;\n            }\n        }\n    }\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119273
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code here\n    if(lst.size()==0) return lst;\n    if(lst.size()==1) return lst;\n\
    \    int n = lst.size();\n    vector<long> arr;\n    sort(lst.begin(),lst.end());\n\
    \    int i=0,j=n-1;\n    while(i<=j){\n        arr.push_back(lst[i]);\n      \
    \  i++;\n        if(i>j) break;\n        arr.push_back(lst[j]);\n        j--;\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hk3xjzx.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9hk3xjzx.cpp:15:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   15 |     vector<long> arr;\n      |     ^~~~~~\n/tmp/tmp9hk3xjzx.cpp:15:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9hk3xjzx.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9hk3xjzx.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp9hk3xjzx.cpp:15:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   15 |     vector<long>\
    \ arr;\n      |            ^~~~\n/tmp/tmp9hk3xjzx.cpp:19:9: error: \u2018arr\u2019\
    \ was not declared in this scope\n   19 |         arr.push_back(lst[i]);\n   \
    \   |         ^~~\n/tmp/tmp9hk3xjzx.cpp:25:12: error: \u2018arr\u2019 was not\
    \ declared in this scope\n   25 |     return arr;\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660119272
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    long min_val = lst[0];\n    long max_val = lst[lst.size() - 1];\n    res.push_back(min_val);\n\
    \    lst.erase(lst.begin());\n    while (lst.size() > 0) {\n        if (res.size()\
    \ % 2 != 0) {\n            // odd numbered element, add max_val\n            res.push_back(max_val);\n\
    \            lst.erase(std::find(lst.begin(), lst.end(), max_val));\n        \
    \    if (lst.size() > 0) {\n                max_val = lst[lst.size() - 1];\n \
    \           }\n        } else {\n            // even numbered element, add min_val\n\
    \            res.push_back(min_val);\n            lst.erase(std::find(lst.begin(),\
    \ lst.end(), min_val));\n            if (lst.size() > 0) {\n                min_val\
    \ = lst[0];\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119273
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long max,min,i,j;\n\
    \    std::vector<long> v;\n    for(i=0;i<lst.size();i++)\n    {\n        if(lst[i]==max)\n\
    \        {\n            min=max;\n            v.push_back(min);\n            for(j=0;j<lst.size();j++)\n\
    \            {\n                if(lst[j]<min)\n                {\n          \
    \          min=lst[j];\n                }\n            }\n            v.push_back(min);\n\
    \        }\n        else if(lst[i]==min)\n        {\n            max=min;\n  \
    \          v.push_back(max);\n            for(j=0;j<lst.size();j++)\n        \
    \    {\n                if(lst[j]>max)\n                {\n                  \
    \  max=lst[j];\n                }\n            }\n            v.push_back(max);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmptsqbx0ee: /tmp/tmptsqbx0ee.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ answer;\n  long max = *std::max_element(lst.begin(), lst.end());\n  long min\
    \ = *std::min_element(lst.begin(), lst.end());\n  answer.push_back(min);\n  lst.erase(std::remove(lst.begin(),\
    \ lst.end(), min), lst.end());\n  if(lst.size() != 0)\n  {\n    max = *std::max_element(lst.begin(),\
    \ lst.end());\n    answer.push_back(max);\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), max), lst.end());\n  }\n  while(lst.size() != 0)\n  {\n    min =\
    \ *std::min_element(lst.begin(), lst.end());\n    answer.push_back(min);\n   \
    \ lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n    if(lst.size()\
    \ != 0)\n    {\n      max = *std::max_element(lst.begin(), lst.end());\n     \
    \ answer.push_back(max);\n      lst.erase(std::remove(lst.begin(), lst.end(),\
    \ max), lst.end());\n    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpql1c0s87: /tmp/tmpql1c0s87.cpp:42: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660119273
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ answer;\n    sort(lst.begin(), lst.end());\n    int p1 = 0;\n    int p2 = lst.size()\
    \ - 1;\n    int min = lst[p1];\n    int max = lst[p2];\n    while (p1 <= p2) {\n\
    \        min = lst[p1];\n        max = lst[p2];\n        answer.push_back(min);\n\
    \        if (p1 == p2) break;\n        answer.push_back(max);\n        p1++;\n\
    \        p2--;\n    }\n    return answer;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// help\
    \ sorted list to go through\n\tstd::vector<long> res;\n\t// check if lst is empty.\n\
    \tif (lst.empty())\n\t\treturn res;\n\t// sort lst in ascending order.\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\t// pointer to the lst.\n\tint start = 0;\n\tint end = lst.size()\
    \ - 1;\n\t// check if lst is even.\n\tif (lst.size() % 2 == 0) {\n\t\tfor (int\
    \ i = 0; i < lst.size() / 2; i++) {\n\t\t\tres.push_back(lst[start]);\n\t\t\t\
    res.push_back(lst[end]);\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\t}\n\t// odd lst\n\
    \telse {\n\t\tfor (int i = 0; i < lst.size() / 2; i++) {\n\t\t\tres.push_back(lst[start]);\n\
    \t\t\tres.push_back(lst[end]);\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\t\tres.push_back(lst[start]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ list;\n    std::sort(lst.begin(), lst.end());\n    bool flag = true;\n    while(lst.size()>0){\n\
    \        if(flag){\n            list.push_back(lst[0]);\n            lst.erase(lst.begin());\n\
    \        }else{\n            list.push_back(lst[lst.size()-1]);\n            lst.erase(lst.end()-1);\n\
    \        }\n        flag = !flag;\n    }\n    return list;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// your\
    \ code here\n\tstd::vector<long> odd;\n\tstd::vector<long> even;\n\tfor (int i\
    \ = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\teven.push_back(lst[i]);\n\
    \t\telse\n\t\t\todd.push_back(lst[i]);\n\t}\n\tstd::sort(even.begin(), even.end());\n\
    \tstd::sort(odd.begin(), odd.end());\n\tfor (int i = 0; i < odd.size(); i++) {\n\
    \t\tstd::cout << odd[i] << \" \";\n\t}\n\tstd::cout << std::endl;\n\tfor (int\
    \ i = 0; i < even.size(); i++) {\n\t\tstd::cout << even[i] << \" \";\n\t}\n\t\
    std::cout << std::endl;\n\tstd::vector<long> result;\n\tfor (int i = 0; i < even.size();\
    \ i++) {\n\t\tresult.push_back(even[i]);\n\t\tif (i < odd.size())\n\t\t\tresult.push_back(odd[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1uyyg5v3: /tmp/tmp1uyyg5v3.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: "2 4 \n1 3 \n"
  timestamp: 1660119274
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ answer;\n  int len = lst.size();\n  for (int i = 0; i < len; i++) {\n    int\
    \ min_index = std::min_element(lst.begin(), lst.end()) - lst.begin();\n    int\
    \ max_index = std::max_element(lst.begin(), lst.end()) - lst.begin();\n    if\
    \ (i % 2 == 0) {\n      answer.push_back(lst[min_index]);\n      lst.erase(lst.begin()\
    \ + min_index);\n    } else {\n      answer.push_back(lst[max_index]);\n     \
    \ lst.erase(lst.begin() + max_index);\n    }\n  }\n  return answer;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ < 2) {\n        return lst;\n    }\n    std::vector<long> res;\n    auto it\
    \ = lst.begin();\n    res.push_back(*it);\n    lst.erase(it);\n    for (size_t\
    \ i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            auto min\
    \ = std::min_element(lst.begin(), lst.end());\n            res.push_back(*min);\n\
    \            lst.erase(min);\n        } else {\n            auto max = std::max_element(lst.begin(),\
    \ lst.end());\n            res.push_back(*max);\n            lst.erase(max);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi53aa2gs: /tmp/tmpi53aa2gs.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119274
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int n =\
    \ lst.size();\n  std::vector<long> sorted;\n  std::sort(lst.begin(), lst.end());\n\
    \  int i = 0, j = n - 1;\n  while (i <= j) {\n    sorted.push_back(lst[i]);\n\
    \    i++;\n    if (i > j)\n      break;\n    sorted.push_back(lst[j]);\n    j--;\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::vector<long> temp(lst);\n    std::sort(temp.begin(), temp.end());\n\
    \    int i = 0;\n    while (i < temp.size()) {\n        res.push_back(temp[i]);\n\
    \        i++;\n        if (i == temp.size()) break;\n        res.push_back(temp[temp.size()\
    \ - i]);\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmi2889_z: /tmp/tmpmi2889_z.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ odds;\n    std::vector<long> evens;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2) {\n            odds.push_back(lst[i]);\n        } else\
    \ {\n            evens.push_back(lst[i]);\n        }\n    }\n    std::sort(odds.begin(),\
    \ odds.end());\n    std::sort(evens.begin(), evens.end());\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2) {\n   \
    \         res.push_back(odds[i / 2]);\n        } else {\n            res.push_back(evens[i\
    \ / 2]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxfpbigkt: /tmp/tmpxfpbigkt.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// write\
    \ your code here\n\tsort(lst.begin(), lst.end());\n\tint temp;\n\tfor (int i =\
    \ 0; i < lst.size() - 1; i = i + 2) {\n\t\ttemp = lst[i];\n\t\tlst[i] = lst[i\
    \ + 1];\n\t\tlst[i + 1] = temp;\n\t}\n\treturn lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmptn5qwzdp: /tmp/tmptn5qwzdp.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 != 0) {\n      lst[i] = -lst[i];\n\
    \    }\n  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 != 0) {\n      lst[i] = -lst[i];\n    }\n  }\n  return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmppi9n_vjt: /tmp/tmppi9n_vjt.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted;\n    if (lst.size() == 0) {\n        return sorted;\n    }\n\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (i+1\
    \ < lst.size()) {\n            sorted.push_back(lst[i]);\n            sorted.push_back(lst[lst.size()-1-i]);\n\
    \        } else {\n            sorted.push_back(lst[i]);\n        }\n    }\n \
    \   return sorted;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpj36afsnc: /tmp/tmpj36afsnc.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tint n =\
    \ lst.size();\n\tint start = 0;\n\tint end = n - 1;\n\tstd::vector<long> ans;\n\
    \twhile (start <= end) {\n\t\tint min = std::min(lst[start], lst[end]);\n\t\t\
    int max = std::max(lst[start], lst[end]);\n\t\tans.push_back(min);\n\t\tans.push_back(max);\n\
    \t\tstart++;\n\t\tend--;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqdaw5dnt: /tmp/tmpqdaw5dnt.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119274
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ output;\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0) {\n      output.push_back(lst[i / 2]);\n    } else\
    \ {\n      output.push_back(lst[lst.size() - (i / 2) - 1]);\n    }\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ <= 1) return lst;\n\tstd::vector<long> ret;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tauto size = lst.size();\n\tfor (auto i = 0; i < size; i++) {\n\t\tif (i % 2\
    \ == 0) {\n\t\t\tret.push_back(lst[i/2]);\n\t\t} else {\n\t\t\tret.push_back(lst[size-1-i/2]);\n\
    \t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>::iterator\
    \ min, max;\n  std::vector<long> answer;\n  while(lst.size()>0){\n    min = std::min_element(lst.begin(),\
    \ lst.end());\n    max = std::max_element(lst.begin(), lst.end());\n    answer.push_back(*min);\n\
    \    if(*min != *max){\n      answer.push_back(*max);\n    }\n    lst.erase(min);\n\
    \    lst.erase(max);\n  }\n  return answer;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::vector<long> lst1 = lst;\n  std::vector<long> lst2 = lst;\n\
    \  std::sort(lst1.begin(), lst1.end());\n  std::sort(lst2.begin(), lst2.end(),\
    \ std::greater<int>());\n  lst1.insert(lst1.end(), lst2.begin(), lst2.end());\n\
    \  return lst1;\n}\nint main() {\n    auto candidate = strange_sort_list;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmppbzjyirp: /tmp/tmppbzjyirp.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>res;\n\
    \  std::sort(lst.begin(), lst.end());\n  while (lst.size() > 0) {\n    res.push_back(lst[0]);\n\
    \    lst.erase(lst.begin());\n    if (lst.size() > 0) {\n      res.push_back(lst[lst.size()\
    \ - 1]);\n      lst.erase(lst.end() - 1);\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ result;\n\tstd::sort(lst.begin(), lst.end());\n\tint max = lst.size() - 1;\n\
    \tint min = 0;\n\twhile (min <= max) {\n\t\tresult.push_back(lst[min]);\n\t\t\
    if (min != max) {\n\t\t\tresult.push_back(lst[max]);\n\t\t}\n\t\tmin++;\n\t\t\
    max--;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int n =\
    \ lst.size();\n    while (i < n) {\n        result.push_back(lst[i]);\n      \
    \  if (i + 1 < n) {\n            result.push_back(lst[n - i - 1]);\n        }\n\
    \        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwr53u_7i: /tmp/tmpwr53u_7i.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_lst;\n  if (lst.size() == 0) {\n    return sorted_lst;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 0; i < lst.size(); i += 2) {\n    sorted_lst.push_back(lst[i]);\n\
    \  }\n  for (int i = lst.size() - 2; i > 0; i -= 2) {\n    sorted_lst.push_back(lst[i]);\n\
    \  }\n  return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvarj51n: /tmp/tmpqvarj51n.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // TODO:\
    \ check if sorted list is empty.\n    std::vector<long> strange_order;\n    //\
    \ TODO: if the list is empty, return an empty list.\n    if (lst.empty()) {\n\
    \        return strange_order;\n    }\n    // TODO: get iterator to the minimum\
    \ value of list.\n    auto min = std::min_element(lst.begin(), lst.end());\n \
    \   // TODO: add minimum value to sorted list.\n    strange_order.push_back(*min);\n\
    \    // TODO: remove minimum value from list.\n    lst.erase(min);\n    while\
    \ (!lst.empty()) {\n        // TODO: get iterator to the maximum value of list.\n\
    \        auto max = std::max_element(lst.begin(), lst.end());\n        // TODO:\
    \ add maximum value to sorted list.\n        strange_order.push_back(*max);\n\
    \        // TODO: remove maximum value from list.\n        lst.erase(max);\n \
    \       // TODO: get iterator to the minimum value of list.\n        min = std::min_element(lst.begin(),\
    \ lst.end());\n        // TODO: add minimum value to sorted list.\n        strange_order.push_back(*min);\n\
    \        // TODO: remove minimum value from list.\n        lst.erase(min);\n \
    \   }\n    return strange_order;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::vector<long> sorted;\n    sorted = lst;\n    if(lst.size() ==\
    \ 0) return res;\n    if(lst.size() == 1) return lst;\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    int i = 0;\n    int j = sorted.size() - 1;\n    int k =\
    \ 0;\n    while(i <= j) {\n        res.push_back(sorted[i]);\n        if(i !=\
    \ j) {\n            res.push_back(sorted[j]);\n        }\n        i++;\n     \
    \   j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119274
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    if (lst.size()\
    \ == 1) {\n        return lst;\n    }\n    res.push_back(lst[0]);\n    int i =\
    \ 1;\n    while (i < lst.size()) {\n        res.push_back(lst[i]);\n        i\
    \ += 2;\n    }\n    i = lst.size() - 2;\n    while (i > 0) {\n        res.push_back(lst[i]);\n\
    \        i -= 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp07czm0g5: /tmp/tmp07czm0g5.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ new_lst;\n\tstd::sort(lst.begin(), lst.end());\n\tstd::reverse(lst.begin(),\
    \ lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\
    \t\t\tnew_lst.push_back(lst[i]);\n\t\telse\n\t\t\tnew_lst.insert(new_lst.begin(),\
    \ lst[i]);\n\t}\n\treturn new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcz6ca7mg: /tmp/tmpcz6ca7mg.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ans;\n  // check if given list is empty\n  if(lst.size() == 0) {\n    return\
    \ ans;\n  }\n  std::sort(lst.begin(), lst.end());\n  long max_idx = lst.size()\
    \ - 1;\n  long min_idx = 0;\n  while(max_idx >= min_idx) {\n    ans.push_back(lst[min_idx]);\n\
    \    min_idx++;\n    if(max_idx < min_idx) {\n      break;\n    }\n    ans.push_back(lst[max_idx]);\n\
    \    max_idx--;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  long n = lst.size();\n  if (n == 0) {\n    return result;\n  }\n\
    \  if (n == 1) {\n    result.push_back(lst[0]);\n    return result;\n  }\n  bool\
    \ asc = true;\n  while (n > 0) {\n    if (asc) {\n      auto it = std::min_element(lst.begin(),\
    \ lst.end());\n      result.push_back(*it);\n      lst.erase(it);\n      asc =\
    \ false;\n    } else {\n      auto it = std::max_element(lst.begin(), lst.end());\n\
    \      result.push_back(*it);\n      lst.erase(it);\n      asc = true;\n    }\n\
    \    n = lst.size();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ == 0) {\n\t\treturn lst;\n\t}\n\tsort(lst.begin(), lst.end());\n\tstd::vector<long>\
    \ res;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\
    \tres.push_back(lst[i / 2]);\n\t\t} else {\n\t\t\tres.push_back(lst[lst.size()\
    \ - 1 - i / 2]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::multiset<long> sorted;\n  int i;\n  bool asc = true;\n  // Iterate\
    \ through the input list and insert\n  // each element into the multiset.\n  for\
    \ (i = 0; i < lst.size(); i++) {\n    sorted.insert(lst[i]);\n  }\n  // Populate\
    \ the result array with the elements\n  // in the multiset\n  while (!sorted.empty())\
    \ {\n    if (asc) {\n      result.push_back(*sorted.begin());\n      sorted.erase(sorted.begin());\n\
    \    } else {\n      result.push_back(*(--sorted.end()));\n      sorted.erase(--sorted.end());\n\
    \    }\n    asc = !asc;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    if(lst.size() == 0)\n        return lst;\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> sorted;\n    bool dec = true;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(i == 0)\n            sorted.push_back(lst[i]);\n\
    \        else{\n            if(dec){\n                sorted.push_back(lst[lst.size()\
    \ - i]);\n                dec = false;\n            }\n            else{\n   \
    \             sorted.push_back(lst[i]);\n                dec = true;\n       \
    \     }\n        }\n    }\n    return sorted;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdde_x0cn: /tmp/tmpdde_x0cn.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  int lowest_index = 0;\n  for (int index = 0; index < lst.size();\
    \ index++) {\n    if (lst[index] < lst[lowest_index]) {\n      lowest_index =\
    \ index;\n    }\n  }\n  while (!lst.empty()) {\n    result.push_back(lst[lowest_index]);\n\
    \    lst.erase(lst.begin() + lowest_index);\n    if (lst.empty()) {\n      break;\n\
    \    }\n    int highest_index = 0;\n    for (int index = 0; index < lst.size();\
    \ index++) {\n      if (lst[index] > lst[highest_index]) {\n        highest_index\
    \ = index;\n      }\n    }\n    result.push_back(lst[highest_index]);\n    lst.erase(lst.begin()\
    \ + highest_index);\n    if (lst.empty()) {\n      break;\n    }\n    lowest_index\
    \ = 0;\n    for (int index = 0; index < lst.size(); index++) {\n      if (lst[index]\
    \ < lst[lowest_index]) {\n        lowest_index = index;\n      }\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ newList;\n    if (lst.size() == 0) {\n        return newList;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long min = lst[0];\n    long max = lst[lst.size() - 1];\n \
    \   if (min == max) {\n        return lst;\n    }\n    bool isMin = true;\n  \
    \  while (newList.size() != lst.size()) {\n        if (isMin) {\n            newList.push_back(min);\n\
    \            lst.erase(lst.begin());\n            isMin = false;\n        } else\
    \ {\n            newList.push_back(max);\n            lst.erase(lst.end() - 1);\n\
    \            isMin = true;\n        }\n    }\n    return newList;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw8npa1yo: /tmp/tmpw8npa1yo.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    //cout\
    \ << \"Input: \"; for (long x : lst) cout << x << \" \"; cout << endl;\n    int\
    \ n = lst.size();\n    if (n == 0) return {};\n    if (n == 1) return lst;\n \
    \   vector<long> sorted(n);\n    int min_idx = 0;\n    int max_idx = n - 1;\n\
    \    int result_idx = 0;\n    while (min_idx < max_idx) {\n        sorted[result_idx++]\
    \ = lst[min_idx++];\n        sorted[result_idx++] = lst[max_idx--];\n    }\n \
    \   if (min_idx == max_idx) {\n        sorted[result_idx] = lst[min_idx];\n  \
    \  }\n    return sorted;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7s5gc3u.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk7s5gc3u.cpp:15:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   15 |     vector<long> sorted(n);\n      |     ^~~~~~\n/tmp/tmpk7s5gc3u.cpp:15:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk7s5gc3u.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk7s5gc3u.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpk7s5gc3u.cpp:15:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   15 |     vector<long>\
    \ sorted(n);\n      |            ^~~~\n/tmp/tmpk7s5gc3u.cpp:20:9: error: \u2018\
    sorted\u2019 was not declared in this scope; did you mean \u2018strtod\u2019?\n\
    \   20 |         sorted[result_idx++] = lst[min_idx++];\n      |         ^~~~~~\n\
    \      |         strtod\n/tmp/tmpk7s5gc3u.cpp:24:9: error: \u2018sorted\u2019\
    \ was not declared in this scope; did you mean \u2018strtod\u2019?\n   24 |  \
    \       sorted[result_idx] = lst[min_idx];\n      |         ^~~~~~\n      |  \
    \       strtod\n/tmp/tmpk7s5gc3u.cpp:26:12: error: \u2018sorted\u2019 was not\
    \ declared in this scope; did you mean \u2018strtod\u2019?\n   26 |     return\
    \ sorted;\n      |            ^~~~~~\n      |            strtod\n"
  stdout: ''
  timestamp: 1660119275
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n\n  int min = lst[0];\n  int max = lst[0];\n\
    \  int min_index = 0;\n  int max_index = 0;\n  std::vector<long> result = {};\n\
    \n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n      min_index = i;\n    }\n    if (lst[i] > max) {\n      max =\
    \ lst[i];\n      max_index = i;\n    }\n  }\n\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0) {\n      result.push_back(min);\n      lst.erase(lst.begin()\
    \ + min_index);\n      min = lst[0];\n      min_index = 0;\n      for (int j =\
    \ 0; j < lst.size(); j++) {\n        if (lst[j] < min) {\n          min = lst[j];\n\
    \          min_index = j;\n        }\n      }\n    } else {\n      result.push_back(max);\n\
    \      lst.erase(lst.begin() + max_index);\n      max = lst[0];\n      max_index\
    \ = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] > max)\
    \ {\n          max = lst[j];\n          max_index = j;\n        }\n      }\n \
    \   }\n  }\n\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    bool flag\
    \ = true;\n    std::vector<long> lst2;\n    while(lst.size()!=0){\n        auto\
    \ minmax = std::minmax_element(lst.begin(), lst.end());\n        if(flag){\n \
    \           lst2.push_back(*minmax.first);\n            lst.erase(minmax.first);\n\
    \            flag = false;\n        }else{\n            lst2.push_back(*minmax.second);\n\
    \            lst.erase(minmax.second);\n            flag = true;\n        }\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i\
    \ < lst.size()) {\n        if (i != lst.size() - 1) {\n            result.push_back(lst[i]);\n\
    \            result.push_back(lst[lst.size() - i - 1]);\n        } else {\n  \
    \          result.push_back(lst[i]);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqftpz1zg: /tmp/tmpqftpz1zg.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.size()\
    \ == 0) return lst;\n\tsort(lst.begin(), lst.end());\n\tstd::vector<long> v(lst.size());\n\
    \tint i = 0, j = lst.size() - 1;\n\tfor (int k = 0; k < lst.size(); k += 2) {\n\
    \t\tv[k] = lst[i++];\n\t\tif (k + 1 < lst.size()) v[k + 1] = lst[j--];\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  bool is_ascending = true;\n\
    \  while (!lst.empty()) {\n    if (is_ascending) {\n      result.push_back(lst.front());\n\
    \      lst.erase(lst.begin());\n    } else {\n      result.push_back(lst.back());\n\
    \      lst.pop_back();\n    }\n    is_ascending = !is_ascending;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> result = {};\n  // Sort the\
    \ list\n  std::sort(lst.begin(), lst.end());\n  int list_size = lst.size();\n\
    \  // start iterating through the list\n  for (int i = 0; i < list_size; i++)\
    \ {\n    // if index is even take the first element\n    if (i % 2 == 0) {\n \
    \     result.push_back(lst[0]);\n      lst.erase(lst.begin());\n    } else {\n\
    \      // else take the last element\n      result.push_back(lst[lst.size() -\
    \ 1]);\n      lst.pop_back();\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119275
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code here\n    sort(lst.begin(), lst.end());\n    vector<long> res;\n    int\
    \ n = lst.size();\n    res.push_back(lst[0]);\n    int i = 1;\n    while(i < n)\
    \ {\n        res.push_back(lst[n-i]);\n        i++;\n        if(i<n) {\n     \
    \       res.push_back(lst[i]);\n            i++;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp55z57puk.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp55z57puk.cpp:13:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   13 |     vector<long> res;\n      |     ^~~~~~\n/tmp/tmp55z57puk.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp55z57puk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp55z57puk.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp55z57puk.cpp:13:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   13 |     vector<long>\
    \ res;\n      |            ^~~~\n/tmp/tmp55z57puk.cpp:15:5: error: \u2018res\u2019\
    \ was not declared in this scope\n   15 |     res.push_back(lst[0]);\n      |\
    \     ^~~\n"
  stdout: ''
  timestamp: 1660119275
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ <= 1) {\n        return lst;\n    }\n\n    std::vector<long> sorted;\n    sorted.push_back(lst[0]);\n\
    \    lst.erase(lst.begin());\n\n    while (!lst.empty()) {\n        long min =\
    \ lst[0];\n        long min_index = 0;\n        long max = lst[0];\n        long\
    \ max_index = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (lst[i] < min) {\n                min = lst[i];\n                min_index\
    \ = i;\n            }\n\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n                max_index = i;\n            }\n        }\n\n    \
    \    sorted.push_back(max);\n        lst.erase(lst.begin() + max_index);\n\n \
    \       if (!lst.empty()) {\n            sorted.push_back(min);\n            lst.erase(lst.begin()\
    \ + min_index);\n        }\n    }\n\n    return sorted;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int x\
    \ = lst.size();\n    int i = 0;\n    int j = x - 1;\n    std::vector<long> arr(x);\n\
    \    while (i < x) {\n        arr[i] = lst[i];\n        i += 2;\n    }\n    while\
    \ (j >= 0) {\n        arr[j] = lst[j];\n        j -= 2;\n    }\n    return arr;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1u3jvc7b: /tmp/tmp1u3jvc7b.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()==0){\n\
    \        return {};\n    }\n    // sorting\n    // for (long i=0; i<lst.size();\
    \ i++){\n    //     for (long j=i+1; j<lst.size(); j++){\n    //         if (lst[i]>lst[j]){\n\
    \    //             long temp = lst[i];\n    //             lst[i] = lst[j];\n\
    \    //             lst[j] = temp;\n    //         }\n    //     }\n    // }\n\
    \    // sorting with sort function\n    std::sort(lst.begin(), lst.end());\n \
    \   std::vector<long> output;\n    // while (lst.size()>1){\n    //     output.push_back(lst[0]);\n\
    \    //     output.push_back(lst[lst.size()-1]);\n    //     lst.erase(lst.begin()+lst.size()-1);\n\
    \    //     lst.erase(lst.begin());\n    // }\n    // output.push_back(lst[0]);\n\
    \    // return output;\n    // using modulus operator\n    long odd_index=0;\n\
    \    long even_index=lst.size()-1;\n    for (long i=0; i<lst.size(); i++){\n \
    \       if (i%2==0){\n            output.push_back(lst[odd_index]);\n        \
    \    odd_index++;\n        }\n        else{\n            output.push_back(lst[even_index]);\n\
    \            even_index--;\n        }\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tint len\
    \ = lst.size();\n\tstd::vector<long> v(len);\n\tint head = 0, tail = len - 1;\n\
    \tstd::sort(lst.begin(), lst.end());\n\tbool alt = true;\n\tint index = 0;\n\t\
    while (tail >= head) {\n\t\tif (alt) {\n\t\t\tv[index++] = lst[head++];\n\t\t\
    } else {\n\t\t\tv[index++] = lst[tail--];\n\t\t}\n\t\talt = !alt;\n\t}\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ result;\n\tif (lst.size() == 0) {\n\t\treturn result;\n\t}\n\tif (lst.size()\
    \ == 1) {\n\t\treturn lst;\n\t}\n\tstd::sort(lst.begin(), lst.end());\n\tstd::vector<long>\
    \ temp;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\ttemp.push_back(lst[i]);\n\
    \t}\n\t//std::cout << temp.size() << \"\\n\";\n\tlong j = 0;\n\tlong k = temp.size()\
    \ - 1;\n\twhile (j < k) {\n\t\tresult.push_back(temp[j]);\n\t\tresult.push_back(temp[k]);\n\
    \t\tj = j + 1;\n\t\tk = k - 1;\n\t}\n\tif (j == k) {\n\t\tresult.push_back(temp[j]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ a(lst.size());\n    // good luck\n    std::sort(lst.begin(), lst.end());\n \
    \   int len = lst.size();\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n\
    \        if (i % 2 == 0) {\n            a[i] = lst[j];\n            j++;\n   \
    \     } else {\n            a[i] = lst[len - (j - 1)];\n        }\n    }\n   \
    \ return a;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt0k7paxa: /tmp/tmpt0k7paxa.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ret;\n    std::vector<long> v = lst;\n    int i = 0;\n    while(i < v.size()){\n\
    \        auto it = std::min_element(v.begin(), v.end());\n        int idx = std::distance(v.begin(),\
    \ it);\n        ret.push_back(v[idx]);\n        v.erase(v.begin() + idx);\n  \
    \      if(v.size() > 0){\n            it = std::max_element(v.begin(), v.end());\n\
    \            idx = std::distance(v.begin(), it);\n            ret.push_back(v[idx]);\n\
    \            v.erase(v.begin() + idx);\n        }\n        i += 2;\n    }\n  \
    \  return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt6elpzms: /tmp/tmpt6elpzms.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ <= 1) {\n    return lst;\n  }\n\n  std::vector<long> result;\n  if (lst.size()\
    \ % 2 == 0) {\n    std::sort(lst.begin(), lst.end());\n    auto middle = lst.begin()\
    \ + lst.size() / 2;\n    while (lst.begin() != middle) {\n      result.push_back(*lst.begin());\n\
    \      result.push_back(*(middle - 1));\n      ++lst.begin();\n      --middle;\n\
    \    }\n  } else {\n    std::sort(lst.begin(), lst.end());\n    auto middle =\
    \ lst.begin() + lst.size() / 2;\n    while (lst.begin() != middle) {\n      result.push_back(*lst.begin());\n\
    \      result.push_back(*(middle - 1));\n      ++lst.begin();\n      --middle;\n\
    \    }\n    result.push_back(*lst.begin());\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmph2pp4_ap: /tmp/tmph2pp4_ap.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    long i = 0;\n    long j =\
    \ lst.size() - 1;\n    while (i < j) {\n        res.push_back(lst[i]);\n     \
    \   res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if (i == j)\
    \ {\n        res.push_back(lst[i]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ v;\n\tstd::sort(lst.begin(), lst.end());\n\tint n = lst.size();\n\tint i = 0;\n\
    \tint j = n - 1;\n\twhile (i <= j) {\n\t\tv.push_back(lst[i]);\n\t\ti++;\n\t\t\
    if (i <= j) {\n\t\t\tv.push_back(lst[j]);\n\t\t\tj--;\n\t\t}\n\t}\n\treturn v;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n        std::vector<long>\
    \ lst2;\n        std::sort(lst.begin(), lst.end());\n        int i = 0;\n    \
    \    if (lst.size()%2 == 0) {\n                while (i < lst.size()) {\n    \
    \                    lst2.push_back(lst[i]);\n                        lst2.push_back(lst[lst.size()-1-i]);\n\
    \                        i++;\n                }\n        } else {\n         \
    \       while (i < lst.size()-1) {\n                        lst2.push_back(lst[i]);\n\
    \                        lst2.push_back(lst[lst.size()-1-i]);\n              \
    \          i++;\n                }\n                lst2.push_back(lst[i]);\n\
    \        }\n        return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnat0gxwz: /tmp/tmpnat0gxwz.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ result;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0)\n\t\t\tresult.push_back(lst[i / 2]);\n\t\telse\n\
    \t\t\tresult.push_back(lst[lst.size() - i / 2 - 1]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ strangesort;\n  bool odd = true;\n  int i = 0;\n  int j = lst.size() - 1;\n\
    \  while (i < j) {\n    if (odd) {\n      strangesort.push_back(lst[i]);\n   \
    \   ++i;\n    } else {\n      strangesort.push_back(lst[j]);\n      --j;\n   \
    \ }\n    odd = !odd;\n  }\n  if (i == j)\n    strangesort.push_back(lst[i]);\n\
    \  return strangesort;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd3fwk24p: /tmp/tmpd3fwk24p.cpp:34: int main(): Assertion `candidate((std::vector<long>({5,
    6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7}))'' failed.

    '
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto l = lst.begin();\n    auto r = lst.end() - 1;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(*l);\n\
    \            l++;\n        } else {\n            result.push_back(*r);\n     \
    \       r--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long size=lst.size();\n\
    \    if(size==0){\n        return lst;\n    }\n    sort(lst.begin(),lst.end());\n\
    \    std::vector<long> ans(size);\n    long a=0,b=size-1;\n    for(long i=0;i<size;i++){\n\
    \        if(i%2==0){\n            ans[i]=lst[a];\n            a++;\n        }\n\
    \        else{\n            ans[i]=lst[b];\n            b--;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ out;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tout.push_back(lst[i / 2]);\n\t\t} else\
    \ {\n\t\t\tout.push_back(lst[lst.size() - 1 - i / 2]);\n\t\t}\n\t}\n\treturn out;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ newlst;\n  std::vector<long> lst2;\n  if (lst.size() == 0) {\n    return lst;\n\
    \  }\n  //cout << \"New array 1 \";\n  for (auto i : lst) {\n    //cout << i <<\
    \ \" \";\n    newlst.push_back(i);\n  }\n  long max = *max_element(newlst.begin(),\
    \ newlst.end());\n  //cout << endl << \"New array 2 \";\n  for (int i = 0; i <\
    \ newlst.size(); i++) {\n    if (newlst[i] == max) {\n      newlst.erase(newlst.begin()\
    \ + i);\n      break;\n    }\n  }\n  //cout << endl << \"New array 3 \";\n  long\
    \ min = *min_element(newlst.begin(), newlst.end());\n  lst2.push_back(min);\n\
    \  lst2.push_back(max);\n  for (int i = 0; i < newlst.size(); i++) {\n    if (newlst[i]\
    \ == min) {\n      newlst.erase(newlst.begin() + i);\n      break;\n    }\n  }\n\
    \  //cout << endl << \"New array 4 \";\n  // for (auto i : newlst) {\n  //   cout\
    \ << i << \" \";\n  // }\n  while (newlst.size() != 0) {\n    long max = *max_element(newlst.begin(),\
    \ newlst.end());\n    lst2.push_back(max);\n    //cout << endl << \"New array\
    \ 5 \";\n    for (int i = 0; i < newlst.size(); i++) {\n      if (newlst[i] ==\
    \ max) {\n        newlst.erase(newlst.begin() + i);\n        break;\n      }\n\
    \    }\n    if (newlst.size() == 0) {\n      break;\n    }\n    long min = *\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_m6gk8z.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd_m6gk8z.cpp:57:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpd_m6gk8z.cpp:58:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   58 | int main() {\n      |            ^\n/tmp/tmpd_m6gk8z.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpd_m6gk8z.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpd_m6gk8z.cpp:69:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119276
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ % 2 == 0) {\n    std::vector<long> ans;\n    std::sort(lst.begin(), lst.end());\n\
    \    while (lst.size() != 0) {\n      ans.push_back(lst[0]);\n      ans.push_back(lst[lst.size()\
    \ - 1]);\n      lst.erase(lst.begin());\n      lst.pop_back();\n    }\n    return\
    \ ans;\n  } else {\n    std::vector<long> ans;\n    std::sort(lst.begin(), lst.end());\n\
    \    while (lst.size() != 1) {\n      ans.push_back(lst[0]);\n      ans.push_back(lst[lst.size()\
    \ - 1]);\n      lst.erase(lst.begin());\n      lst.pop_back();\n    }\n    ans.push_back(lst[0]);\n\
    \    return ans;\n  }\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int length\
    \ = lst.size();\n  int count = 0;\n  int i = 0;\n  std::vector<long> sorted_list;\n\
    \  if (length == 0) {\n    return lst;\n  }\n  else {\n    while (count != length)\
    \ {\n      sorted_list.push_back(lst[i]);\n      lst.erase(lst.begin() + i);\n\
    \      if (lst.size() != 0) {\n        if (i == lst.size()) {\n          i = 0;\n\
    \        }\n        i = lst.size() - 1 - i;\n      }\n      count++;\n    }\n\
    \    return sorted_list;\n  }\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: 'tmp87e3qqmn: /tmp/tmp87e3qqmn.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119277
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int size = lst.size();\n\
    \  while (size > 0) {\n    if (i % 2 == 0) {\n      result.push_back(lst[0]);\n\
    \      lst.erase(lst.begin());\n    } else {\n      result.push_back(lst[lst.size()\
    \ - 1]);\n      lst.erase(lst.end() - 1);\n    }\n    i++;\n    size--;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Your\
    \ code here.\n  std::vector<long> res;\n  std::sort(lst.begin(), lst.end());\n\
    \  auto max = lst.end() - 1;\n  auto min = lst.begin();\n  while (max >= min)\
    \ {\n    res.push_back(*min);\n    if (max != min) {\n      res.push_back(*max);\n\
    \    }\n    min++;\n    max--;\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119277
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ret;\n    std::vector<long> lstCopy = lst;\n    std::sort(lstCopy.begin(), lstCopy.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n     \
    \       ret.push_back(lstCopy[i / 2]);\n        } else {\n            ret.push_back(lstCopy[lst.size()\
    \ - 1 - i / 2]);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660119276
