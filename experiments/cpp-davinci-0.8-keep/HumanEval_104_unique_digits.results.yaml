language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (int i = 0; i < x.size(); i++) {\n    int\
    \ flag = 0;\n    int num = x[i];\n    while (num) {\n      int rem = num % 10;\n\
    \      if (rem % 2 == 0) {\n        flag = 1;\n        break;\n      }\n     \
    \ num /= 10;\n    }\n    if (flag == 0) {\n      res.push_back(x[i]);\n    }\n\
    \  }\n  sort(res.begin(), res.end());\n  return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int digit=x[i]%10;\n          \
    \  if(digit%2==0){\n                flag=1;\n                break;\n        \
    \    }\n            x[i]=x[i]/10;\n        }\n        if(flag==0){\n         \
    \   res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp1vb65vwy: /tmp/tmp1vb65vwy.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\treturn {};\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpxep14ykf: /tmp/tmpxep14ykf.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        int flag = 0;\n        while(temp!=0){\n            if(temp%2==0){\n\
    \                flag = 1;\n                break;\n            }\n          \
    \  temp = temp/10;\n        }\n        if(flag==0){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// your code here\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpnmm8hj1r: /tmp/tmpnmm8hj1r.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto n : x) {\n        long m = n;\n\
    \        bool unique = true;\n        while (m) {\n            if ((m % 10) %\
    \ 2 == 0) {\n                unique = false;\n                break;\n       \
    \     }\n            m /= 10;\n        }\n        if (unique) {\n            result.push_back(n);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // Your code here.\n  std::vector<long> ans;\n  for(long i=0;i<x.size();i++){\n\
    \    int flag=0;\n    while(x[i]>0){\n      if(x[i]%10==0 || x[i]%10==2 || x[i]%10==4\
    \ || x[i]%10==6 || x[i]%10==8)\n      {\n        flag=1;\n        break;\n   \
    \   }\n      x[i]/=10;\n    }\n    if(flag==0)\n      ans.push_back(x[i]);\n \
    \ }\n  std::sort(ans.begin(),ans.end());\n  return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp_u85uk2b: /tmp/tmp_u85uk2b.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ret_vec;\n\tstd::string s;\n\tint ret = 0;\n\tfor(int\
    \ i = 0; i < x.size(); i++) {\n\t\ts = std::to_string(x[i]);\n\t\tret = 0;\n\t\
    \tfor(int j = 0; j < s.length(); j++) {\n\t\t\tif(s[j] == '0' || s[j] == '2' ||\
    \ s[j] == '4' || s[j] == '6' || s[j] == '8') {\n\t\t\t\tret = 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(ret == 0) {\n\t\t\tret_vec.push_back(x[i]);\n\t\t}\n\t\
    }\n\tstd::sort(ret_vec.begin(), ret_vec.end());\n\treturn ret_vec;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    std::vector<long>::iterator it;\n    bool\
    \ isunique;\n    for(it = x.begin(); it != x.end(); it++) {\n        isunique\
    \ = true;\n        while(*it > 0) {\n            if((*it % 10) % 2 == 0) {\n \
    \               isunique = false;\n                break;\n            }\n   \
    \         *it /= 10;\n        }\n        if(isunique)\n            res.push_back(*it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp9d8_o62a: /tmp/tmp9d8_o62a.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    bool is_unique;\n    for(long i = 0; i <\
    \ x.size(); i++) {\n        long j = x[i];\n        is_unique = true;\n      \
    \  while(j > 0) {\n            if(!(j % 2)) {\n                is_unique = false;\n\
    \                break;\n            }\n            j /= 10;\n        }\n    \
    \    if(is_unique)\n            ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpk_gs23_n: /tmp/tmpk_gs23_n.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    int i,flag,n;\n    std::vector<long> result;\n\
    \    for(int i=0;i<x.size();i++)\n    {\n        flag=0;\n        while(x[i]!=0)\n\
    \        {\n            n=x[i]%10;\n            if(n%2==0)\n            {\n  \
    \              flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0)\n        {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(),result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp6z24wuf5: /tmp/tmp6z24wuf5.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (int i = 0; i < x.size(); i++) {\n    int\
    \ num = x[i];\n    bool is_unique = true;\n    while (num > 0) {\n      int rem\
    \ = num % 10;\n      if (rem % 2 == 0) {\n        is_unique = false;\n       \
    \ break;\n      }\n      num /= 10;\n    }\n    if (is_unique) {\n      res.push_back(x[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmplu_96z2a: /tmp/tmplu_96z2a.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long temp = x[i];\n        while (temp !=\
    \ 0) {\n            if (temp % 2 == 0) {\n                flag = false;\n    \
    \            break;\n            }\n            temp /= 10;\n        }\n     \
    \   if (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool isOk = true;\n        while(num!=0){\n           \
    \ if(num%2==0){\n                isOk = false;\n                break;\n     \
    \       }\n            num/=10;\n        }\n        if(isOk)\n            res.push_back(x[i]);\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = x.size();\n    std::vector<long> v(n);\n    int i = 0;\n    for(long\
    \ long int j = 0; j < n; j++) {\n        long long int a = x[j];\n        int\
    \ flag = 0;\n        while(a) {\n            int rem = a % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            a /= 10;\n        }\n        if(flag == 0) {\n            v[i]\
    \ = x[j];\n            i++;\n        }\n    }\n    std::vector<long> ans(i);\n\
    \    int j = 0;\n    for(int k = 0; k < i; k++) {\n        ans[j] = v[k];\n  \
    \      j++;\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int i,j,k,n;\n    bool flag=false;\n    n=x.size();\n    std::vector<long>v;\n\
    \    for(i=0;i<n;i++)\n    {\n        k=x[i];\n        flag=false;\n        while(k>0)\n\
    \        {\n            j=k%10;\n            if(j%2==0)\n            {\n     \
    \           flag=true;\n                break;\n            }\n            k=k/10;\n\
    \        }\n        if(flag==false)\n        {\n            v.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> z;\n  if(x.size()==0)\n    return z;\n  if(x.size()==1){\n\
    \    if(x[0]%2==0)\n      return z;\n    else\n      return x;\n  }\n  for(int\
    \ i=0;i<x.size();i++){\n    int a=x[i];\n    bool found=false;\n    while(a!=0){\n\
    \      if(a%2==0){\n        found=true;\n        break;\n      }\n      a=a/10;\n\
    \    }\n    if(!found)\n      z.push_back(x[i]);\n  }\n  std::sort(z.begin(),z.end());\n\
    \  return z;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (auto i : x) {\n    auto temp = i;\n    bool\
    \ is_even = false;\n    while (temp > 0) {\n      if (temp % 2 == 0) {\n     \
    \   is_even = true;\n        break;\n      }\n      temp /= 10;\n    }\n    if\
    \ (!is_even)\n      res.push_back(i);\n  }\n  std::sort(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> uniques;\n    std::vector<int> unique_digits;\n   \
    \ for (long i = 0; i < x.size(); i++) {\n        unique_digits.clear();\n    \
    \    while (x[i] > 0) {\n            int digit = x[i] % 10;\n            if (digit\
    \ % 2 == 0) {\n                break;\n            }\n            if (std::find(unique_digits.begin(),\
    \ unique_digits.end(), digit) == unique_digits.end()) {\n                unique_digits.push_back(digit);\n\
    \            }\n            x[i] /= 10;\n        }\n        if (x[i] == 0) {\n\
    \            uniques.push_back(x[i]);\n        }\n    }\n    return uniques;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpivo6kb9b: /tmp/tmpivo6kb9b.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> list;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long tmp=x[i];\n        while(tmp!=0){\n            if(tmp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            tmp=tmp/10;\n\
    \        }\n        if(flag==0){\n            list.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(list.begin(),list.end());\n    return list;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long long i=0;i<x.size();i++){\n    \
    \    long long temp=x[i];\n        int count=0;\n        while(temp!=0){\n   \
    \         int rem=temp%10;\n            if(rem%2==0){\n                count++;\n\
    \                break;\n            }\n            temp=temp/10;\n        }\n\
    \        if(count==0){\n            ans.push_back(x[i]);\n        }\n    }\n \
    \   sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long element : x) {\n        // check\
    \ if element has any even digits\n        long n = element;\n        bool has_even_digit\
    \ = false;\n        while (n > 0) {\n            if ((n % 10) % 2 == 0) {\n  \
    \              has_even_digit = true;\n                break;\n            }\n\
    \            n /= 10;\n        }\n        if (!has_even_digit) {\n           \
    \ result.push_back(element);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ long temp = x[i];\n        while(temp>0){\n            if(temp%10 % 2 == 0){\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(temp == 0){\n            res.push_back(x[i]);\n        }\n    }\n   \
    \ sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// write your code here\n\tstd::vector<long> answer;\n\tfor(long i=0;i<x.size();i++)\n\
    \t{\n\t\tlong n=x[i];\n\t\twhile(n>0)\n\t\t{\n\t\t\tif(n%10%2==0)\n\t\t\t{\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t\tn=n/10;\n\t\t}\n\t\tif(n==0)\n\t\t{\n\t\t\tanswer.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(answer.begin(),answer.end());\n\treturn answer;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto n: x) {\n        bool is_odd = true;\n\
    \        while(n != 0) {\n            if(n % 2 == 0) {\n                is_odd\
    \ = false;\n                break;\n            }\n            n /= 10;\n    \
    \    }\n        if(is_odd) {\n            ans.push_back(n);\n        }\n    }\n\
    \    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpyums4ury: /tmp/tmpyums4ury.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    if (x[i] < 10) {\n\t\t\tresult.push_back(x[i]);\n\t\t}\n\t\telse {\n\t\t\tint\
    \ tmp = x[i];\n\t\t\tbool flag = true;\n\t\t\twhile (tmp > 0) {\n\t\t\t\tif (tmp\
    \ % 2 == 0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\
    tmp /= 10;\n\t\t\t}\n\t\t\tif (flag)\n\t\t\t\tresult.push_back(x[i]);\n\t\t}\n\
    \t}\n\tsort(result.begin(), result.end());\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // your code here...\n  int y;\n  int flag = 0;\n  std::vector<long>::iterator\
    \ it = x.begin();\n  while(it != x.end())\n  {\n    y = *it;\n    while(y != 0)\n\
    \    {\n      if(y%2 == 0)\n      {\n        flag = 1;\n        break;\n     \
    \ }\n      y = y/10;\n    }\n    if(flag == 1)\n    {\n      it = x.erase(it);\n\
    \      flag = 0;\n    }\n    else\n    {\n      it++;\n    }\n  }\n  return x;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpocwa2qka: /tmp/tmpocwa2qka.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int digits;\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n\
    \        digits = 0;\n        long num = x[i];\n        while(num > 0){\n    \
    \        if(num%10%2 == 0){\n                digits = 1;\n                break;\n\
    \            }\n            num = num/10;\n        }\n        if(digits == 0){\n\
    \            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  int even_flag = 0;\n  for(int i = 0; i < x.size();\
    \ i++) {\n    even_flag = 0;\n    while(x[i] != 0) {\n      if((x[i] % 10) % 2\
    \ == 0) {\n        even_flag = 1;\n        break;\n      }\n      x[i] /= 10;\n\
    \    }\n    if(even_flag == 0)\n      res.push_back(x[i]);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpexz9eum2: /tmp/tmpexz9eum2.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ c=0;\n        int num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                c++;\n                break;\n   \
    \         }\n            num=num/10;\n        }\n        if(c==0){\n         \
    \   res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> vec;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long num = x[i];\n        bool flag = false;\n        while(num > 0) {\n\
    \            if((num % 10) % 2 == 0) {\n                flag = true;\n       \
    \         break;\n            }\n            num /= 10;\n        }\n        if(!flag)\
    \ {\n            vec.push_back(x[i]);\n        }\n    }\n    std::sort(vec.begin(),\
    \ vec.end());\n    return vec;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto& num : x) {\n        long temp =\
    \ num;\n        bool flag = true;\n        while(temp) {\n            if(temp\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            temp /= 10;\n        }\n        if(flag) {\n            res.push_back(num);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long l: x) {\n        long temp = l;\n\
    \        long digit;\n        bool is_odd = true;\n        while(temp != 0) {\n\
    \            digit = temp % 10;\n            if(digit % 2 == 0) {\n          \
    \      is_odd = false;\n                break;\n            }\n            temp\
    \ /= 10;\n        }\n        if(is_odd) ans.push_back(l);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int i, j, counter;\n    int n = x.size();\n    std::vector<long> temp;\n\
    \    for(i = 0; i < n; i++) {\n        counter = 0;\n        while(x[i] != 0)\
    \ {\n            j = x[i] % 10;\n            if(j % 2 == 0) {\n              \
    \  counter++;\n            }\n            x[i] = x[i] / 10;\n        }\n     \
    \   if(counter == 0) {\n            temp.push_back(x[i]);\n        }\n    }\n\
    \    sort(temp.begin(), temp.end());\n    return temp;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpeq24wpiy: /tmp/tmpeq24wpiy.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> answer;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    int count = 0;\n\t\tlong y = x[i];\n\t\tint remainder = 0;\n\t\twhile (y != 0)\
    \ {\n\t\t\tremainder = y % 10;\n\t\t\tif (remainder % 2 == 0) {\n\t\t\t\tcount\
    \ = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y / 10;\n\t\t}\n\t\tif (count == 0)\
    \ {\n\t\t\tanswer.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end());\n\
    \treturn answer;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ret;\n\t// for (int i = 0; i < x.size(); i++) {\n\t//\
    \ \tlong num = x[i];\n\t// \tbool has_even = false;\n\t// \twhile (num != 0) {\n\
    \t// \t\tif ((num % 10) % 2 == 0) {\n\t// \t\t\thas_even = true;\n\t// \t\t\t\
    break;\n\t// \t\t}\n\t// \t\tnum /= 10;\n\t// \t}\n\t// \tif (!has_even) {\n\t\
    // \t\tret.push_back(x[i]);\n\t// \t}\n\t// }\n\tstd::vector<long>::iterator it;\n\
    \tfor (it = x.begin(); it != x.end(); it++) {\n\t\tlong num = *it;\n\t\tbool has_even\
    \ = false;\n\t\twhile (num != 0) {\n\t\t\tif ((num % 10) % 2 == 0) {\n\t\t\t\t\
    has_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (!has_even)\
    \ {\n\t\t\tret.push_back(*it);\n\t\t}\n\t}\n\tstd::sort(ret.begin(), ret.end());\n\
    \treturn ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    bool check = true;\n    long i;\n    for(auto& a : x) {\n        for(i\
    \ = a; i != 0; i /= 10) {\n            if(i % 2 == 0) {\n                check\
    \ = false;\n                break;\n            }\n        }\n        if(check)\n\
    \            cout << a << \" \";\n        check = true;\n    }\n    cout << endl;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkift6sqc.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkift6sqc.cpp:22:13: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   22 |             cout\
    \ << a << \" \";\n      |             ^~~~\n      |             std::cout\nIn\
    \ file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n \
    \                from /tmp/tmpkift6sqc.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpkift6sqc.cpp:25:5:\
    \ error: \u2018cout\u2019 was not declared in this scope; did you mean \u2018\
    std::cout\u2019?\n   25 |     cout << endl;\n      |     ^~~~\n      |     std::cout\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpkift6sqc.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpkift6sqc.cpp:25:13:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   25 |     cout << endl;\n      |             ^~~~\n      |\
    \             std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkift6sqc.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n/tmp/tmpkift6sqc.cpp:26:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   26 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> unique_digits_list;\n\tint count = 0;\n\tfor (int i =\
    \ 0; i < x.size(); i++) {\n\t\tlong num = x[i];\n\t\twhile (num != 0) {\n\t\t\t\
    int rem = num % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\tcount = 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif (count == 0) {\n\t\t\tunique_digits_list.push_back(x[i]);\n\
    \t\t}\n\t\tcount = 0;\n\t}\n\tstd::sort(unique_digits_list.begin(), unique_digits_list.end());\n\
    \treturn unique_digits_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int len = x.size();\n    std::vector<long> res;\n    for(int i = 0; i\
    \ < len; i++) {\n        int number = x[i];\n        bool isEvenDigit = false;\n\
    \        while(number > 0) {\n            int digit = number % 10;\n         \
    \   if(digit % 2 == 0) {\n                isEvenDigit = true;\n              \
    \  break;\n            }\n            number /= 10;\n        }\n        if(!isEvenDigit)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  int i = 0;\n  while (i < x.size()) {\n   \
    \ long val = x[i];\n    int count = 0;\n    while (val != 0) {\n      int digit\
    \ = val % 10;\n      if (digit % 2 == 0) {\n        count++;\n      }\n      val\
    \ = val / 10;\n    }\n    if (count == 0) {\n      result.push_back(x[i]);\n \
    \   }\n    i++;\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    int count = 0;\n    for(int i = 0; i < x.size();\
    \ i++) {\n        long j = x[i];\n        while(j) {\n            long k = j %\
    \ 10;\n            if(k % 2 == 0) {\n                count = 1;\n            \
    \    break;\n            }\n            j = j / 10;\n        }\n        if(count\
    \ == 0) {\n            y.push_back(x[i]);\n        }\n        count = 0;\n   \
    \ }\n    std::sort(y.begin(), y.end());\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> answer;\n  // Write your code here\n  int n = x.size();\n\
    \  for(int i=0;i<n;i++){\n    if(x[i]==0){\n      continue;\n    }\n    int temp\
    \ = x[i];\n    int flag = 0;\n    while(temp>0){\n      int rem = temp%10;\n \
    \     if(rem%2==0){\n        flag = 1;\n        break;\n      }\n      temp =\
    \ temp/10;\n    }\n    if(flag==0){\n      answer.push_back(x[i]);\n    }\n  }\n\
    \  sort(answer.begin(),answer.end());\n  return answer;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    std::vector<long> allElementsWithUniqueDigits;\n\
    \    for(long i = 0; i < x.size(); i++){\n        long element = x[i];\n     \
    \   bool allDigitsAreUnique = true;\n        while(element > 0){\n           \
    \ long lastDigit = element % 10;\n            element = element / 10;\n      \
    \      if(lastDigit == 0 || lastDigit == 2 || lastDigit == 4 || lastDigit == 6\
    \ || lastDigit == 8){\n                allDigitsAreUnique = false;\n         \
    \       break;\n            }\n        }\n        if(allDigitsAreUnique){\n  \
    \          allElementsWithUniqueDigits.push_back(x[i]);\n        }\n    }\n  \
    \  std::sort(allElementsWithUniqueDigits.begin(), allElementsWithUniqueDigits.end());\n\
    \    return allElementsWithUniqueDigits;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093401
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    int i = 0;\n    while(i < x.size()) {\n \
    \       int j = x[i];\n        while(j) {\n            if(!(j%2)) {\n        \
    \        x.erase(x.begin()+i);\n                break;\n            }\n      \
    \      j /= 10;\n        }\n        if(j) ++i;\n    }\n    std::sort(x.begin(),\
    \ x.end());\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    int count = 0;\n    for(int i = 0; i <\
    \ x.size(); i++) {\n        for(int j = 0; j < std::to_string(x[i]).length();\
    \ j++) {\n            if((std::to_string(x[i])[j] - '0') % 2 == 0) {\n       \
    \         count = count + 1;\n            }\n        }\n        if(count == 0)\
    \ {\n            result.push_back(x[i]);\n        }\n        count = 0;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp2g_oqrpt: /tmp/tmp2g_oqrpt.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093401
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tint count,i,j,temp=0;\n\tstd::vector<long> v;\n\tfor(int i=0;i<x.size();i++)\n\
    \t{\n\t\tcount=0;\n\t\twhile(x[i]!=0)\n\t\t{\n\t\t\tif((x[i]%10)%2==0)\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tx[i]=x[i]/10;\n\t\t}\n\t\tif(count==0)\n\t\
    \t{\n\t\t\tv.push_back(temp);\n\t\t}\n\t\ttemp=x[i];\n\t}\n\t\n\tstd::sort(v.begin(),v.end());\n\
    \treturn v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpf1219vf0: /tmp/tmpf1219vf0.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> output;\n    for(auto& num : x) {\n        if(!unique_digit(num))\
    \ {\n            output.push_back(num);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpod1yxgs5.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpod1yxgs5.cpp:14:13: error: \u2018unique_digit\u2019 was\
    \ not declared in this scope; did you mean \u2018unique_digits\u2019?\n   14 |\
    \         if(!unique_digit(num)) {\n      |             ^~~~~~~~~~~~\n      |\
    \             unique_digits\n"
  stdout: ''
  timestamp: 1660093402
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        if(x[i]%2!=0)\
    \ ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpkv9c1lgn: /tmp/tmpkv9c1lgn.cpp:22: int main(): Assertion `candidate((std::vector<long>({152,
    323, 1422, 10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> unique_list;\n\tfor (int i = 0; i < x.size(); i++) {\n\
    \t\tif (x[i] % 2 != 0) {\n\t\t\tunique_list.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(unique_list.begin(),\
    \ unique_list.end());\n\treturn unique_list;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpthol_kub: /tmp/tmpthol_kub.cpp:24: int main(): Assertion `candidate((std::vector<long>({152,
    323, 1422, 10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> a;\n  for(long i=0;i<x.size();i++)\n  {\n    int flag=0;\n\
    \    long t=x[i];\n    while(t!=0)\n    {\n      if((t%10)%2==0)\n      {\n  \
    \      flag=1;\n        break;\n      }\n      t=t/10;\n    }\n    if(flag==0)\n\
    \    {\n      a.push_back(x[i]);\n    }\n  }\n  sort(a.begin(),a.end());\n  return\
    \ a;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        long\
    \ n=x[i];\n        while(n>0){\n            if(n%2==0){\n                v.push_back(x[i]);\n\
    \                break;\n            }\n            n=n/10;\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpsxr_x3fp: /tmp/tmpsxr_x3fp.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> output;\n    // Write your code here\n    return output;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp2ygyoozv: /tmp/tmp2ygyoozv.cpp:18: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        if(isUnique(x[i]))\n\
    \            res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpaw2um7.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwpaw2um7.cpp:14:12: error: \u2018isUnique\u2019 was not\
    \ declared in this scope\n   14 |         if(isUnique(x[i]))\n      |        \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // write your code here\n  std::vector<long> result;\n  for(unsigned int\
    \ i = 0; i < x.size(); i++) {\n    bool found = false;\n    while(x[i] > 0) {\n\
    \      if(x[i] % 2 == 0) {\n        found = true;\n        break;\n      }\n \
    \     x[i] /= 10;\n    }\n    if(!found) {\n      result.push_back(x[i]);\n  \
    \  }\n  }\n  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpmb9q0539: /tmp/tmpmb9q0539.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long>ans;\n    bool is_unique=true;\n    for(auto it:x){\n\
    \        is_unique=true;\n        while(it){\n            if(it%2==0){\n     \
    \           is_unique=false;\n                break;\n            }\n        \
    \    it/=10;\n        }\n        if(is_unique)ans.push_back(it);\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpvgzv1qwj: /tmp/tmpvgzv1qwj.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tvector<long> out;\n\tfor(long i=0;i<x.size();i++){\n\t\tint flag=0;\n\t\
    \twhile(x[i]>0){\n\t\t\tint digit=x[i]%10;\n\t\t\tif(digit%2==0){\n\t\t\t\tflag=1;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i]=x[i]/10;\n\t\t}\n\t\tif(flag==0){\n\t\t\t\
    out.push_back(x[i]);\n\t\t}\n\t}\n\tsort(out.begin(),out.end());\n\treturn out;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfrwrc19a.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfrwrc19a.cpp:12:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |  vector<long> out;\n      |  ^~~~~~\n/tmp/tmpfrwrc19a.cpp:12:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrwrc19a.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrwrc19a.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpfrwrc19a.cpp:12:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |  vector<long>\
    \ out;\n      |         ^~~~\n/tmp/tmpfrwrc19a.cpp:24:4: error: \u2018out\u2019\
    \ was not declared in this scope\n   24 |    out.push_back(x[i]);\n      |   \
    \ ^~~\n/tmp/tmpfrwrc19a.cpp:27:7: error: \u2018out\u2019 was not declared in this\
    \ scope\n   27 |  sort(out.begin(),out.end());\n      |       ^~~\n/tmp/tmpfrwrc19a.cpp:27:2:\
    \ error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018\
    std::sort\u2019?\n   27 |  sort(out.begin(),out.end());\n      |  ^~~~\n     \
    \ |  std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmpfrwrc19a.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:2"
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// step 1: sort the vector\n\tstd::sort(x.begin(), x.end());\n\t// step\
    \ 2: loop over the vector and remove duplicates\n\t// we will also check if there\
    \ is any even number\n\tstd::vector<long> ret;\n\tfor (int i = 0; i < x.size();\
    \ i++) {\n\t\tlong num = x[i];\n\t\t// check for even digit\n\t\tbool is_valid\
    \ = true;\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tis_valid\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (is_valid)\
    \ {\n\t\t\tret.push_back(x[i]);\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        int flag=0;\n   \
    \     while(i>0){\n            if(i%2==0){\n                flag=1;\n        \
    \        break;\n            }\n            i/=10;\n        }\n        if(flag==0){\n\
    \            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpwgg4js93: /tmp/tmpwgg4js93.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool even = false;\n        while (num > 0)\
    \ {\n            if ((num % 10) % 2 == 0) {\n                even = true;\n  \
    \              break;\n            }\n            num /= 10;\n        }\n    \
    \    if (!even) {\n            unique.push_back(x[i]);\n        }\n    }\n   \
    \ std::sort(unique.begin(), unique.end());\n    return unique;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> v;\n  for(int i=0;i<x.size();i++){\n    int flag=0;\n\
    \    while(x[i]!=0){\n      int a=x[i]%10;\n      if(a%2==0){\n        flag=1;\n\
    \        break;\n      }\n      x[i]=x[i]/10;\n    }\n    if(flag==0){\n     \
    \ v.push_back(x[i]);\n    }\n  }\n  sort(v.begin(),v.end());\n  return v;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmprecue0uw: /tmp/tmprecue0uw.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long item : x) {\n        long num =\
    \ item;\n        int count = 0;\n        while(num != 0) {\n            int rem\
    \ = num % 10;\n            if(rem % 2 == 0) {\n                count = 1;\n  \
    \              break;\n            }\n            num = num / 10;\n        }\n\
    \        if(count == 0) {\n            res.push_back(item);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp0ngx7mrs: /tmp/tmp0ngx7mrs.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> temp = x;\n\tstd::vector<long> output;\n\tfor (long i\
    \ = 0; i < temp.size(); i++) {\n\t\twhile (temp[i] != 0) {\n\t\t\tint rem = temp[i]\
    \ % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\tx.erase(x.begin() + i);\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\ttemp[i] = temp[i] / 10;\n\t\t}\n\t}\n\tstd::sort(x.begin(),\
    \ x.end());\n\treturn x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n    long n = x.size();\n    int count;\n    std::vector<long>\
    \ res;\n    for(int i=0;i<n;i++){\n    \tcount = 0;\n    \twhile(x[i]!=0){\n \
    \   \t\tif(x[i]%2==0){\n    \t\t\tcount++;\n    \t\t}\n    \t\tx[i]/=10;\n   \
    \ \t}\n    \tif(count==0){\n    \t\tres.push_back(x[i]);\n    \t}\n    }\n   \
    \ sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpcmr623iu: /tmp/tmpcmr623iu.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  for (auto number : x) {\n    if (number %\
    \ 2 == 0) continue;\n    std::string str = std::to_string(number);\n    bool even\
    \ = false;\n    for (auto digit : str) {\n      if ((digit - '0') % 2 == 0) {\n\
    \        even = true;\n        break;\n      }\n    }\n    if (!even) result.push_back(number);\n\
    \  }\n  std::sort(result.begin(), result.end());\n  return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i : x) {\n        if (has_unique_digits(i))\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6wm6qv1j.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6wm6qv1j.cpp:14:13: error: \u2018has_unique_digits\u2019\
    \ was not declared in this scope; did you mean \u2018unique_digits\u2019?\n  \
    \ 14 |         if (has_unique_digits(i)) {\n      |             ^~~~~~~~~~~~~~~~~\n\
    \      |             unique_digits\n"
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto a: x) {\n        bool flag = false;\n\
    \        for(auto b: std::to_string(a)) {\n            if((b - '0') % 2 == 0)\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n        if(!flag) res.push_back(a);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long size=x.size();\n  std::vector<long> v;\n  long i=0;\n  while(i<size){\n\
    \    int flag=0;\n    long number=x[i];\n    while(number>0){\n      if(number%10==0\
    \ || number%10==2 || number%10==4 || number%10==6 || number%10==8){\n        flag=1;\n\
    \        break;\n      }\n      number=number/10;\n    }\n    if(flag==0){\n \
    \     v.push_back(x[i]);\n    }\n    i++;\n  }\n  sort(v.begin(),v.end());\n \
    \ return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> out;\n    std::regex reg(R\"((.*[02468].*))\");\n \
    \   for (int i = 0; i < x.size(); i++) {\n        if (!std::regex_match(std::to_string(x[i]),\
    \ reg))\n            out.push_back(x[i]);\n    }\n    return out;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpuw5ru4nn: /tmp/tmpuw5ru4nn.cpp:22: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> results;\n  for (long i = 0; i < x.size(); i++) {\n \
    \   if (x[i] > 10) {\n      if (x[i] / 10 % 2 != 0 || x[i] % 10 % 2 != 0) {\n\
    \        results.push_back(x[i]);\n      }\n    } else {\n      results.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(results.begin(), results.end());\n  return results;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp17mtl5it: /tmp/tmp17mtl5it.cpp:28: int main(): Assertion `candidate((std::vector<long>({152,
    323, 1422, 10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp0rla2721: /tmp/tmp0rla2721.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // Implement the body of this function\n  return x;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp41ewp82u: /tmp/tmp41ewp82u.cpp:17: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> sorted = x;\n\tstd::sort(sorted.begin(), sorted.end());\n\
    \tint i = 0;\n\twhile (i < sorted.size()) {\n\t\tlong current = sorted[i];\n\t\
    \twhile (current > 0) {\n\t\t\tint last = current % 10;\n\t\t\tif (last % 2 ==\
    \ 0) {\n\t\t\t\tsorted.erase(sorted.begin() + i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\tcurrent /= 10;\n\t\t}\n\t\tif (current > 0) {\n\t\t\ti++;\n\t\t}\n\t}\n\t\
    return sorted;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> myvec;\n\tstd::vector<long> myvec1;\n\tstd::vector<long>\
    \ myvec2;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tstd::string s = std::to_string(x[i]);\n\
    \t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\tif (s[j] == '2' || s[j] == '4'\
    \ || s[j] == '6' || s[j] == '8' || s[j] == '0') {\n\t\t\t\tmyvec.push_back(x[i]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(myvec.begin(), myvec.end());\n\
    \tmyvec1 = x;\n\tfor (int i = 0; i < myvec.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < myvec1.size(); j++) {\n\t\t\tif (myvec[i] == myvec1[j]) {\n\t\t\t\tmyvec1.erase(myvec1.begin()\
    \ + j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn myvec1;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp_n2nmk4n: /tmp/tmp_n2nmk4n.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Write your code here.\n\tstd::vector<long> output;\n\tbool isNotEven\
    \ = true;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tlong temp = x[i];\n\t\t\
    while (temp) {\n\t\t\tif (temp % 2 == 0) {\n\t\t\t\tisNotEven = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif (isNotEven) {\n\t\t\toutput.push_back(x[i]);\n\
    \t\t}\n\t\tisNotEven = true;\n\t}\n\tsort(output.begin(), output.end());\n\treturn\
    \ output;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code goes here\n    std::vector<long> result;\n    for(auto i:x){\n\
    \        std::string s = std::to_string(i);\n        bool even = false;\n    \
    \    for(int j=0;j<s.length();j++){\n            int d = s[j] - '0';\n       \
    \     if(d%2==0){\n                even = true;\n                break;\n    \
    \        }\n        }\n        if(!even){\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(),result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    std::string s;\n    long a;\n    for(int i=0;i<x.size();i++){\n\
    \        a=x[i];\n        while(a!=0){\n            if(a%10%2==0){\n         \
    \       break;\n            }\n            a=a/10;\n        }\n        if(a==0){\n\
    \            v.push_back(x[i]);\n        }\n    }\n    sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> output;\n    for(long i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while(num > 0) {\n\
    \            if(num % 2 == 0) {\n                flag = false;\n             \
    \   break;\n            }\n            num /= 10;\n        }\n        if(flag)\
    \ {\n            output.push_back(x[i]);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpiapmslfm: /tmp/tmpiapmslfm.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  for(int i=0;i<x.size();i++){\n      long item=x[i];\n      while(item>0){\n\
    \          if(item%2==0){\n              x.erase(x.begin()+i);\n             \
    \ i--;\n              break;\n          }\n          item/=10;\n      }\n  }\n\
    \  sort(x.begin(),x.end());\n  return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    std::vector<long> res;\n    for(auto it\
    \ : x){\n        if(it<=9) res.push_back(it);\n        if(it>9 && it%2!=0){\n\
    \            int divider = 10;\n            while(it!=0){\n                if(it%divider%2==0)\
    \ break;\n                divider*=10;\n            }\n            if(it%divider==0)\
    \ res.push_back(it);\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> arr;\n    for(int i=0;i<x.size();i++){\n        int\
    \ check=0;\n        while(x[i]!=0){\n            if((x[i]%10)%2==0){\n       \
    \         check=1;\n                break;\n            }\n            x[i]/=10;\n\
    \        }\n        if(check==0){\n            arr.push_back(x[i]);\n        }\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpawpu3bo7: /tmp/tmpawpu3bo7.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto ele: x) {\n        int d = 0;\n\
    \        while(ele) {\n            d = ele % 10;\n            if(d % 2 == 0)\n\
    \                break;\n            ele /= 10;\n        }\n        if(ele ==\
    \ 0)\n            ans.push_back(ele);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmppbxz2nxi: /tmp/tmppbxz2nxi.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n    std::vector<long> list;\n    int l = x.size();\n\
    \    bool flag = true;\n    int n;\n    for(int i=0;i<l;i++){\n        flag =\
    \ true;\n        n = x[i];\n        if(n%2 == 0){\n            flag = false;\n\
    \        }\n        while(n>0){\n            if(n%10%2 == 0){\n              \
    \  flag = false;\n                break;\n            }\n            n = n/10;\n\
    \        }\n        if(flag){\n            list.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(list.begin(),list.end());\n    return list;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool has_even_digits = false;\n        while (x[i] > 0) {\n         \
    \   int digit = x[i] % 10;\n            if (digit % 2 == 0) {\n              \
    \  has_even_digits = true;\n                break;\n            }\n          \
    \  x[i] /= 10;\n        }\n        if (!has_even_digits) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpulkhgl_5: /tmp/tmpulkhgl_5.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  for (int i = 0; i < x.size(); i++) {\n   \
    \ int tmp = x[i];\n    int has_even = 0;\n    while (tmp > 0) {\n      if ((tmp\
    \ % 10) % 2 == 0) {\n        has_even = 1;\n        break;\n      }\n      tmp\
    \ /= 10;\n    }\n    if (has_even == 0)\n      result.push_back(x[i]);\n  }\n\
    \  sort(result.begin(), result.end());\n  return result;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  //Type your code here\n  for(auto i:x){\n\
    \      int flag=0;\n      while(i!=0){\n          int r=i%10;\n          if(r%2==0){\n\
    \              flag=1;\n              break;\n          }\n          i=i/10;\n\
    \      }\n      if(flag==0){\n          result.push_back(i);\n      }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpiscnzuyk: /tmp/tmpiscnzuyk.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long>  y;\n    bool flag = false;\n    int no, temp;\n  \
    \  for(int i = 0; i < x.size(); i++) {\n        no = x[i];\n        while(no >\
    \ 0) {\n            temp = no % 10;\n            if(temp % 2 == 0) {\n       \
    \         flag = true;\n                break;\n            }\n            no\
    \ = no / 10;\n        }\n        if(flag == false)\n            y.push_back(x[i]);\n\
    \        flag = false;\n    }\n    std::sort(y.begin(), y.end());\n    return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    vector<long> sorted_array;\n    for(int i=0;i<x.size();i++){\n      \
    \  long y = x[i];\n        int flag = 0;\n        while(y>0){\n            if(y%10%2==0){\n\
    \                flag = 1;\n                break;\n            }\n          \
    \  y /= 10;\n        }\n        if(flag==0){\n            sorted_array.push_back(x[i]);\n\
    \        }\n    }\n    sort(sorted_array.begin(),sorted_array.end());\n    return\
    \ sorted_array;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2x4jlrw.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw2x4jlrw.cpp:12:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |     vector<long> sorted_array;\n      |     ^~~~~~\n\
    /tmp/tmpw2x4jlrw.cpp:12:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw2x4jlrw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw2x4jlrw.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpw2x4jlrw.cpp:12:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |     vector<long>\
    \ sorted_array;\n      |            ^~~~\n/tmp/tmpw2x4jlrw.cpp:24:13: error: \u2018\
    sorted_array\u2019 was not declared in this scope\n   24 |             sorted_array.push_back(x[i]);\n\
    \      |             ^~~~~~~~~~~~\n/tmp/tmpw2x4jlrw.cpp:27:10: error: \u2018sorted_array\u2019\
    \ was not declared in this scope\n   27 |     sort(sorted_array.begin(),sorted_array.end());\n\
    \      |          ^~~~~~~~~~~~\n/tmp/tmpw2x4jlrw.cpp:27:5: error: \u2018sort\u2019\
    \ was not declared in this scope; did you mean \u2018std::sort\u2019?\n   27 |\
    \     sort(sorted_array.begin(),sorted_array.end());\n      |     ^~~~\n     \
    \ |     std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n  \
    \               from "
  stdout: ''
  timestamp: 1660093403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // this function checks that whether the number has any even digit or not\n\
    \  auto even_check = [] (int n) {\n    // this variable is used to decide that\
    \ whether the given number is even or not\n    bool status = true;\n    // if\
    \ the number is negative or its last digit is not even then we are not gonna process\
    \ it\n    while (n > 0) {\n      // we store the last digit of n in n_last \n\
    \      int n_last = n % 10;\n      // if the last digit is even then it is not\
    \ a suitable element for us\n      if (n_last % 2 == 0) {\n        status = false;\n\
    \        break;\n      }\n      // after that we remove the last digit of n by\
    \ dividing it by 10\n      n /= 10;\n    }\n    return status;\n  };\n  // this\
    \ vector is used to store the elements with no even digit\n  std::vector<long>\
    \ ans;\n  // so, now we traverse all elements of vector x to check that element\
    \ and if\n  // it is suitable then we push it in our vector\n  for (auto itr =\
    \ x.begin(); itr != x.end(); itr++) {\n    // if the element is suitable then\
    \ push it into ans\n    if (even_check(*itr)) {\n      ans.push_back(*itr);\n\
    \    }\n  }\n  // now sort the vector in increasing order\n  std::sort(ans.begin(),\
    \ ans.end());\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    \n    for(int i=0;i<x.size();i++)\n    {\n        int n=x[i];\n     \
    \   int count=0;\n        while(n>0)\n        {\n            int r=n%10;\n   \
    \         if(r%2==0)\n            {\n                count++;\n            }\n\
    \            n=n/10;\n        }\n        if(count>0)\n        {\n            x.erase(x.begin()+i);\n\
    \            i--;\n        }\n    }\n    return x;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpjk38_xop: /tmp/tmpjk38_xop.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    int tmp;\n    int flag;\n    for(auto i:x){\n\
    \        tmp = i;\n        flag = 0;\n        while(tmp>0){\n            if(tmp%2==0){\n\
    \                flag = 1;\n                break;\n            }\n          \
    \  tmp = tmp/10;\n        }\n        if(flag==0){\n            res.push_back(i);\n\
    \        }\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n\
    \        long temp = x[i];\n        bool flag = true;\n        while(temp){\n\
    \            if(temp%10==0 || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      temp = temp/10;\n        }\n        if(flag){\n            v.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093405
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// std::set<long> res;\n\t// for(long i = 0; i < x.size(); i++) {\n\t//\
    \ \tbool flag = true;\n\t// \twhile(x[i] != 0) {\n\t// \t\tif((x[i] % 10) % 2\
    \ == 0) {\n\t// \t\t\tflag = false;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\t\
    x[i] /= 10;\n\t// \t}\n\t// \tif(flag)\n\t// \t\tres.insert(x[i]);\n\t// }\n\t\
    // std::vector<long> ans;\n\t// for(auto it = res.begin(); it != res.end(); it++)\n\
    \t// \tans.push_back(*it);\n\t// return ans;\n\tstd::vector<long> ans;\n\tfor(long\
    \ i = 0; i < x.size(); i++) {\n\t\tbool flag = true;\n\t\twhile(x[i] != 0) {\n\
    \t\t\tif((x[i] % 10) % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t\tx[i] /= 10;\n\t\t}\n\t\tif(flag)\n\t\t\tans.push_back(x[i]);\n\t}\n\t\
    std::sort(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp_ecus970: /tmp/tmp_ecus970.cpp:47: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Enter your code here\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp3mp6pdcf: /tmp/tmp3mp6pdcf.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> v;\n\tstd::vector<long>::iterator it;\n\tfor(it=x.begin();it!=x.end();it++)\n\
    \t{\n\t\tif((*it)%2==0)\n\t\t\tv.push_back(*it);\n\t}\n\treturn v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpvqrk6x6b: /tmp/tmpvqrk6x6b.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    for (auto num : x) {\n        if (num < 10)\
    \ {\n            ret.push_back(num);\n            continue;\n        }\n     \
    \   auto temp = num;\n        bool flag = true;\n        while (temp > 0) {\n\
    \            if (temp % 2 == 0) {\n                flag = false;\n           \
    \     break;\n            }\n            temp /= 10;\n        }\n        if (flag)\
    \ {\n            ret.push_back(num);\n        }\n    }\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093405
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  /* Your code here */\n  // how to get digits of a number? \n  // while\
    \ x > 0:\n  //   num % 10\n  //   x = x / 10\n  std::vector<long> result;\n  for\
    \ (long i = 0; i < x.size(); i++) {\n    long temp = x[i];\n    bool even = false;\n\
    \    while (temp > 0) {\n      if ((temp % 10) % 2 == 0) {\n        even = true;\n\
    \        break;\n      }\n      temp = temp / 10;\n    }\n    if (!even) {\n \
    \     result.push_back(x[i]);\n    }\n  }\n  sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093405
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto& e : x) {\n        long temp = e;\n\
    \        bool flag = true;\n        while(temp > 0) {\n            if((temp %\
    \ 10) % 2 == 0) {\n                flag = false;\n                break;\n   \
    \         }\n            temp /= 10;\n        }\n        if(flag) ans.push_back(e);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> evens = {0, 2, 4, 6, 8};\n    std::vector<long> result;\n\
    \    // replace the 0 here with the implementation\n    for (long num : x) {\n\
    \        bool no_even = true;\n        long my_num = num;\n        while (my_num\
    \ > 0) {\n            long last_digit = my_num % 10;\n            if (std::find(evens.begin(),\
    \ evens.end(), last_digit) != evens.end()) {\n                no_even = false;\n\
    \                break;\n            }\n            my_num /= 10;\n        }\n\
    \        if (no_even) {\n            result.push_back(num);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  for (int i = 0; i < x.size(); i++) {\n   \
    \ if (x[i] / 10 == 0) {\n      result.push_back(x[i]);\n    } else {\n      int\
    \ copy = x[i];\n      bool flag = true;\n      while (copy) {\n        if (copy\
    \ % 10 % 2 == 0) {\n          flag = false;\n          break;\n        }\n   \
    \     copy /= 10;\n      }\n      if (flag) {\n        result.push_back(x[i]);\n\
    \      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpnzmgl2zw: /tmp/tmpnzmgl2zw.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_vec;\n    for(auto i : x) {\n        if(i <\
    \ 10) {\n            unique_vec.push_back(i);\n        } else {\n            while(i\
    \ > 0) {\n                if(i % 10 % 2 == 0)\n                    break;\n  \
    \              i /= 10;\n            }\n            if(i == 0)\n             \
    \   unique_vec.push_back(i);\n        }\n    }\n    return unique_vec;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp6df2sz8k: /tmp/tmp6df2sz8k.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    std::for_each(x.begin(), x.end(), [&result](long\
    \ num) {\n        while (num > 0) {\n            if (num % 2 == 0) {\n       \
    \         return;\n            }\n            num /= 10;\n        }\n        result.push_back(num);\n\
    \    });\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpn0lo5rfq: /tmp/tmpn0lo5rfq.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    std::vector<long>::iterator itr = x.begin();\n\
    \    while(itr != x.end()) {\n        long num = *itr;\n        while(num) {\n\
    \            if((num % 10) % 2 == 0) {\n                itr = x.erase(itr);\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if(num == 0) {\n            itr++;\n        }\n    }\n    return x;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp710dmz8i: /tmp/tmp710dmz8i.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    bool flag = false;\n    for(auto i : x)\
    \ {\n        long temp = i;\n        while(temp > 0) {\n            if(temp %\
    \ 10 == 0) {\n                flag = true;\n                break;\n         \
    \   }\n            temp /= 10;\n        }\n        if(!flag)\n            result.push_back(i);\n\
    \        flag = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp1v9sf2yi: /tmp/tmp1v9sf2yi.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_digits_vector;\n    for(long i = 0; i < x.size();\
    \ i++) {\n        long digit = x[i];\n        bool flag = true;\n        while(digit\
    \ > 0) {\n            if((digit % 10) % 2 == 0) {\n                flag = false;\n\
    \                break;\n            }\n            digit /= 10;\n        }\n\
    \        if(flag) {\n            unique_digits_vector.push_back(x[i]);\n     \
    \   }\n    }\n    std::sort(unique_digits_vector.begin(), unique_digits_vector.end());\n\
    \    return unique_digits_vector;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your solution here\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < x.size(); i++){\n        int flag = 0;\n        while(x[i] > 0){\n\
    \            if(x[i] % 10 % 2 == 0){\n                flag = 1;\n            \
    \    break;\n            }\n            x[i] /= 10;\n        }\n        if(flag\
    \ == 0){\n            ans.push_back(x[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpdgqrapl4: /tmp/tmpdgqrapl4.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(long i : x) {\n        if(i % 2 != 0) {\n\
    \            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp6s30qvbp: /tmp/tmp6s30qvbp.cpp:22: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (std::vector<long>::iterator it =\
    \ x.begin(); it != x.end(); ++it) {\n        long number = *it;\n        bool\
    \ has_even_digit = false;\n        while (number > 0) {\n            if ((number\
    \ % 10) % 2 == 0) {\n                has_even_digit = true;\n                break;\n\
    \            }\n            number /= 10;\n        }\n        if (!has_even_digit)\
    \ {\n            result.push_back(*it);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> array;\n    for(int i=0;i<x.size();i++){\n        if(x[i]>0){\n\
    \            int flag=0;\n            while(x[i]>0){\n                int temp=x[i]%10;\n\
    \                if(temp%2==0){\n                    flag=1;\n               \
    \     break;\n                }\n                x[i]=x[i]/10;\n            }\n\
    \            if(flag==0){\n                array.push_back(x[i]);\n          \
    \  }\n        }\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmplporr6eb: /tmp/tmplporr6eb.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto i : x) {\n        auto temp = i;\n\
    \        bool flag = false;\n        while(temp) {\n            if(temp % 2 ==\
    \ 0) {\n                flag = true;\n                break;\n            }\n\
    \            temp /= 10;\n        }\n        if(!flag) {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        bool is_odd=true;\n\
    \        while(i>0){\n            int digit=i%10;\n            if(digit%2==0){\n\
    \                is_odd=false;\n                break;\n            }\n      \
    \      i/=10;\n        }\n        if(is_odd) res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpavsqtnkc: /tmp/tmpavsqtnkc.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // EDIT CODE HERE\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmppkcp3wj0: /tmp/tmppkcp3wj0.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long count;\n    std::vector<long> even;\n    std::vector<long> odd;\n\
    \    std::vector<long> temp;\n    for(int i=0;i<x.size();i++){\n        if(x[i]%2==0){\n\
    \            even.push_back(x[i]);\n        }\n        else{\n            odd.push_back(x[i]);\n\
    \        }\n    }\n    for(int i=0;i<odd.size();i++){\n        for(int j=i+1;j<odd.size();j++){\n\
    \            if(odd[i]>odd[j]){\n                temp.push_back(odd[i]);\n   \
    \             odd[i]=odd[j];\n                odd[j]=temp[0];\n              \
    \  temp.clear();\n            }\n        }\n    }\n    return odd;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp382vwyi2: /tmp/tmp382vwyi2.cpp:39: int main(): Assertion `candidate((std::vector<long>({152,
    323, 1422, 10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long val = x[i];\n        bool is_even = false;\n        while(val) {\n\
    \            int digit = val % 10;\n            if(digit % 2 == 0) {\n       \
    \         is_even = true;\n                break;\n            }\n           \
    \ val /= 10;\n        }\n        if(!is_even) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long>odd_list;\n  for(long i=0;i<x.size();i++)\n  {\n    long\
    \ number = x[i];\n    bool is_odd = true;\n    while(number > 0)\n    {\n    \
    \  long digit = number % 10;\n      if (digit % 2 == 0)\n      {\n        is_odd\
    \ = false;\n        break;\n      }\n      number = number / 10;\n    }\n    if\
    \ (is_odd)\n    {\n      odd_list.push_back(x[i]);\n    }\n  }\n  sort(odd_list.begin(),odd_list.end());\n\
    \  return odd_list;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        int count = 0;\n\
    \        while(i){\n            if(i%2 == 0){\n                count = 1;\n  \
    \              break;\n            }\n            i = i/10;\n        }\n     \
    \   if(count==0){\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp2jqbg6xq: /tmp/tmp2jqbg6xq.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> arr;\n  for(auto i:x){\n    long temp = i;\n    bool\
    \ flag = false;\n    while(temp>0){\n      if(temp%2==0){\n        flag = true;\n\
    \        break;\n      }\n      temp /= 10;\n    }\n    if(!flag){\n      arr.push_back(i);\n\
    \    }\n  }\n  std::sort(arr.begin(),arr.end());\n  return arr;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        int j=i;\n      \
    \  while(j>0){\n            if(j%2==0){\n                j=0;\n            }\n\
    \            else j/=10;\n        }\n        if(j!=0) res.push_back(i);\n    }\n\
    \    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp09ig6akp: /tmp/tmp09ig6akp.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Remove all the even digits\n\tauto isEven = [](int n) { return n % 2\
    \ == 0; };\n\tstd::vector<long> oddElements;\n\tstd::transform(x.begin(), x.end(),\
    \ std::back_inserter(oddElements),\n\t\t[isEven](int n) {\n\t\t\tint temp = n;\n\
    \t\t\twhile (temp > 0) {\n\t\t\t\tif (isEven(temp % 10))\n\t\t\t\t\treturn 0;\n\
    \t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\treturn n;\n\t\t});\n\toddElements.erase(std::remove(oddElements.begin(),\
    \ oddElements.end(), 0), oddElements.end());\n\treturn oddElements;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp6aloe1h7: /tmp/tmp6aloe1h7.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tint i;\n\tbool f = true;\n\tfor(i = 0; i < x.size(); i++) {\n\t\twhile(x[i]\
    \ > 0) {\n\t\t\tint d = x[i] % 10;\n\t\t\tif(d % 2 == 0) {\n\t\t\t\tf = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] /= 10;\n\t\t}\n\t\tif(f == false) {\n\t\t\t\
    x.erase(x.begin() + i);\n\t\t\ti--;\n\t\t\tf = true;\n\t\t}\n\t}\n\tsort(x.begin(),\
    \ x.end());\n\treturn x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpzrgbqa0y: /tmp/tmpzrgbqa0y.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ num = x[i];\n        int flag = 0;\n        while(num>0){\n            int digit\
    \ = num%10;\n            if(digit%2==0){\n                flag = 1;\n        \
    \        break;\n            }\n            num = num/10;\n        }\n       \
    \ if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    for(long i=0;i<x.size();i++)\n    {\n        long count=0;\n        long\
    \ n=x[i];\n        while(n>0)\n        {\n            long digit=n%10;\n     \
    \       if(digit%2==0)\n            {\n                count++;\n            }\n\
    \            n=n/10;\n        }\n        if(count==0)\n        {\n           \
    \ std::cout<<x[i]<<\" \";\n        }\n    }\n    return x;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpkyiiiro3: /tmp/tmpkyiiiro3.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpp_806e39: /tmp/tmpp_806e39.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    int len = x.size();\n    bool flag;\n    for(int\
    \ i=0; i<len; i++) {\n        long num = x[i];\n        flag = true;\n       \
    \ while(num>0) {\n            if(num%10%2==0) {\n                flag = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if(flag) {\n            y.push_back(x[i]);\n        }\n    }\n    sort(y.begin(),\
    \ y.end());\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // Your code here\n  std::vector<long> sorted_v;\n  int num;\n  std::sort(x.begin(),\
    \ x.end());\n  for(auto n: x){\n    num = n;\n    while(num != 0){\n      if(num\
    \ % 2 == 0){\n        break;\n      }\n      num /= 10;\n    }\n    if(num ==\
    \ 0){\n      sorted_v.push_back(n);\n    }\n  }\n  return sorted_v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool found_even = false;\n        while (x[i] > 0) {\n            if\
    \ ((x[i] % 10) % 2 == 0) {\n                found_even = true;\n             \
    \   break;\n            }\n            x[i] /= 10;\n        }\n        if (!found_even)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp1bleklws: /tmp/tmp1bleklws.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // 1st - we will sort the array\n    sort(x.begin(), x.end());\n    std::vector<long>\
    \ unique_arr;\n    long n = x.size();\n    bool flag = true;\n    long i = 0;\n\
    \    while(i < n){\n        flag = true;\n        long temp = x[i];\n        while(temp\
    \ != 0){\n            if(temp % 2 == 0){\n                flag = false;\n    \
    \            break;\n            }\n            temp = temp / 10;\n        }\n\
    \        if(flag){\n            unique_arr.push_back(x[i]);\n        }\n     \
    \   i++;\n    }\n    return unique_arr;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long>result;\n    std::string s;\n    int i, len;\n    bool\
    \ flag;\n    for(i=0; i<x.size(); i++) {\n        s = std::to_string(x[i]);\n\
    \        len = s.length();\n        flag = false;\n        for(int j=0; j<len;\
    \ j++) {\n            if(s[j]-'0' % 2 == 0) {\n                flag = true;\n\
    \                break;\n            }\n        }\n        if(!flag) {\n     \
    \       result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpzb9p33t4: /tmp/tmpzb9p33t4.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  \n  // YOUR CODE HERE\n  std::vector<long> v;\n  std::vector<long> v2;\n\
    \  for(int i=0;i<x.size();i++)\n  {\n  \tlong n=x[i];\n  \twhile(n>0)\n  \t{\n\
    \  \t\tint a=n%10;\n  \t\tif(a%2==0)\n  \t\t{\n  \t\t\tv.push_back(x[i]);\n  \t\
    \t\tbreak;\n  \t\t}\n  \t\tn=n/10;\n  \t}\n  }\n  for(int i=0;i<x.size();i++)\n\
    \  {\n  \tfor(int j=0;j<v.size();j++)\n  \t{\n  \t\tif(x[i]==v[j])\n  \t\t\tgoto\
    \ outside;\n  \t}\n  \tv2.push_back(x[i]);\n  \toutside:;\n  }\n  std::sort(v2.begin(),v2.end());\n\
    \  return v2;\n  \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpvs9ha03v: /tmp/tmpvs9ha03v.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> temp;\n    for(int i=0;i<x.size();i++){\n        bool\
    \ flag = 0;\n        long y = x[i];\n        while(y){\n            int digit\
    \ = y%10;\n            if(digit%2==0){\n                flag = 1;\n          \
    \      break;\n            }\n            y/=10;\n        }\n        if(!flag){\n\
    \            temp.push_back(x[i]);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    return temp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093406
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Your code here\n\t// you can comment in the line below to access command\
    \ line arguments\n\t//std::vector<std::string> arguments(argv + 1, argv + argc);\n\
    \tint count=0;\n\tstd::vector<long>::iterator it;\n\tfor(int i=0;i<x.size();i++)\n\
    \t{\n\t\tlong temp=x[i];\n\t\twhile(temp>0)\n\t\t{\n\t\t\tint rem=temp%10;\n\t\
    \t\tif(rem%2==0)\n\t\t\t{\n\t\t\t\tx.erase(x.begin()+i);\n\t\t\t\ti--;\n\t\t\t\
    \tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp=temp/10;\n\t\t}\n\t}\n\treturn\
    \ x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpnbdb9t1l: /tmp/tmpnbdb9t1l.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    bool flag = false;\n\t\tlong temp = x[i];\n\t\twhile (temp > 0) {\n\t\t\tint digit\
    \ = temp % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\ttemp = temp / 10;\n\t\t}\n\t\tif (!flag) {\n\t\t\tresult.push_back(x[i]);\n\
    \t\t}\n\t}\n\tsort(result.begin(), result.end());\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (long num : x) {\n    int is_odd = 1;\n \
    \   while (num) {\n      int d = num % 10;\n      if (d % 2 == 0) {\n        is_odd\
    \ = 0;\n        break;\n      }\n      num /= 10;\n    }\n    if (is_odd) {\n\
    \      res.push_back(num);\n    }\n  }\n  std::sort(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpkt8_h7p3: /tmp/tmpkt8_h7p3.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093407
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    std::vector<long>sorted;\n    for(auto x1:x){\n\
    \        int count=0;\n        long temp=x1;\n        int r;\n        do{\n  \
    \           r=temp%10;\n            if(r%2==0){\n                count++;\n  \
    \          }\n             temp=temp/10;\n        }while(temp!=0);\n        if(count==0){\n\
    \            sorted.push_back(x1);\n        }\n    }\n    std::sort(sorted.begin(),sorted.end());\n\
    \    return sorted;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093407
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (auto itr = x.begin(); itr != x.end();\
    \ itr++) {\n\t\tif ((*itr) % 2 != 0) {\n\t\t\twhile (*itr > 0) {\n\t\t\t\tif ((*itr)\
    \ % 2 == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t(*itr) /= 10;\n\t\t\t}\n\t\
    \t\tif (*itr == 0) {\n\t\t\t\tresult.push_back(*itr);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp9uc1ah5y: /tmp/tmp9uc1ah5y.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093408
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // Write your code here\n  std::vector<long> v;\n  for(int i=0;i<x.size();i++)\n\
    \  {\n      long num=x[i];\n      int flag=0;\n      while(num!=0)\n      {\n\
    \          int temp=num%10;\n          if(temp%2==0)\n          {\n          \
    \    flag=1;\n              break;\n          }\n          num=num/10;\n     \
    \ }\n      if(flag==0)\n      {\n          v.push_back(x[i]);\n      }\n  }\n\
    \  std::sort(v.begin(),v.end());\n  return v;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tint size = x.size();\n\tstd::vector<long> even;\n\tstd::vector<long> odd;\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tint j = 0;\n\t\tlong temp = x[i];\n\t\t\
    while (temp > 0) {\n\t\t\tif ((temp % 10) % 2 == 0)\n\t\t\t\tj++;\n\t\t\ttemp\
    \ = temp / 10;\n\t\t}\n\t\tif (j == 0)\n\t\t\todd.push_back(x[i]);\n\t\telse\n\
    \t\t\teven.push_back(x[i]);\n\t}\n\treturn odd;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmptvvwlv2c: /tmp/tmptvvwlv2c.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093408
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto item : x) {\n        if (!check_even_digits(item))\
    \ {\n            result.push_back(item);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49bvj8ep.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp49bvj8ep.cpp:14:14: error: \u2018check_even_digits\u2019\
    \ was not declared in this scope\n   14 |         if (!check_even_digits(item))\
    \ {\n      |              ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093408
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        int num=x[i];\n        while(num!=0){\n            int dig=num%10;\n\
    \            if(dig%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093408
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // YOUR CODE HERE\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpdzf2i4ye: /tmp/tmpdzf2i4ye.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // YOUR CODE HERE\n    std::vector<long> v;\n    for(long i:x){\n   \
    \     long n=i;\n        bool flag=true;\n        while(n>0){\n            if(n%2==0){\n\
    \                flag=false;\n                break;\n            }\n        \
    \    n/=10;\n        }\n        if(flag)\n            v.push_back(i);\n    }\n\
    \    sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093408
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code goes here\n    // I basically made a new vector called y\
    \ to add the elements which had only odd digits\n    // and sort them and return\
    \ the new vector which had the elements which only had odd digits.\n    std::vector<long>\
    \ y;\n    std::sort(x.begin(), x.end());\n    for(int i=0; i<x.size(); i++)\n\
    \    {\n        long n = x[i];\n        int flag = 0;\n        while(n>0)\n  \
    \      {\n            if(n%2==0)\n            {\n                flag = 1;\n \
    \               break;\n            }\n            n = n/10;\n        }\n    \
    \    if(flag==0)\n        {\n            y.push_back(x[i]);\n        }\n    }\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n   std::vector<long> v;\n   for(auto t : x) {\n      auto val = t;\n    \
    \  while(val != 0) {\n         auto digit = val % 10;\n         if(digit % 2 ==\
    \ 0) {\n            break;\n         }\n         val /= 10;\n      }\n      if(val\
    \ == 0) {\n         v.push_back(t);\n      }\n   }\n   std::sort(v.begin(), v.end());\n\
    \   return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    int count = 0;\n    for(int i = 0; i < x.size();\
    \ i++) {\n        int num = x[i];\n        int digits = 0;\n        int evens\
    \ = 0;\n        while(num) {\n            digits++;\n            int digit = num\
    \ % 10;\n            if(digit % 2 == 0) {\n                evens++;\n        \
    \    }\n            num /= 10;\n        }\n        if(evens == 0) {\n        \
    \    res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpbj9pc972: /tmp/tmpbj9pc972.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> z;\n\tfor(int i=0;i<x.size();i++)\n\t{\n\t\tint flag=0;\n\
    \t\tint number=x[i];\n\t\twhile(number>0)\n\t\t{\n\t\t\tint digit=number%10;\n\
    \t\t\tif(digit%2==0)\n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\
    number=number/10;\n\t\t}\n\t\tif(flag==0)\n\t\t{\n\t\t\tz.push_back(x[i]);\n\t\
    \t}\n\t}\n\tsort(z.begin(),z.end());\n\treturn z;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> output;\n\tfor (std::vector<long>::iterator i = x.begin();\
    \ i != x.end(); i++) {\n\t\tbool is_unique = true;\n\t\tlong quotient = *i;\n\t\
    \twhile (quotient != 0) {\n\t\t\tlong remainder = quotient % 10;\n\t\t\tif (remainder\
    \ % 2 == 0) {\n\t\t\t\tis_unique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tquotient\
    \ = quotient / 10;\n\t\t}\n\t\tif (is_unique) {\n\t\t\toutput.push_back(*i);\n\
    \t\t}\n\t}\n\tstd::sort(output.begin(), output.end());\n\treturn output;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> even_digits = {2, 4, 6, 8, 0};\n    std::sort(x.begin(),\
    \ x.end());\n    std::vector<long> result;\n    for (long i = 0; i < x.size();\
    \ i++) {\n        bool unique = true;\n        long num = x[i];\n        while\
    \ (num != 0) {\n            int digit = num % 10;\n            if (std::binary_search(even_digits.begin(),\
    \ even_digits.end(), digit)) {\n                unique = false;\n            \
    \    break;\n            }\n            num /= 10;\n        }\n        if (unique)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpt1uzjq3i: /tmp/tmpt1uzjq3i.cpp:35: int main(): Assertion `candidate((std::vector<long>({152,
    323, 1422, 10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  for (auto i = x.begin(); i != x.end(); i++)\
    \ {\n    long a = *i;\n    bool has_even = false;\n    while (a != 0) {\n    \
    \  int digit = a % 10;\n      if (digit % 2 == 0) {\n        has_even = true;\n\
    \        break;\n      }\n      a /= 10;\n    }\n    if (!has_even) {\n      result.push_back(*i);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        std::string s = std::to_string(i);\n\
    \        bool flag = false;\n        for(int j=0;j<s.size();j++){\n          \
    \  if(s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] == '8' || s[j] == '0'){\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n        if(!flag){\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpdjff1upo: /tmp/tmpdjff1upo.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Write your code here\n\tstd::vector<long> result;\n\tfor(int i=0;i<x.size();i++)\n\
    \t{\n\t\tstd::vector<int> temp;\n\t\tint n=x[i];\n\t\twhile(n>0)\n\t\t{\n\t\t\t\
    temp.push_back(n%10);\n\t\t\tn=n/10;\n\t\t}\n\t\tbool flag=false;\n\t\tfor(int\
    \ j=0;j<temp.size();j++)\n\t\t{\n\t\t\tif(temp[j]%2==0)\n\t\t\t{\n\t\t\t\tflag=true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==false)\n\t\t\tresult.push_back(x[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpmcobpbqj: /tmp/tmpmcobpbqj.cpp:39: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tassert(x.size() > 0);\n\tstd::vector<long> y;\n\tfor (int i = 0; i < x.size();\
    \ i++) {\n\t\tbool b = true;\n\t\tlong n = x[i];\n\t\twhile (n > 0) {\n\t\t\t\
    if (n % 2 == 0) {\n\t\t\t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn /= 10;\n\
    \t\t}\n\t\tif (b) {\n\t\t\ty.push_back(x[i]);\n\t\t}\n\t}\n\tsort(y.begin(), y.end());\n\
    \treturn y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> v;\n  for(long i : x) {\n    if(i%2 == 0) {\n      auto\
    \ it = std::find(v.begin(), v.end(), i);\n      if(it == v.end()) {\n        v.push_back(i);\n\
    \      }\n    }\n  }\n  std::sort(v.begin(), v.end());\n  return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpr4kb3evp: /tmp/tmpr4kb3evp.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      std::string num = std::to_string(x[i]);\n        bool isExist = false;\n\
    \        for(int j = 0; j < num.length(); j++) {\n            if(num[j] == '0'\
    \ || num[j] == '2' || num[j] == '4' || num[j] == '6' || num[j] == '8') {\n   \
    \             isExist = true;\n                break;\n            }\n       \
    \ }\n        if(!isExist) {\n            res.push_back(x[i]);\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpdfnt6jf4: /tmp/tmpdfnt6jf4.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n     std::vector<long> unique_ele;\n     for(auto& ele: x) {\n         int\
    \ count = 0;\n         for(auto& dig: std::to_string(ele)) {\n             if(dig\
    \ - '0'%2 == 0) {\n                 count++;\n             }\n         }\n   \
    \      if(count == 0) {\n             unique_ele.push_back(ele);\n         }\n\
    \     }\n     std::sort(unique_ele.begin(), unique_ele.end());\n     return unique_ele;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp2qofkhe2: /tmp/tmp2qofkhe2.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (auto elem : x) {\n    std::string s = std::to_string(elem);\n\
    \    if (s.find_first_of(\"02468\") == std::string::npos) {\n      res.push_back(elem);\n\
    \    }\n  }\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n\
    \        int count = 0;\n        int temp = x[i];\n        while(temp!=0){\n \
    \           if(temp%10 == 0 || temp%10 == 2 || temp%10 == 4 || temp%10 == 6 ||\
    \ temp%10 == 8){\n                count++;\n                break;\n         \
    \   }\n            temp /= 10;\n        }\n        if(count == 0){\n         \
    \   res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp1xv57g_n: /tmp/tmp1xv57g_n.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(auto i : x) {\n        bool check = true;\n\
    \        while(i) {\n            int m = i % 10;\n            if(m % 2 == 0) {\n\
    \                check = false;\n                break;\n            }\n     \
    \       i /= 10;\n        }\n        if(check)\n            y.push_back(i);\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpb1y68yzb: /tmp/tmpb1y68yzb.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    int i = 0;\n    while(i < x.size()) {\n \
    \       std::vector<int> digit;\n        while(x[i] != 0) {\n            digit.push_back(x[i]\
    \ % 10);\n            x[i] /= 10;\n        }\n        int is_valid = 1;\n    \
    \    for(int j = 0; j < digit.size(); j++) {\n            if(digit[j] % 2 == 0)\
    \ {\n                is_valid = 0;\n                break;\n            }\n  \
    \      }\n        if(is_valid) {\n            ans.push_back(x[i]);\n        }\n\
    \        i++;\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpp1ifjgsp: /tmp/tmpp1ifjgsp.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // put your code here\n  std::vector<long> res;\n  for(int i=0;i<x.size();i++){\n\
    \      if(!check(x[i])){\n          res.push_back(x[i]);\n      }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs4r7qei.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjs4r7qei.cpp:15:11: error: \u2018check\u2019 was not declared\
    \ in this scope\n   15 |       if(!check(x[i])){\n      |           ^~~~~\n"
  stdout: ''
  timestamp: 1660093408
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        bool\
    \ t=false;\n        int k=x[i];\n        while(k>0){\n            if(k%2==0){\n\
    \                t=true;\n                break;\n            }\n            k=k/10;\n\
    \        }\n        if(t==false){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = false;\n        long no = x[i];\n        while (no > 0) {\n\
    \            int digit = no % 10;\n            if (digit % 2 == 0) {\n       \
    \         flag = true;\n                break;\n            }\n            no\
    \ = no / 10;\n        }\n        if (!flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ret;\n\tfor (long i = 0; i < x.size(); i++) {\n\t\tlong\
    \ temp = x[i];\n\t\tbool even = false;\n\t\twhile (temp > 0) {\n\t\t\tlong digit\
    \ = temp % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\teven = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif (!even)\n\t\t\tret.push_back(x[i]);\n\
    \t}\n\tstd::sort(ret.begin(), ret.end());\n\treturn ret;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> res;\n\tbool flag;\n\tfor(int i=0;i<x.size();i++){\n\t\
    \tflag = true;\n\t\twhile(x[i]!=0){\n\t\t\tif(x[i]%2==0){\n\t\t\t\tflag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] = x[i]/10;\n\t\t}\n\t\tif(flag) res.push_back(x[i]);\n\
    \t}\n\tstd::sort(res.begin(),res.end());\n\treturn res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpqu0copz9: /tmp/tmpqu0copz9.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i : x) {\n        if(std::to_string(i).size()\
    \ == 1) {\n            res.push_back(i);\n        } else {\n            int flag\
    \ = 0;\n            for(char c : std::to_string(i)) {\n                if(c %\
    \ 2 == 0) {\n                    flag = 1;\n                    break;\n     \
    \           }\n            }\n            if(flag == 0) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpr2ivsyqc: /tmp/tmpr2ivsyqc.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Implement the solution here.\n    std::vector<long> result;\n    for(auto\
    \ y:x){\n        int evenCount = 0;\n        long temp = y;\n        while(temp>0){\n\
    \            int m = temp%10;\n            if(m%2==0){\n                evenCount++;\n\
    \            }\n            temp = temp/10;\n        }\n        if(evenCount==0){\n\
    \            result.push_back(y);\n        }\n    }\n    std::sort(result.begin(),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> even_digits = {2, 4, 6, 8, 0};\n    std::vector<long>::iterator\
    \ it;\n    std::vector<long> res;\n    for (long num : x) {\n        bool flag\
    \ = false;\n        for (long e : even_digits) {\n            if (num % e == 0)\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n        if (!flag) {\n            res.push_back(num);\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    int count;\n    for(int i=0;i<x.size();i++){\n\
    \        count=0;\n        while(x[i]>0){\n            if(x[i]%2==0){\n      \
    \          count=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(count==0){\n            y.push_back(x[i]);\n        }\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpycb2ymk4: /tmp/tmpycb2ymk4.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        while(temp!=0){\n            long p = temp%10;\n     \
    \       if(p%2==0){\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(temp==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpsxz8jqhh: /tmp/tmpsxz8jqhh.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long num : x) {\n        bool unique\
    \ = true;\n        int copy = num;\n        while(copy) {\n            if(copy\
    \ % 2 == 0) {\n                unique = false;\n                break;\n     \
    \       }\n            copy /= 10;\n        }\n        if(unique) res.push_back(num);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpm_l2son5: /tmp/tmpm_l2son5.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code goes here\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++)\n\
    \    {\n        int flag=0;\n        long num=x[i];\n        while(num>0)\n  \
    \      {\n            int n=num%10;\n            if(n%2==0)\n            {\n \
    \               flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0)\n        {\n            v.push_back(x[i]);\n \
    \       }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto el : x) {\n        auto x =\
    \ el;\n        int has_even = 0;\n        while (x) {\n            int digit =\
    \ x % 10;\n            if (digit % 2 == 0) {\n                has_even = 1;\n\
    \                break;\n            }\n            x /= 10;\n        }\n    \
    \    if (!has_even) {\n            result.push_back(el);\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here...\n    std::vector<long> result;\n    for(int i =\
    \ 0; i < x.size(); i++){\n        bool no_even = true;\n        long t = x[i];\n\
    \        while(t > 0){\n            int r = t % 10;\n            if(r % 2 == 0){\n\
    \                no_even = false;\n                break;\n            }\n   \
    \         t /= 10;\n        }\n        if(no_even) result.push_back(x[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpojjoa9oy: /tmp/tmpojjoa9oy.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n   std::vector<long> result;\n   std::set<long> ret;\n   int num;\n   for(int\
    \ i=0;i<x.size();i++){\n      num = x[i];\n      while(num){\n        if(num%10%2\
    \ == 0){\n           num = -1;\n           break;\n        }\n        num /= 10;\n\
    \      }\n      if(num != -1){\n         ret.insert(x[i]);\n      }\n   }\n  \
    \ std::set<long>::iterator it = ret.begin();\n   while(it != ret.end()){\n   \
    \   result.push_back(*it);\n      it++;\n   }\n   return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        long\
    \ n=x[i];\n        while(n>0){\n            int d=n%10;\n            if(d%2==0){\n\
    \                break;\n            }\n            n=n/10;\n        }\n     \
    \   if(n==0){\n            v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093409
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> results;\n\t// your code here\n\treturn results;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpg4gxt12m: /tmp/tmpg4gxt12m.cpp:18: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long>ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// assert(0);\n\tstd::vector<long> y;\n\tint n = x.size();\n\tint i, j,\
    \ k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n0;\n\tfor(i = 0; i < n; i++) {\n\
    \t\tn0 = 0;\n\t\tn1 = 0;\n\t\tn2 = 0;\n\t\tn3 = 0;\n\t\tn4 = 0;\n\t\tn5 = 0;\n\
    \t\tn6 = 0;\n\t\tn7 = 0;\n\t\tn8 = 0;\n\t\tn9 = 0;\n\t\tl = x[i];\n\t\twhile(l\
    \ > 0) {\n\t\t\tm = l % 10;\n\t\t\tif(m == 0) {\n\t\t\t\tn0 = 1;\n\t\t\t}\n\t\t\
    \tif(m == 1) {\n\t\t\t\tn1 = 1;\n\t\t\t}\n\t\t\tif(m == 2) {\n\t\t\t\tn2 = 1;\n\
    \t\t\t}\n\t\t\tif(m == 3) {\n\t\t\t\tn3 = 1;\n\t\t\t}\n\t\t\tif(m == 4) {\n\t\t\
    \t\tn4 = 1;\n\t\t\t}\n\t\t\tif(m == 5) {\n\t\t\t\tn5 = 1;\n\t\t\t}\n\t\t\tif(m\
    \ == 6) {\n\t\t\t\tn6 = 1;\n\t\t\t}\n\t\t\tif(m == 7) {\n\t\t\t\tn7 = 1;\n\t\t\
    \t}\n\t\t\tif(m == 8) {\n\t\t\t\tn8 = 1;\n\t\t\t}\n\t\t\tif(m == 9) {\n\t\t\t\t\
    n9 = 1;\n\t\t\t}\n\t\t\tl = l / 10;\n\t\t}\n\t\tif(n0 == 0 && n2 == 0 && n4 ==\
    \ 0 && n6 == 0 && n8 == 0) {\n\t\t\ty.push_back(x[i]);\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpl83g03.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphpl83g03.cpp:65:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   65 | int main() {\n      |     \
    \       ^\n/tmp/tmphpl83g03.cpp:71:1: error: expected \u2018}\u2019 at end of\
    \ input\n   71 | }\n      | ^\n/tmp/tmphpl83g03.cpp:16:25: note: to match this\
    \ \u2018{\u2019\n   16 |  for(i = 0; i < n; i++) {\n      |                  \
    \       ^\n/tmp/tmphpl83g03.cpp:71:1: error: expected \u2018}\u2019 at end of\
    \ input\n   71 | }\n      | ^\n/tmp/tmphpl83g03.cpp:11:54: note: to match this\
    \ \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long> x)\
    \ {\n      |                                                      ^\n/tmp/tmphpl83g03.cpp:71:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   71 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093409
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    std::vector<long> sortedList;\n    int len = x.size();\n\
    \    int i;\n    for(i=0;i<len;i++){\n        std::string str = std::to_string(x[i]);\n\
    \        if(!(std::count(str.begin(), str.end(), '2') || std::count(str.begin(),\
    \ str.end(), '4') || std::count(str.begin(), str.end(), '6') || std::count(str.begin(),\
    \ str.end(), '8') || std::count(str.begin(), str.end(), '0'))){\n            sortedList.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(sortedList.begin(), sortedList.end());\n    return\
    \ sortedList;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    bool found = false;\n    for (auto& elem\
    \ : x) {\n        while (elem != 0) {\n            if ((elem % 10) % 2 == 0) {\n\
    \                found = true;\n                break;\n            }\n      \
    \      elem /= 10;\n        }\n        if (!found) {\n            ret.push_back(elem);\n\
    \        }\n        found = false;\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpr16oylh_: /tmp/tmpr16oylh_.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(long p : x){\n        long q = p;\n   \
    \     while(q > 0){long r = q % 10;q /= 10;if(r % 2 == 0){goto outer;}}\n    \
    \    y.push_back(p);\n        outer:;\n    }\n    std::sort(y.begin(), y.end());\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// your code here\n\tvector<long> ans;\n\tbool flag = 0;\n\tlong count;\n\
    \tfor(long i=0;i<x.size();i++)\n\t{\n\t\tflag = 0;\n\t\tcount = 0;\n\t\tlong a\
    \ = x[i];\n\t\twhile(a!=0)\n\t\t{\n\t\t\tif(a%2==0)\n\t\t\t{\n\t\t\t\tflag = 1;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ta/=10;\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(flag==0)\n\t\t{\n\t\t\tans.push_back(x[i]);\n\t\t}\n\t\
    }\n\tsort(ans.begin(),ans.end());\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zr13c8i.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8zr13c8i.cpp:13:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   13 |  vector<long> ans;\n      |  ^~~~~~\n/tmp/tmp8zr13c8i.cpp:13:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zr13c8i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zr13c8i.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp8zr13c8i.cpp:13:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   13 |  vector<long>\
    \ ans;\n      |         ^~~~\n/tmp/tmp8zr13c8i.cpp:36:4: error: \u2018ans\u2019\
    \ was not declared in this scope; did you mean \u2018abs\u2019?\n   36 |    ans.push_back(x[i]);\n\
    \      |    ^~~\n      |    abs\n/tmp/tmp8zr13c8i.cpp:39:7: error: \u2018ans\u2019\
    \ was not declared in this scope; did you mean \u2018abs\u2019?\n   39 |  sort(ans.begin(),ans.end());\n\
    \      |       ^~~\n      |       abs\n/tmp/tmp8zr13c8i.cpp:39:2: error: \u2018\
    sort\u2019 was not declared in this scope; did you mean \u2018std::sort\u2019\
    ?\n   39 |  sort(ans.begin(),ans.end());\n      |  ^~~~\n      |  std::sort\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          "
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    for (int i = 0; i < x.size(); i++) {\n  \
    \      int num = x[i];\n        bool ok = true;\n        while (num) {\n     \
    \       int digit = num % 10;\n            if (digit % 2 == 0) {\n           \
    \     ok = false;\n                break;\n            }\n            num /= 10;\n\
    \        }\n        if (ok) {\n            ret.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto num : x) {\n        if (num\
    \ == 0) {\n            result.push_back(num);\n            continue;\n       \
    \ }\n        bool even_found = false;\n        while (num) {\n            int\
    \ last_digit = num % 10;\n            if (last_digit % 2 == 0) {\n           \
    \     even_found = true;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (!even_found) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpjxxfebit: /tmp/tmpjxxfebit.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        bool\
    \ flag=false;\n        while(x[i]>0){\n            int rem=x[i]%10;\n        \
    \    if(rem%2==0){\n                flag=true;\n                break;\n     \
    \       }\n            x[i]=x[i]/10;\n        }\n        if(flag==false){\n  \
    \          v.push_back(x[i]);\n        }\n    }\n    sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpzo6yka23: /tmp/tmpzo6yka23.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> answer;\n    for(int i=0;i<x.size();i++){\n       \
    \ long temp=x[i];\n        bool flag=true;\n        while(temp!=0){\n        \
    \    if(temp%2==0){\n                flag=false;\n                break;\n   \
    \         }\n            temp=temp/10;\n        }\n        if(flag==true){\n \
    \           answer.push_back(x[i]);\n        }\n    }\n    std::sort(answer.begin(),answer.end());\n\
    \    return answer;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tbool unique;\n\tfor (long num : x) {\n\t\t\
    unique = true;\n\t\twhile (num) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tunique =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (unique) {\n\
    \t\t\tresult.push_back(num);\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpyi94mnel: /tmp/tmpyi94mnel.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long>::iterator itr;\n    std::vector<long> v;\n    for(itr=x.begin();itr!=x.end();itr++)\n\
    \    {\n        int count=0;\n        while(*itr!=0)\n        {\n            if((*itr%10)%2==0)\n\
    \            {\n                count++;\n                break;\n           \
    \ }\n            *itr=*itr/10;\n        }\n        if(count==0)\n        {\n \
    \           v.push_back(*itr);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpfzu6jmg6: /tmp/tmpfzu6jmg6.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // your code here\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp13wkk25g: /tmp/tmp13wkk25g.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    std::vector<int> digits;\n    for(auto i\
    \ : x) {\n        long num = i;\n        int flag = 0;\n        while(num) {\n\
    \            digits.push_back(num%10);\n            num /= 10;\n        }\n  \
    \      for(auto j : digits) {\n            if(j%2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n        }\n        if(flag == 0)\
    \ {\n            ans.push_back(i);\n        }\n        digits.clear();\n    }\n\
    \    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093410
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        int a\
    \ = x[i];\n        int f=0;\n        while(a!=0){\n            int r = a%10;\n\
    \            if(r%2==0){\n                f=1;\n                break;\n     \
    \       }\n            a = a/10;\n        }\n        if(f==0){\n            v.push_back(x[i]);\n\
    \        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  // Implement your solution here\n  return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpa0pw1h4n: /tmp/tmpa0pw1h4n.cpp:18: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ num = x[i];\n        int c=0;\n        while(num!=0){\n            int p = num%10;\n\
    \            if(p%2==0){\n                c++;\n                break;\n     \
    \       }\n            num = num/10;\n        }\n        if(c==0){\n         \
    \   ans.push_back(x[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmpno2j4his: /tmp/tmpno2j4his.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> y;\n\tfor(int i=0;i<x.size();i++){\n\t\tint flag=0;\n\
    \t\tfor(int j=0;j<x[i];j++){\n\t\t\tif(x[i]%2==0){\n\t\t\t\tflag=1;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif(flag==0){\n\t\t\ty.push_back(x[i]);\n\t\t}\n\t\
    }\n\treturn y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp0batggcz: /tmp/tmp0batggcz.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n   std::vector<long> y;\n   for(long i = 0; i < x.size(); i++) {\n      bool\
    \ is_odd = true;\n      long num = x[i];\n      while(num > 0) {\n         long\
    \ digit = num % 10;\n         if(digit % 2 == 0) {\n            is_odd = false;\n\
    \            break;\n         }\n         num /= 10;\n      }\n      if(is_odd)\
    \ {\n         y.push_back(x[i]);\n      }\n   }\n   std::sort(y.begin(), y.end());\n\
    \   return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        long\
    \  num = x[i];\n        bool flag = false;\n        while(num){\n            int\
    \ last = num%10;\n            if(last%2==0){\n                flag = true;\n \
    \               break;\n            }\n            num/=10;\n        }\n     \
    \   if(!flag){\n            ans.push_back(x[i]);\n        }\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n\
    \        bool even=false;\n        while(temp!=0){\n            if((temp%10)%2==0){\n\
    \                even=true;\n                break;\n            }\n         \
    \   temp/=10;\n        }\n        if(!even){\n            v.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093411
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (auto & item : x) {\n\t\tstd::string number\
    \ = std::to_string(item);\n\t\tauto it = std::find_if(number.begin(), number.end(),\
    \ [](char c) {\n\t\t\treturn c - '0' % 2 == 0;\n\t\t});\n\t\tif (it == number.end())\n\
    \t\t\tresult.push_back(item);\n\t}\n\tstd::sort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: Exception
  stderr: 'tmp4_o7e9o_: /tmp/tmp4_o7e9o_.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,
    33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))'' failed.

    '
  stdout: ''
  timestamp: 1660093411
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    // we need to iterate through all elements\
    \ in the vector\n    for (long i = 0; i < x.size(); i++) {\n        long temp\
    \ = x[i];\n        int is_unique = 1;\n        // we need to iterate through all\
    \ digits of the number\n        while (temp > 0) {\n            if (temp % 2 ==\
    \ 0) {\n                is_unique = 0;\n                break;\n            }\n\
    \            temp /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660093411
