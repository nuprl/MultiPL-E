language: cpp
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\t\t\n\tstd::vector<std::string> list;\n\t// we will store the\
    \ strings in a vector\n\t// create a list of consonants\n\tstd::vector<char> consonants{'B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z'};\n\
    \tint len = s.length();\n\tstd::string word;\n\tfor(int i=0;i<len;i++){\n\t\t\
    if(s[i]!=' '){\n\t\t\tword+=s[i];\n\t\t}\n\t\telse{\n\t\t\tint res = 0;\n\t\t\t\
    int len1 = word.length();\n\t\t\tfor(int j=0;j<len1;j++){\n\t\t\t\tif(std::find(consonants.begin(),consonants.end(),toupper(word[j]))!=consonants.end()){\n\
    \t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(res==n){\n\t\t\t\tlist.push_back(word);\n\
    \t\t\t}\n\t\t\tword.clear();\n\t\t}\n\t}\n\tint res = 0;\n\tint len1 = word.length();\n\
    \tfor(int j=0;j<len1;j++){\n\t\tif(std::find(consonants.begin(),consonants.end(),toupper(word[j]))!=consonants.end()){\n\
    \t\t\tres++;\n\t\t}\n\t}\n\tif(res==n){\n\t\tlist.push_back(word);\n\t}\n\tword.clear();\n\
    \treturn list;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::vector<int> vec(1,0);\n\
    \    for(auto c:s){\n        if(c == ' '){\n            vec.push_back(0);\n  \
    \      }\n        else if(c!='a' && c!='e' && c!='i' && c!='o' && c!='u'){\n \
    \           vec.back()++;\n        }\n    }\n    std::istringstream ss(s);\n \
    \   std::string temp;\n    int i = 0;\n    while(ss >> temp){\n        if(vec[i]\
    \ == n){\n            res.push_back(temp);\n        }\n        i++;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbz4b75jw: /tmp/tmpbz4b75jw.cpp:42: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140833
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tstd::stringstream ss(s);\n\t\
    std::string word;\n\twhile (ss >> word) {\n\t\tstd::string c = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n\t\tint count = 0;\n\t\tfor (auto i : word) {\n\t\t\tif (c.find(tolower(i))\
    \ != std::string::npos) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count ==\
    \ n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (ss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {return std::string(\"aeiou\").find(std::tolower(c))\
    \ == std::string::npos;}) == n) {\n            result.push_back(word);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tstd::string word;\n\tint count;\n\
    \tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tcount\
    \ = 0;\n\t\t\tfor (int j = 0; j < word.length(); j++) {\n\t\t\t\tif (word[j] !=\
    \ 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u')\
    \ {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == n) {\n\t\t\t\t\
    v.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t}\n\t\telse {\n\t\t\tword\
    \ += s[i];\n\t\t}\n\t}\n\tif (word != \"\") {\n\t\tcount = 0;\n\t\tfor (int j\
    \ = 0; j < word.length(); j++) {\n\t\t\tif (word[j] != 'a' && word[j] != 'e' &&\
    \ word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n\t\t\t\tcount++;\n\t\t\
    \t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t}\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsue9hig1: /tmp/tmpsue9hig1.cpp:54: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string s2;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'};\n    while (ss >> s2) {\n        int count = 0;\n\
    \        for (int i = 0; i < s2.length(); i++) {\n            bool isVowel = false;\n\
    \            for (int j = 0; j < vowels.size(); j++) {\n                if (s2[i]\
    \ == vowels[j]) {\n                    isVowel = true;\n                    break;\n\
    \                }\n            }\n            if (!isVowel) count++;\n      \
    \  }\n        if (count == n) words.push_back(s2);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::stringstream ss(s);\n\tstd::vector<std::string> words;\n\
    \tstd::string word;\n\tstd::vector<std::string> ret;\n\twhile (ss >> word) {\n\
    \t\tlong count = 0;\n\t\tstd::string lower_case = word;\n\t\tstd::transform(lower_case.begin(),\
    \ lower_case.end(), lower_case.begin(), ::tolower);\n\t\tfor (int i = 0; i < lower_case.size();\
    \ i++) {\n\t\t\tif (lower_case[i] != 'a' && lower_case[i] != 'e' && lower_case[i]\
    \ != 'i' && lower_case[i] != 'o' && lower_case[i] != 'u') {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tret.push_back(word);\n\t\t}\n\t}\n\
    \treturn ret;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    int consNum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  if (s[i] != ' ') {\n            temp += s[i];\n            if (isalpha(s[i])\
    \ && \n                (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u')) {\n                consNum++;\n            }\n        } else\
    \ {\n            if (consNum == n) {\n                result.push_back(temp);\n\
    \            }\n            temp = \"\";\n            consNum = 0;\n        }\n\
    \    }\n    if (consNum == n) {\n        result.push_back(temp);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbn1781av: /tmp/tmpbn1781av.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long count = 0;\n  \
    \      for (char const &c : word) {\n            switch (c) {\n              \
    \  case 'b':\n                case 'c':\n                case 'd':\n         \
    \       case 'f':\n                case 'g':\n                case 'h':\n    \
    \            case 'j':\n                case 'k':\n                case 'l':\n\
    \                case 'm':\n                case 'n':\n                case 'p':\n\
    \                case 'q':\n                case 'r':\n                case 's':\n\
    \                case 't':\n                case 'v':\n                case 'w':\n\
    \                case 'x':\n                case 'y':\n                case 'z':\n\
    \                    count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpim3g3iua: /tmp/tmpim3g3iua.cpp:55: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string s1;\n    int\
    \ c = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] != ' ')\
    \ {\n            s1 += s[i];\n            if(!(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u'))\n                c++;\n        }\n  \
    \      else {\n            if(c == n)\n                v.push_back(s1);\n    \
    \        s1 = \"\";\n            c = 0;\n        }\n    }\n    if(c == n)\n  \
    \      v.push_back(s1);\n    return v;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp51y4z3mr: /tmp/tmp51y4z3mr.cpp:41: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string temp = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (temp.length() == n) {\n                words.push_back(temp);\n\
    \            }\n            temp = \"\";\n        } else {\n            temp +=\
    \ s[i];\n        }\n    }\n    if (temp.length() == n) {\n        words.push_back(temp);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsh4svf9e: /tmp/tmpsh4svf9e.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  // your code here...\n  std::vector<std::string> v;\n  std::stringstream\
    \ ss(s);\n  std::string word;\n  while(ss >> word){\n    int c = 0;\n    for(char\
    \ x : word){\n      if(x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u')\
    \ c++;\n    }\n    if(c == n) v.push_back(word);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpnibjsa2z: /tmp/tmpnibjsa2z.cpp:34: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    char vowels[] = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'};\n    std::set<char> vowel_set(vowels, vowels + 10);\n    std::string word\
    \ = \"\";\n    std::vector<std::string> words;\n    int consonants_count = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n    \
    \        if (consonants_count == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n            consonants_count = 0;\n\
    \        } else {\n            if (vowel_set.find(s[i]) == vowel_set.end()) {\n\
    \                consonants_count++;\n            }\n            word += s[i];\n\
    \        }\n    }\n    if (consonants_count == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> answer;\n    long i = 0;\n    while\
    \ (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n         \
    \   continue;\n        }\n        int j = i + 1;\n        while (j < s.length()\
    \ && s[j] != ' ') {\n            j++;\n        }\n        if (j == s.length())\
    \ {\n            answer.push_back(s.substr(i, j - i));\n            i = j;\n \
    \       } else {\n            answer.push_back(s.substr(i, j - i));\n        \
    \    i = j + 1;\n        }\n    }\n    return answer;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxenlrttx: /tmp/tmpxenlrttx.cpp:38: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> results;\n\tint count;\n\tsize_t found\
    \ = 0;\n\tstd::stringstream ss(s);\n\tstd::string item;\n\twhile (getline(ss,\
    \ item, ' ')) {\n\t\tcount = 0;\n\t\tstd::cout << item << '\\n';\n\t\tfor (int\
    \ i = 0; i < item.length(); i++) {\n\t\t\tif (item[i] != 'a' && item[i] != 'e'\
    \ && item[i] != 'i' && item[i] != 'o' && item[i] != 'u') {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tresults.push_back(item);\n\t\t}\n\
    \t}\n\treturn results;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmps2ixrrds: /tmp/tmps2ixrrds.cpp:40: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::stringstream ss(s);\n    std::vector<std::string> words;\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.size(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            words.push_back(word);\n        }\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpzx74cbp5: /tmp/tmpzx74cbp5.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string temp = \"\";\n\
    \  int consonants = 0;\n  for (auto i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ != ' ') {\n      if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n        consonants++;\n      }\n      temp += s[i];\n   \
    \ } else {\n      if (consonants == n) {\n        words.push_back(temp);\n   \
    \   }\n      temp = \"\";\n      consonants = 0;\n    }\n  }\n  if (consonants\
    \ == n) {\n    words.push_back(temp);\n  }\n  return words;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxeeybzsa: /tmp/tmpxeeybzsa.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::string word = \"\";\n\
    \tbool prev_space = true;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ == ' ') {\n\t\t\tif (prev_space == false) {\n\t\t\t\tif (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n\t\t\t\t\tchar arr[] = { 'a', 'e', 'i', 'o', 'u' };\n\
    \t\t\t\t\treturn std::find(std::begin(arr), std::end(arr), c) != std::end(arr);\n\
    \t\t\t\t}) == n) {\n\t\t\t\t\twords.push_back(word);\n\t\t\t\t}\n\t\t\t\tword\
    \ = \"\";\n\t\t\t}\n\t\t\tprev_space = true;\n\t\t}\n\t\telse {\n\t\t\tword +=\
    \ s[i];\n\t\t\tprev_space = false;\n\t\t}\n\t}\n\tif (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n\t\tchar arr[] = { 'a', 'e', 'i', 'o', 'u' };\n\t\t\
    return std::find(std::begin(arr), std::end(arr), c) != std::end(arr);\n\t}) ==\
    \ n) {\n\t\twords.push_back(word);\n\t}\n\treturn words;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0p888yoi: /tmp/tmp0p888yoi.cpp:46: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::istringstream iss(s);\n    std::vector<std::string> res;\n\
    \    std::string word;\n    while (iss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char ch) {\n            switch (ch) {\n                case 'a':\n\
    \                case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    return false;\n                default:\n               \
    \     return true;\n            }\n        }) == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  // your code here\n  std::istringstream iss(s);\n  std::vector<std::string>\
    \ words;\n  words.clear();\n  while(iss){\n    std::string sub;\n    iss >> sub;\n\
    \    if(sub != \"\"){\n      if(sub.length() != n)\n        continue;\n      int\
    \ num_consonants = 0;\n      for(int i = 0; i < sub.length(); i++){\n        if(sub[i]\
    \ != 'a' && sub[i] != 'e' && sub[i] != 'i' && sub[i] != 'o' && sub[i] != 'u')\n\
    \          num_consonants++;\n      }\n      if(num_consonants == n)\n       \
    \ words.push_back(sub);\n    }\n  }\n  return words;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp717_smmd: /tmp/tmp717_smmd.cpp:38: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::string word;\n\tint\
    \ num_con = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar current_char\
    \ = s[i];\n\t\tif (current_char == ' ') {\n\t\t\tif (num_con == n) {\n\t\t\t\t\
    words.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tnum_con = 0;\n\t\t\
    }\n\t\telse {\n\t\t\tif (current_char != 'a' && current_char != 'e' && current_char\
    \ != 'i' && current_char != 'o' && current_char != 'u') {\n\t\t\t\tnum_con++;\n\
    \t\t\t}\n\t\t\tword += current_char;\n\t\t}\n\t}\n\tif (num_con == n) {\n\t\t\
    words.push_back(word);\n\t}\n\treturn words;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7hy77zt0: /tmp/tmp7hy77zt0.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp = \"\";\n\
    \    int count = 0;\n    int tempCount = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] != ' '){\n            if(s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n                if(tempCount !=\
    \ 0){\n                    count += tempCount;\n                    tempCount\
    \ = 0;\n                }\n            }\n            else{\n                tempCount++;\n\
    \            }\n            temp += s[i];\n        }\n        else{\n        \
    \    if(tempCount != 0){\n                count += tempCount;\n              \
    \  tempCount = 0;\n            }\n            if(count == n){\n              \
    \  v.push_back(temp);\n            }\n            temp = \"\";\n            count\
    \ = 0;\n        }\n    }\n    if(tempCount != 0){\n        count += tempCount;\n\
    \        tempCount = 0;\n    }\n    if(count == n){\n        v.push_back(temp);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpambr_097: /tmp/tmpambr_097.cpp:59: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    //your code here\n    int i, j, len, count, val;\n    len\
    \ = s.length();\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    // std::cout << s << \"\\n\";\n    while(ss >> word)\
    \ {\n      count = 0;\n      // std::cout << word << \"\\n\";\n      for(j = 0;\
    \ j < word.length(); j++) {\n        val = isalpha(word[j]);\n        if(val ==\
    \ 0) {\n          count++;\n        }\n      }\n      if(count == n) {\n     \
    \   v.push_back(word);\n      }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpz6__lt2p: /tmp/tmpz6__lt2p.cpp:39: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    long vowels = 0;\n  \
    \  long consonants = 0;\n    std::string word = \"\";\n    for (auto c : s) {\n\
    \        if (c != ' ') {\n            word += c;\n            if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n\
    \            } else {\n                consonants++;\n            }\n        }\
    \ else {\n            if (consonants == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n            vowels = 0;\n          \
    \  consonants = 0;\n        }\n    }\n    if (consonants == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpc1y1l3lt: /tmp/tmpc1y1l3lt.cpp:47: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    int consonants = 0;\n\
    \    long size = s.size();\n    std::string word = \"\";\n    for (int i = 0;\
    \ i < size; i++) {\n        consonants = 0;\n        for (int j = i; j < size;\
    \ j++) {\n            if (s[j] == ' ') {\n                break;\n           \
    \ }\n            if (s[j] != 'a' && s[j] != 'e' && s[j] != 'i' && s[j] != 'o'\
    \ && s[j] != 'u') {\n                consonants++;\n            }\n          \
    \  word += s[j];\n        }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n        word = \"\";\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpoaaq0usm: /tmp/tmpoaaq0usm.cpp:40: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::istringstream iss(s);\n\
    \    std::string temp;\n    while(iss >> temp) {\n        if(std::count_if(temp.begin(),\
    \ temp.end(),[](char c) {\n            switch(tolower(c)) {\n                case\
    \ 'a':\n                case 'e':\n                case 'i':\n               \
    \ case 'o':\n                case 'u':\n                    return false;\n  \
    \                  break;\n                default:\n                    return\
    \ true;\n                    break;\n            }\n        }) == n) {\n     \
    \       result.push_back(temp);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::istringstream stream(s);\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::regex pattern(\"[^aeiou ]\");\n    while\
    \ (stream >> word) {\n        if (std::regex_replace(word, pattern, \"\").size()\
    \ == n)\n            words.push_back(word);\n    }\n    return words;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8v7mkt7m: /tmp/tmp8v7mkt7m.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::stringstream ss(s);\n  std::vector<std::string> ret;\n\
    \  std::string word;\n  while (ss >> word) {\n    int count = 0;\n    for (auto\
    \ c : word) {\n      switch (tolower(c)) {\n        case 'a': case 'e': case 'i':\
    \ case 'o': case 'u': case 'y':\n          break;\n        default:\n        \
    \  count++;\n      }\n    }\n    if (count == n) ret.push_back(word);\n  }\n \
    \ return ret;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpnyyvceoo: /tmp/tmpnyyvceoo.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    //your code here\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp11bn7d7a: /tmp/tmp11bn7d7a.cpp:19: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (char c : s) {\n        if (c == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n        } else {\n            word += c;\n        }\n    }\n\
    \    if (word.size() == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_akzo0iy: /tmp/tmp_akzo0iy.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream stream(s);\n    while (stream >> word) {\n        size_t\
    \ c = std::count_if(word.begin(), word.end(), [](char i) {\n            return\
    \ i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u';\n        });\n   \
    \     if (c == n) {\n            result.push_back(word);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpb2ldk1i2: /tmp/tmpb2ldk1i2.cpp:34: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  if (s.empty()) return {};\n  std::regex rgx(\"[^A-Za-z]\");\n\
    \  s = std::regex_replace(s, rgx, \" \");\n  std::istringstream iss(s);\n  std::vector<std::string>\
    \ words;\n  for (std::string word; iss >> word;) {\n    int counter = 0;\n   \
    \ for (char c : word) {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'y' ||\n          c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U' || c == 'Y')\n        counter++;\n    }\n    if (word.size()\
    \ - counter == n) words.push_back(word);\n  }\n  return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpqoonnxic: /tmp/tmpqoonnxic.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    int i = 0;\n    while\
    \ (i < s.length()) {\n        if (s[i] == ' ') {\n            if (word.length()\
    \ == n) {\n                words.push_back(word);\n            }\n           \
    \ word = \"\";\n        } else {\n            word += s[i];\n        }\n     \
    \   i++;\n    }\n    if (word.length() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0fmh_z8v: /tmp/tmp0fmh_z8v.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::string word = \"\";\n\
    \tint cons = 0;\n\tstd::vector<char> vovels{ 'a', 'e', 'i', 'o', 'u', 'y' };\n\
    \tfor (char c : s) {\n\t\tif (c == ' ') {\n\t\t\tif (cons == n) {\n\t\t\t\twords.push_back(word);\n\
    \t\t\t}\n\t\t\tword = \"\";\n\t\t\tcons = 0;\n\t\t}\n\t\telse {\n\t\t\tbool fl\
    \ = false;\n\t\t\tfor (char v : vovels) {\n\t\t\t\tif (c == v) {\n\t\t\t\t\tfl\
    \ = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!fl) {\n\t\t\t\tcons++;\n\
    \t\t\t}\n\t\t\tword += c;\n\t\t}\n\t}\n\tif (cons == n) {\n\t\twords.push_back(word);\n\
    \t}\n\treturn words;\n}\nint main() {\n    auto candidate = select_words;\n  \
    \  assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpt9_mqve1: /tmp/tmpt9_mqve1.cpp:49: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // List to be returned\n    std::vector<std::string> list;\n\
    \    // String to store current word\n    std::string word;\n    // Counting number\
    \ of consonants\n    int count = 0;\n    // Add first element to list\n    list.push_back(word);\n\
    \    // Iterate over string\n    for (char c : s) {\n        // If not letter,\
    \ then next word\n        if (!isalpha(c)) {\n            // Check if current\
    \ word has n consonants\n            if (count == n) {\n                // Add\
    \ word to list\n                list.push_back(word);\n            }\n       \
    \     // Reset word and consonant count\n            word = \"\";\n          \
    \  count = 0;\n        } else {\n            // If current letter is a consonant,\
    \ increment count\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                count++;\n            }\n            // Append\
    \ letter to current word\n            word += c;\n        }\n    }\n    // Check\
    \ last word for n consonants\n    if (count == n) {\n        list.push_back(word);\n\
    \    }\n    // Remove first element\n    list.erase(list.begin());\n    return\
    \ list;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8wubaott: /tmp/tmp8wubaott.cpp:58: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    if(s.empty()) return {};\n    std::vector<std::string> res;\n\
    \    std::string temp;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ != ' '){\n            temp += s[i];\n        }else{\n            if(temp.size()\
    \ == n) res.push_back(temp);\n            temp = \"\";\n        }\n    }\n   \
    \ if(temp.size() == n) res.push_back(temp);\n    return res;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpjvd8c8h7: /tmp/tmpjvd8c8h7.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    int count = 0;\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while(ss >> word) {\n        for(char ch\
    \ : word) {\n            if(std::string(\"aeiou\").find(std::tolower(ch)) == std::string::npos)\n\
    \                count++;\n        }\n        if(count == n)\n            words.push_back(word);\n\
    \        count = 0;\n    }\n    return words;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result{};\n    if (s.empty()) {\n\
    \        return result;\n    }\n    std::istringstream str_stream(s);\n    std::string\
    \ word{};\n    while (std::getline(str_stream, word, ' ')) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return std::string(\"aeiou\").find(std::tolower(c))\
    \ == std::string::npos;\n        }) == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> arr;\n  std::stringstream ss(s);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    if (consonants(item)\
    \ == n) {\n      arr.push_back(item);\n    }\n  }\n  return arr;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzyakxq1w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpzyakxq1w.cpp:19:9: error:\
    \ \u2018consonants\u2019 was not declared in this scope\n   19 |     if (consonants(item)\
    \ == n) {\n      |         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> vs;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(std::count_if(word.begin(),\
    \ word.end(), ::isalpha) == n) {\n            vs.push_back(word);\n        }\n\
    \    }\n    return vs;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpfg_nia8f: /tmp/tmpfg_nia8f.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    int counter = 0;\n    std::vector<std::string> result;\n \
    \   std::string currentWord = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == ' ' || i == s.length() - 1) {\n            if (counter\
    \ == n) {\n                result.push_back(currentWord);\n            }\n   \
    \         counter = 0;\n            currentWord = \"\";\n        } else {\n  \
    \          currentWord += s[i];\n            if (s[i] != 'a' && s[i] != 'e' &&\
    \ s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                counter++;\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpv4yc01oz: /tmp/tmpv4yc01oz.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string temp = \"\"\
    ;\n    std::stringstream ss(s);\n    while(ss >> temp){\n        long count =\
    \ 0;\n        std::cout << temp << std::endl;\n        for(char ch : temp){\n\
    \            if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            res.push_back(temp);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_14hzqgf: /tmp/tmp_14hzqgf.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: 'Mary

    had

    a

    little

    lamb

    Mary

    had

    a

    little

    lamb

    simple

    white

    space

    Hello

    world

    Uncle

    sam

    '
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (std::count_if(item.begin(), item.end(), ::isalpha) == n) {\n            words.push_back(item);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpljdw5jbh: /tmp/tmpljdw5jbh.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v1;\n    std::stringstream ss;\n\
    \    ss << s;\n    std::string word;\n    while(ss >> word) {\n        if(std::count_if(word.begin(),\
    \ word.end(), [](char c) {return c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u';}) == n)\n            v1.push_back(word);\n    }\n    return v1;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpup9g_sks: /tmp/tmpup9g_sks.cpp:31: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> words;\n\
    \tstd::string word;\n\twhile (iss >> word)\n\t\twords.push_back(word);\n\tstd::vector<std::string>\
    \ res;\n\tfor (std::string word : words) {\n\t\tint count = 0;\n\t\tfor (char\
    \ c : word) {\n\t\t\tif (std::string(\"bcdfghjklmnpqrstvwxyz\").find(c) != std::string::npos)\n\
    \t\t\t\tcount++;\n\t\t}\n\t\tif (count == n)\n\t\t\tres.push_back(word);\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpc4iwj5m7: /tmp/tmpc4iwj5m7.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::stringstream ss(s);\n    while (std::getline(ss, word, ' ')) {\n    \
    \    int consonants = 0;\n        for (char c : word) {\n            if (c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp5wm70hf9: /tmp/tmp5wm70hf9.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  int consonants = 0;\n  std::string\
    \ word = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ')\
    \ {\n      if (consonants == n) {\n        words.push_back(word);\n      }\n \
    \     word = \"\";\n      consonants = 0;\n    } else {\n      if (s[i] != 'a'\
    \ && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n        consonants++;\n\
    \      }\n      word += s[i];\n    }\n  }\n  if (consonants == n) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3wedf3au: /tmp/tmp3wedf3au.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    int vowels[5] = {0,0,0,0,0};\n    std::string out = \"\";\n\
    \    std::vector<std::string> w;\n    int count = 0;\n    int c = 0;\n    for(int\
    \ i = 0; i < s.length(); i++){\n        count = 0;\n        if(s[i] == ' '){\n\
    \            vowels[0] = 0;\n            vowels[1] = 0;\n            vowels[2]\
    \ = 0;\n            vowels[3] = 0;\n            vowels[4] = 0;\n            c\
    \ = 0;\n            if(out.length() == n){\n                w.push_back(out);\n\
    \            }\n            out = \"\";\n        }\n        else{\n          \
    \  out += s[i];\n            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u'){\n                vowels[c]++;\n            }\n     \
    \       for(int j = 0; j < 5; j++){\n                if(vowels[j] == 0){\n   \
    \                 count++;\n                }\n            }\n            if(count\
    \ == 5){\n                c++;\n            }\n        }\n    }\n    return w;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbnnejzbl: /tmp/tmpbnnejzbl.cpp:53: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words{};\n    std::string current_word{};\n\
    \    long cons_count{};\n    for (int i{}; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (cons_count == n) {\n                words.push_back(current_word);\n\
    \            }\n            current_word = \"\";\n            cons_count = 0;\n\
    \        } else {\n            current_word += s[i];\n            if (isalpha(s[i]))\
    \ {\n                if (!strchr(\"aeiouAEIOU\", s[i])) {\n                  \
    \  cons_count++;\n                }\n            }\n        }\n    }\n    if (cons_count\
    \ == n) {\n        words.push_back(current_word);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::stringstream ss(s);\n\tstd::vector<std::string> result;\n\
    \tstd::string token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tint count\
    \ = 0;\n\t\tfor (int i = 0; i < token.length(); i++) {\n\t\t\tif (token[i] !=\
    \ 'a' && token[i] != 'e' && token[i] != 'i' && token[i] != 'o' && token[i] !=\
    \ 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\tif (count == n)\n\t\t\tresult.push_back(token);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_2c1f840: /tmp/tmp_2c1f840.cpp:35: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n   std::stringstream ss;\n   ss<<s;\n   std::vector<std::string>v;\n\
    \   while(ss>>s){\n      int count=0;\n      for(int i=0;i<s.size();i++){\n  \
    \       if(s[i]!='a'&&s[i]!='e'&&s[i]!='i'&&s[i]!='o'&&s[i]!='u')\n          \
    \  count++;\n      }\n      if(count==n)\n         v.push_back(s);\n   }\n   return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp6oi1bn11: /tmp/tmp6oi1bn11.cpp:35: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   int count;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (count == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n            count = 0;\n        } else\
    \ {\n            if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n                count++;\n            }\n            word\
    \ += s[i];\n        }\n    }\n    if (count == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpo_x9cxmv: /tmp/tmpo_x9cxmv.cpp:40: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    if(s.size() == 0) {\n        return {};\n    }\n    std::vector<std::string>\
    \ result;\n    for(int i = 0; i < s.size(); ++i) {\n        std::string temp =\
    \ \"\";\n        long num = 0;\n        while(s[i] != ' ' && i < s.size()) {\n\
    \            temp += s[i];\n            ++i;\n            if(s[i] != 'a' && s[i]\
    \ != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                ++num;\n\
    \            }\n        }\n        if(num == n) {\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmplk7g05iv: /tmp/tmplk7g05iv.cpp:41: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word;\n   \
    \ int numConsonants = 0;\n    int i = 0;\n    while (i < s.length()) {\n     \
    \   if (s[i] == ' ') {\n            if (numConsonants == n) {\n              \
    \  res.push_back(word);\n            }\n            word = \"\";\n           \
    \ numConsonants = 0;\n        } else {\n            if (!(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')) {\n                numConsonants++;\n\
    \            }\n            word += s[i];\n        }\n        i++;\n    }\n  \
    \  if (numConsonants == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpq439njpx: /tmp/tmpq439njpx.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\t//split string into words\n\tstd::vector<std::string> words;\n\
    \tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word)\n\t\twords.push_back(word);\n\
    \t//select n consanants\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tstd::string\
    \ w = words[i];\n\t\tint con = 0;\n\t\tfor (int j = 0; j < w.size(); j++) {\n\t\
    \t\tchar c = tolower(w[j]);\n\t\t\tif (c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u')\n\t\t\t\tcon++;\n\t\t}\n\t\tif (con != n)\n\t\t\twords.erase(words.begin()\
    \ + i);\n\t}\n\treturn words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpjpi0gyrk: /tmp/tmpjpi0gyrk.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string word;\n  for\
    \ (char c : s) {\n    if (c == ' ') {\n      if (count_consonants(word) == n)\
    \ {\n        words.push_back(word);\n      }\n      word = \"\";\n    } else {\n\
    \      word += c;\n    }\n  }\n  if (count_consonants(word) == n) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5vtj18vb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp5vtj18vb.cpp:19:11: error:\
    \ \u2018count_consonants\u2019 was not declared in this scope\n   19 |       if\
    \ (count_consonants(word) == n) {\n      |           ^~~~~~~~~~~~~~~~\n/tmp/tmp5vtj18vb.cpp:27:7:\
    \ error: \u2018count_consonants\u2019 was not declared in this scope\n   27 |\
    \   if (count_consonants(word) == n) {\n      |       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> res;\n\tstd::string word = \"\";\n\t\
    int count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] != ' ')\
    \ {\n\t\t\tword += s[i];\n\t\t\tif (s[i] != 'a' && s[i] != 'e' && s[i] != 'i'\
    \ && s[i] != 'o' && s[i] != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\tif (count == n) {\n\t\t\t\tres.push_back(word);\n\t\t\t}\n\t\t\tword\
    \ = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t}\n\tif (count == n) {\n\t\tres.push_back(word);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpr8sx67im: /tmp/tmpr8sx67im.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::vector<std::string>\
    \ words;\n    int count = 0;\n    std::string w = \"\";\n    for (int i = 0; i\
    \ < s.length(); i++) {\n        if (s[i] == ' ') {\n            words.push_back(w);\n\
    \            w = \"\";\n        } else {\n            w += s[i];\n        }\n\
    \    }\n    words.push_back(w);\n    for (int i = 0; i < words.size(); i++) {\n\
    \        count = 0;\n        for (int j = 0; j < words[i].length(); j++) {\n \
    \           if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i'\
    \ && words[i][j] != 'o' && words[i][j] != 'u') {\n                count++;\n \
    \           }\n        }\n        if (count == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp6lst0r4l: /tmp/tmp6lst0r4l.cpp:47: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // TODO: implement.\n    std::vector<std::string> words;\n\
    \    std::string word;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \    std::stringstream ss(s);\n    while(ss >> word){\n        int count = 0;\n\
    \        for(int i = 0; i < word.length(); i++){\n            if(std::find(vowels.begin(),\
    \ vowels.end(), word[i]) == vowels.end()){\n                count++;\n       \
    \     }\n        }\n        if(count == n){\n            words.push_back(word);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmphwj5d0_y: /tmp/tmphwj5d0_y.cpp:39: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tlong consonants = 0;\n\t\tfor\
    \ (char c : word) {\n\t\t\tswitch (tolower(c)) {\n\t\t\tcase 'a':\n\t\t\tcase\
    \ 'e':\n\t\t\tcase 'i':\n\t\t\tcase 'o':\n\t\t\tcase 'u':\n\t\t\t\tbreak;\n\t\t\
    \tdefault:\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\
    \t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> answer;\n\tstd::string word;\n\tstd::stringstream\
    \ ss(s);\n\tbool is_vowel(char c);\n\twhile (std::getline(ss, word, ' ')) {\n\t\
    \tint count = 0;\n\t\tfor (int i = 0; i < word.size(); i++) {\n\t\t\tif (!is_vowel(word[i]))\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tanswer.push_back(word);\n\
    \t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: '/usr/bin/ld: /tmp/ccfDZNR6.o: in function `select_words(std::__cxx11::basic_string<char,
    std::char_traits<char>, std::allocator<char> >, long)'':

    tmpsm_cn_u2.cpp:(.text+0x111): undefined reference to `is_vowel(char)''

    collect2: error: ld returned 1 exit status

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> v;\n  std::string space = \" \";\n\
    \  long pos = 0;\n  while ((pos = s.find(space)) != std::string::npos) {\n   \
    \ std::string word = s.substr(0, pos);\n    long consonants = 0;\n    for (char&\
    \ c : word) {\n      char low = tolower(c);\n      if (low != 'a' && low != 'e'\
    \ && low != 'i' && low != 'o' && low != 'u') {\n        consonants++;\n      }\n\
    \    }\n    if (consonants == n) {\n      v.push_back(word);\n    }\n    s.erase(0,\
    \ pos + space.length());\n  }\n  std::string word = s.substr(0, pos);\n  long\
    \ consonants = 0;\n  for (char& c : word) {\n    char low = tolower(c);\n    if\
    \ (low != 'a' && low != 'e' && low != 'i' && low != 'o' && low != 'u') {\n   \
    \   consonants++;\n    }\n  }\n  if (consonants == n) {\n    v.push_back(word);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tint cons = 0;\n\tstd::vector<std::string> result;\n\tstd::string\
    \ word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ')\
    \ {\n\t\t\tif (cons == n) {\n\t\t\t\tresult.push_back(word);\n\t\t\t}\n\t\t\t\
    word = \"\";\n\t\t\tcons = 0;\n\t\t}\n\t\telse {\n\t\t\tword += s[i];\n\t\t\t\
    if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\
    \t\t\t\tcons++;\n\t\t\t}\n\t\t}\n\t}\n\tif (cons == n) {\n\t\tresult.push_back(word);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsy3igw27: /tmp/tmpsy3igw27.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string current = \"\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n  \
    \          current = \"\";\n        } else {\n            current += s[i];\n \
    \           int count = 0;\n            for (int j = 0; j < current.length();\
    \ j++) {\n                if (!(current[j] == 'a' || current[j] == 'e' || current[j]\
    \ == 'i' || current[j] == 'o' || current[j] == 'u')) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     v.push_back(current);\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpmuhsgg0l: /tmp/tmpmuhsgg0l.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::stringstream ss(s);\n    std::vector<std::string> vec;\n\
    \    std::string str;\n    while(ss >> str) {\n        int count = 0;\n      \
    \  std::transform(str.begin(), str.end(), str.begin(), ::tolower);\n        for(auto\
    \ i: str) {\n            if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i\
    \ == 'u') {\n                count++;\n            }\n        }\n        if(count\
    \ == n) {\n            vec.push_back(str);\n        }\n    }\n    return vec;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp9w71oigm: /tmp/tmp9w71oigm.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v, v2;\n\tstd::string t;\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tv.push_back(t);\n\
    \t\t\tt = \"\";\n\t\t}\n\t\telse {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (t != \"\
    \") v.push_back(t);\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tint count = 0;\n\
    \t\tfor (int j = 0; j < v[i].length(); j++) {\n\t\t\tchar c = v[i][j];\n\t\t\t\
    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count == n) v2.push_back(v[i]);\n\t}\n\treturn v2;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp5krxnii6: /tmp/tmp5krxnii6.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::regex reg (\"[aeiouAEIOU]+\"\
    );\n    std::sregex_token_iterator iter(s.begin(), s.end(), reg, -1);\n    std::sregex_token_iterator\
    \ end;\n    std::vector<std::string> words(iter, end);\n    for (int i = 0; i\
    \ < words.size(); i++) {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp4zq2nkf2: /tmp/tmp4zq2nkf2.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (std::count_if(item.begin(), item.end(), [](char c) { return std::string(\"\
    AEIOUaeiou\").find(c) == std::string::npos; }) == n)\n            result.push_back(item);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  int l = s.length();\n  std::vector<std::string> v;\n  for(int\
    \ i = 0; i < l;) {\n    int j = i;\n    while(s[j] != ' ' && j < l)\n      j++;\n\
    \    int k = i;\n    int count = 0;\n    while(k < j) {\n      if(s[k] != 'a'\
    \ && s[k] != 'e' && s[k] != 'i' && s[k] != 'o' && s[k] != 'u')\n        count++;\n\
    \      k++;\n    }\n    if(count == n) {\n      std::string tmp = \"\";\n    \
    \  while(i < j) {\n        tmp += s[i];\n        i++;\n      }\n      v.push_back(tmp);\n\
    \    }\n    i = j + 1;\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpalmg3olq: /tmp/tmpalmg3olq.cpp:46: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> vect;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while(ss >> word){\n        if(std::count_if(word.begin(),\
    \ word.end(), [](char c){ return std::string(\"aeiou\").find(c) == std::string::npos;\
    \ }) == n)\n            vect.push_back(word);\n    }\n    return vect;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpw6vewn0u: /tmp/tmpw6vewn0u.cpp:30: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string word;\n  //char\
    \ vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  //std::vector<char> v(vowels, vowels\
    \ + sizeof(vowels)/sizeof(char));\n  long count = 0;\n  for(int i = 0; i < s.length();\
    \ i++) {\n    if(s[i] == ' ') {\n      if(count == n) {\n        words.push_back(word);\n\
    \      }\n      word = \"\";\n      count = 0;\n    } else {\n      word += s[i];\n\
    \      if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] !=\
    \ 'u') {\n        count++;\n      }\n    }\n  }\n  if(count == n) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp46chwz8y: /tmp/tmp46chwz8y.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> v{};\n  if (s.size() == 0) {\n    return\
    \ v;\n  }\n  std::stringstream ss(s);\n  std::string word;\n  while (ss >> word)\
    \ {\n    long numConsonants = 0;\n    for (auto c : word) {\n      if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        numConsonants++;\n\
    \      }\n    }\n    if (numConsonants == n) {\n      v.push_back(word);\n   \
    \ }\n  }\n  return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp91z0o_tw: /tmp/tmp91z0o_tw.cpp:40: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word;\n \
    \   std::istringstream iss(s);\n    while (iss >> word) {\n        if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            switch (c) {\n                case 'a':\
    \ case 'e': case 'i': case 'o': case 'u': case 'y':\n                    return\
    \ false;\n                default:\n                    return true;\n       \
    \     }\n        }) == n) {\n            words.push_back(word);\n        }\n \
    \   }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp4wat7k2h: /tmp/tmp4wat7k2h.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    int len = s.length();\n    if(len==0) return {};\n    std::vector<std::string>\
    \ words;\n    int i=0;\n    while(i<len){\n        std::string word;\n       \
    \ while(i<len && s[i]!=' '){\n            word += s[i];\n            i++;\n  \
    \      }\n        words.push_back(word);\n        i++;\n    }\n    std::string\
    \ consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n    std::vector<std::string>\
    \ result;\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n    \
    \    for(int j=0;j<words[i].length();j++){\n            for(int k=0;k<consonants.length();k++){\n\
    \                if(words[i][j]==consonants[k]){\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if(count==n) result.push_back(words[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::stringstream ss;\n  std::vector<std::string> result;\n\
    \  ss << s;\n  while (ss >> s) {\n    int vowels = 0;\n    for (auto c : s) {\n\
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \   vowels++;\n      }\n    }\n    if (s.size() - vowels == n) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpz1uy4mzw: /tmp/tmpz1uy4mzw.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    vector<string> words;\n    stringstream ss(s);\n    string\
    \ temp;\n    while(ss >> temp){\n        long count=0;\n        for(int i=0;i<temp.length();i++){\n\
    \            if(temp[i]=='a'||temp[i]=='e'||temp[i]=='i'||temp[i]=='o'||temp[i]=='u'){\n\
    \                count++;\n            }\n        }\n        if(temp.length()-count==n){\n\
    \            words.push_back(temp);\n        }\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy63ygzp4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpy63ygzp4.cpp:15:5: error:\
    \ \u2018vector\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ words;\n      |     ^~~~~~\n/tmp/tmpy63ygzp4.cpp:15:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy63ygzp4.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy63ygzp4.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpy63ygzp4.cpp:15:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ words;\n      |            ^~~~~~\n/tmp/tmpy63ygzp4.cpp:15:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpy63ygzp4.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;"
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  bool vowel[26];\n  memset(vowel, 0, sizeof(vowel));\n  vowel['a'\
    \ - 'a'] = true;\n  vowel['e' - 'a'] = true;\n  vowel['i' - 'a'] = true;\n  vowel['o'\
    \ - 'a'] = true;\n  vowel['u' - 'a'] = true;\n  vowel['y' - 'a'] = true;\n  std::vector<std::string>\
    \ words;\n  int sz = s.size();\n  int l = 0, r = 0;\n  while (r < sz) {\n    while\
    \ (r < sz && s[r] != ' ') r++;\n    int consonants = 0;\n    for (int i = l; i\
    \ < r; i++) {\n      if (!vowel[s[i] - 'a']) consonants++;\n    }\n    if (consonants\
    \ == n) words.push_back(s.substr(l, r - l));\n    l = r + 1;\n    r = l;\n  }\n\
    \  return words;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpem8bwshi: /tmp/tmpem8bwshi.cpp:41: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> vec;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while(ss >> word) {\n    int count = 0;\n    for(int i\
    \ = 0; i < word.length(); i++) {\n      if(word[i] != 'a' && word[i] != 'e' &&\
    \ word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n        count++;\n  \
    \    }\n    }\n    if(count == n) {\n      vec.push_back(word);\n    }\n  }\n\
    \  return vec;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpuw46gtgq: /tmp/tmpuw46gtgq.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> vec;\n\tint vowel = 0;\n\tstd::string\
    \ temp;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ' || i ==\
    \ s.length() - 1) {\n\t\t\tvowel = 0;\n\t\t\tfor (int j = 0; j < temp.length();\
    \ j++) {\n\t\t\t\tif (temp[j] == 'a' || temp[j] == 'e' || temp[j] == 'i' || temp[j]\
    \ == 'o' || temp[j] == 'u') {\n\t\t\t\t\tvowel++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    if (vowel == n) {\n\t\t\t\tvec.push_back(temp);\n\t\t\t}\n\t\t\ttemp.clear();\n\
    \t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\t\t}\n\t}\n\treturn vec;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpvzxvp22u: /tmp/tmpvzxvp22u.cpp:39: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> vowels = {\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\"};\n    std::vector<std::string> output;\n    std::stringstream\
    \ strstream(s);\n    std::string s2;\n    long count = 0;\n    while(strstream\
    \ >> s2) {\n        for(int i = 0; i < s2.length(); i++) {\n            std::string\
    \ letter = \"\";\n            letter += s2[i];\n            letter = tolower(letter[0]);\n\
    \            if(std::find(vowels.begin(), vowels.end(), letter) == vowels.end())\
    \ {\n                count++;\n            }\n        }\n        if(count == n)\
    \ {\n            output.push_back(s2);\n        }\n        count = 0;\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpi1t5md8h: /tmp/tmpi1t5md8h.cpp:39: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    if (s.empty()) return\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >>\
    \ word) {\n        long count = 0;\n        for (char ch : word) {\n         \
    \   switch (tolower(ch)) {\n                case 'a': case 'e': case 'i': case\
    \ 'o': case 'u':\n                    break;\n                default:\n     \
    \               count++;\n            }\n        }\n        if (count == n) words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140836
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> res;\n\tstd::string cur;\n\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tint cnt = 0;\n\t\t\
    \tfor (char c : cur)\n\t\t\t\tif (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u')\n\t\t\t\t\tcnt++;\n\t\t\tif (cnt == n) res.push_back(cur);\n\t\t\
    \tcur = \"\";\n\t\t}\n\t\telse cur += s[i];\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp93r7_jqj: /tmp/tmp93r7_jqj.cpp:33: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  \tstd::vector<std::string> vec;\n  \tstd::string s2 = \"\";\n\
    \  \tfor(int i = 0; i < s.length(); i++){\n  \t\tif(s[i] != ' '){\n  \t\t\ts2\
    \ += s[i];\n  \t\t}else{\n  \t\t\tint count = 0;\n  \t\t\tfor(int j = 0; j < s2.length();\
    \ j++){\n  \t\t\t\tif(s2[j] != 'a' && s2[j] != 'e' && s2[j] != 'i' && s2[j] !=\
    \ 'o' && s2[j] != 'u'){\n  \t\t\t\t\tcount++;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t\
    if(count == n){\n  \t\t\t\tvec.push_back(s2);\n  \t\t\t}\n  \t\t\ts2 = \"\";\n\
    \  \t\t}\n  \t}\n  \treturn vec;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpuneftogf: /tmp/tmpuneftogf.cpp:38: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> l;\n    std::string word;\n    int\
    \ count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] !=\
    \ ' ') {\n            word += s[i];\n            if (isConsonant(s[i])) count++;\n\
    \        } else {\n            if (count == n) l.push_back(word);\n          \
    \  word = \"\";\n            count = 0;\n        }\n    }\n    if (count == n)\
    \ l.push_back(word);\n    return l;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zm5zgcn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp9zm5zgcn.cpp:21:17: error:\
    \ \u2018isConsonant\u2019 was not declared in this scope\n   21 |            \
    \ if (isConsonant(s[i])) count++;\n      |                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140836
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> v;\n  // create a map of char = count\
    \ pairs\n  std::map<char, int> m;\n  // create a vowel vector\n  std::vector<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n  // create a string to store the current\
    \ word\n  std::string word = \"\";\n  for (long i = 0; i < s.length(); i++) {\n\
    \    // if character is not a space, add it to current word\n    if (s[i] != '\
    \ ') {\n      word += s[i];\n    }\n    // if character is a space\n    else {\n\
    \      // if word is empty, continue\n      if (word == \"\") {\n        continue;\n\
    \      }\n      // for each character in the word\n      for (long j = 0; j <\
    \ word.length(); j++) {\n        // if character is a vowel\n        if (std::find(vowels.begin(),\
    \ vowels.end(), tolower(word[j])) != vowels.end()) {\n          // if the map\
    \ has the vowel, increment count\n          if (m.find(tolower(word[j])) != m.end())\
    \ {\n            m[tolower(word[j])]++;\n          }\n          // else set count\
    \ = 1\n          else {\n            m[tolower(word[j])] = 1;\n          }\n \
    \       }\n      }\n      // if map size is n, add the word to the result vector\n\
    \      if (m.size() == n) {\n        v.push_back(word);\n      }\n      // clear\
    \ the map and the word\n      m.clear();\n      word = \"\";\n    }\n  }\n  //\
    \ for the last word\n  for (long j = 0; j < word.length(); j++) {\n    // if character\
    \ is a vowel\n    if (std::find(vowels.begin(), vowels.end(), tolower(word[j]))\
    \ != vowels.end()) {\n      // if the map has the vowel, increment count\n   \
    \   if (m.find(tolower(word[j])) != m.end()) {\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h4ih0s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpa4h4ih0s.cpp:63:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   63\
    \ | int main() {\n      |            ^\n/tmp/tmpa4h4ih0s.cpp:72:1: error: expected\
    \ \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmpa4h4ih0s.cpp:59:84:\
    \ note: to match this \u2018{\u2019\n   59 |     if (std::find(vowels.begin(),\
    \ vowels.end(), tolower(word[j])) != vowels.end()) {\n      |                \
    \                                                                    ^\n/tmp/tmpa4h4ih0s.cpp:72:1:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmpa4h4ih0s.cpp:57:44:\
    \ note: to match this \u2018{\u2019\n   57 |   for (long j = 0; j < word.length();\
    \ j++) {\n      |                                            ^\n/tmp/tmpa4h4ih0s.cpp:72:1:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmpa4h4ih0s.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpa4h4ih0s.cpp:72:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   72 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660140836
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> ret;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  std::unordered_set<char>vowels = {'a','e','i','o','u','A','E','I','O','U'};\n\
    \  while(ss >> word){\n    long count = 0;\n    for(char& c : word){\n      if(vowels.find(c)\
    \ == vowels.end())\n        count++;\n    }\n    if(count == n)\n      ret.push_back(word);\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> result;\n\
    \tstd::string str;\n\twhile (iss >> str) {\n\t\tif (std::count_if(str.begin(),\
    \ str.end(), isalpha) - std::count_if(str.begin(), str.end(), [](char c) {return\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'; }) == n) {\n\t\t\t\
    result.push_back(str);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7ipg4ttk: /tmp/tmp7ipg4ttk.cpp:31: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> res{};\n  std::string curr = \"\";\n\
    \  std::string output = \"\";\n  int cons = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] == ' ') {\n      output = curr;\n      curr = \"\";\n \
    \     cons = 0;\n      for (int j = 0; j < output.length(); j++) {\n        if\
    \ (output[j] != 'a' && output[j] != 'e' && output[j] != 'i' && output[j] != 'o'\
    \ && output[j] != 'u') {\n          cons++;\n        }\n      }\n      if (cons\
    \ == n) {\n        res.push_back(output);\n      }\n    } else {\n      curr +=\
    \ s[i];\n    }\n  }\n  output = curr;\n  curr = \"\";\n  cons = 0;\n  for (int\
    \ j = 0; j < output.length(); j++) {\n    if (output[j] != 'a' && output[j] !=\
    \ 'e' && output[j] != 'i' && output[j] != 'o' && output[j] != 'u') {\n      cons++;\n\
    \    }\n  }\n  if (cons == n) {\n    res.push_back(output);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpk8ie_f1n: /tmp/tmpk8ie_f1n.cpp:55: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140838
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    long nconsonants = 0;\n    std::vector<std::string> list;\n\
    \    std::string temp;\n    for(auto i: s){\n        if(i == ' ' || i == '\\0'){\n\
    \            if(nconsonants == n){\n                list.push_back(temp);\n  \
    \          }\n            temp.clear();\n            nconsonants = 0;\n      \
    \  }\n        else{\n            char tempC = tolower(i);\n            if(tempC\
    \ != 'a' && tempC != 'e' && tempC != 'i' && tempC != 'o' && tempC != 'u'){\n \
    \               nconsonants++;\n            }\n            temp.push_back(i);\n\
    \        }\n    }\n    if(nconsonants == n){\n        list.push_back(temp);\n\
    \    }\n    return list;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140837
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string token;\n\
    \    std::stringstream stream(s);\n    while (getline(stream, token, ' '))\n \
    \   {\n        if (token.length() == n)\n        {\n            words.push_back(token);\n\
    \        }\n    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp11c8xcpg: /tmp/tmp11c8xcpg.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140839
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> a;\n    std::istringstream iss(s);\n\
    \    while(iss >> s) {\n        if(count(s.begin(), s.end(), 'a') +\n        \
    \        count(s.begin(), s.end(), 'e') +\n                count(s.begin(), s.end(),\
    \ 'i') +\n                count(s.begin(), s.end(), 'o') +\n                count(s.begin(),\
    \ s.end(), 'u') == s.size() - n)\n            a.push_back(s);\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpad1v22kq: /tmp/tmpad1v22kq.cpp:33: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string>result;\n\tstd::vector<std::string>words;\n\
    \tint counter = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] ==\
    \ ' ') {\n\t\t\twords.push_back(s.substr(counter, i - counter));\n\t\t\tcounter\
    \ = i + 1;\n\t\t}\n\t}\n\twords.push_back(s.substr(counter, s.length() - counter));\n\
    \tfor (int i = 0; i < words.size(); i++) {\n\t\tint l = 0;\n\t\tfor (int j = 0;\
    \ j < words[i].length(); j++) {\n\t\t\tif (words[i][j] != 'a' && words[i][j] !=\
    \ 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u') {\n\t\
    \t\t\tl++;\n\t\t\t}\n\t\t}\n\t\tif (l == n) {\n\t\t\tresult.push_back(words[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpcu2ja0c6: /tmp/tmpcu2ja0c6.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> ans;\n    std::string temp;\n   \
    \ long count = 0;\n    std::stringstream ss(s);\n    while(ss >> temp){\n    \
    \    count = 0;\n        for(int i = 0; i < temp.length(); i++){\n           \
    \ if(temp[i] != 'a' && temp[i] != 'e' && temp[i] != 'i' && temp[i] != 'o' && temp[i]\
    \ != 'u'){\n                count++;\n            }\n        }\n        if(count\
    \ == n){\n            ans.push_back(temp);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmplgg1kzje: /tmp/tmplgg1kzje.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tint cnt = 0;\n\tstd::string tmp\
    \ = \"\";\n\tfor (char c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tif (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') cnt = 0;\n\t\t\telse cnt++;\n\t\
    \t\ttmp += c;\n\t\t}\n\t\telse {\n\t\t\tif (cnt == n) v.push_back(tmp);\n\t\t\t\
    tmp = \"\";\n\t\t\tcnt = 0;\n\t\t}\n\t}\n\tif (cnt == n) v.push_back(tmp);\n\t\
    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpg_wwpnhb: /tmp/tmpg_wwpnhb.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words, res;\n    std::stringstream\
    \ iss(s);\n    while(iss >> s) words.push_back(s);\n    if(words.size() == 0)\
    \ return res;\n    for(int i = 0; i < words.size(); i++) {\n        std::string\
    \ word = words[i];\n        int cnt = 0;\n        for(int j = 0; j < word.size();\
    \ j++) {\n            if(word[j] != 'a' && word[j] != 'e' && word[j] != 'i' &&\
    \ word[j] != 'o' && word[j] != 'u') {\n                cnt++;\n            }\n\
    \        }\n        if(cnt == n) res.push_back(word);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp90vh3r99: /tmp/tmp90vh3r99.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> result;\n\tstd::string word;\n\tstd::stringstream\
    \ ss(s);\n\twhile (ss >> word) {\n\t\tint cons = 0;\n\t\tfor (int i = 0; i < word.size();\
    \ i++) {\n\t\t\tswitch (word[i]) {\n\t\t\t\tcase 'a':\n\t\t\t\tcase 'e':\n\t\t\
    \t\tcase 'i':\n\t\t\t\tcase 'o':\n\t\t\t\tcase 'u':\n\t\t\t\t\tbreak;\n\t\t\t\t\
    default:\n\t\t\t\t\tcons++;\n\t\t\t}\n\t\t}\n\t\tif (cons == n) {\n\t\t\tresult.push_back(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpvfq3_rkh: /tmp/tmpvfq3_rkh.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    int count;\n   \
    \ for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n       \
    \     count = 0;\n            for (char c : word) {\n                if (consonants.find(c)\
    \ != std::string::npos) {\n                    count++;\n                }\n \
    \           }\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    count = 0;\n    for (char c : word) {\n       \
    \ if (consonants.find(c) != std::string::npos) {\n            count++;\n     \
    \   }\n    }\n    if (count == n) {\n        result.push_back(word);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpacobgf4r: /tmp/tmpacobgf4r.cpp:49: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> ret;\n    std::string cons{\"bcdfghjklmnpqrstvwxyz\"\
    };\n    std::string word;\n    std::stringstream ss(s);\n    while(ss >> word){\n\
    \        int count = 0;\n        for(auto c : word){\n            count += cons.find(tolower(c))\
    \ != std::string::npos;\n        }\n        if(count == n) ret.push_back(word);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    if (s.empty()) return\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    long consonants\
    \ = 0;\n    while (ss >> word) {\n        consonants = 0;\n        for (auto c\
    \ : word) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u')\n                consonants++;\n        }\n        if (consonants ==\
    \ n) words.push_back(word);\n    }\n    return words;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpl3k8kbre: /tmp/tmpl3k8kbre.cpp:36: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    int count = 0;\n   \
    \ std::stringstream str(s);\n    std::string temp;\n    while(str >> temp){\n\
    \        count = 0;\n        for(int i = 0; i < temp.length(); i++){\n       \
    \     if(temp[i] == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o'\
    \ || temp[i] == 'u'){\n                count++;\n            }\n        }\n  \
    \      if(temp.length() - count == n){\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmprg00wgk0: /tmp/tmprg00wgk0.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while(ss >> word) {\n        long count = 0;\n   \
    \     for(auto i : word) {\n            if(i == 'a' || i == 'e' || i == 'i' ||\
    \ i == 'o' || i == 'u') {\n                count++;\n            }\n        }\n\
    \        if(word.size() - count == n) {\n            res.push_back(word);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp762vshmi: /tmp/tmp762vshmi.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string word = \"\";\n\
    \  int cons = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == '\
    \ ') {\n      if (cons == n) {\n        words.push_back(word);\n      }\n    \
    \  word = \"\";\n      cons = 0;\n    } else {\n      word += s[i];\n      if\
    \ (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\
    \        cons++;\n      }\n    }\n  }\n  if (cons == n) {\n    words.push_back(word);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp05ytlgi8: /tmp/tmp05ytlgi8.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tstd::string word;\n\tstd::stringstream\
    \ ss(s);\n\tlong count;\n\tint word_count;\n\tstd::string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n\twhile (ss >> word) {\n\t\tcount = 0;\n\t\tword_count = 0;\n\t\tfor (int i\
    \ = 0; i < word.length(); i++) {\n\t\t\tfor (int j = 0; j < consonants.length();\
    \ j++) {\n\t\t\t\tif (word[i] == consonants[j]) {\n\t\t\t\t\tcount++;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t\
    }\n\treturn v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdnia8ip0: /tmp/tmpdnia8ip0.cpp:40: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words, res;\n\tstd::string word = \"\
    \";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\t\
    words.push_back(word);\n\t\t\tword = \"\";\n\t\t}\n\t\telse word += s[i];\n\t\
    }\n\twords.push_back(word);\n\tfor (auto word : words) {\n\t\tlong num_consonants\
    \ = 0;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tif (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') num_consonants++;\n\
    \t\t}\n\t\tif (num_consonants == n) res.push_back(word);\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp19qfqp18: /tmp/tmp19qfqp18.cpp:40: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (std::getline(ss, word, ' ')) {\n    if (word.length()\
    \ == n) {\n      result.push_back(word);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpfddlw3s9: /tmp/tmpfddlw3s9.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    //Your code goes here\n    long count;\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string item;\n    while(std::getline(ss,\
    \ item, ' ')) {\n        count = 0;\n        for(std::string::iterator it = item.begin();\
    \ it != item.end(); it++) {\n            if (*it != 'a' && *it != 'e' && *it !=\
    \ 'i' && *it != 'o' && *it != 'u') {\n                count++;\n            }\n\
    \        }\n        if (count == n) {\n            result.push_back(item);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpcjor8lde: /tmp/tmpcjor8lde.cpp:39: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    int flag = 0;\n\
    \    int c = 0;\n    int l = s.length();\n    for(int i = 0; i < l; i++) {\n \
    \       if(s[i] == ' ' && flag == 1) {\n            if(c == n) {\n           \
    \     result.push_back(temp);\n            }\n            temp = \"\";\n     \
    \       flag = 0;\n            c = 0;\n        }\n        else if(s[i] == ' '\
    \ && flag == 0) {\n            temp = \"\";\n            flag = 0;\n         \
    \   c = 0;\n        }\n        else {\n            if(consonants.find(s[i]) !=\
    \ std::string::npos) {\n                c++;\n            }\n            flag\
    \ = 1;\n            temp += s[i];\n        }\n    }\n    if(c == n) {\n      \
    \  result.push_back(temp);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpuo11msmb: /tmp/tmpuo11msmb.cpp:51: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tstd::string str = \"\";\n\tlong\
    \ count = 0;\n\tlong i = 0;\n\twhile (i < s.length()) {\n\t\tif (s[i] == ' ')\
    \ {\n\t\t\tif (count == n) {\n\t\t\t\tv.push_back(str);\n\t\t\t}\n\t\t\tstr =\
    \ \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse {\n\t\t\tstr += s[i];\n\t\t\tif (!(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')) {\n\t\t\
    \t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (count == n) {\n\t\tv.push_back(str);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpgkmqrkfg: /tmp/tmpgkmqrkfg.cpp:46: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream stream(s);\n\
    \    std::string item;\n    while (getline(stream, item, ' ')) {\n        int\
    \ count = 0;\n        for (auto ch : item) {\n            if (ch == 'a' || ch\
    \ == 'e' || ch == 'i' || ch == 'o' || ch == 'u') count++;\n        }\n       \
    \ if (item.size() - count == n) result.push_back(item);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsqtr0u5v: /tmp/tmpsqtr0u5v.cpp:33: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\
    \tstd::stringstream temp;\n\tstd::string word;\n\tint cnt = 0;\n\twhile (std::getline(ss,\
    \ word, ' ')) {\n\t\tfor (int i = 0; i < word.size(); i++) {\n\t\t\tif (word[i]\
    \ != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u')\
    \ {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tif (cnt == n) {\n\t\t\tresult.push_back(word);\n\
    \t\t}\n\t\tcnt = 0;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp22fr0_s1: /tmp/tmp22fr0_s1.cpp:39: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    vector<string> res;\n    stringstream ss(s);\n    string temp;\n\
    \    while(ss >> temp){\n        int count = 0;\n        for(int i = 0; i < temp.size();\
    \ i++){\n            if(temp[i] != 'a' && temp[i] != 'e' && temp[i] != 'i' &&\
    \ temp[i] != 'o' && temp[i] != 'u')\n                count++;\n        }\n   \
    \     if(count == n)\n            res.push_back(temp);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2av0a8cr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp2av0a8cr.cpp:15:5: error:\
    \ \u2018vector\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ res;\n      |     ^~~~~~\n/tmp/tmp2av0a8cr.cpp:15:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2av0a8cr.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2av0a8cr.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp2av0a8cr.cpp:15:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ res;\n      |            ^~~~~~\n/tmp/tmp2av0a8cr.cpp:15:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2av0a8cr.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \  "
  stdout: ''
  timestamp: 1660140840
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> ans;\n\tstd::string nvowel = \"aeiou\"\
    ;\n\tstd::stringstream ss(s);\n\tstd::string str;\n\twhile (ss >> str) {\n\t\t\
    size_t c = 0;\n\t\tfor (size_t i = 0; i < str.size(); i++) {\n\t\t\tif (nvowel.find(str[i])\
    \ == std::string::npos) {\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\tif (c == n) {\n\t\
    \t\tans.push_back(str);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpgp5s7h7u: /tmp/tmpgp5s7h7u.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string res = \"\";\n\
    \  int i = 0;\n  while(i < s.length()){\n    while(s[i] != ' ' && i < s.length()){\n\
    \      res += s[i];\n      i++;\n    }\n    if(res.length() != 0){\n      if(n\
    \ == std::count_if(res.begin(), res.end(), [](char c){return (std::string(\"aeiou\"\
    ).find(c) == std::string::npos);}))\n        words.push_back(res);\n      res\
    \ = \"\";\n    }\n    i++;\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp364flc3x: /tmp/tmp364flc3x.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  auto result = std::vector<std::string>();\n  auto it = s.begin();\n\
    \  auto cursor = s.begin();\n  auto word_length = 0;\n  auto letter_count = 0;\n\
    \  for (; it != s.end(); ++it) {\n    if (*it == ' ') {\n      if (letter_count\
    \ == n) {\n        result.push_back(std::string(cursor, it));\n      }\n     \
    \ letter_count = 0;\n      word_length = 0;\n      cursor = it + 1;\n    } else\
    \ {\n      switch (*it) {\n        case 'a':\n        case 'e':\n        case\
    \ 'i':\n        case 'o':\n        case 'u':\n          break;\n        default:\n\
    \          ++letter_count;\n      }\n      ++word_length;\n    }\n  }\n  if (letter_count\
    \ == n) {\n    result.push_back(std::string(cursor, it));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpnwnc7d5f: /tmp/tmpnwnc7d5f.cpp:53: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::istringstream is(s);\n\
    \  std::string word;\n  while (is >> word) {\n    auto it = std::find_if(word.begin(),\
    \ word.end(), [](char c) {\n      return c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u';\n    });\n    if (it == word.end()) {\n      continue;\n\
    \    }\n    if (std::count_if(word.begin(), word.end(), [](char c) {\n      return\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }) == n) {\n\
    \      words.push_back(word);\n    }\n  }\n  return words;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpufnqj2uf: /tmp/tmpufnqj2uf.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::stringstream ss(s);\n    std::vector<std::string> word_v;\n\
    \    std::string word;\n    int consonant_cnt = 0;\n    while(std::getline(ss,\
    \ word, ' ')) {\n        consonant_cnt = 0;\n        for(int i = 0; i < word.length();\
    \ i++) {\n            if(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' &&\
    \ word[i] != 'o' && word[i] != 'u') {\n                consonant_cnt++;\n    \
    \        }\n        }\n        if(consonant_cnt == n) {\n            word_v.push_back(word);\n\
    \        }\n    }\n    return word_v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp6lkf_fvm: /tmp/tmp6lkf_fvm.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (count_consonants(word) == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (count_consonants(word) == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrq9_dv_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpdrq9_dv_.cpp:19:17: error:\
    \ \u2018count_consonants\u2019 was not declared in this scope\n   19 |       \
    \      if (count_consonants(word) == n) {\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpdrq9_dv_.cpp:27:9: error: \u2018count_consonants\u2019 was not declared\
    \ in this scope\n   27 |     if (count_consonants(word) == n) {\n      |     \
    \    ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140839
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string word;\n  std::istringstream\
    \ iss(s);\n  while (std::getline(iss, word, ' ')) {\n    std::size_t count = std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n      return (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y');\n    });\n    if (word.size() - count ==\
    \ n) {\n      words.push_back(word);\n    }\n  }\n  return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpel1cahud: /tmp/tmpel1cahud.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // your code here\n    std::stringstream ss(s);\n    std::string\
    \ temp;\n    std::vector<std::string> result;\n    std::set<char> vset;\n    for(auto\
    \ item : {'a','e','i','o','u','A','E','I','O','U'}){\n        vset.insert(item);\n\
    \    }\n    while(ss >> temp){\n        int ccount = 0;\n        for(auto &item\
    \ : temp){\n            if(vset.find(item) == vset.end()){\n                ccount++;\n\
    \            }\n        }\n        if(ccount == n){\n            result.push_back(temp);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string next_word;\n\
    \    std::stringstream strStream(s);\n    while (strStream >> next_word) {\n \
    \       if (count(next_word.begin(), next_word.end(), 'a') +\n            count(next_word.begin(),\
    \ next_word.end(), 'e') +\n            count(next_word.begin(), next_word.end(),\
    \ 'i') +\n            count(next_word.begin(), next_word.end(), 'o') +\n     \
    \       count(next_word.begin(), next_word.end(), 'u') == n) {\n            result.push_back(next_word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8ez9pyo0: /tmp/tmp8ez9pyo0.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] != ' ') {\n\
    \            temp += s[i];\n        } else {\n            if (count_consonants(temp)\
    \ == n) {\n                result.push_back(temp);\n            }\n          \
    \  temp = \"\";\n        }\n    }\n    if (count_consonants(temp) == n) {\n  \
    \      result.push_back(temp);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4vh6ygb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpf4vh6ygb.cpp:21:17: error:\
    \ \u2018count_consonants\u2019 was not declared in this scope\n   21 |       \
    \      if (count_consonants(temp) == n) {\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpf4vh6ygb.cpp:27:9: error: \u2018count_consonants\u2019 was not declared\
    \ in this scope\n   27 |     if (count_consonants(temp) == n) {\n      |     \
    \    ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::istringstream is(s);\n\
    \    std::string word;\n    std::set<char> consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};\n\
    \    while (is >> word) {\n        int consonant_count = 0;\n        for (char\
    \ c : word) {\n            if (consonants.find(std::tolower(c)) != consonants.end())\
    \ {\n                consonant_count++;\n            }\n        }\n        if\
    \ (consonant_count == n) {\n            result.push_back(word);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp1apwvz7b: /tmp/tmp1apwvz7b.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::string delimiter = \" \";\n    size_t pos = 0;\n    std::string\
    \ token;\n    std::vector<std::string> list;\n    int count;\n    while ((pos\
    \ = s.find(delimiter)) != std::string::npos) {\n        token = s.substr(0, pos);\n\
    \        count = 0;\n        for (int i = 0; i < token.length(); i++) {\n    \
    \        if (token[i] != 'a' && token[i] != 'e' && token[i] != 'i' && token[i]\
    \ != 'o' && token[i] != 'u') {\n                count++;\n            }\n    \
    \    }\n        if (count == n) {\n            list.push_back(token);\n      \
    \  }\n        s.erase(0, pos + delimiter.length());\n    }\n    count = 0;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        if (s[i] != 'a' && s[i] !=\
    \ 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n            count++;\n\
    \        }\n    }\n    if (count == n) {\n        list.push_back(s);\n    }\n\
    \    return list;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpui93lc61: /tmp/tmpui93lc61.cpp:50: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int cons = 0;\n    \
    \    for (char &letter : word) {\n            if (letter != 'a' && letter != 'e'\
    \ && letter != 'i' && letter != 'o' && letter != 'u') {\n                cons++;\n\
    \            }\n        }\n        if (cons == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7xlo0fco: /tmp/tmp7xlo0fco.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::string temp;\n  long\
    \ counter;\n  if(s.empty()) return result;\n  else {\n    s += \" \";\n    for(unsigned\
    \ int i = 0; i < s.length(); i++) {\n      if(s[i] != ' ') temp += s[i];\n   \
    \   else {\n        counter = 0;\n        for(unsigned int j = 0; j < temp.length();\
    \ j++) {\n          if(temp[j] != 'a' && temp[j] != 'e' && temp[j] != 'i' && temp[j]\
    \ != 'o' && temp[j] != 'u') counter++;\n        }\n        if(counter == n) result.push_back(temp);\n\
    \        temp = \"\";\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpzr1otb9j: /tmp/tmpzr1otb9j.cpp:41: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::string temp = \"\";\n\tstd::vector<std::string> ans;\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\ttemp = \"\
    \";\n\t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\t\t\tif (is_consonant(s[i])) {\n\
    \t\t\t\tans.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a22u48j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp8a22u48j.cpp:23:8: error:\
    \ \u2018is_consonant\u2019 was not declared in this scope\n   23 |    if (is_consonant(s[i]))\
    \ {\n      |        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::string cur = \"\";\n\
    \tint count = 0;\n\tfor (auto c : s) {\n\t\tif (c == ' ') {\n\t\t\tif (count ==\
    \ n) {\n\t\t\t\twords.push_back(cur);\n\t\t\t}\n\t\t\tcur = \"\";\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t\telse {\n\t\t\tcur += c;\n\t\t\tif (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (count == n) {\n\t\twords.push_back(cur);\n\t}\n\treturn words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp2v72otjl: /tmp/tmp2v72otjl.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140841
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    std::set<char> const_vowel = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};\n\
    \    while(ss >> word) {\n        int count = 0;\n        for(char c : word) {\n\
    \            if(const_vowel.find(tolower(c)) != const_vowel.end()) {\n       \
    \         count++;\n            }\n        }\n        if(count == n) {\n     \
    \       res.push_back(word);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxyznizts: /tmp/tmpxyznizts.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        long count{0};\n   \
    \     for (auto ch : word) {\n            if (ch != 'a' && ch != 'e' && ch !=\
    \ 'i' && ch != 'o' && ch != 'u')\n                count++;\n        }\n      \
    \  if (count == n) result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmphqxpuvo6: /tmp/tmphqxpuvo6.cpp:34: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    int consonants = 0;\n    while(ss >> word) {\n   \
    \     for(int i = 0; i < word.length(); i++) {\n            if (not (word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ || word[i] == 'y')) {\n                consonants++;\n            }\n      \
    \  }\n        if (consonants == n) {\n            v.push_back(word);\n       \
    \ }\n        consonants = 0;\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpb23k4zd9: /tmp/tmpb23k4zd9.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> a;\n    std::istringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     for (int i = 0; i < word.length(); i++) {\n            if (word[i] != 'a'\
    \ && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            a.push_back(word);\n        }\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbgjm_ync: /tmp/tmpbgjm_ync.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string str = \"\
    \";\n    std::string temp = \"\";\n    long count = 0;\n    for(int i = 0; i <\
    \ s.length(); i++){\n        if(s[i] == ' '){\n            for(int j = 0; j <\
    \ str.length(); j++){\n                if(str[j] == 'a' || str[j] == 'e' || str[j]\
    \ == 'i' || str[j] == 'o' || str[j] == 'u'){\n                    count++;\n \
    \               }\n            }\n            if(str.length() - count == n){\n\
    \                result.push_back(str);\n            }\n            str = \"\"\
    ;\n            count = 0;\n        }else{\n            str += s[i];\n        }\n\
    \    }\n    for(int j = 0; j < str.length(); j++){\n        if(str[j] == 'a' ||\
    \ str[j] == 'e' || str[j] == 'i' || str[j] == 'o' || str[j] == 'u'){\n       \
    \     count++;\n        }\n    }\n    if(str.length() - count == n){\n       \
    \ result.push_back(str);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp2h2khvnz: /tmp/tmp2h2khvnz.cpp:51: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140844
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // your code here\n    std::vector<std::string> result;\n\
    \    std::string temp = \"\";\n    for(int i = 0; i < s.length(); i++){\n    \
    \  if(s[i] == ' '){\n        if(n == countConsonants(temp)){\n          result.push_back(temp);\n\
    \        }\n        temp = \"\";\n      }else{\n        temp += s[i];\n      }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdaj9iue9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpdaj9iue9.cpp:20:17: error:\
    \ \u2018countConsonants\u2019 was not declared in this scope\n   20 |        \
    \ if(n == countConsonants(temp)){\n      |                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140842
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    // find words in a string\
    \ and push them into a vector\n    std::string a;\n    for (char ch : s) {\n \
    \       if (ch == ' ') {\n            if (std::count_if(a.begin(), a.end(), [](char\
    \ c) {return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';}) == n)\n\
    \                v.push_back(a);\n            a.clear();\n        }\n        else\
    \ a += ch;\n    }\n    if (std::count_if(a.begin(), a.end(), [](char c) {return\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';}) == n)\n        v.push_back(a);\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpry1lcvd9: /tmp/tmpry1lcvd9.cpp:36: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::stringstream stream(s);\n\
    \  while(stream.good()) {\n    std::string word;\n    stream >> word;\n    if(word.size()\
    \ == n) {\n      result.push_back(word);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_76u77rb: /tmp/tmp_76u77rb.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> tokens;\n    std::stringstream stream(s);\n\
    \    std::string word;\n    while (stream >> word) {\n        tokens.push_back(word);\n\
    \    }\n    std::vector<std::string> selected;\n    for (auto it = tokens.begin();\
    \ it != tokens.end(); ++it) {\n        if (std::count_if(it->begin(), it->end(),\
    \ isalpha) == n) {\n            selected.push_back(*it);\n        }\n    }\n \
    \   return selected;\n}\nint main() {\n    auto candidate = select_words;\n  \
    \  assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpaje_94u9: /tmp/tmpaje_94u9.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> v;\n  std::string str = \"\";\n  long\
    \ ctr = 0;\n  int i = 0;\n  while(i < s.length()){\n    if(s[i] == ' '){\n   \
    \   if(ctr == n){\n        v.push_back(str);\n      }\n      str = \"\";\n   \
    \   ctr = 0;\n    }\n    else{\n      str += s[i];\n      if(s[i] != 'a' && s[i]\
    \ != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u')\n        ctr++;\n    }\n\
    \    i++;\n  }\n  if(ctr == n){\n    v.push_back(str);\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp6u1y509_: /tmp/tmp6u1y509_.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> results;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        if\
    \ (n == 0) {\n            break;\n        }\n        if (word.length() == n) {\n\
    \            results.push_back(word);\n        }\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp5dbel0ge: /tmp/tmp5dbel0ge.cpp:30: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    int consonants = 0;\n    for (auto i : s) {\n        if (isalpha(i))\
    \ {\n            switch (i) {\n                case 'a':\n                case\
    \ 'e':\n                case 'i':\n                case 'o':\n               \
    \ case 'u':\n                case 'A':\n                case 'E':\n          \
    \      case 'I':\n                case 'O':\n                case 'U':\n     \
    \               break;\n                default:\n                    consonants++;\n\
    \            }\n            temp += i;\n        } else {\n            if (consonants\
    \ == n)\n                result.push_back(temp);\n            temp = \"\";\n \
    \           consonants = 0;\n        }\n    }\n    if (consonants == n)\n    \
    \    result.push_back(temp);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> res;\n  int len = s.length();\n  int\
    \ cnt = 0;\n  std::string temp = \"\";\n  for(int i = 0; i < len; i++) {\n   \
    \ if(s[i] != ' ') {\n      if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u') {\n        cnt++;\n      }\n      temp += s[i];\n   \
    \ } else {\n      if(temp.length() - cnt == n) {\n        res.push_back(temp);\n\
    \      }\n      temp = \"\";\n      cnt = 0;\n    }\n  }\n  if(temp.length() -\
    \ cnt == n) {\n    res.push_back(temp);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3_37wyra: /tmp/tmp3_37wyra.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  int c = 0;\n  std::istringstream\
    \ iss(s);\n  std::string word;\n  while (iss >> word) {\n    for (auto i : word)\
    \ {\n      if (i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u') {\n \
    \       c++;\n      }\n    }\n    if (c == n) result.push_back(word);\n    c =\
    \ 0;\n  }\n  return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpwcirxttp: /tmp/tmpwcirxttp.cpp:36: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::string temp = \"\";\n\
    \tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tif (isVowel(temp[0])\
    \ == false) {\n\t\t\t\tint vcounter = 0;\n\t\t\t\tfor (int j = 0; j < temp.length();\
    \ j++) {\n\t\t\t\t\tif (isVowel(temp[j]) == true) {\n\t\t\t\t\t\tvcounter++;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (vcounter == n) {\n\t\t\t\t\twords.push_back(temp);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\
    \t\t}\n\t}\n\tif (isVowel(temp[0]) == false) {\n\t\tint vcounter = 0;\n\t\tfor\
    \ (int j = 0; j < temp.length(); j++) {\n\t\t\tif (isVowel(temp[j]) == true) {\n\
    \t\t\t\tvcounter++;\n\t\t\t}\n\t\t}\n\t\tif (vcounter == n) {\n\t\t\twords.push_back(temp);\n\
    \t\t}\n\t}\n\treturn words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6rmzsy6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpe6rmzsy6.cpp:19:8: error:\
    \ \u2018isVowel\u2019 was not declared in this scope; did you mean \u2018islower\u2019\
    ?\n   19 |    if (isVowel(temp[0]) == false) {\n      |        ^~~~~~~\n     \
    \ |        islower\n/tmp/tmpe6rmzsy6.cpp:36:6: error: \u2018isVowel\u2019 was\
    \ not declared in this scope; did you mean \u2018islower\u2019?\n   36 |  if (isVowel(temp[0])\
    \ == false) {\n      |      ^~~~~~~\n      |      islower\n"
  stdout: ''
  timestamp: 1660140843
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> words;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    return words;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpblnvbgn_: /tmp/tmpblnvbgn_.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    if(s.empty()) return {};\n    std::vector<std::string> ans;\n\
    \    std::stringstream ss(s);\n    std::string cur;\n    while(ss >> cur){\n \
    \       if(countConsonants(cur) == n)\n            ans.push_back(cur);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ctb5kyq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp6ctb5kyq.cpp:20:12: error:\
    \ \u2018countConsonants\u2019 was not declared in this scope\n   20 |        \
    \ if(countConsonants(cur) == n)\n      |            ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> vect;\n    std::string temp;\n  \
    \  std::istringstream iss(s);\n    while(iss >> temp) {\n        long count =\
    \ 0;\n        for(long i = 0; i < temp.length(); i++) {\n            if(temp[i]\
    \ != 'a' && temp[i] != 'e' && temp[i] != 'i' && temp[i] != 'o' && temp[i] != 'u')\
    \ {\n                count++;\n            }\n        }\n        if(count == n)\
    \ {\n            vect.push_back(temp);\n        }\n    }\n    return vect;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpce2jae0u: /tmp/tmpce2jae0u.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::string str = \"\";\n  std::vector<std::string> splited;\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n      splited.push_back(str);\n\
    \      str = \"\";\n    } else {\n      str += s[i];\n    }\n  }\n  splited.push_back(str);\n\
    \  std::vector<std::string> result;\n  for (int i = 0; i < splited.size(); i++)\
    \ {\n    int consonants = 0;\n    for (int j = 0; j < splited[i].length(); j++)\
    \ {\n      if (splited[i][j] != 'a' && splited[i][j] != 'i' &&\n        splited[i][j]\
    \ != 'u' && splited[i][j] != 'e' &&\n        splited[i][j] != 'o' && splited[i][j]\
    \ != 'y') {\n        consonants++;\n      }\n    }\n    if (consonants == n) {\n\
    \      result.push_back(splited[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpl7z8ghxf: /tmp/tmpl7z8ghxf.cpp:45: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        std::size_t consonants\
    \ = std::count_if(word.begin(), word.end(), [](char c) { return isalpha(c) &&\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'; });\n        if (consonants\
    \ == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7agruynq: /tmp/tmp7agruynq.cpp:32: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    if (s.empty()) return\
    \ result;\n    bool consonant = false;\n    bool prevConsonant = false;\n    int\
    \ count = 0;\n    std::string word = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == ' ') {\n            if (count == n) {\n        \
    \        result.push_back(word);\n            }\n            word = \"\";\n  \
    \          count = 0;\n            prevConsonant = false;\n        } else {\n\
    \            word += s[i];\n            consonant = (s[i] != 'a' && s[i] != 'e'\
    \ && s[i] != 'i' && s[i] != 'o' && s[i] != 'u');\n            if (consonant &&\
    \ !prevConsonant) {\n                count++;\n            }\n            prevConsonant\
    \ = consonant;\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkp77gsqu: /tmp/tmpkp77gsqu.cpp:45: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ str_vect;\n    std::istringstream iss(s);\n    std::string word;\n    while(iss\
    \ >> word) {\n        str_vect.push_back(word);\n    }\n    // std::cout << str_vect.size()\
    \ << std::endl;\n    for(int i = 0; i < str_vect.size(); i++) {\n        std::string\
    \ temp = str_vect[i];\n        int consonants = 0;\n        for(int j = 0; j <\
    \ temp.size(); j++) {\n            if(temp[j] != 'a' && temp[j] != 'e' && temp[j]\
    \ != 'i' && temp[j] != 'o' && temp[j] != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if(consonants == n) {\n            res.push_back(temp);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpblgpz0kh: /tmp/tmpblgpz0kh.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> res;\n  if (s.empty()) return res;\n\
    \  std::stringstream ss(s);\n  std::string t;\n  while (ss >> t) {\n    if (std::count_if(t.begin(),\
    \ t.end(), [](auto& c) {\n          return !std::isalpha(c);\n        }) == n)\
    \ {\n      res.push_back(t);\n    }\n  }\n  return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpaacy1l2z: /tmp/tmpaacy1l2z.cpp:30: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::istringstream iss(s);\n\
    \    std::vector<std::string> arr{std::istream_iterator<std::string>{iss}, \n\
    \        std::istream_iterator<std::string>{}};\n    for (auto word : arr) {\n\
    \        long consonants_in_word = 0;\n        for (auto c : word) {\n       \
    \     if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A'\
    \ && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                consonants_in_word++;\n\
    \            }\n        }\n        if (consonants_in_word == n) {\n          \
    \  result.push_back(word);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word;\n\
    \    std::stringstream ss(s);\n    while (std::getline(ss, word, ' ')) {\n   \
    \     std::cout << word << std::endl;\n        int wordLength = word.length();\n\
    \        int count = 0;\n        for (int i = 0; i < wordLength; i++) {\n    \
    \        if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] !=\
    \ 'o' && word[i] != 'u') {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push_back(word);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdcodyv57: /tmp/tmpdcodyv57.cpp:39: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: 'Mary

    had

    a

    little

    lamb

    Mary

    had

    a

    little

    lamb

    simple

    white

    space

    Hello

    world

    Uncle

    sam

    '
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> words;\n\tstd::stringstream ss(s);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tint cons = 0;\n\t\tfor (int i\
    \ = 0; i < word.size(); i++) {\n\t\t\tif (!strchr(\"aeiou\", word[i])) cons++;\n\
    \t\t}\n\t\tif (cons == n) words.push_back(word);\n\t}\n\treturn words;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8pcpipzw: /tmp/tmp8pcpipzw.cpp:33: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::stringstream ss(s);\n    std::vector<std::string> myvec;\n\
    \    std::string word;\n    while(ss >> word) {\n        if(isConsonant(word,\
    \ n)) {\n            myvec.push_back(word);\n        }\n    }\n    return myvec;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbl6y7mi2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpbl6y7mi2.cpp:19:12: error:\
    \ \u2018isConsonant\u2019 was not declared in this scope\n   19 |         if(isConsonant(word,\
    \ n)) {\n      |            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> v;\n\tstd::stringstream ss(s);\n\t\
    std::string t;\n\tint count;\n\twhile (ss >> t) {\n\t\tcount = 0;\n\t\tfor (int\
    \ i = 0; i < t.length(); i++) {\n\t\t\tif (t[i] != 'a' && t[i] != 'e' && t[i]\
    \ != 'i' && t[i] != 'o' && t[i] != 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\tif (count\
    \ == n)\n\t\t\tv.push_back(t);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpajj6h876: /tmp/tmpajj6h876.cpp:36: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    long k=0;\n    std::string\
    \ word=\"\";\n    while(k<s.length()){\n        while(k<s.length() && s[k]!='\
    \ '){\n            word+=s[k];\n            k++;\n        }\n        if(word.length()-std::count(word.begin(),word.end(),'a')-std::count(word.begin(),word.end(),'e')-std::count(word.begin(),word.end(),'i')-std::count(word.begin(),word.end(),'o')-std::count(word.begin(),word.end(),'u')==n){\n\
    \            v.push_back(word);\n        }\n        word=\"\";\n        k++;\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmptfpgzy6x: /tmp/tmptfpgzy6x.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    vector<string> ret;\n    string temp;\n    stringstream ss(s);\n\
    \    while(ss >> temp){\n        if(temp.size() == n) {\n            // cout <<\
    \ temp << endl;\n            ret.push_back(temp);\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcw2tdy_7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpcw2tdy_7.cpp:15:5: error:\
    \ \u2018vector\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ ret;\n      |     ^~~~~~\n/tmp/tmpcw2tdy_7.cpp:15:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcw2tdy_7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcw2tdy_7.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpcw2tdy_7.cpp:15:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ ret;\n      |            ^~~~~~\n/tmp/tmpcw2tdy_7.cpp:15:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcw2tdy_7.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \  "
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::istringstream ss(s);\n\
    \    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        int\
    \ count = 0;\n        for (char& c : word) {\n            if (c == 'a' || c ==\
    \ 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O'\
    \ || c == 'u' || c == 'U')\n                count++;\n        }\n        if (count\
    \ == n)\n            result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0eqbp42i: /tmp/tmp0eqbp42i.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  // your code here\n  std::string word = \"\";\n  int c = 0;\n\
    \  std::vector<std::string> v;\n  for(auto i : s){\n    if(i == ' '){\n      for(auto\
    \ j : word){\n        if(j != 'a' && j != 'e' && j != 'i' && j != 'o' && j !=\
    \ 'u'){\n          c++;\n        }\n      }\n      if(c == n){\n        v.push_back(word);\n\
    \      }\n      word = \"\";\n      c = 0;\n    }\n    else{\n      word = word\
    \ + i;\n    }\n  }\n  for(auto j : word){\n    if(j != 'a' && j != 'e' && j !=\
    \ 'i' && j != 'o' && j != 'u'){\n      c++;\n    }\n  }\n  if(c == n){\n    v.push_back(word);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkkry6gxl: /tmp/tmpkkry6gxl.cpp:52: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> temp;\n    std::string word = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] != ' '){\n      \
    \      word += s[i];\n        }else{\n            if(std::count_if(word.begin(),\
    \ word.end(), [](char c){return(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u');}) == n){\n                temp.push_back(word);\n            }\n\
    \            word = \"\";\n        }\n    }\n    if(std::count_if(word.begin(),\
    \ word.end(), [](char c){return(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u');}) == n){\n        temp.push_back(word);\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmprp8tf9bw: /tmp/tmprp8tf9bw.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    // if the input string\
    \ is empty, then return an empty list\n    if (s.length() == 0) {\n        return\
    \ result;\n    }\n    // initialize the consonant and vowels count\n    int consonant_count\
    \ = 0;\n    int vowel_count = 0;\n    std::string str = \"\";\n    // iterate\
    \ through the characters of the string and find the words\n    for (char c : s)\
    \ {\n        // if it is a consonant\n        if (c != ' ' && c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') {\n            consonant_count++;\n\
    \        }\n        // if it is a vowel, then reset the count\n        else if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            consonant_count\
    \ = 0;\n        }\n        // if it is a space\n        else if (c == ' ') {\n\
    \            // if the consonant count is equal to the input value\n         \
    \   if (consonant_count == n) {\n                result.push_back(str);\n    \
    \        }\n            str = \"\";\n            consonant_count = 0;\n      \
    \  }\n        str += c;\n    }\n    // if the consonant count is equal to the\
    \ input value\n    if (consonant_count == n) {\n        result.push_back(str);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp4nl2cz90: /tmp/tmp4nl2cz90.cpp:53: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> out;\n    int count = 0;\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] ==\
    \ ' ') {\n            if (count == n) {\n                out.push_back(word);\n\
    \            }\n            count = 0;\n            word = \"\";\n        } else\
    \ {\n            word += s[i];\n            if (s[i] != 'a' && s[i] != 'e' &&\
    \ s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n                count++;\n   \
    \         }\n        }\n    }\n    if (count == n) {\n        out.push_back(word);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpu9dzq82_: /tmp/tmpu9dzq82_.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.size() == 0) return\
    \ res;\n    int count = 0;\n    std::string word = \"\";\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (count == n)\
    \ res.push_back(word);\n            count = 0;\n            word = \"\";\n   \
    \     } else {\n            if (!(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u')) count++;\n            word += s[i];\n        }\n\
    \    }\n    if (count == n) res.push_back(word);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpogd9ky6k: /tmp/tmpogd9ky6k.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    int cnt = 0;\n    std::string\
    \ word = \"\";\n    for (char& c : s) {\n        if (c != ' ') {\n           \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    cnt = 0;\n            else\n                cnt++;\n            word += c;\n\
    \        }\n        else {\n            if (cnt == n) {\n                v.push_back(word);\n\
    \            }\n            cnt = 0;\n            word = \"\";\n        }\n  \
    \  }\n    if (cnt == n)\n        v.push_back(word);\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpi77iifgj: /tmp/tmpi77iifgj.cpp:40: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    int count = 0;\n    std::vector<std::string> result;\n   \
    \ std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n     \
    \   if (s[i] == ' ') {\n            if (count == n) {\n                result.push_back(word);\n\
    \            }\n            count = 0;\n            word = \"\";\n        } else\
    \ {\n            if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n                count++;\n            }\n            word\
    \ += s[i];\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmptlgxop62: /tmp/tmptlgxop62.cpp:43: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.length() == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp255hjzrh: /tmp/tmp255hjzrh.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  // your code here\n  std::vector<std::string> result;\n  if(s.length()\
    \ == 0) return result;\n  std::vector<std::string> words;\n  std::string curr\
    \ = \"\";\n  for(int i = 0; i < s.length(); i++){\n    if(s[i] == ' '){\n    \
    \  words.push_back(curr);\n      curr = \"\";\n    }else{\n      curr += s[i];\n\
    \    }\n  }\n  words.push_back(curr);\n  for(int i = 0; i < words.size(); i++){\n\
    \    long count = 0;\n    for(int j = 0; j < words[i].length(); j++){\n      if(!std::string(\"\
    aeiou\").find(tolower(words[i][j])))\n        count++;\n    }\n    if(count ==\
    \ n)\n      result.push_back(words[i]);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp6i6jra9j: /tmp/tmp6i6jra9j.cpp:42: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({"little"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words;\n  std::string word = \"\";\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n      if (countConsonants(word)\
    \ == n)\n        words.push_back(word);\n      word = \"\";\n    } else {\n  \
    \    word += s[i];\n    }\n  }\n  if (countConsonants(word) == n)\n    words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3jmhfm_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpw3jmhfm_.cpp:19:11: error:\
    \ \u2018countConsonants\u2019 was not declared in this scope\n   19 |       if\
    \ (countConsonants(word) == n)\n      |           ^~~~~~~~~~~~~~~\n/tmp/tmpw3jmhfm_.cpp:26:7:\
    \ error: \u2018countConsonants\u2019 was not declared in this scope\n   26 | \
    \  if (countConsonants(word) == n)\n      |       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    if (s.empty()) {\n \
    \       return result;\n    }\n    std::vector<std::string> strs;\n    std::stringstream\
    \ ss(s);\n    std::string temp;\n    while (ss >> temp) {\n        strs.push_back(temp);\n\
    \    }\n    for (std::string str : strs) {\n        long consonants = 0;\n   \
    \     for (char c : str) {\n            if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                consonants++;\n            }\n    \
    \    }\n        if (consonants == n) {\n            result.push_back(str);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpmh85dlrj: /tmp/tmpmh85dlrj.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::stringstream ss(s);\n    std::vector<std::string> result;\n\
    \    std::string temp;\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'};\n    while (ss >> temp) {\n        if (std::count_if(temp.begin(), temp.end(),\
    \ [&](char ch) {\n            return vowels.find(std::tolower(ch)) == vowels.end();\n\
    \        }) == n) {\n            result.push_back(temp);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdxxwys0z: /tmp/tmpdxxwys0z.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // your code here\n    std::vector<std::string> results;\n\
    \    std::string temp;\n    for(auto i: s){\n        if(i == ' '){\n         \
    \   if(temp.size()-std::count(temp.begin(), temp.end(), 'a')-std::count(temp.begin(),\
    \ temp.end(), 'e')-std::count(temp.begin(), temp.end(), 'i')-std::count(temp.begin(),\
    \ temp.end(), 'o')-std::count(temp.begin(), temp.end(), 'u') == n){\n        \
    \        results.push_back(temp);\n            }\n            temp.clear();\n\
    \        }else{\n            temp += i;\n        }\n    }\n    if(temp.size()-std::count(temp.begin(),\
    \ temp.end(), 'a')-std::count(temp.begin(), temp.end(), 'e')-std::count(temp.begin(),\
    \ temp.end(), 'i')-std::count(temp.begin(), temp.end(), 'o')-std::count(temp.begin(),\
    \ temp.end(), 'u') == n){\n        results.push_back(temp);\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp81t0p2sf: /tmp/tmp81t0p2sf.cpp:39: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word) {\n        int count = 0;\n   \
    \     std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        for (int i\
    \ = 0; i < word.size(); i++) {\n            if (consonants.find(word[i]) != std::string::npos)\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpv5273_vz: /tmp/tmpv5273_vz.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result{};\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word) {\n        std::string\
    \ no_vowels{};\n        for (auto c : word) {\n            if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u')\n                no_vowels += c;\n\
    \        }\n        if (no_vowels.size() == n) result.push_back(word);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdm1p196_: /tmp/tmpdm1p196_.cpp:34: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::istringstream ss(s);\n\
    \  std::string curr;\n  while (ss >> curr) {\n    if (count_consonants(curr) ==\
    \ n)\n      result.push_back(curr);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0z908_e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpc0z908_e.cpp:19:9: error:\
    \ \u2018count_consonants\u2019 was not declared in this scope\n   19 |     if\
    \ (count_consonants(curr) == n)\n      |         ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\
    \tstd::string temp;\n\tint count;\n\twhile (ss >> temp) {\n\t\tcount = 0;\n\t\t\
    for (int i = 0; i < temp.length(); i++) {\n\t\t\tif (temp[i] != 'a' && temp[i]\
    \ != 'e' && temp[i] != 'i' && temp[i] != 'o' && temp[i] != 'u') {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tresult.push_back(temp);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = select_words;\n   \
    \ assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp18qmh7fu: /tmp/tmp18qmh7fu.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::string word;\n  std::stringstream\
    \ stream(s);\n  while (stream >> word) {\n    int consonants = 0;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n      char c = word[i];\n      if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        consonants++;\n\
    \      }\n    }\n    if (consonants == n) {\n      result.push_back(word);\n \
    \   }\n  }\n  return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpo19253d7: /tmp/tmpo19253d7.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> selected;\n    std::vector<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n    std::vector<std::string> words;\n \
    \   std::string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word = \"\";\n        } else\
    \ {\n            word += c;\n        }\n    }\n    words.push_back(word);\n  \
    \  for (std::string word : words) {\n        int consonants = 0;\n        for\
    \ (char c : word) {\n            if (std::find(vowels.begin(), vowels.end(), c)\
    \ == vowels.end()) {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            selected.push_back(word);\n     \
    \   }\n    }\n    return selected;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpscecg4xn: /tmp/tmpscecg4xn.cpp:47: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words, output;\n  std::string word;\n\
    \  std::stringstream ss(s);\n  while (ss >> word) words.push_back(word);\n  for\
    \ (int i = 0; i < words.size(); i++) {\n    int vowel = 0;\n    for (int j = 0;\
    \ j < words[i].size(); j++) {\n      if (words[i][j] == 'a' || words[i][j] ==\
    \ 'e' || words[i][j] == 'i' || words[i][j] == 'o' || words[i][j] == 'u') {\n \
    \       vowel++;\n      }\n    }\n    if (words[i].size() - vowel == n) {\n  \
    \    output.push_back(words[i]);\n    }\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpa2f7vzjl: /tmp/tmpa2f7vzjl.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> ret;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n      return c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u';\n    }) == n) {\n      ret.push_back(word);\n    }\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0i0hq_vh: /tmp/tmp0i0hq_vh.cpp:33: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    vector<string> result;\n    stringstream ss(s);\n    string\
    \ word;\n    while(ss >> word){\n        int count=0;\n        for(int i=0;i<word.length();i++){\n\
    \            if(word[i]!='a'&&word[i]!='e'&&word[i]!='i'&&word[i]!='o'&&word[i]!='u'){\n\
    \                count++;\n            }\n        }\n        if(count==n){\n \
    \           result.push_back(word);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5ewjnt0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpc5ewjnt0.cpp:15:5: error:\
    \ \u2018vector\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ result;\n      |     ^~~~~~\n/tmp/tmpc5ewjnt0.cpp:15:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc5ewjnt0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc5ewjnt0.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpc5ewjnt0.cpp:15:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n   15 |     vector<string>\
    \ result;\n      |            ^~~~~~\n/tmp/tmpc5ewjnt0.cpp:15:12: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpc5ewjnt0.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    strin"
  stdout: ''
  timestamp: 1660140847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::vector<std::string> v;\n    std::string str = \"\";\n    for (char ch\
    \ : s) {\n        if (ch == ' ') {\n            v.push_back(str);\n          \
    \  str = \"\";\n        } else {\n            str += ch;\n        }\n    }\n \
    \   v.push_back(str);\n    std::vector<char> m1 = {'a', 'e', 'i', 'o', 'u'};\n\
    \    std::unordered_set<char> m(m1.begin(), m1.end());\n    for (std::string &str\
    \ : v) {\n        int cnt = 0;\n        for (char &ch : str) {\n            if\
    \ (m.find(ch) == m.end()) cnt++;\n        }\n        if (cnt == n) res.push_back(str);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpjy_smgyc: /tmp/tmpjy_smgyc.cpp:45: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    int consonants = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n  \
    \      if (s[i] != ' ') {\n            word += s[i];\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            }\n            if (s[i]\
    \ != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n    \
    \            consonants++;\n            }\n        } else {\n            if (consonants\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n            consonants = 0;\n        }\n    }\n    if (consonants\
    \ == n) {\n        result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    stringstream ss(s);\n    string word;\n    vector<string>\
    \ words;\n    while(ss >> word) {\n        int consonants = 0;\n        for(char\
    \ c : word) {\n            if(isalpha(c)) {\n                if(c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n        }\n        if(consonants == n) {\n\
    \            words.push_back(word);\n        }\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpscrcx1ls.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpscrcx1ls.cpp:15:5: error:\
    \ \u2018stringstream\u2019 was not declared in this scope; did you mean \u2018\
    std::stringstream\u2019?\n   15 |     stringstream ss(s);\n      |     ^~~~~~~~~~~~\n\
    \      |     std::stringstream\nIn file included from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpscrcx1ls.cpp:2:\n/usr/include/c++/9/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpscrcx1ls.cpp:16:5:\
    \ error: \u2018string\u2019 was not declared in this scope\n   16 |     string\
    \ word;\n      |     ^~~~~~\n/tmp/tmpscrcx1ls.cpp:16:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpscrcx1ls.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from "
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string str;\n    int count;\n    while(ss >> str){\n        count =\
    \ 0;\n        for(auto &c : str){\n            if((c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') && c != ' '){\n                count++;\n     \
    \       }\n        }\n        if(count == n){\n            res.push_back(str);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp4oelwbsa: /tmp/tmp4oelwbsa.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  s += \" \";\n  int count\
    \ = 0;\n  std::string temp;\n  for (int i = 0; i < s.length(); i++) {\n    if\
    \ (s[i] == ' ') {\n      if (count == n) {\n        result.push_back(temp);\n\
    \      }\n      count = 0;\n      temp = \"\";\n    } else {\n      if (s[i] !=\
    \ 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n       \
    \ count++;\n      }\n      temp += s[i];\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpuj0bnx_v: /tmp/tmpuj0bnx_v.cpp:41: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> result;\n  std::string word;\n  int\
    \ count;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n \
    \     if (count == n) {\n        result.push_back(word);\n      }\n      word\
    \ = \"\";\n      count = 0;\n    } else {\n      if (s[i] != 'a' && s[i] != 'e'\
    \ && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n        count++;\n      }\n\
    \      word += s[i];\n    }\n  }\n  if (count == n) {\n    result.push_back(word);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxib2l8au: /tmp/tmpxib2l8au.cpp:40: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> results;\n\
    \tstd::string word;\n\twhile (iss >> word) {\n\t\tlong consonants = 0;\n\t\tfor\
    \ (auto c : word) {\n\t\t\tstd::string vowels = \"aeiouAEIOU\";\n\t\t\tsize_t\
    \ found = vowels.find(c);\n\t\t\tif (found == std::string::npos) consonants++;\n\
    \t\t}\n\t\tif (consonants == n) results.push_back(word);\n\t}\n\treturn results;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> words, vowels{'a', 'e', 'i', 'o', 'u'};\n\
    \  std::stringstream ss(s);\n  while(ss>>s) {\n    int count = 0;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n      bool flag = false;\n      for(int j = 0;\
    \ j < vowels.size(); j++) {\n        if(s[i] == vowels[j]) flag = true;\n    \
    \  }\n      if(!flag) count++;\n    }\n    if(count == n) words.push_back(s);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayt1vjo6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpayt1vjo6.cpp:15:65: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)\u2019\n   15 |   std::vector<std::string>\
    \ words, vowels{'a', 'e', 'i', 'o', 'u'};\n      |                           \
    \                                      ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpayt1vjo6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpayt1vjo6.cpp:15:65: note:   candidate expects 3 arguments,\
    \ 5 provided\n   15 |   std::vector<std::string> words, vowels{'a', 'e', 'i',\
    \ 'o', 'u'};\n      |                                                        \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpayt1vjo6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::allocator_type = "
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n  std::vector<std::string> res;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word) {\n    int numConsonants = 0;\n   \
    \ for (char c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n        numConsonants++;\n      }\n    }\n    if (numConsonants\
    \ == n) {\n      res.push_back(word);\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpfqs14yre: /tmp/tmpfqs14yre.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\t// Let's break down this problem step by step, shall we?\n\t\
    // We need to iterate over each letter in the string 's' and check \n\t// whether\
    \ or not that letter is a consonant or a vowel.\n\t// There are two things we\
    \ can do, we can write out every possible vowel \n\t// and check if the letter\
    \ is contained in that list, or we can use \n\t// regular expressions and check\
    \ if the letter is contained in a regex \n\t// that checks if the letter is a\
    \ vowel.\n\t// Let's go with the second approach.\n\t// We can use std::regex_match\
    \ to check if a given character is a vowel, \n\t// let's implement that:\n\tauto\
    \ is_vowel = [](char c) {\n\t\treturn std::regex_match(std::string(1, c), std::regex(\"\
    [aeiou]\"));\n\t};\n\t// Next, we need to iterate over the input string and check\
    \ if each letter \n\t// is a vowel or a consonant, and keep track of how many\
    \ consonants are \n\t// in the current word.\n\tstd::vector<std::string> result;\n\
    \tstd::string current_word;\n\tlong current_word_consonants = 0;\n\tfor (char\
    \ c : s) {\n\t\t// If the current character is a vowel we go to the next character\n\
    \t\tif (is_vowel(c)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// If the current character\
    \ is a consonant we append it to the current \n\t\t// word and increment the consonant\
    \ counter for the current word.\n\t\tcurrent_word += c;\n\t\tcurrent_word_consonants++;\n\
    \t\t// If the next character is a space, we've reached the end of a word.\n\t\t\
    // We need to check if the current word has exactly n consonants and \n\t\t//\
    \ add it to the result vector if that's the case.\n\t\tif (c == ' ') {\n\t\t\t\
    if (current_word_consonants == n) {\n\t\t\t\tresult.push_back(current_word);\n\
    \t\t\t}\n\t\t\t// And then reset the current\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m4kb7sd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp0m4kb7sd.cpp:52:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   52\
    \ | int main() {\n      |            ^\n/tmp/tmp0m4kb7sd.cpp:61:1: error: expected\
    \ \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp0m4kb7sd.cpp:34:19:\
    \ note: to match this \u2018{\u2019\n   34 |  for (char c : s) {\n      |    \
    \               ^\n/tmp/tmp0m4kb7sd.cpp:61:1: error: expected \u2018}\u2019 at\
    \ end of input\n   61 | }\n      | ^\n/tmp/tmp0m4kb7sd.cpp:14:62: note: to match\
    \ this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp0m4kb7sd.cpp:61:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   61 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> wordList;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while(iss >> word) {\n        // count how\
    \ many consonants are in the word\n        int numOfConsonants = 0;\n        for(char\
    \ c : word) {\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') numOfConsonants++;\n        }\n        if(numOfConsonants == n) wordList.push_back(word);\n\
    \    }\n    return wordList;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpoodri309: /tmp/tmpoodri309.cpp:34: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::stringstream ss(s);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')){\n        long\
    \ num_consonants = 0;\n        for(char c : token){\n            if(c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                num_consonants++;\n\
    \            }\n        }\n        if(num_consonants == n){\n            res.push_back(token);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp2ean3x6t: /tmp/tmp2ean3x6t.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        long\
    \ consonants = 0;\n        for (char& c : word) {\n            if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if (consonants == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_1fmct6q: /tmp/tmp_1fmct6q.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tchar vowels[] = {'a', 'e', 'i', 'o', 'u', 'y'};\n\tstd::set<char>\
    \ vowel_set;\n\tvowel_set.insert(vowels, vowels + 6);\n\tstd::istringstream ss(s);\n\
    \tstd::string word;\n\tstd::vector<std::string> result;\n\twhile (ss >> word)\
    \ {\n\t\tlong consonants = 0;\n\t\tfor (char c : word) {\n\t\t\tif (vowel_set.find(c)\
    \ == vowel_set.end()) {\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t}\n\t\tif (consonants\
    \ == n) {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbkqjl658: /tmp/tmpbkqjl658.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // your code here\n    std::vector<std::string> wordList;\n\
    \    // std::stringstream ss(s);\n    // std::string word;\n    // while(ss >>\
    \ word){\n    //     int count = 0;\n    //     for(int i = 0; i < word.length();\
    \ i++){\n    //         if(word[i] != 'a' && word[i] != 'e' && word[i] != 'i'\
    \ && word[i] != 'o' && word[i] != 'u'){\n    //             count++;\n    // \
    \        }\n    //     }\n    //     if(count == n){\n    //         wordList.push_back(word);\n\
    \    //     }\n    // }\n    // return wordList;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    int count = 0;\n    while(ss >> word){\n        std::cout\
    \ << word << std::endl;\n        count = 0;\n        for(int i = 0; i < word.length();\
    \ i++){\n            if(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' &&\
    \ word[i] != 'o' && word[i] != 'u'){\n                count++;\n            }\n\
    \        }\n        if(count == n){\n            wordList.push_back(word);\n \
    \       }\n    }\n    return wordList;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpyys_9hzh: /tmp/tmpyys_9hzh.cpp:54: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: 'Mary

    had

    a

    little

    lamb

    Mary

    had

    a

    little

    lamb

    simple

    white

    space

    Hello

    world

    Uncle

    sam

    '
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::istringstream iss(s);\n\
    \    std::string word;\n    long count;\n    while (iss >> word) {\n        count\
    \ = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (!(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ || word[i] == 'y'))\n                count++;\n        }\n        if (count\
    \ == n)\n            result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmprwq8nqn8: /tmp/tmprwq8nqn8.cpp:33: int main(): Assertion `candidate(("Mary
    had a little lamb"), (3)) == (std::vector<std::string>({"Mary", "lamb"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\tstd::vector<std::string> res;\n\tif (s.empty()) return res;\n\
    \tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\t\
    long consonants = 0;\n\t\tfor (char c : word) {\n\t\t\tif (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') {\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t\
    }\n\t\tif (consonants == n) {\n\t\t\tres.push_back(word);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpu_f6m64n: /tmp/tmpu_f6m64n.cpp:38: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string curr_word;\n    while(std::getline(ss, curr_word, ' ')) {\n \
    \       int consonants = 0;\n        for(char& c : curr_word) {\n            if(c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                consonants++;\n\
    \            }\n        }\n        if(consonants == n) {\n            result.push_back(curr_word);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpjm_j1wl1: /tmp/tmpjm_j1wl1.cpp:37: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140848
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string word = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (get_consonants(word) == n) {\n                result.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ s[i];\n        }\n    }\n    if (get_consonants(word) == n) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxafa1_u2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpxafa1_u2.cpp:19:17: error:\
    \ \u2018get_consonants\u2019 was not declared in this scope\n   19 |         \
    \    if (get_consonants(word) == n) {\n      |                 ^~~~~~~~~~~~~~\n\
    /tmp/tmpxafa1_u2.cpp:27:9: error: \u2018get_consonants\u2019 was not declared\
    \ in this scope\n   27 |     if (get_consonants(word) == n) {\n      |       \
    \  ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660140848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    std::string temp = \"\
    \";\n    std::string vowels = \"aeiou\";\n    int vowel_count = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (vowels.find(s[i]) != std::string::npos)\
    \ {\n            vowel_count++;\n        }\n        if (s[i] == ' ') {\n     \
    \       if (temp.length() - vowel_count == n) {\n                result.push_back(temp);\n\
    \            }\n            temp = \"\";\n            vowel_count = 0;\n     \
    \   } else {\n            temp += s[i];\n        }\n    }\n    if (temp.length()\
    \ - vowel_count == n) {\n        result.push_back(temp);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpj7yqz3k5: /tmp/tmpj7yqz3k5.cpp:44: int main(): Assertion `candidate(("Uncle
    sam"), (3)) == (std::vector<std::string>({"Uncle"}))'' failed.

    '
  stdout: ''
  timestamp: 1660140849
