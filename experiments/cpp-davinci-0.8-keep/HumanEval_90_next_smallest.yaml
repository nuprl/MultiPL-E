name: HumanEval_90_next_smallest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // Write a function next_smallest() that returns the 2nd smallest element of the\
  \ list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3,\
  \ 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n\
  // next_smallest([1, 1]) == None\nstd::optional<long> next_smallest(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 4, 5}))) == (std::optional<long>(2)));\n    assert(candidate((std::vector<long>({5,\
  \ 1, 4, 3, 2}))) == (std::optional<long>(2)));\n    assert(candidate((std::vector<long>()))\
  \ == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({1, 1})))\
  \ == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({1, 1,\
  \ 1, 1, 0}))) == (std::optional<long>(1)));\n    assert(candidate((std::vector<long>({1,\
  \ 1}))) == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({-35,\
  \ 34, 12, -45}))) == (std::optional<long>(-35)));\n}\n"
completions: []
stop_tokens:
- "\n}"
