name: HumanEval_122_add_elements
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Write your code here\n\tlong sum=0;\n\tfor(long i=0;i<k;i++)\n\
    \t{\n\t\tif(arr[i]<10)\n\t\t{\n\t\t\tsum+=arr[i];\n\t\t}\n\t\telse if(arr[i]<100)\n\
    \t\t{\n\t\t\tsum+=arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long total = 0;\n    for (auto i = 0; i < k; i++) {\n  \
    \      if (arr[i] < 10) {\n            total += arr[i];\n        } else if (arr[i]\
    \ < 100) {\n            total += arr[i];\n        }\n    }\n    return total;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long index = -1;\n    long sum = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] < 10) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if(index == -1) {\n        return 0;\n\
    \    }\n    if(k > index) {\n        for(long i = 0; i < index; i++) {\n     \
    \       sum += arr[i];\n        }\n        k -= index;\n        for(long i = index;\
    \ i < arr.size(); i++) {\n            if(arr[i] < 100) {\n                if(k\
    \ > 0) {\n                    sum += arr[i];\n                    k--;\n     \
    \           }\n            }\n        }\n    } else {\n        for(long i = 0;\
    \ i < k; i++) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8lmi8fy1: /tmp/tmp8lmi8fy1.cpp:46: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tfor (long i =\
    \ 0; i < k; i++) {\n\t\tif (arr[i] > 10 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\
    \t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgvqkj2kv: /tmp/tmpgvqkj2kv.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] <= 9) {\n            sum += arr[i];\n        } else if(arr[i] <=\
    \ 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long ans = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            ans += arr[i];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(long i = 0; i < k; i++) {\n  \
    \      if(arr[i] < 10 || arr[i] < 100) {\n            result += arr[i];\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long count = 0;\n  long sum = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] >= 0 && arr[i] <= 99) {\n      count++;\n      sum +=\
    \ arr[i];\n    }\n    if (count == k) {\n      break;\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc5mt71wq: /tmp/tmpc5mt71wq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long i=0, sum=0;\n    while(i<k){\n        if(arr[i]<100){\n\
    \            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tint sum = 0;\n\tfor (int i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ >= 10 && arr[i] <= 99) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdhtgm937: /tmp/tmpdhtgm937.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(auto el : arr) {\n        if(el <=\
    \ 99) {\n            sum += el;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf1vo_isu: /tmp/tmpf1vo_isu.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  long sum = 0;\n  for(long i = 0;\
    \ i < k; i++) {\n    if(arr[i] < 10)\n      sum += arr[i];\n    else if(arr[i]\
    \ < 100)\n      sum += arr[i] % 10 + arr[i] / 10;\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptnos4b5q: /tmp/tmptnos4b5q.cpp:26: int main(): Assertion `candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt7rxl41z: /tmp/tmpt7rxl41z.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ <= 99) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (int i = 0; i < k; i++) {\n    std::string\
    \ s = std::to_string(arr[i]);\n    long n = s.length();\n    if (n > 2) {\n  \
    \    result += (s[0] - '0') * pow(10, n - 1) + (s[1] - '0') * pow(10, n - 2);\n\
    \    } else {\n      result += arr[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjb5i4brr: /tmp/tmpjb5i4brr.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum=0;\n    int n=arr.size();\n    for(int i=0;i<k;i++){\n\
    \        if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    int i = 0;\n    while(k-- && i < arr.size())\
    \ {\n        int digits = 0;\n        while(arr[i] != 0) {\n            arr[i]\
    \ /= 10;\n            digits++;\n        }\n        if(digits <= 2) {\n      \
    \      result += arr[i];\n        }\n        i++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7vpzs1dl: /tmp/tmp7vpzs1dl.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5ki1lufr: /tmp/tmp5ki1lufr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    sum +=\
    \ (arr[i] > 99) ? 99 : arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqd91th3a: /tmp/tmpqd91th3a.cpp:21: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum{0};\n    for(int i = 0; i < k; i++) {\n       \
    \ if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tlong i = 0;\n\tfor (i = 0; i < k; i++) {\n\
    \t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprjzsl01m: /tmp/tmprjzsl01m.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   long element = arr[i];\n        if(arr[i] > 9 && arr[i] < 100) {\n       \
    \     sum += element;\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfi84qfcf: /tmp/tmpfi84qfcf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tstd::sort(arr.begin(), arr.end());\n\tlong res = 0;\n\tfor\
    \ (int i = 0; i < k; i++) {\n\t\tif (arr[i] < 100) {\n\t\t\tres += arr[i];\n\t\
    \t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptfmdw2k2: /tmp/tmptfmdw2k2.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 99)\n      continue;\n    sum += arr[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long ret = 0;\n  for (long i = 0; i < k; i++) {\n    ret +=\
    \ (arr[i] / 10 == 0) ? arr[i] : arr[i] % 10 + arr[i] / 10;\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp57o2295t: /tmp/tmp57o2295t.cpp:21: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long res = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      res += arr[i];\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  std::vector<long> input;\n  for(long\
    \ i = 0; i < arr.size(); i++) {\n    if(arr[i] > 9 && arr[i] < 100) {\n      input.push_back(arr[i]);\n\
    \    }\n  }\n  if(input.size() == 0) {\n    long sum = 0;\n    for(long i = 0;\
    \ i < k; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  }\n  std::vector<long>\
    \ res;\n  long sum = 0;\n  for(long i = 0; i < k; i++) {\n    if(input[i] > 9\
    \ && input[i] < 100) {\n      res.push_back(input[i]);\n    }\n  }\n  for(long\
    \ i = 0; i < res.size(); i++) {\n    sum += res[i];\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpll7rf18i: /tmp/tmpll7rf18i.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // take the first k elements\n    long ret = 0;\n    for\
    \ (int i = 0; i < k; i++) {\n        if (arr[i] >= 100) {\n            ret +=\
    \ 99;\n        } else {\n            ret += arr[i];\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpetnas4qw: /tmp/tmpetnas4qw.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    long idx = 0;\n    while(k > 0) {\n\
    \        if(arr[idx] < 10) {\n            result += arr[idx];\n            k--;\n\
    \        } else if(arr[idx] < 100) {\n            result += arr[idx];\n      \
    \      k -= 2;\n        } else {\n            result += arr[idx] % 100;\n    \
    \        k -= 3;\n        }\n        idx++;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp13_l_t_i: /tmp/tmp13_l_t_i.cpp:32: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    int i = 0;\n    while(k != 0) {\n\
    \        if(arr[i] <= 99) {\n            result += arr[i];\n            k--;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsrw0ckx2: /tmp/tmpsrw0ckx2.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 99) {\n            continue;\n        }\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmflonk7q: /tmp/tmpmflonk7q.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong res = 0;\n\tint count = 0;\n\tfor(long i = 0; i < arr.size();\
    \ i++) {\n\t\tint digits = 0;\n\t\twhile(arr[i] > 0) {\n\t\t\tdigits++;\n\t\t\t\
    arr[i] /= 10;\n\t\t}\n\t\tif(digits <= 2) {\n\t\t\tres += arr[i];\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(count == k)\n\t\t\tbreak;\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8wyl8t95: /tmp/tmp8wyl8t95.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   std::string s = std::to_string(arr[i]);\n        if(s.length() <= 2) {\n \
    \           sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 99) {\n      sum += arr[i] / 100;\n    } else {\n      sum += arr[i];\n  \
    \  }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpv95s5l3o: /tmp/tmpv95s5l3o.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   // If the current element is a two digit number,\n        // check the next\
    \ element and add the elements\n        // accordingly.\n        if(arr[i] > 9\
    \ && arr[i] < 100) {\n            if(i+1 < k && arr[i+1] > 99) {\n           \
    \     sum += arr[i];\n            }\n            else {\n                sum +=\
    \ arr[i];\n                i++;\n            }\n        }\n        else {\n  \
    \          sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprc02xhlb: /tmp/tmprc02xhlb.cpp:35: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() < k) {\n        throw \"Invalid input\";\n\
    \    }\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n        if(arr[i]\
    \ < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long i = 0, sum = 0;\n  while(k--){\n    if(arr[i] > 9 &&\
    \ arr[i] < 100) sum += arr[i];\n    else if(arr[i] < 10) sum += arr[i];\n    i++;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n   \
    \ assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000, 5, 6})),\
    \ (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ > 9) {\n\t\t\tif (arr[i] > 99) {\n\t\t\t\tsum += arr[i];\n\t\t\t} else {\n\t\
    \t\t\tsum += arr[i] % 10;\n\t\t\t}\n\t\t} else {\n\t\t\tsum += arr[i];\n\t\t}\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvwpqn5ds: /tmp/tmpvwpqn5ds.cpp:29: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpedkc3pvz: /tmp/tmpedkc3pvz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    if(arr.size()<=1) return arr[0];\n\
    \    std::vector<long>::iterator it = arr.begin();\n    long ans = 0;\n    for(long\
    \ i=0; i<k; i++){\n        if(it != arr.end()){\n            long num = *it;\n\
    \            long num_digits = 0;\n            while(num){\n                num\
    \ /= 10;\n                num_digits++;\n            }\n            if(num_digits<=2)\
    \ ans += *it;\n            it++;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long limit = k;\n    long result = 0;\n    for (std::vector<long>::iterator\
    \ i = arr.begin(); i != arr.end(); ++i) {\n        if (k == 0) {\n           \
    \ break;\n        }\n        if (*i > 9 && *i < 100) {\n            result +=\
    \ *i;\n            k--;\n        }\n    }\n    if (k > 0) {\n        for (std::vector<long>::iterator\
    \ i = arr.begin(); i != arr.end(); ++i) {\n            if (k == 0) {\n       \
    \         break;\n            }\n            if (*i <= 9) {\n                result\
    \ += *i;\n                k--;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdrwhagia: /tmp/tmpdrwhagia.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long max_ele = 0;\n  long max_ele_pos = 0;\n  long n = arr.size();\n\
    \  if (n == 1)\n    return arr[0];\n  if (n == 2)\n    return arr[0] + arr[1];\n\
    \  while (k > 0) {\n    max_ele = 0;\n    max_ele_pos = 0;\n    for (long i =\
    \ 0; i < n; i++) {\n      if (arr[i] > max_ele) {\n        max_ele = arr[i];\n\
    \        max_ele_pos = i;\n      }\n    }\n    if (max_ele < 100) {\n      arr[max_ele_pos]\
    \ = -1;\n      break;\n    }\n    else {\n      arr[max_ele_pos] = -1;\n     \
    \ k--;\n    }\n  }\n  long sum = 0;\n  for (long i = 0; i < n; i++) {\n    if\
    \ (arr[i] > 0)\n      sum += arr[i];\n  }\n  return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz43gozo6: /tmp/tmpz43gozo6.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long total = 0;\n    for (int i = 0; i < k; i++) {\n   \
    \     if (arr[i] < 100) {\n            total += arr[i];\n        }\n    }\n  \
    \  return total;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long answer{0};\n    for(int i = 0; i < k; i++) {\n    \
    \    if(arr[i] < 10) {\n            answer += arr[i];\n        } else if(arr[i]\
    \ < 100) {\n            answer += arr[i];\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (int i = 0; i < k; i++) {\n    long\
    \ num = arr[i];\n    if (num > 99) {\n      result += 99;\n    } else {\n    \
    \  result += num;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp16xvwncd: /tmp/tmp16xvwncd.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz416nb7e: /tmp/tmpz416nb7e.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   std::stringstream temp;\n        temp << arr[i];\n        std::string s =\
    \ temp.str();\n        if(s.length() == 1 || s.length() == 2) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    long index = 0;\n    while(index < k)\
    \ {\n        long val = arr[index];\n        if(val <= 9) {\n            sum +=\
    \ val;\n        } else if(val <= 99) {\n            sum += val;\n        }\n \
    \       index++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100)\n            sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbjkeuvmg: /tmp/tmpbjkeuvmg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long total = 0;\n    for (long i = 0; i < k; i++) {\n  \
    \      long temp = arr[i];\n        if (temp < 10) {\n            total += temp;\n\
    \        } else if (temp < 100) {\n            total += temp;\n        }\n   \
    \ }\n    return total;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> dp(arr.size(), 0);\n    long res = 0;\n\
    \    for (int i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            res\
    \ += arr[i];\n        } else if (arr[i] < 100) {\n            res += arr[i] -\
    \ 10;\n        } else {\n            res += arr[i] - 100;\n        }\n    }\n\
    \    dp[k-1] = res;\n    for (int i = k; i < arr.size(); i++) {\n        if (arr[i-k]\
    \ < 10) {\n            res -= arr[i-k];\n        } else if (arr[i-k] < 100) {\n\
    \            res -= arr[i-k] - 10;\n        } else {\n            res -= arr[i-k]\
    \ - 100;\n        }\n        if (arr[i] < 10) {\n            res += arr[i];\n\
    \        } else if (arr[i] < 100) {\n            res += arr[i] - 10;\n       \
    \ } else {\n            res += arr[i] - 100;\n        }\n        dp[i] = res;\n\
    \    }\n    return dp[arr.size()-1];\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1844zgsr: /tmp/tmp1844zgsr.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  long sum = 0;\n  for(int i = 0;\
    \ i < k; i++) {\n    std::string num = std::to_string(arr[i]);\n    if(num.length()\
    \ <= 2)\n      sum += arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6jps4iqt: /tmp/tmp6jps4iqt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    long\
    \ temp = arr[i];\n    if (temp > 9) {\n      sum += (temp % 10) + (temp / 10);\n\
    \    } else {\n      sum += temp;\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmplpc8m1wy: /tmp/tmplpc8m1wy.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tlong ten = 10;\n\tlong hundred = 100;\n\t\
    for (long i = 0; i < k; i++) {\n\t\tsum += (arr[i] < ten) ? arr[i] : ((arr[i]\
    \ < hundred) ? arr[i] % ten : 0);\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9p8e08n3: /tmp/tmp9p8e08n3.cpp:24: int main(): Assertion `candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) return 0;\n  long sum = 0;\n  for (auto\
    \ element: arr) {\n    if (element < 100) sum += element;\n    k--;\n    if (k\
    \ == 0) break;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  int count = 0;\n  long sum = 0;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (count == k) {\n      break;\n    }\n    if (arr[i] < 100) {\n\
    \      sum += arr[i];\n      count++;\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpa4e743r7: /tmp/tmpa4e743r7.cpp:28: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long elements_to_sum = 0;\n    std::vector<long>::iterator\
    \ it = arr.begin();\n    while(k != 0 && it != arr.end()) {\n        long element\
    \ = *it;\n        // std::cout << \"element is: \" << element << std::endl;\n\
    \        if (element < 100) {\n            elements_to_sum += element;\n     \
    \       k--;\n        }\n        it++;\n    }\n    return elements_to_sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvkx_x6nl: /tmp/tmpvkx_x6nl.cpp:28: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long res = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            res += arr[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // Insert your code here\n  long sum = 0;\n  for(int i = 0;\
    \ i < k; i++) {\n    if(arr[i] < 10)\n      sum += arr[i];\n    else if(arr[i]\
    \ < 100)\n      sum += arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// a naive solution would be to take a cnt to keep count of\
    \ which\n\t// elements have been added of the k elements, but this would not\n\
    \t// pass a test case with a lot of elements with two digits\n\tlong sum = 0;\n\
    \tfor(int i = 0; i < k; i++) {\n\t\tint tmp = arr[i];\n\t\tint digits = 0;\n\t\
    \twhile(tmp) {\n\t\t\ttmp /= 10;\n\t\t\tdigits++;\n\t\t}\n\t\tif(digits <= 2)\
    \ {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 99) {\n      sum += 99;\n    } else {\n      sum += arr[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprkmoqeqe: /tmp/tmprkmoqeqe.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() > 100 || k > arr.size()) {\n    return -1;\n\
    \  }\n  // create a new array and add values at their index\n  std::vector<long>\
    \ arr2(100);\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 100)\
    \ {\n      arr2[arr[i]] = arr[i];\n    }\n  }\n  long sum = 0;\n  for (int i =\
    \ 0; i < k; i++) {\n    if (arr2[i] != 0) {\n      sum += arr2[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzrz734sk: /tmp/tmpzrz734sk.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong i = 0;\n\t\
    for (i = 0; i < k; i++) {\n\t\t//std::cout << arr[i] << \" \";\n\t\tlong num =\
    \ arr[i];\n\t\tif (num > 99) {\n\t\t\tsum += 99;\n\t\t}\n\t\telse {\n\t\t\tsum\
    \ += num;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc3d9409u: /tmp/tmpc3d9409u.cpp:30: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkgnnz5ri: /tmp/tmpkgnnz5ri.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Add your code here\n\tstd::vector<long> arr2;\n\tlong i\
    \ = 0;\n\tlong j = 0;\n\tlong sum = 0;\n\tfor (i = 0; i < arr.size(); i++) {\n\
    \t\tif (arr[i] >= 10 && arr[i] <= 99) {\n\t\t\tarr2.push_back(arr[i]);\n\t\t}\n\
    \t}\n\tstd::sort(arr2.begin(), arr2.end());\n\tfor (j = 0; j < k; j++) {\n\t\t\
    sum = sum + arr2[j];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdn2e19k2: /tmp/tmpdn2e19k2.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tstd::string\
    \ str = std::to_string(arr[i]);\n\t\tif (str.length() == 1 || str.length() ==\
    \ 2) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (auto i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 99) {\n      arr[i] = 99;\n    }\n    sum += arr[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfqjpxa4_: /tmp/tmpfqjpxa4_.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (long i = 0; i < k; i++) {\n    if\
    \ (arr[i] > 9 && arr[i] < 100) {\n      result += arr[i];\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3t2r92bv: /tmp/tmp3t2r92bv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long total = 0;\n    for (int i = 0; i < k; i++) {\n   \
    \     long curr = arr[i];\n        while (curr >= 10) {\n            curr /= 10;\n\
    \        }\n        total += curr;\n    }\n    return total;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpiuaa8g37: /tmp/tmpiuaa8g37.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() >= 1 && arr.size() <= 100);\n  assert(k\
    \ >= 1 && k <= arr.size());\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n\
    \    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long res = 0;\n  long i = 0;\n  while(i < k) {\n    long num\
    \ = arr[i];\n    if(num < 10) {\n      res += num;\n    } else if(num >= 10 &&\
    \ num < 100) {\n      res += num;\n    } else {\n      res += (num/100)*100;\n\
    \    }\n    i++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9u3_7ss1: /tmp/tmp9u3_7ss1.cpp:30: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long total = 0;\n  long ten = 10;\n  long hundred = 100;\n\
    \  long thousand = 1000;\n  long two_digit_elements = 0;\n  long one_digit_elements\
    \ = 0;\n  // loop through array, tallying up the number of elements\n  // below\
    \ 10 and the number of elements below 100\n  for (long i = 0; i < k; i++) {\n\
    \    if (arr[i] < ten) {\n      one_digit_elements++;\n    } else if (arr[i] <\
    \ hundred) {\n      two_digit_elements++;\n    }\n  }\n  // loop through the array\
    \ again, adding up the elements\n  // with two or less digits to the total\n \
    \ for (long i = 0; i < k; i++) {\n    if (arr[i] < thousand) {\n      total +=\
    \ arr[i];\n    }\n  }\n  // return the total\n  return total;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2levmy6a: /tmp/tmp2levmy6a.cpp:40: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // Create a result variable that holds the sum.\n    long\
    \ result = 0;\n    // Loop through the first k elements of the array.\n    for\
    \ (int i = 0; i < k; i++) {\n        // Check if the array value contains two\
    \ digits.\n        if (arr[i] > 9 && arr[i] < 100) {\n            // Add the value\
    \ to the result.\n            result += arr[i];\n        }\n    }\n    // Return\
    \ the result.\n    return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ia_r48z: /tmp/tmp_ia_r48z.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum=0;\n\tfor(long i=0;i<k;i++)\n\t{\n\t\tif(arr[i]<10)\n\
    \t\t\tsum+=arr[i];\n\t\telse if(arr[i]<100)\n\t\t\tsum+=arr[i];\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpka8z16ku: /tmp/tmpka8z16ku.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    long sum = 0;\n    for(int\
    \ i = 0; i < k; i++) {\n        long num = arr[i];\n        if(num < 10) {\n \
    \           sum += num;\n        } else if(num < 100) {\n            sum += num;\n\
    \        } else {\n            sum += 100;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwkptzk2z: /tmp/tmpwkptzk2z.cpp:29: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // Creating a variable to store the sum.\n    long sum =\
    \ 0;\n    // Creating a variable to index the vector.\n    long index = 0;\n \
    \   // Iterating the array upto k.\n    while(index < k) {\n        // Checking\
    \ if the element at the current index is either 2-digit or not.\n        if(arr[index]\
    \ < 10 || arr[index] > 99) {\n            sum += arr[index];\n        }\n    \
    \    index++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8h8_aokd: /tmp/tmp8h8_aokd.cpp:29: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // your code goes here\n  long sum = 0;\n  for(long i = 0;\
    \ i < k; i++) {\n    if(arr[i] <= 99) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  long curr = arr[i];\n        // std::cout << \"curr: \" << curr << std::endl;\n\
    \        while(curr > 0) {\n            sum += curr % 10;\n            curr /=\
    \ 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz2irm5cm: /tmp/tmpz2irm5cm.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long count = 0;\n  long sum = 0;\n  for (auto num : arr) {\n\
    \    std::string num_str = std::to_string(num);\n    if (num_str.length() > 2)\
    \ continue;\n    sum += num;\n    count++;\n    if (count == k) break;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkzo0i6t9: /tmp/tmpkzo0i6t9.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(int i = 0; i < k; i++) {\n   \
    \     if(arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] >= 100)\n            continue;\n        else\n            sum +=\
    \ arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(long i = 0; i < k; i++) {\n  \
    \      // 111 / 100 = 1\n        // 21 / 10 = 2\n        // 3 / 10 = 0\n     \
    \   // 4000 / 100 = 40\n        // 5 / 10 = 0\n        result += arr[i] / 10 ==\
    \ 0 ? arr[i] : arr[i] / 10 + arr[i] % 10;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbt86nfud: /tmp/tmpbt86nfud.cpp:26: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpw0_41s87: /tmp/tmpw0_41s87.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10)\n            sum += arr[i];\n        else if(arr[i] >= 10\
    \ && arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long res = 0;\n    std::string str;\n    for(auto itr :\
    \ arr) {\n        str = std::to_string(itr);\n        if(str.length() <= 2) {\n\
    \            res += itr;\n        }\n        k--;\n        if(k == 0) {\n    \
    \        break;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp291n72lu: /tmp/tmp291n72lu.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    long first = arr[0];\n    long second\
    \ = arr[1];\n    if (first > 99 && k >= 1) {\n        sum += first;\n        k--;\n\
    \    }\n    if (second > 99 && k >= 1) {\n        sum += second;\n        k--;\n\
    \    }\n    for (int i = 2; i < arr.size() && k > 0; i++) {\n        if (arr[i]\
    \ > 99) {\n            sum += arr[i];\n            k--;\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnc1pdovb: /tmp/tmpnc1pdovb.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long count = 0;\n  for(long i = 0; i < k; i++) {\n    if(arr[i]\
    \ < 100) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) return 0;\n  long sum = 0;\n  for (auto&\
    \ num : arr) {\n    if (num > 99) continue;\n    sum += num;\n    if (--k == 0)\
    \ break;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpotu5s2m9: /tmp/tmpotu5s2m9.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // Iterate till k and keep adding elements having atmost\
    \ two digits\n    // If the element has more than two digits, break from the loop\n\
    \    // return the sum\n    long sum = 0;\n    int count = 0;\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] < 100) {\n            sum += arr[i];\n\
    \            count++;\n        }\n        else\n            break;\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyl_o77ql: /tmp/tmpyl_o77ql.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    if(k >= arr.size()) {\n        k = arr.size();\n    }\n\
    \    long sum = 0;\n    for(long i = 0; i < k; i++) {\n        long num = arr[i];\n\
    \        if(num <= 99) {\n            sum += num;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tif (arr.size() < 1 || arr.size() > 100) {\n\t\tthrow std::invalid_argument(\"\
    Array is not valid\\n\");\n\t}\n\tif (k > arr.size()) {\n\t\tthrow std::invalid_argument(\"\
    K is not valid\\n\");\n\t}\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\
    \t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptyqbj_p3: /tmp/tmptyqbj_p3.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    // get\
    \ each digit and add\n    // get the first digit\n    long first_digit = 0;\n\
    \    while (arr[i] >= 10) {\n      first_digit++;\n      arr[i] /= 10;\n    }\n\
    \    if (first_digit == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp44021pv8: /tmp/tmp44021pv8.cpp:31: int main(): Assertion `candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    //assert(arr.size()>=1 && arr.size()<=100);\n    //assert(k>=1\
    \ && k<=arr.size());\n    long sum=0;\n    for(long i=0;i<k;i++){\n        if(arr[i]<10\
    \ || arr[i]>=100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf1v5hosl: /tmp/tmpf1v5hosl.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    assert(k > 0);\n    assert(k <= arr.size());\n    int sum\
    \ = 0;\n    for (int i = 0; i < k; i++) {\n        // if the number is 3 digit,\
    \ we ignore it.\n        if (arr[i] > 99) {\n            continue;\n        }\n\
    \        sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    if(k > arr.size()) {\n        k = arr.size();\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        long num = arr[i];\n      \
    \  if(num >= 1000) {\n            break;\n        }\n        if(num < 10) {\n\
    \            sum += num;\n        }\n        else if(num < 100) {\n          \
    \  sum += num;\n        }\n        else if(num < 1000) {\n            long remainder\
    \ = num % 100;\n            if(remainder < 10) {\n                sum += remainder;\n\
    \            }\n            else {\n                sum += remainder;\n      \
    \      }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7pspbmny: /tmp/tmp7pspbmny.cpp:42: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // pass in a vector and size k\n    // only add the integers\
    \ with 2 digits or less\n    // add those elements together\n    long arr_size\
    \ = arr.size();\n    long sum = 0;\n    long result = 0;\n    for (int i = 0;\
    \ i < arr_size; i++) {\n        if (arr[i] <= 99) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpenak4j2h: /tmp/tmpenak4j2h.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  int n = arr.size();\n  long sum = 0;\n  for (int i = 0; i\
    \ < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    long result = 0;\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] < 10) {\n            result += arr[i];\n\
    \        } else if(arr[i] < 100) {\n            result += arr[i]%10 + arr[i]/10;\n\
    \        } else {\n            result += 3;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk27whaih: /tmp/tmpk27whaih.cpp:28: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // std::cout << \"k = \" << k << \"\\n\";\n    long sum\
    \ = 0;\n    for (long i = 0; i < k; i++) {\n        // std::cout << \"arr[i] =\
    \ \" << arr[i] << \"\\n\";\n        sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt9ghk7d1: /tmp/tmpt9ghk7d1.cpp:23: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long max_elements = 0;\n    long sum = 0;\n    long i =\
    \ 0;\n    while(max_elements < k && i < arr.size()) {\n        if(arr[i] <= 99)\
    \ {\n            sum += arr[i];\n            max_elements++;\n        }\n    \
    \    i++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqosbrw18: /tmp/tmpqosbrw18.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1a85uqku: /tmp/tmp1a85uqku.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(int i = 0; i < k; i++) {\n   \
    \     if(arr[i] > 9 && arr[i] < 100)\n            result += arr[i];\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsqosq0il: /tmp/tmpsqosq0il.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(long i = 0; i < k; i++) {\n  \
    \      if(arr[i] < 10) {\n            result += arr[i];\n        } else if(arr[i]\
    \ >= 10 && arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = add_elements;\n   \
    \ assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000, 5, 6})),\
    \ (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long sum = 0;\n    // if the\
    \ array contains 0, the result must be 0\n    for (auto i : arr) {\n        if\
    \ (i == 0) {\n            return 0;\n        }\n    }\n    for (long i = 0; i\
    \ < k; i++) {\n        if (arr[i] < 100) {\n            res.push_back(arr[i]);\n\
    \        }\n    }\n    for (auto i : res) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] >= 100) {\n            sum += arr[i] / 100;\n        } else if(arr[i]\
    \ >= 10) {\n            sum += arr[i] / 10;\n        } else {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp10lml4fh: /tmp/tmp10lml4fh.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // your code goes here\n  long sum = 0;\n  for(long i = 0;\
    \ i < k; i++) {\n    if(arr[i] < 10) {\n      sum += arr[i];\n    }\n    else\
    \ if(arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 99) {\n            sum += 99;\n        } else {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp09j22hew: /tmp/tmp09j22hew.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    long sum = 0;\n    for(int\
    \ i = 0; i < k; i++) {\n        if(arr[i] > 9 && arr[i] < 100) {\n           \
    \ sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_an7l0xx: /tmp/tmp_an7l0xx.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    //////// Starting from here ////////\n    long sum = 0;\n\
    \    for(int i = 0; i < k; i++) {\n        if(arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwbqrzdjt: /tmp/tmpwbqrzdjt.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Assume that the input array is sorted in ascending order.\n\
    \t// Sort the vector using the standard library function.\n\tstd::sort(arr.begin(),\
    \ arr.end());\n\t// Iterate over the kth element of the array.\n\tlong sum = 0;\n\
    \tfor (long i = 0; i < k; i++) {\n\t\t// Check if the array element has at most\
    \ two digits.\n\t\t// Since the array is sorted in ascending order, we just need\
    \ to check the first element of the array.\n\t\tif (arr[i] < 100) {\n\t\t\tsum\
    \ += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate =\
    \ add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpejp6xs5v: /tmp/tmpejp6xs5v.cpp:29: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ >= 10) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2df12ryc: /tmp/tmp2df12ryc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long total_sum = 0;\n  int counter = 0;\n  while(counter <\
    \ k){\n    if(arr[counter] < 100){\n      total_sum += arr[counter];\n    }\n\
    \    counter++;\n  }\n  return total_sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] / 10 < 1) {\n            sum += arr[i];\n        }\n        else\
    \ if(arr[i] / 100 < 1) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   long num = arr[i];\n        if(arr[i] > 99) {\n            num = 99;\n   \
    \     }\n        sum += num;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0cydoyrz: /tmp/tmp0cydoyrz.cpp:25: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (int i = 0; i < k; i++) {\n    std::string\
    \ s = std::to_string(arr[i]);\n    if (s.length() <= 2) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t//long sum = 0;\n\tstd::sort(arr.begin(), arr.end());\n\t\
    if (k > arr.size())\n\t\tk = arr.size();\n\tlong sum = std::accumulate(arr.begin(),\
    \ arr.begin() + k, 0);\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptsna634g: /tmp/tmptsna634g.cpp:22: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long cnt = 0;\n  long sum = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (cnt == k)\n      break;\n    if (arr[i] < 100) {\n      sum\
    \ += arr[i];\n      cnt++;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprpgm9vgy: /tmp/tmprpgm9vgy.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (int i = 0; i < k; i++) {\n    if\
    \ (arr[i] >= 10) {\n      // compare sum of digits and digits separately\n   \
    \   int a = arr[i] / 10;\n      int b = arr[i] % 10;\n      if (a + b > arr[i])\
    \ {\n        result += a + b;\n      } else {\n        result += arr[i];\n   \
    \   }\n    } else {\n      result += arr[i];\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr9vmitvr: /tmp/tmpr9vmitvr.cpp:32: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  int i,sum=0;\n  for(i=0;i<k;i++)\n  {\n    if(arr[i]<100)\n\
    \    {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> v;\n    for(int i = 0; i < k; i++) {\n\
    \        v.push_back(arr[i]);\n    }\n    // std::cout << v.size() << std::endl;\n\
    \    long sum = 0;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i] <=\
    \ 99) {\n            sum += v[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // int result = 0;\n    // for(int i = 0; i < k; i++) {\n\
    \    //     if(arr[i] > 99)\n    //         result += arr[i];\n    // }\n    //\
    \ return result;\n    long result = 0;\n    for(int i = 0; i < k; i++) {\n   \
    \     if(arr[i] >= 10 && arr[i] <= 99)\n            result += arr[i];\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = add_elements;\n   \
    \ assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000, 5, 6})),\
    \ (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5ok8zxyb: /tmp/tmp5ok8zxyb.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum=0;\n\tfor(long i=0;i<k;i++)\n\t{\n\t\tif(arr[i]>=10\
    \ && arr[i]<100)\n\t\t{\n\t\t\tsum+=arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjdla1_zk: /tmp/tmpjdla1_zk.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  for (long i = 0; i < k; i++) {\n    if\
    \ (arr[i] <= 99)\n      result += arr[i];\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long count = 0;\n    long result = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] < 100) {\n            result +=\
    \ arr[i];\n            count++;\n        }\n        if (count == k) {\n      \
    \      break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp28_umm7u: /tmp/tmp28_umm7u.cpp:28: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  // loop over all elements\n  for (long i\
    \ = 0; i < k; i++) {\n    // if the element is less than 100\n    if (arr[i] <\
    \ 100) {\n      // add to sum\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    assert(k >= 1);\n    assert(k <= arr.size());\n    std::sort(arr.begin(),\
    \ arr.end());\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n       \
    \ long num = arr[i];\n        if (num >= 100) {\n            sum += num;\n   \
    \     } else if (num >= 10) {\n            sum += (num % 10);\n        } else\
    \ {\n            sum += num;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmdsaao2d: /tmp/tmpmdsaao2d.cpp:31: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result = 0;\n    for(long i = 0; i < k; i++) {\n  \
    \      if(arr[i] < 10) {\n            result += arr[i];\n        } else if(arr[i]\
    \ >= 10 && arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = add_elements;\n   \
    \ assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000, 5, 6})),\
    \ (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbpqazl73: /tmp/tmpbpqazl73.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp78dm6ifw: /tmp/tmp78dm6ifw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) {\n    return 0;\n  }\n  long sum = 0;\n\
    \  for (long i = 0; i < k; i++) {\n    long temp = arr[i];\n    if (temp >= 0)\
    \ {\n      if (temp > 9) {\n        sum += (temp / 10) + (temp % 10);\n      }\
    \ else {\n        sum += temp;\n      }\n    } else {\n      if (temp < -9) {\n\
    \        sum += (temp / 10) + (temp % 10);\n      } else {\n        sum += temp;\n\
    \      }\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdv46vfhb: /tmp/tmpdv46vfhb.cpp:37: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\t// sum\
    \ += arr[i];\n\t\t// if (sum < 10) {\n\t\t// \tbreak;\n\t\t// }\n\t\t// else if\
    \ (sum >= 10 && sum < 100) {\n\t\t// \tbreak;\n\t\t// }\n\t\tif (arr[i] > 100)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (int i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmput06dr9f: /tmp/tmput06dr9f.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptuuaez6g: /tmp/tmptuuaez6g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    int length = arr.size();\n    int sum = 0;\n    int i =\
    \ 0;\n    while(i < length && k > 0) {\n        if(arr[i] >= 10 && arr[i] <= 99)\
    \ {\n            sum += arr[i];\n            k--;\n        }\n        i++;\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeel9vkih: /tmp/tmpeel9vkih.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    // Iterate through first k elements of\
    \ the array\n    for (long i = 0; i < k; i++) {\n        // If an element consists\
    \ of 2 digits, add it to the sum\n        if (arr[i] > 9 && arr[i] < 100) {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwxodsu05: /tmp/tmpwxodsu05.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr6ibhw0p: /tmp/tmpr6ibhw0p.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    long i = 0;\n    while(i < k) {\n   \
    \     long d = arr[i];\n        if(d < 100) {\n            sum += d;\n       \
    \ }\n        i++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    // 1. Check validity of input\n    assert(1 <= arr.size()\
    \ && arr.size() <= 100);\n    assert(1 <= k && k <= arr.size());\n    // 2. Let's\
    \ define a variable that will hold the response\n    long res = 0;\n    // 3.\
    \ Loop through first k elements of arr\n    for (long i = 0; i < k; i++) {\n \
    \       // 4. Check whether the current element has at most two digits\n     \
    \   if (arr[i] <= 99) {\n            // 5. If so, add it to res\n            res\
    \ += arr[i];\n        }\n    }\n    // 6. After the loop is done, return res\n\
    \    return res;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long arrSize = arr.size();\n    long sum = 0;\n    for(long\
    \ i = 0; i < arrSize; i++) {\n        if(arr[i] <= 99 && i < k) {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 99)\n            continue;\n        sum += arr[i];\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ >= 100)\n\t\t\tsum += arr[i] % 100;\n\t\telse\n\t\t\tsum += arr[i];\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5z3w519c: /tmp/tmp5z3w519c.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> k_elements = std::vector<long>(k);\n \
    \   long sum = 0;\n    // push the first k elements of arr into a vector\n   \
    \ for (int i = 0; i < k; i++) {\n        k_elements[i] = arr[i];\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        int n = k_elements[i];\n        if (n < 10)\
    \ {\n            sum += n;\n        } else if (n < 100) {\n            sum +=\
    \ n % 10;\n            sum += (n / 10) % 10;\n        } else {\n            sum\
    \ += n % 10;\n            sum += (n / 10) % 10;\n            sum += (n / 100)\
    \ % 10;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2217j7_n: /tmp/tmp2217j7_n.cpp:36: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   long num = arr[i];\n        while(num >= 10)\n            num /= 10;\n   \
    \     sum += num;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpae42dalj: /tmp/tmpae42dalj.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Assuming empty array is not given\n\t// Initialize a variable\
    \ to store the sum of elements\n\tlong sum = 0;\n\tfor(long i = 0; i < k; i++)\
    \ {\n\t\t// If number of digits are <= 2\n\t\tif(arr[i] > 9 && arr[i] < 100) {\n\
    \t\t\t// Add to the sum\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2m1q6fyt: /tmp/tmp2m1q6fyt.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpx7ltiu_r: /tmp/tmpx7ltiu_r.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] >= 100) {\n            sum += 100;\n        } else if(arr[i] >= 10)\
    \ {\n            sum += 10;\n        } else {\n            sum += arr[i];\n  \
    \      }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpazvymp4e: /tmp/tmpazvymp4e.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ > 99) {\n\t\t\tarr[i] = 99;\n\t\t}\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi2qld7nv: /tmp/tmpi2qld7nv.cpp:24: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long arr_len = arr.size();\n    long output = 0;\n    for\
    \ (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            output\
    \ += arr[i];\n        }\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  int index = 0;\n  long sum = 0;\n  while(index < k && index\
    \ < arr.size()) {\n    if(arr[index] < 100) {\n      sum += arr[index];\n    }\n\
    \    index++;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // insert your code here\n  long sum = 0;\n  for(long i =\
    \ 0; i < k; i++) {\n    if(arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmps1wefi0m: /tmp/tmps1wefi0m.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long total = 0;\n    for (long i = 0; i < k; i++) {\n  \
    \      if (arr[i] > 99) {\n            arr[i] = 99;\n        }\n        if (arr[i]\
    \ < 10) {\n            total += arr[i];\n        }\n        else {\n         \
    \   total += (arr[i] % 10) + ((arr[i] / 10) % 10);\n        }\n    }\n    return\
    \ total;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdv0kiysh: /tmp/tmpdv0kiysh.cpp:29: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long result{};\n    for(int i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10 || arr[i] < 100)\n            result += arr[i];\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   std::string str = std::to_string(arr[i]);\n        if(str.length() <= 2)\n\
    \            sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  std::sort(arr.begin(), arr.end());\n  long index = 0;\n  long\
    \ sum = 0;\n  while(index < k) {\n    if(arr[index] < 10) {\n      sum += arr[index];\n\
    \      index++;\n    }\n    else if(arr[index] > 99) {\n      sum += 99;\n   \
    \   index++;\n    }\n    else if(arr[index] > 9 && arr[index] < 100) {\n     \
    \ sum += arr[index];\n      index++;\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdyk1ezma: /tmp/tmpdyk1ezma.cpp:34: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] / 10 < 1) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpn91294sl: /tmp/tmpn91294sl.cpp:24: int main(): Assertion `candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_w4sfrd5: /tmp/tmp_w4sfrd5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long value = 0;\n    for(long i = 0; i < k; i++) {\n   \
    \     if(arr[i] >= 100) {\n            continue;\n        }\n        value +=\
    \ arr[i];\n    }\n    return value;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long count = 0;\n    long sum = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(count < k) {\n            if(arr[i] <= 99)\
    \ {\n                sum += arr[i];\n                count++;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7a49ba2k: /tmp/tmp7a49ba2k.cpp:27: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long i = 0, sum = 0;\n    while(k > 0) {\n        if(arr[i]\
    \ < 10) {\n            sum += arr[i];\n            i++;\n            k--;\n  \
    \      }\n        else if(arr[i] >= 10 && arr[i] < 100) {\n            sum +=\
    \ arr[i];\n            i++;\n            k--;\n        }\n        else\n     \
    \       i++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({1, -2, -3, 41, 57, 76, 87, 88, 99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({111, 121, 3, 4000,\
    \ 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfh5alrtr: /tmp/tmpfh5alrtr.cpp:32: int main(): Assertion `candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp05onpchb: /tmp/tmp05onpchb.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100)\n      sum += arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  long sum = 0;\n  for(int i = 0;\
    \ i < k; i++) {\n    if(arr[i] < 10) {\n      sum += arr[i];\n    }\n    else\
    \ if(arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100)\n            sum += arr[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum=0;\n  int n=arr.size();\n  for(int i=0;i<n;i++){\n\
    \    if(i<k && arr[i]>=0 && arr[i]<100){\n      sum=sum+arr[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5yy2d2d2: /tmp/tmp5yy2d2d2.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long result = 0;\n  int two_count = 0;\n  for (int i = 0;\
    \ i < k; i++) {\n    if (arr[i] < 10) {\n      result += arr[i];\n    } else if\
    \ (arr[i] < 100) {\n      result += arr[i];\n      two_count++;\n    } else if\
    \ (two_count >= 2) {\n      result += arr[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\t// Edge Case Check:\n\t// 1. Empty Array\n\t// 2. k out of\
    \ range\n\tif (arr.size() == 0 || k > arr.size()) {\n\t\treturn 0;\n\t}\n\t//\
    \ Sum to return\n\tlong sum = 0;\n\t// Iterate over first k elements of arr\n\t\
    for (long i = 0; i < k; i++) {\n\t\t// Convert to string for easy conversion to\
    \ char\n\t\tstd::string i_str = std::to_string(arr[i]);\n\t\t// If element is\
    \ 2 digit, sum it\n\t\tif (i_str.size() <= 2) {\n\t\t\tsum += arr[i];\n\t\t}\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({111,\
    \ 121, 3, 4000, 5, 6})), (2)) == (0));\n    assert(candidate((std::vector<long>({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9})), (4)) == (125));\n    assert(candidate((std::vector<long>({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9})), (4)) == (24));\n    assert(candidate((std::vector<long>({1})),\
    \ (1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
