name: HumanEval_162_string_to_md5
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Your code\
    \ here\n    if(text.length() == 0)\n        return std::nullopt;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    std::string str(mdString);\n    return str;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdm12ft9_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpdm12ft9_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpdm12ft9_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpdm12ft9_.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdm12ft9_.cpp:2:\n/tmp/tmpdm12ft9_.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpdm12ft9_.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdm12ft9_.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpdm12ft9_.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpdm12ft9_.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdm12ft9_.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpdm12ft9_.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\t// TODO: Implement\
    \ me.\n\tif (text.length() == 0) {\n\t\treturn std::nullopt;\n\t}\n\telse {\n\t\
    \tstd::string str = \"\";\n\t\tuint32_t h0 = 0x67452301;\n\t\tuint32_t h1 = 0xEFCDAB89;\n\
    \t\tuint32_t h2 = 0x98BADCFE;\n\t\tuint32_t h3 = 0x10325476;\n\t\tuint32_t a =\
    \ 0;\n\t\tuint32_t b = 0;\n\t\tuint32_t c = 0;\n\t\tuint32_t d = 0;\n\t\tint k[64]\
    \ = {\n\t\t\t0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,\n\t\t\t0xf57c0faf,\
    \ 0x4787c62a, 0xa8304613, 0xfd469501,\n\t\t\t0x698098d8, 0x8b44f7af, 0xffff5bb1,\
    \ 0x895cd7be,\n\t\t\t0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n\t\t\t0xf61e2562,\
    \ 0xc040b340, 0x265e5a51, 0xe9b6c7aa,\n\t\t\t0xd62f105d, 0x02441453, 0xd8a1e681,\
    \ 0xe7d3fbc8,\n\t\t\t0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n\t\t\t0xa9e3e905,\
    \ 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n\t\t\t0xfffa3942, 0x8771f681, 0x6d9d6122,\
    \ 0xfde5380c,\n\t\t\t0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n\n}\nint\
    \ main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fj_1fvp.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp3fj_1fvp.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::optional<std::string>\
    \ ret;\n  // your code here\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7rt28_my.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7rt28_my.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp7rt28_my.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7rt28_my.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7rt28_my.cpp:2:\n/tmp/tmp7rt28_my.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp7rt28_my.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7rt28_my.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp7rt28_my.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp7rt28_my.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7rt28_my.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp7rt28_my.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  try {\n    std::size_t\
    \ text_size = text.size();\n    if (text_size == 0) {\n      return std::nullopt;\n\
    \    }\n    // std::cout << text_size << std::endl;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text_size, (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    std::string ret(mdString);\n    return\
    \ ret;\n  } catch (const std::exception& e) {\n    return std::nullopt;\n  }\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzyokl1o_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpzyokl1o_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpzyokl1o_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpzyokl1o_.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzyokl1o_.cpp:2:\n/tmp/tmpzyokl1o_.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpzyokl1o_.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzyokl1o_.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpzyokl1o_.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpzyokl1o_.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzyokl1o_.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpzyokl1o_.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe6izabqm.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpe6izabqm.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpe6izabqm.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpe6izabqm.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe6izabqm.cpp:2:\n/tmp/tmpe6izabqm.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpe6izabqm.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpe6izabqm.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpe6izabqm.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpe6izabqm.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpe6izabqm.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpe6izabqm.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.length()\
    \ == 0) {\n    return std::nullopt;\n  }\n  uint32_t a0 = 0x67452301;\n  uint32_t\
    \ b0 = 0xefcdab89;\n  uint32_t c0 = 0x98badcfe;\n  uint32_t d0 = 0x10325476;\n\
    \  std::vector<uint32_t> X(16);\n  uint32_t A = a0;\n  uint32_t B = b0;\n  uint32_t\
    \ C = c0;\n  uint32_t D = d0;\n  uint32_t s,i,j,k,f,g,temp;\n  unsigned char *pointer;\n\
    \  unsigned char buffer[64];\n  uint32_t a,b,c,d;\n  uint32_t size = (text.length()\
    \ + 8) / 64 + 1;\n  uint32_t len = text.length();\n  pointer = (unsigned char*)malloc(text.length()\
    \ + 64 + 1);\n  memcpy(pointer, text.c_str(), text.length());\n  pointer[text.length()]\
    \ = 0x80;\n  for (int i = 0; i < 8; i++) {\n    pointer[text.length() + 1 + i]\
    \ = (len * 8) >> (8 * i);\n  }\n  for (int i = 0; i < size; i++) {\n    for (int\
    \ j = 0; j < 16; j++) {\n      X[j] = (pointer[i * 64 + j * 4] << 24) | (pointer[i\
    \ * 64 + j * 4 + 1] << 16) | (pointer[i * 64 + j * 4 + 2] << 8) | (pointer[i *\
    \ 64 + j * 4 + 3]);\n    }\n    a = A;\n    b = B;\n    c = C;\n    d = D;\n \
    \   for (i = 0; i < 64; i++) {\n      if (i < 16) {\n        f = (b & c) | ((~b)\
    \ & d);\n        g = i;\n      } else if (i < 32) {\n        f\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpex2fag0n.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpex2fag0n.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.length()\
    \ == 0) return std::nullopt;\n  using byte = unsigned char;\n  byte digest[MD5_DIGEST_LENGTH];\n\
    \  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), text.length());\n\
    \  MD5_Final(digest, &ctx);\n  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n\
    \  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8o_ujbm_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp8o_ujbm_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp8o_ujbm_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8o_ujbm_.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8o_ujbm_.cpp:2:\n/tmp/tmp8o_ujbm_.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp8o_ujbm_.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8o_ujbm_.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp8o_ujbm_.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp8o_ujbm_.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8o_ujbm_.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp8o_ujbm_.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // if (text.empty())\
    \ {\n    //     return {};\n    // }\n    // u_int8_t hash[MD5_DIGEST_LENGTH];\n\
    \    // MD5_CTX md5_ctx;\n    // MD5_Init(&md5_ctx);\n    // MD5_Update(&md5_ctx,\
    \ text.c_str(), text.size());\n    // MD5_Final(hash, &md5_ctx);\n    // char\
    \ md5[MD5_DIGEST_LENGTH * 2 + 1];\n    // for (size_t i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    //     sprintf(&md5[i * 2], \"%02x\", (unsigned int)hash[i]);\n\
    \    // }\n    // return md5;\n    return {};\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3zei3xt.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpg3zei3xt.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpg3zei3xt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpg3zei3xt.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg3zei3xt.cpp:2:\n/tmp/tmpg3zei3xt.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpg3zei3xt.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpg3zei3xt.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpg3zei3xt.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpg3zei3xt.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpg3zei3xt.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpg3zei3xt.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  std::string md5_hash;\n  md5_hash.resize(32);\n\
    \  int ret = ::md5((const unsigned char *)text.c_str(), text.size(), (unsigned\
    \ char *)md5_hash.data());\n  assert(ret == 0);\n  return md5_hash;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf36ae__s.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf36ae__s.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf36ae__s.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf36ae__s.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf36ae__s.cpp:2:\n/tmp/tmpf36ae__s.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf36ae__s.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf36ae__s.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf36ae__s.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf36ae__s.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf36ae__s.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf36ae__s.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // TODO: Implement\
    \ this method\n    if(text.empty())\n        return std::nullopt;\n    MD5 md5;\n\
    \    md5.update(text);\n    std::string hash_string=md5.toStr();\n    return hash_string;\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf38iex0l.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf38iex0l.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf38iex0l.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf38iex0l.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf38iex0l.cpp:2:\n/tmp/tmpf38iex0l.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf38iex0l.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf38iex0l.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf38iex0l.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf38iex0l.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf38iex0l.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf38iex0l.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Validate\
    \ input\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    //\
    \ Initialize\n    MD5_CTX context;\n    unsigned char buffer[MD5_DIGEST_LENGTH];\n\
    \    MD5_Init(&context);\n    MD5_Update(&context, text.c_str(), text.size());\n\
    \    MD5_Final(buffer, &context);\n    // Convert to hexadecimal format\n    std::stringstream\
    \ ss;\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)buffer[i];\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoa1x2aa6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoa1x2aa6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoa1x2aa6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoa1x2aa6.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoa1x2aa6.cpp:2:\n/tmp/tmpoa1x2aa6.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoa1x2aa6.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoa1x2aa6.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoa1x2aa6.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoa1x2aa6.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoa1x2aa6.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoa1x2aa6.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  return \"3e25960a79dbc69b674cd4ec67a72c62\"\
    ;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_3zim5wg.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp_3zim5wg.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp_3zim5wg.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_3zim5wg.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_3zim5wg.cpp:2:\n/tmp/tmp_3zim5wg.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp_3zim5wg.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_3zim5wg.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp_3zim5wg.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp_3zim5wg.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_3zim5wg.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp_3zim5wg.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::string md5;\n\
    \  if (text.empty()) {\n    return std::nullopt;\n  }\n  MD5 m5;\n  m5.update(text);\n\
    \  md5 = m5.toString();\n  return md5;\n}\nint main() {\n    auto candidate =\
    \ string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgsgo23h9.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpgsgo23h9.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpgsgo23h9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgsgo23h9.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgsgo23h9.cpp:2:\n/tmp/tmpgsgo23h9.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpgsgo23h9.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpgsgo23h9.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpgsgo23h9.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpgsgo23h9.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpgsgo23h9.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpgsgo23h9.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Take an empty\
    \ string for storing result\n    std::string cipher = \"\";\n    std::bitset<8>\
    \ bits;\n    int i;\n    // Scan all the characters one by one\n    for (i = 0;\
    \ i < text.size(); i++) {\n        // Declare stringstream object, then read in\
    \ the text\n        std::stringstream ss;\n        ss << text[i];\n        //\
    \ Do a bitwise and with 255 and add the read character\n        // to the result\n\
    \        int temp;\n        ss >> temp;\n        cipher += (char)(255 & temp);\n\
    \    }\n    // Return the resultant string\n    return cipher;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2nbj2pu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpl2nbj2pu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpl2nbj2pu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpl2nbj2pu.cpp:26:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   26 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl2nbj2pu.cpp:2:\n/tmp/tmpl2nbj2pu.cpp:27:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpl2nbj2pu.cpp:27:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl2nbj2pu.cpp:27:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpl2nbj2pu.cpp:28:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   28 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpl2nbj2pu.cpp:28:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl2nbj2pu.cpp:28:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpl2nbj2pu.cpp:29:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.empty())\
    \ {\n\t\treturn std::nullopt;\n\t}\n\t// HINT: To use md5() in hashlib, use the\
    \ following import statement:\n\t// from hashlib import md5\n\t// You can create\
    \ a md5 hash object by calling md5() constructor,\n\t// and then you can use update(text)\
    \ method to feed in text,\n\t// and use hexdigest() method to obtain the hash\
    \ result.\n\t// >>> import hashlib\n\t// >>> m = hashlib.md5()\n\t// >>> m.update(b'Hello\
    \ world')\n\t// >>> m.hexdigest()\n\t// '3e25960a79dbc69b674cd4ec67a72c62'\n\t\
    //\n\t// HINT: To convert a C++ string to C-style null-terminated string, use\
    \ c_str() method.\n\t// To convert a C-style string to C++ string, use std::string(<C-style\
    \ string>) constructor.\n\t\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9a2zarn.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf9a2zarn.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf9a2zarn.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf9a2zarn.cpp:26:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   26 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9a2zarn.cpp:2:\n/tmp/tmpf9a2zarn.cpp:27:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf9a2zarn.cpp:27:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf9a2zarn.cpp:27:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf9a2zarn.cpp:28:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   28 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf9a2zarn.cpp:28:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf9a2zarn.cpp:28:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf9a2zarn.cpp:29:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::size_t length\
    \ = text.length();\n  if (length == 0) return std::nullopt;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), length);\n\
    \  MD5_Final(digest, &ctx);\n  char mdString[33];\n  for (int i = 0; i < 16; i++)\n\
    \    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::optional<std::string>(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzwnutnqs.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpzwnutnqs.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpzwnutnqs.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpzwnutnqs.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwnutnqs.cpp:2:\n/tmp/tmpzwnutnqs.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpzwnutnqs.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzwnutnqs.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpzwnutnqs.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpzwnutnqs.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzwnutnqs.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpzwnutnqs.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0) {\n\t\treturn std::nullopt;\n\t}\n\n\tstd::hash<std::string> str_hash;\n\
    \tauto hash_value = str_hash(text);\n\tstd::stringstream ss;\n\tss << std::hex\
    \ << hash_value;\n\tstd::string s = ss.str();\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99gwmv5k.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp99gwmv5k.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp99gwmv5k.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp99gwmv5k.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp99gwmv5k.cpp:2:\n/tmp/tmp99gwmv5k.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp99gwmv5k.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp99gwmv5k.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp99gwmv5k.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp99gwmv5k.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp99gwmv5k.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp99gwmv5k.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    // Your code goes here!\n    return std::string(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr985rzg7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpr985rzg7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpr985rzg7.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpr985rzg7.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr985rzg7.cpp:2:\n/tmp/tmpr985rzg7.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpr985rzg7.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpr985rzg7.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpr985rzg7.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpr985rzg7.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpr985rzg7.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpr985rzg7.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tconst int MD5_DIGEST_LENGTH\
    \ = 16;\n\tint i;\n\tunsigned char digest[MD5_DIGEST_LENGTH];\n\tMD5_CTX context;\n\
    \t\n\tif (text.empty()) {\n\t\treturn std::nullopt;\n\t}\n\t\n\t// Initializing\
    \ the context.\n\tMD5_Init(&context);\n\t\n\t// Adding the data.\n\tMD5_Update(&context,\
    \ text.c_str(), text.size());\n\t\n\t// Finalizing the context.\n\tMD5_Final(digest,\
    \ &context);\n\t\n\t// Convert md5 to string.\n\tchar mdString[33];\n\tfor (i\
    \ = 0; i < MD5_DIGEST_LENGTH; i++) {\n\t\tsprintf(&mdString[i * 2], \"%02x\",\
    \ digest[i]);\n\t}\n\t\n\treturn std::string(mdString);\n}\nint main() {\n   \
    \ auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp93dtqqr_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp93dtqqr_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp93dtqqr_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp93dtqqr_.cpp:34:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   34 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93dtqqr_.cpp:2:\n/tmp/tmp93dtqqr_.cpp:35:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   35 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp93dtqqr_.cpp:35:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp93dtqqr_.cpp:35:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   35 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp93dtqqr_.cpp:36:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   36 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp93dtqqr_.cpp:36:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp93dtqqr_.cpp:36:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   36 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp93dtqqr_.cpp:37:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   37 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    constexpr std::size_t\
    \ size_buffer = 256;\n    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char result[size_buffer];\n\
    \    std::memset(result, 0, size_buffer);\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);    \n    for(int i = 0; i < 16; i++)\
    \ {\n        sprintf(&result[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n\
    \    std::string hash(result);\n    return hash;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1j8xhnya.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1j8xhnya.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1j8xhnya.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1j8xhnya.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1j8xhnya.cpp:2:\n/tmp/tmp1j8xhnya.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1j8xhnya.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1j8xhnya.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1j8xhnya.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1j8xhnya.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1j8xhnya.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1j8xhnya.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  // initialize digest with 128-bit (16 bytes)\n\
    \  unsigned char digest[MD5_DIGEST_LENGTH];\n  std::string output = \"\";\n  MD5((unsigned\
    \ char*)text.c_str(), text.length(), (unsigned char*)&digest);\n  char buffer[sizeof(digest)\
    \ * 2 + 1];\n  for (int i = 0; i < sizeof(digest); i++) {\n    sprintf(buffer\
    \ + (i * 2), \"%02x\", (unsigned int)digest[i]);\n  }\n  buffer[sizeof(digest)\
    \ * 2] = 0;\n  output.append(buffer);\n  return output;\n}\nint main() {\n   \
    \ auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpa_1_l9.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpjpa_1_l9.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpjpa_1_l9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjpa_1_l9.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjpa_1_l9.cpp:2:\n/tmp/tmpjpa_1_l9.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpjpa_1_l9.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjpa_1_l9.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpjpa_1_l9.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpjpa_1_l9.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjpa_1_l9.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpjpa_1_l9.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code here\n\
    \    if(text == \"\") return std::nullopt;\n    std::array<int, 16> buffer;\n\
    \    std::string result;\n    std::size_t length = text.length();\n    MD5((unsigned\
    \ char*)&text[0], length, (unsigned char*)&buffer[0]);\n    for(int i = 0; i <\
    \ 16; i++)\n        result += buffer[i];\n    return result;\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3_0_xlk0.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp3_0_xlk0.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp3_0_xlk0.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp3_0_xlk0.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3_0_xlk0.cpp:2:\n/tmp/tmp3_0_xlk0.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp3_0_xlk0.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3_0_xlk0.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp3_0_xlk0.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp3_0_xlk0.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3_0_xlk0.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp3_0_xlk0.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.empty())\
    \ {\n\t\treturn std::nullopt;\n\t}\n\tstd::array<unsigned char, MD5_DIGEST_LENGTH>\
    \ md5;\n\tMD5((unsigned char*) text.c_str(), text.size(), md5.data());\n\tstd::stringstream\
    \ ss;\n\tfor (int i = 0; i < md5.size(); i++) {\n\t\tss << std::hex << std::setw(2)\
    \ << std::setfill('0') << (int) md5[i];\n\t}\n\treturn ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkg1nftvt.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkg1nftvt.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpkg1nftvt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpkg1nftvt.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkg1nftvt.cpp:2:\n/tmp/tmpkg1nftvt.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpkg1nftvt.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkg1nftvt.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpkg1nftvt.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpkg1nftvt.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkg1nftvt.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpkg1nftvt.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::hash<std::string> hash_fn;\n\
    \    std::size_t hash = hash_fn(text);\n    std::stringstream ss;\n    ss << std::hex\
    \ << hash;\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1bafu5v.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpr1bafu5v.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpr1bafu5v.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpr1bafu5v.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr1bafu5v.cpp:2:\n/tmp/tmpr1bafu5v.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpr1bafu5v.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpr1bafu5v.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpr1bafu5v.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpr1bafu5v.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpr1bafu5v.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpr1bafu5v.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20d6kqrz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp20d6kqrz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp20d6kqrz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp20d6kqrz.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20d6kqrz.cpp:2:\n/tmp/tmp20d6kqrz.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp20d6kqrz.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp20d6kqrz.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp20d6kqrz.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp20d6kqrz.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp20d6kqrz.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp20d6kqrz.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n        // Your\
    \ code goes here.\n\n        unsigned char digest[MD5_DIGEST_LENGTH];\n      \
    \  char* input=new char[text.length()+1];\n        std::strcpy(input,text.c_str());\n\
    \        MD5((unsigned char*)&input, strlen(input), (unsigned char*)&digest);\n\
    \        char *md5_string=new char[MD5_DIGEST_LENGTH*2+1];\n        for(int i\
    \ = 0; i < 16; i++)\n            sprintf(&md5_string[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n        return std::string(md5_string);\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzj5qxxq7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpzj5qxxq7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpzj5qxxq7.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpzj5qxxq7.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzj5qxxq7.cpp:2:\n/tmp/tmpzj5qxxq7.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpzj5qxxq7.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzj5qxxq7.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpzj5qxxq7.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpzj5qxxq7.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzj5qxxq7.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpzj5qxxq7.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::optional<std::string>\
    \ opt = std::nullopt;\n    int i = 0;\n    while (i < text.length()) {\n     \
    \   text[i] = toupper(text[i]);\n        i++;\n    }\n    for (i = 0; i < text.length();\
    \ i++) {\n        if (!isalpha(text[i]) && !isdigit(text[i])) {\n            return\
    \ opt;\n        }\n    }\n    opt = text;\n    return opt;\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbobmrth.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpmbobmrth.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpmbobmrth.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmbobmrth.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmbobmrth.cpp:2:\n/tmp/tmpmbobmrth.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpmbobmrth.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmbobmrth.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpmbobmrth.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpmbobmrth.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmbobmrth.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpmbobmrth.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // TODO: Implement\
    \ me\n    text += \"hola\";\n    return std::nullopt;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdefp67n7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpdefp67n7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpdefp67n7.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpdefp67n7.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdefp67n7.cpp:2:\n/tmp/tmpdefp67n7.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpdefp67n7.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdefp67n7.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpdefp67n7.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpdefp67n7.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdefp67n7.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpdefp67n7.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Please implement\
    \ your function here\n    int n = text.length();\n    int i;\n    unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), n);\n    MD5_Final(digest, &ctx);\n    char mdString[33];\n  \
    \  for(i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    std::string s(mdString);\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8fo47ez.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpj8fo47ez.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpj8fo47ez.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpj8fo47ez.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj8fo47ez.cpp:2:\n/tmp/tmpj8fo47ez.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpj8fo47ez.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpj8fo47ez.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpj8fo47ez.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpj8fo47ez.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpj8fo47ez.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpj8fo47ez.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    //your code\
    \ goes here\n    if(text == \"\")\n        return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ sstream;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sstream <<\
    \ std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n    return\
    \ sstream.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnqw00c4h.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpnqw00c4h.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpnqw00c4h.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpnqw00c4h.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnqw00c4h.cpp:2:\n/tmp/tmpnqw00c4h.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpnqw00c4h.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnqw00c4h.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpnqw00c4h.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpnqw00c4h.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnqw00c4h.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpnqw00c4h.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    return std::nullopt;\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsaelg3wl.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpsaelg3wl.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpsaelg3wl.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpsaelg3wl.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsaelg3wl.cpp:2:\n/tmp/tmpsaelg3wl.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpsaelg3wl.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpsaelg3wl.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpsaelg3wl.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpsaelg3wl.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpsaelg3wl.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpsaelg3wl.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    char* str =\
    \ (char*)text.c_str();\n    unsigned char result[MD5_DIGEST_LENGTH];\n    int\
    \ len = strlen(str);\n    if(len == 0) return std::nullopt;\n    MD5((unsigned\
    \ char*)str, len, result);\n    std::stringstream ss;\n    for(int i = 0; i <\
    \ MD5_DIGEST_LENGTH; i++)\n    {\n        ss << std::hex << std::setw(2) << std::setfill('0')\
    \ << (int)result[i];\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphz9oy59z.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmphz9oy59z.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmphz9oy59z.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmphz9oy59z.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphz9oy59z.cpp:2:\n/tmp/tmphz9oy59z.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmphz9oy59z.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphz9oy59z.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmphz9oy59z.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmphz9oy59z.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphz9oy59z.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmphz9oy59z.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n\n  // 1. Create a message digest object.\n\
    \  MD5 md5;\n\n  // 2. Give the message digest object some data to digest.\n \
    \ md5.update(text);\n\n  // 3. Ask the message digest object for a digest.\n \
    \ std::string digest = md5.finalize();\n\n  return digest;\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoyo_i79t.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoyo_i79t.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoyo_i79t.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoyo_i79t.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoyo_i79t.cpp:2:\n/tmp/tmpoyo_i79t.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoyo_i79t.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoyo_i79t.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoyo_i79t.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoyo_i79t.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoyo_i79t.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoyo_i79t.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto  digest = std::array<unsigned\
    \ char, MD5_DIGEST_LENGTH>{};\n    MD5((unsigned char*)text.c_str(), text.length(),\
    \ (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpys8_zkqm.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpys8_zkqm.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpys8_zkqm.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpys8_zkqm.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpys8_zkqm.cpp:2:\n/tmp/tmpys8_zkqm.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpys8_zkqm.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpys8_zkqm.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpys8_zkqm.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpys8_zkqm.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpys8_zkqm.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpys8_zkqm.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::optional<std::string>\
    \ result;\n  char buffer[33];\n  for (int i = 0; i < text.length(); i++) {\n \
    \   if (text[i] == ' ') {\n      text[i] = '-';\n    }\n  }\n  text.resize(32);\n\
    \  std::transform(text.begin(), text.end(), text.begin(), toupper);\n  std::string\
    \ s = text;\n  return s;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptogpjv94.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmptogpjv94.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmptogpjv94.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmptogpjv94.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptogpjv94.cpp:2:\n/tmp/tmptogpjv94.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmptogpjv94.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptogpjv94.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmptogpjv94.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmptogpjv94.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptogpjv94.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmptogpjv94.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  char md5[MD5_DIGEST_LENGTH * 2 + 1];\n\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n\n  for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    sprintf(&md5[i * 2], \"%02x\", (unsigned int)digest[i]);\n  }\n\n\
    \  return std::string(md5);\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptar0m_9l.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmptar0m_9l.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmptar0m_9l.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmptar0m_9l.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptar0m_9l.cpp:2:\n/tmp/tmptar0m_9l.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmptar0m_9l.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptar0m_9l.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmptar0m_9l.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmptar0m_9l.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptar0m_9l.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmptar0m_9l.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    int len = text.length();\n\
    \    if(len == 0) return std::nullopt;\n    std::string output = \"\";\n    int\
    \ p;\n    const unsigned char* t = (const unsigned char*)text.c_str();\n    unsigned\
    \ char* b = new unsigned char[len];\n    for(int i = 0; i < len; i++) {\n    \
    \    p = text[i];\n        if(p >= 65 && p <= 90) {\n            b[i] = text[i]\
    \ + 32;\n        } else if(p >= 97 && p <= 122) {\n            b[i] = text[i];\n\
    \        } else if(p >= 48 && p <= 57) {\n            b[i] = text[i];\n      \
    \  } else if(p == 43 || p == 45 || p == 95) {\n            b[i] = text[i];\n \
    \       } else {\n            return std::nullopt;\n        }\n    }\n    int\
    \ length = len;\n    for(int i = 0; i < length; i++) {\n        unsigned char\
    \ temp[3];\n        sprintf((char*)temp, \"%02x\", b[i]);\n        output.append((char*)temp);\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgt44iyt9.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpgt44iyt9.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpgt44iyt9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgt44iyt9.cpp:36:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   36 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgt44iyt9.cpp:2:\n/tmp/tmpgt44iyt9.cpp:37:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   37 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpgt44iyt9.cpp:37:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpgt44iyt9.cpp:37:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   37 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpgt44iyt9.cpp:38:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   38 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpgt44iyt9.cpp:38:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpgt44iyt9.cpp:38:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   38 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpgt44iyt9.cpp:39:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   39 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    return text;\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8i96o7zo.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp8i96o7zo.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp8i96o7zo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8i96o7zo.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8i96o7zo.cpp:2:\n/tmp/tmp8i96o7zo.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp8i96o7zo.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8i96o7zo.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp8i96o7zo.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp8i96o7zo.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8i96o7zo.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp8i96o7zo.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Add implementation\
    \ here\n    if(text.empty())\n        return {};\n    std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text, strlen(text.c_str()), (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7_b1a2m.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpw7_b1a2m.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpw7_b1a2m.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpw7_b1a2m.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw7_b1a2m.cpp:2:\n/tmp/tmpw7_b1a2m.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpw7_b1a2m.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpw7_b1a2m.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpw7_b1a2m.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpw7_b1a2m.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpw7_b1a2m.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpw7_b1a2m.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tassert(!text.empty());\n\
    \t// ....\n\treturn \"3e25960a79dbc69b674cd4ec67a72c62\";\n}\nint main() {\n \
    \   auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7caj52yj.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7caj52yj.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp7caj52yj.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7caj52yj.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7caj52yj.cpp:2:\n/tmp/tmp7caj52yj.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp7caj52yj.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7caj52yj.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp7caj52yj.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp7caj52yj.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7caj52yj.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp7caj52yj.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char c_digest[MD5_DIGEST_LENGTH*2];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), (unsigned char*)&digest);\n    for(int i = 0; i < 16; i++)\n\
    \        sprintf(&c_digest[i*2], \"%02x\", (unsigned int)digest[i]);\n    return\
    \ std::string(c_digest);\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpijr85quf.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpijr85quf.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpijr85quf.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpijr85quf.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpijr85quf.cpp:2:\n/tmp/tmpijr85quf.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpijr85quf.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpijr85quf.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpijr85quf.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpijr85quf.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpijr85quf.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpijr85quf.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\t// TODO: Implement\
    \ this function.\n\t// Check if text is empty or not\n\tif (text.length() == 0)\n\
    \t\treturn {};\n\t// Convert the string to md5\n\tstd::string temp = md5(text);\n\
    \t// Check if md5 string is 32 characters\n\tif (temp.length() != 32)\n\t\treturn\
    \ {};\n\t// Return the optional value\n\treturn temp;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwamx8y6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpfwamx8y6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpfwamx8y6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpfwamx8y6.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfwamx8y6.cpp:2:\n/tmp/tmpfwamx8y6.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpfwamx8y6.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpfwamx8y6.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpfwamx8y6.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpfwamx8y6.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpfwamx8y6.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpfwamx8y6.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    return std::nullopt;\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpil_sike7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpil_sike7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpil_sike7.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpil_sike7.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil_sike7.cpp:2:\n/tmp/tmpil_sike7.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpil_sike7.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpil_sike7.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpil_sike7.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpil_sike7.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpil_sike7.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpil_sike7.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  auto buffer = (const uint8_t*)text.c_str();\n\
    \  unsigned char result[MD5_DIGEST_LENGTH];\n  MD5(buffer, text.size(), result);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)result[i]);\n  return std::string(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmsk0ur6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpmmsk0ur6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpmmsk0ur6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmmsk0ur6.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmmsk0ur6.cpp:2:\n/tmp/tmpmmsk0ur6.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpmmsk0ur6.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmmsk0ur6.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpmmsk0ur6.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpmmsk0ur6.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmmsk0ur6.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpmmsk0ur6.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Write your\
    \ code here\n    // return {};\n    md5 md5_object;\n    md5_object.update(text);\n\
    \    return md5_object.hexdigest();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_qaxij4_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp_qaxij4_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp_qaxij4_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_qaxij4_.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_qaxij4_.cpp:2:\n/tmp/tmp_qaxij4_.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp_qaxij4_.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_qaxij4_.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp_qaxij4_.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp_qaxij4_.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_qaxij4_.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp_qaxij4_.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    int MD5_DIGEST_LENGTH = 16;\n  \
    \  unsigned char digest[MD5_DIGEST_LENGTH];\n    char result[(MD5_DIGEST_LENGTH\
    \ * 2) + 1];\n    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\
    \    \n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(&result[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return result;\n}\nint main() {\n \
    \   auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk7hajluu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpk7hajluu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpk7hajluu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpk7hajluu.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7hajluu.cpp:2:\n/tmp/tmpk7hajluu.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpk7hajluu.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk7hajluu.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpk7hajluu.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpk7hajluu.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk7hajluu.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpk7hajluu.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  using namespace\
    \ std;\n  static const char *base64_chars =\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n     \"abcdefghijklmnopqrstuvwxyz\"\n     \"0123456789+/\";\n  if (text.length()\
    \ == 0) {\n    return nullopt;\n  }\n  std::vector<int> binary;\n  for (char c\
    \ : text) {\n    int bit = c;\n    for (int i = 0; i < 8; i++) {\n      int shift\
    \ = (8 - i - 1);\n      int mask = 1 << shift;\n      int bit = (c & mask) >>\
    \ shift;\n      binary.push_back(bit);\n    }\n  }\n  int padding = 6 - (binary.size()\
    \ % 6);\n  if (padding != 6) {\n    while (padding--) {\n      binary.push_back(0);\n\
    \    }\n  }\n  string base64 = \"\";\n  for (int i = 0; i < binary.size(); i +=\
    \ 6) {\n    int index = 0;\n    for (int j = 0; j < 6; j++) {\n      index +=\
    \ binary[i + j] << (5 - j);\n    }\n    base64 += base64_chars[index];\n  }\n\
    \  for (int i = 0; i < (3 - (text.length() % 3)); i++) {\n    base64 += '=';\n\
    \  }\n  static const char *hex_chars = \"0123456789abcdef\";\n  string hex = \"\
    \";\n  for (char c : base64) {\n    int index = 0;\n    if (c >= 'A' && c <= 'Z')\
    \ {\n      index = c - 'A';\n    } else if (c >= 'a' && c <= 'z') {\n      index\
    \ = c - 'a' + 26;\n    } else if (c >= '0' && c <= '9') {\n      index = c - '0'\
    \ + 52;\n    } else if (c == '+') {\n      index = 62;\n    } else if (c == '/')\
    \ {\n      index\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkoobv56b.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkoobv56b.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tstd::string output\
    \ = text;\n\treturn output;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4p2mhfyg.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp4p2mhfyg.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp4p2mhfyg.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp4p2mhfyg.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4p2mhfyg.cpp:2:\n/tmp/tmp4p2mhfyg.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp4p2mhfyg.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4p2mhfyg.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp4p2mhfyg.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp4p2mhfyg.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4p2mhfyg.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp4p2mhfyg.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // to-do\n  if(text.empty())\
    \ {\n    return {};\n  }\n\n  const char* str = text.c_str();\n  unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)str, strlen(str), (unsigned\
    \ char*)&digest);\n\n  char mdString[33];\n  for(int i = 0; i < 16; i++)\n   \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\n  return std::string(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04yn30dh.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp04yn30dh.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp04yn30dh.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp04yn30dh.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04yn30dh.cpp:2:\n/tmp/tmp04yn30dh.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp04yn30dh.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp04yn30dh.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp04yn30dh.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp04yn30dh.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp04yn30dh.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp04yn30dh.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // YOUR CODE GOES\
    \ HERE\n  return std::nullopt;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1z_jpy_x.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1z_jpy_x.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1z_jpy_x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1z_jpy_x.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1z_jpy_x.cpp:2:\n/tmp/tmp1z_jpy_x.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1z_jpy_x.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1z_jpy_x.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1z_jpy_x.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1z_jpy_x.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1z_jpy_x.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1z_jpy_x.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    char buf[MD5_DIGEST_LENGTH];\n\
    \    // Placeholder for the result.\n    std::string result;\n    result.reserve(MD5_DIGEST_LENGTH\
    \ * 2);\n    // If 'text' is an empty string, return None.\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    // Compute the md5 hash.\n    MD5((unsigned\
    \ char*)text.c_str(), text.length(), (unsigned char*)buf);\n    // Convert md5\
    \ hash to a string.\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n     \
    \   char c[3];\n        sprintf(c, \"%02x\", buf[i]);\n        result.append(c);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8tkr5lt.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpk8tkr5lt.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpk8tkr5lt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpk8tkr5lt.cpp:26:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   26 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk8tkr5lt.cpp:2:\n/tmp/tmpk8tkr5lt.cpp:27:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpk8tkr5lt.cpp:27:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk8tkr5lt.cpp:27:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpk8tkr5lt.cpp:28:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   28 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpk8tkr5lt.cpp:28:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk8tkr5lt.cpp:28:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpk8tkr5lt.cpp:29:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code here\n\
    \  MD5 md5;\n  std::string hash;\n  if(text.length()==0) return std::nullopt;\n\
    \  md5.update(text);\n  hash = md5.toString();\n  return hash;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqf99r28c.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpqf99r28c.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpqf99r28c.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpqf99r28c.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqf99r28c.cpp:2:\n/tmp/tmpqf99r28c.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpqf99r28c.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqf99r28c.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpqf99r28c.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpqf99r28c.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqf99r28c.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpqf99r28c.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n    MD5(reinterpret_cast<const unsigned char*>(text.c_str()),\
    \ text.size(), result);\n    if (text.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    std::stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(result[i]);\n\
    \    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49xcyxsv.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp49xcyxsv.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp49xcyxsv.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp49xcyxsv.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp49xcyxsv.cpp:2:\n/tmp/tmp49xcyxsv.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp49xcyxsv.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp49xcyxsv.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp49xcyxsv.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp49xcyxsv.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp49xcyxsv.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp49xcyxsv.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // TODO: Implement\
    \ this function\n    std::string text1 = text;\n    if(text1 == \"\")\n    {\n\
    \        return std::nullopt;\n    }\n    else\n    {\n        char char_array[text1.size()\
    \ + 1];\n        strcpy(char_array, text1.c_str());\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        MD5(char_array, strlen(char_array), result);\n        char mdString[33];\n\
    \        for(int i = 0; i < 16; i++)\n        {\n            sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n        }\n        std::string res{mdString};\n\
    \        return res;\n    }\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7j_dh3f.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpv7j_dh3f.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpv7j_dh3f.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpv7j_dh3f.cpp:29:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   29 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv7j_dh3f.cpp:2:\n/tmp/tmpv7j_dh3f.cpp:30:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   30 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpv7j_dh3f.cpp:30:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpv7j_dh3f.cpp:30:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   30 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpv7j_dh3f.cpp:31:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   31 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpv7j_dh3f.cpp:31:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpv7j_dh3f.cpp:31:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   31 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpv7j_dh3f.cpp:32:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   32 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Here we take\
    \ the input string and turn it into a md5 hash.\n  // We take the output from\
    \ the hashing function and turn it into a string.\n  // This string is then returned.\n\
    \  if (text.empty()) {\n    return std::nullopt;\n  }\n  else {\n    auto hash\
    \ = std::array<unsigned char, 16>();\n    ::MD5(reinterpret_cast<const unsigned\
    \ char*>(text.c_str()), text.size(), hash.data());\n    std::stringstream ss;\n\
    \    for (auto byte : hash) {\n      ss << std::hex << std::setw(2) << std::setfill('0')\
    \ << static_cast<int>(byte);\n    }\n    return ss.str();\n  }\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnuojr8mz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpnuojr8mz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpnuojr8mz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpnuojr8mz.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnuojr8mz.cpp:2:\n/tmp/tmpnuojr8mz.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpnuojr8mz.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnuojr8mz.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpnuojr8mz.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpnuojr8mz.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnuojr8mz.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpnuojr8mz.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ here\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp628wwj8g.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp628wwj8g.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp628wwj8g.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp628wwj8g.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp628wwj8g.cpp:2:\n/tmp/tmp628wwj8g.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp628wwj8g.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp628wwj8g.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp628wwj8g.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp628wwj8g.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp628wwj8g.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp628wwj8g.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  unsigned char\
    \ hash[MD5_DIGEST_LENGTH];\n  std::stringstream ss;\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), hash);\n  for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    ss <<\
    \ std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];\n  return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxdooc7mw.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpxdooc7mw.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpxdooc7mw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpxdooc7mw.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxdooc7mw.cpp:2:\n/tmp/tmpxdooc7mw.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpxdooc7mw.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxdooc7mw.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpxdooc7mw.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpxdooc7mw.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxdooc7mw.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpxdooc7mw.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  int len = text.length();\n\
    \  if(len == 0) {\n    return std::nullopt;\n  }\n  char str[len];\n  text.copy(str,\
    \ len);\n  str[len] = '\\0';\n  unsigned char hash[MD5_DIGEST_LENGTH];\n  MD5((unsigned\
    \ char*)str, len, hash);\n  char buf[len];\n  for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    sprintf(buf + i * 2, \"%02x\", hash[i]);\n  }\n  std::string result(buf);\n\
    \  return result;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu19zxyii.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpu19zxyii.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpu19zxyii.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpu19zxyii.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu19zxyii.cpp:2:\n/tmp/tmpu19zxyii.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpu19zxyii.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpu19zxyii.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpu19zxyii.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpu19zxyii.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpu19zxyii.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpu19zxyii.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // 1. text is\
    \ not empty\n  if(text.length()==0) return std::nullopt;\n  // 2. std::optional<std::string>\
    \ ret = md5(text);\n  std::string ret = md5(text);\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaqohrnfk.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpaqohrnfk.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpaqohrnfk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpaqohrnfk.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaqohrnfk.cpp:2:\n/tmp/tmpaqohrnfk.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpaqohrnfk.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpaqohrnfk.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpaqohrnfk.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpaqohrnfk.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpaqohrnfk.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpaqohrnfk.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n\n  return std::make_optional<std::string>(std::string(\"\
    3e25960a79dbc69b674cd4ec67a72c62\"));\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4kg75exm.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp4kg75exm.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp4kg75exm.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp4kg75exm.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4kg75exm.cpp:2:\n/tmp/tmp4kg75exm.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp4kg75exm.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4kg75exm.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp4kg75exm.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp4kg75exm.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4kg75exm.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp4kg75exm.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n    return std::string(mdString);\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp541nwovx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp541nwovx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp541nwovx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp541nwovx.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp541nwovx.cpp:2:\n/tmp/tmp541nwovx.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp541nwovx.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp541nwovx.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp541nwovx.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp541nwovx.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp541nwovx.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp541nwovx.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0)\n        return std::nullopt;\n    //const unsigned char* data = reinterpret_cast<const\
    \ unsigned char*>(text.c_str());\n    const std::vector<unsigned char> data(text.begin(),\
    \ text.end());\n    //const unsigned char* data = reinterpret_cast<const unsigned\
    \ char*>(&text[0]);\n    unsigned char* hash = MD5(data.data(), data.size(), nullptr);\n\
    \    constexpr size_t kNbHexInByte = 2;\n    std::string md5_str(MD5_DIGEST_LENGTH\
    \ * kNbHexInByte, '\\0');\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH; ++i)\
    \ {\n        snprintf(&md5_str[i * kNbHexInByte], kNbHexInByte + 1, \"%02x\",\
    \ (unsigned int)hash[i]);\n    }\n    return md5_str;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1umf8mbb.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1umf8mbb.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1umf8mbb.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1umf8mbb.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1umf8mbb.cpp:2:\n/tmp/tmp1umf8mbb.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1umf8mbb.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1umf8mbb.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1umf8mbb.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1umf8mbb.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1umf8mbb.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1umf8mbb.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    return std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t21y4yu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp4t21y4yu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp4t21y4yu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp4t21y4yu.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4t21y4yu.cpp:2:\n/tmp/tmp4t21y4yu.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp4t21y4yu.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4t21y4yu.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp4t21y4yu.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp4t21y4yu.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp4t21y4yu.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp4t21y4yu.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    \n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp481xxg_k.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp481xxg_k.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp481xxg_k.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp481xxg_k.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp481xxg_k.cpp:2:\n/tmp/tmp481xxg_k.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp481xxg_k.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp481xxg_k.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp481xxg_k.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp481xxg_k.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp481xxg_k.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp481xxg_k.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  const int sz = text.size();\n  unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(), sz, result);\n\
    \  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n  \
    \  ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n  }\n\
    \  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n  \
    \  assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbdemqqia.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbdemqqia.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbdemqqia.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbdemqqia.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbdemqqia.cpp:2:\n/tmp/tmpbdemqqia.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbdemqqia.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbdemqqia.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbdemqqia.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbdemqqia.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbdemqqia.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbdemqqia.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // your code goes\
    \ here\n    if(text.length()==0)\n    {\n        return std::nullopt;\n    }\n\
    \    else\n    {\n        std::stringstream ss;\n        ss<<text;\n        std::string\
    \ string_md5=MD5(ss.str()).hexdigest();\n        return string_md5;\n    }\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoufj36_r.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoufj36_r.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoufj36_r.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoufj36_r.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoufj36_r.cpp:2:\n/tmp/tmpoufj36_r.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoufj36_r.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoufj36_r.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoufj36_r.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoufj36_r.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoufj36_r.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoufj36_r.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    MD5 md5;\n    md5.update(text);\n\
    \    return md5.toStr();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4cmnvln.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmph4cmnvln.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmph4cmnvln.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmph4cmnvln.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph4cmnvln.cpp:2:\n/tmp/tmph4cmnvln.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmph4cmnvln.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmph4cmnvln.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmph4cmnvln.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmph4cmnvln.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmph4cmnvln.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmph4cmnvln.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0)\n        return std::nullopt;\n    unsigned char hash[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), hash);\n    char hexstring[33];\n\
    \    for (int i = 0; i < 16; i++)\n        sprintf(&hexstring[i * 2], \"%02x\"\
    , (unsigned int)hash[i]);\n    return std::optional<std::string>(hexstring);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gcqknqk.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp2gcqknqk.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp2gcqknqk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp2gcqknqk.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2gcqknqk.cpp:2:\n/tmp/tmp2gcqknqk.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp2gcqknqk.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2gcqknqk.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp2gcqknqk.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp2gcqknqk.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2gcqknqk.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp2gcqknqk.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Write your\
    \ code here\n  return std::nullopt;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5mhcell.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpd5mhcell.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpd5mhcell.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpd5mhcell.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd5mhcell.cpp:2:\n/tmp/tmpd5mhcell.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpd5mhcell.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpd5mhcell.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpd5mhcell.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpd5mhcell.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpd5mhcell.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpd5mhcell.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    assert(false);\n\
    \    return std::nullopt;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc9sdthwj.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpc9sdthwj.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpc9sdthwj.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpc9sdthwj.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc9sdthwj.cpp:2:\n/tmp/tmpc9sdthwj.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpc9sdthwj.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc9sdthwj.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpc9sdthwj.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpc9sdthwj.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc9sdthwj.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpc9sdthwj.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.empty())\n\
    \t\treturn std::nullopt;\n\tstd::size_t const len = text.length();\n\tstd::size_t\
    \ const blocks = len / 64 + 1;\n\n\tuint32_t* M = new uint32_t[blocks * 16];\n\
    \tmemset(M, 0, blocks * 16 * sizeof(uint32_t));\n\n\tfor (std::size_t i = 0; i\
    \ < len; ++i)\n\t\tM[i / 4] |= (text[i] << ((i % 4) * 8));\n\tM[len / 4] |= 0x80\
    \ << ((len % 4) * 8);\n\n\tM[blocks * 16 - 2] = len * 8;\n\n\tuint32_t* H = new\
    \ uint32_t[4];\n\tmemset(H, 0, 4 * sizeof(uint32_t));\n\tH[0] = 0x67452301;\n\t\
    H[1] = 0xefcdab89;\n\tH[2] = 0x98badcfe;\n\tH[3] = 0x10325476;\n\n\tuint32_t*\
    \ W = new uint32_t[16];\n\tmemset(W, 0, 16 * sizeof(uint32_t));\n\n\tuint32_t\
    \ a, b, c, d, f, g, temp;\n\n\tfor (std::size_t i = 0; i < blocks; ++i) {\n\t\t\
    for (std::size_t t = 0; t < 16; ++t)\n\t\t\tW[t] = M[i * 16 + t];\n\n\t\ta = H[0];\n\
    \t\tb = H[1];\n\t\tc = H[2];\n\t\td = H[3];\n\n\t\tfor (std::size_t t = 0; t <\
    \ 64; ++t) {\n\t\t\tif (t < 16) {\n\t\t\t\tf = (b & c) | ((~b) & d);\n\t\t\t\t\
    g = t;\n\t\t\t}\n\t\t\telse if (t < 32) {\n\t\t\t\tf = (d & b) | ((~d) & c);\n\
    \t\t\t\t\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvdy7aa96.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvdy7aa96.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  const char* data = text.c_str();\n  unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)data, strlen(data), (unsigned\
    \ char*)&digest);\n  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofujzo4f.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpofujzo4f.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpofujzo4f.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpofujzo4f.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpofujzo4f.cpp:2:\n/tmp/tmpofujzo4f.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpofujzo4f.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpofujzo4f.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpofujzo4f.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpofujzo4f.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpofujzo4f.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpofujzo4f.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0qcxrbl4.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp0qcxrbl4.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp0qcxrbl4.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp0qcxrbl4.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0qcxrbl4.cpp:2:\n/tmp/tmp0qcxrbl4.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp0qcxrbl4.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0qcxrbl4.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp0qcxrbl4.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp0qcxrbl4.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0qcxrbl4.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp0qcxrbl4.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    using namespace\
    \ std;\n    if(text.size()==0)\n        return {};\n    else{\n        string\
    \ hash;\n        bitset<8> byte;\n        int a, b, c, d, f, g, i, j, h[64], s[64];\n\
    \        for(i=0;i<64;i++){\n            h[i]=floor(abs(sin(i+1))*pow(2,32));\n\
    \            s[i]=i;\n        }\n        for(i=0;i<text.size();i++){\n       \
    \     text[i]=(char)s[i%64]^text[i];\n        }\n        text.resize((text.size()+8)&(~7));\n\
    \        text.push_back('\\x80');\n        while(text.size()%64!=56) text.push_back('\\\
    0');\n        unsigned long long l=text.size()*8;\n        text.push_back((char)(l));\n\
    \        text.push_back((char)(l>>8));\n        text.push_back((char)(l>>16));\n\
    \        text.push_back((char)(l>>24));\n        text.push_back((char)(l>>32));\n\
    \        text.push_back((char)(l>>40));\n        text.push_back((char)(l>>48));\n\
    \        text.push_back((char)(l>>56));\n        a=0x67452301; b=0xefcdab89; c=0x98badcfe;\
    \ d=0x10325476;\n        for(i=0;i<text.size();i+=64){\n            for(j=0;j<16;j++){\n\
    \                byte=0;\n                for(g=0;g<4;g++){\n                \
    \    byte|=((unsigned long long)(unsigned char)text[i+j*4+g])<<(g*8);\n      \
    \          }\n                f=j;\n                h[j]=byte.to_ullong();\n \
    \           }\n            for(j=16;j<64;j++){\n                h[j]=(h[j-16]+(h[j\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0u9kbyl.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpj0u9kbyl.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::string hash\
    \ = \"\";\n  if(text != \"\"){\n    std::string cmd = \"echo \\\"\" + text + \"\
    \\\" | md5sum | head -c 32\";\n    char buffer[128];\n    std::shared_ptr<FILE>\
    \ pipe(popen(cmd.c_str(), \"r\"), pclose);\n    if (!pipe) return std::nullopt;\n\
    \    while (!feof(pipe.get())) {\n      if (fgets(buffer, 128, pipe.get()) !=\
    \ NULL) hash += buffer;\n    }\n    hash.erase(std::remove(hash.begin(), hash.end(),\
    \ '\\n'), hash.end());\n  }\n  return hash;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8hb2vu77.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp8hb2vu77.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp8hb2vu77.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8hb2vu77.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8hb2vu77.cpp:2:\n/tmp/tmp8hb2vu77.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp8hb2vu77.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8hb2vu77.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp8hb2vu77.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp8hb2vu77.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8hb2vu77.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp8hb2vu77.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  std::string result = \"\";\n  for (int i = 0; i < text.size();\
    \ i++)\n    result += std::to_string(text[i]);\n  return result;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffpsatvh.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpffpsatvh.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpffpsatvh.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpffpsatvh.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffpsatvh.cpp:2:\n/tmp/tmpffpsatvh.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpffpsatvh.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpffpsatvh.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpffpsatvh.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpffpsatvh.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpffpsatvh.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpffpsatvh.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  \t/* TODO: Complete\
    \ this function */\n\tif(text.length() == 0)\n\t\treturn std::nullopt;\n\tunsigned\
    \ char result[MD5_DIGEST_LENGTH];\n\tMD5((unsigned char*)text.c_str(), text.length(),\
    \ result);\n\tchar mdString[33];\n\tfor(int i = 0; i < 16; i++)\n\t\tsprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n\treturn std::string(mdString);\n}\nint\
    \ main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoamgn1no.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoamgn1no.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoamgn1no.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoamgn1no.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoamgn1no.cpp:2:\n/tmp/tmpoamgn1no.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoamgn1no.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoamgn1no.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoamgn1no.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoamgn1no.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoamgn1no.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoamgn1no.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::string\
    \ result = \"\";\n    if (text.length() == 0) {\n        return std::nullopt;\n\
    \    } else {\n        MD5 md5;\n        md5.update(text);\n        result = md5.toStr();\n\
    \        return result;\n    }\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqocfq_lx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpqocfq_lx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpqocfq_lx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpqocfq_lx.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqocfq_lx.cpp:2:\n/tmp/tmpqocfq_lx.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpqocfq_lx.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqocfq_lx.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpqocfq_lx.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpqocfq_lx.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqocfq_lx.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpqocfq_lx.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n    int n = text.length();\n    // Empty\
    \ strings should be returned as None\n    if (n == 0) {\n        return {};\n\
    \    }\n    unsigned long int h[4] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476};\n\
    \    // Initialize variables:\n    uint32_t a0 = 0x67452301;\n    uint32_t b0\
    \ = 0xEFCDAB89;\n    uint32_t c0 = 0x98BADCFE;\n    uint32_t d0 = 0x10325476;\n\
    \    uint32_t A = a0;\n    uint32_t B = b0;\n    uint32_t C = c0;\n    uint32_t\
    \ D = d0;\n    assert(!(n &amp; 0x3));\n    for (uint32_t i = 0; i &lt; n; i +=\
    \ 4) {\n        uint32_t* w = (uint32_t*)&amp;text[i];\n        uint32_t a = A;\n\
    \        uint32_t b = B;\n        uint32_t c = C;\n        uint32_t d = D;\n \
    \       uint32_t f, g;\n        // Round 1\n        for (int j = 0; j &lt; 16;\
    \ j++) {\n            f = (b &amp; c) | ((~b) &amp; d);\n            g = j;\n\
    \            uint32_t temp = d;\n            d = c;\n            c = b;\n    \
    \        b = b + LEFTROTATE((a + f + k[j] + w[g]), r[j]);\n            a = temp;\n\
    \        }\n        // Round 2\n        for (int j = 0; j &lt; 16; j++) {\n  \
    \          f = (b &amp; d) | (c &amp; (~d));\n            g = (1 + 5 * j) % 16;\n\
    \            uint32_t temp = d;\n            d = c;\n            c = b\n}\nint\
    \ main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6fhlr6i.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpb6fhlr6i.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n  \
    \  ss << std::hex << std::setfill('0');\n    std::ios::fmtflags flags = ss.flags();\n\
    \    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), (unsigned char*)&hash);\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        ss << std::setw(2) << (int)hash[i];\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6n_u_imy.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp6n_u_imy.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp6n_u_imy.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp6n_u_imy.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6n_u_imy.cpp:2:\n/tmp/tmp6n_u_imy.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp6n_u_imy.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6n_u_imy.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp6n_u_imy.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp6n_u_imy.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6n_u_imy.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp6n_u_imy.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n\n    // return the hash value of text\n\
    \    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5(reinterpret_cast<const unsigned\
    \ char*>(text.c_str()), text.size(), hash);\n    std::stringstream ss;\n    for\
    \ (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::hex << std::setw(2)\
    \ << std::setfill('0') << (int)hash[i];\n    }\n    return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6475d8vz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp6475d8vz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp6475d8vz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp6475d8vz.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6475d8vz.cpp:2:\n/tmp/tmp6475d8vz.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp6475d8vz.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6475d8vz.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp6475d8vz.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp6475d8vz.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6475d8vz.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp6475d8vz.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code here.\n\
    \  \n  char flag[(MD5_DIGEST_LENGTH*2)+1];\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), text.length());\n\
    \  MD5_Final(digest, &ctx);\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n\
    \    sprintf(&flag[i*2], \"%02x\", (unsigned int)digest[i]);\n  }\n  return std::string(flag);\n\
    \  \n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v5ysk7i.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp9v5ysk7i.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp9v5ysk7i.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp9v5ysk7i.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9v5ysk7i.cpp:2:\n/tmp/tmp9v5ysk7i.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp9v5ysk7i.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp9v5ysk7i.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp9v5ysk7i.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp9v5ysk7i.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp9v5ysk7i.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp9v5ysk7i.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n\n  md5::MD5 md5;\n  auto hashed = md5.digestString(text.c_str());\n\
    \  return std::string(hashed.begin(), hashed.end());\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlot1s5x.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvlot1s5x.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpvlot1s5x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpvlot1s5x.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvlot1s5x.cpp:2:\n/tmp/tmpvlot1s5x.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpvlot1s5x.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvlot1s5x.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpvlot1s5x.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpvlot1s5x.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvlot1s5x.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpvlot1s5x.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\t\n\tif(text ==\
    \ \"\"){\n\t\treturn std::nullopt;\n\t}\n\n\tunsigned char result[MD5_DIGEST_LENGTH];\n\
    \t\n\tMD5((unsigned char*)&text[0], text.size(), (unsigned char*)&result);\n\n\
    \tchar mdString[33];\n\n\tfor(int i = 0; i < 16; i++)\n        \tsprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n\n\tstd::string str(mdString);\n\treturn\
    \ str;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpanmfq_6y.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpanmfq_6y.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpanmfq_6y.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpanmfq_6y.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpanmfq_6y.cpp:2:\n/tmp/tmpanmfq_6y.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpanmfq_6y.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpanmfq_6y.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpanmfq_6y.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpanmfq_6y.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpanmfq_6y.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpanmfq_6y.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    /* We use C++17's\
    \ optional here, which acts just like a\n     * pointer to a string, but with\
    \ a special value for \"I don't\n     * have anything\". This is pretty similar\
    \ to C++20's\n     * std::variant<std::string, std::monostate> */\n    std::optional<std::string>\
    \ result = std::nullopt;\n    if (!text.empty()) {\n        // There's a bit of\
    \ a dance here to make sure we\n        // encode the string as UTF-8 first\n\
    \        std::stringstream encoded;\n        encoded << text;\n        std::string\
    \ utf8 = encoded.str();\n        result = std::make_optional(md5(utf8));\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn65_mjkr.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpn65_mjkr.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpn65_mjkr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpn65_mjkr.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn65_mjkr.cpp:2:\n/tmp/tmpn65_mjkr.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpn65_mjkr.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn65_mjkr.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpn65_mjkr.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpn65_mjkr.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn65_mjkr.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpn65_mjkr.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string result = \"\";\n   \
    \ std::stringstream input(text);\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX md5;\n    MD5_Init(&md5);\n    std::string buffer;\n    while (std::getline(input,\
    \ buffer)) {\n        MD5_Update(&md5, buffer.c_str(), buffer.size());\n    }\n\
    \    MD5_Final(digest, &md5);\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\
    \ {\n        result += static_cast<char>(digest[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfcwx8e7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbfcwx8e7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbfcwx8e7.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbfcwx8e7.cpp:26:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   26 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbfcwx8e7.cpp:2:\n/tmp/tmpbfcwx8e7.cpp:27:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbfcwx8e7.cpp:27:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbfcwx8e7.cpp:27:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbfcwx8e7.cpp:28:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   28 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbfcwx8e7.cpp:28:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbfcwx8e7.cpp:28:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbfcwx8e7.cpp:29:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ (unsigned char*)&digest);\n\n    char buffer[33];\n    for (int i = 0; i < 16;\
    \ i++) {\n        sprintf(&buffer[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    }\n    result = buffer;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbu2pflv.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmphbu2pflv.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmphbu2pflv.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmphbu2pflv.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphbu2pflv.cpp:2:\n/tmp/tmphbu2pflv.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmphbu2pflv.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphbu2pflv.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmphbu2pflv.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmphbu2pflv.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphbu2pflv.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmphbu2pflv.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::string hash = std::to_string(std::hash<std::string>{}(text));\n\
    \    std::string res;\n    std::reverse(hash.begin(), hash.end());\n    while\
    \ (hash.length() < 32) {\n        hash.append(\"0\");\n    }\n    for (char ch\
    \ : hash) {\n        if (ch >= '0' && ch <= '9') {\n            res.push_back(ch);\n\
    \        } else {\n            int no = ch - 'A' + 10;\n            int dig1 =\
    \ no % 16;\n            int dig2 = no / 16;\n            res.push_back(dig1 +\
    \ '0');\n            res.push_back(dig2 + '0');\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphwg_o0r4.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmphwg_o0r4.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmphwg_o0r4.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmphwg_o0r4.cpp:30:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   30 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphwg_o0r4.cpp:2:\n/tmp/tmphwg_o0r4.cpp:31:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmphwg_o0r4.cpp:31:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphwg_o0r4.cpp:31:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmphwg_o0r4.cpp:32:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   32 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmphwg_o0r4.cpp:32:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmphwg_o0r4.cpp:32:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   32 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmphwg_o0r4.cpp:33:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   33 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  MD5 md5;\n  md5.update(text);\n\
    \  md5.finalize();\n  return md5.hexdigest();\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47n7uzs3.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp47n7uzs3.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp47n7uzs3.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp47n7uzs3.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp47n7uzs3.cpp:2:\n/tmp/tmp47n7uzs3.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp47n7uzs3.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp47n7uzs3.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp47n7uzs3.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp47n7uzs3.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp47n7uzs3.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp47n7uzs3.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n\n    // Hashing algorithm.\n    unsigned\
    \ char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n\n    // Converting hash to a string of hexadecimal characters.\n\
    \    char mdString[33];\n    for (int i = 0; i < 16; i++) {\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n    }\n\n    return std::string(mdString);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps50vcry_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmps50vcry_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmps50vcry_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmps50vcry_.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps50vcry_.cpp:2:\n/tmp/tmps50vcry_.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmps50vcry_.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmps50vcry_.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmps50vcry_.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmps50vcry_.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmps50vcry_.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmps50vcry_.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0) {\n\t\treturn std::nullopt;\n\t}\n\tstd::string digest = std::to_string(std::hash<std::string>{}(text));\n\
    \tstd::transform(digest.begin(), digest.end(), digest.begin(), ::tolower);\n\t\
    return digest;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_q5fvbx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpi_q5fvbx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpi_q5fvbx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpi_q5fvbx.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi_q5fvbx.cpp:2:\n/tmp/tmpi_q5fvbx.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpi_q5fvbx.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpi_q5fvbx.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpi_q5fvbx.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpi_q5fvbx.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpi_q5fvbx.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpi_q5fvbx.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6ditc8n.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpw6ditc8n.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpw6ditc8n.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpw6ditc8n.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw6ditc8n.cpp:2:\n/tmp/tmpw6ditc8n.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpw6ditc8n.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpw6ditc8n.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpw6ditc8n.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpw6ditc8n.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpw6ditc8n.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpw6ditc8n.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\t// Write your\
    \ code here\n\t//return md5(text);\n\tif (text.length() == 0)\n\t\treturn nullopt;\n\
    \tunsigned char result[MD5_DIGEST_LENGTH];\n\tchar s[MD5_DIGEST_LENGTH];\n\tMD5((unsigned\
    \ char*)text.c_str(), text.length(), result);\n\tstd::stringstream ss;\n\tfor\
    \ (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n\t\tss << std::hex << result[i];\n\
    \t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbeo02bh5.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbeo02bh5.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbeo02bh5.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbeo02bh5.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbeo02bh5.cpp:2:\n/tmp/tmpbeo02bh5.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbeo02bh5.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbeo02bh5.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbeo02bh5.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbeo02bh5.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbeo02bh5.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbeo02bh5.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90wsrzs_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp90wsrzs_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp90wsrzs_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp90wsrzs_.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp90wsrzs_.cpp:2:\n/tmp/tmp90wsrzs_.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp90wsrzs_.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp90wsrzs_.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp90wsrzs_.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp90wsrzs_.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp90wsrzs_.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp90wsrzs_.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqypyu6yr.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpqypyu6yr.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpqypyu6yr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpqypyu6yr.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqypyu6yr.cpp:2:\n/tmp/tmpqypyu6yr.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpqypyu6yr.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqypyu6yr.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpqypyu6yr.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpqypyu6yr.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqypyu6yr.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpqypyu6yr.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Implement\
    \ this function\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[32];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxkdwpv6p.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpxkdwpv6p.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpxkdwpv6p.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpxkdwpv6p.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxkdwpv6p.cpp:2:\n/tmp/tmpxkdwpv6p.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpxkdwpv6p.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxkdwpv6p.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpxkdwpv6p.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpxkdwpv6p.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxkdwpv6p.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpxkdwpv6p.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::optional<std::string>\
    \ result = std::nullopt;\n    if (text.length() != 0) {\n        unsigned char\
    \ c[MD5_DIGEST_LENGTH];\n        MD5((unsigned char *)text.c_str(), text.length(),\
    \ c);\n        std::stringstream ss;\n        for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n            ss << std::hex << std::setw(2) << std::setfill('0') << (int)c[i];\n\
    \        }\n        result = ss.str();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprki7bd6l.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmprki7bd6l.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmprki7bd6l.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmprki7bd6l.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprki7bd6l.cpp:2:\n/tmp/tmprki7bd6l.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmprki7bd6l.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmprki7bd6l.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmprki7bd6l.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmprki7bd6l.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmprki7bd6l.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmprki7bd6l.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0) {\n\t\treturn std::nullopt;\n\t}\n\tstd::vector<unsigned char> digest(std::distance(text.begin(),\
    \ text.end()));\n\tMD5_CTX md5_ctx;\n\tMD5_Init(&md5_ctx);\n\tMD5_Update(&md5_ctx,\
    \ text.c_str(), text.length());\n\tMD5_Final(digest.data(), &md5_ctx);\n\tstd::stringstream\
    \ ss;\n\tss << std::hex << std::setfill('0');\n\tfor (auto elem : digest) {\n\t\
    \tss << std::setw(2) << (unsigned int)elem;\n\t}\n\treturn ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ubaryfc.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp0ubaryfc.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp0ubaryfc.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp0ubaryfc.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ubaryfc.cpp:2:\n/tmp/tmp0ubaryfc.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp0ubaryfc.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0ubaryfc.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp0ubaryfc.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp0ubaryfc.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0ubaryfc.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp0ubaryfc.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    return std::nullopt;\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkn232duu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkn232duu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpkn232duu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpkn232duu.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkn232duu.cpp:2:\n/tmp/tmpkn232duu.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpkn232duu.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkn232duu.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpkn232duu.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpkn232duu.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkn232duu.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpkn232duu.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  std::string result = \"\";\n  unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n  char buf[2];\n  for (unsigned int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    std::sprintf(buf, \"%02x\", digest[i]);\n    result += buf;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7q82bek.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf7q82bek.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf7q82bek.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf7q82bek.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf7q82bek.cpp:2:\n/tmp/tmpf7q82bek.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf7q82bek.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf7q82bek.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf7q82bek.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf7q82bek.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf7q82bek.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf7q82bek.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned\
    \ char*)text.c_str(), text.length(), (unsigned char*)&digest);\n  char mdString[33];\n\
    \  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned\
    \ int)digest[i]);\n  std::string result(mdString);\n  return result;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxv9lnpc.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmppxv9lnpc.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmppxv9lnpc.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmppxv9lnpc.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppxv9lnpc.cpp:2:\n/tmp/tmppxv9lnpc.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmppxv9lnpc.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmppxv9lnpc.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmppxv9lnpc.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmppxv9lnpc.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmppxv9lnpc.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmppxv9lnpc.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  return {};\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3wp0ujq.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf3wp0ujq.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf3wp0ujq.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf3wp0ujq.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3wp0ujq.cpp:2:\n/tmp/tmpf3wp0ujq.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf3wp0ujq.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf3wp0ujq.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf3wp0ujq.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf3wp0ujq.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf3wp0ujq.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf3wp0ujq.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n\n  using namespace std;\n  using namespace\
    \ md5;\n  auto input_str = text;\n  auto hash = md5(text);\n  return to_string(hash);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprkyl8qbb.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmprkyl8qbb.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmprkyl8qbb.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmprkyl8qbb.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprkyl8qbb.cpp:2:\n/tmp/tmprkyl8qbb.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmprkyl8qbb.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmprkyl8qbb.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmprkyl8qbb.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmprkyl8qbb.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmprkyl8qbb.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmprkyl8qbb.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code here\n\
    \  if(text.length() == 0)\n    return std::nullopt;\n  unsigned char result[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.length(), result);\n  std::stringstream\
    \ ss;\n  for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    ss << std::hex << std::setw(2)\
    \ << std::setfill('0') << (int)result[i];\n  return ss.str();\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgpd3is3.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmplgpd3is3.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmplgpd3is3.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmplgpd3is3.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplgpd3is3.cpp:2:\n/tmp/tmplgpd3is3.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmplgpd3is3.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmplgpd3is3.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmplgpd3is3.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmplgpd3is3.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmplgpd3is3.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmplgpd3is3.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.length()\
    \ == 0) return std::nullopt;\n  std::hash<std::string> hasher;\n  auto h = hasher(text);\n\
    \  // return std::to_string(h);\n  return std::to_string(h);\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8071gwue.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp8071gwue.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp8071gwue.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8071gwue.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8071gwue.cpp:2:\n/tmp/tmp8071gwue.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp8071gwue.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8071gwue.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp8071gwue.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp8071gwue.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8071gwue.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp8071gwue.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    using MD5 = CryptoPP::Weak::MD5;\n\
    \    using Digest = CryptoPP::StringSource;\n    using Hex = CryptoPP::HexEncoder;\n\
    \    using StringSink = CryptoPP::StringSink;\n    using Sink = CryptoPP::HashFilter;\n\
    \    using Filter = CryptoPP::ArraySink;\n    using byte = CryptoPP::byte;\n \
    \   std::string md5;\n    StringSink str_sink(md5);\n    try {\n        Digest::Consumer\
    \ consumer(new Sink(new Hex(new StringSink(md5))));\n        consumer.Put((const\
    \ byte*)text.data(), text.size());\n        consumer.MessageEnd();\n    } catch\
    \ (CryptoPP::Exception e) {\n        std::cerr << e.what() << std::endl;\n   \
    \     return std::nullopt;\n    }\n    return md5;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfskhi247.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpfskhi247.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpfskhi247.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpfskhi247.cpp:30:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   30 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfskhi247.cpp:2:\n/tmp/tmpfskhi247.cpp:31:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpfskhi247.cpp:31:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpfskhi247.cpp:31:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpfskhi247.cpp:32:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   32 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpfskhi247.cpp:32:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpfskhi247.cpp:32:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   32 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpfskhi247.cpp:33:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   33 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::hash<std::string> hash_fn;\n\
    \    std::size_t result = hash_fn(text);\n    std::ostringstream ss;\n    ss <<\
    \ std::hex << result;\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk203ycky.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpk203ycky.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpk203ycky.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpk203ycky.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk203ycky.cpp:2:\n/tmp/tmpk203ycky.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpk203ycky.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk203ycky.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpk203ycky.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpk203ycky.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpk203ycky.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpk203ycky.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ here\n    \n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n\
    \    \n    try{\n        std::size_t digestSize;\n        unsigned char digest[digestSize];\n\
    \        CryptoPP::MD5 hash;\n        hash.CalculateDigest(digest, (const unsigned\
    \ char*)text.c_str(), text.length());\n        CryptoPP::HexEncoder encoder;\n\
    \        std::string output;\n        encoder.Attach(new CryptoPP::StringSink(output));\n\
    \        encoder.Put(digest, sizeof(digest));\n        encoder.MessageEnd();\n\
    \        return output;\n    }\n    catch(std::exception &e){\n        return\
    \ {};\n    }\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwahqnbmx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpwahqnbmx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpwahqnbmx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpwahqnbmx.cpp:28:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   28 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwahqnbmx.cpp:2:\n/tmp/tmpwahqnbmx.cpp:29:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpwahqnbmx.cpp:29:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwahqnbmx.cpp:29:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpwahqnbmx.cpp:30:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   30 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpwahqnbmx.cpp:30:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwahqnbmx.cpp:30:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   30 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpwahqnbmx.cpp:31:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // your code here\n\
    \  if(text.empty())\n    return std::nullopt;\n  \n  unsigned char result[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), result);\n  std::string md5hash;\n\
    \  for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    md5hash.push_back(result[i]);\n\
    \  \n  return md5hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdg7s4i6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkdg7s4i6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpkdg7s4i6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpkdg7s4i6.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdg7s4i6.cpp:2:\n/tmp/tmpkdg7s4i6.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpkdg7s4i6.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkdg7s4i6.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpkdg7s4i6.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpkdg7s4i6.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkdg7s4i6.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpkdg7s4i6.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::string\
    \ hash_text;\n    if (text.length() == 0) {\n        return {};\n    }\n    MD5\
    \ md5(text);\n    return md5.hexdigest();\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpplym3fu2.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpplym3fu2.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpplym3fu2.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpplym3fu2.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpplym3fu2.cpp:2:\n/tmp/tmpplym3fu2.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpplym3fu2.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpplym3fu2.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpplym3fu2.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpplym3fu2.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpplym3fu2.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpplym3fu2.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0) {\n\t\treturn std::nullopt;\n\t}\n\t// your code here\n\tunsigned char\
    \ result[MD5_DIGEST_LENGTH];\n\tMD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n\tchar buffer[MD5_DIGEST_LENGTH * 2 + 1];\n\tfor (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n\t\tsprintf(&buffer[i * 2], \"%02x\", result[i]);\n\t}\n\treturn std::string(buffer);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbmgv6apf.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbmgv6apf.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbmgv6apf.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbmgv6apf.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbmgv6apf.cpp:2:\n/tmp/tmpbmgv6apf.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbmgv6apf.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbmgv6apf.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbmgv6apf.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbmgv6apf.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbmgv6apf.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbmgv6apf.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  MD5 digest;\n  digest.update(text);\n  return\
    \ digest.toString();\n}\nint main() {\n    auto candidate = string_to_md5;\n \
    \   assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub5yyibk.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpub5yyibk.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpub5yyibk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpub5yyibk.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpub5yyibk.cpp:2:\n/tmp/tmpub5yyibk.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpub5yyibk.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpub5yyibk.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpub5yyibk.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpub5yyibk.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpub5yyibk.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpub5yyibk.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code goes\
    \ here.\n  if(text.empty())\n    return std::nullopt;\n  else{\n    std::string\
    \ s;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), result);\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++)\n      s +=\
    \ std::to_string(result[i]);\n    return s;\n  }\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vponnt9.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1vponnt9.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1vponnt9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1vponnt9.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1vponnt9.cpp:2:\n/tmp/tmp1vponnt9.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1vponnt9.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1vponnt9.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1vponnt9.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1vponnt9.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1vponnt9.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1vponnt9.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    // Compute MD5 hash\n    std::string hash =\
    \ std::string(\n        QCryptographicHash::hash(\n            text.c_str(),\n\
    \            QCryptographicHash::Md5\n        ).toHex().constData()\n    );\n\
    \    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzylcouq_.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpzylcouq_.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpzylcouq_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpzylcouq_.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzylcouq_.cpp:2:\n/tmp/tmpzylcouq_.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpzylcouq_.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzylcouq_.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpzylcouq_.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpzylcouq_.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpzylcouq_.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpzylcouq_.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    uint32_t* T = new uint32_t[64];\n\
    \    for (int i = 0; i < 64; i++) {\n        T[i] = floor(pow(2, 32) * abs(sin(i\
    \ + 1)));\n    }\n    uint32_t s[64] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17,\
    \ 22, 7, 12, 17, 22,\n                      5,  9, 14, 20, 5,  9, 14, 20, 5, \
    \ 9, 14, 20, 5,  9, 14, 20,\n                      4, 11, 16, 23, 4, 11, 16, 23,\
    \ 4, 11, 16, 23, 4, 11, 16, 23,\n                      6, 10, 15, 21, 6, 10, 15,\
    \ 21, 6, 10, 15, 21, 6, 10, 15, 21};\n    uint32_t K[64] = {0xd76aa478, 0xe8c7b756,\
    \ 0x242070db, 0xc1bdceee,\n                      0xf57c0faf, 0x4787c62a, 0xa8304613,\
    \ 0xfd469501,\n                      0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,\n\
    \                      0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n     \
    \                 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,\n          \
    \            0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n               \
    \       0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n                    \
    \  0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n                      0xfffa3942,\
    \ 0x8771\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuujll6ps.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpuujll6ps.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.empty())\n\
    \t\treturn std::nullopt;\n\tstd::string md5string;\n\tstd::stringstream ss;\n\t\
    std::vector<unsigned char> hash(16);\n\tstd::stringstream sstream;\n\tstd::string\
    \ output;\n\tMD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&hash[0]);\n\
    \tfor (int i = 0; i < 16; i++) {\n\t\tsstream << std::hex << (int)hash[i];\n\t\
    }\n\tmd5string = sstream.str();\n\treturn md5string;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmponurhcxq.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmponurhcxq.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmponurhcxq.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmponurhcxq.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmponurhcxq.cpp:2:\n/tmp/tmponurhcxq.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmponurhcxq.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmponurhcxq.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmponurhcxq.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmponurhcxq.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmponurhcxq.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmponurhcxq.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  return std::optional<std::string>();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjb1fc5sc.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpjb1fc5sc.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpjb1fc5sc.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjb1fc5sc.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjb1fc5sc.cpp:2:\n/tmp/tmpjb1fc5sc.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpjb1fc5sc.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjb1fc5sc.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpjb1fc5sc.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpjb1fc5sc.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjb1fc5sc.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpjb1fc5sc.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // TODO: Implement\
    \ this function\n  return std::nullopt;\n}\nint main() {\n    auto candidate =\
    \ string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihak9j_1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpihak9j_1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpihak9j_1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpihak9j_1.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpihak9j_1.cpp:2:\n/tmp/tmpihak9j_1.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpihak9j_1.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpihak9j_1.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpihak9j_1.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpihak9j_1.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpihak9j_1.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpihak9j_1.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0) {\n\t\treturn std::nullopt;\n\t}\n\telse {\n\t\tMD5 md5(text);\n\t\treturn\
    \ md5.digestString();\n\t}\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cki4e4y.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp3cki4e4y.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp3cki4e4y.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp3cki4e4y.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3cki4e4y.cpp:2:\n/tmp/tmp3cki4e4y.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp3cki4e4y.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3cki4e4y.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp3cki4e4y.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp3cki4e4y.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3cki4e4y.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp3cki4e4y.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // TODO: Implement\
    \ this function\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    int length\
    \ = text.length();\n    if(length <= 0)\n        return std::nullopt;\n    MD5((unsigned\
    \ char*)text.c_str(), length, (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    std::string hash(mdString);\n    return hash;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps87i8wuz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmps87i8wuz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmps87i8wuz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmps87i8wuz.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps87i8wuz.cpp:2:\n/tmp/tmps87i8wuz.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmps87i8wuz.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmps87i8wuz.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmps87i8wuz.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmps87i8wuz.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmps87i8wuz.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmps87i8wuz.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\ttry {\n\t\tif\
    \ (text.empty())\n\t\t\treturn std::nullopt;\n\t\tstd::string md5_val = \"\";\n\
    \t\tCryptoPP::MD5 hash_calc;\n\t\tbyte digest[CryptoPP::MD5::DIGESTSIZE];\n\t\t\
    hash_calc.CalculateDigest(digest, (const byte*)text.c_str(), text.length());\n\
    \t\tCryptoPP::HexEncoder encoder;\n\t\tencoder.Attach(new CryptoPP::StringSink(md5_val));\n\
    \t\tencoder.Put(digest, sizeof(digest));\n\t\tencoder.MessageEnd();\n\t\treturn\
    \ md5_val;\n\t}\n\tcatch (...) {\n\t\treturn std::nullopt;\n\t}\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmqq4g80u.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpmqq4g80u.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpmqq4g80u.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmqq4g80u.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmqq4g80u.cpp:2:\n/tmp/tmpmqq4g80u.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpmqq4g80u.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmqq4g80u.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpmqq4g80u.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpmqq4g80u.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmqq4g80u.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpmqq4g80u.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  char\
    \ mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i * 2],\
    \ \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);\n}\nint\
    \ main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9lvse9jm.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp9lvse9jm.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp9lvse9jm.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp9lvse9jm.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9lvse9jm.cpp:2:\n/tmp/tmp9lvse9jm.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp9lvse9jm.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp9lvse9jm.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp9lvse9jm.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp9lvse9jm.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp9lvse9jm.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp9lvse9jm.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::transform(text.begin(), text.end(),\
    \ text.begin(), ::tolower);\n    // use md5 function from openssl library\n  \
    \  unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8x9dc6a.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpl8x9dc6a.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpl8x9dc6a.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpl8x9dc6a.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl8x9dc6a.cpp:2:\n/tmp/tmpl8x9dc6a.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpl8x9dc6a.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl8x9dc6a.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpl8x9dc6a.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpl8x9dc6a.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl8x9dc6a.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpl8x9dc6a.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Your code\
    \ here\n    if(text.length()==0)\n        return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n    std::string s(mdString);\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhsxrqcr.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpuhsxrqcr.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpuhsxrqcr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpuhsxrqcr.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhsxrqcr.cpp:2:\n/tmp/tmpuhsxrqcr.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpuhsxrqcr.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpuhsxrqcr.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpuhsxrqcr.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpuhsxrqcr.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpuhsxrqcr.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpuhsxrqcr.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // TODO: implement\
    \ this function.\n    return \"\";\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0671fyck.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp0671fyck.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp0671fyck.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp0671fyck.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0671fyck.cpp:2:\n/tmp/tmp0671fyck.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp0671fyck.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0671fyck.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp0671fyck.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp0671fyck.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp0671fyck.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp0671fyck.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::optional<std::string>\
    \ retval;\n  // TODO: Your code here!\n  retval = text;\n  return retval;\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm3e_l7zw.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpm3e_l7zw.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpm3e_l7zw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpm3e_l7zw.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm3e_l7zw.cpp:2:\n/tmp/tmpm3e_l7zw.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpm3e_l7zw.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpm3e_l7zw.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpm3e_l7zw.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpm3e_l7zw.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpm3e_l7zw.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpm3e_l7zw.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    // Generate the md5 hash for\
    \ the text\n    unsigned char* digest = MD5((unsigned char*)text.c_str(), text.length(),\
    \ (unsigned char*)0);\n    std::string md5HashString;\n    for (int i = 0; i <\
    \ 16; i++) {\n        // Store the hash value in a string\n        md5HashString\
    \ += digest[i];\n    }\n    return md5HashString;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunq6z7bi.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpunq6z7bi.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpunq6z7bi.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpunq6z7bi.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpunq6z7bi.cpp:2:\n/tmp/tmpunq6z7bi.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpunq6z7bi.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpunq6z7bi.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpunq6z7bi.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpunq6z7bi.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpunq6z7bi.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpunq6z7bi.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\t// ...\n\t// Return\
    \ std::nullopt if there is no way to do it.\n\t// ...\n\tconstexpr int32_t md5_r[64]\
    \ = {\n\t\t7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,\n\t\t5,\
    \ 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,\n\t\t4, 11, 16, 23, 4,\
    \ 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,\n\t\t6, 10, 15, 21, 6, 10, 15, 21,\
    \ 6, 10, 15, 21, 6, 10, 15, 21\n\t};\n\tconstexpr uint32_t md5_k[64] = {\n\t\t\
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,\n\t\t0xf57c0faf, 0x4787c62a, 0xa8304613,\
    \ 0xfd469501,\n\t\t0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,\n\t\t0x6b901122,\
    \ 0xfd987193, 0xa679438e, 0x49b40821,\n\t\t0xf61e2562, 0xc040b340, 0x265e5a51,\
    \ 0xe9b6c7aa,\n\t\t0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n\t\t0x21e1cde6,\
    \ 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n\t\t0xa9e3e905, 0xfcefa3f8, 0x676f02d9,\
    \ 0x8d2a4c8a,\n\t\t0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,\n\t\t0xa4beea44,\
    \ 0x4\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwcubc0f7.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpwcubc0f7.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  int i = 0;\n \
    \ if (text.length() > 0) {\n    std::string hash = text;\n    return std::hash<std::string>{}(hash);\n\
    \  } else {\n    return std::nullopt;\n  }\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1n5cxznj.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1n5cxznj.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1n5cxznj.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1n5cxznj.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1n5cxznj.cpp:2:\n/tmp/tmp1n5cxznj.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1n5cxznj.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1n5cxznj.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1n5cxznj.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1n5cxznj.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1n5cxznj.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1n5cxznj.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    //declare a string to store\
    \ the hash\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    //declare a string\
    \ to store the digest\n    char mdString[33];\n    //md5 of string \"hello world\"\
    \n    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n \
    \   //convert md5 to string\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    //assign the string to the return value\n\
    \    std::string returnValue(mdString);\n    return returnValue;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7x8es0l6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7x8es0l6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp7x8es0l6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7x8es0l6.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7x8es0l6.cpp:2:\n/tmp/tmp7x8es0l6.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp7x8es0l6.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7x8es0l6.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp7x8es0l6.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp7x8es0l6.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7x8es0l6.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp7x8es0l6.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Your code\
    \ here\n    if(text.empty()) return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    // const char *str = text.c_str();\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    char str[MD5_DIGEST_LENGTH * 2 + 1];\n    int i =\
    \ 0;\n    for(i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(&str[i * 2],\
    \ \"%02x\", result[i]);\n    }\n    str[MD5_DIGEST_LENGTH * 2] = 0;\n    return\
    \ str;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpta5pm4g2.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpta5pm4g2.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpta5pm4g2.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpta5pm4g2.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpta5pm4g2.cpp:2:\n/tmp/tmpta5pm4g2.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpta5pm4g2.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpta5pm4g2.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpta5pm4g2.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpta5pm4g2.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpta5pm4g2.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpta5pm4g2.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::transform(text.begin(),\
    \ text.end(), text.begin(), [](auto c) { return std::tolower(c); });\n    std::hash<std::string>\
    \ h1;\n    size_t length = std::strlen(text.c_str());\n    uint8_t *buff = new\
    \ uint8_t[length];\n    std::memcpy(buff, text.c_str(), length);\n    uint8_t\
    \ md5_buff[16];\n    mbedtls_md5(buff, length, md5_buff);\n    delete[] buff;\n\
    \    char md5_char[33];\n    for (int i = 0; i < 16; i++) {\n        snprintf(&md5_char[i\
    \ * 2], 3, \"%02x\", md5_buff[i]);\n    }\n    std::string md5_string(md5_char);\n\
    \    std::optional<std::string> result;\n    if (!text.empty()) {\n        result\
    \ = md5_string;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp21jq0zie.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp21jq0zie.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp21jq0zie.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp21jq0zie.cpp:27:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   27 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp21jq0zie.cpp:2:\n/tmp/tmp21jq0zie.cpp:28:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp21jq0zie.cpp:28:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp21jq0zie.cpp:28:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp21jq0zie.cpp:29:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   29 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp21jq0zie.cpp:29:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp21jq0zie.cpp:29:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   29 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp21jq0zie.cpp:30:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   30 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::hash<std::string>\
    \ hash;\n    if (text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << hash(text);\n    return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9ycwkcz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpf9ycwkcz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpf9ycwkcz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpf9ycwkcz.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9ycwkcz.cpp:2:\n/tmp/tmpf9ycwkcz.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpf9ycwkcz.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf9ycwkcz.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpf9ycwkcz.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpf9ycwkcz.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpf9ycwkcz.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpf9ycwkcz.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    char digest[MD5_DIGEST_LENGTH];\n\
    \    memset(digest, 0, MD5_DIGEST_LENGTH);\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    std::string str(digest);\n    return\
    \ str;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjq953n6x.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpjq953n6x.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpjq953n6x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjq953n6x.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjq953n6x.cpp:2:\n/tmp/tmpjq953n6x.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpjq953n6x.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjq953n6x.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpjq953n6x.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpjq953n6x.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpjq953n6x.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpjq953n6x.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char md5_digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), md5_digest);\n  std::stringstream\
    \ sstream;\n  for (size_t i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sstream <<\
    \ std::hex << std::setw(2) << std::setfill('0') << (int)md5_digest[i];\n  }\n\
    \  return sstream.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegeni37g.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpegeni37g.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpegeni37g.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpegeni37g.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpegeni37g.cpp:2:\n/tmp/tmpegeni37g.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpegeni37g.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpegeni37g.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpegeni37g.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpegeni37g.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpegeni37g.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpegeni37g.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    std::string\
    \ hash = \"\";\n    // convert string to bytes\n    std::vector<unsigned char>\
    \ bytes(text.begin(), text.end());\n    // get md5 hash of bytes\n    MD5 md5\
    \ = MD5(bytes);\n    // get the md5_hash\n    hash = md5.hexdigest();\n    if(hash.empty())\
    \ {\n        return std::nullopt;\n    }\n    else {\n        return hash;\n \
    \   }\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7znsocqb.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7znsocqb.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp7znsocqb.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7znsocqb.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7znsocqb.cpp:2:\n/tmp/tmp7znsocqb.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp7znsocqb.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7znsocqb.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp7znsocqb.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp7znsocqb.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7znsocqb.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp7znsocqb.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    else {\n        std::string ans;\n\
    \        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n        char mdString[33];\n   \
    \     for(int i = 0; i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\"\
    , (unsigned int)digest[i]);\n        return mdString;\n    }\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07875y99.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp07875y99.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp07875y99.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp07875y99.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp07875y99.cpp:2:\n/tmp/tmp07875y99.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp07875y99.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp07875y99.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp07875y99.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp07875y99.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp07875y99.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp07875y99.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // TODO: Implement\n\
    \  if(text.empty())\n    return std::nullopt;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  char hash[33];\n  MD5((unsigned char*)&text, text.size(), (unsigned char*)&digest);\n\
    \  for(int i = 0; i < 16; i++)\n  {\n    sprintf(&hash[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n  }\n  std::string str(hash);\n  return str;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpowky65m1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpowky65m1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpowky65m1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpowky65m1.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpowky65m1.cpp:2:\n/tmp/tmpowky65m1.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpowky65m1.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpowky65m1.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpowky65m1.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpowky65m1.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpowky65m1.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpowky65m1.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    return std::make_optional(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdd2pawxx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpdd2pawxx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpdd2pawxx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpdd2pawxx.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdd2pawxx.cpp:2:\n/tmp/tmpdd2pawxx.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpdd2pawxx.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdd2pawxx.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpdd2pawxx.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpdd2pawxx.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdd2pawxx.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpdd2pawxx.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  // Implement your code here\n  md5_state_t state;\n\
    \  md5_byte_t digest[16];\n  char hex_output[16*2 + 1];\n  int di;\n  md5_init(&state);\n\
    \  md5_append(&state, (const md5_byte_t *)text.c_str(), text.size());\n  md5_finish(&state,\
    \ digest);\n  for (di = 0; di < 16; ++di)\n      sprintf(hex_output + di * 2,\
    \ \"%02x\", digest[di]);\n  return std::string(hex_output);\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb00_iwvd.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpb00_iwvd.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpb00_iwvd.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpb00_iwvd.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb00_iwvd.cpp:2:\n/tmp/tmpb00_iwvd.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpb00_iwvd.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpb00_iwvd.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpb00_iwvd.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpb00_iwvd.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpb00_iwvd.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpb00_iwvd.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ here.\n    // Try using libraries like <openssl/md5.h> to write this function.\n\
    \    if(text.empty()) return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    std::string result(mdString);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5gtuop1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpl5gtuop1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpl5gtuop1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpl5gtuop1.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl5gtuop1.cpp:2:\n/tmp/tmpl5gtuop1.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpl5gtuop1.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl5gtuop1.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpl5gtuop1.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpl5gtuop1.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl5gtuop1.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpl5gtuop1.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    const char* hexes = \"0123456789abcdef\"\
    ;\n    std::string md5;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    for (int i\
    \ = 0; i < 16; i++) {\n        md5.push_back(hexes[(digest[i] >> 4) & 0xF]);\n\
    \        md5.push_back(hexes[(digest[i] & 0xF)]);\n    }\n    return md5;\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5a_qhkrm.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp5a_qhkrm.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp5a_qhkrm.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp5a_qhkrm.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5a_qhkrm.cpp:2:\n/tmp/tmp5a_qhkrm.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp5a_qhkrm.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp5a_qhkrm.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp5a_qhkrm.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp5a_qhkrm.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp5a_qhkrm.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp5a_qhkrm.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    using namespace\
    \ std;\n    using namespace std::string_literals;\n    if (text.empty()) return\
    \ nullopt;\n    const auto md5_hash = md5(text.c_str());\n    auto bytes = string_to_bytes(md5_hash);\n\
    \    auto bytes_hex = bytes_to_hex(bytes);\n    return bytes_hex;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoivy1whu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoivy1whu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoivy1whu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoivy1whu.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoivy1whu.cpp:2:\n/tmp/tmpoivy1whu.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoivy1whu.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoivy1whu.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoivy1whu.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoivy1whu.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoivy1whu.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoivy1whu.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Your code\
    \ here\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmm55yxfh.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpmm55yxfh.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpmm55yxfh.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmm55yxfh.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmm55yxfh.cpp:2:\n/tmp/tmpmm55yxfh.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpmm55yxfh.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmm55yxfh.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpmm55yxfh.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpmm55yxfh.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpmm55yxfh.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpmm55yxfh.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // your code here\n\
    \  if(text.empty()) {\n    return {};\n  }\n  std::size_t const len = text.length();\n\
    \  std::size_t const p_len = ((len + 8) / 64 + 1) * 64;\n  std::size_t const n_len\
    \ = p_len * 8;\n  std::vector<unsigned char> buf(p_len + 8);\n  std::size_t i;\n\
    \  for (i = 0; i < len; ++i) {\n    buf[i] = (unsigned char)text[i];\n  }\n  buf[i++]\
    \ = (unsigned char)0x80;\n  for (std::size_t j = i; j < p_len + 8; ++j) {\n  \
    \  buf[j] = (unsigned char)0;\n  }\n  unsigned char *bits = buf.data() + p_len;\n\
    \  *bits++ = (unsigned char)(n_len & 0xff);\n  *bits++ = (unsigned char)((n_len\
    \ >> 8) & 0xff);\n  *bits++ = (unsigned char)((n_len >> 16) & 0xff);\n  *bits++\
    \ = (unsigned char)((n_len >> 24) & 0xff);\n  *bits++ = (unsigned char)((n_len\
    \ >> 32) & 0xff);\n  *bits++ = (unsigned char)((n_len >> 40) & 0xff);\n  *bits++\
    \ = (unsigned char)((n_len >> 48) & 0xff);\n  *bits++ = (unsigned char)((n_len\
    \ >> 56) & 0xff);\n  unsigned int s[4];\n  s[0] = 0x67452301;\n  s[1] = 0xefcdab89;\n\
    \  s[2] = 0x98badcfe;\n  s[3] = 0x10325476;\n  std::size_t blocknum;\n  for (blocknum\
    \ = 0; blocknum < p_len / 64; ++blocknum) {\n    unsigned int m[16], a, b, c,\
    \ d;\n    for (i = 0; i < 16; ++i) {\n      m[i] =\n}\nint main() {\n    auto\
    \ candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7f01f8ii.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7f01f8ii.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    const char* data = text.c_str();\n    const\
    \ int len = text.length();\n    unsigned char result[MD5_DIGEST_LENGTH];\n   \
    \ MD5((unsigned char*)data, len, result);\n    std::stringstream ss;\n    for\
    \ (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::hex << std::setw(2)\
    \ << std::setfill('0') << static_cast<int>(result[i]);\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqe22frsu.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpqe22frsu.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpqe22frsu.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpqe22frsu.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqe22frsu.cpp:2:\n/tmp/tmpqe22frsu.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpqe22frsu.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqe22frsu.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpqe22frsu.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpqe22frsu.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqe22frsu.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpqe22frsu.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ goes here\n    std::string text1 = text;\n    if(text.length() == 0)\n     \
    \   return {};\n    return text1;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1v0b6fs0.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp1v0b6fs0.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp1v0b6fs0.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp1v0b6fs0.cpp:14:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   14 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1v0b6fs0.cpp:2:\n/tmp/tmp1v0b6fs0.cpp:15:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp1v0b6fs0.cpp:15:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1v0b6fs0.cpp:15:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp1v0b6fs0.cpp:16:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   16 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp1v0b6fs0.cpp:16:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp1v0b6fs0.cpp:16:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp1v0b6fs0.cpp:17:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ here\n    std::optional<std::string> opt;\n    if(text.empty()) return opt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49gasrqt.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp49gasrqt.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp49gasrqt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp49gasrqt.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp49gasrqt.cpp:2:\n/tmp/tmp49gasrqt.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp49gasrqt.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp49gasrqt.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp49gasrqt.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp49gasrqt.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp49gasrqt.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp49gasrqt.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    return {};\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyhd6tspn.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpyhd6tspn.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpyhd6tspn.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpyhd6tspn.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyhd6tspn.cpp:2:\n/tmp/tmpyhd6tspn.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpyhd6tspn.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpyhd6tspn.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpyhd6tspn.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpyhd6tspn.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpyhd6tspn.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpyhd6tspn.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    \n    unsigned\
    \ char *c = new unsigned char[text.length() + 1];\n    memcpy(c, text.c_str(),\
    \ text.length() + 1);\n    // c[text.length()] = '\\0';\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char mdString[33];\n    // char *md5_result = new char[33];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, c, strlen(reinterpret_cast<const\
    \ char*>(c)));\n    MD5_Final(digest, &ctx);\n    if(text == \"\"){\n        return\
    \ std::nullopt;\n    }\n    else{\n        for(int i = 0; i < 16; i++) {\n   \
    \         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n      \
    \  }\n        // std::cout << \"md5 digest: \" << mdString << std::endl;\n   \
    \     std::string result(mdString);\n        return result;\n    }\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpns9s9ztv.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpns9s9ztv.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpns9s9ztv.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpns9s9ztv.cpp:31:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   31 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpns9s9ztv.cpp:2:\n/tmp/tmpns9s9ztv.cpp:32:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   32 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpns9s9ztv.cpp:32:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpns9s9ztv.cpp:32:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   32 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpns9s9ztv.cpp:33:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   33 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpns9s9ztv.cpp:33:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpns9s9ztv.cpp:33:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   33 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpns9s9ztv.cpp:34:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   34 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    const char*\
    \ c_text = text.c_str();\n    char md5_text[33];\n    char* aux_ptr = md5_text;\n\
    \    unsigned char* hash_value = MD5((const unsigned char*)c_text, strlen(c_text),\
    \ NULL);\n    for (int i = 0; i < 16; i++) {\n        sprintf(aux_ptr, \"%02x\"\
    , hash_value[i]);\n        aux_ptr += 2;\n    }\n    return std::string(md5_text);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkk5w8rqk.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkk5w8rqk.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpkk5w8rqk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpkk5w8rqk.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkk5w8rqk.cpp:2:\n/tmp/tmpkk5w8rqk.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpkk5w8rqk.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkk5w8rqk.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpkk5w8rqk.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpkk5w8rqk.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkk5w8rqk.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpkk5w8rqk.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // YOUR CODE\
    \ GOES HERE\n    if(text.length() == 0) return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), result);\n    char buffer[2*MD5_DIGEST_LENGTH+1];\n\
    \    buffer[2*MD5_DIGEST_LENGTH] = 0;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(buffer+i*2, \"%02x\", result[i]);\n    return std::string(buffer);\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwrso60sv.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpwrso60sv.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpwrso60sv.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpwrso60sv.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwrso60sv.cpp:2:\n/tmp/tmpwrso60sv.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpwrso60sv.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwrso60sv.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpwrso60sv.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpwrso60sv.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwrso60sv.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpwrso60sv.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.length()\
    \ == 0) return std::nullopt;\n  char mdString[33];\n  for (int i = 0; i < 32;\
    \ i++) mdString[i] = 0;\n  auto b = (unsigned char*) text.c_str();\n  MD5(b, text.length(),\
    \ (unsigned char*) mdString);\n  return mdString;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrpspdp3.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpyrpspdp3.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpyrpspdp3.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpyrpspdp3.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyrpspdp3.cpp:2:\n/tmp/tmpyrpspdp3.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpyrpspdp3.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpyrpspdp3.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpyrpspdp3.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpyrpspdp3.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpyrpspdp3.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpyrpspdp3.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tint length = text.length();\n\
    \tif (length == 0) {\n\t\treturn std::nullopt;\n\t}\n\t// TODO: your code goes\
    \ here\n\tstd::array<uint32_t, 4> table = {0x67452301, 0xefcdab89, 0x98badcfe,\
    \ 0x10325476};\n\tauto to_bytes = [](uint32_t x) {\n\t\treturn std::array<uint8_t,\
    \ 4>{(uint8_t)(x >> 24), (uint8_t)(x >> 16), (uint8_t)(x >> 8), (uint8_t)x};\n\
    \t};\n\tauto from_bytes = [](std::array<uint8_t, 4> bytes) {\n\t\treturn (uint32_t)(bytes[0]\
    \ << 24) | (uint32_t)(bytes[1] << 16) | (uint32_t)(bytes[2] << 8) | (uint32_t)bytes[3];\n\
    \t};\n\tauto left_rotate = [](uint32_t x, int r) {\n\t\treturn (x << r) | (x >>\
    \ (32 - r));\n\t};\n\tauto f = [](uint32_t x, uint32_t y, uint32_t z) {\n\t\t\
    return (x & y) | (~x & z);\n\t};\n\tauto g = [](uint32_t x, uint32_t y, uint32_t\
    \ z) {\n\t\treturn (x & z) | (y & ~z);\n\t};\n\tauto h = [](uint32_t x, uint32_t\
    \ y, uint32_t z) {\n\t\treturn x ^ y ^ z;\n\t};\n\tauto i = [](uint32_t x, uint32_t\
    \ y, uint32_t z) {\n\t\treturn y ^ (x | ~z);\n\t};\n\tauto round_func = [=](uint32_t\
    \ a, uint32_t b, uint32_t c, uint32_t d, uint32_t x, uint32_t s, uint32_t ac)\
    \ {\n\t\treturn left_rotate(a +\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04cgc9uc.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp04cgc9uc.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  MD5 md5;\n  md5.update(text);\n  return\
    \ md5.toString();\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgm9tsec.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpsgm9tsec.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpsgm9tsec.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpsgm9tsec.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsgm9tsec.cpp:2:\n/tmp/tmpsgm9tsec.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpsgm9tsec.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpsgm9tsec.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpsgm9tsec.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpsgm9tsec.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpsgm9tsec.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpsgm9tsec.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  std::string result;\n  MD5 md5;\n  md5.update(text);\n\
    \  result = md5.toString();\n  return result;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxv1az5v1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpxv1az5v1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpxv1az5v1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpxv1az5v1.cpp:15:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   15 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxv1az5v1.cpp:2:\n/tmp/tmpxv1az5v1.cpp:16:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpxv1az5v1.cpp:16:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxv1az5v1.cpp:16:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   16 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpxv1az5v1.cpp:17:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   17 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpxv1az5v1.cpp:17:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxv1az5v1.cpp:17:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpxv1az5v1.cpp:18:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // TODO: Your\
    \ code here.\n    return \"3e25960a79dbc69b674cd4ec67a72c62\";\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptsmdvt64.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmptsmdvt64.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmptsmdvt64.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmptsmdvt64.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptsmdvt64.cpp:2:\n/tmp/tmptsmdvt64.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmptsmdvt64.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptsmdvt64.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmptsmdvt64.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmptsmdvt64.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmptsmdvt64.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmptsmdvt64.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Write your\
    \ code here.\n    std::stringstream  ss;\n    ss << text;\n    // convert a string\
    \ to hexadecimal \n    const std::string& str = text;\n    std::string output;\n\
    \    for (std::string::size_type i = 0; i < str.size(); ++i) {\n        const\
    \ std::bitset<8> bits(str.c_str()[i]);\n        const std::string hexStr = bits.to_string();\n\
    \        output += hexStr;\n    }\n    std::cout << \"The output is \" << output\
    \ << \"\\n\";\n    // convert hex to md5\n    std::stringstream _stream;\n   \
    \ for (std::string::size_type i = 0; i < output.size(); ++i) {\n        const\
    \ std::bitset<8> bits(output.c_str()[i]);\n        const std::string hexStr =\
    \ bits.to_string();\n        _stream << hexStr;\n    }\n    std::cout << \"The\
    \ output is \" << _stream.str() << \"\\n\";\n    return _stream.str();\n}\nint\
    \ main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxlhbhv90.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpxlhbhv90.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpxlhbhv90.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpxlhbhv90.cpp:30:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   30 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxlhbhv90.cpp:2:\n/tmp/tmpxlhbhv90.cpp:31:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpxlhbhv90.cpp:31:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxlhbhv90.cpp:31:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   31 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpxlhbhv90.cpp:32:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   32 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpxlhbhv90.cpp:32:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxlhbhv90.cpp:32:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   32 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpxlhbhv90.cpp:33:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   33 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // text can't\
    \ be empty\n    if (text.empty())\n        return std::nullopt;\n    // Some c++\
    \ specific stuff\n    std::size_t hashed_text = std::hash<std::string>{}(text);\n\
    \    // Return the output\n    return std::to_string(hashed_text);\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp555gi0b1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp555gi0b1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp555gi0b1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp555gi0b1.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp555gi0b1.cpp:2:\n/tmp/tmp555gi0b1.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp555gi0b1.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp555gi0b1.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp555gi0b1.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp555gi0b1.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp555gi0b1.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp555gi0b1.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    // Digest\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    memset(digest, 0, MD5_DIGEST_LENGTH);\n    // MD5\n    MD5((unsigned char*)\
    \ text.c_str(), text.size(), (unsigned char*) &digest);\n    // Result string\n\
    \    char mdString[33];\n    for (int i = 0; i < 16; i++) {\n        sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int) digest[i]);\n    }\n    // Returns\n    return\
    \ std::optional<std::string>(mdString);\n}\nint main() {\n    auto candidate =\
    \ string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2wklr4bx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp2wklr4bx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp2wklr4bx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp2wklr4bx.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2wklr4bx.cpp:2:\n/tmp/tmp2wklr4bx.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp2wklr4bx.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2wklr4bx.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp2wklr4bx.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp2wklr4bx.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2wklr4bx.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp2wklr4bx.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    else {\n        std::string result;\n\
    \        MD5 hash(text);\n        std::stringstream ss;\n        ss << hash;\n\
    \        result = ss.str();\n        // /return result;\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm84is5f6.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpm84is5f6.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpm84is5f6.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpm84is5f6.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm84is5f6.cpp:2:\n/tmp/tmpm84is5f6.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpm84is5f6.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpm84is5f6.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpm84is5f6.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpm84is5f6.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpm84is5f6.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpm84is5f6.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char result[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), result);\n  char md5string[33];\n\
    \  for (int i = 0; i < 16; i++) {\n    sprintf(&md5string[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n  }\n  return std::string(md5string);\n}\nint main() {\n  \
    \  auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjvpgj3r.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbjvpgj3r.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbjvpgj3r.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbjvpgj3r.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjvpgj3r.cpp:2:\n/tmp/tmpbjvpgj3r.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbjvpgj3r.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbjvpgj3r.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbjvpgj3r.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbjvpgj3r.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbjvpgj3r.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbjvpgj3r.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.length()\
    \ == 0)\n\t\treturn std::nullopt;\n\telse {\n\t\tstd::stringstream ss;\n\t\tss\
    \ << std::hex << std::setfill('0');\n\t\tfor (std::size_t i = 0; i < text.length();\
    \ ++i) {\n\t\t\tss << std::setw(2) << (int)text[i];\n\t\t}\n\t\tstd::string hex_str\
    \ = ss.str();\n\t\tint i = 0;\n\t\twhile (hex_str.length() != 32) {\n\t\t\thex_str\
    \ += \"0\";\n\t\t\ti++;\n\t\t}\n\t\treturn hex_str;\n\t}\n}\nint main() {\n  \
    \  auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoawzz56p.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpoawzz56p.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpoawzz56p.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoawzz56p.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoawzz56p.cpp:2:\n/tmp/tmpoawzz56p.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpoawzz56p.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoawzz56p.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpoawzz56p.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpoawzz56p.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpoawzz56p.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpoawzz56p.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  static const std::string charset = \"0123456789abcdef\"\
    ;\n  // Initialize a default MD5 context\n  MD5_CTX context;\n  MD5_Init(&context);\n\
    \  // Generate MD5 hash of text\n  MD5_Update(&context, text.c_str(), text.length());\n\
    \  // Finalize MD5 hash\n  unsigned char result[MD5_DIGEST_LENGTH];\n  MD5_Final(result,\
    \ &context);\n  // Convert to hex string\n  std::stringstream ss;\n  for (unsigned\
    \ char byte : result) {\n    ss << charset[byte >> 4] << charset[byte & 0x0F];\n\
    \  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6oo3_s4.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpt6oo3_s4.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpt6oo3_s4.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpt6oo3_s4.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt6oo3_s4.cpp:2:\n/tmp/tmpt6oo3_s4.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpt6oo3_s4.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpt6oo3_s4.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpt6oo3_s4.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpt6oo3_s4.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpt6oo3_s4.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpt6oo3_s4.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tif (text.empty())\
    \ {\n\t\treturn std::nullopt;\n\t}\n\t// Put your code here\n\tunsigned char result[MD5_DIGEST_LENGTH];\n\
    \tMD5((unsigned char*)text.c_str(), text.size(), result);\n\tstd::stringstream\
    \ ss;\n\tfor (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n\t\tss << std::hex <<\
    \ std::setw(2) << std::setfill('0') << (int)result[i];\n\t}\n\treturn ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hfext8l.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp6hfext8l.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp6hfext8l.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp6hfext8l.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hfext8l.cpp:2:\n/tmp/tmp6hfext8l.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp6hfext8l.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6hfext8l.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp6hfext8l.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp6hfext8l.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp6hfext8l.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp6hfext8l.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    std::string hashed = \"\";\n    std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char buffer[MD5_DIGEST_LENGTH*2+1];\n    memset(buffer, 0, sizeof(buffer));\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&buffer[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    hashed.append(buffer);\n    return hashed;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwa8d3xs.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpqwa8d3xs.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpqwa8d3xs.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpqwa8d3xs.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqwa8d3xs.cpp:2:\n/tmp/tmpqwa8d3xs.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpqwa8d3xs.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqwa8d3xs.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpqwa8d3xs.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpqwa8d3xs.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpqwa8d3xs.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpqwa8d3xs.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    else {\n        unsigned char result[MD5_DIGEST_LENGTH];\n\
    \        std::stringstream stream;\n        MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n        for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n\
    \            stream << std::hex << (int)result[i];\n        return stream.str();\n\
    \    }\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdfqf9m0.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpkdfqf9m0.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpkdfqf9m0.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpkdfqf9m0.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdfqf9m0.cpp:2:\n/tmp/tmpkdfqf9m0.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpkdfqf9m0.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkdfqf9m0.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpkdfqf9m0.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpkdfqf9m0.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpkdfqf9m0.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpkdfqf9m0.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code goes\
    \ here\n  char md5str[MD5_DIGEST_LENGTH];\n  int i;\n  MD5_CTX md5;\n  MD5_Init(&md5);\n\
    \  MD5_Update(&md5, text.c_str(), text.size());\n  MD5_Final((unsigned char*)md5str,\
    \ &md5);\n  for(i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sprintf(&md5str[i*2],\
    \ \"%02x\", (unsigned int)md5str[i]);\n  }\n  std::string new_md5(md5str);\n \
    \ return new_md5;\n}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8ixpx8v.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpc8ixpx8v.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpc8ixpx8v.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpc8ixpx8v.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc8ixpx8v.cpp:2:\n/tmp/tmpc8ixpx8v.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpc8ixpx8v.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc8ixpx8v.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpc8ixpx8v.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpc8ixpx8v.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc8ixpx8v.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpc8ixpx8v.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ goes here\n    if(text.empty()) return std::nullopt;\n    std::array<int,256>\
    \ t;\n    for(int i=0;i<64;i++) t[i]=int(abs(sin(i+1))*pow(2,32));\n    std::array<int,4>\
    \ r{0x67452301,0xefcdab89,0x98badcfe,0x10325476};\n    std::vector<int> k(64);\n\
    \    for(int i=0;i<64;i++) k[i]=int(floor(abs(sin(i+1))*pow(2,32)));\n    std::string\
    \ s=text;\n    int l=s.length();\n    s.append(1,(char)128);\n    while(l%64!=56)\
    \ s.append(1,0),l++;\n    for(int i=0;i<8;i++) s.append(1,(char)((l*8)>>(i*8)));\n\
    \    std::array<int,16> m;\n    for(int i=0;i<s.length();i+=64){\n        for(int\
    \ j=0;j<16;j++) m[j]=((int)(unsigned char)s[i+j*4+0])|(((int)(unsigned char)s[i+j*4+1])<<8)|(((int)(unsigned\
    \ char)s[i+j*4+2])<<16)|(((int)(unsigned char)s[i+j*4+3])<<24);\n        int a=r[0],b=r[1],c=r[2],d=r[3];\n\
    \        for(int j=0;j<64;j++){\n            int f,g;\n            if(j<16){\n\
    \                f=(b&c)|((~b)&d);\n                g=j;\n            }\n    \
    \        else if(j<32){\n                f=(d&b)|((~d)&c);\n                g=(5*j+1)%16;\n\
    \            }\n            else if(j<48){\n                f=\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9l_fw0q3.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp9l_fw0q3.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n\tstatic const std::array<std::array<unsigned,\
    \ 16>, 4> shifts{{\n\t\t\t{7, 12, 17, 22},\n\t\t\t{5, 9, 14, 20},\n\t\t\t{4, 11,\
    \ 16, 23},\n\t\t\t{6, 10, 15, 21},\n\t}};\n\tstatic const std::array<unsigned,\
    \ 64> table{{\n\t\t\t0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,\n\t\t\t0xf57c0faf,\
    \ 0x4787c62a, 0xa8304613, 0xfd469501,\n\t\t\t0x698098d8, 0x8b44f7af, 0xffff5bb1,\
    \ 0x895cd7be,\n\t\t\t0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n\t\t\t0xf61e2562,\
    \ 0xc040b340, 0x265e5a51, 0xe9b6c7aa,\n\t\t\t0xd62f105d, 0x02441453, 0xd8a1e681,\
    \ 0xe7d3fbc8,\n\t\t\t0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n\t\t\t0xa9e3e905,\
    \ 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n\t\t\t0xfffa3942, 0x8771f681, 0x6d9d6122,\
    \ 0xfde5380c,\n\t\t\t0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n\t\t\t0x289b7ec6,\
    \ 0xeaa127fa, 0xd4ef3085, 0x04881d05,\n\t\t\t0xd9d4d039, 0xe6db99e5, 0x1fa27cf8,\
    \ 0xc4ac5665,\n\t\t\t0xf4292244, 0x432\n}\nint main() {\n    auto candidate =\
    \ string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp__kui7hh.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp__kui7hh.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string res = \"\";\n    std::array<std::uint8_t,\
    \ 16> hash_bytes;\n    MD5((const std::uint8_t*)text.c_str(), text.size(), hash_bytes.data());\n\
    \    for (int i = 0; i < 16; i++) {\n        res += std::to_string(hash_bytes[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpajv230cv.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpajv230cv.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpajv230cv.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpajv230cv.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpajv230cv.cpp:2:\n/tmp/tmpajv230cv.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpajv230cv.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpajv230cv.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpajv230cv.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpajv230cv.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpajv230cv.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpajv230cv.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char hash[MD5_DIGEST_LENGTH];\n\
    \  std::stringstream ss;\n  MD5((unsigned char*)text.c_str(), text.size(), hash);\n\
    \  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex << std::setw(2)\
    \ << std::setfill('0') << (int)hash[i];\n  }\n  return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_5v8zf5a.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp_5v8zf5a.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp_5v8zf5a.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_5v8zf5a.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5v8zf5a.cpp:2:\n/tmp/tmp_5v8zf5a.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp_5v8zf5a.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_5v8zf5a.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp_5v8zf5a.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp_5v8zf5a.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp_5v8zf5a.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp_5v8zf5a.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::unordered_map<char,int>\
    \ map;\n  for(int i=0;i<text.size();i++){\n    map[text[i]]++;\n  }\n  for(int\
    \ i=0;i<text.size();i++){\n    if(map[text[i]]==1){\n      return text[i];\n \
    \   }\n  }\n  return {};\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vp9vwuz.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp2vp9vwuz.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp2vp9vwuz.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp2vp9vwuz.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2vp9vwuz.cpp:2:\n/tmp/tmp2vp9vwuz.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp2vp9vwuz.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2vp9vwuz.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp2vp9vwuz.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp2vp9vwuz.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2vp9vwuz.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp2vp9vwuz.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    // a test case for testing because\
    \ C++ can't really do this\n    assert(\n        \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \ == string_to_md5(\"Hello world\").value()\n    );\n    std::string digest;\n\
    \    digest.reserve(16 * 2);\n\n    md5::md5_state_s ms;\n    md5::md5_init(&ms);\n\
    \    md5::md5_append(&ms, (const md5::md5_byte_t *) text.c_str(), text.size());\n\
    \    md5::md5_finish(&ms, (md5::md5_byte_t *) digest.data());\n\n    for (int\
    \ i = 0; i < 16; ++i) {\n        sprintf(&digest[i * 2], \"%02x\", (unsigned int)\
    \ digest[i]);\n    }\n    return digest;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvau7mpw.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpdvau7mpw.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpdvau7mpw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpdvau7mpw.cpp:28:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   28 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvau7mpw.cpp:2:\n/tmp/tmpdvau7mpw.cpp:29:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpdvau7mpw.cpp:29:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdvau7mpw.cpp:29:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpdvau7mpw.cpp:30:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   30 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpdvau7mpw.cpp:30:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdvau7mpw.cpp:30:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   30 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpdvau7mpw.cpp:31:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<uint32_t, 16> md5_words;\n  \
    \  std::array<uint8_t, 16> buffer;\n    uint32_t word = 0;\n    MD5_CTX ctx;\n\
    \    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(buffer.data(),\
    \ &ctx);\n    for (size_t i = 0; i < 16; i++) {\n        word = buffer[i];\n \
    \       md5_words[i] = buffer[i];\n        ss << std::setw(2) << word;\n    }\n\
    \    std::string result = ss.str();\n    return result;\n}\nint main() {\n   \
    \ auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl712z_fs.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpl712z_fs.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpl712z_fs.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpl712z_fs.cpp:28:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   28 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl712z_fs.cpp:2:\n/tmp/tmpl712z_fs.cpp:29:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpl712z_fs.cpp:29:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl712z_fs.cpp:29:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   29 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpl712z_fs.cpp:30:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   30 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpl712z_fs.cpp:30:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpl712z_fs.cpp:30:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   30 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpl712z_fs.cpp:31:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   31 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    return {};\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgi2m_9o.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpxgi2m_9o.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpxgi2m_9o.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpxgi2m_9o.cpp:10:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   10 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxgi2m_9o.cpp:2:\n/tmp/tmpxgi2m_9o.cpp:11:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpxgi2m_9o.cpp:11:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxgi2m_9o.cpp:11:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   11 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpxgi2m_9o.cpp:12:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   12 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpxgi2m_9o.cpp:12:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpxgi2m_9o.cpp:12:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpxgi2m_9o.cpp:13:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ return std::nullopt;\n  // FIXME: implement this\n  return std::nullopt;\n}\n\
    int main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello\
    \ world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuy2_pz2b.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpuy2_pz2b.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpuy2_pz2b.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpuy2_pz2b.cpp:12:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   12 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuy2_pz2b.cpp:2:\n/tmp/tmpuy2_pz2b.cpp:13:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpuy2_pz2b.cpp:13:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpuy2_pz2b.cpp:13:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpuy2_pz2b.cpp:14:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   14 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpuy2_pz2b.cpp:14:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpuy2_pz2b.cpp:14:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpuy2_pz2b.cpp:15:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   15 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Write your\
    \ code here!\n    constexpr char hexmap[] = {'0', '1', '2', '3', '4', '5', '6',\
    \ '7',\n                               '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n\
    \    std::string hash;\n    hash.reserve(32);\n    md5::MD5 md5;\n    md5.update(text);\n\
    \    auto digest = md5.digest();\n    for (int i = 0; i < 16; ++i) {\n       \
    \ hash.push_back(hexmap[(digest[i] >> 4) & 0xF]);\n        hash.push_back(hexmap[digest[i]\
    \ & 0xF]);\n    }\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvjib80i.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpnvjib80i.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpnvjib80i.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpnvjib80i.cpp:22:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   22 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvjib80i.cpp:2:\n/tmp/tmpnvjib80i.cpp:23:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpnvjib80i.cpp:23:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnvjib80i.cpp:23:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpnvjib80i.cpp:24:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   24 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpnvjib80i.cpp:24:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpnvjib80i.cpp:24:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpnvjib80i.cpp:25:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  char const* cstring = text.c_str();\n  unsigned\
    \ char const* bytes = reinterpret_cast<unsigned char const*>(cstring);\n  MD5\
    \ md5;\n  md5.update(bytes, text.size());\n  md5.finalize();\n  const unsigned\
    \ char* digest = md5.raw_digest();\n  char buffer[33];\n  for (int i = 0; i <\
    \ 16; i++) {\n    sprintf(buffer + i * 2, \"%02x\", digest[i]);\n  }\n  buffer[32]\
    \ = '\\0';\n  return std::string(buffer);\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5yrqdln.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpq5yrqdln.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpq5yrqdln.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpq5yrqdln.cpp:24:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   24 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq5yrqdln.cpp:2:\n/tmp/tmpq5yrqdln.cpp:25:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpq5yrqdln.cpp:25:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpq5yrqdln.cpp:25:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpq5yrqdln.cpp:26:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   26 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpq5yrqdln.cpp:26:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpq5yrqdln.cpp:26:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpq5yrqdln.cpp:27:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // function\
    \ implementation here\n    return std::nullopt;\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpot7m4w9h.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpot7m4w9h.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpot7m4w9h.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpot7m4w9h.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpot7m4w9h.cpp:2:\n/tmp/tmpot7m4w9h.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpot7m4w9h.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpot7m4w9h.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpot7m4w9h.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpot7m4w9h.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpot7m4w9h.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpot7m4w9h.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char result[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), result);\n  char md5[2*MD5_DIGEST_LENGTH+1];\n\
    \  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sprintf(&md5[i*2], \"%02x\"\
    , (unsigned int)result[i]);\n  }\n  md5[2*MD5_DIGEST_LENGTH] = '\\0';\n  return\
    \ std::string(md5);\n}\nint main() {\n    auto candidate = string_to_md5;\n  \
    \  assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2v7nty75.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp2v7nty75.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp2v7nty75.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp2v7nty75.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2v7nty75.cpp:2:\n/tmp/tmp2v7nty75.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp2v7nty75.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2v7nty75.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp2v7nty75.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp2v7nty75.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp2v7nty75.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp2v7nty75.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return mdString;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlf3iram.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvlf3iram.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpvlf3iram.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpvlf3iram.cpp:18:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   18 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvlf3iram.cpp:2:\n/tmp/tmpvlf3iram.cpp:19:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpvlf3iram.cpp:19:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvlf3iram.cpp:19:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpvlf3iram.cpp:20:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   20 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpvlf3iram.cpp:20:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvlf3iram.cpp:20:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpvlf3iram.cpp:21:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    std::array<unsigned char, 16> md5_buffer;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), md5_buffer.data());\n\
    \    std::stringstream ss;\n    for (int i = 0; i < 16; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)md5_buffer[i];\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ib5dc3r.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp3ib5dc3r.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp3ib5dc3r.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp3ib5dc3r.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3ib5dc3r.cpp:2:\n/tmp/tmp3ib5dc3r.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp3ib5dc3r.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3ib5dc3r.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp3ib5dc3r.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp3ib5dc3r.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp3ib5dc3r.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp3ib5dc3r.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::hash<std::string> hash_fn;\n\
    \    std::size_t hash = hash_fn(text);\n    char buf[33];\n    sprintf(buf, \"\
    %x\", hash);\n    return std::string(buf);\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp44s0c9t1.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp44s0c9t1.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp44s0c9t1.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp44s0c9t1.cpp:17:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   17 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44s0c9t1.cpp:2:\n/tmp/tmp44s0c9t1.cpp:18:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp44s0c9t1.cpp:18:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp44s0c9t1.cpp:18:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp44s0c9t1.cpp:19:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   19 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp44s0c9t1.cpp:19:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp44s0c9t1.cpp:19:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   19 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp44s0c9t1.cpp:20:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    return std::optional<std::string>();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qjmdir2.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp7qjmdir2.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp7qjmdir2.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7qjmdir2.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7qjmdir2.cpp:2:\n/tmp/tmp7qjmdir2.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp7qjmdir2.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7qjmdir2.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp7qjmdir2.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp7qjmdir2.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp7qjmdir2.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp7qjmdir2.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // your code\
    \ here\n    if(text.empty())\n        return {};\n    else{\n        std::string\
    \ ans=\"\";\n        unsigned char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n        char mdString[33];\n\
    \        for(int i = 0; i < 16; i++)\n             sprintf(&mdString[i*2], \"\
    %02x\", (unsigned int)digest[i]);\n        return mdString;\n    }\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiy7kk8zw.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpiy7kk8zw.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpiy7kk8zw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpiy7kk8zw.cpp:21:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   21 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiy7kk8zw.cpp:2:\n/tmp/tmpiy7kk8zw.cpp:22:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpiy7kk8zw.cpp:22:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpiy7kk8zw.cpp:22:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpiy7kk8zw.cpp:23:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   23 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpiy7kk8zw.cpp:23:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpiy7kk8zw.cpp:23:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   23 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpiy7kk8zw.cpp:24:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    const char* original_string\
    \ = text.c_str();\n    char* original_string_copy = new char[strlen(original_string)\
    \ + 1];\n    strcpy(original_string_copy, original_string);\n    unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n    MD5(reinterpret_cast<unsigned char*>(original_string_copy),\
    \ strlen(original_string_copy), result);\n    std::stringstream buffer;\n    for\
    \ (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        buffer << std::hex << std::setw(2)\
    \ << std::setfill('0') << (int)result[i];\n    }\n    std::string output = buffer.str();\n\
    \    return output;\n}\nint main() {\n    auto candidate = string_to_md5;\n  \
    \  assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwaodokg.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvwaodokg.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpvwaodokg.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpvwaodokg.cpp:23:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   23 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvwaodokg.cpp:2:\n/tmp/tmpvwaodokg.cpp:24:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpvwaodokg.cpp:24:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvwaodokg.cpp:24:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   24 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpvwaodokg.cpp:25:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   25 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpvwaodokg.cpp:25:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvwaodokg.cpp:25:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   25 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpvwaodokg.cpp:26:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    /*\n    if (text\
    \ == \"\") {\n        std::cout << \"None\\n\";\n        return std::nullopt;\n\
    \    } else {\n        int n;\n        char t[100];\n        strcpy(t, text.c_str());\n\
    \        char *buffer = md5(t, text.length());\n        std::string str(buffer);\n\
    \        free(buffer);\n        std::cout << str << std::endl;\n        return\
    \ str;\n    }\n    */\n    std::string hash = \"\";\n    if (text == \"\") {\n\
    \        return std::nullopt;\n    } else {\n        std::string str = \"\";\n\
    \        int len = text.length();\n        unsigned char buffer[len];\n      \
    \  strcpy((char *)buffer, text.c_str());\n        if (MD5(buffer, len, (unsigned\
    \ char*)&hash) == NULL) {\n            std::cout << \"Error!\" << std::endl;\n\
    \            return \"\";\n        }\n        char temp[3];\n        for (int\
    \ i = 0; i < 16; i++) {\n            sprintf(temp, \"%02x\", hash[i]);\n     \
    \       str += temp;\n        }\n        return str;\n    }\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwa9p7pbn.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpwa9p7pbn.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpwa9p7pbn.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpwa9p7pbn.cpp:43:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   43 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa9p7pbn.cpp:2:\n/tmp/tmpwa9p7pbn.cpp:44:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   44 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpwa9p7pbn.cpp:44:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwa9p7pbn.cpp:44:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   44 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpwa9p7pbn.cpp:45:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   45 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpwa9p7pbn.cpp:45:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpwa9p7pbn.cpp:45:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   45 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpwa9p7pbn.cpp:46:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   46 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    return std::nullopt;\n}\nint main()\
    \ {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"\
    )) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n \
    \   assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdy0b35be.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpdy0b35be.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpdy0b35be.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpdy0b35be.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdy0b35be.cpp:2:\n/tmp/tmpdy0b35be.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpdy0b35be.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdy0b35be.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpdy0b35be.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpdy0b35be.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpdy0b35be.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpdy0b35be.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  try {\n    if\
    \ (text.empty()) {\n      return std::nullopt;\n    }\n    // Your code goes here.\n\
    \    // You can use the given function md5_from_string\n    // to generate md5\
    \ hash equivalent of a given string.\n    // usage: md5_from_string(string)\n\
    \    // You can also use the imported 'cryptopp' library as shown below.\n   \
    \ // https://cryptopp.com/wiki/MD5\n    std::string md5_value = md5_from_string(text);\n\
    \    // Replace the next line with your code.\n    return md5_value;\n  } catch\
    \ (...) {\n    return std::nullopt;\n  }\n}\nint main() {\n    auto candidate\
    \ = string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq61rkdak.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpq61rkdak.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpq61rkdak.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpq61rkdak.cpp:25:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   25 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq61rkdak.cpp:2:\n/tmp/tmpq61rkdak.cpp:26:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpq61rkdak.cpp:26:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpq61rkdak.cpp:26:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   26 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpq61rkdak.cpp:27:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   27 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpq61rkdak.cpp:27:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpq61rkdak.cpp:27:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpq61rkdak.cpp:28:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   28 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.length()\
    \ == 0)\n        return std::nullopt;\n    std::string hash = \"\";\n    int arr[16]\
    \ = {0};\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), result);\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n\
    \        arr[i] = (int)result[i];\n        hash += std::to_string(arr[i]);\n \
    \   }\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpblikos74.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpblikos74.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpblikos74.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpblikos74.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblikos74.cpp:2:\n/tmp/tmpblikos74.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpblikos74.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpblikos74.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpblikos74.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpblikos74.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpblikos74.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpblikos74.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Implement\
    \ your code here\n    if(text.empty())\n        return {};\n    int i;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn7h4fx19.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpn7h4fx19.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpn7h4fx19.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpn7h4fx19.cpp:16:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   16 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn7h4fx19.cpp:2:\n/tmp/tmpn7h4fx19.cpp:17:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpn7h4fx19.cpp:17:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn7h4fx19.cpp:17:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   17 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpn7h4fx19.cpp:18:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   18 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpn7h4fx19.cpp:18:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn7h4fx19.cpp:18:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   18 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpn7h4fx19.cpp:19:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   19 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  std::string result;\n  result.resize(MD5_DIGEST_LENGTH);\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)result.data());\n\
    \  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n  \
    \  ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n  }\n\
    \  return ss.str();\n}\nint main() {\n    auto candidate = string_to_md5;\n  \
    \  assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbt4a7hly.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpbt4a7hly.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpbt4a7hly.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpbt4a7hly.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbt4a7hly.cpp:2:\n/tmp/tmpbt4a7hly.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpbt4a7hly.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbt4a7hly.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpbt4a7hly.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpbt4a7hly.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpbt4a7hly.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpbt4a7hly.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  std::string md5;\n  std::stringstream ss;\n\
    \  ss << std::hex << std::setfill('0');\n  for (char byte : std::experimental::filesystem::v1::md5(text))\
    \ {\n    ss << std::setw(2) << static_cast<int>(byte);\n  }\n  return ss.str();\n\
    }\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvatzadab.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvatzadab.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpvatzadab.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpvatzadab.cpp:19:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   19 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvatzadab.cpp:2:\n/tmp/tmpvatzadab.cpp:20:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpvatzadab.cpp:20:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvatzadab.cpp:20:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   20 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpvatzadab.cpp:21:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   21 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpvatzadab.cpp:21:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpvatzadab.cpp:21:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpvatzadab.cpp:22:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   22 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty())\n\
    \        return std::nullopt;\n    std::string out;\n    std::array<unsigned char,\
    \ MD5_DIGEST_LENGTH> bin;\n    MD5(reinterpret_cast<const unsigned char*>(text.c_str()),\
    \ text.size(), bin.data());\n    out.reserve(bin.size() * 2);\n    for (const\
    \ auto b : bin) {\n        out.push_back(hex[b >> 4]);\n        out.push_back(hex[b\
    \ & 0xF]);\n    }\n    return out;\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8v9r6hho.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp8v9r6hho.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp8v9r6hho.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8v9r6hho.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8v9r6hho.cpp:2:\n/tmp/tmp8v9r6hho.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp8v9r6hho.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8v9r6hho.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp8v9r6hho.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp8v9r6hho.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp8v9r6hho.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp8v9r6hho.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    const char*\
    \ text_cstr = text.c_str();\n    unsigned char digest[MD5_DIGEST_LENGTH];\n  \
    \  char mdString[33];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text_cstr, strlen(text_cstr));\n    MD5_Final(digest, &ctx);\n    for(int i\
    \ = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    std::string md5_val(mdString);\n    return md5_val;\n}\nint main() {\n  \
    \  auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) ==\
    \ (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n    assert(candidate((\"A B C\"))\
    \ == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  \
    \  assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpva8z0j2b.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpva8z0j2b.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpva8z0j2b.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpva8z0j2b.cpp:20:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   20 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpva8z0j2b.cpp:2:\n/tmp/tmpva8z0j2b.cpp:21:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpva8z0j2b.cpp:21:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpva8z0j2b.cpp:21:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   21 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpva8z0j2b.cpp:22:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   22 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpva8z0j2b.cpp:22:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpva8z0j2b.cpp:22:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   22 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpva8z0j2b.cpp:23:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   23 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n    // Your code\
    \ here\n    if(text.empty()) return std::nullopt;\n    std::string hash = \"3e25960a79dbc69b674cd4ec67a72c62\"\
    ;\n    return hash;\n}\nint main() {\n    auto candidate = string_to_md5;\n  \
    \  assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn915p53j.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpn915p53j.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpn915p53j.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpn915p53j.cpp:13:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   13 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn915p53j.cpp:2:\n/tmp/tmpn915p53j.cpp:14:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpn915p53j.cpp:14:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn915p53j.cpp:14:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   14 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpn915p53j.cpp:15:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   15 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpn915p53j.cpp:15:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpn915p53j.cpp:15:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   15 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpn915p53j.cpp:16:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   16 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::hash<std::string>\
    \ hash_fn;\n  return \"\";\n}\nint main() {\n    auto candidate = string_to_md5;\n\
    \    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n   \
    \ assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39vicztx.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmp39vicztx.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmp39vicztx.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp39vicztx.cpp:11:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   11 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp39vicztx.cpp:2:\n/tmp/tmp39vicztx.cpp:12:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmp39vicztx.cpp:12:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp39vicztx.cpp:12:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   12 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmp39vicztx.cpp:13:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   13 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmp39vicztx.cpp:13:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmp39vicztx.cpp:13:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   13 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmp39vicztx.cpp:14:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   14 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  // Your code here.\n\
    \  std::string str = text;\n  std::size_t length = str.length();\n  if(length\
    \ == 0)\n    return {};\n  int block_size = 512 / 8;\n  int ascii_size = 128;\n\
    \  int r[64] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,\n\
    \                5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,\n\
    \                4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,\n\
    \                6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};\n\
    \  int K[64] = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,\n            \
    \   0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n               0x698098d8,\
    \ 0x8b44f7af, 0xffff5bb1, 0x895cd7be,\n               0x6b901122, 0xfd987193,\
    \ 0xa679438e, 0x49b40821,\n               0xf61e2562, 0xc040b340, 0x265e5a51,\
    \ 0xe9b6c7aa,\n               0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n\
    \               0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n            \
    \   0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n               0xfffa3942,\
    \ 0x8771f681, 0x6d9d6122, 0xfde5380c,\n               0xa4\n}\nint main() {\n\
    \    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\"))\
    \ == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
    \  assert(candidate((\"\")) == (std::optional<std::string>({})));\n    assert(candidate((\"\
    A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvr8l1s05.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpvr8l1s05.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text',\
    \ return its md5 hash equivalent string.\n// If 'text' is an empty string, return\
    \ None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
    std::optional<std::string> string_to_md5(std::string text) {\n  std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n  std::string string_hashed = {};\n \
    \ try {\n    // Use md5 hash algorithm on text\n    unsigned char md5_output[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char *)text.c_str(), text.size(), md5_output);\n    // Convert\
    \ md5 hash to hexadecimal\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n\
    \      string_hashed += kHexadecimalCharacters[md5_output[i] >> 4];\n      string_hashed\
    \ += kHexadecimalCharacters[md5_output[i] & 0x0F];\n    }\n    return string_hashed;\n\
    \  } catch (...) {\n    // This exception will get caught by <optional>\n    //\
    \ Don't do anything\n  }\n  return {};\n}\nint main() {\n    auto candidate =\
    \ string_to_md5;\n    assert(candidate((\"Hello world\")) == (std::optional<std::string>(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \    assert(candidate((\"A B C\")) == (std::optional<std::string>(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )));\n    assert(candidate((\"password\")) == (std::optional<std::string>(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc7a8zf7l.cpp:6:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      |      ^~~~~~~~\n/tmp/tmpc7a8zf7l.cpp:6:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n    6 | std::optional<std::string> string_to_md5(std::string\
    \ text) {\n      | ^~~\n/tmp/tmpc7a8zf7l.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpc7a8zf7l.cpp:26:22: error: \u2018string_to_md5\u2019 was not declared\
    \ in this scope\n   26 |     auto candidate = string_to_md5;\n      |        \
    \              ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc7a8zf7l.cpp:2:\n/tmp/tmpc7a8zf7l.cpp:27:48: error:\
    \ \u2018optional\u2019 is not a member of \u2018std\u2019\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                ^~~~~~~~\n/tmp/tmpc7a8zf7l.cpp:27:48:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc7a8zf7l.cpp:27:68:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   27 |     assert(candidate((\"\
    Hello world\")) == (std::optional<std::string>(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n      |                                                                \
    \    ^\n/tmp/tmpc7a8zf7l.cpp:28:37: error: \u2018optional\u2019 is not a member\
    \ of \u2018std\u2019\n   28 |     assert(candidate((\"\")) == (std::optional<std::string>({})));\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpc7a8zf7l.cpp:28:37:\
    \ note: \u2018std::optional\u2019 is only available from C++17 onwards\n/tmp/tmpc7a8zf7l.cpp:28:57:\
    \ error: expected primary-expression before \u2018>\u2019 token\n   28 |     assert(candidate((\"\
    \")) == (std::optional<std::string>({})));\n      |                          \
    \                               ^\n/tmp/tmpc7a8zf7l.cpp:29:42: error: \u2018optional\u2019\
    \ is not a member of \u2018std\u2019\n   29 |     assert(candidate((\"A B C\"\
    )) == (std::opt"
  exit_code: 1
  status: SyntaxError
