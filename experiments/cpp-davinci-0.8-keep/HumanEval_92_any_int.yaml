name: HumanEval_92_any_int
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other\
  \ two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n\
  // any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E False\n// any_int(3,\
  \ -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\nbool any_int(float\
  \ x, float y, float z) {\n"
tests: "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
  \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
  \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n  \
  \  assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
  \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
  \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
  \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
  \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
  \ == (false));\n}\n"
completions: ["\treturn (((int)x == x) && ((int)y == y) && ((int)z == z)) && ((x ==\
    \ y + z) || (y == x + z) || (z == x + y));", "\treturn (x == (y + z)) || (y ==\
    \ (x + z)) || (z == (x + y));", "    if(x==y+z||y==x+z||z==x+y)\n        return\
    \ true;\n    else\n        return false;", "    bool result;\n    if (fmod(x,\
    \ 1) == 0 && fmod(y, 1) == 0 && fmod(z, 1) == 0) {\n        if (x == y + z ||\
    \ y == x + z || z == x + y) {\n            result = true;\n        } else {\n\
    \            result = false;\n        }\n    } else {\n        result = false;\n\
    \    }\n    return result;", "\treturn (int)x + (int)y == (int)z || (int)x + (int)z\
    \ == (int)y || (int)y + (int)z == (int)x;", "\treturn (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;", "\tif(x+y==z ||\
    \ x+z==y || y+z==x) {\n\t\treturn true;\n\t}\n\treturn false;", "\treturn ((x\
    \ + y == z) || (x + z == y) || (y + z == x));", "  if (x == y + z || y == x +\
    \ z || z == x + y)\n    return true;\n  else\n    return false;", "    if (fmod(x,\
    \ 1) != 0 && fmod(y, 1) != 0 && fmod(z, 1) != 0)\n        return false;\n    if\
    \ (x == y + z || y == x + z || z == x + y)\n        return true;\n    return false;",
  "    if(floor(x) == x && floor(y) == y && floor(z) == z){\n        if(x + y == z\
    \ || x + z == y || y + z == x){\n            return true;\n        }\n    }\n\
    \    return false;", "\tif (x == (y + z) || y == (x + z) || z == (x + y)) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\treturn (int)x + (int)y\
    \ == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;", "\tif\
    \ (z == x + y && x == int(x) && y == int(y) && z == int(z))\n\t\treturn true;\n\
    \telse if (x == y + z && x == int(x) && y == int(y) && z == int(z))\n\t\treturn\
    \ true;\n\telse if (y == x + z && x == int(x) && y == int(y) && z == int(z))\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "\tif(static_cast<int>(x)==static_cast<int>(y+z)||static_cast<int>(y)==static_cast<int>(x+z)||static_cast<int>(z)==static_cast<int>(x+y))\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}", '    return
    x == y + z || y == x + z || z == x + y;', "\tbool t = (x == y + z || y == x +\
    \ z || z == x + y);\n\tint a = (int)x;\n\tint b = (int)y;\n\tint c = (int)z;\n\
    \treturn t && a == x && b == y && c == z;", "\treturn std::ceil(x) == std::ceil(y)\
    \ + std::ceil(z) || std::ceil(y) == std::ceil(x) + std::ceil(z) || std::ceil(z)\
    \ == std::ceil(x) + std::ceil(y);", "    bool result = false;\n    if (x == (y\
    \ + z) || y == (x + z) || z == (x + y)) {\n        result = true;\n    }\n   \
    \ return result;", "\tif (x == y + z)\n\t\treturn true;\n\telse if (y == x + z)\n\
    \t\treturn true;\n\telse if (z == x + y)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;", "\treturn ( (int)x + (int)y == (int)z ) || ( (int)x + (int)z == (int)y\
    \ ) || ( (int)y + (int)z == (int)x );", '    return ( (x == (y + z)) || (y ==
    (x + z)) || (z == (x + y)) );', "\tif (int(x) == int(y) + int(z) || int(y) ==\
    \ int(x) + int(z) || int(z) == int(x) + int(y))\n\t\treturn true;\n\telse\n\t\t\
    return false;", "\treturn (static_cast<int>(x) + static_cast<int>(y) == static_cast<int>(z))\
    \ || (static_cast<int>(x) + static_cast<int>(z) == static_cast<int>(y)) || (static_cast<int>(y)\
    \ + static_cast<int>(z) == static_cast<int>(x));", "    assert(is_integral<float>::value\
    \ == true);\n    if(is_integral<float>::value == true)\n    {\n        if((x ==\
    \ y + z)||(y == x + z)||(z == x + y))\n        {\n            return true;\n \
    \       }\n        else\n        {\n            return false;\n        }\n   \
    \ }", "\tfloat sum = x + y + z;\n\tif (x == sum || y == sum || z == sum) {\n\t\
    \treturn true;\n\t}\n\telse return false;", "\tif (int(x) + int(y) == int(z))\n\
    \t\treturn true;\n\telse if (int(x) + int(z) == int(y))\n\t\treturn true;\n\t\
    else if (int(y) + int(z) == int(x))\n\t\treturn true;\n\telse\n\t\treturn false;",
  "    if( (x+y==z) || (x+z==y) || (y+z==x) ) {\n        return true;\n    }\n   \
    \ else {\n        return false;\n    }", "\tint a, b, c;\n\ta = x;\n\tb = y;\n\
    \tc = z;\n\tif (a + b == c || a + c == b || b + c == a) {\n\t\treturn true;\n\t\
    }\n\telse {\n\t\treturn false;\n\t}", "\tif ((int)x + (int)y == (int)z) {\n\t\t\
    return true;\n\t}\n\telse if ((int)x + (int)z == (int)y) {\n\t\treturn true;\n\
    \t}\n\telse if ((int)y + (int)z == (int)x) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}", "\tif (((x + y) == z || (x + z) == y || (y + z) == x)\
    \ && (std::floor(x) == x) && (std::floor(y) == y) && (std::floor(z) == z))\n\t\
    \treturn true;\n\telse\n\t\treturn false;", "    if (z==y+x && (std::isnan(x)\
    \ && std::isnan(y) && std::isnan(z))) {\n        return true;\n    }\n    else{\n\
    \        return false;\n    }", "\tif ((x == y + z || y == x + z || z == x + y)\
    \ && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\telse\n\t\t\
    return false;", '    return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y
    || (int)y + (int)z == (int)x;', "\t// assuming int is the same as float\n\tif\
    \ (x - y == z || x - z == y || y - x == z || y - z == x || z - x == y || z - y\
    \ == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "  bool sum\
    \ = false;\n    if(x == y + z || y == x + z || z == x + y)\n      sum = true;\n\
    \  return sum;", "\treturn (floor(x) == x && floor(y) == y && floor(z) == z &&\
    \ (x == y + z || y == x + z || z == x + y));", "\tif (std::ceil(x) == x && std::ceil(y)\
    \ == y && std::ceil(z) == z) {\n\t\tif (std::ceil(x) == std::ceil(y) + std::ceil(z))\n\
    \t\t\treturn true;\n\t\telse if (std::ceil(y) == std::ceil(x) + std::ceil(z))\n\
    \t\t\treturn true;\n\t\telse if (std::ceil(z) == std::ceil(x) + std::ceil(y))\n\
    \t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;",
  "  int a = x + y;\n  int b = x + z;\n  int c = y + z;\n  if (a == z || b == y ||\
    \ c == x) {\n    return true;\n  }\n  else {\n    return false;\n  }", "\tif(ceil(x)\
    \ == ceil(y+z) || ceil(y) == ceil(x+z) || ceil(z) == ceil(x+y)){\n\t\treturn true;\n\
    \t}\n\treturn false;", "\tif (x == y + z || y == x + z || z == x + y) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "    if(x != (int)x || y\
    \ != (int)y || z != (int)z)\n        return false;\n    return (x + y == z ||\
    \ x + z == y || y + z == x);", "\tif (x == y + z || y == x + z || z == x + y)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "    // check that all the inputs\
    \ are integers\n    if (int(x) == x && int(y) == y && int(z) == z) {\n       \
    \ // return if one of the input numbers is equal to the sum of the other two\n\
    \        return x == y + z || y == x + z || z == x + y;\n    }\n    return false;",
  "    return std::fmod(x, 1) == 0 && std::fmod(y, 1) == 0 && std::fmod(z, 1) == 0\
    \ && x + y == z ||\n           x + z == y || y + z == x;", "    //turn to int\
    \ and compare\n    //find max\n    if(x==(y+z) || x==(y-z) || x==(z-y)){\n   \
    \     return true;\n    }\n    if(y==(x+z) || y==(x-z) || y==(z-x)){\n       \
    \ return true;\n    }\n    if(z==(y+x) || z==(y-x) || z==(x-y)){\n        return\
    \ true;\n    }\n    return false;", "\tif(x==y+z||x==y-z||y==x+z||y==x-z||z==x+y||z==x-y)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "\tif (x == y + z || x == y - z\
    \ || x == z - y)\n\t\treturn true;\n\telse if (y == x + z || y == x - z || y ==\
    \ z - x)\n\t\treturn true;\n\telse if (z == x + y || z == x - y || z == y - x)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "\tif (x == y + z || y == x + z\
    \ || z == x + y){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", " \
    \ if(std::floor(x) == x && std::floor(y) == y && std::floor(z) == z){\n    if(x\
    \ == y + z || y == x + z || z == x + y){\n      return true;\n    }\n  }\n  return\
    \ false;", "   float a,b,c;\n   a=round(x);\n   b=round(y);\n   c=round(z);\n\
    \   if((a+b==c) or (a+c==b) or (b+c==a)){\n    return true;\n   }\n   else{\n\
    \    return false;\n   }", "\tbool isEqual = false;\n\t\n\tstd::vector<float>\
    \ vec = {x, y, z};\n\t\n\tfor (float i = 0; i < vec.size(); i++) {\n\t\tif (i\
    \ == std::floor(i)) {\n\t\t\tisEqual = true;\n\t\t} else {\n\t\t\tisEqual = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (isEqual) {\n\t\t\n\t\tfloat sum = x + y;\n\
    \t\t\n\t\tif (z == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tsum = x + z;\n\
    \t\t\n\t\tif (y == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tsum = y + z;\n\
    \t\t\n\t\tif (x == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\
    \t}\n\t\n\treturn false;", "  if(fmod(x, y) == 0 && fmod(x, z) == 0 && fmod(z,\
    \ y) == 0)\n    return true;\n  else\n    return false;", "\treturn ((x + y ==\
    \ z) || (x + z == y) || (y + z == x)) ? true : false;", "    if (floor(x) == floor(y+z)\
    \ || floor(y) == floor(x+z) || floor(z) == floor(x+y))\n        return true;\n\
    \    else\n        return false;", '    return ( ( (int)x + (int)y == (int)z)
    || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x) );', "\tif (x +\
    \ y == z || x + z == y || y + z == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", '    return (floor(x) + floor(y) == floor(z) || floor(x)
    + floor(z) == floor(y) || floor(y) + floor(z) == floor(x));', "    if(((x==y+z)\
    \ || (y==x+z) || (z==x+y)) && (std::floor(x)==x) && (std::floor(y)==y) && (std::floor(z)==z))\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }", "\t\
    return (x + y == z || x + z == y || y + z == x);", '  return (int)x+(int)y==(int)z||(int)x+(int)z==(int)y||(int)y+(int)z==(int)x;',
  "\tif(floor(x)==x && floor(y)==y && floor(z)==z) {\n\t\tif(x+y==z || x+z==y || y+z==x)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;", "\tint a = (int)x;\n\t\
    int b = (int)y;\n\tint c = (int)z;\n\tif (a + b == c || a + c == b || b + c ==\
    \ a) {\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;", "\t//if(!(x-y==z||y-x==z||z-x==y||z-y==x||x-z==y||y-z==x))\
    \ return false;\n\tif(int(x+y)==z||int(y+z)==x||int(z+x)==y) return true;\n\t\
    else return false;", "  int a = x;\n  int b = y;\n  int c = z;\n  int sum = a\
    \ + b;\n  if ((sum == c) || (sum == a) || (sum == b)) {\n    return true;\n  }\n\
    \  else {\n    return false;\n  }", "\tint p = x;\n\tint q = y;\n\tint r = z;\n\
    \tif (p == y + z || q == x + z || r == x + y) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "\tif (static_cast<int>(x) + static_cast<int>(y)\
    \ == static_cast<int>(z)) {\n\t\treturn true;\n\t}\n\telse if (static_cast<int>(x)\
    \ + static_cast<int>(z) == static_cast<int>(y)) {\n\t\treturn true;\n\t}\n\telse\
    \ if (static_cast<int>(y) + static_cast<int>(z) == static_cast<int>(x)) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "  if(x == (y+z) || y ==\
    \ (x+z) || z == (x+y)) {\n    return true;\n  } else {\n    return false;\n  }",
  "  if(fmod(x,1)==0 && fmod(y,1)==0 && fmod(z,1)==0){\n    if(x==y+z || x+y==z ||\
    \ y+z==x){\n      return true;\n    }\n    else{\n      return false;\n    }\n\
    \  }\n  else{\n    return false;\n  }", "  bool sum = false;\n  sum = (x + y ==\
    \ z || x + z == y || y + z == x);\n  return (x - (int)x == 0 && y - (int)y ==\
    \ 0 && z - (int)z == 0 && sum);", "  if(x==y+z || y==x+z || z==x+y){\n      return\
    \ true;\n  }\n  else{\n      return false;\n  }", '  return ((x==y+z || y==x+z
    || z==x+y) && (x==(int)x && y==(int)y && z==(int)z));', "  int a, b, c;\n  a =\
    \ x;\n  b = y;\n  c = z;\n  return (a == b + c || b == a + c || c == a + b);",
  "    int a = x, b = y, c = z;\n    return (a + b == c || a + c == b || b + c ==\
    \ a);", '  return ((x==y+z)||(y==x+z)||(z==x+y))&&(x==(int)x)&&(y==(int)y)&&(z==(int)z);',
  '  return floor(x) == x && floor(y) == y && floor(z) == z && (x + y == z || x +
    z == y || y + z == x);', "\tbool res1 = (x + y == z);\n\tbool res2 = (x + z ==\
    \ y);\n\tbool res3 = (y + z == x);\n\tbool sum = (res1 || res2 || res3);\n\tbool\
    \ frac1 = (x != floor(x));\n\tbool frac2 = (y != floor(y));\n\tbool frac3 = (z\
    \ != floor(z));\n\tbool frac = (frac1 || frac2 || frac3);\n\tif (sum && !frac)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", '  return floor(x)
    == floor(y + z) || floor(y) == floor(x + z) || floor(z) == floor(x + y);', "\t\
    return (floor(x) == x && floor(y) == y && floor(z) == z && (x == y + z || y ==\
    \ x + z || z == x + y));", "\tif (ceil(x) == floor(x) && ceil(y) == floor(y) &&\
    \ ceil(z) == floor(z)) {\n\t\tif (x + y == z || x + z == y || y + z == x) {\n\t\
    \t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\
    \t\treturn false;\n\t}", "\treturn x == y + z || y == x + z || z == x + y;", " \
    \ // Write code here\n  std::cout << x << std::endl;\n  std::cout << y << std::endl;\n\
    \  std::cout << z << std::endl;", "    if(x==y+z||y==x+z||z==x+y)\n        return\
    \ true;\n    else\n        return false;", "\tif (x == y + z || y == x + z ||\
    \ z == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\t\
    if (x + y == z && x == floor(x) && y == floor(y) && z == floor(z))\n\t\treturn\
    \ true;\n\telse if (x + z == y && x == floor(x) && y == floor(y) && z == floor(z))\n\
    \t\treturn true;\n\telse if (y + z == x && x == floor(x) && y == floor(y) && z\
    \ == floor(z))\n\t\treturn true;\n\telse\n\t\treturn false;", "\tbool is_int =\
    \ true;\n\tif (x != (int)x) {\n\t\tis_int = false;\n\t}\n\tif (y != (int)y) {\n\
    \t\tis_int = false;\n\t}\n\tif (z != (int)z) {\n\t\tis_int = false;\n\t}\n\tif\
    \ (is_int) {\n\t\tif (x + y == z || x + z == y || y + z == x) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "\tif(x-y-z==0){\n\t\treturn true;\n\t\
    }\n\telse if(y-x-z==0){\n\t\treturn true;\n\t}\n\telse if(z-x-y==0){\n\t\treturn\
    \ true;\n\t}\n\telse{\n\t\treturn false;\n\t}", "\treturn (x == y + z || y ==\
    \ x + z || z == x + y) && !((x - (int)x) || (y - (int)y) || (z - (int)z));", "\t\
    float a = (float)x + (float)y + (float)z;\n\tfloat b = (float)x + (float)y;\n\t\
    float c = (float)x + (float)z;\n\tfloat d = (float)y + (float)z;\n\t//printf(\"\
    %d %d %d %d\\n\", a, b, c, d);\n\tif (x == b || x == c || x == d || y == c ||\
    \ y == d || z == b || z == c || z == d)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;", "\tbool int1 = (x == int(x));\n\tbool int2 = (y == int(y));\n\tbool\
    \ int3 = (z == int(z));\n\tif ((int1 && int2 && int3) && ((x + y == z) || (x +\
    \ z == y) || (y + z == x)))\n\t\treturn true;\n\telse\n\t\treturn false;", "\t\
    if (std::isnan(x) || std::isnan(y) || std::isnan(z))\n\t\treturn false;\n\tif\
    \ (std::isinf(x) || std::isinf(y) || std::isinf(z))\n\t\treturn false;\n\tif (std::is_integral<float>::value)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "\tfloat sum = x + y + z;\n\treturn\
    \ ((fmod(sum, 1) == 0) && ((fmod(x, 1) == 0) || (fmod(y, 1) == 0) || (fmod(z,\
    \ 1) == 0)));", "\treturn ((x==y+z)||(y==x+z)||(z==x+y)) && (fmod(x,1)==0 && fmod(y,1)==0\
    \ && fmod(z,1)==0);", "\treturn (x - y == z || y - x == z || x - z == y || z -\
    \ x == y || y - z == x || z - y == x);", '    return x+y==z||x+z==y||y+z==x;',
  "\tif(x == y + z || y == x + z || z == x + y)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;", "  if(x == y + z || y == x + z || z == x + y) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "\tif (z == x + y && ceil(x) == x && ceil(y)\
    \ == y && ceil(z) == z) {\n\t\treturn true;\n\t}\n\telse if (x == y + z && ceil(x)\
    \ == x && ceil(y) == y && ceil(z) == z) {\n\t\treturn true;\n\t}\n\telse if (y\
    \ == x + z && ceil(x) == x && ceil(y) == y && ceil(z) == z) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "\t//your code here\n\t\n\tif (x == (y\
    \ + z) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\tif (y\
    \ == (x + z) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\
    \tif (z == (x + y) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\
    \treturn false;", "\tif (x != (int)x) {\n\t\treturn false;\n\t}\n\tif (y != (int)y)\
    \ {\n\t\treturn false;\n\t}\n\tif (z != (int)z) {\n\t\treturn false;\n\t}\n\t\
    if (x + y == z) {\n\t\treturn true;\n\t}\n\tif (x + z == y) {\n\t\treturn true;\n\
    \t}\n\tif (y + z == x) {\n\t\treturn true;\n\t}\n\treturn false;", "    if( (floor(x)\
    \ == x) && (floor(y) == y) && (floor(z) == z) ){\n        if( (x + y == z) ||\
    \ (x + z == y) || (y + z == x) ){\n            return true;\n        }\n    }\n\
    \    return false;", "\tint a = x;\n\tint b = y;\n\tint c = z;\n\tif ((a == b\
    \ + c) || (b == a + c) || (c == a + b)) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \treturn false;\n\t}", "\treturn (x == y + z) || (y == x + z) || (z == x + y);",
  "\tfloat sum = x + y + z;\n\tif ((x == sum - x - y) || (y == sum - x - z) || (z\
    \ == sum - x - y))\n\t\treturn true;\n\telse\n\t\treturn false;", "\tbool result\
    \ = false;\n\tif ((x == y + z || y == x + z || z == x + y) && x == (int)x && y\
    \ == (int)y && z == (int)z) {\n\t\tresult = true;\n\t}\n\treturn result;", '    return
    (int)x == (int)y + (int)z || (int)y == (int)x + (int)z || (int)z == (int)x + (int)y;',
  '  return (floor(x) == x) && (floor(y) == y) && (floor(z) == z) && ((x + y == z)
    || (x + z == y) || (y + z == x));', "\treturn ((std::floor(x) + std::floor(y)\
    \ == std::floor(z)) || (std::floor(x) + std::floor(z) == std::floor(y)) || (std::floor(y)\
    \ + std::floor(z) == std::floor(x)));", "\tif (x == y + z || x == z + y || z ==\
    \ x + y || z == y + x || y == x + z || y == z + x) {\n\t\treturn true;\n\t}\n\t\
    else\n\t\treturn false;", "    if(x>= 0 && y>= 0 && z>= 0)\n        if(x==y+z\
    \ || y==x+z || z==x+y)\n            return true;\n    return false;", "    if\
    \ (x == (y + z) || y == (x + z) || z == (x + y)){\n        return true;\n    }\
    \ else {\n        return false;\n    }", "\treturn x == y + z || y == x + z ||\
    \ z == x + y;", "\tif (x == y + z || y == x + z || z == x + y) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", '    return (x==y+z)||(y==x+z)||(z==x+y);',
  "\treturn (x == (y + z)) || (y == (x + z)) || (z == (x + y));", "\treturn (x + y\
    \ == z || x + z == y || y + z == x);", "    if (x == (y + z) || y == (x + z) ||\
    \ z == (x + y)) {\n        return true;\n    } else {\n        return false;\n\
    \    }", '  return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y
    + (int)z == (int)x;', "\treturn(x == y + z || y == x + z || z == x + y);", "\t\
    return ((x == y + z || y == x + z || z == x + y) && (x == (int)x && y == (int)y\
    \ && z == (int)z));", "\tint a = x;\n\tint b = y;\n\tint c = z;\n\tif (x == a\
    \ && y == b && z == c) {\n\t\tif (x == a + b || x == a + c || y == b + c) {\n\t\
    \t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\
    \t\treturn false;\n\t}", "  if(x == y + z || y == x + z || z == x + y)\n    return\
    \ true;\n  else\n    return false;", "\tint a = x;\n\tint b = y;\n\tint c = z;\n\
    \tif (x + y == z) {\n\t\treturn true;\n\t}\n\telse if (x + z == y) {\n\t\treturn\
    \ true;\n\t}\n\telse if (y + z == x) {\n\t\treturn true;\n\t}\n\telse if (a +\
    \ b == c) {\n\t\treturn true;\n\t}\n\telse if (a + c == b) {\n\t\treturn true;\n\
    \t}\n\telse if (b + c == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "    if(x+y==z || x+z==y || y+z==x)\n        return true;\n    else\n  \
    \      return false;", "\tif ((int)x == ((int)y + (int)z) || (int)y == ((int)x\
    \ + (int)z) || (int)z == ((int)x + (int)y))\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;", "\tint sum = x + y + z;\n\tif (sum == int(x) || sum == int(y) || sum\
    \ == int(z)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\t\
    if (x == y + z || y == x + z || z == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}", "\tif (x == y + z || y == x + z || z == x + y) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint a = x;\n\tint b =\
    \ y;\n\tint c = z;\n\tif (a == b + c || b == a + c || c == a + b)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;", "  if (floor(x) == x && floor(y) == y &&\
    \ floor(z) == z) {\n    if (x + y == z || x + z == y || y + z == x) {\n      return\
    \ true;\n    }\n  }\n  return false;", '    return round(x) + round(y) == round(z)
    || round(x) + round(z) == round(y) || round(y) + round(z) == round(x);', "  //checks\
    \ if all three are integers or not\n  if (x - (int)x == 0 && y - (int)y == 0 &&\
    \ z - (int)z == 0) {\n    if (x + y == z || x + z == y || y + z == x) {\n    \
    \  return true;\n    }\n  }\n  return false;", "\tif (x == y + z || x == y - z\
    \ || x == z - y)\n\t\treturn true;\n\telse if (y == x + z || y == x - z || y ==\
    \ z - x)\n\t\treturn true;\n\telse if (z == x + y || z == x - y || z == y - x)\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "\treturn x == y + z || y == x +\
    \ z || z == x + y;", "\treturn (x == y + z || y == x + z || z == x + y) && std::floor(x)\
    \ == x && std::floor(y) == y && std::floor(z) == z;", "\treturn false;", "\treturn\
    \ x + y == z || x + z == y || y + z == x;", "\tif (round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y)) return\
    \ true;\n\telse return false;", "\tint sum = x + y + z;\n\treturn (int)sum ==\
    \ sum;", "  if (x + y == z || x + z == y || y + z == x) {\n    return true;\n\
    \  }\n  return false;", "\tbool result = true;\n\tif (floor(x) == x && floor(y)\
    \ == y && floor(z) == z) {\n\t\tif (x + y == z || x + z == y || y + z == x) {\n\
    \t\t\tresult = true;\n\t\t}\n\t\telse {\n\t\t\tresult = false;\n\t\t}\n\t}\n\t\
    else {\n\t\tresult = false;\n\t}\n\treturn result;", '    return (x + y == z &&
    x == (int)x && y == (int)y && z == (int)z);', "\tint ix = (int)x;\n\tint iy =\
    \ (int)y;\n\tint iz = (int)z;\n\tif (x == ix && y == iy && z == iz) {\n\t\tif\
    \ (ix == iy + iz || iy == ix + iz || iz == ix + iy) {\n\t\t\treturn true;\n\t\t\
    }\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t\
    }", "\tint x1 = x;\n\tint y1 = y;\n\tint z1 = z;\n\tif (x == x1 && y == y1 &&\
    \ z == z1) {\n\t\tif (x == y + z || y == x + z || z == x + y) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}", '    return ( (x== y+z) || (y==x+z) || (z==x+y));', "\tif(x +\
    \ y == z || x + z == y || y + z == x) {\n\t\treturn true;\n\t}\n\treturn false;",
  "  if(std::ceil(x) == x && std::ceil(y) == y && std::ceil(z) == z){\n    if(x ==\
    \ y + z || y == x + z || z == x + y){\n      return true;\n    }else{\n      return\
    \ false;\n    }\n  }else{\n    return false;\n  }", "\tfloat sum = x + y + z;\n\
    \treturn int(sum) == sum;", "\treturn  (x + y == z) || (x + z == y) || (y + z\
    \ == x);", '    return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y
    || (int)y + (int)z == (int)x;', "  \n\t\tif(x==0 || y==0 || z==0){\n\t\t\treturn\
    \ false;\n\t\t}\n\n\t\tif((x+y)==z || (x+z)==y || (y+z)==x){\n\t\t\treturn true;\n\
    \t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t", "  assert(x>=0&&y>=0&&z>=0);\n\
    \  if((int)x+(int)y==(int)z||(int)x+(int)z==(int)y||(int)y+(int)z==(int)x)\n \
    \ return true;\n  else\n  return false;", "\tif (x == (y + z) || y == (x + z)\
    \ || z == (x + y))\n\t\treturn true;\n\telse return false;", "    if((x == y +\
    \ z) || (y == x + z) || (z == x + y))\n    {\n        return true;\n    }\n  \
    \  else\n    {\n        return false;\n    }\n", "\tif ((int)x == ((int)y + (int)z)\
    \ || (int)y == ((int)x + (int)z) || (int)z == ((int)x + (int)y))\n\t\treturn true;\n\
    \telse\n\t\treturn false;", "    // Take input and store all the inputs\n    return\
    \ (x+y==z||y+z==x||x+z==y);", "    int a = (int)x;\n    int b = (int)y;\n    int\
    \ c = (int)z;\n    if(a+b==c || a+c==b || b+c==a)\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n    ", "\treturn floor(x)\
    \ == x && floor(y) == y && floor(z) == z && (x + y == z || x + z == y || y + z\
    \ == x);", "    if (x!=0 && y!=0 && z!=0) {\n        if ((x == y + z) || (y ==\
    \ x + z) || (z == x + y)) {\n            return true;\n        }\n    }\n    return\
    \ false;", "\tint first = (int)x;\n\tint second = (int)y;\n\tint third = (int)z;\n\
    \tif (first + second == third || second + third == first || first + third == second)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tif (x == (y\
    \ + z) || y == (x + z) || z == (x + y))\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;", "\tint sum = x + y + z;\n\tif (sum == x || sum == y || sum == z) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tbool result = false;\n\
    \tif (x == y + z || y == x + z || z == x + y) {\n\t\tresult = true;\n\t}\n\treturn\
    \ result;", "\treturn (int)x + (int)y == (int)z || (int)x + (int)z == (int)y ||\
    \ (int)y + (int)z == (int)x;", "\treturn x+y==z || x+z==y || y+z==x;", "    if(x\
    \ == (y + z) || y == (x + z) || z == (x + y)){\n        return true;\n    }\n\
    \    return false;", "  // declare variables to store float values\n  float sum_1;\n\
    \  float sum_2;\n  float sum_3;\n  // convert float values to int values\n  int\
    \ x_int = static_cast<int>(x);\n  int y_int = static_cast<int>(y);\n  int z_int\
    \ = static_cast<int>(z);\n  // convert back to float and add to variables\n  sum_1\
    \ = static_cast<float>(x_int + y_int);\n  sum_2 = static_cast<float>(x_int + z_int);\n\
    \  sum_3 = static_cast<float>(y_int + z_int);\n  // check if one value is equal\
    \ to the sum of the other two\n  if (x == sum_1 || x == sum_2 || x == sum_3) {\n\
    \    return true;\n  } else if (y == sum_1 || y == sum_2 || y == sum_3) {\n  \
    \  return true;\n  } else if (z == sum_1 || z == sum_2 || z == sum_3) {\n    return\
    \ true;\n  } else {\n    return false;\n  }", "  // return (fmod(x,1)==0 && fmod(y,1)==0\
    \ && fmod(z,1)==0) && (x==y+z || y==x+z || z==x+y);\n  return x==floor(x) && y==floor(y)\
    \ && z==floor(z) && (x==y+z || y==x+z || z==x+y);", "\tif ((x + y == z) || (x\
    \ + z == y) || (y + z == x)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "    if (x == y + z && x == floor(x) && y == floor(y) && z == floor(z))\
    \ {\n        return true;\n    } else if (y == x + z && x == floor(x) && y ==\
    \ floor(y) && z == floor(z)) {\n        return true;\n    } else if (z == x +\
    \ y && x == floor(x) && y == floor(y) && z == floor(z)) {\n        return true;\n\
    \    } else {\n        return false;\n    }", "    if(!(int(x)==x&&int(y)==y&&int(z)==z)){\n\
    \        return false;\n    }\n    else if(int(x)==(int(y)+int(z))||int(y)==(int(x)+int(z))||int(z)==(int(x)+int(y))){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }", "\t\n\t\
    bool xy =  y + z == x;\n\tbool xz =  z + x == y;\n\tbool yz =  x + y == z;\n\t\
    return xy || xz || yz;\n\t}\n// #include<assert.h>\n// #include<bits/stdc++.h>\n\
    // // Create a function that takes a number as an argument.\n// // Add up all\
    \ the numbers from 1 to the number you passed to the function.\n// // For example,\
    \ if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4\
    \ = 10.\n// // Examples\n// // add_up(4) \u279E 10\n// // add_up(13) \u279E 91\n\
    // // add_up(600) \u279E 180300\n// int add_up(int n) {\n// \t// total = 0;\n\
    // \t// for(int i = 0; i <= n; i++){\n// \t// \ttotal = total + i;\n// \t// }\n\
    // \t// return total;\n// \treturn (n * (n + 1)) / 2;\n// }\n// #include<assert.h>\n\
    // #include<bits/stdc++.h>\n// // Create a function that takes a number as an\
    \ argument.\n// // Subtract 1 from the number.\n// // Return the result.\n// //\
    \ Examples\n// // next_id(0) \u279E -1\n// // next_id(1) \u279E 0\n// // next_id(2)\
    \ \u279E 1\n// int next_id(int n) {\n// \treturn n - 1;\n// }\n// #include<assert.h>\n\
    // #include<bits/stdc++.h>\n// // Create a function that takes an array of strings\
    \ and numbers, and filters out the array so that it returns an array of integers\
    \ only.\n// // Examples\n// // filter_list([\"A\", 1, \"B\", 0, 15]) \u279E [1,\
    \ 0, 15]\n// // filter_list([\"A\", \"B\", \"C\"]) \u279E []\n// // filter_list([1,\
    \ 2, 3, \"A\",", "\treturn ((x == y + z) || (y == x + z) || (z == x + y)) && (floor(x)\
    \ == x) && (floor(y) == y) && (floor(z) == z);", "\tfloat x1 = floor(x);\n\tfloat\
    \ y1 = floor(y);\n\tfloat z1 = floor(z);\n\tif (x1 + y1 == z1 || x1 + z1 == y1\
    \ || y1 + z1 == x1)\n\t\treturn true;\n\telse\n\t\treturn false;", "  assert(x>0);\n\
    \  assert(y>0);\n  assert(z>0);\n  if(x+y==z){\n    return true;\n  }\n  else\
    \ if(x+z==y){\n    return true;\n  }\n  else if(y+z==x){\n    return true;\n \
    \ }\n  else{\n    return false;\n  }", "\treturn ((int)x + (int)y == (int)z ||\
    \ (int)x + (int)z == (int)y || (int)y + (int)z == (int)x) && (floor(x) == x &&\
    \ floor(y) == y && floor(z) == z);", "\tif (x == y + z || y == x + z || z == x\
    \ + y) {\n\t\tif (x == int(x) && y == int(y) && z == int(z)) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;", "\tif ((int)x + (int)y == (int)z)\n\t\treturn true;\n\
    \telse if ((int)x + (int)z == (int)y)\n\t\treturn true;\n\telse if ((int)y + (int)z\
    \ == (int)x)\n\t\treturn true;\n\telse\n\t\treturn false;", '    return ((x==
    y+z || y== x+z || z== y+x) && (x == floor(x) && y == floor(y) && z == floor(z)));',
  "\tif (x == (y + z) || y == (x + z) || z == (x + y)) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}", "  \n  assert(x==int(x));\n  assert(y==int(y));\n\
    \  assert(z==int(z));\n  \n  if (x + y == z) {\n    return true;\n  }\n  else\
    \ if (x + z == y) {\n    return true;\n  }\n  else if (y + z == x) {\n    return\
    \ true;\n  }\n  else {\n    return false;\n  }", '  return (x+y == z || x+z ==
    y || y+z == x);', "  bool c = true;\n  if (static_cast<int>(x) == x && static_cast<int>(y)\
    \ == y && static_cast<int>(z) == z) {\n    c = true;\n  } else {\n    c = false;\n\
    \  }\n  if (c) {\n    if (x + y == z || x + z == y || y + z == x) {\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n\
    \  }", "    assert(x==((int)x));\n    assert(y==((int)y));\n    assert(z==((int)z));\n\
    \    if(x+y==z || x+z==y || y+z==x){\n        return true;\n    }else{\n     \
    \   return false;\n    }", "  if(x+y==z||x+z==y||y+z==x){\n    return true;\n\
    \  }else{\n    return false;\n  }", "\tfloat sum;\n\tsum = x + y + z;\n\tint f\
    \ = floor(sum);\n\tint c = ceil(sum);\n\tint x1 = floor(x);\n\tint y1 = floor(y);\n\
    \tint z1 = floor(z);\n\tif (f == c) {\n\t\tif (x1 + y1 == z1 || x1 + z1 == y1\
    \ || y1 + z1 == x1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}", "    if((x == y + z) || (y == x\
    \ + z) || (z == x + y))\n        return true;\n    else\n        return false;",
  "\tfloat a = x + y;\n\tfloat b = x + z;\n\tfloat c = y + z;\n\tif (((int)a == a)\
    \ && ((int)b == b) && ((int)c == c)) {\n\t\tif ((int)a == (int)z || (int)b ==\
    \ (int)y || (int)c == (int)x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}", "\treturn (ceil(x)\
    \ == (ceil(y) + ceil(z))) || (ceil(y) == (ceil(x) + ceil(z))) || (ceil(z) == (ceil(x)\
    \ + ceil(y)));", "\treturn (x == y + z || y == x + z || z == x + y);", "    if(int(x)\
    \ == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y)){\n\
    \        return true;\n    }else{\n        return false;\n    }", "\tif (x ==\
    \ y + z || y == x + z || z == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "    assert(x >= 0 && y >= 0 && z >= 0);\n    return ((x\
    \ + y == z) || (x + z == y) || (y + z == x));", "    int a = x;\n    int b = y;\n\
    \    int c = z;\n    if (a + b == c || a + c == b || b + c == a) {\n        return\
    \ true;\n    }\n    return false;", '    return (x == (y + z)) || (y == (x + z))
    || (z == (x + y));', "\tif (x == y + z || y == x + z || z == x + y) {\n\t\treturn\
    \ true;\n\t}\n\telse\n\t\treturn false;", '  return (x + y == z || x + z == y
    || y + z == x);', "\t\n\tbool sum = false;\n\tif(x + y == z || x + z == y || y\
    \ + z == x){\n\t\tsum = true;\n\t}\n\treturn sum;", "    if((x+y==z) || (x+z==y)\
    \ || (y+z==x))\n    {\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }", "// write your code here\n\tassert((x==int(x))&&(y==int(y))&&(z==int(z)));\n\
    \tif(x+y==z||x+z==y||y+z==x)\n\t\treturn true;\n\telse\n\t\treturn false;"]
stop_tokens:
- "\n}"
