name: HumanEval_95_check_dict_case
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tbool valid\
    \ = true;\n\tif(dict.size() < 1) {\n\t\treturn false;\n\t}\n\t// for(auto i :\
    \ dict) {\n\t// \tstd::cout << i.first << \" \" << i.second << std::endl;\n\t\
    // }\n\tbool is_lower = false;\n\tbool is_upper = false;\n\tfor(auto i : dict)\
    \ {\n\t\tstd::string key = i.first;\n\t\tfor(char c : key) {\n\t\t\tif(islower(c))\
    \ {\n\t\t\t\tis_lower = true;\n\t\t\t}\n\t\t\telse if(isupper(c)) {\n\t\t\t\t\
    is_upper = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(is_lower && is_upper) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool is_lower_case = false;\n\tbool is_upper_case\
    \ = false;\n\tfor (auto it : dict) {\n\t\tbool is_upper = std::isupper(it.first[0]);\n\
    \t\tif (is_upper_case && !is_upper) {\n\t\t\treturn false;\n\t\t}\n\t\tif (is_lower_case\
    \ && is_upper) {\n\t\t\treturn false;\n\t\t}\n\t\tis_upper_case = is_upper;\n\t\
    \tis_lower_case = !is_upper;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbjsopeb6: /tmp/tmpbjsopeb6.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool all_lower = true;\n\tbool all_upper\
    \ = true;\n\tfor (auto element : dict) {\n\t\tif (element.first != tolower(element.first[0]))\
    \ {\n\t\t\tall_lower = false;\n\t\t}\n\t\tif (element.first != toupper(element.first[0]))\
    \ {\n\t\t\tall_upper = false;\n\t\t}\n\t}\n\treturn all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvxm7156f.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpvxm7156f.cpp:19:35: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   19 |                 if (element.first != tolower(element.first[0]))\
    \ {\n      |                     ~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                             |               |\n      |              \
    \               |               int\n      |                             const\
    \ std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/11/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/11/bits/specfun.h:45,\n              \
    \   from /usr/include/c++/11/cmath:1935,\n                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvxm7156f.cpp:2:\n/usr/include/c++/11/bits/stl_iterator.h:1137:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n 1137 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/11/bits/stl_iterator.h:1137:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpvxm7156f.cpp:19:62: note: \
    \  \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   19 |    \
    \             if (element.first != tolower(element.first[0])) {\n      |     \
    \                                                         ^\nIn file included\
    \ from /usr/include/c++/11/bits/stl_algobase.h:67,\n                 from /usr/include/c++/11/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/11/cmath:1935,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:41,\n                 from\
    \ /tmp/tmpvxm7156f.cpp:2:\n/usr/include/c++/11/bits/stl_iterator.h:1145:5: note: "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool islower=false,\
    \ isupper=false;\n    for(auto it: dict){\n        if(islower==false && it.first[0]>='a'\
    \ && it.first[0]<='z') islower=true;\n        if(isupper==false && it.first[0]>='A'\
    \ && it.first[0]<='Z') isupper=true;\n    }\n    return islower ^ isupper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl3igo_cg: /tmp/tmpl3igo_cg.cpp:24: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  \n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwoyl77tx: /tmp/tmpwoyl77tx.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool is_lower\
    \ = false;\n    for (auto& e : dict) {\n        if (islower(e.first[0])) {\n \
    \           is_lower = true;\n            break;\n        }\n    }\n    for (auto&\
    \ e : dict) {\n        if (is_lower != islower(e.first[0])) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmphz6j8v_4: /tmp/tmphz6j8v_4.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    std::map<std::string, std::string>::iterator itr;\n    int\
    \ count_lower=0, count_upper=0;\n    for(itr=dict.begin(); itr!=dict.end(); ++itr){\n\
    \        if(isupper(itr->first[0])) count_upper++;\n        else count_lower++;\n\
    \    }\n    if(count_lower==0 || count_upper==0) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr0xieumh: /tmp/tmpr0xieumh.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  int allLower=0,\
    \ allUpper=0;\n  if(dict.size()==0)\n    return false;\n  for(auto x:dict){\n\
    \    allLower=0;\n    allUpper=0;\n    for(auto y:x.first){\n      if(islower(y))\n\
    \        allLower=1;\n      else\n        allUpper=1;\n    }\n    if(allLower==0\
    \ || allUpper==0)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5s7sdl5g: /tmp/tmp5s7sdl5g.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tstd::map<std::string, std::string>::iterator\
    \ it;\n\tit = dict.begin();\n\tstd::string first_key = it->first;\n\tif (islower(first_key[0]))\
    \ {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!islower(it->first[0]))\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else if (isupper(first_key[0]))\
    \ {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!isupper(it->first[0]))\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn false;\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjx202ar8: /tmp/tmpjx202ar8.cpp:41: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<char,\
    \ int> upper;\n    std::map<char, int> lower;\n    int size = dict.size();\n \
    \   if(size == 0) {\n        return false;\n    }\n    std::map<std::string, std::string>::iterator\
    \ itr;\n    for(itr = dict.begin(); itr != dict.end(); itr++) {\n        int cnt\
    \ = itr->first.size();\n        for(int i = 0; i < cnt; i++) {\n            if(std::isupper(itr->first[i]))\
    \ {\n                upper[itr->first[i]]++;\n            }\n            else\
    \ {\n                lower[itr->first[i]]++;\n            }\n        }\n    }\n\
    \    if(upper.size() == size || lower.size() == size) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmzkzl2mm: /tmp/tmpmzkzl2mm.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    for(auto i:dict){\n        if(i.first[0]>='a' && i.first[0]<='z'){\n\
    \            for(auto j:dict){\n                if(j.first[0]>='A' && j.first[0]<='Z')\
    \ return false;\n            }\n        }\n        else if(i.first[0]>='A' &&\
    \ i.first[0]<='Z'){\n            for(auto j:dict){\n                if(j.first[0]>='a'\
    \ && j.first[0]<='z') return false;\n            }\n        }\n        else return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmptd9pqeg8: /tmp/tmptd9pqeg8.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n   if(dict.size()\
    \ == 0)\n      return false;\n   if(dict.begin()->first[0] >= 'a' && dict.begin()->first[0]\
    \ <= 'z') {\n      for(auto pair : dict) {\n         if(pair.first[0] < 'a' ||\
    \ pair.first[0] > 'z') {\n            return false;\n         }\n      }\n   }\n\
    \   else if(dict.begin()->first[0] >= 'A' && dict.begin()->first[0] <= 'Z') {\n\
    \      for(auto pair : dict) {\n         if(pair.first[0] < 'A' || pair.first[0]\
    \ > 'Z') {\n            return false;\n         }\n      }\n   }\n   else {\n\
    \      return false;\n   }\n   return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsxtqzhsq: /tmp/tmpsxtqzhsq.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tfor (auto i\
    \ = dict.begin(); i != dict.end(); i++) {\n\t\tfor (int j = 0; j < i->first.length();\
    \ j++) {\n\t\t\tif (!isupper(i->first[j])) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwnzei20y: /tmp/tmpwnzei20y.cpp:24: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    // std::map<std::string, std::string>::iterator\
    \ it;\n    bool upper_case = false;\n    // for(it = dict.begin(); it != dict.end();\
    \ it++) {\n    //     if((*it).first.size() != 0) {\n    //         upper_case\
    \ = isupper((*it).first[0]);\n    //         break;\n    //     }\n    // }\n\
    \    bool all_upper = true;\n    bool all_lower = true;\n    std::string string\
    \ = \"\";\n    for(auto x : dict) {\n        string = x.first;\n        if(string[0]\
    \ >= 'A' && string[0] <= 'Z') {\n            all_lower = false;\n        }\n \
    \       else {\n            all_upper = false;\n        }\n    }\n    return (all_upper\
    \ || all_lower);\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnp0s652o: /tmp/tmpnp0s652o.cpp:41: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int lowercase\
    \ = 0;\n    int uppercase = 0;\n    for (std::map<std::string, std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); ++it) {\n        if (it->first.at(0) >= 'a'\
    \ && it->first.at(0) <= 'z') lowercase++;\n        else if (it->first.at(0) >=\
    \ 'A' && it->first.at(0) <= 'Z') uppercase++;\n        else return false;\n  \
    \  }\n    if (lowercase == 0 || uppercase == 0) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkp3rgjdf: /tmp/tmpkp3rgjdf.cpp:28: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  bool all_upcase = true;\n  bool all_lowcase = true;\n  for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first[0] < 'A'\
    \ || it->first[0] > 'Z') all_upcase = false;\n    if (it->first[0] < 'a' || it->first[0]\
    \ > 'z') all_lowcase = false;\n  }\n  return all_upcase || all_lowcase;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2bqa_5sj: /tmp/tmp2bqa_5sj.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // int cnt\
    \ = 0;\n    // for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n    //\
    \     if(itr->first.size() > 0) {\n    //         if(itr->first[0] >= 'a' && itr->first[0]\
    \ <= 'z') {\n    //             cnt++;\n    //         }\n    //     }\n    //\
    \ }\n    // if(cnt == dict.size() || cnt == 0) {\n    //     return true;\n  \
    \  // }\n    // return false;\n    int cnt_lower_case = 0;\n    int cnt_upper_case\
    \ = 0;\n    for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n       \
    \ if(itr->first.size() > 0) {\n            if(itr->first[0] >= 'a' && itr->first[0]\
    \ <= 'z') {\n                cnt_lower_case++;\n            }\n            else\
    \ if(itr->first[0] >= 'A' && itr->first[0] <= 'Z') {\n                cnt_upper_case++;\n\
    \            }\n        }\n    }\n    if(cnt_lower_case == dict.size() || cnt_upper_case\
    \ == dict.size()) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7zuq_5qq: /tmp/tmp7zuq_5qq.cpp:47: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::set<char> s;\n    std::map<std::string,\
    \ std::string>::iterator itr;\n    for(itr = dict.begin(); itr != dict.end();\
    \ itr++) {\n        std::string key = itr->first;\n        for(int i = 0; i <\
    \ key.length(); i++) {\n            s.insert(key[i]);\n        }\n    }\n    if(s.size()\
    \ == 1)\n        return true;\n    else\n        return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfwzs5omy: /tmp/tmpfwzs5omy.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // your code\
    \ goes here\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmppqj0v7wh: /tmp/tmppqj0v7wh.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tint lower =\
    \ 0;\n\tint upper = 0;\n\tstd::map<std::string, std::string>::iterator itr;\n\t\
    for (itr = dict.begin(); itr != dict.end(); itr++) {\n\t\tstd::string key = itr->first;\n\
    \t\tif (islower(key[0])) {\n\t\t\tlower++;\n\t\t}\n\t\telse if (isupper(key[0]))\
    \ {\n\t\t\tupper++;\n\t\t}\n\t}\n\tif (lower > 0 && upper > 0)\n\t\treturn false;\n\
    \treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk5azanzq: /tmp/tmpk5azanzq.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t//throw \"\
    Not Implemented\";\n\t//using namespace std;\n\tif(dict.empty())\n\t\treturn false;\n\
    \tint upper=0,lower=0;\n\t//cout<<dict.size();\n\tfor(auto it=dict.begin();it!=dict.end();it++)\n\
    \t{\n\t\t//cout<<it->first<<\" : \"<<it->second<<endl;\n\t\tif(isupper(it->first[0]))\n\
    \t\t\tupper++;\n\t\telse if(islower(it->first[0]))\n\t\t\tlower++;\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\tif(upper==dict.size() || lower==dict.size())\n\t\t\
    return true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8naqlxbd: /tmp/tmp8naqlxbd.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::string testCase = dict.begin()->first;\n\
    \    if(testCase.size() == 0)\n        return false;\n    if(islower(testCase[0])){\n\
    \        for(auto itr = dict.begin(); itr != dict.end(); itr++){\n           \
    \ if(!islower(itr->first[0]))\n                return false;\n        }\n    }\n\
    \    else{\n        for(auto itr = dict.begin(); itr != dict.end(); itr++){\n\
    \            if(!isupper(itr->first[0]))\n                return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo9z2jzfm: /tmp/tmpo9z2jzfm.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // Write your\
    \ code here.\n  bool upper = false;\n  bool lower = false;\n  for(auto pair :\
    \ dict){\n      if(std::isupper(pair.first[0])){\n          upper = true;\n  \
    \    }else{\n          lower = true;\n      }\n  }\n  return lower && !upper ||\
    \ upper && !lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxwd5bwt2: /tmp/tmpxwd5bwt2.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()==0)\n\
    \t\treturn false;\n\tbool is_all_upper = true;\n\tfor (auto item : dict) {\n\t\
    \tif (isupper(item.first[0]))\n\t\t\tis_all_upper = true;\n\t\telse {\n\t\t\t\
    is_all_upper = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_all_upper) {\n\t\tfor\
    \ (auto item : dict) {\n\t\t\tif (!isupper(item.first[0]))\n\t\t\t\treturn false;\n\
    \t\t}\n\t\treturn true;\n\t}\n\telse {\n\t\tfor (auto item : dict) {\n\t\t\tif\
    \ (!islower(item.first[0]))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t\
    }\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmxoxmsij: /tmp/tmpmxoxmsij.cpp:44: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // return\
    \ true if the map is empty\n    if (dict.empty()) {\n        return false;\n \
    \   }\n    // create two maps to store the cases\n    std::map<std::string, std::string>\
    \ upper_case_map;\n    std::map<std::string, std::string> lower_case_map;\n  \
    \  // loop over the map\n    for (std::map<std::string, std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        // check if the key value\
    \ is not a string\n        if (!std::all_of(it->first.begin(), it->first.end(),\
    \ ::isalpha)) {\n            return false;\n        }\n        // add the key\
    \ to the respective case map\n        if (std::all_of(it->first.begin(), it->first.end(),\
    \ ::isupper)) {\n            upper_case_map[it->first] = it->second;\n       \
    \ } else {\n            lower_case_map[it->first] = it->second;\n        }\n \
    \   }\n    // check if the maps are not empty\n    if (upper_case_map.empty()\
    \ || lower_case_map.empty()) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6m972pzp: /tmp/tmp6m972pzp.cpp:44: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool is_lower = true;\n  bool is_upper = true;\n\
    \  for (auto x : dict) {\n    if (x.first.size() != 0) {\n      if (isupper(x.first[0]))\
    \ {\n        is_lower = false;\n      } else {\n        is_upper = false;\n  \
    \    }\n    }\n  }\n  return (is_lower || is_upper);\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi74667ix: /tmp/tmpi74667ix.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    bool is_key_int = false;\n    for(auto i: dict) {\n        is_lower = is_lower\
    \ || (std::isupper(i.first[0]) == 0);\n        is_upper = is_upper || (std::isupper(i.first[0])\
    \ == 1);\n        is_key_int = is_key_int || (std::isupper(i.first[0]) == 0 &&\
    \ \n                                    std::isdigit(i.first[0]) == 0);\n    }\n\
    \    return (is_lower && !is_upper && !is_key_int) || \n           (!is_lower\
    \ && is_upper && !is_key_int);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfij8vs62: /tmp/tmpfij8vs62.cpp:28: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    \n    std::set<char> set;\n    // std::vector<int> keys;\n\
    \    // std::vector<int> values;\n    // int count = 0;\n    // for(int i = 0;\
    \ i < dict.size(); i++){\n    //     keys.push_back(dict[i].first);\n    //  \
    \   values.push_back(dict[i].second);\n    // }\n    // auto it = dict.begin();\n\
    \    // while(it != dict.end()){\n    //     std::string key = it->first;\n  \
    \  //     std::string value = it->second;\n    //     for(int i = 0; i < key.size();\
    \ i++){\n    //         if(isupper(key[i])){\n    //             count++;\n  \
    \  //         }\n    //     }\n    //     it++;\n    // }\n    // if(count ==\
    \ 0 || count == key.size()){\n    //     std::cout << \"True\";\n    // }\n  \
    \  // else{\n    //     std::cout << \"False\";\n    // }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++){\n        std::string key = it->first;\n        // std::string\
    \ value = it->second;\n        // if(it == dict.begin()){\n        //     std::cout\
    \ << \"First key: \" << key;\n        // }\n        if(isupper(key[0])){\n   \
    \         set.insert('U');\n        }\n        else{\n            set.insert('L');\n\
    \        }\n    }\n    // std::cout << \"Set size: \" << set.size();\n    if(set.size()\
    \ == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyzg75a3l: /tmp/tmpyzg75a3l.cpp:65: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    for (std::map<std::string, std::string>::iterator\
    \ i = dict.begin(); i != dict.end(); i++) {\n        if (i->first.length() ==\
    \ 0) {\n            return false;\n        }\n        for (int j = 0; j < i->first.length();\
    \ j++) {\n            if (isupper(i->first[j])) {\n                isLower = false;\n\
    \            }\n            if (islower(i->first[j])) {\n                isUpper\
    \ = false;\n            }\n        }\n    }\n    if (!isLower && !isUpper) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw4jsr03g: /tmp/tmpw4jsr03g.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    \n    if(dict.size()\
    \ == 0) return false;\n    bool isUpper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        std::string key = it->first;\n        bool\
    \ isLower = false;\n        bool isUpper = false;\n        for(int i = 0; i <\
    \ key.length(); i++) {\n            if(islower(key[i])) isLower = true;\n    \
    \        if(isupper(key[i])) isUpper = true;\n        }\n        if(isLower &&\
    \ isUpper) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx156sga8: /tmp/tmpx156sga8.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tstd::string first_key = (dict.begin())->first;\n\
    \tchar first_key_char = first_key[0];\n\tbool is_lower_case = islower(first_key_char);\n\
    \tfor (std::map<std::string, std::string>::iterator it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tstd::string key = it->first;\n\t\tif (is_lower_case != islower(key[0]))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpozk3qe1a: /tmp/tmpozk3qe1a.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // if dictionary\
    \ is empty\n    if (dict.empty()) {\n        return false;\n    }\n    // if the\
    \ keys are all lower case\n    if (std::all_of(dict.begin(), dict.end(), [](auto&\
    \ elem) { return std::islower(elem.first[0]); })) {\n        return true;\n  \
    \  }\n    // if the keys are all upper case\n    if (std::all_of(dict.begin(),\
    \ dict.end(), [](auto& elem) { return std::isupper(elem.first[0]); })) {\n   \
    \     return true;\n    }\n    // otherwise\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmph0havv9l: /tmp/tmph0havv9l.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tstd::map<std::string, std::string>::iterator it\
    \ = dict.begin();\n\tbool lowercase = islower(it->first[0]);\n\tfor (; it != dict.end();\
    \ it++) {\n\t\tbool temp = islower(it->first[0]);\n\t\tif (temp != lowercase)\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfmzvg_m5: /tmp/tmpfmzvg_m5.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    auto it = dict.begin();\n    bool isLowerCase\
    \ = std::islower(it->first[0]);\n    for(; it != dict.end(); it++) {\n       \
    \ if(isLowerCase != std::islower(it->first[0]))\n            return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsqmnx6q8: /tmp/tmpsqmnx6q8.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(std::map<std::string, std::string>::iterator it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        }\n        else if(islower(it->first[0])) {\n    \
    \        is_lower = true;\n        }\n        else\n            return false;\n\
    \    }\n    if(is_lower == true && is_upper == true)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgm7fzaxv: /tmp/tmpgm7fzaxv.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator itr;\n    bool result = true;\n    if (dict.size() ==\
    \ 0) {\n        return false;\n    } else {\n        itr = dict.begin();\n   \
    \     std::string current_key = itr->first;\n        bool current_case = isupper(current_key[0]);\n\
    \        for (itr = dict.begin(); itr != dict.end(); itr++) {\n            if\
    \ (isupper(itr->first[0]) != current_case) {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp67oktt3d: /tmp/tmp67oktt3d.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n    {\n        return false;\n    }\n    bool flag = false;\n    for(auto\
    \ i : dict)\n    {\n        if(i.first[0] < 97)\n        {\n            flag =\
    \ true;\n        }\n        else\n        {\n            flag = false;\n     \
    \   }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr5kl9oqg: /tmp/tmpr5kl9oqg.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::string str = dict.begin()->first;\n \
    \   if(str.size() == 0)\n        return false;\n    if(islower(str[0])){\n   \
    \     for(auto itr = dict.begin(); itr != dict.end(); itr++){\n            if(itr->first.size()\
    \ == 0 || !islower(itr->first[0]))\n                return false;\n        }\n\
    \    }\n    else if(isupper(str[0])){\n        for(auto itr = dict.begin(); itr\
    \ != dict.end(); itr++){\n            if(itr->first.size() == 0 || !isupper(itr->first[0]))\n\
    \                return false;\n        }\n    }\n    else\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv4loqsf1: /tmp/tmpv4loqsf1.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// check if\
    \ the dictionary is empty\n\tif (dict.empty()) {\n\t\treturn false;\n\t}\n\n\t\
    // if the dictionary is not empty, iterate through it and check the condition\n\
    \tbool flag = true;\n\t// if the string is found in the map, do nothing else...\n\
    \tfor (std::map<std::string, std::string>::iterator it = dict.begin();\n\t\tit\
    \ != dict.end(); ++it) {\n\t\tfor (std::string::iterator i = it->first.begin();\n\
    \t\t\ti != it->first.end(); ++i) {\n\t\t\tif (islower(*i)) {\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (flag) {\n\t\treturn true;\n\t}\n\telse {\n\t\tflag = true;\n\t\tfor\
    \ (std::map<std::string, std::string>::iterator it = dict.begin();\n\t\t\tit !=\
    \ dict.end(); ++it) {\n\t\t\tfor (std::string::iterator i = it->first.begin();\n\
    \t\t\t\ti != it->first.end(); ++i) {\n\t\t\t\tif (isupper(*i)) {\n\t\t\t\t\tcontinue;\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3jq9pjic.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp3jq9pjic.cpp:23:63: error:\
    \ conversion from \u2018__normal_iterator<const char*,[...]>\u2019 to non-scalar\
    \ type \u2018__normal_iterator<char*,[...]>\u2019 requested\n   23 |         \
    \        for (std::string::iterator i = it->first.begin();\n      |          \
    \                                      ~~~~~~~~~~~~~~~^~\n/tmp/tmp3jq9pjic.cpp:41:71:\
    \ error: conversion from \u2018__normal_iterator<const char*,[...]>\u2019 to non-scalar\
    \ type \u2018__normal_iterator<char*,[...]>\u2019 requested\n   41 |         \
    \                for (std::string::iterator i = it->first.begin();\n      |  \
    \                                                      ~~~~~~~~~~~~~~~^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tstd::vector<char>\
    \ lower_case_letters = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n\
    \tstd::vector<char> upper_case_letters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'};\n\tbool areAllLowerCase = true;\n\tbool areAllUpperCase = true;\n\
    \tif (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tfor (std::map<std::string,\
    \ std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n\t\tfor\
    \ (int i = 0; i < it->first.length(); i++) {\n\t\t\tif (!(std::find(lower_case_letters.begin(),\
    \ lower_case_letters.end(), it->first[i]) != lower_case_letters.end())) {\n\t\t\
    \t\tareAllLowerCase = false;\n\t\t\t}\n\t\t\tif (!(std::find(upper_case_letters.begin(),\
    \ upper_case_letters.end(), it->first[i]) != upper_case_letters.end())) {\n\t\t\
    \t\tareAllUpperCase = false;\n\t\t\t}\n\t\t}\n\t}\n\tif (areAllLowerCase == areAllUpperCase)\
    \ {\n\t\treturn false;\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::string\
    \ key;\n  std::map<std::string, std::string>::iterator it;\n  for (it = dict.begin();\
    \ it != dict.end(); it++) {\n    key = it->first;\n    if (isupper(key[0])) {\n\
    \      break;\n    }\n  }\n  std::string val;\n  for (it = dict.begin(); it !=\
    \ dict.end(); it++) {\n    key = it->first;\n    val = it->second;\n    if (key.size()\
    \ == 0) {\n      return false;\n    }\n    if (isupper(key[0])) {\n      if (islower(key[0]))\
    \ {\n        return false;\n      }\n    } else {\n      if (isupper(key[0]))\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj8s1r95_: /tmp/tmpj8s1r95_.cpp:43: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_upper = true;\n    bool all_lower\
    \ = true;\n    for(auto el: dict) {\n        bool is_upper = true;\n        bool\
    \ is_lower = true;\n        for(auto ch: el.first) {\n            if(ch <= 'Z'\
    \ && ch >= 'A') {\n                is_lower = false;\n            }\n        \
    \    else if(ch <= 'z' && ch >= 'a') {\n                is_upper = false;\n  \
    \          }\n            else {\n                is_lower = false;\n        \
    \        is_upper = false;\n            }\n        }\n        if(!is_upper)\n\
    \            all_upper = false;\n        if(!is_lower)\n            all_lower\
    \ = false;\n    }\n    return all_upper || all_lower;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_upper = false;\n    bool all_lower\
    \ = false;\n    bool key_not_string = false;\n    std::map<std::string, std::string>::iterator\
    \ itr;\n    for(itr = dict.begin(); itr != dict.end(); itr++) {\n        if(itr->first\
    \ == tolower(itr->first))\n            all_lower = true;\n        else if(itr->first\
    \ == toupper(itr->first))\n            all_upper = true;\n        else\n     \
    \       key_not_string = true;\n    }\n    if(key_not_string)\n        return\
    \ false;\n    if(all_lower || all_upper)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxutz02l.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpdxutz02l.cpp:20:33: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   20 |         if(itr->first == tolower(itr->first))\n      |             \
    \             ~~~~~~~^~~~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdxutz02l.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2676:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2676 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2676:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpdxutz02l.cpp:20:33:\
    \ note:   candidate expects 2 arguments, 1 provided\n   20 |         if(itr->first\
    \ == tolower(itr->first))\n      |                          ~~~~~~~^~~~~~~~~~~~\n\
    In file included from /usr/include/c++/11/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpdxutz02l.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmpdxutz02l.cpp:22:38: error: no matching function\
    \ for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\n \
    \  22 |         else if(itr->first == toupper(itr->first))\n      |          \
    \           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int cnt1\
    \ = 0, cnt2 = 0;\n    for(auto x: dict) {\n        if(islower(x.first[0])) cnt1++;\n\
    \        else if(isupper(x.first[0])) cnt2++;\n    }\n    return cnt1 == dict.size()\
    \ || cnt2 == dict.size();\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpezyb_d4n: /tmp/tmpezyb_d4n.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool f = 0;\n    for(auto a: dict){\n        if(islower(a.first[0])){\n\
    \            f = 1;\n            break;\n        }\n    }\n    for(auto a: dict){\n\
    \        if(f){\n            if(isupper(a.first[0]))\n                return false;\n\
    \        }\n        else{\n            if(islower(a.first[0]))\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd5cif70s: /tmp/tmpd5cif70s.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool upper = true;\n\tfor (auto pair : dict) {\n\
    \t\tif (pair.first[0] <= 'Z' && pair.first[0] >= 'A')\n\t\t\tupper = false;\n\t\
    \telse if (pair.first[0] <= 'z' && pair.first[0] >= 'a')\n\t\t\tupper = true;\n\
    \t\telse\n\t\t\treturn false;\n\t}\n\tfor (auto pair : dict) {\n\t\tif (upper\
    \ && pair.first[0] <= 'z' && pair.first[0] >= 'a')\n\t\t\treturn false;\n\t\t\
    else if (!upper && pair.first[0] <= 'Z' && pair.first[0] >= 'A')\n\t\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4u0_5viu: /tmp/tmp4u0_5viu.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \    {\n        return false;\n    }\n    bool all_upper = true;\n    bool all_lower\
    \ = true;\n    for(auto i=dict.begin();i!=dict.end();i++)\n    {\n        if(isupper(i->first[0]))\n\
    \        {\n            all_lower = false;\n        }\n        else\n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_upper||all_lower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcy5q62fd: /tmp/tmpcy5q62fd.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int count1\
    \ = 0, count2 = 0;\n    for(auto i: dict) {\n        for(auto j: i.first) {\n\
    \            if(isupper(j)) {\n                count1++;\n            }\n    \
    \        else {\n                count2++;\n            }\n        }\n    }\n\
    \    if(count1 > 0 && count2 > 0) {\n        return false;\n    }\n    else {\n\
    \        return true;\n    }\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp5_lkffu: /tmp/tmpp5_lkffu.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// Your code\
    \ here...\n\tif(dict.size() == 0) return false;\n\tint count1 = 0, count2 = 0;\n\
    \tfor(auto d: dict){\n\t\tfor(int i = 0; i < d.first.size(); i++){\n\t\t\tif(islower(d.first[i])){\n\
    \t\t\t\tcount1++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount2++;\n\t\t\t}\n\t\t}\n\t\
    }\n\tif(count1 == 0 || count2 == 0) return true;\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(std::map<std::string, std::string>::iterator it = dict.begin();\
    \ it != dict.end(); it++) {\n        all_lower = all_lower && (it->first == boost::to_lower_copy(it->first));\n\
    \        all_upper = all_upper && (it->first == boost::to_upper_copy(it->first));\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvzst7gfw.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpvzst7gfw.cpp:18:48: error:\
    \ \u2018boost\u2019 has not been declared\n   18 |         all_lower = all_lower\
    \ && (it->first == boost::to_lower_copy(it->first));\n      |                \
    \                                ^~~~~\n/tmp/tmpvzst7gfw.cpp:19:48: error: \u2018\
    boost\u2019 has not been declared\n   19 |         all_upper = all_upper && (it->first\
    \ == boost::to_upper_copy(it->first));\n      |                              \
    \                  ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool result\
    \ = true;\n    if (dict.size() == 0)\n        return false;\n    if (dict.begin()->first[0]\
    \ >= 'a' && dict.begin()->first[0] <= 'z') {\n        for (auto itr = dict.begin();\
    \ itr != dict.end(); itr++) {\n            if (itr->first[0] < 'a' || itr->first[0]\
    \ > 'z') {\n                result = false;\n                break;\n        \
    \    }\n        }\n    } else if (dict.begin()->first[0] >= 'A' && dict.begin()->first[0]\
    \ <= 'Z') {\n        for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n\
    \            if (itr->first[0] < 'A' || itr->first[0] > 'Z') {\n             \
    \   result = false;\n                break;\n            }\n        }\n    } else\
    \ {\n        result = false;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjnedpygg: /tmp/tmpjnedpygg.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tstd::map<std::string,\
    \ std::string>::iterator it;\n\tit = dict.begin();\n\tbool lowerCase = false;\n\
    \tbool upperCase = false;\n\tif(it->first == it->first || it->first == \"\") {\n\
    \t\treturn false;\n\t}\n\twhile(it != dict.end()) {\n\t\tstd::string str = it->first;\n\
    \t\tfor(int i = 0; i < str.length(); i++) {\n\t\t\tif(str[i] >= 'a' && str[i]\
    \ <= 'z') {\n\t\t\t\tlowerCase = true;\n\t\t\t}\n\t\t\telse if(str[i] >= 'A' &&\
    \ str[i] <= 'Z') {\n\t\t\t\tupperCase = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\tit++;\n\t}\n\tif(lowerCase && upperCase) {\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuomwwpu3: /tmp/tmpuomwwpu3.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tstd::map<std::string,\
    \ std::string>::iterator it = dict.begin();\n\tbool res = true;\n\tint is_upper\
    \ = 0;\n\tif (dict.size() == 0) return false;\n\tif (it->first.at(0) <= 'Z') is_upper\
    \ = 1;\n\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\tif (is_upper\
    \ == 1) {\n\t\t\tfor (int i = 0; i < it->first.length(); i++) {\n\t\t\t\tif (it->first.at(i)\
    \ > 'Z') {\n\t\t\t\t\tres = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t\telse {\n\t\t\tfor (int i = 0; i < it->first.length(); i++) {\n\t\t\t\t\
    if (it->first.at(i) < 'a') {\n\t\t\t\t\tres = false;\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    std::map<std::string, std::string>::iterator it;\n\
    \    std::string s_first;\n    for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n        s_first = it->first;\n        break;\n    }\n    char c = s_first[0];\n\
    \    if(c >= 65 && c <= 90) {\n        for(it = dict.begin(); it != dict.end();\
    \ it++) {\n            if(it->first[0] < 65 || it->first[0] > 90) return false;\n\
    \        }\n    } else {\n        for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n            if(it->first[0] < 97 || it->first[0] > 122) return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp32zjqquh: /tmp/tmp32zjqquh.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  auto it = dict.begin();\n  std::string firstKey = it->first;\n\
    \  int firstKeyValue = (int) firstKey[0];\n  if (firstKeyValue >= 65 && firstKeyValue\
    \ <= 90) {\n    for (it = dict.begin(); it != dict.end(); it++) {\n      std::string\
    \ tempKey = it->first;\n      for (int i = 0; i < tempKey.length(); i++) {\n \
    \       int tempValue = (int) tempKey[i];\n        if (tempValue < 65 || tempValue\
    \ > 90) return false;\n      }\n    }\n  } else if (firstKeyValue >= 97 && firstKeyValue\
    \ <= 122) {\n    for (it = dict.begin(); it != dict.end(); it++) {\n      std::string\
    \ tempKey = it->first;\n      for (int i = 0; i < tempKey.length(); i++) {\n \
    \       int tempValue = (int) tempKey[i];\n        if (tempValue < 97 || tempValue\
    \ > 122) return false;\n      }\n    }\n  } else {\n    return false;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int n = dict.size();\n\
    \    if(n == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ {\n            for(it = dict.begin(); it != dict.end(); it++) {\n          \
    \      if(!isupper(it->first[0]))\n                    return false;\n       \
    \     }\n            return true;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsdzvcehn: /tmp/tmpsdzvcehn.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // your code\
    \ here\n    std::map<std::string, std::string>::iterator it;\n    int upper =\
    \ 0;\n    int lower = 0;\n    for(it = dict.begin(); it != dict.end(); it++) {\n\
    \        //std::cout << it->first << std::endl;\n        if(std::isupper(it->first[0]))\
    \ {\n            upper++;\n        } else {\n            lower++;\n        }\n\
    \    }\n    if(lower == 0 || upper == 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_t47296d: /tmp/tmp_t47296d.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Create\
    \ a upper case and lower case set.\n    std::set<std::string> uppercase;\n   \
    \ std::set<std::string> lowercase;\n    std::set<std::string> keys = dict.keys();\n\
    \    // Populate uppercase and lowercase set.\n    for (std::string key : keys)\
    \ {\n        // If the key is present in either of the sets, return false.\n \
    \       if (uppercase.find(key) != uppercase.end() || lowercase.find(key) != lowercase.end())\n\
    \            return false;\n        // If the key is neither in upper nor lower\
    \ case set, add the key.\n        uppercase.insert(key);\n        lowercase.insert(key);\n\
    \    }\n    // If the dict is empty, return false.\n    if (keys.size() == 0)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjqq5cc8n.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpjqq5cc8n.cpp:16:39: error:\
    \ \u2018class std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018keys\u2019\n   16 |     std::set<std::string>\
    \ keys = dict.keys();\n      |                                       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t\n\t// Write\
    \ your code here\n\tstd::map<std::string, std::string>::iterator it = dict.begin();\n\
    \t\n\t// Check if the dictionary is empty\n\tif(dict.empty())\n\t\treturn false;\n\
    \t\n\t// Declare flags to check the case\n\tbool upper = false;\n\tbool lower\
    \ = false;\n\t\n\t// Iterate over the dictionary\n\tfor(; it != dict.end(); it++)\
    \ {\n\t\t\n\t\t// Checking if all keys are in lower case\n\t\tif(islower(it->first[0]))\n\
    \t\t\tlower = true;\n\t\t\n\t\t// Checking if all keys are in upper case\n\t\t\
    if(isupper(it->first[0]))\n\t\t\tupper = true;\n\t}\n\t\n\t// Check for final\
    \ condition\n\tif(lower && !upper)\n\t\treturn true;\n\telse if(!lower && upper)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmprz1uylxt: /tmp/tmprz1uylxt.cpp:49: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool s_lower = true;\n    bool s_upper = true;\n  \
    \  for(auto it=dict.begin(); it!=dict.end(); it++) {\n        s_lower = s_lower\
    \ && (std::string(it->first) == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1,\
    \ it->first.size()-1));\n        s_upper = s_upper && (std::string(it->first)\
    \ == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1, it->first.size()-1));\n\
    \    }\n    return s_lower || s_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgf9bzvao: /tmp/tmpgf9bzvao.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  \n  bool is_lower\
    \ = false;\n  bool is_upper = false;\n  for (auto pair : dict) {\n    if (isupper(pair.first[0]))\
    \ {\n      is_upper = true;\n    } else {\n      is_lower = true;\n    }\n  }\n\
    \  return (is_lower && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfhj0i7g3: /tmp/tmpfhj0i7g3.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // return false\
    \ if empty\n  if (dict.empty()) return false;\n  // create two sets\n  std::set<std::string>\
    \ lower_case_set;\n  std::set<std::string> upper_case_set;\n  // loop through\
    \ the map, add lower case keys to the lower_case_set\n  // and upper case keys\
    \ to the upper_case_set\n  for (auto kv : dict) {\n    if (kv.first == kv.first)\
    \ {\n      lower_case_set.insert(kv.first);\n    } else {\n      upper_case_set.insert(kv.first);\n\
    \    }\n  }\n  // if the lower case set has the same size as the map,\n  // return\
    \ true\n  if (lower_case_set.size() == dict.size()) {\n    return true;\n  }\n\
    \  // if the upper case set has the same size as the map,\n  // return true\n\
    \  if (upper_case_set.size() == dict.size()) {\n    return true;\n  }\n  // if\
    \ both lower case set and upper case set has the same size as the map,\n  // return\
    \ false\n  if (lower_case_set.size() == dict.size() && upper_case_set.size() ==\
    \ dict.size()) {\n    return false;\n  }\n  // return false\n  return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp72af049u: /tmp/tmp72af049u.cpp:48: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tfor (auto i = dict.begin(); i != dict.end();\
    \ i++) {\n\t\tif (isdigit(i->first[0])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    for (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tfor (int j = 0; j < i->first.size();\
    \ j++) {\n\t\t\tif (islower(i->first[j])) {\n\t\t\t\tfor (auto k = dict.begin();\
    \ k != dict.end(); k++) {\n\t\t\t\t\tfor (int l = 0; l < k->first.size(); l++)\
    \ {\n\t\t\t\t\t\tif (isupper(k->first[l])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\
    \t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isupper(i->first[j]))\
    \ {\n\t\t\t\tfor (auto k = dict.begin(); k != dict.end(); k++) {\n\t\t\t\t\tfor\
    \ (int l = 0; l < k->first.size(); l++) {\n\t\t\t\t\t\tif (islower(k->first[l]))\
    \ {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\telse {\n\t\tbool result = true;\n\t\tbool\
    \ upperCase = true;\n\t\tbool lowerCase = true;\n\t\tfor (std::map<std::string,\
    \ std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n\t\t\t\
    std::string key = it->first;\n\t\t\tstd::string value = it->second;\n\t\t\tfor\
    \ (int i = 0; i < key.length(); i++) {\n\t\t\t\tif (isupper(key[i])) {\n\t\t\t\
    \t\tlowerCase = false;\n\t\t\t\t}\n\t\t\t\telse if (islower(key[i])) {\n\t\t\t\
    \t\tupperCase = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result == false) {\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (result == true) {\n\t\t\tif (upperCase == true) {\n\t\t\
    \t\treturn true;\n\t\t\t}\n\t\t\telse if (lowerCase == true) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool ret = true;\n    std::set<std::string> upperCase;\n\
    \    std::set<std::string> lowerCase;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) {\n            if(upperCase.empty())\
    \ {\n                lowerCase.insert(it->first);\n            } else {\n    \
    \            ret = false;\n                break;\n            }\n        } else\
    \ if(isupper(it->first[0])) {\n            if(lowerCase.empty()) {\n         \
    \       upperCase.insert(it->first);\n            } else {\n                ret\
    \ = false;\n                break;\n            }\n        } else {\n        \
    \    ret = false;\n            break;\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwzhpdaso: /tmp/tmpwzhpdaso.cpp:44: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    std::string str=dict.begin()->first;\n    bool f1,f2;\n \
    \   f1=f2=true;\n    for(auto i=dict.begin();i!=dict.end();i++){\n        f1=f1\
    \ && !(i->first[0]<='Z' && i->first[0]>='A');\n        f2=f2 && !(i->first[0]<='z'\
    \ && i->first[0]>='a');\n    }\n    return f1 || f2;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi7q5qq8d: /tmp/tmpi7q5qq8d.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  bool all_keys_are_lower\
    \ = true;\n  bool all_keys_are_upper = true;\n  for (auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n    if (it->first == it->first) {\n      all_keys_are_lower\
    \ = false;\n    }\n    if (it->first == it->first) {\n      all_keys_are_upper\
    \ = false;\n    }\n  }\n  return all_keys_are_lower || all_keys_are_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjyprijq7: /tmp/tmpjyprijq7.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool uppercase = true;\n    bool lowercase = true;\n\
    \    for(std::map<std::string, std::string>::iterator it=dict.begin();it!=dict.end();it++){\n\
    \        std::string str = it->first;\n        if(str.size() == 0)\n         \
    \   return false;\n        if(islower(str[0]))\n            uppercase = false;\n\
    \        else\n            lowercase = false;\n    }\n    return !(uppercase&&lowercase);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6n3uqf9_: /tmp/tmp6n3uqf9_.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  bool is_upper\
    \ = true;\n  bool is_lower = true;\n  for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n    if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n      is_upper\
    \ = false;\n    } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n   \
    \   is_lower = false;\n    } else {\n      return false;\n    }\n  }\n  return\
    \ (is_upper || is_lower);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi2j196cs: /tmp/tmpi2j196cs.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tint lc = 0,\
    \ uc = 0;\n\tfor (auto& kv : dict) {\n\t\tif (kv.first == toupper(kv.first)) {\n\
    \t\t\tuc++;\n\t\t}\n\t\telse if (kv.first == tolower(kv.first)) {\n\t\t\tlc++;\n\
    \t\t}\n\t}\n\treturn lc == dict.size() || uc == dict.size();\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp238t6y26.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp238t6y26.cpp:15:40: error:\
    \ no matching function for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   15 |                 if (kv.first == toupper(kv.first)) {\n      |      \
    \                           ~~~~~~~^~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp238t6y26.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2670:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const\
    \ std::locale&)\u2019\n 2670 |     toupper(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2670:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp238t6y26.cpp:15:40:\
    \ note:   candidate expects 2 arguments, 1 provided\n   15 |                 if\
    \ (kv.first == toupper(kv.first)) {\n      |                                 ~~~~~~~^~~~~~~~~~\n\
    In file included from /usr/include/c++/11/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp238t6y26.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmp238t6y26.cpp:18:45: error: no matching function\
    \ for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\n \
    \  18 |                 else if (kv.first == tolower(kv.first))"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  bool lowercase\
    \ = false;\n  bool uppercase = false;\n  if (dict.size() == 0) {\n    return false;\n\
    \  }\n  std::map<std::string, std::string>::iterator it;\n  for (it = dict.begin();\
    \ it != dict.end(); it++) {\n    if (islower(it->first[0])) {\n      lowercase\
    \ = true;\n    } else if (isupper(it->first[0])) {\n      uppercase = true;\n\
    \    } else {\n      return false;\n    }\n  }\n  if (lowercase && uppercase)\
    \ {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu_wflkbf: /tmp/tmpu_wflkbf.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    bool isLower = false;\n    bool isUpper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            isLower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            isUpper = true;\n        } else {\n            return false;\n  \
    \      }\n    }\n    return isLower && !isUpper || !isLower && isUpper;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsuhhb0t9: /tmp/tmpsuhhb0t9.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Code here\n\
    \    bool upper=false,lower=false;\n    for(auto i:dict){\n        for(int j=0;j<i.first.length();j++){\n\
    \            if(i.first[j]<=90 && i.first[j]>=65){\n                upper=true;\n\
    \            }\n            else{\n                lower=true;\n            }\n\
    \        }\n    }\n    if(upper && lower){\n        return false;\n    }\n   \
    \ else{\n        return true;\n    }\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf7xfwmtn: /tmp/tmpf7xfwmtn.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tstd::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n\tstd::map<std::string, std::string>::iterator it_next =\
    \ dict.begin();\n\tit_next++;\n\tfor (; it_next != dict.end(); it++, it_next++)\
    \ {\n\t\tstd::string s = it->first;\n\t\tint i = 0;\n\t\twhile (s[i] != '\\0')\
    \ {\n\t\t\tif (!islower(s[i])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\
    \t\tif (s[i] == '\\0') {\n\t\t\tint k = 0;\n\t\t\tstd::string p = it_next->first;\n\
    \t\t\twhile (p[k] != '\\0') {\n\t\t\t\tif (!islower(p[k])) {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t} else {\n\t\t\tint k = 0;\n\t\
    \t\tstd::string p = it_next->first;\n\t\t\twhile (p[k] != '\\0') {\n\t\t\t\tif\
    \ (!isupper(p[k])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    if(dict.begin()->first[0] >= 65 && dict.begin()->first[0]\
    \ <= 90) {\n        for(auto x : dict) {\n            for(auto y : x.first) {\n\
    \                if(y >= 97 && y <= 122)\n                    return false;\n\
    \            }\n        }\n    }\n    else {\n        for(auto x : dict) {\n \
    \           for(auto y : x.first) {\n                if(y >= 65 && y <= 90)\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1idbnjmu: /tmp/tmp1idbnjmu.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// Initialize\
    \ current state\n\tbool isUpper = false;\n\tbool isLower = false;\n\t\n\t// Check\
    \ if the dictionary is empty.\n\tif (dict.empty()) {\n\t\treturn false;\n\t}\n\
    \t\n\t// Loop through the dictionary\n\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\t// Check if the key is in lower case\n\t\tif (it->first == tolower(it->first))\
    \ {\n\t\t\tisLower = true;\n\t\t} else {\n\t\t\tisUpper = true;\n\t\t}\n\t}\n\t\
    \n\t// If both isLower and isUpper are true, then the keys are not in \n\t// the\
    \ same case.\n\tif (isLower && isUpper) {\n\t\treturn false;\n\t} else {\n\t\t\
    return true;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_gx2367.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0_gx2367.cpp:25:41: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |                 if (it->first == tolower(it->first)) {\n      |    \
    \                              ~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0_gx2367.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2676:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2676 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2676:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp0_gx2367.cpp:25:41:\
    \ note:   candidate expects 2 arguments, 1 provided\n   25 |                 if\
    \ (it->first == tolower(it->first)) {\n      |                               \
    \   ~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/11/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp0_gx2367.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n     std::map<std::string, std::string>::iterator it;\n    \
    \ std::string prev;\n     std::string curr;\n     if(dict.size()==0)\n       \
    \  return false;\n    if(dict.size()==1)\n        return true;\n     for(it=dict.begin();it!=dict.end();it++)\n\
    \     {\n        prev=it->first;\n        curr=it->first;\n        if(prev==curr)\n\
    \         continue;\n        else\n        {\n            if(prev[0]>=97 && prev[0]<=122)\n\
    \            {\n                if(curr[0]>=97 && curr[0]<=122)\n            \
    \     continue;\n                else\n                 return false;\n      \
    \      }\n            else\n            {\n                if(curr[0]>=65 && curr[0]<=90)\n\
    \                 continue;\n                else\n                 return false;\n\
    \            }\n        }\n     }\n     return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxvk0ihd5: /tmp/tmpxvk0ihd5.cpp:50: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // your code\
    \ here\n    if(dict.size() == 0)\n        return false;\n    int count1 = 0, count2\
    \ = 0;\n    for(auto &it: dict){\n        if(it.first.length() == 0)\n       \
    \     return false;\n        if(it.first[0] < 'a')\n            count1++;\n  \
    \      else\n            count2++;\n    }\n    if(count1*count2 == 0)\n      \
    \  return true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa1h3mmos: /tmp/tmpa1h3mmos.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    // Write code here\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    int check_upper = 0;\n    int check_lower = 0;\n   \
    \ for(it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ check_lower++;\n        else if(isupper(it->first[0])) check_upper++;\n    \
    \    else return false;\n    }\n    return (check_upper == 0 || check_lower ==\
    \ 0);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr7e88hh8: /tmp/tmpr7e88hh8.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    if(it->first.at(0) >= 97\
    \ && it->first.at(0) <= 122)\n        is_lower = true;\n    for(it; it != dict.end();\
    \ it++) {\n        if(is_lower) {\n            if(it->first.at(0) < 97 || it->first.at(0)\
    \ > 122)\n                return false;\n        }\n        else {\n         \
    \   if(it->first.at(0) < 65 || it->first.at(0) > 90)\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjmn20bam: /tmp/tmpjmn20bam.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  int upper_counter\
    \ = 0;\n  int lower_counter = 0;\n  bool result = false;\n  if(dict.empty()){\n\
    \    return false;\n  }\n  for(auto const &[key, value] : dict){\n    if(isupper(key[0])){\n\
    \      upper_counter++;\n    }\n    else if(islower(key[0])){\n      lower_counter++;\n\
    \    }\n  }\n  if(upper_counter == 0 || lower_counter == 0){\n    result = true;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmps9b8gyu_: /tmp/tmps9b8gyu_.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  bool res =\
    \ true;\n  std::map<std::string, std::string>::iterator it = dict.begin();\n \
    \ std::string key = it->first;\n  bool lower = key.at(0) >= 'a' && key.at(0) <=\
    \ 'z';\n  for (it = ++it; it != dict.end(); it++) {\n    std::string new_key =\
    \ it->first;\n    if (lower && (new_key.at(0) >= 'A' && new_key.at(0) <= 'Z'))\
    \ {\n      res = false;\n      break;\n    }\n    if (!lower && (new_key.at(0)\
    \ >= 'a' && new_key.at(0) <= 'z')) {\n      res = false;\n      break;\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy8_zjf_o: /tmp/tmpy8_zjf_o.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // check\
    \ if the given dictionary is empty.\n    if (dict.empty())\n        return false;\n\
    \    // check if the keys are all strings in lower case.\n    for (std::map<std::string,\
    \ std::string>::iterator it=dict.begin(); it!=dict.end(); ++it) {\n        if\
    \ (!isupper(it->first[0])) {\n            for (int i=1; i<it->first.length();\
    \ i++) {\n                if (!islower(it->first[i]))\n                    return\
    \ false;\n            }\n        }\n        else\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgmf4waem: /tmp/tmpgmf4waem.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_first_key_lower_case = false;\n    bool is_first_key_upper_case\
    \ = false;\n    if(islower(dict.begin()->first[0])) is_first_key_lower_case =\
    \ true;\n    else if(isupper(dict.begin()->first[0])) is_first_key_upper_case\
    \ = true;\n    else return false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_first_key_lower_case) {\n            if(!islower(it->first[0]))\
    \ return false;\n        }\n        else if(is_first_key_upper_case) {\n     \
    \       if(!isupper(it->first[0])) return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4c2ca__0: /tmp/tmp4c2ca__0.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // if the\
    \ dictionary is empty\n    if (dict.empty()) {\n        return false;\n    }\n\
    \    // otherwise\n    // init the check values and loop\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    for (auto const& [key, value] : dict)\
    \ {\n        // if any letter is not a letter or not in lowercase\n        if\
    \ (key[0] != tolower(key[0])) {\n            is_lower = false;\n        }\n  \
    \      // if any letter is not a letter or not in uppercase\n        if (key[0]\
    \ != toupper(key[0])) {\n            is_upper = false;\n        }\n        //\
    \ if both lower and upper have been set to false\n        if (!is_lower && !is_upper)\
    \ {\n            return false;\n        }\n    }\n    // if none were false (all\
    \ were either upper or lowercase)\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcadxu4yn: /tmp/tmpcadxu4yn.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  int count =\
    \ 0;\n  for (auto i = dict.begin(); i != dict.end(); i++) {\n    if (isupper(i->first[0]))\
    \ count++;\n  }\n  if (count == 0) return true;\n  if (count == dict.size()) return\
    \ true;\n  return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgv5wzomn: /tmp/tmpgv5wzomn.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::set<char>\
    \ lowercase;\n  std::set<char> uppercase;\n  for (char ch = 'a'; ch <= 'z'; ch++)\
    \ {\n    lowercase.insert(ch);\n  }\n  for (char ch = 'A'; ch <= 'Z'; ch++) {\n\
    \    uppercase.insert(ch);\n  }\n  if (dict.size() == 0) {\n    return false;\n\
    \  }\n  for (auto &x : dict) {\n    std::string key = x.first;\n    for (auto\
    \ &ch : key) {\n      if (lowercase.find(ch) == lowercase.end() &&\n         \
    \ uppercase.find(ch) == uppercase.end()) {\n        return false;\n      }\n \
    \   }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz9znuwgz: /tmp/tmpz9znuwgz.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  bool upper_case = std::all_of(dict.begin(), dict.end(), [](auto\
    \ kv) {\n    return std::all_of(kv.first.begin(), kv.first.end(), [](auto c) {\n\
    \      return isupper(c);\n    });\n  });\n  bool lower_case = std::all_of(dict.begin(),\
    \ dict.end(), [](auto kv) {\n    return std::all_of(kv.first.begin(), kv.first.end(),\
    \ [](auto c) {\n      return islower(c);\n    });\n  });\n  return upper_case\
    \ || lower_case;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    int n = dict.size();\n    std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n    if(n==0) return false;\n    for(;it!=dict.end();it++){\n\
    \        if(std::isupper(it->first[0])) break;\n    }\n    if(it==dict.end())\
    \ return true;\n    for(it=dict.begin();it!=dict.end();it++){\n        if(std::islower(it->first[0]))\
    \ break;\n    }\n    if(it==dict.end()) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpki4uzoi6: /tmp/tmpki4uzoi6.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = isupper(dict.begin()->first[0]);\n\
    \    for(std::map<std::string, std::string>::iterator it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(is_upper != isupper(it->first[0]))\n       \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwk0zf6qw: /tmp/tmpwk0zf6qw.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper_case = false;\n    bool lower_case\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            upper_case = true;\n        }\n  \
    \      else if(islower(it->first[0])) {\n            lower_case = true;\n    \
    \    }\n        else {\n            return false;\n        }\n    }\n    if(upper_case\
    \ && lower_case) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwhwfz5li: /tmp/tmpwhwfz5li.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // Write your\
    \ code here\n  // True if all lower case\n  bool all_lower = true;\n  // True\
    \ if all upper case\n  bool all_upper = true;\n  // Iterate through the dictionary\n\
    \  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (!(it->first\
    \ == tolower(it->first))) {\n      all_lower = false;\n    }\n    if (!(it->first\
    \ == toupper(it->first))) {\n      all_upper = false;\n    }\n  }\n  return (all_lower\
    \ || all_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnxmjro21.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpnxmjro21.cpp:20:31: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   20 |     if (!(it->first == tolower(it->first))) {\n      |             \
    \           ~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnxmjro21.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2676:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2676 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2676:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpnxmjro21.cpp:20:31:\
    \ note:   candidate expects 2 arguments, 1 provided\n   20 |     if (!(it->first\
    \ == tolower(it->first))) {\n      |                        ~~~~~~~^~~~~~~~~~~\n\
    In file included from /usr/include/c++/11/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpnxmjro21.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmpnxmjro21.cpp:23:31: error: no matching function\
    \ for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\n \
    \  23 |     if (!(it->first == toupper(it->first))) {\n      |               \
    \         ~~~~~~~^"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n   // ...\n \
    \  std::map<std::string, std::string>::iterator it;\n   bool upper = true;\n \
    \  bool lower = true;\n   //std::cout << dict.size() << \"\\n\";\n   if(dict.size()\
    \ == 0) {\n      return false;\n   }\n   //std::cout << dict.size() << \"\\n\"\
    ;\n   for(it = dict.begin(); it != dict.end(); it++) {\n      //std::cout << it->first\
    \ << \"\\n\";\n      //std::cout << it->second << \"\\n\";\n      if(it->first\
    \ == \"\") {\n         return false;\n      }\n      if(isupper(it->first[0]))\
    \ {\n         //std::cout << it->first << \"\\n\";\n         lower = false;\n\
    \      } else {\n         upper = false;\n      }\n   }\n   if(upper || lower)\
    \ {\n      return true;\n   } else {\n      return false;\n   }\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqr45xnhs: /tmp/tmpqr45xnhs.cpp:45: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // your code\
    \ here\n    int lower = 0;\n    int upper = 0;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++){\n      if(islower(it->first[0])){\n        lower++;\n\
    \      }\n      else if(isupper(it->first[0])){\n        upper++;\n      }\n \
    \   }\n    if(lower == dict.size() || upper == dict.size()){\n      return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp614u_a_2: /tmp/tmp614u_a_2.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool upper = false;\n\tfor (std::pair<std::string,\
    \ std::string> p : dict) {\n\t\t// First check if we have gone from upper to lower\
    \ or vice versa.\n\t\tif (std::islower(p.first[0]) != upper) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t// Then set the expected case.\n\t\tupper = std::isupper(p.first[0]);\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpepgb_fxb: /tmp/tmpepgb_fxb.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  auto it = dict.begin();\n  char first_char = it->first[0];\n\
    \  if (first_char <= 'z' && first_char >= 'a') {\n    while (it != dict.end())\
    \ {\n      if (it->first[0] <= 'z' && it->first[0] >= 'a') {\n        ++it;\n\
    \      } else {\n        return false;\n      }\n    }\n  } else if (first_char\
    \ <= 'Z' && first_char >= 'A') {\n    while (it != dict.end()) {\n      if (it->first[0]\
    \ <= 'Z' && it->first[0] >= 'A') {\n        ++it;\n      } else {\n        return\
    \ false;\n      }\n    }\n  } else {\n    return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4dqpo7mf: /tmp/tmp4dqpo7mf.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tstd::map<std::string,\
    \ std::string>::iterator it;\n\tit = dict.begin();\n\tstd::string str = it->first;\n\
    \tif (str.size() == 0)\n\t\treturn false;\n\tint count = 0;\n\tint up = 0;\n\t\
    int low = 0;\n\tfor (int i = 0; i < str.size(); i++) {\n\t\tif (isupper(str[i]))\n\
    \t\t\tup++;\n\t\telse if (islower(str[i]))\n\t\t\tlow++;\n\t}\n\tif (up == str.size())\n\
    \t\tcount = 1;\n\telse if (low == str.size())\n\t\tcount = 2;\n\telse {\n\t\t\
    return false;\n\t}\n\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\
    std::string str1 = it->first;\n\t\tif (count == 1) {\n\t\t\tfor (int i = 0; i\
    \ < str1.size(); i++) {\n\t\t\t\tif (islower(str1[i]))\n\t\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (count == 2) {\n\t\t\tfor (int i = 0; i < str1.size();\
    \ i++) {\n\t\t\t\tif (isupper(str1[i]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::bad_alloc'\n  what():\
    \  std::bad_alloc\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    it = dict.begin();\n    bool isAllLowerCase\
    \ = true;\n    bool isAllUpperCase = true;\n    if(it == dict.end()) {\n     \
    \   return false;\n    }\n    while(it != dict.end()) {\n        std::string key\
    \ = it->first;\n        for(int i = 0; i < key.length(); i++) {\n            if(key[i]\
    \ < 'a' || key[i] > 'z') {\n                isAllLowerCase = false;\n        \
    \    }\n            if(key[i] < 'A' || key[i] > 'Z') {\n                isAllUpperCase\
    \ = false;\n            }\n        }\n        it++;\n    }\n    return isAllLowerCase\
    \ || isAllUpperCase;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // your code\
    \ here\n  std::map<std::string, std::string>::iterator it;\n  it = dict.begin();\n\
    \  int upper = 0;\n  int lower = 0;\n  for(it; it != dict.end(); it++){\n    std::string\
    \ key = it->first;\n    if(islower(key[0])){\n      lower++;\n    }else{\n   \
    \   upper++;\n    }\n  }\n  if(upper == 0 || lower == 0){\n    return true;\n\
    \  }else{\n    return false;\n  }\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6erg7_fr: /tmp/tmp6erg7_fr.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tstd::map<std::string,\
    \ std::string>::iterator it = dict.begin();\n\tif (it == dict.end()) {\n\t\treturn\
    \ false;\n\t}\n\tbool upper = isupper(it->first[0]);\n\twhile (it != dict.end())\
    \ {\n\t\tif (isupper(it->first[0]) != upper) {\n\t\t\treturn false;\n\t\t}\n\t\
    \tit++;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj7jn_3i5: /tmp/tmpj7jn_3i5.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<char,int>\
    \ chars;\n    for(auto i:dict){\n        chars[i.first[0]]++;\n    }\n    bool\
    \ allLower = false;\n    bool allUpper = false;\n    for(auto i:chars){\n    \
    \    if(isupper(i.first)){\n            allUpper = true;\n        }\n        else{\n\
    \            allLower = true;\n        }\n    }\n    return !(allLower && allUpper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5tcf9okd: /tmp/tmp5tcf9okd.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tif (dict.size() == 1)\n\t\treturn true;\n\tstd::map<std::string,\
    \ std::string>::iterator it;\n\tfor (it = dict.begin(); it != dict.end(); it++)\
    \ {\n\t\tstd::string key = it->first;\n\t\tif (key.length() == 0)\n\t\t\treturn\
    \ false;\n\t\tchar ch = key[0];\n\t\tif (ch >= 'A' && ch <= 'Z') {\n\t\t\tfor\
    \ (int i = 1; i < key.length(); i++) {\n\t\t\t\tif (key[i] >= 'a' && key[i] <=\
    \ 'z')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (ch >= 'a' && ch\
    \ <= 'z') {\n\t\t\tfor (int i = 1; i < key.length(); i++) {\n\t\t\t\tif (key[i]\
    \ >= 'A' && key[i] <= 'Z')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeq115vt7: /tmp/tmpeq115vt7.cpp:43: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool result\
    \ = true;\n    if(dict.size() == 0) {\n        return false;\n    }\n    int uppercase\
    \ = 0;\n    int lowercase = 0;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.at(0)\
    \ >= 'A' && it->first.at(0) <= 'Z') {\n            uppercase += 1;\n        }\n\
    \        else if(it->first.at(0) >= 'a' && it->first.at(0) <= 'z') {\n       \
    \     lowercase += 1;\n        }\n    }\n    if(!(uppercase == 0 || lowercase\
    \ == 0)) {\n        result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8fnyu8p3: /tmp/tmp8fnyu8p3.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::string\
    \ s_key;\n    std::string u_key;\n    std::string value;\n    int i;\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        s_key = it->first;\n\
    \        value = it->second;\n        for(i = 0; i < s_key.length(); i++) {\n\
    \            if(s_key[i] < 'a' || s_key[i] > 'z')\n                break;\n  \
    \      }\n        if(i == s_key.length())\n            continue;\n        else\
    \ \n            break;\n    }\n    if(it == dict.end())\n        return true;\n\
    \    for(it = dict.begin(); it != dict.end(); it++) {\n        u_key = it->first;\n\
    \        value = it->second;\n        for(i = 0; i < u_key.length(); i++) {\n\
    \            if(u_key[i] < 'A' || u_key[i] > 'Z')\n                break;\n  \
    \      }\n        if(i == u_key.length())\n            continue;\n        else\
    \ \n            break;\n    }\n    if(it == dict.end())\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool first_lowercase\
    \ = true;\n    if (dict.size() == 0)\n        return false;\n    if (!islower(dict.begin()->first[0]))\n\
    \        first_lowercase = false;\n    for (auto it : dict) {\n        std::string\
    \ key = it.first;\n        for (int i = 0; i < key.length(); i++) {\n        \
    \    if (first_lowercase) {\n                if (!islower(key[i]))\n         \
    \           return false;\n            } else {\n                if (!isupper(key[i]))\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ <= 0) return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ i = dict.begin(); i != dict.end(); i++) {\n        for(int j = 0; j < i->first.length();\
    \ j++) {\n            if(islower(i->first[j])) {\n                upper = false;\n\
    \            } else if(isupper(i->first[j])) {\n                lower = false;\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return lower || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  int l_case\
    \ = 0;\n  int u_case = 0;\n  if (dict.size() == 0) {\n    return false;\n  }\n\
    \  else {\n    for (auto i = dict.begin(); i != dict.end(); i++) {\n      if (islower(i->first[0]))\
    \ {\n        l_case += 1;\n      }\n      else if (isupper(i->first[0])) {\n \
    \       u_case += 1;\n      }\n    }\n    if (l_case == dict.size() || u_case\
    \ == dict.size()) {\n      return true;\n    }\n    else {\n      return false;\n\
    \    }\n  }\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4p0r8pik: /tmp/tmp4p0r8pik.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  std::map<std::string, std::string>::iterator it;\n  bool lowercase\
    \ = true;\n  bool uppercase = true;\n  for (it = dict.begin(); it != dict.end();\
    \ it++) {\n    std::string key = it->first;\n    if (islower(key[0]))\n      uppercase\
    \ = false;\n    else\n      lowercase = false;\n  }\n  return lowercase || uppercase;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoet0dhlu: /tmp/tmpoet0dhlu.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // TODO: Implement\
    \ the function here\n  int count_lower_keys = 0;\n  int count_upper_keys = 0;\n\
    \  for (auto elem : dict) {\n    if (islower(elem.first[0])) {\n      count_lower_keys++;\n\
    \    } else if (isupper(elem.first[0])) {\n      count_upper_keys++;\n    }\n\
    \  }\n  if (count_lower_keys == dict.size() || count_upper_keys == dict.size())\
    \ {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzve40xqs: /tmp/tmpzve40xqs.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tbool case_status\
    \ = true;\n\tbool upper_case = false;\n\tbool lower_case = false;\n\tfor (std::map<std::string,\
    \ std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n\t\tfor\
    \ (int i = 0; i < it->first.length(); i++) {\n\t\t\tif (isupper(it->first[i]))\
    \ {\n\t\t\t\tupper_case = true;\n\t\t\t}\n\t\t\telse if (islower(it->first[i]))\
    \ {\n\t\t\t\tlower_case = true;\n\t\t\t}\n\t\t}\n\t\tif (upper_case && lower_case)\
    \ {\n\t\t\tcase_status = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn case_status;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2itx_4tx: /tmp/tmp2itx_4tx.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::string\
    \ keys_upper;\n    std::string keys_lower;\n    std::string value;\n    for (auto\
    \ kv : dict) {\n        keys_upper = kv.first;\n        keys_lower = kv.first;\n\
    \        value = kv.second;\n        for (int i = 0; i < kv.first.length(); i++)\
    \ {\n            keys_upper[i] = toupper(keys_upper[i]);\n            keys_lower[i]\
    \ = tolower(keys_lower[i]);\n        }\n        if (keys_upper != kv.first &&\
    \ keys_lower != kv.first) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpemsc7kjn: /tmp/tmpemsc7kjn.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    if(dict.empty()) return false;\n    for(it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n\
    \            for(int i = 0; i < it->first.length(); i++) {\n                if(!islower(it->first[i]))\
    \ return false;\n            }\n        }\n        else if(isupper(it->first[0]))\
    \ {\n            for(int i = 0; i < it->first.length(); i++) {\n             \
    \   if(!isupper(it->first[i])) return false;\n            }\n        }\n     \
    \   else return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8qfdvm62: /tmp/tmp8qfdvm62.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  bool isLowerCase = false;\n  for (auto x : dict) {\n    if\
    \ (islower(x.first[0])) {\n      isLowerCase = true;\n      break;\n    }\n  }\n\
    \  for (auto x : dict) {\n    if (isLowerCase) {\n      if (!islower(x.first[0]))\
    \ {\n        return false;\n      }\n    } else {\n      if (!isupper(x.first[0]))\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr3rrxa4p: /tmp/tmpr3rrxa4p.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  bool all_upper = true;\n  bool all_lower = true;\n  for (std::map<std::string,\
    \ std::string>::iterator it=dict.begin(); it!=dict.end(); ++it) {\n    if (!isupper(it->first[0]))\
    \ {\n      all_upper = false;\n    }\n    if (!islower(it->first[0])) {\n    \
    \  all_lower = false;\n    }\n  }\n  return all_upper || all_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7ftm_63n: /tmp/tmp7ftm_63n.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::vector<char>\
    \ lower, upper;\n    // Iterate through each pair, checking the first character\
    \ of the key.\n    for (auto i : dict) {\n        if (isupper(i.first[0])) {\n\
    \            upper.push_back(i.first[0]);\n        } else {\n            lower.push_back(i.first[0]);\n\
    \        }\n    }\n    // If we have any entries in lower or upper, make sure\
    \ both are empty.\n    if (lower.size() > 0 || upper.size() > 0) {\n        return\
    \ lower.size() == 0 || upper.size() == 0;\n    }\n    // Otherwise, if both are\
    \ empty, the dict was empty, and we return false.\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp863rjmbw: /tmp/tmp863rjmbw.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tbool upper=1,\
    \ lower=1;\n\tfor(auto i:dict){\n\t\tint c = 0;\n\t\tfor(auto j:i.first){\n\t\t\
    \tif(!isupper(j))\n\t\t\t\tupper = 0;\n\t\t\tif(!islower(j))\n\t\t\t\tlower =\
    \ 0;\n\t\t\tif(upper == 0 && lower == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxokh31h1: /tmp/tmpxokh31h1.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>())) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// write your\
    \ code here\n\t\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5kx9fjuh: /tmp/tmp5kx9fjuh.cpp:20: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    std::map<std::string, std::string>::iterator it;\n    it\
    \ = dict.begin();\n    bool found = true;\n    int count = 0;\n    while(it!=dict.end()){\n\
    \        int len = it->first.length();\n        for(int i=0;i<len;i++){\n    \
    \        if(isupper(it->first[i]))\n                count++;\n        }\n    \
    \    if(count==len)\n            found = true;\n        else\n            return\
    \ false;\n        it++;\n    }\n    if(found==true)\n        return true;\n  \
    \  else\n        return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe4mq94ew: /tmp/tmpe4mq94ew.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  return std::all_of(dict.begin(),\
    \ dict.end(), [](const auto& item) {\n    return std::isupper(item.first[0]);\n\
    \  }) || std::all_of(dict.begin(), dict.end(), [](const auto& item) {\n    return\
    \ std::islower(item.first[0]);\n  });\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7ey99kvg: /tmp/tmp7ey99kvg.cpp:24: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool result\
    \ = true;\n    bool keys_all_caps = true;\n    bool keys_all_lower = true;\n \
    \   for (auto const& mapPair : dict) {\n        std::string key = mapPair.first;\n\
    \        for (char& c : key) {\n            if (islower(c)) {\n              \
    \  keys_all_caps = false;\n            } else if (isupper(c)) {\n            \
    \    keys_all_lower = false;\n            } else {\n                keys_all_caps\
    \ = false;\n                keys_all_lower = false;\n            }\n        }\n\
    \    }\n    result = keys_all_caps || keys_all_lower;\n    return result;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7jqm2ega: /tmp/tmp7jqm2ega.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>())) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tstd::string first = dict.begin()->first;\n\tbool\
    \ is_upper = isupper(first[0]);\n\tfor (auto entry : dict) {\n\t\tif (is_upper)\
    \ {\n\t\t\tif (!isupper(entry.first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse {\n\t\t\tif (!islower(entry.first[0])) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmppnktckn0: /tmp/tmppnktckn0.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tfor (auto itr = dict.begin(); itr != dict.end();\
    \ itr++) {\n\t\tif (islower(itr->first[0])) {\n\t\t\tfor (auto itr2 = dict.begin();\
    \ itr2 != dict.end(); itr2++) {\n\t\t\t\tif (!islower(itr2->first[0]))\n\t\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse if (isupper(itr->first[0]))\
    \ {\n\t\t\tfor (auto itr2 = dict.begin(); itr2 != dict.end(); itr2++) {\n\t\t\t\
    \tif (!isupper(itr2->first[0]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkc3lxcxm: /tmp/tmpkc3lxcxm.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnwscnpzi: /tmp/tmpnwscnpzi.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  bool isUpper\
    \ = false;\n  bool isLower = false;\n  if (dict.size() == 0) {\n    return false;\n\
    \  }\n  for (auto it = dict.begin(); it != dict.end(); it++) {\n    std::string\
    \ key = it->first;\n    // check to see if all values are in upper case\n    if\
    \ (key == toupper(key)) {\n      isUpper = true;\n    }\n    // check to see if\
    \ all values are in lower case\n    if (key == tolower(key)) {\n      isLower\
    \ = true;\n    }\n  }\n  // if one of the conditions is satisfied\n  if (isUpper\
    \ || isLower) {\n    return true;\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvthsimt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpnvthsimt.cpp:21:23: error:\
    \ no matching function for call to \u2018toupper(std::string&)\u2019\n   21 |\
    \     if (key == toupper(key)) {\n      |                ~~~~~~~^~~~~\nIn file\
    \ included from /usr/include/c++/11/bits/basic_ios.h:37,\n                 from\
    \ /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnvthsimt.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2670:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const\
    \ std::locale&)\u2019\n 2670 |     toupper(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2670:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpnvthsimt.cpp:21:23:\
    \ note:   candidate expects 2 arguments, 1 provided\n   21 |     if (key == toupper(key))\
    \ {\n      |                ~~~~~~~^~~~~\nIn file included from /usr/include/c++/11/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpnvthsimt.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmpnvthsimt.cpp:25:23: error: no matching function\
    \ for call to \u2018tolower(std::string&)\u2019\n   25 |     if (key == tolower(key))\
    \ {\n      |                ~~~~~~~^~~~~\nIn file included from /usr/include/c++/11/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/11/ios:44,\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool lower_keys=false, upper_keys=false;\n    for(std::map<std::string,\
    \ std::string>::iterator it=dict.begin(); it!=dict.end(); ++it){\n        if(islower(it->first[0]))\n\
    \            lower_keys=true;\n        else\n            upper_keys=true;\n  \
    \  }\n    return lower_keys^upper_keys;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpacqzikyf: /tmp/tmpacqzikyf.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // check for\
    \ empty dictionary.\n  if (dict.empty())\n    return false;\n  // capture the\
    \ first key and compare it with the rest of the keys.\n  auto itr = dict.begin();\n\
    \  char first_char = (*itr).first[0];\n  for (auto itr = dict.begin(); itr !=\
    \ dict.end(); itr++) {\n    if (islower(first_char) != islower((*itr).first[0]))\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxf_b28m3: /tmp/tmpxf_b28m3.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  int count =\
    \ 0;\n  if(dict.size()==0)\n    return false;\n  std::map<std::string, std::string>::iterator\
    \ it;\n  for(it=dict.begin();it!=dict.end();it++)\n  {\n    if(it->first == std::string(it->first.size(),\
    \ toupper(it->first[0])))\n      count++;\n    else if(it->first == std::string(it->first.size(),\
    \ tolower(it->first[0])))\n      count--;\n    else\n      return false;\n  }\n\
    \  if(count == dict.size() || count == -1*dict.size())\n    return true;\n  else\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp76g6hb6v: /tmp/tmp76g6hb6v.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool first_key_lowercase\
    \ = false;\n    bool first_key_uppercase = false;\n    if (dict.empty()) {\n \
    \       return false;\n    }\n    if (isupper(dict.begin()->first[0])) {\n   \
    \     first_key_uppercase = true;\n    } else {\n        first_key_lowercase =\
    \ true;\n    }\n    for (std::map<std::string, std::string>::iterator it = dict.begin();\
    \ it != dict.end(); it++) {\n        std::string key = it->first;\n        bool\
    \ is_uppercase = true;\n        bool is_lowercase = true;\n        for (char c\
    \ : key) {\n            if (isupper(c)) {\n                is_lowercase = false;\n\
    \            } else if (islower(c)) {\n                is_uppercase = false;\n\
    \            } else {\n                is_lowercase = false;\n               \
    \ is_uppercase = false;\n            }\n        }\n        if (!is_lowercase &&\
    \ !is_uppercase) {\n            return false;\n        }\n        if (first_key_lowercase\
    \ && is_uppercase) {\n            return false;\n        }\n        if (first_key_uppercase\
    \ && is_lowercase) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::string str = dict.begin()->first;\n    bool check=isupper(str[0]);\n\
    \    for(auto it=dict.begin();it!=dict.end();it++){\n        if(isupper(it->first[0])!=check)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmplcorbeqb: /tmp/tmplcorbeqb.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool isUpper\
    \ = true;\n    bool isLower = true;\n    // Your code goes here\n    return isUpper\
    \ || isLower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp215yqxxj: /tmp/tmp215yqxxj.cpp:21: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator it;\n\
    \    bool lower=false, upper=false;\n    for(it=dict.begin(); it!=dict.end();\
    \ it++){\n        lower=false, upper=false;\n        for(int i=0; i<it->first.length();\
    \ i++){\n            if(islower(it->first[i]))\n                lower=true;\n\
    \            else if(isupper(it->first[i]))\n                upper=true;\n   \
    \         else\n                return false;\n        }\n        if(lower==upper)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvv5gzpd1: /tmp/tmpvv5gzpd1.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::string key;\n    for(auto itr = dict.begin();\
    \ itr != dict.end(); itr++) {\n        key = itr->first;\n        if(std::isupper(key[0]))\n\
    \            break;\n    }\n    if(std::isupper(key[0])) {\n        for(auto itr\
    \ = dict.begin(); itr != dict.end(); itr++) {\n            key = itr->first;\n\
    \            if(std::islower(key[0]))\n                return false;\n       \
    \ }\n    }\n    else {\n        for(auto itr = dict.begin(); itr != dict.end();\
    \ itr++) {\n            key = itr->first;\n            if(std::isupper(key[0]))\n\
    \                return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1n2sthmk: /tmp/tmp1n2sthmk.cpp:41: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool is_lower = islower(dict.begin()->first[0]);\n\
    \tauto it = dict.begin();\n\twhile (it != dict.end()) {\n\t\tif (islower(it->first[0])\
    \ != is_lower) {\n\t\t\treturn false;\n\t\t}\n\t\tit++;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmppe0l2tq8: /tmp/tmppe0l2tq8.cpp:28: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  std::set<int> checker;\n  for (auto i : dict) {\n\
    \    int check = 0;\n    for (auto j : i.first) {\n      if (islower(j)) {\n \
    \       check++;\n      }\n    }\n    checker.insert(check);\n  }\n  return checker.size()\
    \ == 1 ? true : false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    int lower = 0, upper = 0;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower++;\n        else if(isupper(it->first[0]))\n            upper++;\n\
    \        else\n            return false;\n    }\n    if(lower == dict.size() ||\
    \ upper == dict.size())\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjrwk_m58: /tmp/tmpjrwk_m58.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tbool lowerCase\
    \ = false;\n\tbool upperCase = false;\n\tfor (auto x : dict) {\n\t\tif (islower(x.first[0]))\
    \ {\n\t\t\tlowerCase = true;\n\t\t}\n\t\telse if (isupper(x.first[0])) {\n\t\t\
    \tupperCase = true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif\
    \ (lowerCase == true && upperCase == true) {\n\t\treturn false;\n\t}\n\telse {\n\
    \t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmprk723xx9: /tmp/tmprk723xx9.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  // map<string, string>::iterator it;\n  // for (it = dict.begin();\
    \ it != dict.end(); it++) {\n  //   cout << \"Key: \" << it->first << \" Value:\
    \ \" << it->second << endl;\n  // }\n  bool first_is_lower = std::islower(dict.begin()->first[0]);\n\
    \  bool is_upper = false;\n  bool is_lower = false;\n  for (const auto& kv : dict)\
    \ {\n    bool is_lower = std::islower(kv.first[0]);\n    if (is_lower != first_is_lower)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkvv_bvw2: /tmp/tmpkvv_bvw2.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool lowercase\
    \ = std::all_of(dict.begin(), dict.end(), [](auto const& x) {\n        return\
    \ std::all_of(x.first.begin(), x.first.end(), [](char c) { return std::islower(c);\
    \ });\n    });\n    bool uppercase = std::all_of(dict.begin(), dict.end(), [](auto\
    \ const& x) {\n        return std::all_of(x.first.begin(), x.first.end(), [](char\
    \ c) { return std::isupper(c); });\n    });\n    return (lowercase || uppercase);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4q8hi1av: /tmp/tmp4q8hi1av.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>())) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tfor (const\
    \ auto& kv : dict) {\n\t\tbool isLower = true;\n\t\tbool isUpper = true;\n\t\t\
    for (char c : kv.first) {\n\t\t\tif (c < 'a' || c > 'z') {\n\t\t\t\tisLower =\
    \ false;\n\t\t\t}\n\t\t\tif (c < 'A' || c > 'Z') {\n\t\t\t\tisUpper = false;\n\
    \t\t\t}\n\t\t}\n\t\tif (!isLower && !isUpper) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmx21t02a: /tmp/tmpmx21t02a.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool check_lower = false;\n    bool check_upper = false;\n\
    \    for(std::map<std::string, std::string>::iterator it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            check_upper\
    \ = true;\n        } else {\n            check_lower = true;\n        }\n    }\n\
    \    return (check_lower == check_upper) ? false : true;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpotipjxe2: /tmp/tmpotipjxe2.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // check\
    \ if dictionary is empty\n    if (dict.empty())\n        return false;\n    //\
    \ declare an iterator\n    std::map<std::string, std::string>::iterator iter;\n\
    \    // iterate over dictionary\n    for (iter = dict.begin(); iter != dict.end();\
    \ iter++) {\n        // convert keys to lower case\n        for (int i = 0; i\
    \ < (*iter).first.length(); i++) {\n            (*iter).first[i] = tolower((*iter).first[i]);\n\
    \        }\n    }\n    // loop through the dictionary\n    for (iter = dict.begin();\
    \ iter != dict.end(); iter++) {\n        // check if all keys are in lower case\n\
    \        if ((*iter).first != (*iter).first.c_str())\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp6dltymt.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpp6dltymt.cpp:22:30: error:\
    \ assignment of read-only location \u2018iter.std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >::operator*().std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::first.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    \n   22 |             (*iter).first[i] = tolower((*iter).first[i]);\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool is_lower = true;\n  for (auto it = dict.begin();\
    \ it != dict.end(); ++it) {\n    std::string key = it->first;\n    if (key.size()\
    \ == 0) {\n      return false;\n    }\n    is_lower = is_lower && (key.at(0) <=\
    \ 'z' && key.at(0) >= 'a');\n  }\n  return is_lower;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6jtlvi9q: /tmp/tmp6jtlvi9q.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// Your code\
    \ here...\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmppd_t_fsp: /tmp/tmppd_t_fsp.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  return std::all_of(dict.begin(),\
    \ dict.end(), [](const auto& entry) {\n    return std::all_of(entry.first.begin(),\
    \ entry.first.end(), ::islower) ||\n           std::all_of(entry.first.begin(),\
    \ entry.first.end(), ::isupper);\n  });\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4vdbtd5x: /tmp/tmp4vdbtd5x.cpp:21: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // if(dict.empty())\n\
    \  //   return false;\n  // if(dict.size() == 1)\n  //   return true;\n  // std::map<std::string,\
    \ std::string>::iterator itr = dict.begin();\n  // int flag = 0;\n  // while(itr\
    \ != dict.end()){\n  //   if(flag == 0){\n  //     flag = 1;\n  //     std::string\
    \ temp = itr->first;\n  //     if(temp[0] >= 'a' && temp[0] <= 'z')\n  //    \
    \   flag = 2;\n  //     else if(temp[0] >= 'A' && temp[0] <= 'Z')\n  //      \
    \ flag = 3;\n  //     itr++;\n  //   }else{\n  //     std::string temp = itr->first;\n\
    \  //     if(flag == 2){\n  //       if(temp[0] >= 'A' && temp[0] <= 'Z')\n  //\
    \         return false;\n  //     }else if(flag == 3){\n  //       if(temp[0]\
    \ >= 'a' && temp[0] <= 'z')\n  //         return false;\n  //     }\n  //    \
    \ itr++;\n  //   }\n  // }\n  // return true;\n  if(dict.empty())\n    return\
    \ false;\n  bool flag1 = false, flag2 = false;\n  for(auto itr : dict){\n    std::string\
    \ temp = itr.first;\n    if(temp[0] >= 'a' && temp[0] <= 'z')\n      flag1 = true;\n\
    \    else if(temp[0] >= 'A' && temp[0] <= 'Z')\n      flag2 = true;\n  }\n  if(flag1\
    \ && flag2)\n    return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd8o2g5pu: /tmp/tmpd8o2g5pu.cpp:59: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // enter your\
    \ code here\n  if(dict.size() == 0)\n    return false;\n  std::map<std::string,\
    \ std::string>::iterator it;\n  for(it = dict.begin(); it != dict.end(); it++)\n\
    \  {\n    std::string key = it->first;\n    if(islower(key[0]))\n    {\n     \
    \ for(auto i = 0; i < key.length(); i++)\n      {\n        if(!islower(key[i]))\n\
    \          return false;\n      }\n    }\n    else\n    {\n      for(auto i =\
    \ 0; i < key.length(); i++)\n      {\n        if(!isupper(key[i]))\n         \
    \ return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxykghyz0: /tmp/tmpxykghyz0.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool in_lower = false;\n    bool in_upper\
    \ = false;\n    std::map<std::string, std::string>::iterator iter;\n    for(iter\
    \ = dict.begin(); iter != dict.end(); iter++) {\n        //std::cout << \"key\
    \ = \" << iter->first << \" value = \" << iter->second << std::endl;\n       \
    \ if(isupper(iter->first[0])) {\n            in_upper = true;\n        } else\
    \ {\n            in_lower = true;\n        }\n    }\n    return (in_lower == in_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7sdb_q0m: /tmp/tmp7sdb_q0m.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tint cap = 0;\n\
    \tint lower = 0;\n\tif (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tfor (auto\
    \ key : dict) {\n\t\tif (isupper(key.first[0])) {\n\t\t\tcap++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tlower++;\n\t\t}\n\t}\n\tif (cap == 0 || lower == 0) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv7vo56ez: /tmp/tmpv7vo56ez.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\telse {\n\t\tauto it = dict.begin();\n\t\t\
    bool lowercase = islower(it->first[0]);\n\t\twhile (it != dict.end()) {\n\t\t\t\
    if (lowercase != islower(it->first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \tit++;\n\t\t}\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb1g1yy2z: /tmp/tmpb1g1yy2z.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for (auto const& x : dict) {\n    \
    \    if (isupper(x.first[0])) {\n            all_lower = false;\n        } else\
    \ {\n            all_upper = false;\n        }\n    }\n    return all_lower ||\
    \ all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa3556m3z: /tmp/tmpa3556m3z.cpp:28: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool islower=true;\n\
    \    bool isupper=true;\n    std::map<std::string, std::string>::iterator it;\n\
    \    for(it=dict.begin();it!=dict.end();it++){\n        islower = islower & (it->first.length()==it->first.length());\n\
    \        isupper = isupper & (it->first.length()==it->first.length());\n    }\n\
    \    return (islower|isupper);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaev05nlu: /tmp/tmpaev05nlu.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool is_all_lower = true;\n\tfor (std::map<std::string,\
    \ std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::islower(i->first[0]))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tis_all_lower = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (is_all_lower)\n\t\treturn true;\n\tfor (std::map<std::string,\
    \ std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::isupper(i->first[0]))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmprsx9rqdm: /tmp/tmprsx9rqdm.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // TODO\n\
    \    int cnt1 = 0, cnt2 = 0;\n    std::vector<std::string> k;\n    std::vector<std::string>\
    \ v;\n    for(auto& c : dict) {\n        k.push_back(c.first);\n        v.push_back(c.second);\n\
    \    }\n    for(auto& it : k) {\n        if(!islower(it[0])) {\n            cnt1++;\n\
    \        }\n    }\n    for(auto& it : v) {\n        if(islower(it[0])) {\n   \
    \         cnt2++;\n        }\n    }\n    if(cnt1 == 0 || cnt2 == 0) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5503dxjr: /tmp/tmp5503dxjr.cpp:41: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // check if\
    \ input is empty\n  if (dict.empty()) {\n    return false;\n  }\n  // bool to\
    \ hold if all keys are strings in lower case\n  bool is_lower = true;\n  // bool\
    \ to hold if all keys are strings in upper case\n  bool is_upper = true;\n  //\
    \ iterate through map dict\n  for (auto i : dict) {\n    // compare i.first with\
    \ i.first in lower case, and set is_lower to false if not\n    if (i.first !=\
    \ boost::to_lower_copy(i.first)) {\n      is_lower = false;\n    }\n    // compare\
    \ i.first with i.first in upper case, and set is_upper to false if not\n    if\
    \ (i.first != boost::to_upper_copy(i.first)) {\n      is_upper = false;\n    }\n\
    \  }\n  // return false if all keys are neither strings in lower case nor strings\
    \ in upper case\n  if (!is_lower && !is_upper) {\n    return false;\n  }\n  //\
    \ return true if all keys are strings in lower case or all keys are strings in\
    \ upper case\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qud37x7.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7qud37x7.cpp:24:20: error:\
    \ \u2018boost\u2019 has not been declared\n   24 |     if (i.first != boost::to_lower_copy(i.first))\
    \ {\n      |                    ^~~~~\n/tmp/tmp7qud37x7.cpp:28:20: error: \u2018\
    boost\u2019 has not been declared\n   28 |     if (i.first != boost::to_upper_copy(i.first))\
    \ {\n      |                    ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::map<std::string,\
    \ std::string>::iterator it;\n  std::set<char> is_upper_case;\n  std::set<char>\
    \ is_lower_case;\n  for (it = dict.begin(); it != dict.end(); it++) {\n    if\
    \ (it->first.size() == 0) {\n      return false;\n    }\n    if (isupper(it->first[0]))\
    \ {\n      is_upper_case.insert(it->first[0]);\n    } else {\n      is_lower_case.insert(it->first[0]);\n\
    \    }\n  }\n  if (is_upper_case.size() > 0 && is_lower_case.size() > 0) {\n \
    \   return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp00kjlqoq: /tmp/tmp00kjlqoq.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ < 1) return false;\n    bool shouldBeLowerCase = false;\n    bool shouldBeUpperCase\
    \ = false;\n    for(std::map<std::string, std::string>::iterator i = dict.begin();\
    \ i != dict.end(); i++) {\n        for(unsigned int j = 0; j < i->first.length();\
    \ j++) {\n            if(!shouldBeLowerCase && islower(i->first[j])) shouldBeLowerCase\
    \ = true;\n            if(!shouldBeUpperCase && isupper(i->first[j])) shouldBeUpperCase\
    \ = true;\n        }\n    }\n    if(shouldBeLowerCase && shouldBeUpperCase) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfl7ne5b0: /tmp/tmpfl7ne5b0.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  if (dict.size() == 1) {\n    return true;\n  }\n\
    \  std::map<std::string, std::string>::iterator it;\n  for (it = dict.begin();\
    \ it != dict.end(); it++) {\n    if (isupper(it->first[0])) {\n      if (it->first[0]\
    \ != toupper(it->first[0])) {\n        return false;\n      }\n    } else {\n\
    \      if (it->first[0] != tolower(it->first[0])) {\n        return false;\n \
    \     }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoflip0bc: /tmp/tmpoflip0bc.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::string firstkey = dict.begin()->first;\n    if(firstkey[0]>=97)\n\
    \    {\n        for(auto elem:dict)\n        {\n            std::string temp =\
    \ elem.first;\n            for(int i=0;i<temp.length();i++)\n            {\n \
    \               if(temp[i]<97)\n                    return false;\n          \
    \  }\n        }\n    }\n    else if(firstkey[0]<=97)\n    {\n        for(auto\
    \ elem:dict)\n        {\n            std::string temp = elem.first;\n        \
    \    for(int i=0;i<temp.length();i++)\n            {\n                if(temp[i]>=97)\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // your code\
    \ goes here\n  if(dict.size()==0)\n    return false;\n  std::map<std::string,\
    \ std::string>::iterator it = dict.begin();\n  std::string str = it->first;\n\
    \  std::locale loc;\n  if(islower(str[0],loc)){\n    while(it!=dict.end()){\n\
    \      if(islower(it->first[0],loc))\n        it++;\n      else\n        return\
    \ false;\n    }\n  }\n  else{\n    while(it!=dict.end()){\n      if(isupper(it->first[0],loc))\n\
    \        it++;\n      else\n        return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbx9j34hj: /tmp/tmpbx9j34hj.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool lower\
    \ = false;\n    bool upper = false;\n    int i = 0;\n    if (dict.size()==0)\n\
    \        return false;\n    for (std::map<std::string, std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        for (int i = 0; i < it->first.length();\
    \ i++) {\n            if (islower(it->first[i])) {\n                lower = true;\n\
    \            }\n            else if (isupper(it->first[i])) {\n              \
    \  upper = true;\n            }\n            else {\n                return false;\n\
    \            }\n        }\n    }\n    if (lower == true && upper == true) {\n\
    \        return false;\n    }\n    else {\n        return true;\n    }\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\t\n\tbool all_lower = true;\n\tfor (auto kv\
    \ : dict) {\n\t\tfor (auto c : kv.first) {\n\t\t\tif (c < 'a' || c > 'z') {\n\t\
    \t\t\tall_lower = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (all_lower)\
    \ {\n\t\treturn true;\n\t}\n\t\n\tfor (auto kv : dict) {\n\t\tfor (auto c : kv.first)\
    \ {\n\t\t\tif (c < 'A' || c > 'Z') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator itr;\n\
    \    int lower=0,upper=0;\n    for(itr=dict.begin();itr!=dict.end();itr++)\n \
    \   {\n        if(isupper(itr->first[0]))\n            upper++;\n        else\
    \ if(islower(itr->first[0]))\n            lower++;\n        else\n           \
    \ return false;\n    }\n    if(lower==0 || upper==0)\n        return true;\n \
    \   return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpamxay_l3: /tmp/tmpamxay_l3.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::string\
    \ s = dict.begin()->first;\n    std::string k = dict.begin()->second;\n    bool\
    \ case_type = std::islower(s[0]);\n    bool prev = true;\n    if (s == \"\") {\n\
    \        return false;\n    }\n    for (auto &m : dict) {\n        if (m.first\
    \ == \"\" || m.second == \"\") {\n            return false;\n        }\n     \
    \   prev = prev && std::islower(m.first[0]) == case_type;\n    }\n    return prev;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6k8abvo9: /tmp/tmp6k8abvo9.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here...\n    bool lower=true;\n    bool upper=true;\n    bool check=true;\n\
    \    bool empty=true;\n    if(dict.size()==0){\n        check=false;\n    }\n\
    \    for(auto x : dict){\n        std::string key=x.first;\n        if(key[0]>=65\
    \ && key[0]<=90){\n            lower=false;\n        }\n        if(key[0]>=97\
    \ && key[0]<=122){\n            upper=false;\n        }\n    }\n    if(lower==false\
    \ && upper==false || (lower==false && upper==true) || (lower==true && upper==false)){\n\
    \        check=false;\n    }\n    return check;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnte3q_eo: /tmp/tmpnte3q_eo.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// Write your\
    \ code here.\n\tbool are_lower_case = true;\n\tbool are_upper_case = true;\n\t\
    for (auto pair : dict) {\n\t\tif (!islower(pair.first[0])) {\n\t\t\tare_lower_case\
    \ = false;\n\t\t}\n\t\tif (!isupper(pair.first[0])) {\n\t\t\tare_upper_case =\
    \ false;\n\t\t}\n\t}\n\treturn are_lower_case || are_upper_case;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdb80d5de: /tmp/tmpdb80d5de.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::vector<bool>\
    \ lower, upper;\n    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   for (auto &i : dict) {\n        std::transform(i.first.begin(), i.first.end(),\
    \ i.first.begin(), ::tolower);\n        lower.push_back(i.first == i.first);\n\
    \        std::transform(i.first.begin(), i.first.end(), i.first.begin(), ::toupper);\n\
    \        upper.push_back(i.first == i.first);\n    }\n    return std::all_of(lower.begin(),\
    \ lower.end(), [](bool b) { return b; }) || std::all_of(upper.begin(), upper.end(),\
    \ [](bool b) { return b; });\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/c++/11/algorithm:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:65,\n           \
    \      from /tmp/tmpmhejt59u.cpp:2:\n/usr/include/c++/11/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _OIter = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _UnaryOperation = int (*)(int) noexcept]\u2019:\n/tmp/tmpmhejt59u.cpp:18:23:\
    \   required from here\n/usr/include/c++/11/bits/stl_algo.h:4296:19: error: assignment\
    \ of read-only location \u2018__result.__gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >::operator*()\u2019\n 4296 |         *__result\
    \ = __unary_op(*__first);\n      |         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // Write your\
    \ code here\n  return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_xlkh8lt: /tmp/tmp_xlkh8lt.cpp:18: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  bool first = false;\n  bool second = false;\n  std::string\
    \ first_key = dict.begin()->first;\n  if (first_key[0] < 'a') {\n    second =\
    \ true;\n  } else {\n    first = true;\n  }\n  for (std::map<std::string, std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n    if (it->first[0] < 'a') {\n\
    \      first = false;\n    } else {\n      second = false;\n    }\n  }\n  return\
    \ first || second;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvgbji05i: /tmp/tmpvgbji05i.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    int i, j;\n    for(i = 0; i < dict.size();\
    \ i++) {\n        for(j = 0; j < dict[i].length(); j++) {\n            if(isupper(dict[i][j]))\n\
    \                break;\n        }\n        if(j != dict[i].length())\n      \
    \      break;\n    }\n    for(i = 0; i < dict.size(); i++) {\n        for(j =\
    \ 0; j < dict[i].length(); j++) {\n            if(islower(dict[i][j]))\n     \
    \           break;\n        }\n        if(j != dict[i].length())\n           \
    \ break;\n    }\n    if(i == dict.size() || j == dict.size())\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjg6uiefq.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpjg6uiefq.cpp:17:28: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 and \u2018int\u2019)\n   17 |     \
    \    for(j = 0; j < dict[i].length(); j++) {\n      |                        \
    \    ^\nIn file included from /usr/include/c++/11/map:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:81,\n                 from\
    \ /tmp/tmpjg6uiefq.cpp:2:\n/usr/include/c++/11/bits/stl_map.h:492:7: note: candidate:\
    \ \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp,\
    \ _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  492 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/usr/include/c++/11/bits/stl_map.h:492:34: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  492 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/11/bits/stl_map.h:512:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = std::__cxx11::basic"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \    {\n        return false;\n    }\n    for(auto itr=dict.begin();itr!=dict.end();itr++)\n\
    \    {\n        std::string key=itr->first;\n        int f=0;\n        for(int\
    \ i=0;i<key.length();i++)\n        {\n            if(key[i]>=65 && key[i]<=90)\n\
    \            {\n                f=1;\n                break;\n            }\n\
    \        }\n        if(f==1)\n        {\n            break;\n        }\n    }\n\
    \    for(auto itr=dict.begin();itr!=dict.end();itr++)\n    {\n        std::string\
    \ key=itr->first;\n        int f=0;\n        for(int i=0;i<key.length();i++)\n\
    \        {\n            if(key[i]>=97 && key[i]<=122)\n            {\n       \
    \         f=1;\n                break;\n            }\n        }\n        if(f==1)\n\
    \        {\n            break;\n        }\n    }\n    for(auto itr=dict.begin();itr!=dict.end();itr++)\n\
    \    {\n        std::string key=itr->first;\n        int f=0;\n        for(int\
    \ i=0;i<key.length();i++)\n        {\n            if(key[i]>=65 && key[i]<=90)\n\
    \            {\n                f=1;\n                break;\n            }\n\
    \        }\n        if(f==1)\n        {\n            return false;\n        }\n\
    \    }\n    for(auto itr=dict.begin();itr!=dict.end();itr++)\n    {\n        std::string\
    \ key=itr->first;\n        int f=0;\n        for(int i=0;i<key.length();i++)\n\
    \        {\n            if(key[i]>=97 && key[i]<=122)\n            {\n       \
    \         f=1;\n                break;\n            }\n        }\n        if(f==1)\n\
    \       \n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdh_15vt6.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpdh_15vt6.cpp:82:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   82 | }\n      | ^\n\
    /tmp/tmpdh_15vt6.cpp:83:9: warning: empty parentheses were disambiguated as a\
    \ function declaration [-Wvexing-parse]\n   83 | int main() {\n      |       \
    \  ^~\n/tmp/tmpdh_15vt6.cpp:83:9: note: remove parentheses to default-initialize\
    \ a variable\n   83 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpdh_15vt6.cpp:83:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpdh_15vt6.cpp:83:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   83 | int main() {\n      |            ^\n/tmp/tmpdh_15vt6.cpp:92:2: error:\
    \ expected \u2018}\u2019 at end of input\n   92 | }\n      |  ^\n/tmp/tmpdh_15vt6.cpp:12:63:\
    \ note: to match this \u2018{\u2019\n   12 | bool check_dict_case(std::map<std::string,\
    \ std::string> dict) {\n      |                                              \
    \                 ^\n/tmp/tmpdh_15vt6.cpp:92:2: warning: control reaches end of\
    \ non-void function [-Wreturn-type]\n   92 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n   if(dict.size()\
    \ < 1) return false;\n   bool lower = true;\n   bool upper = true;\n   for(auto\
    \ element : dict) {\n      for(auto c : element.first) {\n         if(!islower(c))\
    \ lower = false;\n         if(!isupper(c)) upper = false;\n      }\n   }\n   return\
    \ lower || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool isAllUpper = true;\n  bool isAllLower = true;\n\
    \  for (auto& element : dict) {\n    if (element.first != element.first.toUpperCase())\
    \ {\n      isAllUpper = false;\n    }\n    if (element.first != element.first.toLowerCase())\
    \ {\n      isAllLower = false;\n    }\n  }\n  return isAllUpper || isAllLower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpphq1a2xd.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpphq1a2xd.cpp:19:40: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018toUpperCase\u2019\n   19 |     if (element.first != element.first.toUpperCase())\
    \ {\n      |                                        ^~~~~~~~~~~\n/tmp/tmpphq1a2xd.cpp:22:40:\
    \ error: \u2018const class std::__cxx11::basic_string<char>\u2019 has no member\
    \ named \u2018toLowerCase\u2019\n   22 |     if (element.first != element.first.toLowerCase())\
    \ {\n      |                                        ^~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::transform(dict.begin(),\
    \ dict.end(), dict.begin(),\n                [](std::pair<std::string, std::string>\
    \ p) {\n                  std::transform(p.first.begin(), p.first.end(), p.first.begin(),\
    \ ::tolower);\n                  return p;\n                });\n  std::set<std::string>\
    \ s;\n  for (auto p : dict) {\n    s.insert(p.first);\n  }\n  if (s.size() ==\
    \ dict.size()) {\n    for (auto p : dict) {\n      if (p.first != p.second) {\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/c++/11/algorithm:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:65,\n           \
    \      from /tmp/tmphl6k98zh.cpp:2:\n/usr/include/c++/11/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _OIter = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _UnaryOperation\
    \ = check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)::<lambda(std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)>]\u2019:\n/tmp/tmphl6k98zh.cpp:13:17:   required from here\n/usr/include/c++/11/bits/stl_algo.h:4296:19:\
    \ error: use of deleted function \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >& std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::operator=(const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n 4296 |         *__result = __unary_op(*__first);\n\
    \      |         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/11/bits/specfun.h:45,\n              \
    \   from /usr/include/c++/11/cmath:1935,\n                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphl6k98zh.cpp:2:\n/usr/include/c++/11/bits/stl_pair.h:211:12:\
    \ note: \u2018std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >& std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::operator=(const std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >&)\u2019 is implicitly declared as deleted because \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 declares a move constructor or move"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  std::vector<bool> upper;\n  for (auto it = dict.begin(); it\
    \ != dict.end(); ++it) {\n    upper.push_back(std::isupper(it->first[0]));\n \
    \ }\n  return std::adjacent_find(upper.begin(), upper.end(),\n      std::not_equal_to<bool>())\
    \ == upper.end();\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3crhf9rl: /tmp/tmp3crhf9rl.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    assert(dict.size()>0);\n\
    \    int upper_cnt = 0;\n    int lower_cnt = 0;\n    for(std::map<std::string,\
    \ std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first.at(0) >= 'A' && it->first.at(0) <= 'Z') {\n            upper_cnt++;\n\
    \        } else if(it->first.at(0) >= 'a' && it->first.at(0) <= 'z') {\n     \
    \       lower_cnt++;\n        }\n    }\n    return (upper_cnt == 0 || lower_cnt\
    \ == 0);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbo4q983w: /tmp/tmpbo4q983w.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tstd::string keys = \"\";\n\tfor (auto kv\
    \ : dict) {\n\t\tkeys += kv.first;\n\t}\n\tif (std::all_of(keys.begin(), keys.end(),\
    \ ::islower) || std::all_of(keys.begin(), keys.end(), ::isupper)) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool lowercase\
    \ = false;\n    bool uppercase = false;\n    std::string value;\n    for (auto\
    \ pair : dict) {\n        value = pair.first;\n        if (std::islower(value[0]))\
    \ {\n            lowercase = true;\n        } else if (std::isupper(value[0]))\
    \ {\n            uppercase = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    if (lowercase && uppercase) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_nsr17m6: /tmp/tmp_nsr17m6.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::string\
    \ key = dict.begin()->first;\n    std::string::iterator it = key.begin();\n  \
    \  if(*it>='a' && *it<='z'){\n        for(std::pair<std::string, std::string>\
    \ element : dict){\n            std::string::iterator it = element.first.begin();\n\
    \            for(it; it!=element.first.end(); ++it){\n                if(*it<'a'\
    \ || *it>'z'){\n                    return false;\n                }\n       \
    \     }\n        }\n    }\n    else if(*it>='A' && *it<='Z'){\n        for(std::pair<std::string,\
    \ std::string> element : dict){\n            std::string::iterator it = element.first.begin();\n\
    \            for(it; it!=element.first.end(); ++it){\n                if(*it<'A'\
    \ || *it>'Z'){\n                    return false;\n                }\n       \
    \     }\n        }\n    }\n    else{\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::bad_alloc'\n  what():\
    \  std::bad_alloc\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::vector<char>\
    \ lowercase_keys;\n    std::vector<char> uppercase_keys;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        for (auto const& c : it->first) {\n     \
    \       if (islower(c)) {\n                lowercase_keys.push_back(c);\n    \
    \        } else if (isupper(c)) {\n                uppercase_keys.push_back(c);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return (lowercase_keys.size() == 0 || uppercase_keys.size() == 0);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5aq03qg2: /tmp/tmp5aq03qg2.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>())) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  \n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxmjwn8nn: /tmp/tmpxmjwn8nn.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::map<std::string,\
    \ std::string>::iterator it;\n  std::vector<std::string> keys;\n  std::vector<std::string>\
    \ values;\n  bool result;\n  for (it = dict.begin(); it != dict.end(); it++) {\n\
    \    keys.push_back(it->first);\n    values.push_back(it->second);\n  }\n  if\
    \ (keys.size() == 0) {\n    return false;\n  }\n  for (int i = 0; i < keys.size();\
    \ i++) {\n    for (int j = 0; j < keys[i].size(); j++) {\n      if (islower(keys[i][j]))\
    \ {\n        result = true;\n      } else {\n        result = false;\n       \
    \ break;\n      }\n    }\n    if (result == false) {\n      break;\n    }\n  }\n\
    \  if (result == true) {\n    return true;\n  }\n  for (int i = 0; i < keys.size();\
    \ i++) {\n    for (int j = 0; j < keys[i].size(); j++) {\n      if (isupper(keys[i][j]))\
    \ {\n        result = true;\n      } else {\n        result = false;\n       \
    \ break;\n      }\n    }\n    if (result == false) {\n      break;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::set<char>\
    \ upper, lower;\n    if (dict.empty()) return false;\n    for (auto x : dict)\
    \ {\n        for (auto y : x.first) {\n            if (isupper(y)) {\n       \
    \         upper.insert(y);\n            } else {\n                lower.insert(y);\n\
    \            }\n        }\n    }\n    return upper.size()==0 || lower.size()==0;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkc5m250k: /tmp/tmpkc5m250k.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool is_all_lower\
    \ = false;\n    bool is_all_upper = false;\n    int lower_counter = 0;\n    int\
    \ upper_counter = 0;\n    std::string first_key = \"\";\n    std::string key =\
    \ \"\";\n    if (dict.size() == 0)\n        return false;\n    for (std::map<std::string,\
    \ std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n      \
    \  key = it->first;\n        if (first_key == \"\") {\n            first_key =\
    \ key;\n        }\n        if (isupper(key[0])) {\n            is_all_upper =\
    \ true;\n            upper_counter++;\n        }\n        if (islower(key[0]))\
    \ {\n            is_all_lower = true;\n            lower_counter++;\n        }\n\
    \    }\n    if (is_all_lower && (lower_counter == dict.size()))\n        return\
    \ true;\n    if (is_all_upper && (upper_counter == dict.size()))\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbpp_smsm: /tmp/tmpbpp_smsm.cpp:46: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 97 && it->first[0] <= 122) is_lower = true;\n        if(it->first[0] >= 65\
    \ && it->first[0] <= 90) is_upper = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmplmxweeml: /tmp/tmplmxweeml.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// your code\
    \ here\n\tassert(dict.size() > 0);\n\tstd::string keys[] = {\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"};\n\tstd::string caps_keys[] = {\"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"\
    Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\tstd::set<std::string>\
    \ keys_set(keys, keys + 26);\n\tstd::set<std::string> caps_keys_set(caps_keys,\
    \ caps_keys + 26);\n\tbool is_lower_case = true;\n\tbool is_upper_case = true;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (keys_set.find(it->first)\
    \ == keys_set.end()) {\n\t\t\tis_lower_case = false;\n\t\t}\n\t\tif (caps_keys_set.find(it->first)\
    \ == caps_keys_set.end()) {\n\t\t\tis_upper_case = false;\n\t\t}\n\t}\n\treturn\
    \ is_lower_case || is_upper_case;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpej4a04mg: /tmp/tmpej4a04mg.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// Write your\
    \ code here\n\tif (dict.size() == 0)\n\t\treturn false;\n\tbool all_lower = true;\n\
    \tbool all_upper = true;\n\tstd::map<std::string, std::string>::iterator itr;\n\
    \tfor (itr = dict.begin(); itr != dict.end(); itr++) {\n\t\tfor (int i = 0; i\
    \ < itr->first.length(); i++) {\n\t\t\tif (isupper(itr->first[i])) {\n\t\t\t\t\
    all_lower = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < itr->first.length();\
    \ i++) {\n\t\t\tif (islower(itr->first[i])) {\n\t\t\t\tall_upper = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (all_lower || all_upper)\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmtbdiv9z: /tmp/tmpmtbdiv9z.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ return false;\n  int count = 0;\n  for (std::map<std::string, std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n    if (!it->first.empty()) {\n\
    \      if (std::isupper(it->first[0])) count++;\n    }\n  }\n  return ((dict.size()\
    \ - count) == 0 || count == 0);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1cx6rxco: /tmp/tmp1cx6rxco.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<char,\
    \ bool> first_char_caps;\n    for (auto& i : dict) {\n        first_char_caps[i.first[0]]\
    \ = isupper(i.first[0]);\n    }\n    bool prev = first_char_caps.begin()->second;\n\
    \    for (auto& i : first_char_caps) {\n        if (i.second != prev) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgoxh5jij: /tmp/tmpgoxh5jij.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = std::all_of(dict.begin(), dict.end(),\
    \ [] (const auto& d){ return d.first == boost::to_upper_copy(d.first);});\n  \
    \  bool lower = std::all_of(dict.begin(), dict.end(), [] (const auto& d){ return\
    \ d.first == boost::to_lower_copy(d.first);});\n    return upper || lower;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps9bmifhq.cpp: In lambda function:\n/tmp/tmps9bmifhq.cpp:14:94:\
    \ error: \u2018boost\u2019 has not been declared\n   14 |     bool upper = std::all_of(dict.begin(),\
    \ dict.end(), [] (const auto& d){ return d.first == boost::to_upper_copy(d.first);});\n\
    \      |                                                                     \
    \                         ^~~~~\n/tmp/tmps9bmifhq.cpp: In lambda function:\n/tmp/tmps9bmifhq.cpp:15:94:\
    \ error: \u2018boost\u2019 has not been declared\n   15 |     bool lower = std::all_of(dict.begin(),\
    \ dict.end(), [] (const auto& d){ return d.first == boost::to_lower_copy(d.first);});\n\
    \      |                                                                     \
    \                         ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// your code\
    \ goes here\n\tif(dict.size() == 0)\n\t\treturn false;\n\tbool flag = true;\n\t\
    if(dict.begin()->first[0] >= 'a' && dict.begin()->first[0] <= 'z'){\n\t\tstd::map<std::string,\
    \ std::string>::iterator it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\
    \t\t\tstd::string temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\
    \t\t\t\tif(temp[i] < 'a' || temp[i] > 'z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(dict.begin()->first[0] >=\
    \ 'A' && dict.begin()->first[0] <= 'Z'){\n\t\tstd::map<std::string, std::string>::iterator\
    \ it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\t\t\tstd::string\
    \ temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\t\t\t\tif(temp[i]\
    \ < 'A' || temp[i] > 'Z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tflag = false;\n\t}\n\treturn flag;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int upper\
    \ = 0;\n    int lower = 0;\n    if (dict.size() == 0)\n        return false;\n\
    \    else {\n        for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n\
    \            std::string key = itr->first;\n            if (std::islower(key[0]))\n\
    \                lower++;\n            else if (std::isupper(key[0]))\n      \
    \          upper++;\n            else\n                return false;\n       \
    \ }\n        if (upper == 0 || lower == 0)\n            return true;\n       \
    \ else\n            return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo7cabv4i: /tmp/tmpo7cabv4i.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  std::vector<std::string>\
    \ keys;\n  std::transform(dict.begin(), dict.end(), std::back_inserter(keys),\n\
    \    [](std::pair<std::string, std::string> pair) { return pair.first; });\n \
    \ bool first_lower = false;\n  bool first_upper = false;\n  for (std::string key\
    \ : keys) {\n    if (key.size() > 0) {\n      if (std::islower(key[0])) {\n  \
    \      first_lower = true;\n      } else if (std::isupper(key[0])) {\n       \
    \ first_upper = true;\n      }\n    }\n  }\n  bool same_case = false;\n  if (first_lower\
    \ && !first_upper) {\n    same_case = true;\n    for (std::string key : keys)\
    \ {\n      if (!std::islower(key[0])) {\n        same_case = false;\n        break;\n\
    \      }\n    }\n  } else if (first_upper && !first_lower) {\n    same_case =\
    \ true;\n    for (std::string key : keys) {\n      if (!std::isupper(key[0]))\
    \ {\n        same_case = false;\n        break;\n      }\n    }\n  }\n  return\
    \ same_case;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuslh9p5c: /tmp/tmpuslh9p5c.cpp:52: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    int n = dict.size();\n\
    \    if(n == 0)\n        return false;\n    int u = 0, l = 0;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            u++;\n        else\n            l++;\n    }\n    if(u == n || l ==\
    \ n)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuq0t2ygu: /tmp/tmpuq0t2ygu.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t\n\tbool lower=true;\n\
    \tbool upper=true;\n\tstd::map<std::string, std::string>::iterator it;\n\tfor(it=dict.begin();it!=dict.end();it++)\n\
    \t{\n\t\tif(it->first.at(0)>=97)\n\t\t{\n\t\t\tupper=false;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tlower=false;\n\t\t}\n\t}\n\tif(upper or lower)\n\t{\n\t\treturn true;\n\
    \t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg8nljksf: /tmp/tmpg8nljksf.cpp:42: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Type your\
    \ code here\n    bool f = 1;\n    if(dict.size() == 0)\n        return false;\n\
    \    std::map<std::string, std::string>::iterator it = dict.begin();\n    if(isupper(it->first[0])){\n\
    \        for(auto it = dict.begin(); it != dict.end(); it++){\n            if(isupper(it->first[0])\
    \ == false)\n                return false;\n        }\n    }\n    else{\n    \
    \    for(auto it = dict.begin(); it != dict.end(); it++){\n            if(islower(it->first[0])\
    \ == false)\n                return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr1pf0r0k: /tmp/tmpr1pf0r0k.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\t// TODO: implement\
    \ function\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7iye1oan: /tmp/tmp7iye1oan.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    bool all_upper=true, all_lower=true;\n    for(auto i:dict){\n\
    \        if(i.first[0]>=65&&i.first[0]<=90) all_lower=false;\n        else all_upper=false;\n\
    \    }\n    return all_upper||all_lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjtesjaf4: /tmp/tmpjtesjaf4.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // Your Code\
    \ Here\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwo35j0o8: /tmp/tmpwo35j0o8.cpp:17: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool result = true;\n    bool allLower = true;\n\
    \    bool allUpper = true;\n    for(std::map<std::string, std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        for(int i = 0; i < (*it).first.length();\
    \ i++) {\n            if(isupper((*it).first[i]))\n                allLower =\
    \ false;\n            if(islower((*it).first[i]))\n                allUpper =\
    \ false;\n        }\n    }\n    if(allLower || allUpper)\n        result = true;\n\
    \    else\n        result = false;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7jyc3w_j: /tmp/tmp7jyc3w_j.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool all_lower = true;\n\tbool all_upper\
    \ = true;\n\tfor (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tif (!(i->first\
    \ == \"\") && !(i->first == \" \")) {\n\t\t\tif (islower(i->first[0])) {\n\t\t\
    \t\tall_upper = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tall_lower = false;\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (all_lower || all_upper) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp72yx9f8n: /tmp/tmp72yx9f8n.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
