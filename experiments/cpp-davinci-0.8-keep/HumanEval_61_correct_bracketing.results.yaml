language: cpp
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // STUDENT\
    \ WORKS HERE\n    int count = 0;\n    for (int i = 0; i < brackets.length(); i++)\
    \ {\n        if (brackets[i] == '(') {\n            count++;\n        } else if\
    \ (brackets[i] == ')') {\n            count--;\n        }\n        if (count <\
    \ 0) {\n            return false;\n        }\n    }\n    if (count == 0) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n    // return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ b;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tb.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (b.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\tb.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (b.empty()) {\n\t\treturn true;\n\t}\n\
    \telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105122
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty()) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// your\
    \ code here\n\tint openBracket = 0;\n\tfor (unsigned int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\topenBracket++;\n\t\t}\n\t\telse\
    \ if (brackets[i] == ')') {\n\t\t\topenBracket--;\n\t\t}\n\t\tif (openBracket\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (openBracket == 0) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    int len = brackets.length();\n    for(int i = 0; i < len; i++) {\n \
    \       if(brackets[i] == '(')\n            s.push(brackets[i]);\n        else\
    \ if(brackets[i] == ')') {\n            if(s.empty())\n                return\
    \ false;\n            s.pop();\n        }\n    }\n    if(s.empty())\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tchar bracket =\
    \ brackets[i];\n\t\tif (bracket == '(') {\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket == ')') {\n\t\t\tif (stack.empty()) return false;\n\t\t\tstack.pop();\n\
    \t\t}\n\t}\n\treturn stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstack<char>\
    \ s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\
    \telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqduhl3r5.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpqduhl3r5.cpp:14:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |  stack<char> s;\n     \
    \ |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpqduhl3r5.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpqduhl3r5.cpp:14:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |  stack<char> s;\n      |        ^~~~\n/tmp/tmpqduhl3r5.cpp:17:4:\
    \ error: \u2018s\u2019 was not declared in this scope\n   17 |    s.push(brackets[i]);\n\
    \      |    ^\n/tmp/tmpqduhl3r5.cpp:20:8: error: \u2018s\u2019 was not declared\
    \ in this scope\n   20 |    if (s.empty()) {\n      |        ^\n/tmp/tmpqduhl3r5.cpp:28:6:\
    \ error: \u2018s\u2019 was not declared in this scope\n   28 |  if (s.empty())\
    \ {\n      |      ^\n/tmp/tmpqduhl3r5.cpp:34:1: warning: control reaches end of\
    \ non-void function [-Wreturn-type]\n   34 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint i,top=-1;\n\
    \tchar mystack[100];\n\tchar temp;\n\tfor(i=0;i<brackets.length();i++)\n\t{\n\t\
    \ttemp=brackets[i];\n\t\tif(temp=='(')\n\t\t{\n\t\t\ttop++;\n\t\t\tmystack[top]=temp;\n\
    \t\t}\n\t\telse if(temp==')')\n\t\t{\n\t\t\tif(top==-1)\n\t\t\t\treturn false;\n\
    \t\t\telse\n\t\t\t{\n\t\t\t\tmystack[top]='\\0';\n\t\t\t\ttop--;\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(top==-1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // use\
    \ stack to solve the problem\n    int n = brackets.size();\n    std::stack<char>\
    \ t;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n \
    \           t.push(brackets[i]);\n        } else {\n            if (t.empty())\
    \ {\n                return false;\n            } else {\n                t.pop();\n\
    \            }\n        }\n    }\n    return t.empty();\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open=0;\n\
    \    for(auto&c:brackets){\n        if(c=='(')open++;\n        else{\n       \
    \     open--;\n            if(open<0)return false;\n        }\n    }\n    return\
    \ open==0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ myStack;\n\tfor (unsigned int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tmyStack.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\tif (myStack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \telse {\n\t\t\t\tmyStack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (myStack.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6ct487e0: /tmp/tmp6ct487e0.cpp:22: int main(): Assertion `candidate(("((()())))"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ charStack;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i]\
    \ == '('){\n            charStack.push(brackets[i]);\n        }\n        else\
    \ if(brackets[i] == ')'){\n            if(charStack.empty()){\n              \
    \  return false;\n            }\n            else{\n                charStack.pop();\n\
    \            }\n        }\n    }\n    if(charStack.empty()){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint res\
    \ = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tres++;\n\t\t}\n\t\telse {\n\t\t\tres--;\n\t\t}\n\t\tif (res <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (res != 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tif (brackets.size()\
    \ % 2 != 0) {\n\t\treturn false;\n\t}\n\tstd::stack<char> stk;\n\tfor (int i =\
    \ 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tstk.push(brackets[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stk.empty()) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int n =\
    \ 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    n += (brackets[i] ==\
    \ '(') ? 1 : -1;\n    if (n < 0) return false;\n  }\n  return n == 0;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count1\
    \ = 0;\n\tint count2 = 0;\n\tfor (size_t i = 0; i < brackets.size(); i++) {\n\t\
    \tif (brackets[i] == '(') {\n\t\t\tcount1++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif (count1 == count2) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphw188swm: /tmp/tmphw188swm.cpp:38: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    //code\n\
    \    stack<char> s;\n    int i = 0;\n    while(i<brackets.length())\n    {\n \
    \       if(brackets[i] == '(')\n        {\n            s.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == ')')\n        {\n            if(s.empty())\n\
    \            {\n                return false;\n            }\n            s.pop();\n\
    \        }\n        i++;\n    }\n    if(s.empty())\n    {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3l07s8ko.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3l07s8ko.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> s;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp3l07s8ko.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp3l07s8ko.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmp3l07s8ko.cpp:21:13: error: \u2018s\u2019 was not declared in this scope\n\
    \   21 |             s.push(brackets[i]);\n      |             ^\n/tmp/tmp3l07s8ko.cpp:25:16:\
    \ error: \u2018s\u2019 was not declared in this scope\n   25 |             if(s.empty())\n\
    \      |                ^\n/tmp/tmp3l07s8ko.cpp:29:13: error: \u2018s\u2019 was\
    \ not declared in this scope\n   29 |             s.pop();\n      |          \
    \   ^\n/tmp/tmp3l07s8ko.cpp:33:8: error: \u2018s\u2019 was not declared in this\
    \ scope\n   33 |     if(s.empty())\n      |        ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tassert(brackets.size()\
    \ < 100);\n\tbool result = true;\n\tstack<char> s;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '(')\n\t\t\ts.push(brackets[i]);\n\t\telse {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    \ts.pop();\n\t\t}\n\t}\n\tif (!s.empty())\n\t\tresult = false;\n\treturn result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbb4d8wnj.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpbb4d8wnj.cpp:16:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   16 |  stack<char> s;\n     \
    \ |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpbb4d8wnj.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpbb4d8wnj.cpp:16:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   16 |  stack<char> s;\n      |        ^~~~\n/tmp/tmpbb4d8wnj.cpp:19:4:\
    \ error: \u2018s\u2019 was not declared in this scope\n   19 |    s.push(brackets[i]);\n\
    \      |    ^\n/tmp/tmpbb4d8wnj.cpp:21:8: error: \u2018s\u2019 was not declared\
    \ in this scope\n   21 |    if (s.empty()) {\n      |        ^\n/tmp/tmpbb4d8wnj.cpp:25:4:\
    \ error: \u2018s\u2019 was not declared in this scope\n   25 |    s.pop();\n \
    \     |    ^\n/tmp/tmpbb4d8wnj.cpp:28:7: error: \u2018s\u2019 was not declared\
    \ in this scope\n   28 |  if (!s.empty())\n      |       ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3jvsbls7: /tmp/tmp3jvsbls7.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (s.empty())\n\t\t\t\treturn false;\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \tif (s.empty())\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      count++;\n   \
    \ } else if (c == ')') {\n      count--;\n    }\n    if (count < 0) {\n      return\
    \ false;\n    }\n  }\n  return count == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tint len = brackets.length();\n\tfor (int i = 0; i < len; i++) {\n\t\t\
    if (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack1;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tstack1.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\tif (stack1.empty())\n\t\t\t\treturn false;\n\t\t\tstack1.pop();\n\
    \t\t}\n\t}\n\tif (stack1.empty())\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets[0]\
    \ == ')')\n        return false;\n    else\n    {\n        int count1 = 0;\n \
    \       int count2 = 0;\n        int size = brackets.size();\n        for(int\
    \ i = 0; i < size; i++)\n        {\n            if(brackets[i] == '(')\n     \
    \           count1++;\n            else\n                count2++;\n         \
    \   if(count2 > count1)\n                return false;\n        }\n        if(count1\
    \ == count2)\n            return true;\n        else\n            return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n   //return\
    \ true;\n   std::stack<char> S;\n   std::string::iterator c = brackets.begin();\n\
    \   while(c != brackets.end()){\n\t   if(*c == '('){\n\t\t   S.push(*c);\n\t \
    \  }else if(*c == ')'){\n\t\t   if(S.empty()){\n\t\t\t   return false;\n\t\t \
    \  }else{\n\t\t\t   S.pop();\n\t\t   }\n\t   }\n\t   c++;\n   }\n   if(S.empty()){\n\
    \t   return true;\n   }else{\n\t   return false;\n   }\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.length();\n    std::stack<char> st;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(brackets[i] == '(') {\n            st.push(brackets[i]);\n   \
    \     } else {\n            if(st.empty()) {\n                return false;\n\
    \            }\n            st.pop();\n        }\n    }\n    if(st.empty()) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='('){\n            s.push(brackets[i]);\n        }\n\
    \        else if(brackets[i]==')'){\n            if(s.empty()){\n            \
    \    return false;\n            }\n            else{\n                s.pop();\n\
    \            }\n        }\n    }\n    if(s.empty()){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // put your\
    \ code here\n  stack<char> s;\n  int len = brackets.length();\n  if(len == 0)\n\
    \    return true;\n  if(brackets[0] == ')')\n    return false;\n  for(int i =\
    \ 0; i < len; i++){\n    if(brackets[i] == '(')\n      s.push(brackets[i]);\n\
    \    else{\n      if(s.empty())\n        return false;\n      s.pop();\n    }\n\
    \  }\n  if(s.empty())\n    return true;\n  return false;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh9crp8q.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpdh9crp8q.cpp:15:3: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |   stack<char> s;\n    \
    \  |   ^~~~~\n      |   std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpdh9crp8q.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpdh9crp8q.cpp:15:9: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |   stack<char> s;\n      |         ^~~~\n/tmp/tmpdh9crp8q.cpp:23:7:\
    \ error: \u2018s\u2019 was not declared in this scope\n   23 |       s.push(brackets[i]);\n\
    \      |       ^\n/tmp/tmpdh9crp8q.cpp:25:10: error: \u2018s\u2019 was not declared\
    \ in this scope\n   25 |       if(s.empty())\n      |          ^\n/tmp/tmpdh9crp8q.cpp:27:7:\
    \ error: \u2018s\u2019 was not declared in this scope\n   27 |       s.pop();\n\
    \      |       ^\n/tmp/tmpdh9crp8q.cpp:30:6: error: \u2018s\u2019 was not declared\
    \ in this scope\n   30 |   if(s.empty())\n      |      ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint len=brackets.length();\n\
    \tstd::vector<char> v;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tif(brackets[i]=='(')\n\
    \t\t{\n\t\t\tv.push_back(brackets[i]);\n\t\t}\n\t\telse if(brackets[i]==')')\n\
    \t\t{\n\t\t\tif(v.empty())\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tv.pop_back();\n\t\t\t}\n\t\t}\n\t}\n\tif(v.empty())\n\t{\n\t\t\
    return true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105122
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8p0larow: /tmp/tmp8p0larow.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ st;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '(')\
    \ {\n\t\t\tst.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\
    \t\tif (st.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    st.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (st.empty()) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105043
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ st;\n  bool empty = true;\n  for (int i = 0; i < brackets.size(); i++) {\n \
    \   if (brackets[i] == '(') {\n      st.push(brackets[i]);\n      empty = false;\n\
    \    }\n    else if (brackets[i] == ')') {\n      if (empty) {\n        return\
    \ false;\n      }\n      else {\n        st.pop();\n        if (st.empty()) {\n\
    \          empty = true;\n        }\n      }\n    }\n  }\n  if (empty) {\n   \
    \ return true;\n  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ charStack;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i]\
    \ == '('){\n            charStack.push(brackets[i]);\n        }\n        else\
    \ if(brackets[i] == ')'){\n            if(charStack.empty()){\n              \
    \  return false;\n            }\n            else{\n                charStack.pop();\n\
    \            }\n        }\n    }\n    if(charStack.empty()){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// create\
    \ a stack to store the opening bracket\n\tstd::stack<char> s;\n\t// loop over\
    \ the bracket string\n\tfor (char c : brackets) {\n\t\t// if open bracket: push\
    \ to stack\n\t\tif (c == '(') {\n\t\t\ts.push(c);\n\t\t// if closing bracket:\
    \ pop opening bracket\n\t\t} else if (c == ')') {\n\t\t\t// if stack is empty,\
    \ there is no corresponding opening bracket\n\t\t\tif (s.empty()) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\t// if stack is empty, brackets\
    \ were matched\n\treturn s.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count_open\
    \ = 0;\n  int count_close = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n\
    \    if (brackets[i] == '(') {\n      count_open++;\n    }\n    else if (brackets[i]\
    \ == ')') {\n      count_close++;\n    }\n    if (count_close > count_open) {\n\
    \      return false;\n    }\n  }\n  if (count_open == count_close) {\n    return\
    \ true;\n  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int l=brackets.length();\n\
    \    int x=0;\n    for(int i=0;i<l;i++)\n    {\n        if(brackets[i]=='(')\n\
    \        {\n            x++;\n        }\n        else if(brackets[i]==')')\n \
    \       {\n            x--;\n        }\n        if(x<0)\n        {\n         \
    \   return false;\n        }\n    }\n    if(x==0)\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int i,j,k,n,count=0;\n\
    \    std::string str;\n    n=brackets.length();\n    for(i=0;i<n;i++)\n    {\n\
    \        if(brackets[i]=='(')\n        {\n            count++;\n        }\n  \
    \      else if(brackets[i]==')')\n        {\n            count--;\n        }\n\
    \        if(count<0)\n        {\n            return false;\n        }\n    }\n\
    \    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n     \
    \   return false;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstack<char>\
    \ check;\n\tint i = 0;\n\twhile (i < brackets.length()) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tcheck.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tif (check.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tcheck.pop();\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (check.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9pd8nbs.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpb9pd8nbs.cpp:14:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |  stack<char> check;\n \
    \     |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpb9pd8nbs.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpb9pd8nbs.cpp:14:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |  stack<char> check;\n      |        ^~~~\n\
    /tmp/tmpb9pd8nbs.cpp:18:4: error: \u2018check\u2019 was not declared in this scope\n\
    \   18 |    check.push(brackets[i]);\n      |    ^~~~~\n/tmp/tmpb9pd8nbs.cpp:21:8:\
    \ error: \u2018check\u2019 was not declared in this scope\n   21 |    if (check.empty())\
    \ {\n      |        ^~~~~\n/tmp/tmpb9pd8nbs.cpp:30:6: error: \u2018check\u2019\
    \ was not declared in this scope\n   30 |  if (check.empty()) {\n      |     \
    \ ^~~~~\n/tmp/tmpb9pd8nbs.cpp:36:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   36 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // YOUR\
    \ CODE HERE\n    int len = brackets.length();\n    if(len == 0){\n      return\
    \ true;\n    }\n    if(len % 2 != 0){\n      return false;\n    }\n    int c =\
    \ 0;\n    for(int i = 0; i < len; i++){\n      if(brackets[i] == '('){\n     \
    \   c++;\n      }\n      else{\n        c--;\n      }\n      if(c < 0){\n    \
    \    return false;\n      }\n    }\n    if(c != 0){\n      return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tif (brackets.length()\
    \ % 2 != 0) {\n\t\treturn false;\n\t}\n\tstd::stack<char> s;\n\tfor (int i = 0;\
    \ i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\ts.push(brackets[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \ts.pop();\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (unsigned int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '(') {\n      count++;\n    } else if (brackets[i] == ')') {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  if (count ==\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int pos=0;\n\
    \    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n  \
    \          pos++;\n        }\n        else if(brackets[i]==')'){\n           \
    \ pos--;\n        }\n        if(pos<0){\n            return false;\n        }\n\
    \    }\n    if(pos==0){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"))\
    \ == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(s.empty()){\n                return false;\n            }\n  \
    \          else{\n                s.pop();\n            }\n        }\n    }\n\
    \    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here.\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n\
    \        if(brackets[i] == '('){\n            count += 1;\n        }\n       \
    \ else if(brackets[i] == ')'){\n            count -= 1;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    if(count == 0){\n  \
    \      return true;\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n \
    \       if(brackets[i] == '(') {\n            count++;\n        }\n        else\
    \ if(brackets[i] == ')') {\n            count--;\n        }\n        if(count\
    \ < 0) {\n            return false;\n        }\n    }\n    if(count == 0) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count=0;\n\
    \    int n=brackets.length();\n    for(int i=0;i<n;i++)\n    {\n        if(brackets[i]=='(')\n\
    \        {\n            count++;\n        }\n        else if(brackets[i]==')')\n\
    \        {\n            count--;\n        }\n        if(count<0)\n        {\n\
    \            return false;\n        }\n    }\n    if(count==0)\n    {\n      \
    \  return true;\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  stack<char>\
    \ char_stack;\n  for (char c : brackets) {\n    if (c == '(') {\n      char_stack.push(c);\n\
    \    } else if (c == ')') {\n      if (char_stack.empty()) {\n        return false;\n\
    \      }\n      char_stack.pop();\n    }\n  }\n  return char_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphuufdbl7.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmphuufdbl7.cpp:14:3: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |   stack<char> char_stack;\n\
    \      |   ^~~~~\n      |   std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmphuufdbl7.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmphuufdbl7.cpp:14:9: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |   stack<char> char_stack;\n      |        \
    \ ^~~~\n/tmp/tmphuufdbl7.cpp:17:7: error: \u2018char_stack\u2019 was not declared\
    \ in this scope\n   17 |       char_stack.push(c);\n      |       ^~~~~~~~~~\n\
    /tmp/tmphuufdbl7.cpp:19:11: error: \u2018char_stack\u2019 was not declared in\
    \ this scope\n   19 |       if (char_stack.empty()) {\n      |           ^~~~~~~~~~\n\
    /tmp/tmphuufdbl7.cpp:22:7: error: \u2018char_stack\u2019 was not declared in this\
    \ scope\n   22 |       char_stack.pop();\n      |       ^~~~~~~~~~\n/tmp/tmphuufdbl7.cpp:25:10:\
    \ error: \u2018char_stack\u2019 was not declared in this scope\n   25 |   return\
    \ char_stack.empty();\n      |          ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // True/False\n\
    \    int n = brackets.length();\n    if(n%2!=0)\n        return false;\n    if(brackets[0]==')')\n\
    \        return false;\n    stack<char> st;\n    for(int i=0;i<n;i++){\n     \
    \   if(brackets[i]=='(')\n            st.push(brackets[i]);\n        else{\n \
    \           if(st.size()==0)\n                return false;\n            else{\n\
    \                st.pop();\n            }\n        }\n    }\n    if(st.size()==0)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsaq6df4k.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsaq6df4k.cpp:20:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   20 |     stack<char> st;\n \
    \     |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpsaq6df4k.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpsaq6df4k.cpp:20:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   20 |     stack<char> st;\n      |           ^~~~\n\
    /tmp/tmpsaq6df4k.cpp:23:13: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   23 |             st.push(brackets[i]);\n \
    \     |             ^~\n      |             std\n/tmp/tmpsaq6df4k.cpp:25:16: error:\
    \ \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   25 |             if(st.size()==0)\n      |                ^~\n      |  \
    \              std\n/tmp/tmpsaq6df4k.cpp:32:8: error: \u2018st\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   32 |     if(st.size()==0)\n\
    \      |        ^~\n      |        std\n/tmp/tmpsaq6df4k.cpp:36:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   36 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Your\
    \ code here\n  std::stack<char> st;\n  for(int i=0;i<brackets.length();i++){\n\
    \    if(brackets[i]=='('){\n      st.push(brackets[i]);\n    }\n    else if(brackets[i]==')'){\n\
    \      if(st.empty()){\n        return false;\n      }\n      else{\n        st.pop();\n\
    \      }\n    }\n  }\n  if(st.empty()){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) ==\
    \ (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105125
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int c\
    \ = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i]\
    \ == '('){\n            c++;\n        }\n        else{\n            c--;\n   \
    \     }\n        if(c < 0){\n            return false;\n        }\n    }\n   \
    \ if(c == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105125
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int balance\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '(') balance++;\n    else balance--;\n\
    \    if (balance < 0) return false;\n  }\n  return balance == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9o6p728t: /tmp/tmp9o6p728t.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count_of_open\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count_of_open++;\n        } else if (brackets[i] == ')')\
    \ {\n            count_of_open--;\n        }\n        if (count_of_open < 0) return\
    \ false;\n    }\n    return count_of_open == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105125
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8p0larow: /tmp/tmp8p0larow.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ st;\n  for(int i=0;i<brackets.size();i++){\n    if(brackets[i]=='('){\n    \
    \  st.push(brackets[i]);\n    }\n    else if(brackets[i]==')'){\n      if(st.empty()){\n\
    \        return false;\n      }\n      else{\n        st.pop();\n      }\n   \
    \ }\n  }\n  if(st.empty()){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int cnt=0;\n\
    \    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='(')\n     \
    \       cnt++;\n        else if(brackets[i]==')')\n            cnt--;\n      \
    \  if(cnt<0)\n            return false;\n    }\n    if(cnt==0)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count += 1;\n        } else if (brackets[i] == ')') {\n\
    \            count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6ct487e0: /tmp/tmp6ct487e0.cpp:22: int main(): Assertion `candidate(("((()())))"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int openBrackets\
    \ = 0;\n    int closeBrackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '(') {\n            openBrackets++;\n   \
    \     } else if (brackets[i] == ')') {\n            closeBrackets++;\n       \
    \ }\n    }\n    if (openBrackets == closeBrackets) {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptcpibju2: /tmp/tmptcpibju2.cpp:36: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ s;\n  // iterate over all characters in brackets.\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    // if we see an opening bracket, put it on the stack.\n    if (brackets[i]\
    \ == '(') {\n      s.push(brackets[i]);\n    }\n    // if we see a closing bracket,\
    \ pop the stack.\n    // if the stack is empty, or the closing bracket doesn't\
    \ match the top of the stack,\n    // the sequence is not correct.\n    else if\
    \ (brackets[i] == ')') {\n      if (s.empty() || s.top() != '(') {\n        return\
    \ false;\n      }\n      s.pop();\n    }\n  }\n  // if the stack is empty, the\
    \ sequence is correct.\n  // if it's not empty, the sequence is not correct.\n\
    \  return s.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()>0);\n\
    \    std::stack<char> stack;\n    for(auto e:brackets){\n        if(e=='('){\n\
    \            stack.push(e);\n        }\n        else if(e==')'){\n           \
    \ if(stack.empty()){\n                return false;\n            }\n         \
    \   else{\n                stack.pop();\n            }\n        }\n    }\n   \
    \ if(stack.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ st;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='('){\n\
    \            st.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(st.empty()){\n                return false;\n            }\n \
    \           else if(st.top()=='('){\n                st.pop();\n            }\n\
    \        }\n    }\n    if(st.empty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint l=0;\n\
    \tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\t\
    l++;\n\t\telse if(brackets[i]==')')\n\t\t\tl--;\n\t\tif(l<0)\n\t\t\treturn false;\n\
    \t}\n\tif(l==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  \n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf2putiv9: /tmp/tmpf2putiv9.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // YOUR\
    \ CODE HERE\n    // Convert string to stack\n    std::stack<char> bracketStack;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        bracketStack.push(brackets[i]);\n\
    \    }\n    // Pop off stack\n    while (!bracketStack.empty()) {\n        std::cout\
    \ << bracketStack.top() << std::endl;\n        // Check the top of the stack\n\
    \        if (bracketStack.top() == '(') {\n            // Remove '(' from the\
    \ stack\n            bracketStack.pop();\n            // Check the top of the\
    \ stack again\n            if (bracketStack.top() == ')') {\n                //\
    \ Remove ')' from the stack\n                bracketStack.pop();\n           \
    \ }\n            else {\n                // If ')' doesn't exist, return false\n\
    \                return false;\n            }\n        }\n        else {\n   \
    \         // If '(' doesn't exist, return false\n            return false;\n \
    \       }\n    }\n    // If the stack is empty, return true\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqecdoj_z: /tmp/tmpqecdoj_z.cpp:47: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ')

    '
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkjy25q9x: /tmp/tmpkjy25q9x.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if(brackets.length()\
    \ == 0){\n    return false;\n  }\n  int count = 0;\n  for(int i = 0; i < brackets.length();\
    \ i++){\n    if(brackets[i] == '('){\n      count += 1;\n    }\n    else if(brackets[i]\
    \ == ')'){\n      count -= 1;\n    }\n    if(count < 0){\n      return false;\n\
    \    }\n  }\n  if(count == 0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.length();\n    std::stack<char> s;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(brackets[i] == '(') {\n            s.push(brackets[i]);\n    \
    \    }\n        else if(brackets[i] == ')') {\n            if(s.empty()) {\n \
    \               return false;\n            }\n            s.pop();\n        }\n\
    \    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstack<char>\
    \ stk;\n\tif (brackets[0] == ')') {\n\t\treturn false;\n\t}\n\tfor (int i = 0;\
    \ i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tstk.push(brackets[i]);\n\
    \t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tif (stk.empty()) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tstk.pop();\n\t\t}\n\t}\n\tif (stk.empty()) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89_219w_.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp89_219w_.cpp:14:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |  stack<char> stk;\n   \
    \   |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp89_219w_.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp89_219w_.cpp:14:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |  stack<char> stk;\n      |        ^~~~\n/tmp/tmp89_219w_.cpp:20:4:\
    \ error: \u2018stk\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   20 |    stk.push(brackets[i]);\n      |    ^~~\n      |    std\n/tmp/tmp89_219w_.cpp:23:8:\
    \ error: \u2018stk\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   23 |    if (stk.empty()) {\n      |        ^~~\n      |        std\n/tmp/tmp89_219w_.cpp:26:4:\
    \ error: \u2018stk\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   26 |    stk.pop();\n      |    ^~~\n      |    std\n/tmp/tmp89_219w_.cpp:29:6:\
    \ error: \u2018stk\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   29 |  if (stk.empty()) {\n      |      ^~~\n      |      std\n/tmp/tmp89_219w_.cpp:35:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   35 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '(') cnt++;\n    else if (c\
    \ == ')') cnt--;\n    else assert(false);\n    if (cnt < 0) return false;\n  }\n\
    \  return cnt == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // replace\
    \ this with your code.\n    int op = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++){\n      if(brackets[i] == '('){\n        op++;\n      }\n      else{\n\
    \        op--;\n      }\n      if(op < 0){\n        return false;\n      }\n \
    \   }\n    if(op == 0){\n      return true;\n    }\n    else{\n      return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count_open=0;\n\
    \    int count_close=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            count_open++;\n        }\n        else if(brackets[i]==')'){\n  \
    \          count_close++;\n        }\n    }\n    if(count_open==count_close){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz7qpf75k: /tmp/tmpz7qpf75k.cpp:38: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(s.empty()){\n                return false;\n            }\n  \
    \          else{\n                s.pop();\n            }\n        }\n    }\n\
    \    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ stack;\n    bool flag = true;\n    for(int i = 0; i < brackets.length(); i++){\n\
    \        if(brackets[i] == '('){\n            stack.push(brackets[i]);\n     \
    \   }\n        else if(brackets[i] == ')'){\n            if(stack.empty()){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      else{\n                stack.pop();\n            }\n        }\n    }\n\
    \    if(!stack.empty()){\n        flag = false;\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(')\n\t\t\tstack.push(brackets[i]);\n\t\telse if (brackets[i] == ')') {\n\
    \t\t\tif (stack.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop();\n\
    \t\t}\n\t}\n\tif (stack.empty())\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>stk;\n\
    \tfor (char b : brackets) {\n\t\tif (b == '(')stk.push(b);\n\t\telse if (b ==\
    \ ')') {\n\t\t\tif (stk.empty())return false;\n\t\t\tif (stk.top() == '(')stk.pop();\n\
    \t\t\telse return false;\n\t\t}\n\t}\n\treturn stk.empty();\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use cout\n\
    \    // Example: cout << \"Hello world!\";\n    \n    stack<char> S;\n    int\
    \ size = brackets.size();\n    if(brackets[0] == ')')\n        return false;\n\
    \    \n    for(int i = 0; i < size; i++)\n    {\n        if(brackets[i] == '(')\n\
    \            S.push(brackets[i]);\n        else if(brackets[i] == ')')\n     \
    \   {\n            if(S.empty())\n                return false;\n            else\n\
    \                S.pop();\n        }\n    }\n    \n    if(S.empty())\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxufj3lol.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxufj3lol.cpp:18:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   18 |     stack<char> S;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpxufj3lol.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpxufj3lol.cpp:18:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   18 |     stack<char> S;\n      |           ^~~~\n\
    /tmp/tmpxufj3lol.cpp:26:13: error: \u2018S\u2019 was not declared in this scope\n\
    \   26 |             S.push(brackets[i]);\n      |             ^\n/tmp/tmpxufj3lol.cpp:29:16:\
    \ error: \u2018S\u2019 was not declared in this scope\n   29 |             if(S.empty())\n\
    \      |                ^\n/tmp/tmpxufj3lol.cpp:36:8: error: \u2018S\u2019 was\
    \ not declared in this scope\n   36 |     if(S.empty())\n      |        ^\n/tmp/tmpxufj3lol.cpp:40:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   40 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint left\
    \ = 0;\n\tint right = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\
    if (brackets[i] == '(') {\n\t\t\tleft++;\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tright++;\n\t\t}\n\t\tif (right > left) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif (left == right) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (unsigned int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '(') {\n      count++;\n    } else if (brackets[i] == ')') {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  if (count ==\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t//Type your\
    \ code here\n\tint open = 0;\n\tint close = 0;\n\tstd::string::iterator it;\n\t\
    for(it = brackets.begin(); it != brackets.end(); it++)\n\t{\n\t\tif(*it == '(')\n\
    \t\t{\n\t\t\topen++;\n\t\t}\n\t\telse if(*it == ')')\n\t\t{\n\t\t\tclose++;\n\t\
    \t}\n\t}\n\tif(open == close)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn\
    \ false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) ==\
    \ (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmptkf5m63u: /tmp/tmptkf5m63u.cpp:45: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ a;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            a.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(a.empty()){\n                return false;\n            }\n  \
    \          else{\n                a.pop();\n            }\n        }\n    }\n\
    \    if(a.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      count++;\n    } else if (brackets[i] == ')') {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ stk;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='('){\n\
    \            stk.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(stk.empty()){\n                return false;\n            }\n\
    \            else{\n                stk.pop();\n            }\n        }\n   \
    \ }\n    if(stk.empty()){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"))\
    \ == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// replace\
    \ with actual code\n\tint count = 0;\n\tfor (auto& s : brackets) {\n\t\tif (s\
    \ == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (s == ')') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) return false;\n\t}\n\treturn count == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n     int counter\
    \ = 0;\n     for(int i = 0; i < brackets.length(); i++){\n          if(brackets[i]\
    \ == '('){\n               counter++;\n          }\n          else if(brackets[i]\
    \ == ')'){\n               counter--;\n          }\n          if(counter < 0){\n\
    \               return false;\n          }\n     }\n     if(counter == 0){\n \
    \         return true;\n     }\n     else{\n          return false;\n     }\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// Complete\
    \ the function!\n\tint len = brackets.length();\n\tstd::stack<char> s;\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\ts.push(brackets[i]);\n\
    \t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tif (s.empty())\n\t\t\t\treturn\
    \ false;\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// make\
    \ a stack to store the bracket\n\tstd::stack<char> st;\n\t\n\t// traverse the\
    \ string\n\tfor(int i=0;i<brackets.length();i++){\n\t\t// if the string is open\
    \ bracket push the bracket in the stack\n\t\tif(brackets[i]=='('){\n\t\t\tst.push(brackets[i]);\n\
    \t\t}\n\t\t// if it is close bracket and the stack is empty then return false\n\
    \t\t// because there is no open bracket for the closing bracket\n\t\telse if(brackets[i]==')'\
    \ && st.empty()){\n\t\t\treturn false;\n\t\t}\n\t\t// otherwise pop the opening\
    \ bracket from the stack\n\t\telse{\n\t\t\tst.pop();\n\t\t}\n\t}\n\t\n\t// if\
    \ stack is empty then return true because all opening bracket\n\t// have corresponding\
    \ closing bracket\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\t// otherwise return\
    \ false\n\telse{\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // replace\
    \ with your implementation.\n  // I will assume that the input string only contains\
    \ '(' and ')'\n  int count = 0;\n  for (auto c : brackets) {\n    if (c == '(')\n\
    \      count++;\n    else\n      count--;\n    if (count < 0)\n      return false;\n\
    \  }\n  return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint open_count\
    \ = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\topen_count++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\
    \topen_count--;\n\t\t}\n\t\tif (open_count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\tif (open_count != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ s;\n\tint i=0;\n\twhile(i<brackets.length()){\n\t\tif(brackets[i]=='('){\n\t\
    \t\ts.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i]==')'){\n\t\t\tif(s.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\
    \t\ti++;\n\t}\n\tif(s.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int len\
    \ = brackets.length();\n  int count=0;\n  for(int i=0;i<len;i++){\n    if(brackets[i]=='('){\n\
    \      count++;\n    }\n    else{\n      count--;\n    }\n    if(count<0){\n \
    \     return false;\n    }\n  }\n  if(count==0){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint x=0;\n\
    \tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\t\
    x++;\n\t\telse if(brackets[i]==')')\n\t\t\tx--;\n\t\tif(x<0)\n\t\t\treturn false;\n\
    \t}\n\tif(x==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ S;\n\tint length = brackets.length();\n\tfor (int i = 0; i < length; i++) {\n\
    \t\tif (brackets[i] == '(') {\n\t\t\tS.push(brackets[i]);\n\t\t}\n\t\telse if\
    \ (brackets[i] == ')') {\n\t\t\tif (S.empty()) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tS.pop();\n\t\t}\n\t}\n\tif (S.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    \n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptggdmto4: /tmp/tmptggdmto4.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(!s.empty() && brackets[i]==')'){\n\
    \            s.pop();\n        }\n        else if(brackets[i]==')' && s.empty()){\n\
    \            return false;\n        }\n    }\n    if(s.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack1;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tstack1.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\tif (stack1.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \telse {\n\t\t\t\tstack1.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack1.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105127
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Delete\
    \ the following line and write your code here\n    int count = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '('){\n     \
    \       count++;\n        }\n        else{\n            count--;\n        }\n\
    \        if(count < 0){\n            return false;\n        }\n    }\n    if(count\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets.length()==0)\n\
    \        return true;\n    if(brackets.length()%2!=0)\n        return false;\n\
    \    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++)\n    {\n  \
    \      if(brackets[i]=='(')\n            s.push(brackets[i]);\n        else\n\
    \        {\n            if(s.empty())\n                return false;\n       \
    \     else\n                s.pop();\n        }\n    }\n    if(s.empty())\n  \
    \      return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105127
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ bracket_stack;\n  for (auto c : brackets) {\n    if (c == '(') {\n      bracket_stack.push(c);\n\
    \    } else if (c == ')') {\n      if (bracket_stack.empty()) {\n        return\
    \ false;\n      }\n      bracket_stack.pop();\n    }\n  }\n  return bracket_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint len\
    \ = brackets.length();\n\tstd::stack<char> st;\n\tfor (int i = 0; i < len; i++)\
    \ {\n\t\tif (brackets[i] == '(')\n\t\t\tst.push(brackets[i]);\n\t\telse {\n\t\t\
    \tif (st.empty()) return false;\n\t\t\telse st.pop();\n\t\t}\n\t}\n\tif (st.empty())\
    \ return true;\n\telse return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int counter\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '(') {\n      counter += 1;\n    } else if (brackets[i] == ')') {\n      counter\
    \ -= 1;\n    } else {\n      return false;\n    }\n    if (counter < 0) {\n  \
    \    return false;\n    }\n  }\n  if (counter == 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (char bracket : brackets) {\n    if (bracket == '(') {\n      count++;\n\
    \    } else if (bracket == ')') {\n      count--;\n    }\n    if (count < 0) {\n\
    \      return false;\n    }\n  }\n  return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ st;\n    int i;\n    for(i=0; i<brackets.length(); i++)\n    {\n        if(brackets[i]=='(')\n\
    \            st.push(brackets[i]);\n        else if(brackets[i]==')')\n      \
    \  {\n            if(st.empty())\n                return false;\n            st.pop();\n\
    \        }\n    }\n    if(st.empty())\n        return true;\n    else\n      \
    \  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    /*\n \
    \   You can use a stack to push \"(\", and pop \")\"\n    */\n    std::stack<char>\
    \ s;\n    int i = 0;\n    while(i < brackets.length()){\n        if(brackets[i]\
    \ == '('){\n            s.push(brackets[i]);\n        }\n        else if(brackets[i]\
    \ == ')'){\n            if(s.empty()){\n                return false;\n      \
    \      }\n            s.pop();\n        }\n        i++;\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n\
    \            count--;\n        }\n        if (count < 0) return false;\n    }\n\
    \    return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int counter\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            counter++;\n        } else if (brackets[i] == ')') {\n\
    \            counter--;\n        } else {\n            return false;\n       \
    \ }\n        if (counter < 0) {\n            return false;\n        }\n    }\n\
    \    return counter == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint size\
    \ = brackets.size();\n\tint count = 0;\n\tfor (int i = 0; i < size; i++) {\n\t\
    \tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int size\
    \ = brackets.size();\n  int counter = 0;\n  for (int i = 0; i < size; i++) {\n\
    \    if (brackets[i] == '(') {\n      counter++;\n    } else if (brackets[i] ==\
    \ ')') {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n\
    \    }\n  }\n  if (counter == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ s;\n  for (char& c : brackets) {\n    if (c == '(') {\n      s.push(c);\n  \
    \  } else if (c == ')') {\n      if (s.empty()) {\n        return false;\n   \
    \   }\n      s.pop();\n    }\n  }\n  return s.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint n =\
    \ brackets.length();\n\t// TODO: implement this function.\n\t// Use a stack to\
    \ store the opening brackets.\n\tstack<char> st;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tif (brackets[i] == '(')\n\t\t\tst.push(brackets[i]);\n\t\telse {\n\t\t\
    \tif (st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tst.pop();\n\t\t\
    }\n\t}\n\tif (st.empty())\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprnybyfaa.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprnybyfaa.cpp:17:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   17 |  stack<char> st;\n    \
    \  |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmprnybyfaa.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmprnybyfaa.cpp:17:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |  stack<char> st;\n      |        ^~~~\n/tmp/tmprnybyfaa.cpp:20:4:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   20 |    st.push(brackets[i]);\n      |    ^~\n      |    std\n/tmp/tmprnybyfaa.cpp:22:8:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   22 |    if (st.empty())\n      |        ^~\n      |        std\n/tmp/tmprnybyfaa.cpp:28:6:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   28 |  if (st.empty())\n      |      ^~\n      |      std\n/tmp/tmprnybyfaa.cpp:32:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   32 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // 2.  Implement\
    \ correct_bracketing.\n  std::stack<char> st;\n  for(int i=0;i<brackets.length();i++){\n\
    \    if(brackets[i]=='('){\n      st.push(brackets[i]);\n    }\n    else if(brackets[i]==')'){\n\
    \      if(st.empty()){\n        return false;\n      }\n      else if(st.top()=='('){\n\
    \        st.pop();\n      }\n    }\n  }\n  if(st.empty()){\n    return true;\n\
    \  }\n  else{\n    return false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\nstd::stack<char>\
    \ hold;\nint len = brackets.length();\nif(len % 2 != 0)\n    return false;\nfor(int\
    \ i = 0; i < len; i++)\n{\n    if(brackets[i] == '(')\n        hold.push(brackets[i]);\n\
    \    else if(brackets[i] == ')')\n    {\n        if(hold.empty())\n          \
    \  return false;\n        else\n            hold.pop();\n    }\n    else\n   \
    \     return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnlag7rhc.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpnlag7rhc.cpp:33:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   33 | int main() {\n      |            ^\n/tmp/tmpnlag7rhc.cpp:47:1:\
    \ error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpnlag7rhc.cpp:13:47:\
    \ note: to match this \u2018{\u2019\n   13 | bool correct_bracketing(std::string\
    \ brackets) {\n      |                                               ^\n/tmp/tmpnlag7rhc.cpp:47:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // loop\
    \ through all chars in brackets\n        // if char is '(' push '(' onto stack\n\
    \        // if char is ')' pop from stack\n    // return true if stack is empty,\
    \ return false otherwise\n    std::stack<char> bracket_stack;\n    for (char c\
    \ : brackets) {\n        if (c == '(') bracket_stack.push(c);\n        else if\
    \ (c == ')') {\n            if (bracket_stack.empty()) return false;\n       \
    \     else bracket_stack.pop();\n        }\n    }\n    return bracket_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>st;\n\
    \    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='('){\n    \
    \        st.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(st.empty()){\n                return false;\n            }\n \
    \           else if(st.top()=='('){\n                st.pop();\n            }\n\
    \        }\n    }\n    if(st.empty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ st;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '(')\
    \ {\n\t\t\tst.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\
    \t\tif (st.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    st.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (st.empty()) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105043
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int length\
    \ = brackets.length();\n    int count = 0;\n    for(int i = 0; i < length; i++){\n\
    \        if(brackets[i] == '('){\n            count++;\n        }\n        else\
    \ if(brackets[i] == ')'){\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    if(count != 0){\n    \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ st;\n\tfor (auto it = brackets.begin(); it != brackets.end(); ++it) {\n\t\t\
    if (*it == '(')\n\t\t\tst.push(*it);\n\t\telse {\n\t\t\tif (st.empty())\n\t\t\t\
    \treturn false;\n\t\t\tst.pop();\n\t\t}\n\t}\n\treturn st.empty();\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\
    \telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count=0;\n\
    \  for(int i=0;i<brackets.length();i++){\n    if(brackets[i]=='('){\n      count++;\n\
    \    }\n    else{\n      count--;\n    }\n    if(count<0){\n      return false;\n\
    \    }\n  }\n  if(count==0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ open;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            open.push(brackets[i]);\n        } else if (brackets[i]\
    \ == ')') {\n            if (open.empty()) {\n                return false;\n\
    \            } else {\n                open.pop();\n            }\n        }\n\
    \    }\n    return open.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // put\
    \ the solution here\n\n    int count = 0;\n    for (auto i : brackets) {\n   \
    \     if (i == '(') {\n            count += 1;\n        } else if (i == ')') {\n\
    \            count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int i,j,cnt=0;\n\
    \    for(i=0;i<brackets.length();i++)\n    {\n        if(brackets[i]=='(')\n \
    \           cnt++;\n        else if(brackets[i]==')')\n            cnt--;\n  \
    \      if(cnt<0)\n            return false;\n    }\n    if(cnt==0)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ st;\n    int len = brackets.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(brackets[i] == '(') {\n            st.push(brackets[i]);\n       \
    \ }\n        else if(brackets[i] == ')') {\n            if(st.empty()) {\n   \
    \             return false;\n            }\n            st.pop();\n        }\n\
    \    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    if(brackets.size() == 0) return true;\n    std::stack<char>\
    \ st;\n    for(int i = 0; i < n; i++){\n        if(brackets[i] == '(')\n     \
    \       st.push(brackets[i]);\n        else if(brackets[i] == ')'){\n        \
    \    if(st.empty()) return false;\n            st.pop();\n        }\n    }\n \
    \   if(st.empty()) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// as start\
    \ we have no brackets\n\tint bracket_count = 0;\n\tfor (unsigned int i = 0; i\
    \ < brackets.size(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tbracket_count++;\n\
    \t\t} else if (brackets[i] == ')') {\n\t\t\tif (bracket_count == 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tbracket_count--;\n\t\t}\n\t}\n\tif (bracket_count\
    \ != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if(brackets.size()==0)\n\
    \        return true;\n    stack<char> st;\n    for(auto i:brackets){\n      \
    \  if(i=='(')\n            st.push(i);\n        else if(i==')'){\n           \
    \ if(st.empty())\n                return false;\n            else\n          \
    \      st.pop();\n        }\n    }\n    if(st.empty())\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvsqiosh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprvsqiosh.cpp:16:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   16 |     stack<char> st;\n \
    \     |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmprvsqiosh.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmprvsqiosh.cpp:16:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   16 |     stack<char> st;\n      |           ^~~~\n\
    /tmp/tmprvsqiosh.cpp:19:13: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   19 |             st.push(i);\n      |    \
    \         ^~\n      |             std\n/tmp/tmprvsqiosh.cpp:21:16: error: \u2018\
    st\u2019 was not declared in this scope; did you mean \u2018std\u2019?\n   21\
    \ |             if(st.empty())\n      |                ^~\n      |           \
    \     std\n/tmp/tmprvsqiosh.cpp:27:8: error: \u2018st\u2019 was not declared in\
    \ this scope; did you mean \u2018std\u2019?\n   27 |     if(st.empty())\n    \
    \  |        ^~\n      |        std\n/tmp/tmprvsqiosh.cpp:31:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   31 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660105128
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    std::string::iterator itr;\n    for(itr = brackets.begin(); itr != brackets.end();\
    \ itr++) {\n        if(*itr == '(') {\n            s.push(*itr);\n        }\n\
    \        else if(!s.empty() && *itr == ')') {\n            s.pop();\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    if(s.empty())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (char ch : brackets) {\n\t\tif (ch == '(') {\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if (ch == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ stk;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='('){\n\
    \            stk.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(stk.empty() || stk.top()!='('){\n                return false;\n\
    \            }\n            else{\n                stk.pop();\n            }\n\
    \        }\n    }\n    if(stk.empty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Work\
    \ from the left.\n  // If we encounter an opening bracket, push it onto the stack.\n\
    \  // If we encounter a closing bracket, pop the top of the stack.\n  // If we\
    \ encounter a closing bracket when the stack is empty, or\n  // if the stack isn't\
    \ empty when we reach the end of the string,\n  // then the string isn't correctly\
    \ bracketed.\n  // Since the stack stores characters, we need to define a mapping\n\
    \  // between opening brackets and closing brackets.\n  // If the top of the stack\
    \ isn't the correct closing bracket, then\n  // we've encountered an incorrect\
    \ bracketing.\n  std::stack<char> bracket_stack;\n  std::map<char, char> bracket_map;\n\
    \  bracket_map['('] = ')';\n  bracket_map['['] = ']';\n  bracket_map['{'] = '}';\n\
    \  for (int i = 0; i < brackets.length(); i++) {\n    char current_char = brackets[i];\n\
    \    if (current_char == '(' || current_char == '[' || current_char == '{') {\n\
    \      bracket_stack.push(current_char);\n    } else if (current_char == ')' ||\
    \ current_char == ']' || current_char == '}') {\n      if (bracket_stack.empty())\
    \ {\n        return false;\n      }\n      char current_top = bracket_stack.top();\n\
    \      bracket_stack.pop();\n      if (bracket_map[current_top] != current_char)\
    \ {\n        return false;\n      }\n    }\n  }\n  return bracket_stack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\treturn true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplizi5guf: /tmp/tmplizi5guf.cpp:22: int main(): Assertion `candidate(("((()())))"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int t =\
    \ 0;\n  for (auto i : brackets) {\n    if (i == '(') {\n      t++;\n    } else\
    \ {\n      t--;\n    }\n    if (t < 0) {\n      return false;\n    }\n  }\n  return\
    \ t == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint i =\
    \ 0;\n\twhile (i < brackets.length()) {\n\t\tif (brackets[i] == '(') {\n\t\t\t\
    int j = i + 1;\n\t\t\tint c = 1;\n\t\t\twhile (j < brackets.length()) {\n\t\t\t\
    \tif (brackets[j] == '(') {\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\telse if (brackets[j]\
    \ == ')') {\n\t\t\t\t\tc--;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t\tif (c == 0) {\n\t\
    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (c != 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ti = j;\n\t\t\t}\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxy9he9rs: /tmp/tmpxy9he9rs.cpp:49: int main(): Assertion `candidate(("()()(()())()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int cnt\
    \ = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            cnt\
    \ += 1;\n        } else if (c == ')') {\n            cnt -= 1;\n        }\n  \
    \      if (cnt < 0) {\n            return false;\n        }\n    }\n    return\
    \ cnt == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint open\
    \ = 0;\n\tint closed = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\
    \tif (brackets[i] == '(') {\n\t\t\topen++;\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tclosed++;\n\t\t}\n\t}\n\tif (open == closed) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgj3jrdtg: /tmp/tmpgj3jrdtg.cpp:38: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ c;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            c.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(c.empty()){\n                return false;\n            }\n  \
    \          else\n                c.pop();\n        }\n    }\n    if(c.empty())\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint i,l,flag=0;\n\
    \tl=brackets.length();\n\tfor(i=0;i<l;i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\
    {\n\t\t\tflag++;\n\t\t}\n\t\telse if(brackets[i]==')')\n\t\t{\n\t\t\tflag--;\n\
    \t\t}\n\t\tif(flag<0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(flag==0)\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n \
    \           count++;\n        } else if (bracket == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // your\
    \ code here\n  std::stack<char> stk;\n  for(int i=0;i<brackets.length();i++){\n\
    \      if(brackets[i]=='('){\n          stk.push(brackets[i]);\n      }\n    \
    \  else if(brackets[i]==')'){\n          if(stk.empty()){\n              return\
    \ false;\n          }\n          else{\n              stk.pop();\n          }\n\
    \      }\n  }\n  if(stk.empty()){\n      return true;\n  }\n  else{\n      return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) ==\
    \ (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint c=0;\n\
    \tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\t\
    c++;\n\t\telse\n\t\t\tc--;\n\t\tif(c<0)\n\t\t\treturn false;\n\t}\n\tif(c==0)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    \n   \
    \ \n    \n    \n    std::stack<char> stack;\n    for(auto c : brackets)\n    {\n\
    \        if(c == '(')\n        {\n            stack.push(c);\n        }\n    \
    \    else if(c == ')')\n        {\n            if(stack.empty())\n           \
    \ {\n                return false;\n            }\n            else if(stack.top()\
    \ == '(')\n            {\n                stack.pop();\n            }\n      \
    \      else\n            {\n                return false;\n            }\n   \
    \     }\n    }\n    if(stack.empty())\n    {\n        return true;\n    }\n  \
    \  else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_count\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      open_count++;\n\
    \    } else if (c == ')') {\n      open_count--;\n    }\n    if (open_count <\
    \ 0) {\n      return false;\n    }\n  }\n  return open_count == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // TODO:\
    \ implement this function\n    int cnt=0;\n    for(char c:brackets){\n       \
    \ if(c=='(') cnt++;\n        else if(c==')') cnt--;\n        else assert(false);\n\
    \        if(cnt<0) return false;\n    }\n    return cnt==0;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(s.empty()){\n                return false;\n            }\n  \
    \          else{\n                s.pop();\n            }\n        }\n    }\n\
    \    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // insert\
    \ your code here\n    std::stack<char> stack;\n    for(int i = 0; i < brackets.size();\
    \ i++){\n        if(brackets[i] == '('){\n            stack.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == ')'){\n            if(stack.empty()){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    if(stack.empty()){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ stk;\n    for(auto x:brackets){\n        if(x=='(')\n            stk.push(x);\n\
    \        else if(!stk.empty()){\n            stk.pop();\n        }\n        else\n\
    \            return false;\n    }\n    if(stk.empty())\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty()) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105123
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    bool ans = true;\n    // Your code here!\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='('){\n            s.push(brackets[i]);\n        }\n\
    \        else if(brackets[i]==')'){\n            if(s.empty()){\n            \
    \    ans = false;\n                break;\n            }\n            else if(s.top()=='('){\n\
    \                s.pop();\n            }\n            else{\n                ans\
    \ = false;\n                break;\n            }\n        }\n    }\n    if(!s.empty()){\n\
    \        ans = false;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint x=0;\n\
    \tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\t\
    x++;\n\t\telse\n\t\t\tx--;\n\t\tif(x<0)\n\t\t\treturn false;\n\t}\n\tif(x==0)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105129
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    int i = 0;\n    while(i < brackets.length()){\n        if(brackets[i]\
    \ == '('){\n            s.push(brackets[i]);\n        }\n        else if(brackets[i]\
    \ == ')'){\n            if(s.empty()){\n                return false;\n      \
    \      }\n            else{\n                s.pop();\n            }\n       \
    \ }\n        else{\n            return false;\n        }\n        i++;\n    }\n\
    \    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint n =\
    \ brackets.length();\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif\
    \ (brackets[i] == '(') {\n\t\t\tcnt++;\n\t\t}\n\t\telse {\n\t\t\tcnt--;\n\t\t\
    }\n\t\tif (cnt < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (cnt == 0) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi4thoztc: /tmp/tmpi4thoztc.cpp:19: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int len\
    \ = brackets.length();\n  if(len % 2 == 1) return false;\n  std::stack<char> s;\n\
    \  for(int i = 0; i < len; i++) {\n    if(brackets[i] == '(') s.push(brackets[i]);\n\
    \    else if(brackets[i] == ')') {\n      if(s.empty()) return false;\n      else\
    \ if(s.top() == '(') s.pop();\n      else return false;\n    }\n  }\n  if(s.empty())\
    \ return true;\n  else return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ st;\n    int i = 0;\n    for(i = 0; i < brackets.length(); i++) {\n        if(brackets[i]\
    \ == '(') {\n            st.push(brackets[i]);\n        }\n        else if(brackets[i]\
    \ == ')') {\n            if(st.empty())\n                return false;\n     \
    \       st.pop();\n        }\n    }\n    if(st.empty())\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ open_brackets;\n    for (char c : brackets) {\n        if (c == '(') {\n   \
    \         open_brackets.push(c);\n        } else if (c == ')') {\n           \
    \ if (open_brackets.empty()) {\n                return false;\n            }\n\
    \            open_brackets.pop();\n        }\n    }\n    return open_brackets.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint n =\
    \ brackets.length();\n\tif (n == 0)\n\t\treturn false;\n\tint o_brackets = 0;\n\
    \tint c_brackets = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] ==\
    \ '(')\n\t\t\to_brackets++;\n\t\telse\n\t\t\tc_brackets++;\n\t\tif (c_brackets\
    \ > o_brackets)\n\t\t\treturn false;\n\t}\n\tif (o_brackets == c_brackets)\n\t\
    \treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int len\
    \ = brackets.length();\n  int balance = 0;\n  if (len == 0) {\n    return false;\n\
    \  }\n  for (int i = 0; i < len; i++) {\n    if (brackets[i] == '(') {\n     \
    \ balance++;\n    } else if (brackets[i] == ')') {\n      balance--;\n    }\n\
    \    if (balance < 0) {\n      return false;\n    }\n  }\n  if (balance != 0)\
    \ {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint counter\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tcounter++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\t\
    counter--;\n\t\t}\n\t\tif (counter < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if (counter == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// YOUR\
    \ CODE HERE\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount1++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')') {\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif (count1 == count2) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpamma7i65: /tmp/tmpamma7i65.cpp:39: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// write\
    \ your code here\n\t// example_code_here\n\tint size = brackets.size();\n\tif\
    \ (size == 0)\n\t\treturn false;\n\tif (size == 1)\n\t\treturn false;\n\tstd::stack<char>st;\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tif (brackets[i] == '(')\n\t\t\tst.push(brackets[i]);\n\
    \t\telse if (brackets[i] == ')') {\n\t\t\tif (st.empty())\n\t\t\t\treturn false;\n\
    \t\t\telse if (st.top() == '(')\n\t\t\t\tst.pop();\n\t\t\telse\n\t\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif (st.empty())\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t//TODO:\
    \ implement\n\tstack<char> s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\
    \t\tif (brackets[i] == '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if\
    \ (brackets[i] == ')') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\ts.pop();\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzypbg2e1.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzypbg2e1.cpp:15:2: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |  stack<char> s;\n     \
    \ |  ^~~~~\n      |  std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpzypbg2e1.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpzypbg2e1.cpp:15:8: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |  stack<char> s;\n      |        ^~~~\n/tmp/tmpzypbg2e1.cpp:18:4:\
    \ error: \u2018s\u2019 was not declared in this scope\n   18 |    s.push(brackets[i]);\n\
    \      |    ^\n/tmp/tmpzypbg2e1.cpp:21:8: error: \u2018s\u2019 was not declared\
    \ in this scope\n   21 |    if (s.empty()) {\n      |        ^\n/tmp/tmpzypbg2e1.cpp:24:4:\
    \ error: \u2018s\u2019 was not declared in this scope\n   24 |    s.pop();\n \
    \     |    ^\n/tmp/tmpzypbg2e1.cpp:27:6: error: \u2018s\u2019 was not declared\
    \ in this scope\n   27 |  if (s.empty()) {\n      |      ^\n/tmp/tmpzypbg2e1.cpp:33:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   33 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105130
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Store\
    \ the count of opening brackets.\n  // Each \"(\" adds one.\n  // Each \")\" subtracts\
    \ one.\n  // If we ever see a negative count,\n  // that means we have more closing\
    \ brackets than opening,\n  // and thus the string is invalid.\n  int count =\
    \ 0;\n  // For each character in the string.\n  for (char c : brackets) {\n  \
    \  // Increment if it's an opening bracket.\n    if (c == '(') {\n      count++;\n\
    \    }\n    // Decrement if it's a closing bracket.\n    else if (c == ')') {\n\
    \      count--;\n    }\n    // Otherwise it's an invalid character.\n    else\
    \ {\n      assert(false);\n    }\n    // If we have more closing brackets than\
    \ opening,\n    // the string is invalid.\n    if (count < 0) {\n      return\
    \ false;\n    }\n  }\n  // The string is valid if we have no opening brackets\
    \ left.\n  return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count=0;\n\
    \    if(brackets[0]==')')\n        return false;\n    for(auto it=brackets.begin();it!=brackets.end();it++)\n\
    \    {\n        if(*it=='(')\n            count++;\n        else if(*it==')')\n\
    \            count--;\n        if(count<0)\n            return false;\n    }\n\
    \    if(count==0)\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int bracketsLeft\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            bracketsLeft++;\n        } else if (brackets[i] == ')')\
    \ {\n            bracketsLeft--;\n        }\n        if (bracketsLeft < 0) {\n\
    \            return false;\n        }\n    }\n    return bracketsLeft == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    // base case, empty string has correct bracketing\n\
    \    if (len == 0) return true;\n    int count = 0;\n    for (int i = 0; i < len;\
    \ i++) {\n        if (brackets[i] == '(') count++;\n        else if (brackets[i]\
    \ == ')') count--;\n        if (count < 0) return false;\n    }\n    return count\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int i\
    \ = 0;\n    int t = 0;\n    for (i = 0; i < brackets.length(); i++) {\n      \
    \  if (brackets[i] == '(') {\n            t += 1;\n        } else if (brackets[i]\
    \ == ')') {\n            t -= 1;\n        }\n        if (t < 0) return false;\n\
    \    }\n    if (t == 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"))\
    \ == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(false);\
    \ // delete this line when you implement correct_bracketing\n    return 0;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu4nd3gml: /tmp/tmpu4nd3gml.cpp:14: bool correct_bracketing(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(!brackets.empty());\n\
    \    int n = brackets.size();\n    int cnt = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (brackets[i] == '(') {\n            cnt++;\n        } else {\n\
    \            cnt--;\n        }\n        if (cnt < 0) return false;\n    }\n  \
    \  return cnt == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    int count = 0;\n    for(int i = 0; i < len; i++) {\n\
    \        if(brackets[i] == '(') {\n            count++;\n        } else if(brackets[i]\
    \ == ')') {\n            count--;\n        }\n        if(count < 0) {\n      \
    \      return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105130
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvf7h3z93: /tmp/tmpvf7h3z93.cpp:22: int main(): Assertion `candidate(("((()())))"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkjy25q9x: /tmp/tmpkjy25q9x.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for(int\
    \ i=0;i<brackets.length();i++){\n    if(brackets[i]=='(')\n      brackets[i]='1';\n\
    \    else\n      brackets[i]='0';\n  }\n  int count=0;\n  for(int i=0;i<brackets.length();i++){\n\
    \    if(brackets[i]=='1')\n      count++;\n    else if(brackets[i]=='0')\n   \
    \   count--;\n  }\n  if(count==0)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf5y5ko_3: /tmp/tmpf5y5ko_3.cpp:39: int main(): Assertion `candidate((")(()"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // TODO:\
    \ replace the following line with your solution.\n    int len = brackets.length();\n\
    \    std::stack<char> s;\n    for(int i=0;i<len;i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(s.empty()){\n                return false;\n            }\n  \
    \          s.pop();\n        }\n    }\n    if(s.empty()){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint sum\
    \ = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') sum++;\n\t\telse if (brackets[i] == ')') sum--;\n\t\tif (sum < 0) return\
    \ false;\n\t}\n\treturn sum == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    std::string::iterator it;\n    for(it = brackets.begin(); it != brackets.end();\
    \ it++) {\n        if(*it == '(') {\n            s.push(*it);\n        }\n   \
    \     else if(*it == ')') {\n            if(s.empty()) {\n                return\
    \ false;\n            }\n            else {\n                s.pop();\n      \
    \      }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n\
    \    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// replace\
    \ this for solution\n\tstd::stack<char> st;\n\tint i;\n\tfor(i=0;i<brackets.length();i++)\n\
    \t{\n\t\tif(brackets[i]=='(')\n\t\t\tst.push(brackets[i]);\n\t\telse\n\t\t{\n\t\
    \t\tif(st.empty())\n\t\t\t\treturn false;\n\t\t\telse if(st.top()=='(')\n\t\t\t\
    \tst.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tif(st.empty())\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<char>\
    \ s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n\
    \            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n\
    \            if(s.empty()){\n                return false;\n            }\n  \
    \          else{\n                s.pop();\n            }\n        }\n    }\n\
    \    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7n6bvmx.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpe7n6bvmx.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<char> s;\n  \
    \    |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpe7n6bvmx.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpe7n6bvmx.cpp:14:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |     stack<char> s;\n      |           ^~~~\n\
    /tmp/tmpe7n6bvmx.cpp:17:13: error: \u2018s\u2019 was not declared in this scope\n\
    \   17 |             s.push(brackets[i]);\n      |             ^\n/tmp/tmpe7n6bvmx.cpp:20:16:\
    \ error: \u2018s\u2019 was not declared in this scope\n   20 |             if(s.empty()){\n\
    \      |                ^\n/tmp/tmpe7n6bvmx.cpp:28:8: error: \u2018s\u2019 was\
    \ not declared in this scope\n   28 |     if(s.empty()){\n      |        ^\n/tmp/tmpe7n6bvmx.cpp:34:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   34 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\treturn false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkjy25q9x: /tmp/tmpkjy25q9x.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool isCorrect\
    \ = true;\n    int count_opening = 0;\n    int count_closing = 0;\n    for (int\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n  \
    \          count_opening++;\n        }\n        else if (brackets[i] == ')') {\n\
    \            count_closing++;\n        }\n        if (count_closing > count_opening)\
    \ {\n            isCorrect = false;\n            break;\n        }\n    }\n  \
    \  if (count_opening == count_closing) {\n        return isCorrect;\n    }\n \
    \   else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    int counter = 0;\n    int limit = len/2;\n    for(int\
    \ i = 0; i < len; i++){\n        if(brackets[i] == '('){\n            counter++;\n\
    \        }\n        else{\n            counter--;\n        }\n        if(counter\
    \ < 0){\n            return false;\n        }\n        if(counter == limit){\n\
    \            break;\n        }\n    }\n    if(counter == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpycy0tedz: /tmp/tmpycy0tedz.cpp:40: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9o6p728t: /tmp/tmp9o6p728t.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105126
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (char ch : brackets) {\n    if (ch == '(') {\n      count++;\n \
    \   } else if (ch == ')') {\n      count--;\n    }\n    if (count < 0) {\n   \
    \   return false;\n    }\n  }\n  return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ s;\n\tfor (size_t i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\
    \t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint i =\
    \ 0;\n\tstd::stack<char> s;\n\twhile (i < brackets.length()) {\n\t\tif (brackets[i]\
    \ == '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')')\
    \ {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\ts.pop();\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    int count = 0;\n    for(int i = 0; i < len; i++) {\n\
    \        if(brackets[i] == '(') {\n            count++;\n        }\n        else\
    \ if(brackets[i] == ')') {\n            count--;\n        }\n        if(count\
    \ < 0) {\n            return false;\n        }\n    }\n    if(count == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Fill\
    \ this in.\n  int count = 0;\n  for(int i = 0; i < brackets.length(); i++){\n\
    \    if(brackets[i] == '('){\n      count += 1;\n    }\n    else if(brackets[i]\
    \ == ')'){\n      count -= 1;\n    }\n    if(count < 0){\n      return false;\n\
    \    }\n  }\n  if(count != 0){\n    return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // put your\
    \ code here\n  int c=0;\n  for(int i=0;i<brackets.length();i++)\n  {\n  \tif(brackets[i]=='(')\n\
    \  \t{\n  \t\tc++;\n\t  }\n\t  else\n\t  {\n\t  \tc--;\n\t  }\n\t  if(c<0)\n\t\
    \  {\n\t  \treturn false;\n\t  }\n  }\n  if(c==0)\n  {\n  \treturn true;\n  }\n\
    \  else\n  {\n  \treturn false;\n  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (size_t i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '(') {\n      count++;\n    } else if (brackets[i] == ')') {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return (count\
    \ == 0);\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count=0;\n\
    \    for(auto a:brackets){\n        if(a=='(')\n            count++;\n       \
    \ else\n            count--;\n        if(count<0)\n            return false;\n\
    \    }\n    if(count==0)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count != 0)\
    \ {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n\treturn (brackets.size()%2==0\
    \ && brackets.size() > 0) ? false : true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0pdkqd92: /tmp/tmp0pdkqd92.cpp:18: int main(): Assertion `candidate(("()"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660105131
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"\
    ()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\"\
    )(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int counter\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            counter++;\n        } else if (brackets[i] == ')') {\n\
    \            counter--;\n        }\n        if (counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return counter == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660105131
