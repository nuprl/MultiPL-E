name: HumanEval_133_sum_squares
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of numbers.\n\
  // You need to return the sum of squared numbers in the given list,\n// round each\
  \ element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst\
  \ = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n\
  // For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output\
  \ should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong sum_squares(std::vector<float>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
  \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
  \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) ==\
  \ (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
  \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
  \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
  \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
  \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
  \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
  \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
  \ 1.0, 0.0}))) == (2));\n}\n"
completions: ["    long sum = 0;\n    std::vector<int> upperInt;\n    for(int i =\
    \ 0; i < lst.size(); i++){\n        if(lst[i] > 0)\n            upperInt.push_back(std::ceil(lst[i]));\n\
    \        else\n            upperInt.push_back(std::floor(lst[i]));\n    }\n  \
    \  for(int i = 0; i < upperInt.size(); i++){\n        sum += upperInt[i] * upperInt[i];\n\
    \    }\n    return sum;", "  long ans = 0;\n  for(float i : lst)\n    ans += (long)ceil(i)*(long)ceil(i);\n\
    \  return ans;", "    int size = lst.size();\n    long sum = 0;\n    for(int i\
    \ = 0; i < size; i++){\n        sum += pow(ceil(lst[i]), 2);\n    }\n    return\
    \ sum;", "    float sum = 0;\n    // iterate over the vector\n    for(int i =\
    \ 0; i < lst.size(); i++){\n        float num = lst[i];\n        // round of the\
    \ element to the upper int\n        num = ceil(num);\n        // square the element\
    \ and add it to the sum\n        sum += num * num;\n    }\n    return sum;", " \
    \ long sum = 0;\n  std::vector<int>::iterator it;\n  for (it = lst.begin(); it\
    \ != lst.end(); it++) {\n    sum += ceil(*it) * ceil(*it);\n  }\n  return sum;",
  "  long ans = 0;\n  for(auto elem : lst)\n  {\n    int ceiling_elem = std::ceil(elem);\n\
    \    ans += ceiling_elem * ceiling_elem;\n  }\n  return ans;", "    std::vector<float>\
    \ v;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<0){\n            v.push_back(ceil(lst[i]));\n\
    \        }\n        else{\n            v.push_back(floor(lst[i]));\n        }\n\
    \    }\n    int x=0;\n    for(int i=0;i<v.size();i++){\n        x+=pow(v[i],2);\n\
    \    }\n    return x;", "\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tsum += pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;", "    long sum = 0;\n\
    \    for(auto i: lst)\n    {\n        sum += pow(ceil(i),2);\n    }\n    return\
    \ sum;", "    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n       \
    \ sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;", "  long sum =\
    \ 0;\n  for (auto x : lst) {\n    sum += std::ceil(x) * std::ceil(x);\n  }\n \
    \ return sum;", "  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]<0){\n\
    \      lst[i]=lst[i]*(-1);\n    }\n    sum=sum+(int)ceil(lst[i])*(int)ceil(lst[i]);\n\
    \  }\n  return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;", "\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tint q = ceil(lst[i]);\n\
    \t\tsum += q * q;\n\t}\n\treturn sum;", "  int sum = 0;\n  for(auto &i : lst)\
    \ {\n    int temp = i + 0.5;\n    sum += temp * temp;\n  }\n  return sum;", " \
    \ long sum = 0;\n  for (float i : lst) {\n    sum += ceil(i) * ceil(i);\n  }\n\
    \  return sum;", "  long result=0;\n  std::vector<int> ceil_vec;\n  // Write your\
    \ code here\n  for(auto& i:lst){\n      ceil_vec.push_back(std::ceil(i));\n  }\n\
    \  for(auto& i:ceil_vec){\n      result += (i*i);\n  }\n  return result;", "\t\
    long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfloat p = lst[i];\n\
    \t\tif (p > 0) {\n\t\t\tsum += (long)ceil(pow(p, 2));\n\t\t}\n\t\telse {\n\t\t\
    \tsum += (long)floor(pow(p, 2));\n\t\t}\n\t}\n\treturn sum;", "    long result\
    \ = 0;\n    for (auto i : lst) {\n        result += ceil(i)*ceil(i);\n    }\n\
    \    return result;", "    // your code here\n    long sum = 0;\n    for(auto\
    \ x: lst){\n        long num = ceil(x);\n        sum += num*num;\n    }\n    return\
    \ sum;", "\tfloat sum;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tlst[i] =\
    \ ceil(lst[i]);\n\t\tsum += lst[i] * lst[i];\n\t}\n\treturn sum;", "\t// Handle\
    \ edge cases first\n\tif (lst.size() == 0) {\n\t\treturn 0;\n\t}\n\t// If list\
    \ size is 1, simply square the given number\n\tif (lst.size() == 1) {\n\t\treturn\
    \ pow(lst[0], 2);\n\t}\n\t// Now let's calculate the squared sum\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tint number = lst[i];\n\t\t\
    int temp = number;\n\t\t// Check for negative numbers\n\t\tif (number < 0) {\n\
    \t\t\tnumber = number * -1;\n\t\t}\n\t\t// Get the decimal part of the number\n\
    \t\tfloat decimal = number - (int)number;\n\t\t// Round up the number and square\
    \ it\n\t\tsum += pow((int)number + 1, 2);\n\t\t// If decimal is greater than 0.5,\
    \ increment temp once more and square it\n\t\tif (decimal > 0.5) {\n\t\t\tsum\
    \ += pow(temp + 1, 2);\n\t\t}\n\t}\n\treturn sum;", "    // test -1\n    if (lst.size()\
    \ == 0) {\n        return 0;\n    }\n    // test 1,2,3\n    if (lst.size() ==\
    \ 1) {\n        return ceil(lst[0]) * ceil(lst[0]);\n    }\n    // test 4,5,6\n\
    \    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum +=\
    \ ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;", "  float sum=0;\n  for(int\
    \ i=0;i<lst.size();i++)\n  {\n    sum=sum+std::ceil(lst[i])*std::ceil(lst[i]);\n\
    \  }\n  return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        lst[i] = ceil(lst[i]);\n        sum += lst[i] * lst[i];\n    }\n    return\
    \ sum;", "  long sum = 0;\n  for (float num : lst) {\n    sum += std::ceil(num)\
    \ * std::ceil(num);\n  }\n  return sum;", "    long result = 0;\n    // Write\
    \ your code here\n    for(int i=0;i<lst.size();i++){\n        result += ceil(lst[i])*ceil(lst[i]);\n\
    \    }\n    return result;", "\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tlong l=ceil(lst[i]);\n\t\tsum+=l*l;\n\t}\n\treturn sum;", "    long long\
    \ int x=0;\n    for(int i=0;i<lst.size();i++)\n    {\n    \tlst[i]=ceil(lst[i]);\n\
    \    \tx=x+(lst[i]*lst[i]);\n    }\n    return x;", "    long ans = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        float num = ceil(lst[i]);\n        ans\
    \ += num * num;\n    }\n    return ans;", "  //your code here\n  float s=0;\n\
    \  for(int i=0;i<lst.size();i++)\n  {\n    float k=ceil(lst[i]);\n    s+=k*k;\n\
    \  }\n  return s;", "    // your code here\n    long res = 0;\n    for(int i =\
    \ 0; i < lst.size(); i++){\n        res += (long)std::ceil(lst[i]) * (long)std::ceil(lst[i]);\n\
    \    }\n    return res;", "  long sum=0;\n  for(float x:lst)\n  {\n    sum+=ceil(x)*ceil(x);\n\
    \  }\n  return sum;", "  long sum = 0;\n  for (float x : lst) {\n    sum += pow(ceil(x),\
    \ 2);\n  }\n  return sum;", "    // Write your code here\n    long sum=0;\n  \
    \  for(int i=0;i<lst.size();i++)\n    {\n        sum+=pow(ceil(lst[i]),2);\n \
    \   }\n    return sum;", "  std::transform(lst.begin(), lst.end(), lst.begin(),\
    \ ceil);\n  long sum = 0;\n  for (int x : lst) {\n    sum += x * x;\n  }\n  return\
    \ sum;", "  int squared = 0;\n  for (auto i = lst.begin(); i != lst.end(); i++)\
    \ {\n    squared += ceil(*i) * ceil(*i);\n  }\n  return squared;", "  // Your\
    \ code here\n  float sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    float x=(lst[i]-floor(lst[i]));\n\
    \    if(x>0.5)\n    {\n      lst[i]=ceil(lst[i]);\n    }\n    else\n    {\n  \
    \    lst[i]=floor(lst[i]);\n    }\n    sum+=pow(lst[i],2);\n  }\n  return sum;",
  "    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i])\
    \ * ceil(lst[i]);\n    }\n    return sum;", "\tlong result = 0;\n\tfor (float\
    \ number : lst) {\n\t\tresult += (long) ceil(number) * (long) ceil(number);\n\t\
    }\n\treturn result;", "  long total = 0;\n  int size = lst.size();\n  for(int\
    \ i = 0; i < size; i++){\n    int rounded = ceil(lst[i]);\n    int squared = rounded\
    \ * rounded;\n    total += squared;\n  }\n  return total;", "  long sum = 0;\n\
    \  // your code here\n  // loop through the list\n  for (auto& i : lst) {\n  \
    \  if (i < 0) {\n      // if the element is negative\n      // multiply by -1\
    \ and round up the value\n      sum += (ceil(i * -1) * ceil(i * -1));\n    } else\
    \ {\n      // else multiply the element by itself and round up the value\n   \
    \   sum += (ceil(i) * ceil(i));\n    }\n  }\n  return sum;", "    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n\
    \    }\n    return sum;", "  // your code here\n  \n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    lst[i] = ceil(lst[i]);\n  }\n  long sum = 0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    sum += (long)pow(lst[i],2);\n  }\n  return sum;", "    return std::accumulate(lst.begin(),\
    \ lst.end(), 0.0, [](float a, float b) {\n        return a + ceil(b) * ceil(b);\n\
    \    });", "  long sum = 0;\n  for (auto i : lst)\n    sum += ceil(i) * ceil(i);\n\
    \  return sum;", "    int i;\n    float sum = 0;\n    for(i=0;i<lst.size();i++)\n\
    \    {\n        int b = ceil(lst[i]);\n        sum = sum + (b*b);\n    }\n   \
    \ return sum;", "  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n \
    \   sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n  return sum;", "  //\
    \ your code here...\n  int l=lst.size();\n  long sum=0;\n  for(int i=0;i<l;i++)\n\
    \  {\n    sum+=(ceil(lst[i])*ceil(lst[i]));\n  }\n  return sum;", "    // your\
    \ code goes here\n    for(int i=0;i<lst.size();i++)\n    {\n        lst[i]=ceil(lst[i]);\n\
    \    }\n    long sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        sum+=pow(lst[i],2);\n\
    \    }\n    return sum;", "    long sum=0;\n    for(auto i:lst)\n        sum+=pow(i,2);\n\
    \    return sum;", "    // Write your code here\n    long sum = 0;\n    for(auto\
    \ i: lst){\n        sum += std::ceil(i) * std::ceil(i);\n    }\n    return sum;",
  "  long total = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    float p = ceil(lst[i]);\n\
    \    total += p * p;\n  }\n  return total;", "  //your code here\n  long sum =\
    \ 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return sum;", "\tif (lst.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\
    \tfor (auto& x : lst) {\n\t\tsum += ceil(x)*ceil(x);\n\t}\n\treturn sum;", " \
    \   long result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        lst[i]\
    \ = ceil(lst[i]);\n        result += pow(lst[i], 2);\n    }\n    return result;",
  "\t// TODO - Wri", "  long sum = 0;\n  for (unsigned int i = 0; i < lst.size();\
    \ i++) {\n    lst[i] = ceil(lst[i]);\n    sum += lst[i] * lst[i];\n  }\n  return\
    \ sum;", "  long sum = 0;\n  for (std::vector<float>::iterator it = lst.begin();\
    \ it != lst.end(); ++it) {\n    sum += (*it) * (*it);\n  }\n  return sum;", "\t\
    long sum = 0;\n\tfor (float i : lst) {\n\t\tsum += pow(ceil(i), 2);\n\t}\n\treturn\
    \ sum;", "    long result = 0;\n    for (auto i : lst)\n        result += ceil(i)\
    \ * ceil(i);\n    return result;", "  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return sum;", "  long\
    \ sum = 0;\n  // your code here\n  for(int i = 0; i < lst.size(); i++){\n    sum\
    \ += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return sum;", "    // Your code here\n\
    \    long result = 0;\n    for(int i = 0; i < lst.size(); i++){\n        result\
    \ += std::ceil(lst[i]) * std::ceil(lst[i]);\n    }\n    return result;", "\tlong\
    \ sum=0;\n\tint n=lst.size();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tlst[i]=ceil(lst[i]);\n\
    \t\tsum+=lst[i]*lst[i];\n\t}\n\treturn sum;", "    long long sum=0;\n    for(int\
    \ i=0;i<lst.size();i++)\n    {\n        sum=sum+ceil(lst[i])*ceil(lst[i]);\n \
    \   }\n    return sum;", "  long sum=0;\n  for(auto i:lst)\n    sum+=(long)ceil(i)*(long)ceil(i);\n\
    \  return sum;", "\t// your code goes here\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tsum += (int)std::ceil(lst[i]) * (int)std::ceil(lst[i]);\n\
    \t}\n\treturn sum;", "    int sum=0;\n    for(int i=0;i<lst.size();i++){\n   \
    \     lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n    }\n    return sum;",
  "  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i])\
    \ * ceil(lst[i]);\n  }\n  return sum;", "  long result = 0;\n  for (size_t i =\
    \ 0; i < lst.size(); i++) {\n    result += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return result;", "  float sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n  \
    \    sum+=(ceil(lst[i])*ceil(lst[i]));\n  }\n  return sum;", "  // your code here\n\
    \  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i])\
    \ * std::ceil(lst[i]);\n  }\n  return sum;", "\tlong sum = 0;\n\tfor (float num\
    \ : lst) {\n\t\tsum += std::pow(std::ceil(num), 2);\n\t}\n\treturn sum;", "  //\
    \ Your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n  \
    \  sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n  }\n  return sum;", "\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += ceil(lst[i])\
    \ * ceil(lst[i]);\n\t}\n\treturn sum;", "\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn\
    \ sum;", "    // your code here\n    long sum = 0;\n    // std::cout << ceil(1.1)\
    \ << std::endl;\n    // std::cout << ceil(1.7) << std::endl;\n    // std::cout\
    \ << ceil(2.3) << std::endl;\n    // std::cout << ceil(4.4) << std::endl;\n  \
    \  // std::cout << ceil(5.5) << std::endl;\n    // std::cout << ceil(0.0) << std::endl;\n\
    \    // std::cout << ceil(-0.1) << std::endl;\n    // std::cout << ceil(-1.5)\
    \ << std::endl;\n    // std::cout << ceil(-2.2) << std::endl;\n    // std::cout\
    \ << ceil(-3.9) << std::endl;\n    // std::cout << ceil(-4.8) << std::endl;\n\
    \    // std::cout << ceil(-5.6) << std::endl;\n    for (float number : lst) {\n\
    \        // std::cout << \"number = \" << number << std::endl;\n        sum +=\
    \ (long)ceil(number) * (long)ceil(number);\n    }\n    return sum;", "  double\
    \ res = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    res += ceil(lst[i])\
    \ * ceil(lst[i]);\n  }\n  return res;", "    long sum = 0;\n    for(auto itr =\
    \ lst.begin(); itr != lst.end(); itr++) {\n        sum += (long)ceil(*itr) * (long)ceil(*itr);\n\
    \    }\n    return sum;", "    long res = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        res += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return res;",
  "    // Write your code here\n    long sum = 0;\n    for(auto &i : lst)\n    {\n\
    \        i = ceil(i);\n        sum += i*i;\n    }\n    return sum;", "  long result\
    \ = 0;\n  for (std::vector<float>::const_iterator it = lst.begin(); it != lst.end();\
    \ ++it) {\n    result += (long)ceil(*it) * (long)ceil(*it);\n  }\n  return result;",
  "    long sum = 0;\n    for(auto num : lst) {\n        sum += ceil(num)*ceil(num);\n\
    \    }\n    return sum;", "  float sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    float element = ceil(lst[i]);\n    sum += pow(element, 2);\n  }\n\
    \  return sum;", "  int size = lst.size();\n  long sum = 0;\n  for(int i = 0;\
    \ i < size; i++) {\n    lst[i] = ceil(lst[i]);\n    sum += (lst[i] * lst[i]);\n\
    \  }\n  return sum;", "  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    lst[i]=ceil(lst[i]);\n\
    \    sum+=lst[i]*lst[i];\n  }\n  return sum;", "\tlong sum = 0;\n\tfor (auto it\
    \ = lst.begin(); it != lst.end(); it++) {\n\t\tlong val = ceil(*it);\n\t\tsum\
    \ += val * val;\n\t}\n\treturn sum;", "    long result = 0;\n    for (float i\
    \ : lst) {\n        int temp = ceil(i);\n        result += temp * temp;\n    }\n\
    \    return result;", "    long total = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        total += pow(ceil(lst[i]), 2);\n    }\n    return total;", " \
    \   int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int temp =\
    \ ceil(lst[i]);\n        sum += temp * temp;\n    }\n    return sum;", "\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += std::ceil(lst[i])\
    \ * std::ceil(lst[i]);\n\t}\n\treturn sum;", "  long sum = 0;\n  for (int i =\
    \ 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;", "  //your code here\n  long ans = 0;\n  for(int i = 0; i\
    \ < lst.size(); i++){\n    ans += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ ans;", "    long result=0;\n    for(int i=0;i<lst.size();i++){\n        result\
    \ += std::ceil(lst[i])*std::ceil(lst[i]);\n    }\n    return result;", "\tlong\
    \ sum = 0;\n\tfor (auto i : lst) {\n\t\tint r = ceil(i);\n\t\tsum += r * r;\n\t\
    }\n\treturn sum;", "\tlong res = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tres += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn res;", "    int n = lst.size();\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += ceil(lst[i])\
    \ * ceil(lst[i]);\n    }\n    return sum;", "\t//  your code here\n\tfloat sum\
    \ = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < 0)\n\t\t\t\
    lst[i] = std::ceil(lst[i]);\n\t\telse\n\t\t\tlst[i] = std::floor(lst[i]);\n\t\t\
    sum += pow(lst[i], 2);\n\t}\n\treturn sum;", "    long sum = 0;\n    for(auto\
    \ e : lst) {\n        sum += ceil(e) * ceil(e);\n    }\n    return sum;", "  long\
    \ sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i])\
    \ * std::ceil(lst[i]);\n  }\n  return sum;", "  long sum = 0;\n  for (int i =\
    \ 0; i < lst.size(); i++) {\n    sum += pow(lst[i], 2);\n  }\n  return sum;",
  "    long sum=0;\n    int n=lst.size();\n    for(int i=0;i<n;i++)\n    {\n     \
    \   lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n    }\n    return sum;",
  "  long result = 0;\n  // write your code here\n  for(int i=0;i<lst.size();i++){\n\
    \    int squared = ceil(lst[i])*ceil(lst[i]);\n    result+=squared;\n  }\n  return\
    \ result;", "    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n   \
    \     sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n    }\n    return sum;",
  "  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    sum=sum+lst[i]*lst[i];\n \
    \ }\n  return sum;", "\t// Write your code here\n\t// To print results to the\
    \ standard output you can use Print function\n\t// Example: Print(\"Hello world!\"\
    )\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += ceil(lst[i])\
    \ * ceil(lst[i]);\n\t}\n\treturn sum;", "long result = 0;\n    for(int i=0;i<lst.size();i++){\n\
    \        // std::cout<<lst[i]<<std::endl;\n        int f = std::ceil(lst[i]);\n\
    \        int t = f*f;\n        result += t;\n    }\nreturn result;", "    long\
    \ sum=0;\n    for(int i=0;i<lst.size();i++){\n        float num=lst[i];\n    \
    \    sum=sum+(ceil(num)*ceil(num));\n    }\n    return sum;", "\tlong sum = 0;\n\
    \tfloat temp = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\ttemp = ceil(lst[i]);\n\
    \t\tsum += temp * temp;\n\t}\n\treturn sum;", "\tlong sum = 0;\n\tstd::vector<int>::iterator\
    \ itr;\n\tfor (itr = lst.begin(); itr != lst.end(); itr++) {\n\t\tsum += ceil(*itr)\
    \ * ceil(*itr);\n\t}\n\treturn sum;", "  long result = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    result += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ result;", "  long res=0;\n  for(auto x:lst)\n  {\n    long tmp=(int)ceil(x);\n\
    \    res+=(tmp*tmp);\n  }\n  return res;", "  std::vector<int> vec;\n  for(auto\
    \ i:lst){\n    int temp = ceil(i);\n    vec.push_back(temp);\n  }\n  long sum=0;\n\
    \  for(auto i:vec){\n    sum+=i*i;\n  }\n  return sum;", '    return accumulate(lst.begin(),
    lst.end(), 0, [](float a, float b) { return a + ceil(b)*ceil(b); });', "    if(lst.size()\
    \ == 0)\n        return 0;\n    // int ceiling = ceil(lst[0]);\n    // return\
    \ ceiling*ceiling + sum_squares(lst[1:]);\n    std::vector<float>::iterator it\
    \ = lst.begin();\n    int ceiling = ceil(*it);\n    return ceiling*ceiling + sum_squares(std::vector<float>(++it,\
    \ lst.end()));", "  if(lst.size() == 0) return 0;\n  float sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    float number = lst[i];\n    sum += number*number;\n\
    \  }\n  return round(sum);", "\treturn 0;", "  long sum = 0;\n  // Write your\
    \ code here\n  // To print results to the standard output you can use PrintLn()\n\
    \  // Example: PrintLn(max);\n  for(int i = 0; i < lst.size(); i++){\n      float\
    \ ceilVal = std::ceil(lst[i]);\n      sum += ceilVal * ceilVal;\n  }\n  return\
    \ sum;", "\tlong sum=0;\n\tfor(auto & i:lst)\n\t\tsum+=((int)ceil(i))*((int)ceil(i));\n\
    \treturn sum;", "  // your code goes here...\n  int n = lst.size();\n  for(int\
    \ i=0;i<n;i++)\n  {\n    lst[i] = ceil(lst[i]);\n  }\n  long sum = 0;\n  for(int\
    \ i=0;i<n;i++)\n  {\n    sum += (long)pow(lst[i],2);\n  }\n  return sum;", "\t\n\
    \t// write code here\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\t\
    int n=ceil(lst[i]);\n\t\tsum+=n*n;\n\t}\n\treturn sum;", "    float ans=0;\n \
    \   for(int i=0;i<lst.size();i++)\n    {\n        lst[i]=ceil(lst[i]);\n     \
    \   ans=ans+lst[i]*lst[i];\n    }\n    return ans;", "  // your code here\n  long\
    \ sum = 0;\n  for(std::vector<float>::iterator it = lst.begin(); it != lst.end();\
    \ ++it)\n  {\n    sum += (long) ceil(*it) * (long) ceil(*it);\n  }\n  return sum;",
  "\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tlst[i]=ceil(lst[i]);\n\
    \t\tsum+=lst[i]*lst[i];\n\t}\n\treturn sum;", "    long sum = 0;\n    for(float\
    \ a : lst)\n        sum += std::ceil(a) * std::ceil(a);\n    return sum;", "\t\n\
    \    int sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ - floor(lst[i]) >= 0.5)\n        {\n            lst[i] = ceil(lst[i]);\n   \
    \     }\n        else\n        {\n            lst[i] = floor(lst[i]);\n      \
    \  }\n        sum += pow(lst[i], 2);\n    }\n    return sum;", "  long sum=0;\n\
    \  for(float i:lst){\n    sum+=ceil(i)*ceil(i);\n  }\n  return sum;", "    long\
    \ result = 0;\n    for (float item : lst) {\n        result += ceil(item) * ceil(item);\n\
    \    }\n    return result;", "  std::vector<float>::iterator i;\n  long int sum\
    \ = 0;\n  for(i = lst.begin(); i != lst.end(); i++)\n  {\n    sum += ceil(*i)\
    \ * ceil(*i);\n  }\n  return sum;", "\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tlong ele=ceil(lst[i]);\n\t\tsum+=ele*ele;\n\t}\n\treturn sum;", "   \
    \ std::vector<float>::iterator it;\n    float i=0;\n    int a = 0;\n    long sum\
    \ = 0;\n    while(i < lst.size()){\n        a = ceil(lst[i]);\n        sum = sum\
    \ + (a*a);\n        i++;\n    }\n    return sum;", "\tint sqsum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tsqsum += ceil(lst[i]) * ceil(lst[i]);\n\t\
    }\n\treturn sqsum;", "  int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n\
    \    int x = ceil(lst[i]);\n    sum += x*x;\n  }\n  return sum;", "  \t// Write\
    \ your code here\n  \tlong sum = 0;\n  \tfor(auto i: lst){\n    \tint tmp = ceil(i);\n\
    \      \tsum += tmp*tmp;\n    }\n  \treturn sum;", "    long ans = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        ans += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return ans;", "  long sum = 0;\n  for (std::vector<float>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n    sum += ceil(*it) * ceil(*it);\n\
    \  }\n  return sum;", "    long sum = 0;\n    std::vector<float>::iterator lst_it;\n\
    \    for (lst_it = lst.begin(); lst_it != lst.end(); lst_it++) {\n        sum\
    \ += ceil(*lst_it) * ceil(*lst_it);\n    }\n    return sum;", "  long ans = 0;\n\
    \  for(float num : lst) {\n    int x = (int)ceil(num);\n    ans += x*x;\n  }\n\
    \  return ans;", '  return 0;', "    long res = 0;\n    int n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        res += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return res;", "    int sum = 0;\n    for(auto &x: lst)\n    {\n  \
    \      sum += (int)(ceil(x) * ceil(x));\n    }\n    return sum;", "  // your code\
    \ here\n  int n = lst.size();\n  float sum = 0;\n  for(int i = 0; i < n; i++){\n\
    \    lst[i] = ceil(lst[i]);\n    sum += lst[i] * lst[i];\n  }\n  return sum;",
  "  long sum = 0;\n  for (auto it = lst.begin(); it != lst.end(); it++) {\n    *it\
    \ = ceil(*it);\n    sum += *it * *it;\n  }\n  return sum;", "    long sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        int n = lst[i];\n        if\
    \ (n < 0){\n            n *= -1;\n        }\n        n = ceil(n);\n        sum\
    \ += (n * n);\n    }\n    return sum;", "    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;", "  long sum\
    \ = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n\
    \    lst[i] = lst[i] * lst[i];\n    sum += lst[i];\n  }\n  return sum;", '  //
    your code here', "  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    lst[i]=ceil(lst[i]);\n\
    \    lst[i]=lst[i]*lst[i];\n    sum+=lst[i];\n  }\n  return sum;", "\t// your\
    \ code here\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum\
    \ += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn sum;", "   // sum_squares function\
    \ definition here\n  long int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n\
    \      lst[i] = ceil(lst[i]);\n      sum += lst[i] * lst[i];\n  }\n  return sum;",
  "    // Code here\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;", "\tlong\
    \ sum = 0;\n\tfor (float i : lst)\n\t\tsum += ceil(i) * ceil(i);\n\treturn sum;",
  "    long res = 0;\n    for(float ele : lst)\n        res += (int)(ceil(ele)) *\
    \ (int)(ceil(ele));\n    return res;", "  // your code here\n  long result = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    lst[i] = ceil(lst[i]);\n    lst[i]\
    \ = lst[i] * lst[i];\n    result += lst[i];\n  }\n  return result;", "  // your\
    \ code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    int\
    \ x = ceil(lst[i]);\n    sum += x*x;\n  }\n  return sum;", "    // Your Code Here\n\
    \    long output = 0;\n    for(int i = 0; i < lst.size(); i++){\n        float\
    \ x = ceil(lst[i]);\n        output += (x*x);\n    }\n    return output;", "\t\
    long sum = 0;\n\tfor (size_t i = 0; i < lst.size(); i++) {\n\t\tsum += (long)\
    \ pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;", "   std::vector<float>::iterator\
    \ itr;\n   float sum = 0;\n   for(itr = lst.begin(); itr != lst.end(); itr++)\n\
    \   {\n     sum += (*itr) * (*itr);\n   }\n   return std::ceil(sum);", "  long\
    \ result = 0;\n  for (float i : lst) {\n    float squared = i * i;\n    result\
    \ += std::ceil(squared);\n  }\n  return result;", "  long sum = 0;\n  for (size_t\
    \ i = 0; i < lst.size(); i++) {\n    sum += std::pow(ceil(lst[i]), 2);\n  }\n\
    \  return sum;", "  long sum = 0;\n  for (float i : lst) {\n    float upperInt\
    \ = ceil(i);\n    sum += (upperInt * upperInt);\n  }\n  return sum;", "  // Good\
    \ luck!\n  long sum=0;\n  float temp;\n  for(int i=0;i<lst.size();i++)\n  {\n\
    \    temp=ceil(lst[i]);\n    sum+=pow(temp,2);\n  }\n  return sum;", "    // your\
    \ code here\n    float sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n  \
    \      sum += ceil(pow(lst[i], 2));\n    }\n    return sum;", "  long sum = 0;\n\
    \  // your code here\n  for(int i = 0; i < lst.size(); i++){\n    long a = ceil(lst[i]);\n\
    \    sum += a*a;\n  }\n  return sum;", "  for(int i=0;i<lst.size();i++)\n    lst[i]\
    \ = ceil(lst[i]);\n  long sum = 0;\n  for(int i=0;i<lst.size();i++)\n    sum +=\
    \ lst[i]*lst[i];\n  return sum;", "    // Happy Coding ^_^\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        lst[i]=ceil(lst[i]);\n    \
    \    sum+=(lst[i]*lst[i]);\n    }\n    return sum;", '    // Write your code here.',
  "    long result = 0;\n    for (float element : lst) {\n        int temp = ceil(element);\n\
    \        result += temp * temp;\n    }\n    return result;", '    // your code
    here', "\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfloat a\
    \ = ceil(lst[i]);\n\t\tsum += (a * a);\n\t}\n\treturn sum;", "  int sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    int temp = lst[i];\n    sum += temp\
    \ * temp;\n  }\n  return sum;", "  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    sum+=ceil(lst[i])*ceil(lst[i]);\n  }\n  return sum;", "\tlong sum=0;\n\t\
    for(int i=0;i<lst.size();i++)\n\t{\n\t\tsum+=(lst[i]*lst[i]);\n\t}\n\treturn sum;",
  "  // Write your code here\n  long sum = 0;\n  for(float f : lst){\n    sum += ceil(f)*ceil(f);\n\
    \  }\n  return sum;", "  long res = 0;\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    lst[i] = ceil(lst[i]);\n    res += pow(lst[i], 2);\n  }\n  return res;",
  "  long sum = 0;\n  // Sum the square of each element\n  for (auto && element :\
    \ lst) {\n    sum += ceil(element) * ceil(element);\n  }\n  return sum;", "  \
    \  int a = 0;\n    for(int i = 0; i < lst.size(); i++){\n        a += ceil(lst[i]\
    \ * lst[i]);\n    }\n    return a;", "    int len = lst.size();\n    float a;\n\
    \    long sum=0;\n    for(int i=0;i<len;i++){\n        a = ceil(lst[i]);\n   \
    \     sum = sum + a*a;\n    }\n    return sum;", "  long sum = 0;\n  for (float\
    \ i : lst) {\n    sum += ceil(i) * ceil(i);\n  }\n  return sum;", "    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n\
    \    }\n    return sum;", "  long result = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    lst[i] = ceil(lst[i]);\n    result += lst[i] * lst[i];\n  }\n  return\
    \ result;", "  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    //\
    \ Round each element in the list to the upper int(Ceiling) first.\n    int number\
    \ = lst[i];\n    if (lst[i] > 0) {\n      number = std::ceil(lst[i]);\n    } else\
    \ {\n      number = std::floor(lst[i]);\n    }\n    sum += number * number;\n\
    \  }\n  return sum;", "    // your code here.\n    // remember to round each element\
    \ before summing up the squares.\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        lst[i] = std::ceil(lst[i]);\n        sum += lst[i] * lst[i];\n\
    \    }\n    return sum;", "  long sum = 0;\n  for (float i : lst) {\n    sum +=\
    \ ceil(i) * ceil(i);\n  }\n  return sum;", "  long sum = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    int square = ceil(lst[i]);\n    sum += (square *\
    \ square);\n  }\n  return sum;", "  int res = 0;\n  for (auto it = lst.begin();\
    \ it != lst.end(); it++) {\n    if (*it < 0) {\n      *it *= -1;\n    }\n    res\
    \ += static_cast<int>(std::ceil(*it)) * static_cast<int>(std::ceil(*it));\n  }\n\
    \  return res;", "  long sum = 0;\n  for (float number : lst) {\n    long square\
    \ = ceil(number);\n    sum += square * square;\n  }\n  return sum;", "  // your\
    \ code goes here.\n  // Have fun :)\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    sum+=ceil(lst[i])*ceil(lst[i]);\n  }\n  return sum;", "    int sum =\
    \ 0;\n    for(float i : lst){\n        sum += pow(ceil(i),2);\n    }\n    return\
    \ sum;", "\tlong result = 0;\n\tfor (float x : lst) {\n\t\tresult += (int) ceil(x)\
    \ * (int) ceil(x);\n\t}\n\treturn result;", "  long sum = 0;\n  int index = 0;\n\
    \  while(index < lst.size()){\n    long converted = std::ceil(lst[index]);\n \
    \   sum += (converted * converted);\n    index++;\n  }\n  return sum;", "    int\
    \ sum = 0;\n    for(float i : lst){\n        i = ceil(i);\n        sum += i*i;\n\
    \    }\n    return sum;", "  // your code here\n  int sum = 0;\n  for(float f\
    \ : lst){\n    float r = f;\n    r = ceil(r);\n    sum += pow(r,2);\n  }\n  return\
    \ sum;", "    long ans = 0;\n    for(int i = 0; i < lst.size(); i++) {\n     \
    \   lst[i] = std::ceil(lst[i]);\n        ans += lst[i] * lst[i];\n    }\n    return\
    \ ans;", "  // write your solution here\n  int sz = lst.size();\n  long sum =\
    \ 0;\n  for(int i = 0; i < sz; i++){\n    int val = ceil(lst[i]);\n    sum +=\
    \ val * val;\n  }\n  return sum;", "\tlong sum = 0;\n\tfor (float f : lst) {\n\
    \t\tsum += pow(ceil(f), 2);\n\t}\n\treturn sum;", "  int sz = lst.size();\n  float\
    \ temp = 0;\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    temp = ceil(lst[i]);\n\
    \    sum += temp * temp;\n  }\n  return sum;", "\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < lst.size(); i++) {\n\t\tsum += (ceil(lst[i]) * ceil(lst[i]));\n\t}\n\
    \treturn sum;", "  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n \
    \   sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return sum;"]
stop_tokens:
- "\n}"
