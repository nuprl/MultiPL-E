name: HumanEval_55_fib
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Make sure n is not a negative number.\n    assert(n\
    \ >= 0);\n    if (n == 0 || n == 1) {\n        return n;\n    } else {\n     \
    \   return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO: Your code here.\n    long a = 0, b = 1, c, i;\n\
    \    if (n == 0)\n        return a;\n    for (i = 2; i <= n; i++)\n    {\n   \
    \     c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n==0) {\n        return 0;\n    }\n    else if (n==1)\
    \ {\n        return 1;\n    }\n    else {\n        return fib(n-1) + fib(n-2);\n\
    \    }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    int first = 0;\n    int second = 1;\n    for (int i =\
    \ 0; i < n; i++) {\n        int temp = first;\n        first = second;\n     \
    \   second = temp + second;\n    }\n    return first;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  // your code here\n  if(n<0)\n    return n;\n  else\n  {\n\
    \    std::vector<long> v;\n    v.push_back(0);\n    v.push_back(1);\n    for(int\
    \ i=2;i<=n;i++)\n    {\n      v.push_back(v[i-1]+v[i-2]);\n    }\n    return v[n];\n\
    \  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 0) {\n    assert(false);\n  }\n  // Base case.\n\
    \  if (n == 0 || n == 1) {\n    return n;\n  }\n  // Recursive case.\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tlong result = 0;\n\tlong first = 0;\n\tlong second = 1;\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tresult = first + second;\n\t\tfirst = second;\n\
    \t\tsecond = result;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpx7bpmc56: /tmp/tmpx7bpmc56.cpp:23: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    if (n == 0 || n == 1) {\n       \
    \ return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n   \
    \ auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 2) return 1;\n    return fib(n-1) + fib(n-2);\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  if (n <= 1) {\n    return n;\n  }\n \
    \ return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n <= 1)\n\t\treturn n;\n\telse\n\t\treturn fib(n - 1)\
    \ + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    //assert(n >= 0);\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 1;\n    return fib(n-1) + fib(n-2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    int i, a = 0, b = 1, c;\n    for (i = 0; i < n; i++) {\n\
    \        c = a + b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\n\
    int main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n==0) return 0;\n  else if (n==1) return 1;\n  else\
    \ return fib(n-1)+fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 0) {\n        return -1;\n    }\n    if (n ==\
    \ 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n\
    \    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0 || n == 1)\n\t\treturn n;\n\tlong *fibArr = new\
    \ long[n + 1];\n\t//fibArr = (long*)malloc(sizeof(long)*(n+1));\n\tfibArr[0] =\
    \ 0;\n\tfibArr[1] = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tfibArr[i] = fibArr[i\
    \ - 1] + fibArr[i - 2];\n\t}\n\treturn fibArr[n];\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 2) {\n        return 1;\n    }\n    long f1 =\
    \ 1;\n    long f2 = 1;\n    for (long i = 2; i < n; i++) {\n        long f3 =\
    \ f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n    return f2;\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    } else {\n     \
    \   return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tassert(n > 0);\n\tint result;\n\tif (n <= 2) {\n\t\tresult\
    \ = 1;\n\t}\n\telse {\n\t\tresult = fib(n - 1) + fib(n - 2);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  // TODO: add the implementation of fibonacci\n  int fib1\
    \ = 0;\n  int fib2 = 1;\n  int result = 0;\n  for(int i = 0; i < n; i++){\n  \
    \  result = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = result;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: "tmpjwaz0ont: /tmp/tmpjwaz0ont.cpp:24: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long* tab=new long[n+1];\n    tab[0]=0;\n    tab[1]=1;\n\
    \    for(int i=2;i<=n;i++){\n        tab[i]=tab[i-1]+tab[i-2];\n    }\n    return\
    \ tab[n];\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) {\n        return n;\n    }\n    long f1 =\
    \ 0;\n    long f2 = 1;\n    long f3 = 0;\n    for (int i = 1; i < n; i++) {\n\
    \        f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n    return\
    \ f3;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fib(n-1) + fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\t\
    return 1;\n\t}\n\tlong n0 = 0;\n\tlong n1 = 1;\n\tlong n2 = 0;\n\tfor (int i =\
    \ 2; i <= n; i++) {\n\t\tn2 = n0 + n1;\n\t\tn0 = n1;\n\t\tn1 = n2;\n\t}\n\treturn\
    \ n2;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tlong long i, a = 0, b = 1, c;\n\tassert(n > 0);\n\tfor (i\
    \ = 0; i < n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn a;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  long rv=0;\n  long first=0;\n  long second=1;\n\
    \  if(n==0) return 0;\n  else if(n==1) return 1;\n  else{\n    for(int i=2;i<=n;i++){\n\
    \      rv=first+second;\n      first=second;\n      second=rv;\n    }\n  }\n \
    \ return rv;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn\
    \ fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // start from Fibonacci sequence F(0) = 0, F(1) = 1.\n\
    \    long a = 0, b = 1;\n    while (n > 0) {\n        long tmp = a;\n        a\
    \ = b;\n        b = tmp + b;\n        n--;\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 0) {\n    std::cerr << \"Negative arguments not\
    \ implemented\";\n    std::abort();\n  }\n  if (n == 0) return 0;\n  long prev\
    \ = 0;\n  long curr = 1;\n  for (long i = 1; i < n; ++i) {\n    long next = prev\
    \ + curr;\n    prev = curr;\n    curr = next;\n  }\n  return curr;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n==0) {\n        return 0;\n    } else if (n==1) {\n\
    \        return 1;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n\
    \    return 1;\n  }\n  else {\n    return fib(n-1) + fib(n-2);\n  }\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\t// TODO: Write your code here.\n\tif(n ==0 || n == 1)\n\t\
    \treturn n;\n\treturn fib(n-1) + fib(n-2);\n\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Return the nth Fibonacci number\n    int fib[n+1];\n\
    \    fib[0]=0;\n    fib[1]=1;\n    for(int i=2;i<=n;i++)\n    {\n        fib[i]=fib[i-1]+fib[i-2];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n <= 1) {\n\t\treturn n;\n\t} else {\n\t\treturn fib(n\
    \ - 1) + fib(n - 2);\n\t}\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) {\n        return n;\n    }\n    long prev\
    \ = 0;\n    long result = 1;\n    for (long i = 2; i <= n; i++) {\n        long\
    \ temp = result;\n        result = result + prev;\n        prev = temp;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO\n    if(n<=1)\n    {\n        return n;\n    }\n\
    \    return fib(n-1)+fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n \
    \   assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  // base case\n  if (n == 0 || n == 1) {\n    return n;\n\
    \  }\n  //recursive case\n  return fib(n-1) + fib(n-2);\n}\nint main() {\n   \
    \ auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // IMPLEMENT ME\n    if(n==0 || n==1)\n    {\n       \
    \ return n;\n    }\n    else\n    {\n        return fib(n-1)+fib(n-2);\n    }\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // YOUR CODE HERE\n    if(n==0)\n        return 0;\n \
    \   else if(n==1)\n        return 1;\n    else \n        return fib(n-1)+fib(n-2);\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) return n;\n    long fib1 = 0;\n    long fib2\
    \ = 1;\n    long res = 0;\n    for (long i = 2; i <= n; i++) {\n        res =\
    \ fib1 + fib2;\n        fib1 = fib2;\n        fib2 = res;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long n0=0, n1=1, temp;\n  if (n < 2) return n;\n  while\
    \ (n-- > 1) {\n    temp = n0 + n1;\n    n0 = n1;\n    n1 = temp;\n  }\n  return\
    \ n1;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n==0) {\n        return 0;\n    } else if (n==1) {\n\
    \        return 1;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Your code here.\n    if(n == 0) return 0;\n    else\
    \ if(n == 1) return 1;\n    else{\n      long fib1 = 0;\n      long fib2 = 1;\n\
    \      long temp = 0;\n      for(int i = 2; i < n; i++){\n        temp = fib1\
    \ + fib2;\n        fib1 = fib2;\n        fib2 = temp;\n      }\n      return fib1\
    \ + fib2;\n    }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n// your code here\n\tif(n==0) return 0;\n\telse if(n==1) return\
    \ 1;\n\telse return fib(n-1)+fib(n-2);\n}\nint main() {\n    auto candidate =\
    \ fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n==0){\n        return 0;\n    }\n    if (n==1){\n\
    \        return 1;\n    }\n    return fib(n-1)+fib(n-2);\n}\nint main() {\n  \
    \  auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long n1 = 1;\n  long n2 = 1;\n  for (long i = 0; i < n -\
    \ 2; i++) {\n    long n3 = n1 + n2;\n    n1 = n2;\n    n2 = n3;\n  }\n  return\
    \ n2;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n \
    \   return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long f_prev = 0;\n    long f_curr = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        long f_next = f_prev + f_curr;\n        f_prev\
    \ = f_curr;\n        f_curr = f_next;\n    }\n    return f_curr;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 2) {\n        return 1;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n  \
    \  return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n <= 1) {\n\t\treturn n;\n\t}\n\telse {\n\t\treturn\
    \ fib(n - 1) + fib(n - 2);\n\t}\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long res = 0;\n    long a = 0;\n    long b = 1;\n    if\
    \ (n <= 1)\n        return n;\n    for (long i = 2; i <= n; i++) {\n        res\
    \ = a + b;\n        a = b;\n        b = res;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  long a = 0;\n  long\
    \ b = 1;\n  for (long i = 2; i <= n; i++) {\n    long temp = a + b;\n    a = b;\n\
    \    b = temp;\n  }\n  return b;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    } else {\n     \
    \   return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    //assert(n >= 0);\n    if (n < 2) {\n        return n;\n\
    \    }\n    long a = 0;\n    long b = 1;\n    for (long i = 2; i <= n; i++) {\n\
    \        long c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long f = 0;\n  long g = 1;\n  while (0 < n--) {\n    g =\
    \ g + f;\n    f = g - f;\n  }\n  return g;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpge43pk2i: /tmp/tmpge43pk2i.cpp:21: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    // compute bottom-up\n    long memo[n+1];\n\
    \    memo[0] = 0;\n    memo[1] = 1;\n    for (int i = 2; i <= n; i++) {\n    \
    \    memo[i] = memo[i-1] + memo[i-2];\n    }\n    return memo[n];\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long f1 = 0;\n    long f2 = 1;\n    for (long i = 2; i\
    \ <= n; i++) {\n        long f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n\
    \    }\n    return f2;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 2) {\n        return 1;\n    }\n    else {\n\
    \        return fib(n-1) + fib(n-2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    long sum\
    \ = 1;\n    long fib1 = 0;\n    long fib2 = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        sum = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = sum;\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long f1 = 0;\n    long f2 = 1;\n    long f3 = 0;\n   \
    \ while (n > 0) {\n        f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n\
    \        n--;\n    }\n    return f1;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Use formula to find the n-th Fibonacci number in O(1)\
    \ time.\n    double sqrt5 = sqrt(5);\n    double phi = (1 + sqrt5) / 2;\n    return\
    \ (long) (pow(phi, n) / sqrt5 + 0.5);\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, c, i;\n    for (i = 2; i <= n; i++)\
    \ {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ if (n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\nint main() {\n  \
    \  auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long x, y;\n  long f0 = 0;\n  long f1 = 1;\n  long i = 0;\n\
    \  while (i < n) {\n    x = f0;\n    y = f1;\n    f0 = y;\n    f1 = x + y;\n \
    \   i = i + 1;\n  }\n  return f0;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tassert(n >= 0);\n\tif (n <= 1) {\n\t\treturn n;\n\t}\n\t\
    else {\n\t\treturn fib(n - 1) + fib(n - 2);\n\t}\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n   long f[n];\n    f[0] = 0;\n    f[1] = 1;\n    for (int\
    \ i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) return n;\n  long previous = 0;\n  long current\
    \ = 1;\n  for (long i = 0; i < n - 1; ++i) {\n    long tmp_previous = previous;\n\
    \    previous = current;\n    current = tmp_previous + current;\n  }\n  return\
    \ current;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    if (n == 1 || n == 2) {\n        return\
    \ 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\t\
    return 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    if (n <= 1) {\n        return n;\n\
    \    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  std::vector<long> f(n + 1);\n  f[0] =\
    \ 0;\n  f[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    f[i] = f[i - 1] + f[i\
    \ - 2];\n  }\n  return f[n];\n}\nint main() {\n    auto candidate = fib;\n   \
    \ assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  return 1;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpt6cb9c9t: /tmp/tmpt6cb9c9t.cpp:15: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    static std::map<long, long> mem;\n    if (n == 0 || n\
    \ == 1) return n;\n    if (mem.find(n) != mem.end()) {\n        return mem[n];\n\
    \    }\n    long ret = fib(n - 1) + fib(n - 2);\n    mem[n] = ret;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    long f = 0;\n    long g = 1;\n  \
    \  while (n--) {\n        g += f;\n        f = g - f;\n    }\n    return f;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tassert(n >= 0);\n\tif (n <= 2) return 1;\n\tlong a = 1,\
    \ b = 1, c;\n\tfor (int i = 3; i <= n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\t\
    b = c;\n\t}\n\treturn c;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\t\
    return 1;\n\t}\n\tlong fibminus1 = 0;\n\tlong fibminus2 = 1;\n\tlong fib = 0;\n\
    \tfor (long i = 2; i <= n; i++) {\n\t\tfib = fibminus1 + fibminus2;\n\t\tfibminus2\
    \ = fibminus1;\n\t\tfibminus1 = fib;\n\t}\n\treturn fib;\n}\nint main() {\n  \
    \  auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpyvkxzwne: /tmp/tmpyvkxzwne.cpp:29: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tassert(n >= 0);\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 1;\n\tlong n1 = 0, n2 = 1;\n\tlong tmp;\n\tfor (long i = 2; i <= n; i++)\
    \ {\n\t\ttmp = n1 + n2;\n\t\tn1 = n2;\n\t\tn2 = tmp;\n\t}\n\treturn n2;\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    long a =\
    \ 0;\n    long b = 1;\n    for (long i = 0; i < n; i++) {\n        long c = a\
    \ + b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n < 2) {\n\t\treturn n;\n\t}\n\telse {\n\t\treturn fib(n\
    \ - 1) + fib(n - 2);\n\t}\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ long a = 0, b = 1, c;\n    for (int i = 1; i < n; i++) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    return c;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\t// TODO\n}\nint main() {\n    auto candidate = fib;\n  \
    \  assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: "tmp6h5i_yfd: /tmp/tmp6h5i_yfd.cpp:15: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    else {\n\
    \        return fib(n-1) + fib(n-2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\t// TODO: Implement fib here.\n\t// DO NOT write long n;\
    \ in the function.\n\t// DO NOT write a main function.\n\tif (n == 0)\n\t\treturn\
    \ 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO: your code here\n    long output;\n    if (n ==\
    \ 0) {\n      output = 0;\n    }\n    else if (n == 1) {\n      output = 1;\n\
    \    }\n    else {\n      output = fib(n-1) + fib(n-2);\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long one_before = 1;\n    long two_before = 0;\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n\
    \    }\n    long current = one_before + two_before;\n    for (long i = 2; i <\
    \ n; i++) {\n        two_before = one_before;\n        one_before = current;\n\
    \        current = one_before + two_before;\n    }\n    return current;\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    //assert(n >= 0);\n    int fib[] = {0, 1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ -1323752223, 512559680, -811192543, -298632863, -1109825406, -1377401335, -1330698437,\
    \ -1529525884, -1835853887, -268907811, -362471312, -817350128, -1381065233, -2185732836,\
    \ -410869608, -522163717, -1369085250, -2193580557, -350281735, -572640928, -923784229,\
    \ -1487043232, -2409601629, -3916679285, -632629712, -1025202362, -1647483649,\
    \ -2670263781, -4304950336, -697755877, -1122334455, -1811939322, -2934312007,\
    \ -474327629, -777745124, -1252202349, -2039972773, -3282175596, -531185132, -861397307,\
    \ -1394558839, -2255915392, -3645538241, -590163175, -955698516, -1545203811,\
    \ -2497802257, -4042917868, -655111899, -1057309767, -1712421656, -2769721423,\
    \ -4482143679, -72514700\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp52xihh8_.cpp: In function \u2018long int fib(long int)\u2019:\n\
    /tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018-2185732836\u2019\
    \ from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n   13 | }\n    \
    \  | ^\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018-2193580557\u2019\
    \ from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1:\
    \ error: narrowing conversion of \u2018-2409601629\u2019 from \u2018long int\u2019\
    \ to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing\
    \ conversion of \u2018-3916679285\u2019 from \u2018long int\u2019 to \u2018int\u2019\
    \ [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018\
    -2670263781\u2019 from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n\
    /tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018-4304950336\u2019\
    \ from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1:\
    \ error: narrowing conversion of \u2018-2934312007\u2019 from \u2018long int\u2019\
    \ to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing\
    \ conversion of \u2018-3282175596\u2019 from \u2018long int\u2019 to \u2018int\u2019\
    \ [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018\
    -2255915392\u2019 from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n\
    /tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018-3645538241\u2019\
    \ from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1:\
    \ error: narrowing conversion of \u2018-2497802257\u2019 from \u2018long int\u2019\
    \ to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing\
    \ conversion of \u2018-4042917868\u2019 from \u2018long int\u2019 to \u2018int\u2019\
    \ [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018\
    -2769721423\u2019 from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n\
    /tmp/tmp52xihh8_.cpp:13:1: error: narrowing conversion of \u2018-4482143679\u2019\
    \ from \u2018long int\u2019 to \u2018int\u2019 [-Wnarrowing]\n/tmp/tmp52xihh8_.cpp:21:1:\
    \ error: expected \u2018}\u2019 at end of input\n   21 | }\n      | ^\n/tmp/tmp52xihh8_.cpp:10:18:\
    \ note: to match this \u2018{\u2019\n   10 | long fib(long n) {\n      |     \
    \             ^\n/tmp/tmp52xihh8_.cpp:21:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   21 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long  fn_2 = 0;\n  long  fn_1 = 1;\n  long  f = 0;\n  long\
    \ i = 2;\n  while (i <= n) {\n    f = fn_1 + fn_2;\n    fn_2 = fn_1;\n    fn_1\
    \ = f;\n    i = i + 1;\n  }\n  if (n > 0) {\n    return f;\n  } else {\n    return\
    \ 0;\n  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: "tmp_32cdz7m: /tmp/tmp_32cdz7m.cpp:30: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long sum1=0,sum2=1,sum3=0;\n    if(n==0){\n        return\
    \ 0;\n    }\n    if(n==1){\n        return 1;\n    }\n    if(n>1){\n        for(int\
    \ i=2;i<=n;i++){\n            sum3=sum1+sum2;\n            sum1=sum2;\n      \
    \      sum2=sum3;\n        }\n        return sum3;\n    }\n}\nint main() {\n \
    \   auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, i = 1;\n    if (n == 0) return 0;\n\
    \    while (i < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n\
    \        i++;\n    }\n    return b;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long n_th;\n    if (n <= 1)\n        return n;\n    long\
    \ fib1 = 0;\n    long fib2 = 1;\n    long fibn = 1;\n    for (long i = 2; i <=\
    \ n; i++) {\n        fibn = fib1 + fib2;\n        fib1 = fib2;\n        fib2 =\
    \ fibn;\n    }\n    return fibn;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO: IMPLEMENT ME\n    return 0;\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmps9jzwmss: /tmp/tmps9jzwmss.cpp:16: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 2) return n;\n  return fib(n-1) + fib(n-2);\n}\n\
    int main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n   \
    \ return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    int prev2 = 0;\n    int prev1 = 1;\n\
    \    int curr = prev1 + prev2;\n    for (int i = 2; i < n; i++) {\n        prev2\
    \ = prev1;\n        prev1 = curr;\n        curr = prev1 + prev2;\n    }\n    return\
    \ curr;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long result;\n    assert(n>=0);\n    if (n==0) return\
    \ 0;\n    if (n==1) return 1;\n    result = fib(n-1) + fib(n-2);\n    return result;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Implement this placeholder.\n    if (n <= 1) {\n  \
    \      return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  // Implement me\n  long old = 0;\n  long\
    \ cur = 1;\n  for (long i = 1; i < n; i++) {\n    cur = old + cur;\n    old =\
    \ cur - old;\n  }\n  return cur;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n \
    \   return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fib(n-1) + fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tassert(n >= 0);\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 1;\n\tlong a = 0, b = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\tlong\
    \ c = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ return fib(n-1) + fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n  \
    \  assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  if (n <= 1) {\n    return n;\n  }\n \
    \ long current = 0;\n  long next = 1;\n  for (long i = 0; i < n; i++) {\n    long\
    \ new_current = next;\n    next = current + next;\n    current = new_current;\n\
    \  }\n  return current;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 3) {\n        return 1;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 3) {\n    return 1;\n  }\n  long prev = 1;\n  long\
    \ curr = 1;\n  for (long i = 0; i < n - 2; ++i) {\n    long tmp = curr;\n    curr\
    \ = prev + curr;\n    prev = tmp;\n  }\n  return curr;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // Base case.\n    if (n <= 1) {\n        return n;\n\
    \    }\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, c;\n    if (n == 0) return a;\n   \
    \ for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n      \
    \  b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n==0) return 0;\n    if (n==1) return 1;\n    long\
    \ n1=0, n2=1, nt;\n    int i;\n    for (i=2; i<=n; i++) {\n        nt = n1 + n2;\n\
    \        n1 = n2;\n        n2 = nt;\n    }\n    return n2;\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    if (n == 1 || n == 2) return 1;\n\
    \    long a = 1, b = 1, c = 1;\n    for (long i = 3; i <= n; i++) {\n        c\
    \ = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long fib1 = 0;\n  long fib2 = 1;\n  long fib3 = 0;\n  for\
    \ (long i = 0; i < n - 1; i++) {\n    fib3 = fib1 + fib2;\n    fib1 = fib2;\n\
    \    fib2 = fib3;\n  }\n  return fib3;\n}\nint main() {\n    auto candidate =\
    \ fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmp_ja__aw9: /tmp/tmp_ja__aw9.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    \n    if(n == 0)\n        return 0;\n    if(n == 1)\n\
    \        return 1;\n    return fib(n-1) + fib(n-2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    long i;\n    long fib[n];\n    fib[0]\
    \ = 0;\n    fib[1] = 1;\n    for (i = 2; i <= n; i++) {\n        fib[i] = fib[i\
    \ - 1] + fib[i - 2];\n    }\n    return fib[n];\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  //assert(n > 0);\n  //assert(n < 46);\n  long f = 1;\n \
    \ long s = 1;\n  for (long i = 3; i <= n; i++) {\n    long temp = f;\n    f =\
    \ s;\n    s = temp + s;\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  // Implement your code here.\n  assert(n>=0);\n  int a=0,b=1,c=1;\n\
    \  if(n==0)\n    return 0;\n  if(n==1)\n    return 1;\n  for(int i=2;i<=n;i++)\n\
    \  {\n    c=a+b;\n    a=b;\n    b=c;\n  }\n  return c;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n \
    \   if (n == 2) {\n        return 1;\n    }\n    long fib1 = 1;\n    long fib2\
    \ = 1;\n    long res = 0;\n    for (int i = 3; i <= n; i++) {\n        res = fib1\
    \ + fib2;\n        fib1 = fib2;\n        fib2 = res;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // fibo[0] = 0\n    // fibo[1] = 1\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 1;\n    long a = 0;\n    long b = 1;\n    long c\
    \ = a + b;\n    for (int i = 2; i < n; i++) {\n        a = b;\n        b = c;\n\
    \        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n   \
    \ return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0 || n == 1)\n        return n;\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 3) {\n        return 1;\n    }\n    else {\n \
    \       return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  else {\n    return\
    \ fib(n-1) + fib(n-2);\n  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, c, i;\n    if( n == 0)\n        return\
    \ a;\n    for (i = 2; i <= n; i++)\n    {\n        c = a + b;\n        a = b;\n\
    \        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // ...\n    if(n==0){\n        return 0;\n    }else if(n==1){\n\
    \        return 1;\n    }else{\n        return fib(n-1)+fib(n-2);\n    }\n}\n\
    int main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO\n    if(n<=1)\n        return n;\n    return fib(n-1)+fib(n-2);\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 3) {\n        return 1;\n    } else {\n      \
    \  return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a=0,b=1,c=1;\n    for(int i=2;i<=n;i++){\n      \
    \  c=a+b;\n        a=b;\n        b=c;\n    }\n    return c;\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // the first and second numbers in the\n    // Fibonacci\
    \ sequence are 1 and 1\n    long first = 1;\n    long second = 1;\n    // nth\
    \ is the n-th number in the sequence\n    long nth = 1;\n    // loop from 3 to\
    \ n\n    for (long i = 3; i <= n; i++) {\n        // the nth number is the sum\
    \ of\n        // the previous two numbers\n        nth = first + second;\n   \
    \     // shift first and second\n        first = second;\n        second = nth;\n\
    \    }\n    return nth;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fib(n-1) + fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long fib_prev = 0;\n    long fib_curr = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        long fib_tmp = fib_curr;\n        fib_curr = fib_prev\
    \ + fib_curr;\n        fib_prev = fib_tmp;\n    }\n    return fib_prev;\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  return n <= 1 ? n : fib(n - 1) + fib(n - 2);\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    long first = 0;\n    long second\
    \ = 1;\n    long counter = 2;\n    while (counter <= n) {\n        long third\
    \ = first + second;\n        first = second;\n        second = third;\n      \
    \  counter = counter + 1;\n    }\n    if (n == 0) {\n        return 0;\n    }\
    \ else {\n        return second;\n    }\n}\nint main() {\n    auto candidate =\
    \ fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) {\n        return n;\n    }\n    long prev\
    \ = 0;\n    long curr = 1;\n    for (long i = 2; i <= n; i++) {\n        long\
    \ next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n   \
    \ return curr;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n   long a = 0, b = 1, c, i;\n   if( n == 0)\n      return\
    \ a;\n   for (i = 2; i <= n; i++)\n   {\n      c = a + b;\n      a = b;\n    \
    \  b = c;\n   }\n   return b;\n}\nint main() {\n    auto candidate = fib;\n  \
    \  assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, tmp;\n    for (long i = 0; i < n; i++)\
    \ {\n        tmp = a;\n        a = b;\n        b = tmp + b;\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    static std::vector<long> memo(2, 1);\n    if (n < memo.size())\
    \ {\n        return memo[n];\n    } else {\n        long k = memo.size();\n  \
    \      memo.push_back(fib(k - 1) + fib(k - 2));\n        return memo[k];\n   \
    \ }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: "tmps7p6gjiv: /tmp/tmps7p6gjiv.cpp:22: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    return n < 2 ? n : fib(n - 1) + fib(n - 2);\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n\
    \    return 1;\n  }\n  else {\n    return fib(n-1) + fib(n-2);\n  }\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\tif (n\
    \ == 2) return 1;\n\tlong a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tfor (int i =\
    \ 3; i <= n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  long a = 0;\n  long\
    \ b = 1;\n  long c = a + b;\n  for (int i = 2; i < n; i++) {\n    c = a + b;\n\
    \    a = b;\n    b = c;\n  }\n  return c;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmp_830lcko: /tmp/tmp_830lcko.cpp:26: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\t// Must be positive\n\tassert(n >= 0);\n\t// 0th fibonacci\
    \ number is 0\n\tif (n == 0) return 0;\n\t// 1st fibonacci number is 1\n\tif (n\
    \ == 1) return 1;\n\t// Use recursion to get the 2 previous numbers\n\tlong first\
    \ = fib(n - 1);\n\tlong second = fib(n - 2);\n\t// Add the two previous numbers\n\
    \treturn first + second;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) return n;\n    long prev = 0;\n    long curr\
    \ = 1;\n    for (long i = 0; i < n - 1; i++) {\n        long next = prev + curr;\n\
    \        prev = curr;\n        curr = next;\n    }\n    return curr;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    std::vector<long> fibs = {0, 1};\n    for (long i = 2;\
    \ i <= n; i++) {\n        fibs.push_back(fibs[i - 1] + fibs[i - 2]);\n    }\n\
    \    return fibs[n];\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\tlong a\
    \ = 0, b = 1, c;\n\tfor (int i = 2; i <= n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\
    \t\tb = c;\n\t}\n\treturn c;\n}\nint main() {\n    auto candidate = fib;\n   \
    \ assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    std::vector<long> v(n + 1);\n    v[0] = 0;\n    v[1] =\
    \ 1;\n    for (int i = 2; i <= n; i++) {\n        v[i] = v[i - 1] + v[i - 2];\n\
    \    }\n    return v[n];\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    if (n == 1 || n == 2) {\n        return\
    \ 1;\n    }\n    long n1 = 1;\n    long n2 = 1;\n    long n3 = 0;\n    for (int\
    \ i = 3; i <= n; i++) {\n        n3 = n1 + n2;\n        n1 = n2;\n        n2 =\
    \ n3;\n    }\n    return n3;\n}\nint main() {\n    auto candidate = fib;\n   \
    \ assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  //  assert(n >= 1);\n    if (n == 1 || n == 2) {\n     \
    \   return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long i;\n    long a=0,b=1,c;\n    if(n==0)\n        return\
    \ 0;\n    if(n==1)\n        return 1;\n    for(i=2;i<=n;i++)\n    {\n        c=a+b;\n\
    \        a=b;\n        b=c;\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 1) + fib(n\
    \ - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // your code here\n    long a = 0, b = 1, c;\n    if (n\
    \ == 0)\n        return a;\n    for (int i = 2; i <= n; i++) {\n        c = a\
    \ + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\nint main() {\n\
    \    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    long x = 0, y = 1, z = 1;\n    while\
    \ (--n > 0) {\n        x = y;\n        y = z;\n        z = x + y;\n    }\n   \
    \ return z;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: "tmpsuwx8ty6: /tmp/tmpsuwx8ty6.cpp:22: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  if (n <= 1) {\n    return n;\n  }\n \
    \ return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n\
    \    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n   \
    \ assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long arr[n+1];\n    arr[0]=0;\n    arr[1]=1;\n    for(int\
    \ i=2;i<=n;i++){\n        arr[i]=arr[i-1]+arr[i-2];\n    }\n    return arr[n];\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n < 2) {\n        return n;\n    }\n    else {\n \
    \       return fib(n-1) + fib(n-2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long f0 = 0;\n  long f1 = 1;\n  long fib = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    fib = f0 + f1;\n    f0 = f1;\n    f1 = fib;\n  }\n\
    \  return fib;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long first = 0;\n    long second = 1;\n    long result\
    \ = 0;\n    long i = 2;\n    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ == 1) {\n        return 1;\n    }\n    while (i <= n) {\n        result = first\
    \ + second;\n        first = second;\n        second = result;\n        i++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tlong curr = 1;\n\tlong prev = 0;\n\twhile (n-- > 0) {\n\t\
    \tlong next = curr + prev;\n\t\tprev = curr;\n\t\tcurr = next;\n\t}\n\treturn\
    \ prev;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO: implement it\n    if(n==0) return 0;\n    if(n==1)\
    \ return 1;\n    long fibo[n+1];\n    fibo[0]=0;\n    fibo[1]=1;\n    for(int\
    \ i=2;i<=n;i++){\n        fibo[i]=fibo[i-1]+fibo[i-2];\n    }\n    return fibo[n];\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  // TODO: Implement me!\n  long x = 0;\n  long y = 1;\n \
    \ for (int i = 0; i < n; i++) {\n    long temp = x;\n    x = y;\n    y = temp\
    \ + y;\n  }\n  return x;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    int f[] = {0, 1};\n    if (n <= 1)\
    \ return f[n];\n    long F = 0, F1 = 1, F2 = 1;\n    for (int i = 2; i <= n; i++)\
    \ {\n        F = F1 + F2;\n        F2 = F1;\n        F1 = F;\n    }\n    return\
    \ F;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: "tmp60v6t_e8: /tmp/tmp60v6t_e8.cpp:24: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    static std::map<long, long> cache;\n    if (n <= 1) return\
    \ n;\n    if (cache.find(n) != cache.end()) {\n        return cache[n];\n    }\n\
    \    long ret = fib(n - 1) + fib(n - 2);\n    cache[n] = ret;\n    return ret;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long prev = 0;\n  long next = 1;\n  for (long i = 0; i <\
    \ n; i++) {\n    long temp = prev + next;\n    prev = next;\n    next = temp;\n\
    \  }\n  return prev;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    std::vector<long> f(n+1);\n    f[0] = 0;\n    f[1] = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        f[i] = f[i-1] + f[i-2];\n    }\n\
    \    return f[n];\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tlong result = 0;\n\t// TODO\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpkpat1ni7: /tmp/tmpkpat1ni7.cpp:17: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\t// Your code starts here.\n\tif (n == 0)\n\t\treturn 0;\n\
    \telse if (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n\
    \t// Your code ends here.\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // write your code here\n    if(n==0 || n==1)\n      \
    \  return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\nint main() {\n \
    \   auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    } else {\n     \
    \   return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n==0 || n==1) return n;\n  else {\n    return fib(n-1)\
    \ + fib(n-2);\n  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    // TODO: Write a recursive function that returns the n-th\
    \ fibonacci number.\n    // Hint: the n-th fibonacci number is the sum of the\
    \ (n-1)-th and (n-2)-th\n    // fibonacci numbers.\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "tmpsrfkt6m9: /tmp/tmpsrfkt6m9.cpp:18: int main(): Assertion `candidate((10))\
    \ == (55)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    long a = 0, b = 1, c;\n    while (n--) {\n        c =\
    \ a + b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long a = 0;\n  long b = 1;\n  long c = 1;\n  if (n <= 0)\
    \ {\n    return a;\n  }\n  if (n == 1) {\n    return b;\n  }\n  if (n == 2) {\n\
    \    return c;\n  }\n  while (n != 2) {\n    a = b;\n    b = c;\n    c = a + b;\n\
    \    n--;\n  }\n  return c;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n// Implement fib function here!\n\tif(n==0 || n==1)\n\t\t\
    return n;\n\tlong fibo[n+1];\n\tfibo[0]=0;\n\tfibo[1]=1;\n\tfor(int i=2;i<=n;i++)\n\
    \t\tfibo[i]=fibo[i-1]+fibo[i-2];\n\treturn fibo[n];\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  if (n < 0) {\n    return 0;\n  } else if (n == 0) {\n  \
    \  return 0;\n  } else if (n == 1) {\n    return 1;\n  } else {\n    return fib(n\
    \ - 1) + fib(n - 2);\n  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tlong arr[n+1];\n\tlong i;\n\tarr[0]=0;\n\tarr[1]=1;\n\t\
    for(i=2;i<=n;i++)\n\t{\n\t\tarr[i]=arr[i-1]+arr[i-2];\n\t}\n\treturn arr[n];\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\nif (n <= 2) return 1;\nreturn fib(n-1) + fib(n-2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n <= 2) {\n\t\treturn 1;\n\t}\n\tlong fibPrev = 1; //\
    \ fib(n-1)\n\tlong fibCurr = 1; // fib(n)\n\tfor (long i = 2; i < n; i++) {\n\t\
    \tlong temp = fibCurr;\n\t\tfibCurr = fibPrev + fibCurr;\n\t\tfibPrev = temp;\n\
    \t}\n\treturn fibCurr;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  long a = 0, b = 1;\n  for (int i = 0;\
    \ i < n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\nint\
    \ main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n >= 0);\n    long a = 0, b = 1;\n    for (int\
    \ i = 1; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return\
    \ b;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  assert(n >= 0);\n  // C++11 allows such a declaration.\n\
    \  long memo[n + 1];\n  return fib_helper(n, memo);\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_dfht43.cpp: In function \u2018long int fib(long int)\u2019:\n\
    /tmp/tmp4_dfht43.cpp:14:10: error: \u2018fib_helper\u2019 was not declared in\
    \ this scope\n   14 |   return fib_helper(n, memo);\n      |          ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n <= 2) {\n        return 1;\n    } else {\n     \
    \   return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    auto candidate\
    \ = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n \
    \   assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    int a[3]={0,1,1};\n    if(n<3)\n \
    \   \treturn a[n];\n    else{\n    \tfor(int i=2;i<n;i++){\n    \t\ta[0]=a[1];\n\
    \    \t\ta[1]=a[2];\n    \t\ta[2]=a[0]+a[1];\n    \t}\n    \treturn a[2];\n  \
    \  }\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
    \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
    \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ return fib(n-1) + fib(n-2);\n}\nint main() {\n    auto candidate = fib;\n  \
    \  assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8))\
    \ == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12))\
    \ == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n\tif (n < 3) return 1;\n\tlong f_prev = 1;\n\tlong f_curr\
    \ = 1;\n\tfor (long i = 3; i <= n; i++) {\n\t\tlong tmp = f_curr;\n\t\tf_curr\
    \ += f_prev;\n\t\tf_prev = tmp;\n\t}\n\treturn f_curr;\n}\nint main() {\n    auto\
    \ candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) ==\
    \ (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n    assert(n > 0);\n    int a = 0, b = 1;\n    for (int i\
    \ = 0; i < n - 1; i++) {\n        int t = a + b;\n        a = b;\n        b =\
    \ t;\n    }\n    return b;\n}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10))\
    \ == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) ==\
    \ (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) ==\
    \ (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci\
    \ number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\n\
    long fib(long n) {\n  long f[n + 1];\n  int i;\n  f[0] = 0;\n  f[1] = 1;\n  for\
    \ (i = 2; i <= n; i++) {\n    f[i] = f[i - 1] + f[i - 2];\n  }\n  return f[n];\n\
    }\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n   \
    \ assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
