name: HumanEval_15_string_sequence
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if(n==0) return \"0\";\n  std::string result;\n  for(int i=0;i<=n;i++){\n\
    \    result += std::to_string(i) + \" \";\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0w841apq: /tmp/tmp0w841apq.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string string_of_int;\n    for(int i=0;i<=n;i++){\n        string_of_int\
    \ += std::to_string(i);\n        string_of_int += \" \";\n    }\n    return string_of_int;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpz2ae2y0a: /tmp/tmpz2ae2y0a.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string output = \"\";\n  for (long i = 0; i <= n; i++) {\n    output\
    \ = output + std::to_string(i) + \" \";\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpd82d_mia: /tmp/tmpd82d_mia.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t// assert(n >= 0);\n\t// Your code here\n\t// char str[n];\n\tstd::string\
    \ str = \"\";\n\tfor(int i=0;i<=n;i++){\n\t\tstr = str + std::to_string(i) + \"\
    \ \";\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqf6q_5eu: /tmp/tmpqf6q_5eu.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    std::string str = ss.str();\n    return str.substr(0,\
    \ str.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n \
    \   assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    char buf[256];\n    if (n < 0) n = 0;\n    for (int i = 0; i <= n;\
    \ i++) {\n        snprintf(buf, sizeof(buf), \"%d \", i);\n    }\n    std::string\
    \ str(buf);\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpiw2o__l1: /tmp/tmpiw2o__l1.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpd_ldb2up: /tmp/tmpd_ldb2up.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream convert;\n  for(int i=0;i<=n;i++)\n    convert<<i<<\"\
    \ \";\n  return convert.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpmxzfip1s: /tmp/tmpmxzfip1s.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\nstd::stringstream ss;\nfor (int i = 0; i <= n; i++)\n{\nss << i << \"\
    \ \";\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp19y1p898.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp19y1p898.cpp:14:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   14 | int main() {\n      |     \
    \       ^\n/tmp/tmp19y1p898.cpp:19:1: error: expected \u2018}\u2019 at end of\
    \ input\n   19 | }\n      | ^\n/tmp/tmp19y1p898.cpp:8:37: note: to match this\
    \ \u2018{\u2019\n    8 | std::string string_sequence(long n) {\n      |      \
    \                               ^\n/tmp/tmp19y1p898.cpp:19:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   19 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (long i = 0; i <= n; i++) {\n\t\tss <<\
    \ i << \" \";\n\t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp8quff3fb: /tmp/tmp8quff3fb.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpn7svx8jb: /tmp/tmpn7svx8jb.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream s;\n    if (n == 0) {\n        s << 0;\n    } else\
    \ {\n        s << 0 << \" \";\n        for (long i = 1; i <= n; i++) {\n     \
    \       s << i << \" \";\n        }\n    }\n    return s.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmppz6noe2y: /tmp/tmppz6noe2y.cpp:23: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream sstr;\n\tfor (int i = 0; i <= n; i++) {\n\t\tsstr\
    \ << i << \" \";\n\t}\n\tstd::string str = sstr.str();\n\tstr.pop_back();\n\t\
    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n    {\n        return \"0\";\n    }\n    std::string res;\n\
    \    while(n>0)\n    {\n        res=std::to_string(n%10)+\" \"+res;\n        n=n/10;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfpebazsv: /tmp/tmpfpebazsv.cpp:24: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (long i = 0; i <= n; i++) {\n       \
    \ result += std::to_string(i);\n        if (i != n) result += \" \";\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string a;\n\tfor (long i = 0; i <= n; i++) {\n\t\ta += std::to_string(i);\n\
    \t\ta += \" \";\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0bp_vjv2: /tmp/tmp0bp_vjv2.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream stream;\n  for (long i = 0; i <= n; i++) {\n    stream\
    \ << i << ' ';\n  }\n  return stream.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpgx3fqwtj: /tmp/tmpgx3fqwtj.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ans=\"\";\n    for(int i=0;i<=n;i++) {\n        ans=ans+std::to_string(i)+\"\
    \ \";\n    }\n    return ans;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpwhbse4qb: /tmp/tmpwhbse4qb.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  return \"\";\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp11jiu4bz: /tmp/tmp11jiu4bz.cpp:13: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream stream;\n    for (long i = 0; i <= n; i++) {\n \
    \       stream << i << \" \";\n    }\n    return stream.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7fkdipl7: /tmp/tmp7fkdipl7.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string numbers;\n  long i;\n  for (i = 0; i < n; i++) {\n    numbers\
    \ += std::to_string(i) + \" \";\n  }\n  numbers += std::to_string(i);\n  return\
    \ numbers;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // TODO: implement string_sequence\n    std::stringstream ss;\n  \
    \  for(int i=0;i<=n;i++){\n        ss<<i<<\" \";\n    }\n    std::string s = ss.str();\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpd5otnpv7: /tmp/tmpd5otnpv7.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string sequence;\n  if (n == 0) {\n    sequence = \"0\";\n  } else\
    \ {\n    for (size_t i = 0; i <= n; i++) {\n      if (i == 0) {\n        sequence\
    \ = std::to_string(i);\n      } else {\n        sequence = sequence + \" \" +\
    \ std::to_string(i);\n      }\n    }\n  }\n  return sequence;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpb57zrs0_: /tmp/tmpb57zrs0_.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream buf;\n\tfor (int i = 0; i <= n; i++) {\n\t\tbuf <<\
    \ i << \" \";\n\t}\n\treturn buf.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp8_p_kflz: /tmp/tmp8_p_kflz.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Write your code here.\n  std::stringstream result;\n  for(int i=0;i<=n;i++){\n\
    \    result<<i<<\" \";\n  }\n  return result.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpotd_ja16: /tmp/tmpotd_ja16.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string result;\n\tfor (int i = 0; i <= n; i++) {\n\t\tresult +=\
    \ std::to_string(i);\n\t\tif (i < n) {\n\t\t\tresult += \" \";\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    for(int i = 0; i <= n; i++) {\n     \
    \   str += std::to_string(i);\n        if(i != n)\n            str += \" \";\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::string res=\"\";\n   for(int i=0;i<=n;i++)\n   {\n       res+=std::to_string(i);\n\
    \       res+=\" \";\n   }\n   return res;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpk60ia5d2: /tmp/tmpk60ia5d2.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s=\"\";\n    std::stringstream ss;\n    for(int i=0;i<=n;i++)\n\
    \    {\n        ss<<i;\n        s=s+ss.str()+\" \";\n        ss.str(\"\");\n \
    \   }\n    //write your code here.\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmph1ksdlks: /tmp/tmph1ksdlks.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (int i = 0; i <= n; i++) {\n        result\
    \ += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcpuat0wd: /tmp/tmpcpuat0wd.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream result;\n    for (long i = 0; i <= n; i++) {\n \
    \       result << i << \" \";\n    }\n    return result.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo1mp3_j_: /tmp/tmpo1mp3_j_.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string output;\n    for(int i=0;i<=n;i++){\n        output +=\
    \ std::to_string(i);\n        if(i!=n)\n            output += \" \";\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  std::string result;\n  for (int i = 0; i\
    \ <= n; i++) {\n    oss << i << \" \";\n  }\n  result = oss.str();\n  return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpdz9g_clu: /tmp/tmpdz9g_clu.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    for(int i=0;i<=n;i++)\n        str=str+std::to_string(i)+\"\
    \ \";\n    str.pop_back();\n    return str;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result = \"\";\n  for (int i = 0; i <= n; i++) {\n    result\
    \ += std::to_string(i) + \" \";\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmptxg7ixeo: /tmp/tmptxg7ixeo.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string output;\n    for(int i=0;i<=n;i++){\n        output+=std::to_string(i);\n\
    \        if(i!=n)\n            output+=\" \";\n    }\n    return output;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream stringStream;\n    for (int i = 0; i <= n; ++i)\
    \ {\n        stringStream << i << \" \";\n    }\n    return stringStream.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp25825_rk: /tmp/tmp25825_rk.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    std::string result;\n    std::string word;\n\
    \    for(int i=0;i<=n;i++){\n        ss<<i;\n        ss>>word;\n        result+=word;\n\
    \        result+=\" \";\n        ss.clear();\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<=n;i++)\n    {\n        s.append(std::to_string(i));\n\
    \        s.append(\" \");\n    }\n    s.pop_back();\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream os;\n  for (int i = 0; i <= n; i++)\n    os << i <<\
    \ ' ';\n  return os.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpff9k4yws: /tmp/tmpff9k4yws.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Write your code here\n  std::string s;\n  for(int i=0;i<=n;i++)\n\
    \  {\n    s=s+std::to_string(i)+\" \";\n  }\n  return s;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp992_voe6: /tmp/tmp992_voe6.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Your code here.\n    long i;\n    std::stringstream ss;\n    for(i=0;i<=n;i++)\n\
    \    {\n        ss<<i<<\" \";\n    }\n    return ss.str();\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpiqr7iktu: /tmp/tmpiqr7iktu.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    // TODO: write this function\n    std::stringstream\
    \ ss;\n    for(long i=0;i<=n;i++){\n        ss<<i<<\" \";\n    }\n    s=ss.str();\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpe7r8j96f: /tmp/tmpe7r8j96f.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    \n    std::string result;\n    for(int i=0;i<=n;i++)\n    {\n    \
    \    result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpt_1ijfq0: /tmp/tmpt_1ijfq0.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    std::stringstream ss;\n    for(int i=0;i<=n;i++)\n\
    \    {\n        ss<<i<<\" \";\n    }\n    str=ss.str();\n    return str;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0egr4brn: /tmp/tmp0egr4brn.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string seq=\"\";\n  for(int i=0;i<=n;i++)\n  {\n      seq=seq+std::to_string(i)+\"\
    \ \";\n  }\n  return seq;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp29zkuk2u: /tmp/tmp29zkuk2u.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (int i = 0; i <= n; i++) {\n\
    \    s.append(std::to_string(i));\n    if (i != n) {\n      s.append(\" \");\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Create a new string and return it.\n  std::stringstream strs;\n \
    \ for(long i = 0; i <= n; i++) {\n    strs << i << \" \";\n  }\n  return strs.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpm0mm2jys: /tmp/tmpm0mm2jys.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream os;\n  for (int i = 0; i <= n; i++) {\n    os <<\
    \ i << \" \";\n  }\n  return os.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp40jw3q0u: /tmp/tmp40jw3q0u.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << n;\n    return ss.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp08xws4hb: /tmp/tmp08xws4hb.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n        return std::to_string(n);\n    else\n        return\
    \ std::to_string(n)+' '+string_sequence(n-1);\n\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpgmjji9p0: /tmp/tmpgmjji9p0.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string output = \"\";\n  for (long i = 0; i <= n; i++) {\n    output\
    \ += std::to_string(i);\n    if (i != n) {\n      output += \" \";\n    }\n  }\n\
    \  return output;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpvypi1rro: /tmp/tmpvypi1rro.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Your code here\n    std::string s;\n    if(n == 0) {\n        s\
    \ = \"0\";\n        return s;\n    }\n    for(int i = 0; i <= n; i++) {\n    \
    \    if(i == n) {\n            s += std::to_string(i);\n        }\n        else\
    \ {\n            s += std::to_string(i) + \" \";\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpqe6ss7q3: /tmp/tmpqe6ss7q3.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n        return \"0\";\n    else{\n        return string_sequence(n-1)+\"\
    \ \"+std::to_string(n);\n    }\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string r = \"\";\n\tfor (long i = 0; i <= n; i++) {\n\t\tr += std::to_string(i);\n\
    \t\tif (i != n) r += \" \";\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (int i = 0; i <= n; i++) {\n    ss << i\
    \ << \" \";\n  }\n  std::string s = ss.str();\n  return s.substr(0, s.size() -\
    \ 1);\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string ans;\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tstd::string t=std::to_string(i);\n\
    \t\tans+=t;\n\t\tans+=\" \";\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpdvilzdwu: /tmp/tmpdvilzdwu.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s;\n\tfor(long i=0;i<=n;i++)\n\t{\n\t\ts=s+\" \"+std::to_string(i);\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2g4w_0dj: /tmp/tmp2g4w_0dj.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i < n+1; i++) {\n      \
    \  s += std::to_string(i);\n        if(i != n)\n            s += \" \";\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n// TODO: Your code here\n  string s = \"\";\n  string number;\n  for(int\
    \ i = 0; i < n+1; i++){\n    number = to_string(i);\n    s = s + number + \" \"\
    ;\n  }\n  s.pop_back();\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsimd9dg.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmphsimd9dg.cpp:10:3: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   10 |   string s = \"\
    \";\n      |   ^~~~~~\n      |   std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphsimd9dg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmphsimd9dg.cpp:11:9:\
    \ error: expected \u2018;\u2019 before \u2018number\u2019\n   11 |   string number;\n\
    \      |         ^~~~~~~\n      |         ;\n/tmp/tmphsimd9dg.cpp:13:5: error:\
    \ \u2018number\u2019 was not declared in this scope\n   13 |     number = to_string(i);\n\
    \      |     ^~~~~~\n/tmp/tmphsimd9dg.cpp:13:14: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   13 |     number = to_string(i);\n      |              ^~~~~~~~~\n      |\
    \              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::stringstream ss;\n  for (long i = 0; i <= n;\
    \ ++i) {\n    ss << i << ' ';\n  }\n  return ss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnzng_f7s: /tmp/tmpnzng_f7s.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnfwjdvri: /tmp/tmpnfwjdvri.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Enter code here.\n  // TEST ::\n  //assert(string_sequence(0) ==\
    \ \"0\");\n  //assert(string_sequence(5) == \"0 1 2 3 4 5\");\n  //assert(string_sequence(9)\
    \ == \"0 1 2 3 4 5 6 7 8 9\");\n  //assert(string_sequence(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\");\n  //assert(string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15\");\n  std::stringstream ss;\n  for(long i = 0; i <= n; i++)\
    \ {\n    ss << i << \" \";\n  }\n  std::string s = ss.str();\n  return s.substr(0,\
    \ s.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream ss;\n  for (long i = 0; i <= n; ++i) {\n    ss <<\
    \ i << ' ';\n  }\n  std::string result = ss.str();\n  result.pop_back();\n  return\
    \ result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tif (n == 0) {\n\t\tss << n;\n\t\treturn ss.str();\n\
    \t}\n\tss << n;\n\tstd::string result = ss.str();\n\tfor (long i = n - 1; i >=\
    \ 0; i--) {\n\t\tstd::stringstream ssn;\n\t\tssn << i;\n\t\tresult += \" \" +\
    \ ssn.str();\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3oxobu41: /tmp/tmp3oxobu41.cpp:26: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp_uma1pm3: /tmp/tmp_uma1pm3.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (long i = 0; i <= n; i++) {\n       \
    \ result += std::to_string(i);\n        if (i != n) {\n            result += \"\
    \ \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    std::stringstream ss;\n    for(long i=0;i<=n;i++){\n\
    \        ss<<i<<\" \";\n    }\n    res=ss.str();\n    res.pop_back();\n    return\
    \ res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmprsb__7io: /tmp/tmprsb__7io.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n// YOUR CODE HERE\n\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_ee8s3yc: /tmp/tmp_ee8s3yc.cpp:14: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (long i = 0; i <= n; i++) {\n       \
    \ result += std::to_string(i);\n        if (i != n) result += \" \";\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (long i = 0; i <= n; i++) {\n\t\tss <<\
    \ i << \" \";\n\t}\n\tstd::string ss_str = ss.str();\n\treturn ss_str.substr(0,\
    \ ss_str.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  for (int i = 0; i <= n; i++) {\n    oss <<\
    \ i << ' ';\n  }\n  return oss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjdotr3q9: /tmp/tmpjdotr3q9.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (int i = 0; i <= n; i++) {\n        result\
    \ += std::to_string(i) + ' ';\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpyt4cvs1g: /tmp/tmpyt4cvs1g.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream sequence;\n  for (long i = 0; i <= n; i++) {\n  \
    \  sequence << i << \" \";\n  }\n  return sequence.str();\n}\nint main() {\n \
    \   auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpw7c0kpce: /tmp/tmpw7c0kpce.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  std::string result = ss.str();\n  result.pop_back();\n \
    \ return result;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string seq;\n    for(int i=0;i<=n;i++){\n        seq = seq +\
    \ std::to_string(i) + \" \";\n    }\n    return seq;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp7ibpvxfw: /tmp/tmp7ibpvxfw.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::stringstream ss;\n  for (size_t i = 0; i <=\
    \ n; i++) {\n    ss << i << \" \";\n  }\n  std::string s = ss.str();\n  return\
    \ s.substr(0, s.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::stringstream ss;\n  for (long i = 0; i <= n;\
    \ ++i) {\n    ss << i << \" \";\n  }\n  std::string result = ss.str();\n  result.erase(result.size()\
    \ - 1);\n  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::stringstream out;\n  for (long i = 0; i <= n;\
    \ i++) {\n    out << i << \" \";\n  }\n  std::string s = out.str();\n  return\
    \ s.substr(0, s.size() - 1); // get rid of the space at the end\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    \n    // Takes in parameter n and returns a string of numbers from\
    \ 0 to n.\n    // returns \"0 1 2 3 4 5\".\n\n    std::string result = \"\";\n\
    \    for (long i = 0; i <= n; i++) {\n        result += std::to_string(i) + \"\
    \ \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn70csps7: /tmp/tmpn70csps7.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<=n;i++)\n    {\n        s+=std::to_string(i);\n\
    \        s+=\" \";\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpskgve_8v: /tmp/tmpskgve_8v.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    if (n == 0) {\n        ss << 0;\n    }\
    \ else {\n        for (int i = 0; i <= n; i++) {\n            ss << i << \" \"\
    ;\n        }\n    }\n    std::string s = ss.str();\n    return s.substr(0, s.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcg59req_: /tmp/tmpcg59req_.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for(int i=0;i<=n;i++)\n  {\n    s=s+std::to_string(i)+\"\
    \ \";\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpniaqnq8w: /tmp/tmpniaqnq8w.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::stringstream ss;\n   for (long i = 0; i <= n; i++) {\n      ss\
    \ << i << \" \";\n   }\n   std::string str = ss.str();\n   if (str.size() > 0)\
    \ {\n      str.pop_back();\n   }\n   return str;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\ts = s +\
    \ \" \" + std::to_string(i);\n\t}\n\ts.erase(0, 1);\n\treturn s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // TODO: your code here\n    std::string s = \"\";\n    if(n == 0)\n\
    \    {\n        s += std::to_string(n);\n        return s;\n    }\n    s += std::to_string(0);\n\
    \    for(int i = 1; i <= n; i++)\n    {\n        s += \" \";\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n    {\n        return \"0\";\n    }\n    std::string str=\"\
    \";\n    while(n>=0)\n    {\n        str=str+\" \"+std::to_string(n);\n      \
    \  n--;\n    }\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9v2jzxm8: /tmp/tmp9v2jzxm8.cpp:24: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp4p6si8v2: /tmp/tmp4p6si8v2.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string sequence = \"\";\n    if (n==0) return \"0\";\n    for\
    \ (int i=0; i<=n; i++) {\n        sequence += std::to_string(i);\n        if (i!=n)\
    \ sequence += \" \";\n    }\n    return sequence;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << ' ';\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphnbk_8du: /tmp/tmphnbk_8du.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  std::string result = ss.str();\n  if (result.size() > 0)\n\
    \    result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tif (n==0) return \"0\";\n\tstd::string res;\n\tfor (int i=0; i<=n; i++)\
    \ {\n\t\tres.append(std::to_string(i));\n\t\tres.append(\" \");\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp6nb0gwl8: /tmp/tmp6nb0gwl8.cpp:20: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream result;\n    for (int i = 0; i <= n; i++) {\n \
    \       result << i << \" \";\n    }\n    return result.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpt08m6ds5: /tmp/tmpt08m6ds5.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    // TODO: Your code goes here\n    if(n\
    \ < 0) {\n        ss << \"Invalid number!\";\n    }\n    else if(n == 0) {\n \
    \       ss << 0;\n    }\n    else {\n        ss << 0;\n        for(int i = 1;\
    \ i <= n; i++) {\n            ss << \" \" << i;\n        }\n    }\n    return\
    \ ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream s;\n    for (long i = 0; i <= n; i++) {\n      \
    \  s << i << \" \";\n    }\n    return s.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpcjag7_c8: /tmp/tmpcjag7_c8.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (long i = 0; i <= n; i++) {\n\t\tss <<\
    \ i << ' ';\n\t}\n\tstd::string s = ss.str();\n\treturn s.substr(0, s.size() -\
    \ 1);\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // your code here\n  std::stringstream ss;\n  for(long i=0;i<=n;i++){\n\
    \    ss<<i<<\" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpe_t4hwkj: /tmp/tmpe_t4hwkj.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    for(int i=0;i<=n;i++)\n    {\n        str+=std::to_string(i);\n\
    \        str+=\" \";\n    }\n    return str;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpgzih6pa7: /tmp/tmpgzih6pa7.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpeoi9xg9l: /tmp/tmpeoi9xg9l.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for(int i=0;i<=n;i++)\n  {\n    s=s+std::to_string(i)+\"\
    \ \";\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmptohwqho2: /tmp/tmptohwqho2.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    std::string str;\n    for(int i=0;i<=n;i++)\n\
    \    {\n    \tss<<i<<\" \";\n\t}\n\tstr=ss.str();\n\treturn str;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpct4nblgd: /tmp/tmpct4nblgd.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::stringstream buffer;\n   for (long i = 0; i <= n; i++) {\n   \
    \    buffer << i << ' ';\n   }\n   std::string sequence = buffer.str();\n   return\
    \ sequence.substr(0, sequence.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t// TODO: Fill in the blank.\n\tstd::string str = \"\";\n\tif (n == 0)\
    \ {\n\t\tstr += '0';\n\t}\n\tfor (long i = 0; i <= n; i++) {\n\t\tstr += std::to_string(i);\n\
    \t\tif (i != n) {\n\t\t\tstr += ' ';\n\t\t}\n\t}\n\treturn str;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2wb89j5m: /tmp/tmp2wb89j5m.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tchar x[100000];\n\tlong i;\n\tchar *p;\n\tp=x;\n\tfor(i=0;i<=n;i++)\n\
    \t{\n\t\tp+=sprintf(p,\"%ld \",i);\n\t}\n\treturn x;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp607soytk: /tmp/tmp607soytk.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << n;\n    std::string s;\n    ss >>\
    \ s;\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp06bn0924: /tmp/tmp06bn0924.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string output;\n\tif (n <= 0) {\n\t\toutput = std::to_string(n);\n\
    \t}\n\telse {\n\t\toutput = string_sequence(n - 1);\n\t\toutput += \" \" + std::to_string(n);\n\
    \t}\n\treturn output;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  for (int i = 0; i <= n; i++) {\n    oss <<\
    \ i << \" \";\n  }\n  std::string space_delimited_result = oss.str();\n  if (space_delimited_result.size()\
    \ > 0) {\n    // Remove the trailing space\n    space_delimited_result.pop_back();\n\
    \  }\n  return space_delimited_result;\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n == 0)\n        return \"0\";\n    if(n == 1)\n        return\
    \ \"0 1\";\n    std::string s = \"0\";\n    for(int i = 1; i <= n; i++)\n    \
    \    s = s + \" \" + std::to_string(i);\n    return s;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    std::string s = ss.str();\n    return s.substr(0,\
    \ s.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    s.reserve(25);\n    if (n == 0) {\n        s =\
    \ '0';\n        return s;\n    }\n    for (int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n        s += ' ';\n    }\n    s.pop_back();\n    return\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    //TODO: Implement me!\n    if(n==0) return \"0\";\n    std::string\
    \ ret;\n    for(int i=0;i<=n;i++){\n        ret+= std::to_string(i);\n       \
    \ ret+=\" \";\n    }\n    return ret;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpj98g2ovz: /tmp/tmpj98g2ovz.cpp:21: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n>=0);\n    std::ostringstream out;\n    for(long i=0;i<=n;i++)\
    \ {\n        out<<i<<\" \";\n    }\n    std::string result = out.str();\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    for (int i = 0; i <= n; i++) {\n    \
    \    oss << i << \" \";\n    }\n    std::string result = oss.str();\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    return n==0 ? \"0\" : string_sequence(n-1) + \" \" + std::to_string(n);\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string str;\n\tif (n == 0) {\n\t\tstr = \"0\";\n\t\treturn str;\n\
    \t}\n\telse {\n\t\tstr = string_sequence(n - 1);\n\t\tstr = str + \" \" + std::to_string(n);\n\
    \t\treturn str;\n\t}\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tif (n == 0) {\n\t\treturn \"0\";\n\t} else {\n\t\treturn string_sequence(n\
    \ - 1) + \" \" + std::to_string(n);\n\t}\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result = \"\";\n    for (int i = 0; i <= n; i++) {\n \
    \       result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgxp5lmix: /tmp/tmpgxp5lmix.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string result = \"\";\n\tint counter = 0;\n\tfor (int i = 0; i\
    \ <= n; i++) {\n\t\tif (i == n) {\n\t\t\tresult += std::to_string(i);\n\t\t}\n\
    \t\telse {\n\t\t\tresult += std::to_string(i) + \" \";\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // your code here\n    std::string output = \"\";\n    for(long i\
    \ = 0; i <= n; i++){\n        output = output + std::to_string(i) + \" \";\n \
    \   }\n    return output;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpp50uatmb: /tmp/tmpp50uatmb.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  std::ostringstream oss;\n  oss << n;\n  result\
    \ = oss.str();\n  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpexz4h7k7: /tmp/tmpexz4h7k7.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    long i;\n    for(i=0;i<=n;i++)\n    {\n\
    \        str+=std::to_string(i)+\" \";\n    }\n    return str;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpdr520w3l: /tmp/tmpdr520w3l.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t// your code here\n\tstd::string s = \"\";\n\tfor (int i = 0; i <= n;\
    \ i++) {\n\t\ts += std::to_string(i);\n\t\tif (i != n)\n\t\t\ts += \" \";\n\t\
    }\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // TODO: Implement me!\n  stringstream ss;\n  for(int i=0;i<=n;i++){\n\
    \    ss<<i<<\" \";\n  }\n  string result = ss.str();\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2y_ql195.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp2y_ql195.cpp:10:3: error: \u2018stringstream\u2019 was\
    \ not declared in this scope; did you mean \u2018std::stringstream\u2019?\n  \
    \ 10 |   stringstream ss;\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2y_ql195.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmp2y_ql195.cpp:12:5:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   12 |     ss<<i<<\"\
    \ \";\n      |     ^~\n/tmp/tmp2y_ql195.cpp:14:3: error: \u2018string\u2019 was\
    \ not declared in this scope; did you mean \u2018std::string\u2019?\n   14 | \
    \  string result = ss.str();\n      |   ^~~~~~\n      |   std::string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2y_ql195.cpp:2:\n/shared/centos7/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  //TODO: Implement this function.\n  std::string result = \"\";\n  if(n\
    \ < 0) {\n    throw \"InvalidArgumentException\";\n  }\n  for(long i = 0; i <=\
    \ n; i++) {\n    result += std::to_string(i);\n    if(i < n) {\n      result +=\
    \ \" \";\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (int i = 0; i <= n; i++) {\n\t\tss << i\
    \ << \" \";\n\t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn9hw158a: /tmp/tmpn9hw158a.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  char buffer[1000];\n  std::stringstream ss;\n  ss << 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    ss << \" \" << i;\n  }\n  return ss.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnvcftehq: /tmp/tmpnvcftehq.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream result;\n\tfor (long i = 0; i <= n; i++) {\n\t\tresult\
    \ << i << \" \";\n\t}\n\tstd::string r = result.str();\n\treturn r.substr(0, r.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // write code here\n  std::stringstream ss;\n  for(long i = 0; i <=\
    \ n; i++) {\n    ss << i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpf5j7ynzy: /tmp/tmpf5j7ynzy.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (int i = 0; i <= n; i++) {\n\t\tss << i\
    \ << \" \";\n\t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcxowyvgd: /tmp/tmpcxowyvgd.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string seq;\n    for(int i=0;i<=n;i++){\n        std::stringstream\
    \ ss;\n        ss<<i;\n        std::string str;\n        ss>>str;\n        seq+=str;\n\
    \        seq+=\" \";\n    }\n    return seq;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpqeppl6fk: /tmp/tmpqeppl6fk.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // TODO: implement the function.\n  \n  std::string s=\"\";\n  long\
    \ num=0;\n  while(num<=n)\n  {\n  \ts=s+std::to_string(num)+\" \";\n  \tnum++;\n\
    \  }\n  s.pop_back();\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream out;\n  for (long i = 0; i <= n; i++) {\n    out\
    \ << i << \" \";\n  }\n  return out.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp35qfuv8d: /tmp/tmp35qfuv8d.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp0s7jf_bx: /tmp/tmp0s7jf_bx.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if(n == 0) return \"0\";\n  else return string_sequence(n-1) + \" \"\
    \ + std::to_string(n);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  if (n == 0) {\n    ss << 0;\n  } else {\n \
    \   for (int i = 0; i <= n; i++) {\n      ss << i << \" \";\n    }\n  }\n  return\
    \ ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpi2cvcfjd: /tmp/tmpi2cvcfjd.cpp:22: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // REPLACE WITH YOUR CODE\n  return \"\";\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpc4rx6793: /tmp/tmpc4rx6793.cpp:14: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tif (n == 0)\n\t\treturn \"0\";\n\telse {\n\t\treturn string_sequence(n\
    \ - 1) + \" \" + std::to_string(n);\n\t}\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result=\"\";\n    if(n<0)\n    {\n        n=n*-1;\n  \
    \  }\n    for(int i=0;i<=n;i++)\n    {\n        result=result+std::to_string(i)+\"\
    \ \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp06szokgq: /tmp/tmp06szokgq.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    if(n < 0)\n        return str;\n    if(n ==\
    \ 0)\n        return \"0\";\n    str += std::to_string(0);\n    for(int i = 1;\
    \ i <= n; i++)\n        str += ' ' + std::to_string(i);\n    return str;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // your code goes here\n    std::string result = \"\";\n    for(long\
    \ i = 0; i <= n; i++){\n        result += std::to_string(i);\n        if(i !=\
    \ n){\n            result += \" \";\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for(long i=0;i<=n;i++)\n    s+=std::to_string(i)+\"\
    \ \";\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n \
    \   assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1rukqy21: /tmp/tmp1rukqy21.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string temp;\n  std::stringstream ss;\n  for(int i=0;i<=n;i++){\n\
    \    ss<<i<<\" \";\n  }\n  ss>>temp;\n  return temp;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp7f301z1w: /tmp/tmp7f301z1w.cpp:20: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << n;\n    std::string s = ss.str();\n\
    \    std::string res = \"\";\n    for(int i = 0; i <= n; i++) {\n        std::stringstream\
    \ ss;\n        ss << i;\n        std::string s = ss.str();\n        res += s;\n\
    \        if(i != n) {\n            res += \" \";\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    std::string sequence;\n    ss >> sequence;\n\
    \    return sequence;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1_f_jcjg: /tmp/tmp1_f_jcjg.cpp:20: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream stringStream;\n    for (int i = 0; i <= n; i++)\
    \ {\n        stringStream << i << \" \";\n    }\n    return stringStream.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphfeeyuyy: /tmp/tmphfeeyuyy.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream stream;\n  for (long i = 0; i <= n; i++) {\n    stream\
    \ << i << \" \";\n  }\n  return stream.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp_mkl5i09: /tmp/tmp_mkl5i09.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tlong i;\n\tstd::string ans=\"\";\n\tfor(i=0;i<=n;i++)\n\t{\n\t\tans=ans+std::to_string(i)+\"\
    \ \";\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjniff8hx: /tmp/tmpjniff8hx.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string str = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\tstr =\
    \ str + std::to_string(i) + \" \";\n\t}\n\treturn str;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmptmkj4uup: /tmp/tmptmkj4uup.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    for(long i=0;i<=n;i++){\n        res = res +\
    \ std::to_string(i) + \" \";\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp20cndojv: /tmp/tmp20cndojv.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream oss;\n\tfor (long i = 0; i <= n; i++) {\n\t\toss\
    \ << i << \" \";\n\t}\n\tstd::string s = oss.str();\n\t//remove last space\n\t\
    s.pop_back();\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream s;\n    for (long i = 0; i <= n; i++) {\n      \
    \  s << i << \" \";\n    }\n    return s.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpqbz_0cks: /tmp/tmpqbz_0cks.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp7jodjfbc: /tmp/tmp7jodjfbc.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    for(int i = 0; i <= n; i++) {\n     \
    \   str += std::to_string(i);\n        if(i != n)\n            str += \" \";\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Empty string\n    std::string s = \"\";\n    for (long i = 0; i\
    \ <= n; i++) {\n        // Convert the number to string and append to s\n    \
    \    s = s + std::to_string(i) + \" \";\n    }\n    // Remove the trailing space\n\
    \    s.pop_back();\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    std::stringstream s;\n    for(int i=0;i<=n;i++)\n\
    \    {\n        s<<i<<\" \";\n    }\n    str=s.str();\n    str.pop_back();\n \
    \   return str;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  for (auto i=0; i<=n; ++i) {\n    oss << i\
    \ << \" \";\n  }\n  return oss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjq8xibzw: /tmp/tmpjq8xibzw.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n == 0) {\n        return \"0\";\n    }\n    return string_sequence(n-1)\
    \ + \" \" + std::to_string(n);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmplsu0156c: /tmp/tmplsu0156c.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<=n;i++)\n        s+=std::to_string(i)+\"\
    \ \";\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmps0unnblh: /tmp/tmps0unnblh.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string str=\"\";\n  for(int i=0;i<=n;i++)\n    str=str+\" \"+std::to_string(i);\n\
    \  return str;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp6z0uzqhz: /tmp/tmp6z0uzqhz.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // We use a stringstream to append strings to.\n    std::stringstream\
    \ stream;\n    for (long i = 0; i <= n; i++) {\n        stream << i << \" \";\n\
    \    }\n    return stream.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmptm7hgqct: /tmp/tmptm7hgqct.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    oss << std::fixed << std::setprecision(0);\n\
    \    for (int i = 0; i <= n; i++) {\n        oss << i << ' ';\n    }\n    std::string\
    \ s(oss.str());\n    s.erase(s.size() - 1);\n    return s;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0);\n    std::stringstream ss;\n    for (int i = 0; i\
    \ <= n; i++) {\n        ss << i << \" \";\n    }\n    std::string mystr = ss.str();\n\
    \    //  std::cout << mystr;\n    return mystr;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwkkze1dr: /tmp/tmpwkkze1dr.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res=\"\";\n    for(int i=0;i<=n;i++)\n    {\n    \tres=res+std::to_string(i)+\"\
    \ \";\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpizvjkexs: /tmp/tmpizvjkexs.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result = \"\";\n  for (long i = 0; i <= n; i++) {\n    result\
    \ += std::to_string(i);\n    if (i != n) result += \" \";\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string res = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\tres +=\
    \ std::to_string(i);\n\t\tif (i != n) res += \" \";\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\ts += std::to_string(i);\n\
    \t\tif (i < n) s += \" \";\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream stream;\n\tfor (int i = 0; i <= n; i++) {\n\t\tstream\
    \ << i << \" \";\n\t}\n\treturn stream.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpfvoi5exb: /tmp/tmpfvoi5exb.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    for(int i=0;i<=n;i++)\n        str.append(std::to_string(i)+\"\
    \ \");\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1pqyt3dk: /tmp/tmp1pqyt3dk.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  // TODO: Your code here.\n  // Do not write\
    \ to stdout/console. Instead return the stringstream's str().\n  for(int i=0;i<=n;i++)\n\
    \  {\n    ss<<i<<\" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp05ehgg06: /tmp/tmp05ehgg06.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    for(long i=0;i<=n;i++){\n        res = res +\
    \ std::to_string(i) + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n        return \"0\";\n    else if(n==1)\n        return\
    \ \"0 1\";\n    else if(n==2)\n        return \"0 1 2\";\n    else if(n==3)\n\
    \        return \"0 1 2 3\";\n    else if(n==4)\n        return \"0 1 2 3 4\"\
    ;\n    else if(n==5)\n        return \"0 1 2 3 4 5\";\n    else\n        return\
    \ \"0 1 2 3 4 5 6\";\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmptrdcsmwd: /tmp/tmptrdcsmwd.cpp:28: int main(): Assertion `candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Allocate a string stream.\n    std::ostringstream stream;\n   \
    \ for (long i = 0; i <= n; i++) {\n        stream << i << \" \";\n    }\n    return\
    \ stream.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbsehc2ci: /tmp/tmpbsehc2ci.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n     \
    \   ss << i << \" \";\n    }\n    std::string s = ss.str();\n    return s.substr(0,\
    \ s.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n      \
    \  ss << i << \" \";\n    }\n    std::string ret = ss.str();\n    return ret.substr(0,\
    \ ret.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n \
    \   assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // write your code here.\n    std::stringstream ss;\n    for(int i=0;i<=n;i++){\n\
    \        ss<<i<<\" \";\n    }\n    std::string s;\n    s=ss.str();\n    return\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3d6gg8r1: /tmp/tmp3d6gg8r1.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Initialize buffer\n    std::string buff;\n    // Convert number\
    \ to string and append to buffer\n    for (long i = 0; i <= n; i++) {\n      \
    \  buff += std::to_string(i);\n        // append space at the end if not the last\
    \ number\n        if (i != n) buff += \" \";\n    }\n    return buff;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t// Write your code here\n\tstd::string ans = \"\";\n\tfor (int i = 0;\
    \ i <= n; i++) {\n\t\tans += (std::to_string(i) + \" \");\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpp7x88cfs: /tmp/tmpp7x88cfs.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (int i = 0; i <= n; i++) {\n\t\tss << i\
    \ << \" \";\n\t}\n\tstd::string s = ss.str();\n\treturn s.substr(0, s.size() -\
    \ 1);\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string seq;\n\tfor (int i = 0; i <= n; i++) {\n\t\tseq += std::to_string(i);\n\
    \t\tif (i != n) {\n\t\t\tseq += \" \";\n\t\t}\n\t}\n\treturn seq;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\nstd::stringstream ss;\n  for(long i=0;i<=n;i++)\n    ss<<i<<\" \";\n \
    \ return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n \
    \   assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkmy5c272: /tmp/tmpkmy5c272.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tfor (int i = 0; i <= n; i++)\n\t\tss << i <<\
    \ \" \";\n\tstd::string s = ss.str();\n\ts.pop_back(); // removes trailing space\n\
    \treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\nstd::string result;\nif(n==0)\n{\nreturn \"0\";\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmp62gpd8.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpmp62gpd8.cpp:14:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   14 | int main() {\n      |     \
    \       ^\n/tmp/tmpmp62gpd8.cpp:19:1: error: expected \u2018}\u2019 at end of\
    \ input\n   19 | }\n      | ^\n/tmp/tmpmp62gpd8.cpp:8:37: note: to match this\
    \ \u2018{\u2019\n    8 | std::string string_sequence(long n) {\n      |      \
    \                               ^\n/tmp/tmpmp62gpd8.cpp:19:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   19 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream r;\n  for (int i = 0; i <= n; i++) {\n    r << i <<\
    \ \" \";\n  }\n  return r.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7e2m8lo7: /tmp/tmp7e2m8lo7.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  for (long i = 0; i <= n; i++) {\n    result +=\
    \ std::to_string(i);\n    if (i != n) {\n      result += \" \";\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t\tstd::stringstream ss;\n\t\tfor (long i = 0; i <= n; i++) {\n\t\t\t\
    ss << i << \" \";\n\t\t}\n\t\tstd::string result = ss.str();\n\t\treturn result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string res = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\tres +=\
    \ std::to_string(i);\n\t\tif (i != n) res += \" \";\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if(n==0)\n        return \"0\";\n    else\n        return string_sequence(n-1)+\"\
    \ \"+std::to_string(n);\n\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\t// Start the sequence with '0'\n\tstd::string s = \"0\";\n\tif (n >\
    \ 0) {\n\t\tfor (long i = 1; i <= n; i++) {\n\t\t\ts += \" \" + std::to_string(i);\n\
    \t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Your code goes here\n\tstd::string str = \"\";\n\tfor(int i=0;i<=n;i++)\n\
    \t{\n\t\tstr+=std::to_string(i)+\" \";\n\t}\n\tstr.pop_back();\n\treturn str;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::string res;\n  if(n == 0)\n    return \"0\"\
    ;\n  res += std::to_string(0);\n  for(long i = 1; i <= n; i++) {\n    res += \"\
    \ \";\n    res += std::to_string(i);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (auto i = 0L; i <= n; ++i) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpv797rywx: /tmp/tmpv797rywx.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Your code here\n    std::string s;\n    for(int i=0;i<=n;i++)\n\
    \    {\n        s = s + std::to_string(i) + \" \";\n    }\n    s.pop_back();\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret = \"\";\n    for (long i = 0; i <= n; i++) {\n   \
    \     ret += std::to_string(i);\n        if (i != n) {\n            ret += \"\
    \ \";\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    for (long i = 0; i <= n; i++) {\n   \
    \     oss << i << ' ';\n    }\n    return oss.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp5ycg2xsn: /tmp/tmp5ycg2xsn.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
