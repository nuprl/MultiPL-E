name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  // zero, and has a frequency greater than or equal to the value of the integer itself.\
  \ \n// The frequency of an integer is the number of times it appears in the list.\n\
  // If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3,\
  \ 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4,\
  \ 4]) == -1\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
  \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
  \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
  \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
  \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
  \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
  \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6, 9,\
  \ 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
  \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
  \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8, 2,\
  \ 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
  \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
  \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4, 2,\
  \ 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n    assert(candidate((std::vector<long>({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
  \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
  \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
  \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
completions: ["  std::map<long, long> myMap;\n  for(auto i: lst)\n  {\n    myMap[i]++;\n\
    \  }\n  for(auto j: myMap)\n  {\n    if(j.first <= j.second)\n    {\n      return\
    \ j.first;\n    }\n  }\n  return -1;", "    if(lst.size() == 0)\n        return\
    \ -1;\n    long *freq = new long[lst.size()+1];\n    for(long i = 0; i < lst.size()+1;\
    \ i++)\n        freq[i] = 0;\n    for(long i = 0; i < lst.size(); i++)\n     \
    \   freq[lst[i]]++;\n    for(long i = lst.size(); i >= 1; i--)\n        if(freq[i]\
    \ >= i)\n            return i;\n    return -1;", "    long best = -1;\n    std::map<long,\
    \ long> freq;\n    for (long num : lst)\n        freq[num]++;\n    for (long num\
    \ : lst) {\n        if (num > 0 && freq[num] >= num && num > best)\n         \
    \   best = num;\n    }\n    return best;", "  long max = -1;\n  std::unordered_map<long,\
    \ int> mp;\n  for(int i = 0; i < lst.size(); i++) {\n    mp[lst[i]]++;\n  }\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(mp[lst[i]] >= lst[i] && lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return max;", "  std::map<long,\
    \ long> nums;\n  for (auto elem : lst) {\n    if (nums.find(elem) == nums.end())\
    \ {\n      nums[elem] = 1;\n    } else {\n      nums[elem]++;\n    }\n  }\n  for\
    \ (auto elem : nums) {\n    if (elem.first <= elem.second) {\n      return elem.first;\n\
    \    }\n  }\n  return -1;", "    std::unordered_map<long, int> map;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        map[lst[i]]++;\n    }\n    std::map<int,\
    \ int> m;\n    for(auto &i : map) {\n        if(i.first > 0) {\n            m[i.first]\
    \ = i.second;\n        }\n    }\n    for(auto &i : m) {\n        if(i.first <=\
    \ i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "  std::map<long,long>mymap;\n  long max = -1;\n  for(auto i = 0; i < lst.size();\
    \ i++){\n    if(mymap.find(lst[i]) != mymap.end()){\n      mymap[lst[i]]++;\n\
    \    }\n    else{\n      mymap[lst[i]] = 1;\n    }\n  }\n  for(auto i = 0; i <\
    \ lst.size(); i++){\n    if(mymap[lst[i]] >= lst[i] && lst[i] > max){\n      max\
    \ = lst[i];\n    }\n  }\n  return max;", "  for(int i = lst.size() - 1; i >= 0;\
    \ i--) {\n    std::cout << \"lst[\" << i << \"] = \" << lst[i] << std::endl;\n\
    \    long count = 0;\n    for(int j = 0; j < lst.size(); j++) {\n      if(lst[i]\
    \ == lst[j]) {\n        count++;\n      }\n    }\n    if(count >= lst[i]) {\n\
    \      return lst[i];\n    }\n  }\n  return -1;", "    long x = -1;\n    long\
    \ max = -1;\n    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] > 0) {\n            m[lst[i]]++;\n        }\n    }\n  \
    \  for(auto i : m) {\n        if(i.first <= i.second) {\n            if(i.first\
    \ > max) {\n                max = i.first;\n            }\n        }\n    }\n\
    \    if(max == -1) {\n        return -1;\n    }\n    return max;", "  std::unordered_map<long,\
    \ int> m;\n  int max_val = -1;\n  int max_freq = -1;\n  for (auto i : lst) {\n\
    \    m[i]++;\n    if (m[i] >= i && m[i] > max_freq) {\n      max_val = i;\n  \
    \    max_freq = m[i];\n    }\n  }\n  return max_val;", "    if(lst.size() == 0)\n\
    \        return -1;\n    int max = *std::max_element(lst.begin(), lst.end());\n\
    \    int ans = -1;\n    std::vector<int> freq(max + 1, 0);\n    for(auto &num\
    \ : lst)\n        freq[num]++;\n    for(int i = max; i >= 1; i--)\n        if(freq[i]\
    \ >= i)\n            return i;\n    return ans;", "    sort(lst.begin(), lst.end());\n\
    \    long value = -1;\n    long count = 0;\n    long i = 0;\n    while(i < lst.size()){\n\
    \        while(i < lst.size() && lst[i] == lst[count]){\n            ++i;\n  \
    \      }\n        if(lst[count] <= i - count){\n            value = lst[count];\n\
    \        }\n        count = i;\n    }\n    return value;", "    int lst_len =\
    \ lst.size();\n    if(lst_len == 0) return -1;\n    std::map<long, int> m;\n \
    \   for(int i = 0; i < lst_len; i++) {\n        m[lst[i]]++;\n    }\n    long\
    \ res = -1;\n    for(auto& iter : m) {\n        long key = iter.first;\n     \
    \   int count = iter.second;\n        if(key <= count) {\n            res = std::max(res,\
    \ key);\n        }\n    }\n    return res;", "    std::unordered_map<long, long>\
    \ freq;\n    for (long num : lst) {\n        freq[num]++;\n    }\n    for (long\
    \ num : lst) {\n        if (num <= freq[num]) {\n            return num;\n   \
    \     }\n    }\n    return -1;", "    if(lst.size()==0)\n        return -1;\n\
    \    int freq[100000] = {0};\n    for(int i=0;i<lst.size();i++)\n        freq[lst[i]]++;\n\
    \    for(int i=100000;i>=0;i--)\n        if(freq[i] >= i)\n            return\
    \ i;\n    return -1;", "    long ans = -1;\n    for(long i=0;i<lst.size();i++){\n\
    \        long val = lst[i];\n        if(val==0) continue;\n        long f=0;\n\
    \        for(long j=0;j<lst.size();j++){\n            if(lst[j]==val) f++;\n \
    \       }\n        if(f>=val && val>ans) ans = val;\n    }\n    return ans;",
  "    std::map<long, long> freqMap;\n    for(long i=0; i<lst.size(); i++) {\n   \
    \     freqMap[lst[i]]++;\n    }\n    for(long i=lst.size(); i>0; i--) {\n    \
    \    if(freqMap[i] >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;", "    std::map<long,long> mp;\n    long ret = -1;\n    long max = -1;\n\
    \    long val = -1;\n    long count = 0;\n    for(long i = 0; i < lst.size();\
    \ ++i){\n        if(mp.find(lst[i]) == mp.end()){\n            mp[lst[i]] = 1;\n\
    \        }\n        else{\n            mp[lst[i]] += 1;\n        }\n    }\n  \
    \  for(auto &it: mp){\n        if(it.first == it.second && it.first > max){\n\
    \            max = it.first;\n            ret = it.second;\n        }\n    }\n\
    \    return ret;", "  std::map<long, int> freq_map;\n  for (int i=0; i<lst.size();\
    \ i++) {\n    auto el = lst[i];\n    if (freq_map.find(el) == freq_map.end())\
    \ {\n      freq_map[el] = 1;\n    } else {\n      freq_map[el] += 1;\n    }\n\
    \  }\n  std::map<int, std::vector<long>> data;\n  for (auto item : freq_map) {\n\
    \    int freq = item.second;\n    long el = item.first;\n    if (data.find(freq)\
    \ == data.end()) {\n      data[freq] = std::vector<long>();\n    }\n    data[freq].push_back(el);\n\
    \  }\n  std::cout << \"map size: \" << data.size() << std::endl;\n  long val =\
    \ -1;\n  for (auto it = data.rbegin(); it != data.rend(); ++it) {\n    auto el\
    \ = it->second;\n    for (int i=0; i<el.size(); i++) {\n      long item = el[i];\n\
    \      if (item <= it->first) {\n        val = item;\n        break;\n      }\n\
    \    }\n    if (val != -1) {\n      break;\n    }\n  }\n  return val;", "    if(lst.size()==0)\
    \ return -1;\n    std::map<long,long> m;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(m.find(lst[i])==m.end()) m[lst[i]]=1;\n        else m[lst[i]]++;\n\
    \    }\n    std::map<long,long>::reverse_iterator it;\n    for(it=m.rbegin();it!=m.rend();it++){\n\
    \        //std::cout<<\" \"<<it->first<<\" \"<<it->second<<\"\\n\";\n        if(it->first<=it->second)\
    \ return it->first;\n    }\n    return -1;", "\tif (lst.size() == 0)\n\t\treturn\
    \ -1;\n\tstd::unordered_map<long, int> freq;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tfreq[lst[i]]++;\n\t}\n\tlong max = *std::max_element(lst.begin(),\
    \ lst.end());\n\tfor (long i = max; i > 0; i--) {\n\t\tif (freq[i] >= i)\n\t\t\
    \treturn i;\n\t}\n\treturn -1;", "    // optimize a bit by eliminating duplicates\n\
    \    std::unordered_set<long> lookup(lst.begin(), lst.end());\n    long max_val\
    \ = -1;\n    for (auto e : lookup) {\n        int count = std::count(lst.begin(),\
    \ lst.end(), e);\n        if (count >= e && e > max_val) {\n            max_val\
    \ = e;\n        }\n    }\n    return max_val;", "  int max = lst[0];\n  std::sort(lst.begin(),\
    \ lst.end());\n  // loop through numbers\n  for (int i = 1; i < lst.size(); i++)\
    \ {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  // loop through\
    \ list again to count numbers\n  for (int i = 0; i < lst.size(); i++) {\n    int\
    \ count = 0;\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    for (int\
    \ k = 0; k < lst.size(); k++) {\n      if (lst[i] == lst[k]) {\n        count++;\n\
    \      }\n    }\n    if (count >= lst[i]) {\n      return lst[i];\n    }\n  }\n\
    \  return -1;", "  long cnt = 0;\n  long max = -1;\n  int idx = 0;\n  std::sort(lst.begin(),\
    \ lst.end());\n  for(int i = 0; i < lst.size(); i++){\n    cnt = 0;\n    for(int\
    \ j = 0; j < lst.size(); j++){\n      if(lst[i] == lst[j]){\n        cnt++;\n\
    \      }\n    }\n    if(cnt >= lst[i] && max < lst[i]){\n      max = lst[i];\n\
    \    }\n  }\n  return max;", "  long biggest = -1;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    long num = lst[i];\n    if (num == 0) {\n      continue;\n    }\n\
    \    long count = 0;\n    for (long j = 0; j < lst.size(); j++) {\n      if (lst[j]\
    \ == num) {\n        count++;\n      }\n    }\n    if (count >= num && num > biggest)\
    \ {\n      biggest = num;\n    }\n  }\n  return biggest;", "  std::sort(lst.begin(),\
    \ lst.end());\n  int i = lst.size() - 1;\n  while (i >= 0) {\n    if (lst[i] ==\
    \ lst[i - 1]) {\n      i--;\n    } else {\n      if (lst[i] == (lst.size() - i))\
    \ {\n        return lst[i];\n      } else {\n        i--;\n      }\n    }\n  }\n\
    \  return -1;", "  // ...\n  std::map<long, long> counter;\n  for(long i=0; i<lst.size();\
    \ i++){\n    counter[lst[i]]++;\n  }\n  for(long i=lst.size(); i>0; i--){\n  \
    \  if(counter[i] >= i){\n      return i;\n    }\n  }\n  return -1;", "    std::unordered_map<long,long>\
    \ freq;\n    for(long i=0;i<lst.size();i++){\n        if(freq.find(lst[i])==freq.end()){\n\
    \            freq[lst[i]]=1;\n        }\n        else\n            freq[lst[i]]++;\n\
    \    }\n    std::vector<long> arr;\n    for(auto itr=freq.begin();itr!=freq.end();itr++){\n\
    \        if(itr->first<=itr->second)\n            arr.push_back(itr->first);\n\
    \    }\n    if(arr.size()==0)\n        return -1;\n    std::sort(arr.begin(),arr.end());\n\
    \    return arr[arr.size()-1];", "    std::map<long, long> mp;\n    for(long i\
    \ = 0; i < lst.size(); i++)\n        mp[lst[i]]++;\n    for(auto i : mp)\n   \
    \     if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   int freq[lst.size()];\n    for(int i=0;i<lst.size();i++)\n        freq[i]=0;\n\
    \    for(int i=0;i<lst.size();i++)\n        freq[lst[i]]++;\n    for(int i=lst.size()-1;i>=0;i--)\n\
    \        if(freq[i]>=i)\n            return i;\n    return -1;", "  int n = lst.size();\n\
    \  std::map<long, int> m;\n  for(int i = 0; i < n; i++) {\n    m[lst[i]]++;\n\
    \  }\n  for(auto i : m) {\n    if(i.first <= i.second)\n      return i.first;\n\
    \  }\n  return -1;", "    // TODO: Implement search.\n    long res = -1;\n   \
    \ std::sort(lst.begin(), lst.end());\n    std::map<long, long> m;\n    for(auto\
    \ i: lst) {\n        ++m[i];\n    }\n    for(auto i: m) {\n        if(i.first\
    \ <= i.second) {\n            res = i.first;\n        }\n    }\n    return res;",
  "    std::map<long,long> m;\n    for(int i=0;i<lst.size();i++){\n        m[lst[i]]++;\n\
    \    }\n    std::map<long,long>::reverse_iterator it=m.rbegin();\n    while(it!=m.rend()){\n\
    \        if(it->first==it->second)\n            return it->first;\n        it++;\n\
    \    }\n    return -1;", "  long flag = 0;\n  //sort the array\n  sort(lst.begin(),\
    \ lst.end());\n  //display sorted array\n  for(long i = 0; i < lst.size(); i++)\n\
    \    cout << lst[i] << \" \";\n  cout << endl;\n  //loop through array\n  for(long\
    \ i = 0; i < lst.size(); i++){\n    //if element is zero, continue loop\n    if(lst[i]\
    \ == 0)\n      continue;\n    //if element is greater than zero, and \n    //it\
    \ appears that many times in the array, return that number\n    if(lst[i] == count(lst.begin(),\
    \ lst.end(), lst[i]))\n      return lst[i];\n    else\n      flag = -1;\n  }\n\
    \  //if no number appears that many times, return -1\n  return flag;", "    unordered_map<long,long>\
    \ freq;\n    for(auto i:lst) freq[i]++;\n    for(auto i:lst) if(freq[i]>=i) return\
    \ i;\n    return -1;", "  std::map<long, long> myMap;\n  int n = lst.size();\n\
    \  for(int i = 0; i < n; i++)\n  {\n    myMap[lst[i]]++;\n  }\n  for(int i = 0;\
    \ i < n; i++)\n  {\n    if(myMap[lst[i]] >= lst[i])\n    {\n      return lst[i];\n\
    \    }\n  }\n  return -1;", "    // Your code here\n    std::sort(lst.begin(),\
    \ lst.end());\n    int n = lst.size();\n    int ans = -1;\n    for(int i = 0;\
    \ i < n; i++){\n        if(lst[i] > n - i){\n            return -1;\n        }\n\
    \        if(lst[i] == lst[i + lst[i] - 1]){\n            ans = lst[i];\n     \
    \   }\n    }\n    return ans;", "  std::unordered_map<long, long> umap;\n  for(long\
    \ i = 0; i < lst.size(); i++) {\n    if(umap.find(lst[i]) == umap.end())\n   \
    \   umap[lst[i]] = 1;\n    else\n      umap[lst[i]] += 1;\n  }\n  long max = -1;\n\
    \  for(auto itr = umap.begin(); itr != umap.end(); itr++) {\n    if(itr->first\
    \ <= itr->second && itr->first > max)\n      max = itr->first;\n  }\n  return\
    \ max;", "\tstd::sort(lst.begin(), lst.end());\n\tint count = 0;\n\tfor (int i\
    \ = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != lst[i + 1]) {\n\t\t\tif (lst[i]\
    \ == count) {\n\t\t\t\treturn lst[i];\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    auto i = lst.begin();\n    long temp;\n    while(i != lst.end())\
    \ {\n        temp = *i;\n        long count = 0;\n        while(*i == temp) {\n\
    \            i++;\n            count++;\n        }\n        if(count >= temp)\
    \ {\n            return temp;\n        }\n    }\n    return -1;", "\tstd::map<long,\
    \ long> freq;\n\tfor (auto i = lst.begin(); i != lst.end(); i++) {\n\t\tfreq[*i]++;\n\
    \t}\n\tstd::map<long, long>::iterator it;\n\tlong max = -1;\n\tfor (it = freq.begin();\
    \ it != freq.end(); it++) {\n\t\tlong key = it->first;\n\t\tlong val = it->second;\n\
    \t\tif (key <= val && key > max)\n\t\t\tmax = key;\n\t}\n\treturn max;", "   \
    \ long size = lst.size();\n    std::map<long, long> frequency;\n    for(long i\
    \ = 0; i < size; i++) {\n        frequency[lst[i]]++;\n    }\n    long maxFrequency\
    \ = 0;\n    long maxInt = -1;\n    for(long i = 0; i < size; i++) {\n        if(lst[i]\
    \ <= frequency[lst[i]]) {\n            if(frequency[lst[i]] > maxFrequency) {\n\
    \                maxFrequency = frequency[lst[i]];\n                maxInt = lst[i];\n\
    \            }\n        }\n    }\n    return maxInt;", "\tstd::map<long, long>\
    \ result;\n\tfor (auto n : lst) {\n\t\tresult[n]++;\n\t}\n\tlong max = -1;\n\t\
    for (auto n : result) {\n\t\tif (n.first <= n.second && n.first > max) {\n\t\t\
    \tmax = n.first;\n\t\t}\n\t}\n\treturn max;", "  long most_frequent = lst[0];\n\
    \  int  max_freq = 0;\n  std::unordered_map<long, int> freq;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    if (freq.find(lst[i]) == freq.end()) {\n      freq[lst[i]]\
    \ = 1;\n    } else {\n      freq[lst[i]] += 1;\n    }\n    if (freq[lst[i]] >\
    \ max_freq) {\n      max_freq = freq[lst[i]];\n      most_frequent = lst[i];\n\
    \    }\n  }\n  if (max_freq >= most_frequent) {\n    return most_frequent;\n \
    \ } else {\n    return -1;\n  }", "  long ans = 0;\n  std::map<long, long> mp;\n\
    \  for(long i = 0; i < lst.size(); i++)\n  {\n    mp[lst[i]]++;\n  }\n  for(auto\
    \ it = mp.begin(); it != mp.end(); it++)\n  {\n    if(it->first >= it->second)\n\
    \    {\n      ans = std::max(ans, it->first);\n    }\n  }\n  if(ans == 0)\n  {\n\
    \    return -1;\n  }\n  return ans;", "  int n = lst.size();\n  if(n==0) return\
    \ -1;\n  std::map<long,long> hash;\n  for(int i=0;i<n;i++){\n    hash[lst[i]]++;\n\
    \  }\n  long max = -1;\n  long key = -1;\n  std::map<long,long>::iterator itr;\n\
    \  for(itr=hash.begin();itr!=hash.end();itr++){\n    if(itr->first<=itr->second\
    \ && itr->first>max){\n      max = itr->first;\n      key = itr->second;\n   \
    \ }\n  }\n  if(key == -1) return -1;\n  return max;", "  std::unordered_map<long,\
    \ int> m;\n  for (auto it = lst.begin(); it != lst.end(); ++it) {\n    m[*it]++;\n\
    \  }\n  for (auto it = lst.begin(); it != lst.end(); ++it) {\n    if (*it > 0\
    \ && *it <= m[*it]) {\n      return *it;\n    }\n  }\n  return -1;", "  std::sort(lst.begin(),\
    \ lst.end());\n  // std::cout << \"Sorted list : \";\n  // for(int i = 0; i <\
    \ lst.size(); i++) {\n  //   std::cout << lst[i] << \" \";\n  // }\n  // std::cout\
    \ << std::endl;\n  long max = -1;\n  long max_freq = 0;\n  long current_num =\
    \ lst[0];\n  long current_freq = 1;\n  for(int i = 1; i < lst.size(); i++) {\n\
    \    if(lst[i] == current_num) {\n      current_freq++;\n    } else {\n      if(current_num\
    \ > max_freq && current_num <= current_freq) {\n        max = current_num;\n \
    \       max_freq = current_freq;\n      }\n      current_num = lst[i];\n     \
    \ current_freq = 1;\n    }\n  }\n  if(current_num > max_freq && current_num <=\
    \ current_freq) {\n    max = current_num;\n    max_freq = current_freq;\n  }\n\
    \  return max;", "    long value = 0;\n    long frequency = 0;\n    for(int i\
    \ = 0; i < lst.size(); i++){\n        if(lst[i] > value){\n            frequency\
    \ = 1;\n            for(int j = i+1; j < lst.size(); j++){\n                if(lst[i]\
    \ == lst[j]){\n                    frequency++;\n                }\n         \
    \   }\n            if(frequency >= lst[i]){\n                value = lst[i];\n\
    \            }\n        }\n    }\n    if(value > 0){\n        return value;\n\
    \    }\n    return -1;", "  long res = 0;\n  std::map<long, long> m;\n  for (auto\
    \ x : lst) {\n    m[x]++;\n  }\n  for (auto it = m.rbegin(); it != m.rend(); it++)\
    \ {\n    if (it->first >= it->second) return it->first;\n  }\n  return -1;", " \
    \   std::map<long, long> mp;\n    for(long i = 0; i < lst.size(); i++) {\n   \
    \     mp[lst[i]]++;\n    }\n    std::map<long, long>::iterator it;\n    for(it\
    \ = mp.begin(); it != mp.end(); it++) {\n        if(it->first <= it->second) {\n\
    \            return it->first;\n        }\n    }\n    return -1;", "\tif (lst.size()\
    \ == 0) return -1;\n\tmap<long, long> cnt;\n\tfor (long x : lst) cnt[x]++;\n\t\
    for (auto p : cnt) {\n\t\tif (p.first <= p.second) return p.first;\n\t}\n\treturn\
    \ -1;", "    if(lst.size()==0) return -1;\n    std::unordered_map<long, long>\
    \ mymap;\n    for(long i=0; i<lst.size(); i++){\n        mymap[lst[i]]++;\n  \
    \  }\n    long max_value = -1;\n    for(auto m: mymap){\n        if(m.first<=m.second){\n\
    \            max_value = std::max(max_value, m.first);\n        }\n    }\n   \
    \ return max_value;", "    std::map<long,long> m;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        m[lst[i]]++;\n    }\n    int max_freq = 0;\n    int max_key =\
    \ 0;\n    for(auto it = m.begin();it!=m.end();it++)\n    {\n        if(it->first<=it->second)\n\
    \        {\n            if(it->second>max_freq)\n            {\n             \
    \   max_freq = it->second;\n                max_key = it->first;\n           \
    \ }\n        }\n    }\n    if(max_freq>=max_key)\n    {\n        return max_key;\n\
    \    }\n    else\n    {\n        return -1;\n    }", "  // Write your code here\n\
    \  //<map> example:\n  std::map<long, long> freq;\n  for(auto i: lst)\n    freq[i]++;\n\
    \  for(auto it=freq.rbegin(); it!=freq.rend(); it++)\n    if(it->first<=it->second)\n\
    \      return it->first;\n  return -1;", "    std::map<long, long> m;\n    long\
    \ max = -1;\n    for(long i=0; i<lst.size(); i++) {\n        m[lst[i]]++;\n  \
    \      if(m[lst[i]]>=lst[i] && lst[i]>max)\n            max = lst[i];\n    }\n\
    \    return max;", "    std::map<long, long> freq;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long value = 0;\n    long key =\
    \ 0;\n    for(auto x : freq) {\n        if(x.first >= x.second && x.first > value)\
    \ {\n            value = x.first;\n            key = x.second;\n        }\n  \
    \  }\n    if(key == 0) return -1;\n    return value;", "  std::unordered_map<long,\
    \ long> freq;\n  for (long i: lst) {\n    freq[i]++;\n  }\n  for (long i: lst)\
    \ {\n    if (freq[i] >= i) {\n      return i;\n    }\n  }\n  return -1;", "  \
    \  int n = lst.size();\n    int mx = *max_element(lst.begin(), lst.end());\n \
    \   int cnt[mx+1] = {0};\n    for(int i = 0; i < n; i++)\n        cnt[lst[i]]++;\n\
    \    for(int i = mx; i >= 1; i--)\n        if(cnt[i] >= i)\n            return\
    \ i;\n    return -1;", "    std::map<long, long> m;\n    for(int i = 0; i < lst.size();\
    \ i++)\n        m[lst[i]]++;\n    for(auto it = m.rbegin(); it != m.rend(); it++)\n\
    \        if(it->first <= it->second)\n            return it->first;\n    return\
    \ -1;", "    if(lst.size() == 0) return -1;\n    std::unordered_map<long, long>\
    \ hash;\n    for(long n : lst) hash[n]++;\n    long mx = -1;\n    for(long n :\
    \ lst)\n    {\n        if(hash[n] >= n && n > mx) mx = n;\n    }\n    return mx;",
  "  unordered_map<long, int> frequency;\n  for (auto i : lst) {\n    frequency[i]++;\n\
    \  }\n  for (auto i : lst) {\n    if (frequency[i] >= i) {\n      return i;\n\
    \    }\n  }\n  return -1;", "    // sort the list\n    std::sort(lst.begin(),\
    \ lst.end());\n    // iterate through the list\n    int start = 0;\n    int end\
    \ = 0;\n    long max = -1;\n    long current = -1;\n    long maxCount = 0;\n \
    \   long currentCount = 0;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] == lst[i + 1]) {\n            current = lst[i];\n            currentCount++;\n\
    \        } else {\n            if (currentCount >= current) {\n              \
    \  max = current;\n                maxCount = currentCount;\n            }\n \
    \           current = lst[i];\n            currentCount = 1;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::map<long,long> mp;\n\
    \    for(auto i:lst) {\n        mp[i]++;\n    }\n    std::map<long,long>::iterator\
    \ it;\n    long value=-1;\n    for(it=mp.begin();it!=mp.end();it++) {\n      \
    \  if(it->first == it->second) {\n            if(it->first > value) {\n      \
    \          value = it->first;\n            }\n        }\n    }\n    return value;",
  "    std::sort(lst.begin(), lst.end());\n    long prev = 0;\n    long count = 0;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        if(prev == lst[i]) {\n  \
    \          count++;\n        } else {\n            if(lst[i] <= count) {\n   \
    \             return lst[i];\n            }\n            count = 1;\n        \
    \    prev = lst[i];\n        }\n    }\n    return -1;", "  long val = -1;\n  long\
    \ count = 0;\n  std::sort(lst.begin(), lst.end());\n  for(int i = 0; i < lst.size();\
    \ i++){\n    if(val == lst[i]){\n      count++;\n    }\n    else{\n      val =\
    \ lst[i];\n      count = 1;\n    }\n    if(val == count){\n      return val;\n\
    \    }\n  }\n  return -1;", "\tif (lst.size() <= 0)\n\t\treturn -1;\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\t// std::vector<long> fin;\n\tlong count = 1;\n\tfor (int i =\
    \ 1; i < lst.size(); i++) {\n\t\tif (lst[i] == lst[i - 1]) {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\tif (count >= lst[i - 1])\n\t\t\t\treturn lst[i - 1];\n\
    \t\t\tcount = 1;\n\t\t}\n\t}\n\treturn -1;", "\tstd::map<long, int> temp;\n\t\
    for (long i = 0; i < lst.size(); i++) {\n\t\ttemp[lst[i]]++;\n\t}\n\tstd::map<long,\
    \ int>::iterator itr;\n\tfor (itr = temp.begin(); itr != temp.end(); itr++) {\n\
    \t\tif (itr->first == itr->second) {\n\t\t\treturn itr->first;\n\t\t}\n\t}\n\t\
    return -1;", "\tstd::unordered_map<long,long>m;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tm[lst[i]]++;\n\t}\n\tstd::unordered_map<long,long>::iterator itr;\n\t\
    std::unordered_map<long,long>::iterator itr1;\n\tfor(itr=m.begin();itr!=m.end();itr++)\n\
    \t{\n\t\tlong p=itr->first;\n\t\t// std::cout<<itr->first<<\" \"<<itr->second<<std::endl;\n\
    \t\tfor(itr1=m.begin();itr1!=m.end();itr1++)\n\t\t{\n\t\t\tif(itr1->first>p)\n\
    \t\t\t{\n\t\t\t\tif(itr1->second>=p)\n\t\t\t\t\treturn itr1->first;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn -1;", "\tif (lst.size() == 0)\n\t\treturn -1;\n\tlong ans\
    \ = -1;\n\t// std::unordered_map<long, std::vector<long>> mp;\n\tstd::map<long,\
    \ long> mp;\n\tfor (auto i : lst) {\n\t\t// mp[i].push_back(i);\n\t\tmp[i]++;\n\
    \t}\n\tfor (auto &it : mp) {\n\t\tif (it.first <= it.second) {\n\t\t\tans = std::max(ans,\
    \ it.first);\n\t\t}\n\t}\n\treturn ans;", "  long max = -1;\n  std::map<long,\
    \ int> freq_list;\n  for (auto i : lst) {\n    freq_list[i] += 1;\n  }\n  for\
    \ (auto i : freq_list) {\n    if (i.first <= i.second && i.first > max) {\n  \
    \    max = i.first;\n    }\n  }\n  return max;", "  long result = -1;\n  long\
    \ count = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0;\
    \ j < lst.size(); j++) {\n      if (lst[i] == lst[j]) {\n        count++;\n  \
    \    }\n    }\n    if (count >= lst[i] && lst[i] > result) {\n      result = lst[i];\n\
    \    }\n    count = 0;\n  }\n  return result;", "    // Write your code here\n\
    \    std::map<long, int> freq;\n    for(auto i: lst) freq[i]++;\n    for(auto\
    \ i: freq) if(i.first >= i.second) return i.first;\n    return -1;", "    std::map<long,\
    \ long> mymap;\n    std::map<long, long>::iterator it;\n    std::vector<long>\
    \ vect;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    for(int i = 0; i < lst.size(); i++)\n    {\n        mymap[lst[i]]++;\n  \
    \  }\n    for(it = mymap.begin(); it != mymap.end(); it++)\n    {\n        vect.push_back(it->first);\n\
    \        vect.push_back(it->second);\n    }\n    int i = 0;\n    while(i < vect.size())\n\
    \    {\n        if(vect[i] <= vect[i+1])\n        {\n            res.push_back(vect[i]);\n\
    \        }\n        i = i + 2;\n    }\n    if(res.size() == 0)\n    {\n      \
    \  return -1;\n    }\n    else\n    {\n        return res[res.size()-1];\n   \
    \ }\n    ", "    std::map<long, long> m;\n    long max = 0;\n    for(auto x :\
    \ lst)\n    {\n        if(m.find(x) == m.end())\n        {\n            m[x] =\
    \ 1;\n        }\n        else\n        {\n            m[x] += 1;\n        }\n\
    \        if(m[x] >= x && x > max)\n        {\n            max = x;\n        }\n\
    \    }\n    if(max > 0)\n    {\n        return max;\n    }\n    return -1;", " \
    \   std::map<long, long> count;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        count[lst[i]]++;\n    }\n    for (auto it = count.rbegin(); it != count.rend();\
    \ it++) {\n        if (it->first <= it->second) return it->first;\n    }\n   \
    \ return -1;", "    std::map<long, long> m;\n    for(long i=0; i<lst.size(); i++)\n\
    \        m[lst[i]]++;\n    std::vector<long> val, freq;\n    for(auto it=m.begin();\
    \ it!=m.end(); it++)\n    {\n        val.push_back(it->first);\n        freq.push_back(it->second);\n\
    \    }\n    long maxfreq=0;\n    long n=val.size();\n    for(long i=0; i<n; i++)\n\
    \    {\n        if(freq[i]>=val[i] && freq[i]>maxfreq)\n            maxfreq=freq[i];\n\
    \    }\n    if(maxfreq==0)\n        return -1;\n    for(long i=0; i<n; i++)\n\
    \    {\n        if(freq[i]==maxfreq)\n            return val[i];\n    }\n    return\
    \ -1;", "\tstd::map<long, int> freq;\n\tfor (auto i: lst) freq[i]++;\n\tfor (auto\
    \ i: freq)\n\t\tif (i.first <= i.second) return i.first;\n\treturn -1;", "  std::map<long,long>\
    \ map;\n  for(long i : lst) {\n    if(map.find(i) == map.end())\n      map[i]\
    \ = 1;\n    else\n      map[i]++;\n  }\n  for(long i = 1; i < lst.size(); i++)\
    \ {\n    if(map.find(i) != map.end() && map[i] >= i)\n      return i;\n  }\n \
    \ return -1;", "  std::map<long,long> dict;\n  for(long i = 0; i < lst.size();\
    \ i++){\n    dict[lst[i]]++;\n  }\n  long key = -1;\n  long temp = 0;\n  for(auto\
    \ elem : dict){\n    if(elem.first >= elem.second && elem.first > temp){\n   \
    \   temp = elem.first;\n      key = elem.first;\n    }\n  }\n  return key;", " \
    \ // your code here\n  if(lst.size()==0) return -1;\n  if(lst.size()==1){\n  \
    \  if(lst[0]==1) return 1;\n    else return -1;\n  }\n  long temp = -1;\n  std::sort(lst.begin(),lst.end());\n\
    \  for(int i=1;i<lst.size();i++){\n    if(lst[i]==lst[i-1]){\n      temp = lst[i];\n\
    \      i++;\n      while(lst[i]==temp){\n        i++;\n      }\n      if(i-2-lst.begin()+1\
    \ >= temp) return temp;\n    }\n  }\n  return -1;", "    unordered_map<long, int>\
    \ freq;\n    for(auto i : lst) {\n        freq[i]++;\n    }\n    long ret;\n \
    \   for(auto j : freq) {\n        if(j.first <= j.second) {\n            ret =\
    \ j.first;\n        }\n    }\n    return ret;", "    int size = lst.size();\n\
    \    if(size == 0) return -1;\n    std::sort(lst.begin(), lst.end());\n    int\
    \ frequency = 1;\n    for(int i = 0; i < size; i++){\n        if(lst[i] != lst[i\
    \ + 1]){\n            if(frequency >= lst[i]) return lst[i];\n            frequency\
    \ = 1;\n        } else{\n            frequency++;\n        }\n    }\n    return\
    \ -1;", "    auto max = *std::max_element(lst.begin(), lst.end());\n    if (max\
    \ == 0) return -1;\n    for (auto e : lst) {\n        if (std::count(lst.begin(),\
    \ lst.end(), e) >= e) {\n            max = e;\n        }\n    }\n    return max\
    \ == 0 ? -1 : max;", "\tint frequency = 0;\n\tint frequencyList = 0;\n\tstd::unordered_map<long,\
    \ long> map;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (map.find(lst[i])\
    \ == map.end()) {\n\t\t\tmap[lst[i]] = 1;\n\t\t}\n\t\telse {\n\t\t\tmap[lst[i]]++;\n\
    \t\t}\n\t}\n\tstd::unordered_map<long, long>::iterator itr;\n\tfor (itr = map.begin();\
    \ itr != map.end(); itr++) {\n\t\tif (itr->first == itr->second) {\n\t\t\tfrequency\
    \ = itr->first;\n\t\t\tfrequencyList = itr->second;\n\t\t}\n\t}\n\tif (frequencyList\
    \ == 0) {\n\t\treturn -1;\n\t}\n\treturn frequency;", "    std::map<long, int>\
    \ frequency;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        frequency[lst[i]]++;\n\
    \    }\n    for (int i = lst.size() - 1; i >= 0; i--)\n    {\n        if (frequency[lst[i]]\
    \ >= lst[i]) return lst[i];\n    }\n    return -1;", "  long ans = -1;\n  long\
    \ n = lst.size();\n  unordered_map<long, long> m;\n  for(long i = 0; i < n; i++)\
    \ {\n    m[lst[i]]++;\n  }\n  for(long i = 0; i < n; i++) {\n    if(m[lst[i]]\
    \ >= lst[i] && lst[i] > ans) {\n      ans = lst[i];\n    }\n  }\n  return ans;",
  "    std::map<long,long> m;\n    for(long i=0;i<lst.size();i++)\n        m[lst[i]]++;\n\
    \    std::map<long,long>::iterator it=m.end();\n    it--;\n    while(it!=m.begin()){\n\
    \        if(it->first<=it->second)\n            return it->first;\n        it--;\n\
    \    }\n    if(it->first<=it->second)\n        return it->first;\n    return -1;",
  "  int n = lst.size();\n  if(n == 0)\n  {\n    return -1;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int  i = 0;\n  while(i < n)\n  {\n    if(lst[i] == lst[i+1])\n\
    \    {\n      i = i + 2;\n    }\n    else\n    {\n      break;\n    }\n  }\n \
    \ if(i == n)\n  {\n    return -1;\n  }\n  if(lst[i] >= i+1)\n  {\n    return lst[i];\n\
    \  }\n  else\n  {\n    return -1;\n  }", "    std::map<long, long> freq;\n   \
    \ for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n   \
    \ long ans = -1;\n    for(long i = 1; i < freq.size(); i++) {\n        if(freq[i]\
    \ >= i) {\n            ans = i;\n        }\n    }\n    return ans;", "  std::map<long,\
    \ long> freq;\n  for (auto elem : lst) {\n    freq[elem]++;\n  }\n  for (auto\
    \ elem : lst) {\n    if (elem > 0 && freq[elem] >= elem) {\n      return elem;\n\
    \    }\n  }\n  return -1;", '    // your code here', "\tint cnt = 0;\n\tlong result\
    \ = -1;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] > 0) {\n\t\t\tif (lst[i] == lst[i + 1]) {\n\t\t\t\tcnt++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tcnt++;\n\t\t\t\tif (cnt >= lst[i]) {\n\t\t\t\t\t\
    result = lst[i];\n\t\t\t\t}\n\t\t\t\tcnt = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
  "    std::map<long, int> frequency_map;\n    std::for_each(lst.begin(), lst.end(),\
    \ \n                  [&frequency_map](const long &x) { frequency_map[x]++; });\n\
    \    std::map<long, int>::iterator it = frequency_map.end();\n    while (it !=\
    \ frequency_map.begin()) {\n        it--;\n        long key = it->first;\n   \
    \     int value = it->second;\n        if (key <= value) {\n            return\
    \ key;\n        }\n    }\n    return -1;", "\t// Sort the list\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\t// Count the frequency of each element\n\tstd::map<long, int>\
    \ freq;\n\tfor (int i = 0; i < lst.size(); i++)\n\t\tfreq[lst[i]]++;\n\t// Find\
    \ the greatest element that has a frequency greater than or equal to the value\
    \ of the element itself\n\tfor (int i = lst.size() - 1; i >= 0; i--)\n\t\tif (freq[lst[i]]\
    \ >= lst[i])\n\t\t\treturn lst[i];\n\t// Return -1 if no such value exist\n\t\
    return -1;", "    std::map<long,long> frequency;\n    for(std::vector<long>::iterator\
    \ it=lst.begin();it!=lst.end();it++){\n        frequency[*it]++;\n    }\n    for(auto\
    \ i : frequency){\n        if(i.first <= i.second){\n            return i.first;\n\
    \        }\n    }\n    return -1;", "  int freq[101] = {0};\n  for(int i=0;i<lst.size();i++)\
    \ {\n    freq[lst[i]]++;\n  }\n  for(int i=100;i>=1;i--) {\n    if(freq[i] >=\
    \ i) {\n      return i;\n    }\n  }\n  return -1;", "    if(lst.size() == 0)\n\
    \        return -1;\n    std::sort(lst.begin(), lst.end());\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        int index = i;\n        if(index + lst[i] -\
    \ 1 > lst.size() - 1)\n            continue;\n        for(int j = 0; j < lst[i];\
    \ j++) {\n            if(lst[index] != lst[index + j])\n                break;\n\
    \            if(j == lst[i] - 1)\n                return lst[i];\n        }\n\
    \    }\n    return -1;", "    if(lst.size() == 0)\n        return -1;\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::map<long, int> ans;\n    int count = 1;\n    for(int i\
    \ = 1; i < lst.size(); i++){\n        if(lst[i] == lst[i-1])\n            count++;\n\
    \        else{\n            ans[lst[i-1]] = count;\n            count = 1;\n \
    \       }\n    }\n    ans[lst[lst.size()-1]] = count;\n    for(auto it = ans.begin();\
    \ it != ans.end(); it++){\n        if(it->first >= it->second)\n            return\
    \ it->first;\n    }\n    return -1;", "  std::sort(lst.begin(), lst.end());\n\
    \  long c = 1;\n  for(int i = 1; i < lst.size(); i++) {\n    if(lst[i] == lst[i-1])\
    \ {\n      c++;\n    } else {\n      if(c >= lst[i-1]) {\n        return lst[i-1];\n\
    \      }\n      c = 1;\n    }\n  }\n  if(c >= lst[lst.size()-1]) {\n    return\
    \ lst[lst.size()-1];\n  }\n  return -1;", "  for(int i = lst.size() - 1; i >=\
    \ 0; i--) {\n    if(std::count(lst.begin(), lst.end(), lst[i]) >= lst[i]) {\n\
    \      return lst[i];\n    }\n  }\n  return -1;", "  std::unordered_map<long,long>\
    \ um;\n  // map to store frequency of each element of lst\n  for(auto elem:lst)\n\
    \    um[elem]++;\n  // iterate over the lst once again and return the element\
    \ if it's frequency is greater than or equal to it's value\n  for(auto elem:lst)\n\
    \    if(um[elem]>=elem)\n      return elem;\n  // if no such element exists, return\
    \ -1\n  return -1;", "  //your code here\n  std::sort(lst.begin(), lst.end());\n\
    \  long count = std::count(lst.begin(), lst.end(), lst[0]);\n  std::vector<long>::iterator\
    \ it;\n  for(it = lst.begin(); it < lst.end(); it++){\n    if(count >= *it){\n\
    \      return *it;\n    }\n    if(*it == *(it+1)){\n      count++;\n    }\n  \
    \  else{\n      count = std::count(it, lst.end(), *it);\n    }\n  }\n  return\
    \ -1;", "    sort(lst.begin(), lst.end());\n    int n = lst.size();\n    int index\
    \ = n - 1;\n    int count = 1;\n    int prev = lst[index];\n    while(index >\
    \ 0) {\n        if(lst[index] == lst[index - 1]) {\n            count++;\n   \
    \     } else {\n            if(lst[index] > count)\n                count = 1;\n\
    \            else\n                return lst[index];\n        }\n        index--;\n\
    \    }\n    if(lst[index] > count)\n        return -1;\n    else\n        return\
    \ lst[index];", "  long ans = -1;\n  std::map<long,long> m;\n  for(long i=0;i<lst.size();i++){\n\
    \    if(m.find(lst[i]) == m.end()){\n      m[lst[i]] = 1;\n    }\n    else{\n\
    \      m[lst[i]] = m[lst[i]] + 1;\n    }\n  }\n  for(long i=0;i<lst.size();i++){\n\
    \    if(m[lst[i]] >= lst[i]){\n      ans = lst[i];\n    }\n  }\n  return ans;",
  "    if(lst.size()==0) return -1;\n    std::map<long,long> m;\n    for(int i=0;i<lst.size();i++){\n\
    \        m[lst[i]]++;\n    }\n    long ans=0;\n    for(auto it:m){\n        if(it.first>it.second){\n\
    \            continue;\n        }\n        else{\n            ans=std::max(ans,it.first);\n\
    \        }\n    }\n    if(ans==0) return -1;\n    return ans;", "  using std::map;\n\
    \  using std::max;\n  using std::pair;\n  using std::vector;\n  map<long, long>\
    \ d;\n  for (auto x : lst) {\n    d[x]++;\n  }\n  vector<pair<long, long>> l(d.begin(),\
    \ d.end());\n  std::sort(l.begin(), l.end(), [](pair<long, long> a, pair<long,\
    \ long> b) {\n    return a.second > b.second;\n  });\n  for (auto x : l) {\n \
    \   if (x.first <= x.second) {\n      return x.first;\n    }\n  }\n  return -1;",
  "    std::map<long,long> m;\n    for(auto x:lst)\n        m[x]++;\n    for(auto\
    \ x:lst)\n        if(m[x]>=x)\n            return x;\n    return -1;", "  // your\
    \ code here...\n  std::map<long, long> m;\n  for(auto i: lst)\n  {\n    m[i]++;\n\
    \  }\n  auto v = *std::max_element(m.begin(), m.end(), [](auto &a, auto &b){return\
    \ a.second<b.second;});\n  return (v.first<=v.second)?v.first:-1;", "    long\
    \ val;\n    std::map<long,long> m;\n    if(lst.size() == 0) return -1;\n    if(lst.size()\
    \ == 1) return -1;\n    if(lst.size() == 2) return -1;\n    if(lst.size() == 3)\
    \ return -1;\n    for(int i = 0; i < lst.size(); i++){\n        m[lst[i]]++;\n\
    \    }\n    for(auto it = m.begin(); it != m.end(); it++){\n        if(it->first\
    \ == it->second){\n            val = it->first;\n        }\n    }\n    if(val\
    \ == 0) return -1;\n    return val;", "    std::unordered_map<long,long> data;\n\
    \    for(int i=0;i<lst.size();i++){\n        data[lst[i]]++;\n    }\n    long\
    \ max = -1;\n    for(auto d : data){\n        if(d.first <= d.second && d.first\
    \ > max){\n            max = d.first;\n        }\n    }\n    return max;", " \
    \ if(lst.size()==0)\n  return -1;\n  int i,j;\n  std::map<long,long> d;\n  for(i=0;i<lst.size();i++)\n\
    \  {\n    if(d.find(lst[i])!=d.end())\n    d[lst[i]]++;\n    else\n    d[lst[i]]=1;\n\
    \  }\n  std::map<long,long> :: iterator it;\n  int l=-1;\n  for(it=d.begin();it!=d.end();it++)\n\
    \  {\n    if(it->first==it->second)\n    {\n      if(it->first>l)\n      l=it->first;\n\
    \    }\n  }\n  return l;", "    long greatest = -1;\n    std::map<long, int> count;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        count[lst[i]]++;\n    }\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (count[lst[i]] >= lst[i]\
    \ && lst[i] > greatest) {\n            greatest = lst[i];\n        }\n    }\n\
    \    return greatest;", "    std::map<long,long> counts;\n    for(long i = 0;\
    \ i < lst.size(); i++){\n        counts[lst[i]] += 1;\n    }\n    for(auto it\
    \ = counts.rbegin(); it != counts.rend(); it++){\n        if(it->first <= it->second){\n\
    \            return it->first;\n        }\n    }\n    return -1;", "    long max_freq\
    \ = -1;\n    for(int i = 0; i < lst.size(); i++) {\n        max_freq = std::max(max_freq,\
    \ lst[i]);\n    }\n    std::vector<long> freq(max_freq+1, 0);\n    for(int i =\
    \ 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    for(int i = 1;\
    \ i < freq.size(); i++) {\n        if(freq[i] >= i) {\n            return i;\n\
    \        }\n    }\n    return -1;", "    map<long, long> elements;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        elements[lst[i]]++;\n    }\n    long\
    \ max_key = 0;\n    for(auto &el : elements) {\n        if(el.first > max_key\
    \ && el.second >= el.first)\n            max_key = el.first;\n    }\n    return\
    \ max_key > 0 ? max_key : -1;", "  std::map<long,long> frequencies;\n  for(auto\
    \ i:lst) frequencies[i]++;\n  long largest = -1;\n  for(auto i:frequencies) {\n\
    \    if(i.first <= i.second && i.first > largest) largest = i.first;\n  }\n  return\
    \ largest;", "    std::map<long, long> mp;\n    for(auto i : lst)\n        mp[i]++;\n\
    \    std::map<long, long> result;\n    for(auto i : mp)\n        if(i.second >=\
    \ i.first)\n            result[i.second] = i.first;\n    if(result.size() != 0)\n\
    \        return result.rbegin()->second;\n    return -1;", "  std::map<long, long>\
    \ counter;\n  for (auto i : lst)\n    counter[i]++;\n  long maxi = -1;\n  for\
    \ (auto i : counter)\n    if (i.first <= i.second)\n      maxi = std::max(maxi,\
    \ i.first);\n  return maxi;", "    //your code here\n    std::map<long,long> mp;\n\
    \    for(auto x:lst)\n        mp[x]++;\n    for(auto x:mp)\n        if(x.first<=x.second)\n\
    \            return x.first;\n    return -1;", "  std::map<long, long> m;\n  for\
    \ (long i=0; i<lst.size(); i++) {\n    if (m.find(lst[i]) == m.end()) {\n    \
    \  m[lst[i]] = 1;\n    } else {\n      m[lst[i]]++;\n    }\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (long i=lst.size()-1; i>=0; i--) {\n    if (m[lst[i]] >=\
    \ lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;", "    int freq;\n\
    \    int value;\n    std::map<int, int> map;\n    int i = 0;\n    while(i<lst.size()){\n\
    \        map[lst[i]] = 0;\n        i++;\n    }\n    i = 0;\n    while(i<lst.size()){\n\
    \        map[lst[i]]++;\n        i++;\n    }\n    for(auto x: map){\n        if(x.first\
    \ >= x.second){\n            return -1;\n        }\n        if(x.first <= x.second){\n\
    \            value = x.first;\n            freq = x.second;\n        }\n    }\n\
    \    return value;", "    // Your code here...\n    int max = -1;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n      if(lst[i] > max) max = lst[i];\n    }\n\
    \    std::cout << \"max: \" << max << \"\\n\";\n    int arr[max];\n    for(int\
    \ i = 0; i < max; i++){\n      arr[i] = 0;\n    }\n    for(int i = 0; i < lst.size();\
    \ i++){\n      arr[lst[i] - 1]++;\n    }\n    for(int i = 0; i < max; i++){\n\
    \      if(arr[i] >= i + 1) return i + 1;\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(long i=0; i<lst.size(); i++) {\n        m[lst[i]]++;\n   \
    \ }\n    for(auto it=m.rbegin(); it!=m.rend(); it++) {\n        if(it->first<=it->second)\n\
    \            return it->first;\n    }\n    return -1;", "    if(lst.size() ==\
    \ 0)\n        return -1;\n    int hash[10000] = {0};\n    for(int i = 0; i < lst.size();\
    \ i++)\n        hash[lst[i]]++;\n    int max = lst[0];\n    for(int i = 0; i <\
    \ lst.size(); i++)\n        if(hash[lst[i]] >= lst[i] && lst[i] > max)\n     \
    \       max = lst[i];\n    if(max == lst[0])\n        return -1;\n    return max;",
  "  long mx = -1;\n  for(int i = 0; i < lst.size(); i++) {\n    if(lst[i] > mx) mx\
    \ = lst[i];\n  }\n  int freq[mx+1];\n  for(int i = 0; i <= mx; i++) {\n    freq[i]\
    \ = 0;\n  }\n  for(int i = 0; i < lst.size(); i++) {\n    freq[lst[i]]++;\n  }\n\
    \  for(int i = 1; i <= mx; i++) {\n    if(freq[i] >= i) {\n      return i;\n \
    \   }\n  }\n  return -1;", "  if(lst.size() == 0)\n    return -1;\n  std::map<long,\
    \ long> freq;\n  std::vector<long> vec;\n  for(int i = 0; i < lst.size(); i++)\n\
    \  {\n    freq[lst[i]]++;\n    if(freq[lst[i]] == lst[i])\n      vec.push_back(lst[i]);\n\
    \  }\n  if(vec.size() == 0)\n    return -1;\n  long max = 0;\n  for(int i = 0;\
    \ i < vec.size(); i++)\n  {\n    if(vec[i] > max)\n      max = vec[i];\n  }\n\
    \  return max;", "  std::map<long, long> lookup;\n  for (auto element : lst) {\n\
    \    lookup[element]++;\n  }\n  for (auto element : lst) {\n    if (element <=\
    \ lookup[element]) {\n      return element;\n    }\n  }\n  return -1;", "  //\
    \ ...\n  std::map<long, long> count;\n  for(auto i: lst)\n    count[i] += 1;\n\
    \  for(auto it: count)\n    if(it.first <= it.second)\n      return it.first;\n\
    \  return -1;", "    std::map<long, long> freq_map;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        freq_map[lst[i]]++;\n    }\n    long ans = -1;\n\
    \    for (auto item: freq_map) {\n        if (item.first == item.second) {\n \
    \           ans = std::max(ans, item.first);\n        }\n    }\n    return ans;",
  "    if(lst.size() < 1) return -1;\n    std::unordered_map<long, int> m;\n    std::unordered_map<long,\
    \ int>::iterator it;\n    for(int i = 0; i < lst.size(); i++) {\n        it =\
    \ m.find(lst[i]);\n        if(it == m.end()) m.insert(std::make_pair(lst[i], 1));\n\
    \        else it->second++;\n    }\n    it = m.find(1);\n    if(it != m.end())\
    \ {\n        if(it->second >= 1) return 1;\n    }\n    long key = -1;\n    for(it\
    \ = m.begin(); it != m.end(); it++) {\n        if(it->first > key && it->second\
    \ >= it->first) key = it->first;\n    }\n    return key;", "  int freq = 0;\n\
    \  std::map<long, int> freqMap;\n  for (long i : lst) {\n    freqMap[i]++;\n \
    \ }\n  for (auto it = freqMap.begin(); it != freqMap.end(); it++) {\n    if (it->first\
    \ <= it->second) {\n      freq = it->first;\n    }\n  }\n  if (freq == 0) return\
    \ -1;\n  return freq;", "    std::unordered_map<long, int> myMap;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        myMap[lst[i]]++;\n    }\n    std::vector<long>\
    \ newArray;\n    for(auto i : myMap) {\n        if(i.second >= i.first) {\n  \
    \          newArray.push_back(i.first);\n        }\n    }\n    if(newArray.size()\
    \ == 0) return -1;\n    long retVal = 0;\n    for(int i = 0; i < newArray.size();\
    \ i++) {\n        if(newArray[i] > retVal) {\n            retVal = newArray[i];\n\
    \        }\n    }\n    return retVal;", "    if(lst.size() == 0) return -1;\n\
    \    std::map<long, long> freq;\n    for(auto n : lst) freq[n]++;\n    long max\
    \ = 0;\n    for(auto entry : freq) {\n        if(entry.first <= entry.second &&\
    \ entry.first > max) max = entry.first;\n    }\n    return max == 0 ? -1 : max;",
  "    unordered_map<long, int> mp;\n    for(int i=0; i<lst.size(); i++)\n       \
    \ mp[lst[i]]++;\n    for(int i=lst.size(); i>=1; i--)\n        if(mp[i] >= i)\n\
    \            return i;\n    return -1;", "    std::map<long, long> m;\n    std::map<long,\
    \ long>::iterator it;\n    std::map<long, long>::reverse_iterator rit;\n    for(long\
    \ i=0; i<lst.size(); i++)\n    {\n        it = m.find(lst[i]);\n        if(it\
    \ != m.end())\n        {\n            it->second++;\n        }\n        else\n\
    \        {\n            m.insert(std::pair<long, long>(lst[i], 1));\n        }\n\
    \    }\n    rit = m.rbegin();\n    while(rit != m.rend())\n    {\n        if(rit->first\
    \ == rit->second)\n        {\n            return rit->first;\n        }\n    \
    \    else\n        {\n            rit++;\n        }\n    }\n    return -1;", " \
    \ map<long,long> myMap;\n  map<long,long>::iterator it;\n  for(long i = 0; i <\
    \ lst.size(); i++){\n    if(myMap.find(lst[i]) == myMap.end()){\n      myMap.insert(pair<long,long>(lst[i],1));\n\
    \    }\n    else{\n      myMap[lst[i]] += 1;\n    }\n  }\n  //now iterate through\
    \ the list and see if a number exists that is the same value\n  //as the freq\
    \ of a number\n  long greatest = -1;\n  long curr_greatest = -1;\n  long count\
    \ = 0;\n  for(it = myMap.begin(); it != myMap.end(); it++){\n    if(it->first\
    \ == it->second){\n      if(it->first > curr_greatest){\n        curr_greatest\
    \ = it->first;\n      }\n      count++;\n    }\n  }\n  if(count != 0){\n    greatest\
    \ = curr_greatest;\n  }\n  return greatest;", "    std::sort(lst.begin(), lst.end());\n\
    \    auto last = std::unique(lst.begin(), lst.end());\n    lst.erase(last, lst.end());\n\
    \    for (int i = lst.size() - 1; i >= 0; i--) {\n        if (lst[i] >= std::count(lst.begin(),\
    \ lst.end(), lst[i])) {\n            return lst[i];\n        }\n    }\n    return\
    \ -1;", "    std::map<long, long> freq;\n    for(int i = 0; i < lst.size(); i++)\n\
    \        freq[lst[i]]++;\n    for(int i = lst.size(); i > 0; i--)\n        if(freq[i]\
    \ >= i)\n            return i;\n    return -1;", "  std::map<long, long> dict;\n\
    \  std::map<long, long>::iterator m_it;\n  long max = -1;\n  for(long i = 0; i\
    \ < lst.size(); i++) {\n    m_it = dict.find(lst[i]);\n    if(m_it == dict.end())\
    \ {\n      dict.insert(std::pair<long, long>(lst[i], 1));\n    } else {\n    \
    \  m_it->second++;\n    }\n  }\n  for(m_it = dict.begin(); m_it != dict.end();\
    \ m_it++) {\n    if(m_it->first <= m_it->second && m_it->first > max) {\n    \
    \  max = m_it->first;\n    }\n  }\n  return max;", "    std::unordered_map<long,\
    \ int> map;\n    for(long element : lst)\n    {\n        map[element]++;\n   \
    \ }\n    for(long element : lst)\n    {\n        if(map[element] >= element)\n\
    \        {\n            return element;\n        }\n    }\n    return -1;", "\t\
    std::unordered_map<long, long> m;\n\tstd::vector<long> freq;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tlong count = ++m[lst[i]];\n\t\tfreq.push_back(count);\n\
    \t}\n\tsort(freq.begin(), freq.end());\n\tstd::unordered_map<long, long>::iterator\
    \ it;\n\tfor (it = m.begin(); it != m.end(); it++) {\n\t\tif (it->first == it->second)\n\
    \t\t\treturn it->first;\n\t}\n\treturn -1;", "    std::sort(lst.begin(), lst.end());\n\
    \    int freq = 0;\n    int count = 0;\n    int prev = -1;\n    int max = -1;\n\
    \    for(int x : lst){\n        if(x != prev){\n            freq = count;\n  \
    \          count = 1;\n            prev = x;\n        }else{\n            count++;\n\
    \        }\n        if(x > freq){\n            max = std::max(max, x);\n     \
    \   }\n    }\n    return max;", "  std::map<long,long> map;\n  for(long num :\
    \ lst){\n    map[num]++;\n  }\n  std::vector<long> list(map.begin(),map.end());\n\
    \  for(long i = list.size()-1; i >= 0; i--){\n    if(list[i] >= i+1){\n      return\
    \ i+1;\n    }\n  }\n  return -1;", "\tstd::map<long, long> list;\n\tfor (int i\
    \ = 0; i < lst.size(); i++) {\n\t\tlist[lst[i]]++;\n\t}\n\tstd::map<long, long>::iterator\
    \ it;\n\tfor (it = list.begin(); it != list.end(); it++) {\n\t\tif (it->first\
    \ <= it->second) {\n\t\t\treturn it->first;\n\t\t}\n\t}\n\treturn -1;", "\tstd::map<long,long>\
    \ freq;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tfreq[lst[i]]++;\n\t}\n\tlong\
    \ k=-1;\n\tfor(int i=1;i<=lst.size();i++)\n\t{\n\t\tif(freq[i]>=i)\n\t\t{\n\t\t\
    \tk=i;\n\t\t}\n\t}\n\treturn k;", "    long result = -1;\n    std::map<long,long>\
    \ count;\n    for(int i = 0; i < lst.size(); i++){\n        if(count.find(lst[i])\
    \ != count.end()){\n            count[lst[i]]++;\n        }else{\n           \
    \ count[lst[i]] = 1;\n        }\n    }\n    for(auto const& [key, val] : count){\n\
    \        if(val >= key){\n            result = key;\n        }\n    }\n    return\
    \ result;", "  long max = 0;\n  std::unordered_map<long, long> map;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    map[lst[i]]++;\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (int i = max; i > 0; i--) {\n    if (map[i]\
    \ >= i) {\n      return i;\n    }\n  }\n  return -1;", "    std::unordered_map<long,\
    \ int> freq;\n    for (auto x : lst) {\n        freq[x]++;\n    }\n    long best\
    \ = -1;\n    for (auto p : freq) {\n        if (p.first >= p.second && p.first\
    \ > best) {\n            best = p.first;\n        }\n    }\n    return best;",
  "    if(lst.size() == 0)\n        return -1;\n    else\n    {\n        int i, j;\n\
    \        std::sort(lst.begin(), lst.end());\n        int n = lst.size();\n   \
    \     int max = lst[n-1];\n        int freq[max+1];\n        memset(freq, 0, sizeof(freq));\n\
    \        for(i = 0; i < n; i++)\n        {\n            freq[lst[i]]++;\n    \
    \    }\n        for(i = max; i >= 1; i--)\n        {\n            if(freq[i] >=\
    \ i)\n                return i;\n        }\n        return -1;\n    }", '    //
    your code here', "  std::map<long,long> freq;\n  for(long i=0;i<lst.size();i++){\n\
    \    if(freq.find(lst[i])==freq.end()){\n      freq[lst[i]]=1;\n    }\n    else{\n\
    \      freq[lst[i]]++;\n    }\n  }\n  for(long i=lst.size()-1;i>=0;i--){\n   \
    \ if(freq[lst[i]]>=lst[i]){\n      return lst[i];\n    }\n  }\n  return -1;",
  "  int res = -1;\n  std::unordered_map<long, int> map;\n  for (long x : lst) {\n\
    \    map[x]++;\n  }\n  for (long x : lst) {\n    if (map[x] >= x && x > res) {\n\
    \      res = x;\n    }\n  }\n  return res;", "  if(lst.size() == 0) return -1;\n\
    \  std::map<long, int> vals;\n  for(auto i: lst) {\n    vals[i]++;\n  }\n  for(auto\
    \ i: vals) {\n    if(i.first <= i.second) {\n      return i.first;\n    }\n  }\n\
    \  return -1;", "\tint len = lst.size();\n\tstd::vector<long> temp(len, -1);\n\
    \tfor (int i = 0; i < len; i++) {\n\t\ttemp[i] = lst[i];\n\t}\n\tstd::sort(temp.begin(),\
    \ temp.end());\n\t//For Debugging\n\t// for (int i = 0; i < len; i++) {\n\t//\
    \ \tstd::cout << temp[i] << \" \";\n\t// }\n\tstd::cout << std::endl;\n\t//End\
    \ For Debugging\n\tint current_count = 1;\n\tfor (int i = 1; i < len; i++) {\n\
    \t\tif (temp[i] == temp[i - 1]) {\n\t\t\tcurrent_count++;\n\t\t}\n\t\telse {\n\
    \t\t\tif (current_count >= temp[i - 1]) {\n\t\t\t\treturn temp[i - 1];\n\t\t\t\
    }\n\t\t\tcurrent_count = 1;\n\t\t}\n\t}\n\tif (current_count >= temp[len - 1])\
    \ {\n\t\treturn temp[len - 1];\n\t}\n\treturn -1;", "    std::map<long, int> freq;\n\
    \    for (int i=0; i<lst.size(); i++) {\n        if (freq.find(lst[i]) != freq.end())\
    \ {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] =\
    \ 1;\n        }\n    }\n    int max = -1;\n    for (auto itr=freq.begin(); itr!=freq.end();\
    \ itr++) {\n        if (itr->first <= itr->second && itr->first > max) {\n   \
    \         max = itr->first;\n        }\n    }\n    return max;", "\tint cnt, maxFreq,\
    \ i;\n\tstd::map<long, int> freqMap;\n\tstd::vector<long>::iterator itr;\n\titr\
    \ = lst.begin();\n\twhile(itr != lst.end()) {\n\t\tfreqMap[*itr]++;\n\t\titr++;\n\
    \t}\n\tstd::map<long, int>::iterator mapItr;\n\tmapItr = freqMap.begin();\n\t\
    while(mapItr != freqMap.end()) {\n\t\tstd::cout << mapItr->first << \" : \" <<\
    \ mapItr->second << std::endl;\n\t\tmapItr++;\n\t}\n\tcnt = 0;\n\tmaxFreq = 0;\n\
    \tfor(i = 1; i <= lst.size(); i++) {\n\t\tif(freqMap[i] != 0) {\n\t\t\tif(freqMap[i]\
    \ >= i) {\n\t\t\t\tif(i > maxFreq) {\n\t\t\t\t\tmaxFreq = i;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\tif(maxFreq == 0) {\n\t\treturn -1;\n\t}\n\treturn maxFreq;",
  "\tstd::sort(lst.begin(), lst.end());\n\tint count = 1;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tif (lst[i] == count) {\n\t\t\t\treturn lst[i];\n\t\t\t}\n\t\t\tcount\
    \ = 1;\n\t\t}\n\t}\n\tif (lst[lst.size() - 1] == count) {\n\t\treturn lst[lst.size()\
    \ - 1];\n\t}\n\treturn -1;", "  std::unordered_map<long, long> dic;\n  for (long\
    \ i : lst) {\n    dic[i]++;\n  }\n  std::vector<long> keys;\n  for (auto i : dic)\
    \ {\n    keys.push_back(i.first);\n  }\n  std::sort(keys.begin(), keys.end());\n\
    \  std::reverse(keys.begin(), keys.end());\n  for (long i : keys) {\n    if (dic[i]\
    \ >= i) {\n      return i;\n    }\n  }\n  return -1;", "\tlong largest = 0;\n\t\
    std::map<long, long> mp;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tmp[lst[i]]++;\n\
    \t\tif (mp[lst[i]] >= lst[i]) {\n\t\t\tlargest = std::max(largest, lst[i]);\n\t\
    \t}\n\t}\n\treturn largest == 0 ? -1 : largest;", "  // your code here\n  long\
    \ mx = 0;\n  long result = -1;\n  for(int i = 0; i < lst.size(); i++){\n     \
    \ mx = std::max(mx, lst[i]);\n  }\n  std::unordered_map<long, long> map;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n      map[lst[i]]++;\n  }\n  for(int i = 1; i\
    \ <= mx; i++){\n      if(map[i] >= i && map[i] > map[result]){\n          result\
    \ = i;\n      }\n  }\n  return result;", "    long ans = -1;\n    std::map<long,\
    \ long> map1;\n    for(long i = 0; i < lst.size(); i++)\n    {\n        map1[lst[i]]++;\n\
    \    }\n    for(auto it = map1.begin(); it != map1.end(); it++)\n    {\n     \
    \   if(it->first <= it->second)\n        {\n            ans = std::max(ans, it->first);\n\
    \        }\n    }\n    return ans;", "  std::map<long, int> mp;\n  for(long x\
    \ : lst) {\n    mp[x]++;\n  }\n  long mx = -1;\n  for(auto i : mp) {\n    if(i.first\
    \ <= i.second)\n      mx = max(mx, i.first);\n  }\n  return mx;", "\tif (lst.size()\
    \ == 0) return -1;\n\tstd::map<long, long> counts;\n\tlong maxValue = -1;\n\t\
    for (long x : lst) {\n\t\tcounts[x]++;\n\t\tif (counts[x] >= x && x > maxValue)\
    \ maxValue = x;\n\t}\n\treturn maxValue;", "    // Your code here\n    unordered_map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = 0;\n    long key = -1;\n    for(auto i = m.begin(); i !=\
    \ m.end(); i++) {\n        if(i->first == i->second && i->first > max) {\n   \
    \         max = i->first;\n            key = i->first;\n        }\n    }\n   \
    \ return key;", "\tif (lst.size() == 0)\n\t\treturn -1;\n\tint max = lst[0];\n\
    \tint occ = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max)\n\
    \t\t\tmax = lst[i];\n\t}\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ == max)\n\t\t\tocc++;\n\t}\n\tif (occ < max)\n\t\treturn -1;\n\treturn max;",
  "  long maxNum = -1;\n  for (int i = 0; i < lst.size(); i++) {\n    if (std::count(lst.begin(),\
    \ lst.end(), lst[i]) >= lst[i]) {\n      maxNum = lst[i];\n    }\n  }\n  return\
    \ maxNum;", "    unordered_map<long, long> mp;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        mp[lst[i]]++;\n    }\n    long ans = -1;\n    for(long i = 0;\
    \ i < lst.size(); i++) {\n        if(mp[lst[i]] >= lst[i]) {\n            ans\
    \ = max(ans, lst[i]);\n        }\n    }\n    return ans;", "\tif (lst.size() <\
    \ 1)\n\t\treturn -1;\n\tstd::map<long, long> m;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tif (m.find(lst[i]) == m.end())\n\t\t\tm[lst[i]] = 1;\n\t\telse\n\
    \t\t\tm[lst[i]]++;\n\t}\n\tstd::map<long, long>::iterator it;\n\tlong ans = -1;\n\
    \tfor (it = m.begin(); it != m.end(); it++) {\n\t\tif (it->first <= it->second)\n\
    \t\t\tans = std::max(ans, it->first);\n\t}\n\treturn ans;", "    // lst.erase(std::remove(lst.begin(),\
    \ lst.end(), 0), lst.end());\n    // if(lst.size()==0)\n    //     return -1;\n\
    \    // std::vector<int>freq(lst.size());\n    // for(int i=0;i<lst.size();i++)\n\
    \    // {\n    //     freq[i]=count(lst.begin(),lst.end(),lst[i]);\n    // }\n\
    \    // // for(int i=0;i<freq.size();i++)\n    // //     std::cout<<freq[i]<<\"\
    \ \";\n    // std::sort(freq.begin(),freq.end());\n    // // for(int i=0;i<freq.size();i++)\n\
    \    // //     std::cout<<freq[i]<<\" \";\n    // for(int i=0;i<freq.size();i++)\n\
    \    // {\n    //     if(freq[i]>=lst[i])\n    //         return lst[i];\n   \
    \ // }\n    // return -1;\n    long max=-1;\n    for(long i=0;i<lst.size();i++)\n\
    \    {\n        long count=std::count(lst.begin(),lst.end(),lst[i]);\n       \
    \ if(lst[i]>=count && lst[i]>max)\n            max=lst[i];\n    }\n    return\
    \ max;", "    std::sort(lst.begin(), lst.end());\n    std::vector<long> a{};\n\
    \    std::vector<long> b{};\n    int cnt = 1;\n    for(int i = 0; i < lst.size()-1;\
    \ i++){\n        if(lst[i] == lst[i+1]){\n            cnt++;\n        }\n    \
    \    else{\n            a.push_back(lst[i]);\n            b.push_back(cnt);\n\
    \            cnt = 1;\n        }\n    }\n    a.push_back(lst[lst.size()-1]);\n\
    \    b.push_back(cnt);\n    for(int i = 0; i < a.size(); i++){\n        if(a[i]\
    \ <= b[i]){\n            return a[i];\n        }\n    }\n    return -1;", "  std::map<long,\
    \ long> freq_map;\n  for (auto elem : lst) {\n    freq_map[elem]++;\n  }\n  for\
    \ (auto elem : lst) {\n    if (elem <= freq_map[elem]) {\n      return elem;\n\
    \    }\n  }\n  return -1;", "    std::sort(lst.begin(), lst.end());\n    for(int\
    \ i = lst.size() - 1; i >= 0; i--) {\n        if(std::count(lst.begin(), lst.end(),\
    \ lst[i]) >= lst[i]) {\n            return lst[i];\n        }\n    }\n    return\
    \ -1;", "    std::map<long, long> map;\n    for(long i=0; i<lst.size(); i++) {\n\
    \        map[lst[i]]++;\n    }\n    for(long i=lst.size(); i>0; i--) {\n     \
    \   if(map[i] >= i) {\n            return i;\n        }\n    }\n    return -1;",
  "    std::unordered_map<long, long> frequency;\n    for (long l : lst)\n       \
    \ frequency[l]++;\n    long greatest = -1;\n    for (auto pair : frequency) {\n\
    \        if (pair.first <= pair.second)\n            greatest = std::max(greatest,\
    \ pair.first);\n    }\n    return greatest;", "    std::unordered_map<long, long>\
    \ count;\n    for (auto &&i : lst)\n        count[i]++;\n    long max = 0;\n \
    \   for (auto &&i : count)\n        if (i.first >= i.second && i.first > max)\n\
    \            max = i.first;\n    return max ? max : -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> vec;\n    long count = 1;\n    for(int i\
    \ = 0; i < lst.size() - 1; i++) {\n        if(lst[i] == lst[i + 1]) {\n      \
    \      count++;\n        } else {\n            vec.push_back(count);\n       \
    \     count = 1;\n        }\n    }\n    if(count > 1) {\n        vec.push_back(count);\n\
    \    }\n    for(int i = vec.size() - 1; i >= 0; i--) {\n        if(vec[i] >= lst[i])\
    \ {\n            return lst[i];\n        }\n    }\n    return -1;", "    long\
    \ max = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    for(long i = max; i > 0;\
    \ i--) {\n        int counter = 0;\n        for(long j = 0; j < lst.size(); j++)\
    \ {\n            if(lst[j] == i) {\n                counter++;\n            }\n\
    \        }\n        if(counter >= i) {\n            return i;\n        }\n   \
    \ }\n    return -1;", "    std::map<long, long> freq;\n    std::vector<long> vals;\n\
    \    for(long i : lst) {\n        freq[i]++;\n        vals.push_back(i);\n   \
    \ }\n    sort(vals.begin(), vals.end());\n    vals.erase(unique(vals.begin(),\
    \ vals.end()), vals.end());\n    long res = -1;\n    for(long i : vals) {\n  \
    \      if(freq[i] >= i) {\n            res = i;\n        }\n    }\n    return\
    \ res;", "    unordered_map<long,long> mp;\n    long max = 0;\n    long ans =\
    \ -1;\n    for(long i=0;i<lst.size();i++){\n        mp[lst[i]]++;\n        if(mp[lst[i]]>=lst[i]\
    \ && lst[i]>max){\n            max = lst[i];\n            ans = lst[i];\n    \
    \    }\n    }\n    return ans;", "\tlong len = lst.size();\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tfor (long i = 0; i < len; i++) {\n\t\tint num = lst[i];\n\t\t\
    long count = 0;\n\t\twhile (i < len && lst[i] == num) {\n\t\t\tcount++;\n\t\t\t\
    i++;\n\t\t}\n\t\tif (count >= num)\n\t\t\treturn num;\n\t}\n\treturn -1;", " \
    \   if(lst.size() == 0)\n        return -1;\n    std::unordered_map<long, long>\
    \ m;\n    for(auto x : lst)\n        m[x]++;\n    for(auto x : lst)\n        if(m[x]\
    \ >= x)\n            return x;\n    return -1;", "    // 4, 1, 2, 2, 3, 1\n  \
    \  std::map<long, long> map_;\n    // map_[1] = 2\n    // map_[2] = 2\n    //\
    \ map_[3] = 1\n    // map_[4] = 1\n    for (auto l : lst) {\n        map_[l]++;\n\
    \    }\n    std::cout << \"map_ == \" << map_ << std::endl;\n    // map_[4] ==\
    \ 1\n    long result = -1;\n    for (auto m : map_) {\n        std::cout << \"\
    m.first == \" << m.first << std::endl;\n        std::cout << \"m.second == \"\
    \ << m.second << std::endl;\n        if (m.first <= m.second) {\n            result\
    \ = std::max(result, m.first);\n        }\n    }\n    std::cout << \"result ==\
    \ \" << result << std::endl;\n    return result;", "    long maxVal = -1;\n  \
    \  std::map<long, int> mp;\n    for(auto &v : lst) {\n        mp[v]++;\n    }\n\
    \    for(auto &v : mp) {\n        if(v.first <= v.second && v.first > maxVal)\n\
    \            maxVal = v.first;\n    }\n    return maxVal;", "    std::sort(lst.begin(),\
    \ lst.end());\n    int count = 1;\n    for(int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if(lst[i] == lst[i + 1]) {\n            count++;\n        } else\
    \ {\n            if(count >= lst[i]) return lst[i];\n            count = 1;\n\
    \        }\n    }\n    if(count >= lst[lst.size() - 1]) return lst[lst.size()\
    \ - 1];\n    return -1;", "  std::map<long, long> freq;\n  for (int i = 0; i <\
    \ lst.size(); i++) {\n    freq[lst[i]] += 1;\n  }\n  long maxNum = -1;\n  for\
    \ (auto elem : freq) {\n    if (elem.first > elem.second) {\n      continue;\n\
    \    }\n    maxNum = std::max(maxNum, elem.first);\n  }\n  return maxNum;", " \
    \ std::sort(lst.begin(), lst.end());\n  auto cnt = lst.end() - std::unique(lst.begin(),\
    \ lst.end());\n  for (auto it = lst.begin(); it != lst.end(); it++) {\n    auto\
    \ diff = std::distance(it, lst.end()) - std::distance(lst.begin(), it);\n    if\
    \ (diff <= 0) {\n      return -1;\n    }\n    if (*it == cnt && *it >= diff) {\n\
    \      return *it;\n    }\n  }\n  return -1;", "    std::map<long, int> freq;\n\
    \    for (int i = 0; i < lst.size(); i++)\n        freq[lst[i]]++;\n    int maxFreq\
    \ = INT_MIN;\n    long res = 0;\n    for (auto x : freq) {\n        if (x.first\
    \ >= x.second && x.second > maxFreq) {\n            maxFreq = x.second;\n    \
    \        res = x.first;\n        }\n    }\n    return res == 0 ? -1 : res;", " \
    \   sort(lst.begin(), lst.end());\n    int l=lst.size();\n    map<long,long> dict;\n\
    \    map<long,long>::iterator it;\n    for(int i=0;i<l;i++)\n    {\n        dict[lst[i]]+=1;\n\
    \    }\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n        long key\
    \ = it->first;\n        long val = it->second;\n        if(key<=val)\n       \
    \ {\n            return key;\n        }\n    }\n    return -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    int count = 1;\n    for(int i = 0; i < lst.size() - 1; i++)\
    \ {\n        count = 1;\n        for(int j = i + 1; j < lst.size(); j++) {\n \
    \           if(lst[i] == lst[j]) {\n                count++;\n            }\n\
    \        }\n        if(count >= lst[i]) {\n            return lst[i];\n      \
    \  }\n    }\n    return -1;", "    std::map<long, int> cnt;\n    for (auto i :\
    \ lst) cnt[i]++;\n    for (auto i : cnt) {\n        if (i.first <= i.second) return\
    \ i.first;\n    }\n    return -1;", "  // TODO\n  unordered_map<long, long> freq;\n\
    \  long maxFreq = 0;\n  for(long i = 0; i < lst.size(); i++) {\n    long temp\
    \ = lst[i];\n    if(freq.find(temp) == freq.end()) {\n      freq[temp] = 1;\n\
    \    } else {\n      freq[temp]++;\n    }\n    maxFreq = max(maxFreq, freq[temp]);\n\
    \  }\n  for(long i = 1; i <= maxFreq; i++) {\n    if(freq.find(i) != freq.end())\
    \ {\n      if(freq[i] >= i) {\n        return i;\n      }\n    }\n  }\n  return\
    \ -1;", "    if(lst.size() == 0) return -1;\n    std::unordered_map<long, long>\
    \ map;\n    for(auto &i : lst) map[i]++;\n    for(auto &i : map) {\n        if(i.first\
    \ <= i.second) return i.first;\n    }\n    return -1;", "\t// sort in reverse\
    \ order\n\tstd::sort(lst.begin(), lst.end(), std::greater<long>());\n\tint i =\
    \ 0;\n\tfor (auto it = lst.begin(); it != lst.end(); ++it) {\n\t\t// number of\
    \ occurrences is equal to lst.size() - i\n\t\tif (lst.size() - i >= *it) {\n\t\
    \t\tif (i == 0) {\n\t\t\t\treturn *it;\n\t\t\t}\n\t\t\t// check that the number\
    \ is unique\n\t\t\tif (*it != *(it - 1)) {\n\t\t\t\treturn *it;\n\t\t\t}\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn -1;", "    std::map<long, long> mp;\n    for(int i\
    \ = 0; i < lst.size(); i++) {\n        if(mp.find(lst[i]) == mp.end()) {\n   \
    \         mp[lst[i]] = 1;\n        } else {\n            mp[lst[i]]++;\n     \
    \   }\n    }\n    std::map<long, long>::iterator itr;\n    long max = 0;\n   \
    \ for(itr = mp.begin(); itr != mp.end(); itr++) {\n        if(itr->first > max\
    \ && itr->second >= itr->first) {\n            max = itr->first;\n        }\n\
    \    }\n    if(max == 0) {\n        return -1;\n    }\n    return max;", "  std::map<long,\
    \ int> m;\n  int max = -1;\n  for(auto i : lst) {\n    m[i]++;\n    if(m[i] >\
    \ max) {\n      max = m[i];\n    }\n  }\n  for(auto i : m) {\n    if(i.second\
    \ == i.first && i.first == max) {\n      return i.first;\n    }\n  }\n  return\
    \ -1;", "  std::sort(lst.begin(), lst.end());\n  std::map<long, long> freq;\n\
    \  for (int i = 0; i < lst.size(); i++)\n    freq[lst[i]]++;\n  long prev = 0;\n\
    \  for (auto it = freq.begin(); it != freq.end(); it++) {\n    if (it->first ==\
    \ it->second && it->first > prev)\n      return it->first;\n    prev = it->first;\n\
    \  }\n  return -1;", "  std::map<long,long> element_map;\n  for(int i=0;i<lst.size();i++){\n\
    \    element_map[lst[i]]++;\n  }\n  std::map<long,long>::iterator it;\n  long\
    \ maxValue = -1;\n  long finalValue = -1;\n  for(it=element_map.begin();it!=element_map.end();it++){\n\
    \    if(it->first <= it->second){\n      if(it->first > maxValue){\n        maxValue\
    \ = it->first;\n        finalValue = it->second;\n      }\n    }\n  }\n  return\
    \ finalValue;", "    int size = lst.size();\n    long index;\n    long result;\n\
    \    std::sort(lst.begin(), lst.end());\n    std::cout << lst.size() << std::endl;\n\
    \    for (int i = 1; i < size; i++) {\n        if (lst[i - 1] != lst[i]) {\n \
    \           index = lst[i - 1];\n            result = std::count(lst.begin(),\
    \ lst.end(), index);\n            if (result >= index) {\n                return\
    \ index;\n            }\n        }\n    }\n    if (lst[size - 1] == lst[size -\
    \ 2]) {\n        return -1;\n    }\n    else {\n        index = lst[size - 1];\n\
    \        result = std::count(lst.begin(), lst.end(), index);\n        if (result\
    \ >= index) {\n            return index;\n        }\n        else {\n        \
    \    return -1;\n        }\n    }", "    std::map<long, long> freq;\n    for(auto&\
    \ e : lst) freq[e]++;\n    auto it = freq.begin();\n    while(it != freq.end()){\n\
    \        if(it->first <= it->second) return it->first;\n        it++;\n    }\n\
    \    return -1;"]
stop_tokens:
- "\n}"
