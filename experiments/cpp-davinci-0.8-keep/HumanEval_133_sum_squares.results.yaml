language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    std::vector<int>\
    \ upperInt;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0)\n\
    \            upperInt.push_back(std::ceil(lst[i]));\n        else\n          \
    \  upperInt.push_back(std::floor(lst[i]));\n    }\n    for(int i = 0; i < upperInt.size();\
    \ i++){\n        sum += upperInt[i] * upperInt[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp_4sz7txs: /tmp/tmp_4sz7txs.cpp:32: int main(): Assertion `candidate((std::vector<float>({-2.4,
    1.0, 1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(float i : lst)\n\
    \    ans += (long)ceil(i)*(long)ceil(i);\n  return ans;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int size = lst.size();\n    long\
    \ sum = 0;\n    for(int i = 0; i < size; i++){\n        sum += pow(ceil(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    float sum = 0;\n    // iterate over\
    \ the vector\n    for(int i = 0; i < lst.size(); i++){\n        float num = lst[i];\n\
    \        // round of the element to the upper int\n        num = ceil(num);\n\
    \        // square the element and add it to the sum\n        sum += num * num;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  std::vector<int>::iterator\
    \ it;\n  for (it = lst.begin(); it != lst.end(); it++) {\n    sum += ceil(*it)\
    \ * ceil(*it);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hgeihe0.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmp7hgeihe0.cpp:15:23: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019} and \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019})\n  \
    \ 15 |   for (it = lst.begin(); it != lst.end(); it++) {\n      |            \
    \           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7hgeihe0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >& __gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator=(const __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >&)\u2019\n  784 |     class __normal_iterator\n      |   \
    \        ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:\
    \   no known conversion for argument 1 from \u2018std::vector<float>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019}\
    \ to \u2018const __gnu_cxx::__normal_iterator<int*, std::vector<int> >&\u2019\n\
    /usr/include/c++/9/bits/stl_iterator.h:784:11: note: candidate: \u2018constexpr\
    \ __gnu_cxx::__normal_iterator<int*, std::vector<int> >& __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >::operator=(__gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019} to \u2018\
    __gnu_cxx::__normal_iterator<int*, std::vector<int> >&&\u2019\n/tmp/tmp7hgeihe0.cpp:15:29:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::vector<int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<int*"
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(auto elem : lst)\n\
    \  {\n    int ceiling_elem = std::ceil(elem);\n    ans += ceiling_elem * ceiling_elem;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    std::vector<float> v;\n    for(int\
    \ i=0;i<lst.size();i++){\n        if(lst[i]<0){\n            v.push_back(ceil(lst[i]));\n\
    \        }\n        else{\n            v.push_back(floor(lst[i]));\n        }\n\
    \    }\n    int x=0;\n    for(int i=0;i<v.size();i++){\n        x+=pow(v[i],2);\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpyrs2kwvt: /tmp/tmpyrs2kwvt.cpp:33: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto i: lst)\n\
    \    {\n        sum += pow(ceil(i),2);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto x : lst)\
    \ {\n    sum += std::ceil(x) * std::ceil(x);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    if(lst[i]<0){\n      lst[i]=lst[i]*(-1);\n    }\n    sum=sum+(int)ceil(lst[i])*(int)ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpfy2ogdum: /tmp/tmpfy2ogdum.cpp:28: int main(): Assertion `candidate((std::vector<float>({-2.4,
    1.0, 1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tint q = ceil(lst[i]);\n\t\tsum += q * q;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(auto &i : lst)\
    \ {\n    int temp = i + 0.5;\n    sum += temp * temp;\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpkbzn409j: /tmp/tmpkbzn409j.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float i : lst)\
    \ {\n    sum += ceil(i) * ceil(i);\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result=0;\n  std::vector<int>\
    \ ceil_vec;\n  // Write your code here\n  for(auto& i:lst){\n      ceil_vec.push_back(std::ceil(i));\n\
    \  }\n  for(auto& i:ceil_vec){\n      result += (i*i);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tfloat p = lst[i];\n\t\tif (p > 0) {\n\t\t\tsum +=\
    \ (long)ceil(pow(p, 2));\n\t\t}\n\t\telse {\n\t\t\tsum += (long)floor(pow(p, 2));\n\
    \t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmppq10nat5: /tmp/tmppq10nat5.cpp:30: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (auto i\
    \ : lst) {\n        result += ceil(i)*ceil(i);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here\n    long sum =\
    \ 0;\n    for(auto x: lst){\n        long num = ceil(x);\n        sum += num*num;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tfloat sum;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tlst[i] = ceil(lst[i]);\n\t\tsum += lst[i] * lst[i];\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpz0bshny2: /tmp/tmpz0bshny2.cpp:22: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t// Handle edge cases first\n\tif (lst.size()\
    \ == 0) {\n\t\treturn 0;\n\t}\n\t// If list size is 1, simply square the given\
    \ number\n\tif (lst.size() == 1) {\n\t\treturn pow(lst[0], 2);\n\t}\n\t// Now\
    \ let's calculate the squared sum\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tint number = lst[i];\n\t\tint temp = number;\n\t\t// Check for negative\
    \ numbers\n\t\tif (number < 0) {\n\t\t\tnumber = number * -1;\n\t\t}\n\t\t// Get\
    \ the decimal part of the number\n\t\tfloat decimal = number - (int)number;\n\t\
    \t// Round up the number and square it\n\t\tsum += pow((int)number + 1, 2);\n\t\
    \t// If decimal is greater than 0.5, increment temp once more and square it\n\t\
    \tif (decimal > 0.5) {\n\t\t\tsum += pow(temp + 1, 2);\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpds8jgbcu: /tmp/tmpds8jgbcu.cpp:43: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // test -1\n    if (lst.size() ==\
    \ 0) {\n        return 0;\n    }\n    // test 1,2,3\n    if (lst.size() == 1)\
    \ {\n        return ceil(lst[0]) * ceil(lst[0]);\n    }\n    // test 4,5,6\n \
    \   int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i])\
    \ * ceil(lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  float sum=0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    sum=sum+std::ceil(lst[i])*std::ceil(lst[i]);\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float num : lst)\
    \ {\n    sum += std::ceil(num) * std::ceil(num);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    // Write your\
    \ code here\n    for(int i=0;i<lst.size();i++){\n        result += ceil(lst[i])*ceil(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tlong l=ceil(lst[i]);\n\t\tsum+=l*l;\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int x=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n    \tlst[i]=ceil(lst[i]);\n    \tx=x+(lst[i]*lst[i]);\n    }\n    return\
    \ x;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        float num = ceil(lst[i]);\n        ans += num\
    \ * num;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  //your code here\n  float s=0;\n  for(int\
    \ i=0;i<lst.size();i++)\n  {\n    float k=ceil(lst[i]);\n    s+=k*k;\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here\n    long res =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        res += (long)std::ceil(lst[i])\
    \ * (long)std::ceil(lst[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(float x:lst)\n \
    \ {\n    sum+=ceil(x)*ceil(x);\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float x : lst)\
    \ {\n    sum += pow(ceil(x), 2);\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        sum+=pow(ceil(lst[i]),2);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132289
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  std::transform(lst.begin(), lst.end(),\
    \ lst.begin(), ceil);\n  long sum = 0;\n  for (int x : lst) {\n    sum += x *\
    \ x;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int squared = 0;\n  for (auto i = lst.begin();\
    \ i != lst.end(); i++) {\n    squared += ceil(*i) * ceil(*i);\n  }\n  return squared;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // Your code here\n  float sum=0;\n\
    \  for(int i=0;i<lst.size();i++)\n  {\n    float x=(lst[i]-floor(lst[i]));\n \
    \   if(x>0.5)\n    {\n      lst[i]=ceil(lst[i]);\n    }\n    else\n    {\n   \
    \   lst[i]=floor(lst[i]);\n    }\n    sum+=pow(lst[i],2);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp0wthuj13: /tmp/tmp0wthuj13.cpp:35: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong result = 0;\n\tfor (float number\
    \ : lst) {\n\t\tresult += (long) ceil(number) * (long) ceil(number);\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long total = 0;\n  int size = lst.size();\n\
    \  for(int i = 0; i < size; i++){\n    int rounded = ceil(lst[i]);\n    int squared\
    \ = rounded * rounded;\n    total += squared;\n  }\n  return total;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  // your code here\n\
    \  // loop through the list\n  for (auto& i : lst) {\n    if (i < 0) {\n     \
    \ // if the element is negative\n      // multiply by -1 and round up the value\n\
    \      sum += (ceil(i * -1) * ceil(i * -1));\n    } else {\n      // else multiply\
    \ the element by itself and round up the value\n      sum += (ceil(i) * ceil(i));\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp3xhoqq_c: /tmp/tmp3xhoqq_c.cpp:34: int main(): Assertion `candidate((std::vector<float>({-2.4,
    1.0, 1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132291
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  \n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    lst[i] = ceil(lst[i]);\n  }\n  long sum = 0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    sum += (long)pow(lst[i],2);\n  }\n  return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0.0, [](float a, float b) {\n        return a + ceil(b) * ceil(b);\n\
    \    });\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto i : lst)\n\
    \    sum += ceil(i) * ceil(i);\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int i;\n    float sum = 0;\n    for(i=0;i<lst.size();i++)\n\
    \    {\n        int b = ceil(lst[i]);\n        sum = sum + (b*b);\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132292
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here...\n  int l=lst.size();\n\
    \  long sum=0;\n  for(int i=0;i<l;i++)\n  {\n    sum+=(ceil(lst[i])*ceil(lst[i]));\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code goes here\n    for(int\
    \ i=0;i<lst.size();i++)\n    {\n        lst[i]=ceil(lst[i]);\n    }\n    long\
    \ sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        sum+=pow(lst[i],2);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(auto i:lst)\n\
    \        sum+=pow(i,2);\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpt7lud21i: /tmp/tmpt7lud21i.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(auto i: lst){\n        sum += std::ceil(i) * std::ceil(i);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long total = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    float p = ceil(lst[i]);\n    total += p * p;\n \
    \ }\n  return total;\n}\nint main() {\n    auto candidate = sum_squares;\n   \
    \ assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  //your code here\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tif (lst.size() == 0)\n\t\treturn 0;\n\
    \tlong sum = 0;\n\tfor (auto& x : lst) {\n\t\tsum += ceil(x)*ceil(x);\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n        lst[i] = ceil(lst[i]);\n        result\
    \ += pow(lst[i], 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t// TODO - Wri\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp2_w8_8uq: /tmp/tmp2_w8_8uq.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (unsigned int\
    \ i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    sum += lst[i]\
    \ * lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (std::vector<float>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n    sum += (*it) * (*it);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpp6v9m_cj: /tmp/tmpp6v9m_cj.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float i : lst)\
    \ {\n\t\tsum += pow(ceil(i), 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (auto i\
    \ : lst)\n        result += ceil(i) * ceil(i);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  // your code here\n\
    \  for(int i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Your code here\n    long result\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        result += std::ceil(lst[i])\
    \ * std::ceil(lst[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tint n=lst.size();\n\t\
    for(int i=0;i<n;i++)\n\t{\n\t\tlst[i]=ceil(lst[i]);\n\t\tsum+=lst[i]*lst[i];\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        sum=sum+ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(auto i:lst)\n  \
    \  sum+=(long)ceil(i)*(long)ceil(i);\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t// your code goes here\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += (int)std::ceil(lst[i])\
    \ * (int)std::ceil(lst[i]);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for (size_t i =\
    \ 0; i < lst.size(); i++) {\n    result += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  float sum=0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n      sum+=(ceil(lst[i])*ceil(lst[i]));\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float num : lst)\
    \ {\n\t\tsum += std::pow(std::ceil(num), 2);\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // Your code here\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here\n    long sum =\
    \ 0;\n    // std::cout << ceil(1.1) << std::endl;\n    // std::cout << ceil(1.7)\
    \ << std::endl;\n    // std::cout << ceil(2.3) << std::endl;\n    // std::cout\
    \ << ceil(4.4) << std::endl;\n    // std::cout << ceil(5.5) << std::endl;\n  \
    \  // std::cout << ceil(0.0) << std::endl;\n    // std::cout << ceil(-0.1) <<\
    \ std::endl;\n    // std::cout << ceil(-1.5) << std::endl;\n    // std::cout <<\
    \ ceil(-2.2) << std::endl;\n    // std::cout << ceil(-3.9) << std::endl;\n   \
    \ // std::cout << ceil(-4.8) << std::endl;\n    // std::cout << ceil(-5.6) <<\
    \ std::endl;\n    for (float number : lst) {\n        // std::cout << \"number\
    \ = \" << number << std::endl;\n        sum += (long)ceil(number) * (long)ceil(number);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  double res = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    res += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto itr =\
    \ lst.begin(); itr != lst.end(); itr++) {\n        sum += (long)ceil(*itr) * (long)ceil(*itr);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long res = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        res += ceil(lst[i]) * ceil(lst[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(auto &i : lst)\n    {\n        i = ceil(i);\n        sum +=\
    \ i*i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for (std::vector<float>::const_iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n    result += (long)ceil(*it) *\
    \ (long)ceil(*it);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto num :\
    \ lst) {\n        sum += ceil(num)*ceil(num);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  float sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    float element = ceil(lst[i]);\n    sum += pow(element,\
    \ 2);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int size = lst.size();\n  long sum\
    \ = 0;\n  for(int i = 0; i < size; i++) {\n    lst[i] = ceil(lst[i]);\n    sum\
    \ += (lst[i] * lst[i]);\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    lst[i]=ceil(lst[i]);\n    sum+=lst[i]*lst[i];\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (auto it = lst.begin();\
    \ it != lst.end(); it++) {\n\t\tlong val = ceil(*it);\n\t\tsum += val * val;\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132293
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (float\
    \ i : lst) {\n        int temp = ceil(i);\n        result += temp * temp;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long total = 0;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        total += pow(ceil(lst[i]), 2);\n    }\n \
    \   return total;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        int temp = ceil(lst[i]);\n        sum += temp\
    \ * temp;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\t\
    }\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132292
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  //your code here\n  long ans = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    ans += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        result += std::ceil(lst[i])*std::ceil(lst[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (auto i : lst)\
    \ {\n\t\tint r = ceil(i);\n\t\tsum += r * r;\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong res = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tres += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132295
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int n = lst.size();\n    long sum\
    \ = 0;\n    for(int i = 0; i < n; i++) {\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t//  your code here\n\tfloat sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < 0)\n\t\t\tlst[i] =\
    \ std::ceil(lst[i]);\n\t\telse\n\t\t\tlst[i] = std::floor(lst[i]);\n\t\tsum +=\
    \ pow(lst[i], 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmptrn3xdl_: /tmp/tmptrn3xdl_.cpp:29: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto e : lst)\
    \ {\n        sum += ceil(e) * ceil(e);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += pow(lst[i], 2);\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp2yq3v3qd: /tmp/tmp2yq3v3qd.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    int n=lst.size();\n\
    \    for(int i=0;i<n;i++)\n    {\n        lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  // write your code\
    \ here\n  for(int i=0;i<lst.size();i++){\n    int squared = ceil(lst[i])*ceil(lst[i]);\n\
    \    result+=squared;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    sum=sum+lst[i]*lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpjw2sn963: /tmp/tmpjw2sn963.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t// Write your code here\n\t// To print\
    \ results to the standard output you can use Print function\n\t// Example: Print(\"\
    Hello world!\")\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\
    \tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\nlong result = 0;\n    for(int i=0;i<lst.size();i++){\n\
    \        // std::cout<<lst[i]<<std::endl;\n        int f = std::ceil(lst[i]);\n\
    \        int t = f*f;\n        result += t;\n    }\nreturn result;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        float num=lst[i];\n        sum=sum+(ceil(num)*ceil(num));\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfloat temp = 0;\n\t\
    for (int i = 0; i < lst.size(); i++) {\n\t\ttemp = ceil(lst[i]);\n\t\tsum += temp\
    \ * temp;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tstd::vector<int>::iterator\
    \ itr;\n\tfor (itr = lst.begin(); itr != lst.end(); itr++) {\n\t\tsum += ceil(*itr)\
    \ * ceil(*itr);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8tfj91g.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmpu8tfj91g.cpp:15:23: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019} and \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019})\n  \
    \ 15 |  for (itr = lst.begin(); itr != lst.end(); itr++) {\n      |          \
    \             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu8tfj91g.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >& __gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator=(const __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >&)\u2019\n  784 |     class __normal_iterator\n      |   \
    \        ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:\
    \   no known conversion for argument 1 from \u2018std::vector<float>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019}\
    \ to \u2018const __gnu_cxx::__normal_iterator<int*, std::vector<int> >&\u2019\n\
    /usr/include/c++/9/bits/stl_iterator.h:784:11: note: candidate: \u2018constexpr\
    \ __gnu_cxx::__normal_iterator<int*, std::vector<int> >& __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >::operator=(__gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019} to \u2018\
    __gnu_cxx::__normal_iterator<int*, std::vector<int> >&&\u2019\n/tmp/tmpu8tfj91g.cpp:15:30:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::vector<int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<in"
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    result += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long res=0;\n  for(auto x:lst)\n  {\n\
    \    long tmp=(int)ceil(x);\n    res+=(tmp*tmp);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  std::vector<int> vec;\n  for(auto i:lst){\n\
    \    int temp = ceil(i);\n    vec.push_back(temp);\n  }\n  long sum=0;\n  for(auto\
    \ i:vec){\n    sum+=i*i;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    return accumulate(lst.begin(), lst.end(),\
    \ 0, [](float a, float b) { return a + ceil(b)*ceil(b); });\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    if(lst.size() == 0)\n        return\
    \ 0;\n    // int ceiling = ceil(lst[0]);\n    // return ceiling*ceiling + sum_squares(lst[1:]);\n\
    \    std::vector<float>::iterator it = lst.begin();\n    int ceiling = ceil(*it);\n\
    \    return ceiling*ceiling + sum_squares(std::vector<float>(++it, lst.end()));\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  if(lst.size() == 0) return 0;\n  float\
    \ sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    float number = lst[i];\n\
    \    sum += number*number;\n  }\n  return round(sum);\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp4x8l6ypa: /tmp/tmp4x8l6ypa.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\treturn 0;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp9m8fe792: /tmp/tmp9m8fe792.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  // Write your code\
    \ here\n  // To print results to the standard output you can use PrintLn()\n \
    \ // Example: PrintLn(max);\n  for(int i = 0; i < lst.size(); i++){\n      float\
    \ ceilVal = std::ceil(lst[i]);\n      sum += ceilVal * ceilVal;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(auto & i:lst)\n\t\
    \tsum+=((int)ceil(i))*((int)ceil(i));\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code goes here...\n  int n\
    \ = lst.size();\n  for(int i=0;i<n;i++)\n  {\n    lst[i] = ceil(lst[i]);\n  }\n\
    \  long sum = 0;\n  for(int i=0;i<n;i++)\n  {\n    sum += (long)pow(lst[i],2);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t\n\t// write code here\n\tlong sum=0;\n\
    \tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tint n=ceil(lst[i]);\n\t\tsum+=n*n;\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    float ans=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        lst[i]=ceil(lst[i]);\n        ans=ans+lst[i]*lst[i];\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132296
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  long sum = 0;\n\
    \  for(std::vector<float>::iterator it = lst.begin(); it != lst.end(); ++it)\n\
    \  {\n    sum += (long) ceil(*it) * (long) ceil(*it);\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tlst[i]=ceil(lst[i]);\n\t\tsum+=lst[i]*lst[i];\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float a :\
    \ lst)\n        sum += std::ceil(a) * std::ceil(a);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t\n    int sum = 0;\n    for(int i =\
    \ 0; i < lst.size(); i++)\n    {\n        if(lst[i] - floor(lst[i]) >= 0.5)\n\
    \        {\n            lst[i] = ceil(lst[i]);\n        }\n        else\n    \
    \    {\n            lst[i] = floor(lst[i]);\n        }\n        sum += pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp0n1opr49: /tmp/tmp0n1opr49.cpp:34: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(float i:lst){\n\
    \    sum+=ceil(i)*ceil(i);\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (float\
    \ item : lst) {\n        result += ceil(item) * ceil(item);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  std::vector<float>::iterator i;\n \
    \ long int sum = 0;\n  for(i = lst.begin(); i != lst.end(); i++)\n  {\n    sum\
    \ += ceil(*i) * ceil(*i);\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tlong ele=ceil(lst[i]);\n\t\tsum+=ele*ele;\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    std::vector<float>::iterator it;\n\
    \    float i=0;\n    int a = 0;\n    long sum = 0;\n    while(i < lst.size()){\n\
    \        a = ceil(lst[i]);\n        sum = sum + (a*a);\n        i++;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tint sqsum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsqsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn\
    \ sqsum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int i = 0; i <\
    \ lst.size(); i++){\n    int x = ceil(lst[i]);\n    sum += x*x;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  \t// Write your code here\n  \tlong\
    \ sum = 0;\n  \tfor(auto i: lst){\n    \tint tmp = ceil(i);\n      \tsum += tmp*tmp;\n\
    \    }\n  \treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        ans += ceil(lst[i]) * ceil(lst[i]);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (std::vector<float>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n    sum += ceil(*it) * ceil(*it);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    std::vector<float>::iterator\
    \ lst_it;\n    for (lst_it = lst.begin(); lst_it != lst.end(); lst_it++) {\n \
    \       sum += ceil(*lst_it) * ceil(*lst_it);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(float num : lst)\
    \ {\n    int x = (int)ceil(num);\n    ans += x*x;\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  return 0;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp0uif4adc: /tmp/tmp0uif4adc.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long res = 0;\n    int n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        res += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(auto &x: lst)\n\
    \    {\n        sum += (int)(ceil(x) * ceil(x));\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  int n = lst.size();\n\
    \  float sum = 0;\n  for(int i = 0; i < n; i++){\n    lst[i] = ceil(lst[i]);\n\
    \    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132297
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto it = lst.begin();\
    \ it != lst.end(); it++) {\n    *it = ceil(*it);\n    sum += *it * *it;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        int n = lst[i];\n        if (n < 0){\n      \
    \      n *= -1;\n        }\n        n = ceil(n);\n        sum += (n * n);\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpqx4bjj7w: /tmp/tmpqx4bjj7w.cpp:29: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    lst[i] = lst[i] * lst[i];\n\
    \    sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) ==\
    \ (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp5uq4v4sv: /tmp/tmp5uq4v4sv.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    lst[i]=ceil(lst[i]);\n    lst[i]=lst[i]*lst[i];\n    sum+=lst[i];\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\t// your code here\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n   // sum_squares function definition\
    \ here\n  long int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n      lst[i]\
    \ = ceil(lst[i]);\n      sum += lst[i] * lst[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Code here\n    long sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float i : lst)\n\
    \t\tsum += ceil(i) * ceil(i);\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long res = 0;\n    for(float ele\
    \ : lst)\n        res += (int)(ceil(ele)) * (int)(ceil(ele));\n    return res;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  long result =\
    \ 0;\n  for(int i = 0; i < lst.size(); i++){\n    lst[i] = ceil(lst[i]);\n   \
    \ lst[i] = lst[i] * lst[i];\n    result += lst[i];\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    int x = ceil(lst[i]);\n    sum +=\
    \ x*x;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Your Code Here\n    long output\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        float x = ceil(lst[i]);\n\
    \        output += (x*x);\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (size_t i = 0;\
    \ i < lst.size(); i++) {\n\t\tsum += (long) pow(ceil(lst[i]), 2);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n   std::vector<float>::iterator itr;\n\
    \   float sum = 0;\n   for(itr = lst.begin(); itr != lst.end(); itr++)\n   {\n\
    \     sum += (*itr) * (*itr);\n   }\n   return std::ceil(sum);\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpu657q7wo: /tmp/tmpu657q7wo.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for (float i :\
    \ lst) {\n    float squared = i * i;\n    result += std::ceil(squared);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp9xrqih31: /tmp/tmp9xrqih31.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (size_t i = 0;\
    \ i < lst.size(); i++) {\n    sum += std::pow(ceil(lst[i]), 2);\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float i : lst)\
    \ {\n    float upperInt = ceil(i);\n    sum += (upperInt * upperInt);\n  }\n \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // Good luck!\n  long sum=0;\n  float\
    \ temp;\n  for(int i=0;i<lst.size();i++)\n  {\n    temp=ceil(lst[i]);\n    sum+=pow(temp,2);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here\n    float sum\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(pow(lst[i],\
    \ 2));\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpj356fuu5: /tmp/tmpj356fuu5.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  // your code here\n\
    \  for(int i = 0; i < lst.size(); i++){\n    long a = ceil(lst[i]);\n    sum +=\
    \ a*a;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  for(int i=0;i<lst.size();i++)\n   \
    \ lst[i] = ceil(lst[i]);\n  long sum = 0;\n  for(int i=0;i<lst.size();i++)\n \
    \   sum += lst[i]*lst[i];\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Happy Coding ^_^\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        lst[i]=ceil(lst[i]);\n    \
    \    sum+=(lst[i]*lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here.\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp_jfzgegc: /tmp/tmp_jfzgegc.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long result = 0;\n    for (float\
    \ element : lst) {\n        int temp = ceil(element);\n        result += temp\
    \ * temp;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpckhlt38n: /tmp/tmpckhlt38n.cpp:17: int main(): Assertion `candidate((std::vector<float>({1.0,
    2.0, 3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tfloat a = ceil(lst[i]);\n\t\tsum += (a * a);\n\t}\n\
    \treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int i = 0; i <\
    \ lst.size(); i++){\n    int temp = lst[i];\n    sum += temp * temp;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpozc2tgci: /tmp/tmpozc2tgci.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    sum+=ceil(lst[i])*ceil(lst[i]);\n  }\n  return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tsum+=(lst[i]*lst[i]);\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp8xjyll8y: /tmp/tmp8xjyll8y.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // Write your code here\n  long sum\
    \ = 0;\n  for(float f : lst){\n    sum += ceil(f)*ceil(f);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long res = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    res += pow(lst[i], 2);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  // Sum the square\
    \ of each element\n  for (auto && element : lst) {\n    sum += ceil(element) *\
    \ ceil(element);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int a = 0;\n    for(int i = 0; i\
    \ < lst.size(); i++){\n        a += ceil(lst[i] * lst[i]);\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmp93mwjl8f: /tmp/tmp93mwjl8f.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,
    4.2, 0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int len = lst.size();\n    float\
    \ a;\n    long sum=0;\n    for(int i=0;i<len;i++){\n        a = ceil(lst[i]);\n\
    \        sum = sum + a*a;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float i : lst)\
    \ {\n    sum += ceil(i) * ceil(i);\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    result += lst[i] * lst[i];\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n \
    \   assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    // Round each element in the list to the upper int(Ceiling)\
    \ first.\n    int number = lst[i];\n    if (lst[i] > 0) {\n      number = std::ceil(lst[i]);\n\
    \    } else {\n      number = std::floor(lst[i]);\n    }\n    sum += number *\
    \ number;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpw0pt63id: /tmp/tmpw0pt63id.cpp:32: int main(): Assertion `candidate((std::vector<float>({-2.4,
    1.0, 1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // your code here.\n    // remember\
    \ to round each element before summing up the squares.\n    long sum = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++){\n        lst[i] = std::ceil(lst[i]);\n\
    \        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float i : lst)\
    \ {\n    sum += ceil(i) * ceil(i);\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132290
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    int square = ceil(lst[i]);\n    sum += (square * square);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int res = 0;\n  for (auto it = lst.begin();\
    \ it != lst.end(); it++) {\n    if (*it < 0) {\n      *it *= -1;\n    }\n    res\
    \ += static_cast<int>(std::ceil(*it)) * static_cast<int>(std::ceil(*it));\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: Exception
  stderr: 'tmpdbm733ry: /tmp/tmpdbm733ry.cpp:28: int main(): Assertion `candidate((std::vector<float>({-2.4,
    1.0, 1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float number\
    \ : lst) {\n    long square = ceil(number);\n    sum += square * square;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code goes here.\n  // Have\
    \ fun :)\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    sum+=ceil(lst[i])*ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(float i : lst){\n\
    \        sum += pow(ceil(i),2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong result = 0;\n\tfor (float x :\
    \ lst) {\n\t\tresult += (int) ceil(x) * (int) ceil(x);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  int index = 0;\n \
    \ while(index < lst.size()){\n    long converted = std::ceil(lst[index]);\n  \
    \  sum += (converted * converted);\n    index++;\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(float i : lst){\n\
    \        i = ceil(i);\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // your code here\n  int sum = 0;\n\
    \  for(float f : lst){\n    float r = f;\n    r = ceil(r);\n    sum += pow(r,2);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        lst[i] = std::ceil(lst[i]);\n        ans +=\
    \ lst[i] * lst[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  // write your solution here\n  int\
    \ sz = lst.size();\n  long sum = 0;\n  for(int i = 0; i < sz; i++){\n    int val\
    \ = ceil(lst[i]);\n    sum += val * val;\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float f : lst)\
    \ {\n\t\tsum += pow(ceil(f), 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  int sz = lst.size();\n  float temp\
    \ = 0;\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    temp = ceil(lst[i]);\n\
    \    sum += temp * temp;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += (ceil(lst[i]) * ceil(lst[i]));\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132301
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132294
