name: HumanEval_67_fruit_distribution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be\
  \ given a string that represents a number of apples and oranges \n// that are distributed\
  \ in a basket of fruit this basket contains \n// apples, oranges, and mango fruits.\
  \ Given the string that represents the total number of \n// the oranges and apples\
  \ and an integer that represent the total number of the fruits \n// in the basket\
  \ return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\"\
  , 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120)\
  \ -> 120 - 100 - 1 = 19\nlong fruit_distribution(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"\
  5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and\
  \ 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"\
  ), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n\
  \    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"\
  2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100\
  \ oranges\"), (120)) == (19));\n}\n"
completions: ["    int numOfApples = 0;\n    int numOfOranges = 0;\n    int counter\
    \ = 0;\n    int flag = 1;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i]\
    \ == 'a'){\n            int num = 0;\n            for(int j = i - 1; s[j] != '\
    \ '; j--){\n                num += flag * (s[j] - '0');\n                flag\
    \ *= 10;\n            }\n            flag = 1;\n            numOfApples = num;\n\
    \        }\n        if(s[i] == 'o'){\n            int num = 0;\n            for(int\
    \ j = i - 1; s[j] != ' '; j--){\n                num += flag * (s[j] - '0');\n\
    \                flag *= 10;\n            }\n            flag = 1;\n         \
    \   numOfOranges = num;\n        }\n    }\n    long numOfMangoes = n - numOfApples\
    \ - numOfOranges;\n    return numOfMangoes;", "    // your code here\n    long\
    \ apples, oranges;\n    std::string number = \"\";\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(s[i] == ' '){\n            if(number != \"\"){\n         \
    \       break;\n            }\n        }else{\n            number += s[i];\n \
    \       }\n    }\n    apples = std::stol(number);\n    number = \"\";\n    for(int\
    \ i = s.length() - 1; i >= 0; i--){\n        if(s[i] == ' '){\n            if(number\
    \ != \"\"){\n                break;\n            }\n        }else{\n         \
    \   number += s[i];\n        }\n    }\n    oranges = std::stol(number);\n    return\
    \ n - apples - oranges;", "    // your code\n    return n - std::count(s.begin(),\
    \ s.end(), 'a') - std::count(s.begin(), s.end(), 'o');", "\tint a = 0, b = 0;\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] == 'a') {\n\t\t\tif (s[i\
    \ + 1] == 'n') {\n\t\t\t\tif (s[i + 2] == 'd') {\n\t\t\t\t\tint x = i - 1;\n\t\
    \t\t\t\tint y = i - 1;\n\t\t\t\t\tfor (int j = x; j >= 0; j--) {\n\t\t\t\t\t\t\
    if (s[j] <= '9' && s[j] >= '0') {\n\t\t\t\t\t\t\ta = a * 10 + s[j] - '0';\n\t\t\
    \t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\
    }\n\t\t\t\t\tfor (int j = y; j < s.size(); j++) {\n\t\t\t\t\t\tif (s[j] <= '9'\
    \ && s[j] >= '0') {\n\t\t\t\t\t\t\tb = b * 10 + s[j] - '0';\n\t\t\t\t\t\t}\n\t\
    \t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn n - a - b;", "\t//your code here\n\tlong first,\
    \ second;\n\tfirst = atoi(s.substr(0, s.find(\"apples\")).c_str());\n\tsecond\
    \ = atoi(s.substr(s.find(\"and\") + 4, s.find(\"oranges\") - 4).c_str());\n\t\
    return n - first - second;", "    long apples = 0, oranges = 0;\n    sscanf(s.c_str(),\
    \ \"%ld apples and %ld oranges\", &apples, &oranges);\n    return n - apples -\
    \ oranges;", "    int i, j, x;\n    std::string a, b;\n    i = 0;\n    while(s[i]\
    \ != ' ')\n    {\n        a += s[i];\n        i++;\n    }\n    i += 5;\n    while(s[i]\
    \ != ' ')\n    {\n        b += s[i];\n        i++;\n    }\n    x = std::stoi(a)\
    \ + std::stoi(b);\n    return n - x;", "\t// Write your code here\n\t// It's main\
    \ function. Don't erase this function.\n\tint num = 0;\n\tint i = 0;\n\tfor (int\
    \ j = 0; j < s.length(); j++) {\n\t\tif (s[j] == ' ') {\n\t\t\ti = j + 1;\n\t\t\
    \twhile (s[i] != ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tnum = num + std::stoi(s.substr(j\
    \ + 1, i - j - 1));\n\t\t}\n\t}\n\tint a = n - num;\n\treturn a;", "\t//std::string::iterator\
    \ it = find(s.begin(), s.end(), ' ');\n\tstd::string apple = s.substr(0, s.find(\"\
    \ \"));\n\tstd::string orange = s.substr(s.find(\" and \") + 5, s.find(\" \",\
    \ s.find(\" and \") + 5) - s.find(\" and \") - 5);\n\treturn n - stoi(apple) -\
    \ stoi(orange);", "    // Write your code here\n    int conta = 0;\n    int conto\
    \ = 0;\n    int aux = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(isdigit(s[i])){\n\
    \            aux = 0;\n            while(isdigit(s[i])){\n                aux\
    \ = aux * 10 + (s[i] - '0');\n                i++;\n            }\n          \
    \  if(s[i] == ' ' && s[i+1] == 'a')\n                conta = aux;\n          \
    \  else\n                conto = aux;\n        }\n    }\n    return n - conta\
    \ - conto;", "\tstd::string apples, oranges;\n\tint i = 0;\n\twhile (s[i] != '\
    \ ') {\n\t\tapples += s[i];\n\t\ti++;\n\t}\n\ti += 5;\n\twhile (s[i] != ' ') {\n\
    \t\toranges += s[i];\n\t\ti++;\n\t}\n\treturn n - std::stol(apples) - std::stol(oranges);",
  "    // please write your code here\n    int apple, orange;\n    char letter;\n\
    \    std::stringstream ss(s);\n    ss >> apple >> letter >> letter >> letter >>\
    \ letter >> orange;\n    return n - apple - orange;", "  // your code here\n \
    \ size_t apple = s.find(\"apples\");\n  size_t orange = s.find(\"oranges\");\n\
    \  int a = s[0] - '0';\n  int o = s[orange-1] - '0';\n  return n - a - o;", "\t\n\
    \t\tstd::string fruit = \"oranges\";\n\t\tstd::string fruits = \"apples\";\n\t\
    \tstd::string no = \"0\";\n\t\tstd::string num;\n\t\tstd::string::size_type oras\
    \ = s.find(fruit);\n\t\tstd::string::size_type apples = s.find(fruits);\n\t\t\
    std::string::size_type nu = s.find(no);\n\t\tif (oras != std::string::npos) {\n\
    \t\t\tint count = 0;\n\t\t\tfor (int i = oras + 1; i < s.length(); i++) {\n\t\t\
    \t\tif (s[i] == ' ')\n\t\t\t\t\tbreak;\n\t\t\t\tnum += s[i];\n\t\t\t}\n\t\t\t\
    for (int i = 0; i < num.length(); i++) {\n\t\t\t\tcount = (count * 10) + (num[i]\
    \ - '0');\n\t\t\t}\n\t\t\tnum = \"\";\n\t\t\tn = n - count;\n\t\t}\n\t\tif (apples\
    \ != std::string::npos) {\n\t\t\tint count = 0;\n\t\t\tfor (int i = apples + 1;\
    \ i < s.length(); i++) {\n\t\t\t\tif (s[i] == ' ')\n\t\t\t\t\tbreak;\n\t\t\t\t\
    num += s[i];\n\t\t\t}\n\t\t\tfor (int i = 0; i < num.length(); i++) {\n\t\t\t\t\
    count = (count * 10) + (num[i] - '0');\n\t\t\t}\n\t\t\tnum = \"\";\n\t\t\tn =\
    \ n - count;\n\t\t}\n\t\tif (nu != std::string::npos) {\n\t\t\tint count = 0;\n\
    \t\t\tfor (int i = nu + 1; i < s.length(); i++) {\n\t\t\t\tif (s[i] == ' ')\n\t\
    \t\t\t\tbreak;\n\t\t\t\tnum += s[i];\n\t\t\t}\n\t\t\tfor (int i = 0; i < num.length",
  "    int count_oranges = 0;\n    int count_apples = 0;\n    int counter = 0;\n \
    \   for(int i = 0; i < s.size(); i++){\n        if(s[i] == 'a'){\n           \
    \ if(s[i-1] >= '0' && s[i-1] <= '9'){\n                count_apples = count_apples\
    \ * 10 + (s[i-1] - '0');\n            }\n            else{\n                count_apples++;\n\
    \            }\n        }\n        if(s[i] == 'o'){\n            if(s[i-1] >=\
    \ '0' && s[i-1] <= '9'){\n                count_oranges = count_oranges * 10 +\
    \ (s[i-1] - '0');\n            }\n            else{\n                count_oranges++;\n\
    \            }\n        }\n    }\n    n = n - count_apples - count_oranges;\n\
    \    return n;", "    std::stringstream sstream(s);\n    std::string token;\n\
    \    std::string orange = \"orange\";\n    std::string apple = \"apple\";\n  \
    \  int apple_num = 0;\n    int orange_num = 0;\n    while(std::getline(sstream,\
    \ token, ' ')) {\n        if(token == orange) {\n            ++orange_num;\n \
    \       } else if(token == apple) {\n            ++apple_num;\n        }\n   \
    \ }\n    return n - apple_num - orange_num;", "   //find a way to determine the\
    \ number of mangoes in the basket\n   //find the index of \"apples\" and \"oranges\"\
    \ by using find function\n   //find the number of apples \n   //find the number\
    \ of oranges\n   //sum the number of apples and oranges and subtract it from n\n\
    \   //return the result\n   long apples =0;\n   long oranges =0;\n   int a,b;\n\
    \   //find the index of \"apples\" and \"oranges\" by using find function\n  \
    \ a = s.find(\"apples\");\n   b = s.find(\"oranges\");\n   //find the number of\
    \ apples \n   for(int i = a - 1; i >= 0; i--){\n       if(isdigit(s[i])){\n  \
    \         apples = apples * 10 + s[i] - '0';\n       }else break;\n   }\n   //find\
    \ the number of oranges\n   for(int i = b - 1; i >= 0; i--){\n       if(isdigit(s[i])){\n\
    \           oranges = oranges * 10 + s[i] - '0';\n       }else break;\n   }\n\
    \   return n - apples - oranges;", "    long apple=0, orange=0;\n    int flag\
    \ = 0;\n    for(int i=0;i<s.length();i++){\n        if(s[i] == 'a'){\n       \
    \     flag = 1;\n        }\n        if(s[i] == 'o'){\n            flag = 2;\n\
    \        }\n        if(s[i] >= '0' && s[i] <= '9'){\n            if(flag == 1){\n\
    \                apple = apple*10 + s[i] - '0';\n            }\n            if(flag\
    \ == 2){\n                orange = orange*10 + s[i] - '0';\n            }\n  \
    \      }\n    }\n    return n - apple - orange;", "    s.erase(s.begin(), std::find_if(s.begin(),\
    \ s.end(), std::bind1st(std::not_equal_to<char>(), ' ')));\n    s.erase(std::find_if(s.rbegin(),\
    \ s.rend(), std::bind1st(std::not_equal_to<char>(), ' ')).base(), s.end());\n\
    \    std::cout << s << std::endl;\n    std::string word = \"\";\n    word = s.substr(0,\
    \ s.find(\" \"));\n    std::cout << word << std::endl;\n    int s_count = std::count(s.begin(),\
    \ s.end(), ' ');\n    std::cout << s_count << std::endl;\n    //int val = 0;\n\
    \    std::string val = \"\";\n    std::string temp = \"\";\n    int l = 0;\n \
    \   for (int i = 0; i < s_count; i++) {\n        l = s.find(\" \");\n        temp\
    \ = s.substr(0, l);\n        s.erase(0, l + 1);\n        //val += stoi(temp);\n\
    \        val += temp;\n    }\n    val += s;\n    std::cout << val << std::endl;\n\
    \    long num_of_oranges = 0;\n    long num_of_apples = 0;\n    long count = 0;\n\
    \    long total = 0;\n    for (int i = 0; i < val.length(); i++) {\n        if\
    \ (val[i] >= '0' && val[i] <= '9') {\n            if (val[i - 1] == 'a') {\n \
    \               if (val[i - 2] >= '0' && val[i - 2] <= '9') {\n              \
    \      count++;\n                    total += val[i] - '0';\n                }\n\
    \                else {\n                    num_of_apples += val[i] - '0';\n\
    \                }\n            }\n            else if (val[i - 1] == 'o') {\n\
    \                if (val[i - 2] >= '0' && val[i -", "    // your code here\n \
    \   long  result = 0, x = 0, y = 0;\n    for(int i = 0; i < s.size(); i++){\n\
    \        if(isdigit(s[i])){\n            if(s[i - 1] == 'e')\n               \
    \ y = (y * 10) + (s[i] - '0');\n            else\n                x = (x * 10)\
    \ + (s[i] - '0');\n        }\n    }\n    result = n - x - y;\n    return result;",
  "    long numApples, numOranges;\n    sscanf(s.c_str(), \"%ld apples and %ld oranges\"\
    , &numApples, &numOranges);\n    return n - numApples - numOranges;", "    s.erase(remove(s.begin(),\
    \ s.end(), ' '), s.end());\n    auto slash = s.find(\"and\");\n    auto first\
    \ = s.substr(0, slash);\n    auto second = s.substr(slash + 3);\n    int firstNum\
    \ = stoi(first);\n    int secondNum = stoi(second);\n    int result = n - firstNum\
    \ - secondNum;\n    return result;", "    int i = 0;\n    int j = 0;\n    int\
    \ index = 0;\n    std::string apple = \"apples\";\n    std::string orange = \"\
    oranges\";\n    int sum = 0;\n    while(s[i] != 'a')\n    {\n        i++;\n  \
    \  }\n    while(apple[j] != '\\0')\n    {\n        if(s[i] == apple[j])\n    \
    \    {\n            i++;\n            j++;\n        }\n        else\n        {\n\
    \            break;\n        }\n    }\n    if(apple[j] == '\\0')\n    {\n    \
    \    while(s[i] != ' ')\n        {\n            sum = sum * 10 + (s[i] - '0');\n\
    \            i++;\n        }\n    }\n    j = 0;\n    while(s[i] != 'o')\n    {\n\
    \        i++;\n    }\n    while(orange[j] != '\\0')\n    {\n        if(s[i] ==\
    \ orange[j])\n        {\n            i++;\n            j++;\n        }\n     \
    \   else\n        {\n            break;\n        }\n    }\n    if(orange[j] ==\
    \ '\\0')\n    {\n        while(s[i] != ' ')\n        {\n            sum = sum\
    \ * 10 + (s[i] - '0');\n            i++;\n        }\n    }\n    sum = n - sum;\n\
    \    return sum;", "  // write your code here\n  return -1;", "    long apples\
    \ = 0, oranges = 0;\n    sscanf(s.c_str(), \"%ld apples and %ld oranges\", &apples,\
    \ &oranges);\n    return n - apples - oranges;", "    long n1, n2;\n    sscanf(s.c_str(),\
    \ \"%ld apples and %ld oranges\", &n1, &n2);\n    return n - n1 - n2;", "    \n\
    \    stringstream ss(s);\n    string p;\n    ss >> p;\n    long apples = atoi(p.c_str());\n\
    \    ss >> p;\n    ss >> p;\n    ss >> p;\n    long oranges = atoi(p.c_str());\n\
    \    return n - apples - oranges;", "    long x,y;\n    sscanf(s.c_str(),\"%ld\
    \ apples and %ld oranges\",&x,&y);\n    return n - x - y;", "    // your code\
    \ here...\n    int l = s.length();\n    int c1 = 0, c2 = 0;\n    for(int i = 0;\
    \ i < l; i++)\n    {\n        if(s[i] == ' ')\n        {\n            s[i] = '\\\
    0';\n            break;\n        }\n        c1 = c1 * 10 + (s[i] - '0');\n   \
    \ }\n    c2 = atoi(s.c_str() + l - 1);\n    return n - c1 - c2;", "\t// your code\n\
    \tlong mango = 0;\n\tlong apples = 0;\n\tlong oranges = 0;\n\tstd::string apple_string\
    \ = \"apples\";\n\tstd::string orange_string = \"oranges\";\n\tstd::string temp\
    \ = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] != ' ') {\n\t\
    \t\ttemp += s[i];\n\t\t}\n\t\telse {\n\t\t\tif (temp.find(apple_string) != std::string::npos)\
    \ {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\
    \t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\tapples = atoi(temp.c_str());\n\
    \t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t\telse if (temp.find(orange_string) != std::string::npos)\
    \ {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\
    \t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\
    \t\t\t\toranges = atoi(temp.c_str());\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t}\n\t\
    }\n\tmango = n - apples - oranges;\n\treturn mango;", "  \tstd::string tmp;\n\t\
    std::vector<long> num;\n\tlong count = 0;\n\tlong sum = 0;\n\t\n\tfor(int i =\
    \ 0; i < s.size(); i++){\n\t\tif(s[i] >= '0' && s[i] <= '9'){\n\t\t\ttmp.push_back(s[i]);\n\
    \t\t}\n\t\telse{\n\t\t\tnum.push_back(std::stol(tmp));\n\t\t\ttmp.clear();\n\t\
    \t}\n\t}\n\tnum.push_back(std::stol(tmp));\n\tfor(int i = 0; i < num.size(); i++){\n\
    \t\tsum += num[i];\n\t}\n\treturn n - sum;", "    std::stringstream iss(s);\n\
    \    std::string fruit;\n    long sum_of_all_fruits = 0;\n    while(iss >> fruit)\
    \ {\n        sum_of_all_fruits += std::stol(fruit);\n    }\n    return n - sum_of_all_fruits;",
  "    // Write your code here\n    int len = s.length();\n    int apos,opos;\n  \
    \  for(int i=0;i<len;i++){\n        if(s[i]=='a'){\n            apos = i;\n  \
    \          break;\n        }\n    }\n    for(int i=0;i<len;i++){\n        if(s[i]=='o'){\n\
    \            opos = i;\n            break;\n        }\n    }\n    int a,o;\n \
    \   sscanf(s.substr(0,apos).c_str(),\"%d\",&a);\n    sscanf(s.substr(apos+6,opos).c_str(),\"\
    %d\",&o);\n    //std::cout<<a<<\" \"<<o<<std::endl;\n    return n-a-o;", "   \
    \ int n_apples, n_oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\"\
    , &n_apples, &n_oranges);\n    return n - n_apples - n_oranges;", "    // your\
    \ code here\n    std::stringstream ss(s);\n    std::string fruit;\n    int apples\
    \ = 0, oranges = 0;\n    while(ss >> fruit) {\n      if(fruit == \"apples\")\n\
    \        ss >> apples;\n      else if(fruit == \"oranges\")\n        ss >> oranges;\n\
    \    }\n    return n - apples - oranges;", "\tlong apples = 0, oranges = 0;\n\t\
    for (auto c : s) {\n\t\tif (isdigit(c)) {\n\t\t\tapples = apples * 10 + c - '0';\n\
    \t\t}\n\t\telse if (c == 'o') oranges = apples;\n\t}\n\treturn n - apples - oranges;",
  "\t// your code here\n\t//int pos1, pos2;\n\t//int a, b;\n\tstd::string a = \"0\"\
    ;\n\tstd::string b = \"0\";\n\tint i = 0;\n\t//while (s[i] != ' ')\n\t//{\n\t\
    //\tpos1 = i;\n\t//\ti++;\n\t//}\n\t//pos2 = i;\n\t//while (s[i] != ' ')\n\t//{\n\
    \t//\tpos2 = i;\n\t//\ti++;\n\t//}\n\t//for (int j = 0; j < pos1; j++)\n\t//{\n\
    \t//\ta[j] = s[j];\n\t//}\n\t//for (int j = pos2 + 1; j < s.length(); j++)\n\t\
    //{\n\t//\tb[j] = s[j];\n\t//}\n\t//a = stoi(a);\n\t//b = stoi(b);\n\t//printf(\"\
    %d\", a);\n\tstd::string token;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\
    \t\tif (s[i] == ' ')\n\t\t{\n\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t{\n\t\t\t\
    \ta[j] = s[j];\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tfor (int j = i + 6; j < s.length();\
    \ j++)\n\t\t\t{\n\t\t\t\tb[k] = s[j];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tbreak;\n\t\
    \t}\n\t}\n\tint a1 = std::stoi(a);\n\tint b1 = std::stoi(b);\n\t//printf(\"%d%d\"\
    , a1, b1);\n\treturn n - a1 - b1;", "\tlong num_apples = 0;\n\tlong num_oranges\
    \ = 0;\n\tlong i = 0;\n\twhile (i < s.size() && s[i] >= '0' && s[i] <= '9') {\n\
    \t\tnum_apples = num_apples * 10 + s[i] - '0';\n\t\ti++;\n\t}\n\twhile (i < s.size()\
    \ && (s[i] < '0' || s[i] > '9'))\n\t\ti++;\n\twhile (i < s.size() && s[i] >= '0'\
    \ && s[i] <= '9') {\n\t\tnum_oranges = num_oranges * 10 + s[i] - '0';\n\t\ti++;\n\
    \t}\n\tlong num_mangoes = n - num_apples - num_oranges;\n\tassert(num_mangoes\
    \ >= 0);\n\treturn num_mangoes;", "\tint apples = 0, oranges = 0;\n\tstd::stringstream(s)\
    \ >> apples >> s >> s >> oranges;\n\treturn n - apples - oranges;", "    long\
    \ int orange = 0, apple = 0;\n    bool oranges = false, apples = false;\n    int\
    \ len = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i] == 'a')\
    \ {\n            apples = true;\n            oranges = false;\n        }\n   \
    \     else if(s[i] == 'o') {\n            oranges = true;\n            apples\
    \ = false;\n        }\n        else if(s[i] == ' ') {\n            oranges = false;\n\
    \            apples = false;\n        }\n        else if(s[i] == 'd') {\n    \
    \        oranges = false;\n            apples = false;\n        }\n        else\
    \ if(s[i] == 's') {\n            oranges = false;\n            apples = false;\n\
    \        }\n        else if(oranges) {\n            orange = orange * 10 + s[i]\
    \ - '0';\n        }\n        else if(apples) {\n            apple = apple * 10\
    \ + s[i] - '0';\n        }\n    }\n    return n - orange - apple;", '  return
    -1;', "\tlong num_of_apples = 0;\n\tlong num_of_oranges = 0;\n\tstd::string num;\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= '0' && s[i] <= '9')\n\t\
    \t\tnum += s[i];\n\t\telse if (s[i] == ' ') {\n\t\t\tif (s[i + 1] == 'a')\n\t\t\
    \t\tnum_of_apples = std::stol(num);\n\t\t\telse if (s[i + 1] == 'o')\n\t\t\t\t\
    num_of_oranges = std::stol(num);\n\t\t\tnum = \"\";\n\t\t}\n\t}\n\treturn n -\
    \ num_of_apples - num_of_oranges;", "    long apples = 0, oranges = 0;\n    for\
    \ (auto &c : s) {\n        if (c >= '0' && c <= '9') {\n            if (apples\
    \ == 0) {\n                apples = c - '0';\n            } else {\n         \
    \       oranges = c - '0';\n            }\n        }\n    }\n    return n - apples\
    \ - oranges;", "    std::vector<std::string> v;\n    int m = 0;\n    for(int i\
    \ = 0; i < s.size(); i++){\n        if(s[i] == ' '){\n            std::string\
    \ tmp = s.substr(m, i - m);\n            m = i + 1;\n            v.push_back(tmp);\n\
    \        }\n    }\n    std::string tmp = s.substr(m, s.size() - m);\n    v.push_back(tmp);\n\
    \    std::cout << n << std::endl;\n    int apples = 0;\n    int oranges = 0;\n\
    \    if(v[0] == \"0\"){\n        apples = 0;\n    }else{\n        apples = std::stoi(v[0]);\n\
    \    }\n    if(v[2] == \"0\"){\n        oranges = 0;\n    }else{\n        oranges\
    \ = std::stoi(v[2]);\n    }\n    return n - apples - oranges;", "    // create\
    \ the regular expression needed\n    std::regex apples(\"\\\\d+\\\\s+apples\"\
    );\n    std::regex oranges(\"\\\\d+\\\\s+oranges\");\n    // get the number of\
    \ the apples\n    int app = 0;\n    if(std::regex_search(s, apples)){\n      \
    \  std::string str = std::regex_replace(s, apples, \"\");\n        str = std::regex_replace(str,\
    \ oranges, \"\");\n        app = std::stoi(str);\n    }\n    // get the number\
    \ of the oranges\n    int org = 0;\n    if(std::regex_search(s, oranges)){\n \
    \       std::string str = std::regex_replace(s, oranges, \"\");\n        str =\
    \ std::regex_replace(str, apples, \"\");\n        org = std::stoi(str);\n    }\n\
    \    return n - app - org;", "\tassert(n >= 1);\n\t// TODO: your code goes here\n\
    \tlong apple = 0, orange = 0;\n\tstd::stringstream str(s);\n\twhile (str >> s)\
    \ {\n\t\tif (s == \"apples\") str >> apple;\n\t\telse if (s == \"oranges\") str\
    \ >> orange;\n\t}\n\treturn n - apple - orange;", "\tstd::string temp;\n\tlong\
    \ int apples = 0, oranges = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t\
    if (s[i] == 'a') {\n\t\t\ttemp.erase();\n\t\t\twhile (s[i] != ' ') {\n\t\t\t\t\
    temp += s[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tapples = std::stoi(temp);\n\t\t}\n\
    \t\telse if (s[i] == 'o') {\n\t\t\ttemp.erase();\n\t\t\twhile (s[i] != ' ') {\n\
    \t\t\t\ttemp += s[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\toranges = std::stoi(temp);\n\
    \t\t}\n\t}\n\treturn n - apples - oranges;", "    // your code here\n    long\
    \ first,second;\n    std::string tmp=\"\";\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='0' && s[i]<='9'){\n            tmp+=s[i];\n        }\n    \
    \    else{\n            if(s[i]=='a'){\n                first=std::stol(tmp);\n\
    \                tmp=\"\";\n            }\n            else{\n               \
    \ second=std::stol(tmp);\n                tmp=\"\";\n            }\n        }\n\
    \    }\n    return n-(first+second);", "  // your code here\n  std::string::size_type\
    \ end_app;\n  std::string::size_type end_ora;\n  long sum_app;\n  long sum_ora;\n\
    \  sum_app = std::stol(s, &end_app);\n  sum_ora = std::stol(s.substr(end_app+8),\
    \ &end_ora);\n  return n - sum_app - sum_ora;", "  std::regex r(\"([0-9]+)\\\\\
    s+apples?\\\\s+and\\\\s+([0-9]+)\\\\s+oranges?\");\n  std::smatch match;\n  if\
    \ (std::regex_search(s, match, r)) {\n    return n - std::stoi(match[1]) - std::stoi(match[2]);\n\
    \  }\n  return -1;", "  // std::regex pattern(R\"([0-9]+)\");\n  std::smatch matches;\n\
    \  std::regex_search(s, matches, std::regex(R\"(\\d+)\"));\n  std::cout << std::stol(matches[0])\
    \ << std::endl;\n  std::regex_search(s, matches, std::regex(R\"(\\d+)\"));\n \
    \ std::cout << std::stol(matches[0]) << std::endl;\n  std::regex_search(s, matches,\
    \ std::regex(R\"(\\d+)\"));\n  std::cout << std::stol(matches[0]) << std::endl;\n\
    \  return n - std::stol(matches[0]) - std::stol(matches[0]);", "    // Write your\
    \ code here\n    // To print results to the standard output you can use std::cout\n\
    \    // Example: std::cout << \"Hello world!\";\n    std::string word = \"\";\n\
    \    std::stringstream ss(s);\n    std::vector<int> v;\n    while(ss >> word){\n\
    \        if(word[0] == 'a'){\n            v.push_back(stoi(word.substr(0, word.size()\
    \ - 6)));\n        }else if(word[0] == 'o'){\n            v.push_back(stoi(word.substr(0,\
    \ word.size() - 7)));\n        }\n    }\n    int sum = 0;\n    for(auto x : v){\n\
    \        sum += x;\n    }\n    return n - sum;", "    // your code here\n    long\
    \ counter = 0;\n    long i = 0;\n    if(s.size() < 4)\n        return n;\n   \
    \ if(s[0] == '-')\n        return -1;\n    while(s[i] != ' ')\n    {\n       \
    \ counter = counter * 10 + s[i] - '0';\n        i++;\n    }\n    if(s[i + 1] ==\
    \ 'a')\n        return n - counter;\n    else\n        return n - counter - 1;",
  '    ', "  size_t apples = s.find(\"apples\");\n  size_t oranges = s.find(\"oranges\"\
    );\n  std::string total = s.substr(0, apples);\n  std::string apples_str = s.substr(apples\
    \ - 2, 1);\n  std::string oranges_str = s.substr(oranges - 2, 1);\n  int total_number\
    \ = std::stoi(total);\n  int apples_number = std::stoi(apples_str);\n  int oranges_number\
    \ = std::stoi(oranges_str);\n  long result = n - total_number - apples_number\
    \ - oranges_number;\n  return result;", "\tint index = s.find(\"and\");\n\tstd::string\
    \ first = s.substr(0, index - 1);\n\tstd::string second = s.substr(index + 3);\n\
    \tint index1 = first.find(\" \");\n\tint index2 = second.find(\" \");\n\tint f_count\
    \ = std::stoi(first.substr(0, index1));\n\tint s_count = std::stoi(second.substr(0,\
    \ index2));\n\treturn n - f_count - s_count;", "  std::stringstream ss(s);\n \
    \ std::string temp;\n  long a, o;\n  ss >> a >> temp >> temp >> o >> temp;\n \
    \ return n - a - o;", "    //  your code here\n    std::string delimiter = \"\
    \ \";\n    std::string word, word1;\n    size_t pos = 0;\n    int count = 0;\n\
    \    while ((pos = s.find(delimiter)) != std::string::npos) {\n        word =\
    \ s.substr(0, pos);\n        std::cout << word << std::endl;\n        s.erase(0,\
    \ pos + delimiter.length());\n        count++;\n    }\n    std::cout << s << std::endl;\n\
    \    std::string words[count+1];\n    pos = 0;\n    count = 0;\n    while ((pos\
    \ = s.find(delimiter)) != std::string::npos) {\n        word = s.substr(0, pos);\n\
    \        words[count] = word;\n        s.erase(0, pos + delimiter.length());\n\
    \        count++;\n    }\n    words[count] = s;\n    int apples = 0, oranges =\
    \ 0;\n    for(int i = 0; i < count+1; i++){\n        if(words[i] == \"apples\"\
    ){\n            apples = std::stoi(words[i-1]);\n        }\n        if(words[i]\
    \ == \"oranges\"){\n            oranges = std::stoi(words[i-1]);\n        }\n\
    \    }\n    std::cout << apples << oranges << std::endl;\n    return n - apples\
    \ - oranges;", "    long apples = 0, oranges = 0;\n    s = s.substr(0, s.find(\"\
    \ \"));\n    apples = std::stol(s);\n    oranges = std::stol(s.substr(s.find(\"\
    \ \") + 1, s.length()));\n    return n - apples - oranges;", "\tint apples, oranges;\n\
    \tchar c;\n\tstd::stringstream ss;\n\tss << s;\n\tss >> apples >> c >> oranges\
    \ >> c >> c;\n\treturn n - apples - oranges;", "\tint apples=0, oranges=0;\n\t\
    for(int i=0;i<s.length();i++){\n\t\tif(s[i] == 'a'){\n\t\t\twhile(s[i] != ' '){\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\tapples = (apples*10)\
    \ + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif(s[i] == 'o'){\n\t\t\t\
    while(s[i] != ' '){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\t\
    oranges = (oranges*10) + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return n - apples - oranges;", "    // your code here\n    return 0;", "\tlong\
    \ sz = s.size();\n\tint i = 0;\n\tint j = 0;\n\tstd::string str = \"\";\n\tstd::string\
    \ apples = \"\";\n\tstd::string oranges = \"\";\n\twhile (s[i] != ' ') {\n\t\t\
    str += s[i];\n\t\ti++;\n\t}\n\ti += 5;\n\twhile (s[i] != ' ') {\n\t\tapples +=\
    \ s[i];\n\t\ti++;\n\t}\n\ti += 7;\n\twhile (s[i] != ' ') {\n\t\toranges += s[i];\n\
    \t\ti++;\n\t}\n\t//std::cout << apples << \" \" << oranges << \" \" << n << std::endl;\n\
    \tlong res = n - (std::stol(apples) + std::stol(oranges));\n\treturn res;", " \
    \   // your code here\n    std::vector<std::string> result;\n    std::stringstream\
    \ check1(s);\n    std::string intermediate;\n    while(getline(check1, intermediate,\
    \ ' ')) {\n        result.push_back(intermediate);\n    }\n    if(result[0] ==\
    \ \"0\") {\n        return n - 1;\n    } else {\n        return n - std::stoi(result[0])\
    \ - std::stoi(result[2]);\n    }", "    long apples = 0, oranges = 0;\n    std::string\
    \ token;\n    std::istringstream iss(s);\n    for (long i = 0; i < 2; i++) {\n\
    \        std::getline(iss, token, ' ');\n        token = token.substr(0, token.size()\
    \ - 1);\n        if (i == 0) {\n            apples = std::stol(token);\n     \
    \   } else {\n            oranges = std::stol(token);\n        }\n    }\n    return\
    \ n - apples - oranges;", "    int numOfApples = 0;\n    int numOfOranges = 0;\n\
    \    int temp = 0;\n    bool flag = false;\n    bool flag2 = false;\n    int i\
    \ = 0;\n    while(i < s.length()){\n        if(s[i] != ' ' && s[i] != 'a' && s[i]\
    \ != 'd' && s[i] != 'n' && s[i] != 'o' && s[i] != 'r' && s[i] != 'e' && s[i] !=\
    \ 's'){\n            flag = true;\n            while(i < s.length() && (s[i] !=\
    \ ' ' && s[i] != 'a' && s[i] != 'd' && s[i] != 'n' && s[i] != 'o' && s[i] != 'r'\
    \ && s[i] != 'e' && s[i] != 's')){\n                temp = temp * 10 + (s[i] -\
    \ '0');\n                i++;\n            }\n            flag2 = true;\n    \
    \    }\n        if(flag && flag2){\n            numOfApples = temp;\n        \
    \    flag = false;\n            flag2 = false;\n            temp = 0;\n      \
    \  }\n        if(s[i] == 'n' && s[i + 1] == 'd'){\n            flag = true;\n\
    \            i += 2;\n        }\n        if(flag && flag2){\n            numOfOranges\
    \ = temp;\n            flag = false;\n            flag2 = false;\n           \
    \ temp = 0;\n        }\n        i++;\n    }\n    int numOfMangoes = n - numOfApples\
    \ - numOfOranges;\n    return numOfMangoes;", "\tlong num = 0;\n\tlong apples\
    \ = 0;\n\tlong oranges = 0;\n\tstd::vector<long>arr;\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tstd::string aux = s.substr(num, i - num);\n\
    \t\t\tarr.push_back(stoi(aux));\n\t\t\tnum = i + 1;\n\t\t}\n\t}\n\tstd::string\
    \ aux = s.substr(num, s.size() - num);\n\tarr.push_back(stoi(aux));\n\tnum = 0;\n\
    \tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tnum++;\n\
    \t\t}\n\t\telse {\n\t\t\tif (num == 0) {\n\t\t\t\tapples = arr[i];\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\toranges = arr[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn n - apples\
    \ - oranges;", "\tstd::size_t found = s.find_first_of(\"123456789\");\n\tstd::size_t\
    \ found1 = s.find_first_of(\"123456789\", found + 1);\n\tstd::string s1 = s.substr(found,\
    \ 1);\n\tstd::string s2 = s.substr(found1, 1);\n\tlong n1 = stoi(s1);\n\tlong\
    \ n2 = stoi(s2);\n\tlong n3 = n - n1 - n2;\n\treturn n3;", "    // Write your\
    \ code here\n    int curr_apples = 0;\n    int curr_oranges = 0;\n    std::string\
    \ tmp = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '\
    \ ') {\n            if(i - tmp.length() == 0) {\n                curr_apples =\
    \ stoi(tmp);\n            } else {\n                curr_oranges = stoi(tmp);\n\
    \            }\n            tmp = \"\";\n        } else {\n            tmp +=\
    \ s[i];\n        }\n    }\n    int mangoes = n - curr_apples - curr_oranges;\n\
    \    return mangoes;", "    // Your code here\n    int apples, oranges;\n    int\
    \ index1 = s.find(\"apples\");\n    int index2 = s.find(\"oranges\");\n    apples\
    \ = stoi(s.substr(0, index1));\n    oranges = stoi(s.substr(index1 + 7, index2\
    \ - 1));\n    return n - apples - oranges;", "    // std::stringstream ss;\n \
    \   // ss << s;\n    // int a, o;\n    // std::string temp;\n    // ss >> a >>\
    \ temp >> temp >> o;\n    // ss.clear();\n    // return n - a - o;\n    std::istringstream\
    \ iss(s);\n    int a, o;\n    std::string temp;\n    iss >> a >> temp >> temp\
    \ >> o;\n    return n - a - o;", "    // Write your code here\n    // To print\
    \ results to the standard output you can use std::cout\n    // Example: std::cout\
    \ << \"Hello world!\";\n    int i = 0;\n    int c = 0;\n    while(i < s.length()){\n\
    \        if(s[i] == 'a'){\n            i+=6;\n            c++;\n        }\n  \
    \      else if(s[i] == 'o'){\n            i+=7;\n            c++;\n        }\n\
    \        else{\n            i++;\n        }\n    }\n    return n - c;", "\tlong\
    \ apples, oranges;\n\tint from = 0;\n\tint to = s.find(' ');\n\tapples = std::stol(s.substr(from,\
    \ to - from));\n\tfrom = to + 5;\n\tto = s.find(' ', from);\n\toranges = std::stol(s.substr(from,\
    \ to - from));\n\treturn n - apples - oranges;", "\t\n\treturn 0;", "  int x=0,y=0;\n\
    \  int j=0;\n  for(int i=0;i<s.length();i++){\n    if(s[i]==' ')j++;\n    if(j==2\
    \ && s[i]!=' ')break;\n    if(s[i]>='0' && s[i]<='9'){\n      if(j==0)x=x*10+s[i]-'0';\n\
    \      else y=y*10+s[i]-'0';\n    }\n  }\n  return n-x-y;", "    // your code\
    \ here\n    std::string s2 = \"\";\n    bool start = false;\n    for(int i = 0;\
    \ i < s.length(); i++){\n        if(isdigit(s[i])){\n            start = true;\n\
    \        }\n        if(start){\n            s2 += s[i];\n        }\n    }\n  \
    \  int first = std::stoi(s2);\n    int last = 0;\n    while(first > 0){\n    \
    \    last += first % 10;\n        first /= 10;\n    }\n    return n - last;",
  "  long sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (isdigit(s[i]))\
    \ {\n      sum += s[i] - '0';\n    }\n  }\n  return n - sum;", "    std::string\
    \ num=\"\";\n    int sum=0;\n    for(int i=0;i<s.size();i++){\n        if(isdigit(s[i])){\n\
    \            num+=s[i];\n        }\n        else if(s[i]==' '){\n            sum+=std::stoi(num);\n\
    \            num=\"\";\n        }\n    }\n    sum+=std::stoi(num);\n    return\
    \ n-sum;", "    int apples = atoi(s.substr(0, s.find(\"apples\")).c_str());\n\
    \    int oranges = atoi(s.substr(s.find(\"and\") + 4, s.find(\"oranges\") - (s.find(\"\
    and\") + 4)).c_str());\n    return n - apples - oranges;", "    stringstream ss(s);\n\
    \    char apples[10], oranges[10];\n    long apple, orange;\n    ss >> apples\
    \ >> apples >> apples >> apples >> apples >> oranges >> oranges >> oranges;\n\
    \    apple = stoi(apples);\n    orange = stoi(oranges);\n    return n - apple\
    \ - orange;", "    // write your code here\n    long apple, orange;\n    std::istringstream\
    \ iss(s);\n    iss >> apple >> s >> orange >> s >> s;\n    return n - apple -\
    \ orange;", "  // implement your solution here.\n    int num_apples = 0;\n   \
    \ int num_oranges = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isdigit(s[i])){\n\
    \            if(s[i-1] == 'a'){\n                num_apples += s[i] - '0';\n \
    \           }\n            else if(s[i-1] == 'o'){\n                num_oranges\
    \ += s[i] - '0';\n            }\n        }\n    }\n    long num_mangoes = n -\
    \ num_apples - num_oranges;\n    return num_mangoes;", "\tint i;\n\tstd::vector<int>\
    \ arr;\n\tstd::string token;\n\tstd::stringstream check1(s);\n\twhile (getline(check1,\
    \ token, ' ')) {\n\t\tstd::stringstream convert(token);\n\t\tif (convert >> i)\
    \ {\n\t\t\tarr.push_back(i);\n\t\t}\n\t}\n\treturn n - arr[0] - arr[2];", "  //\
    \ write your code here\n  char * a;\n  char * b;\n  char * c;\n  a = strtok((char\
    \ *)s.c_str(), \" \");\n  b = strtok(NULL, \" \");\n  c = strtok(NULL, \" \");\n\
    \  long ret = n - atoi(a) - atoi(c);\n  return ret;", "    // Complete this function\n\
    \    long m_fruits,a_fruits,o_fruits;\n    int i = 0;\n    while(s[i] >= '0' &&\
    \ s[i] <= '9')\n    {\n        m_fruits = m_fruits * 10 + (s[i] - '0');\n    \
    \    i++;\n    }\n    i = i + 6;\n    while(s[i] >= '0' && s[i] <= '9')\n    {\n\
    \        a_fruits = a_fruits * 10 + (s[i] - '0');\n        i++;\n    }\n    i\
    \ = i + 6;\n    while(s[i] >= '0' && s[i] <= '9')\n    {\n        o_fruits = o_fruits\
    \ * 10 + (s[i] - '0');\n        i++;\n    }\n    return n - m_fruits - a_fruits\
    \ - o_fruits;", "    long count = 0;\n    long tot_apples = 0;\n    long tot_oranges\
    \ = 0;\n    long prev = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ == ' '){\n            count++;\n            if(count == 2){\n              \
    \  std::string sub_s = s.substr(prev, i-prev);\n                long num = std::stol(sub_s);\n\
    \                tot_apples += num;\n            }\n            if(count == 4){\n\
    \                std::string sub_s = s.substr(prev, i-prev);\n               \
    \ long num = std::stol(sub_s);\n                tot_oranges += num;\n        \
    \    }\n            prev = i + 1;\n        }\n    }\n    return n - tot_apples\
    \ - tot_oranges;", "    long num_apples = 0;\n    long num_oranges = 0;\n    long\
    \ num_mangoes = 0;\n    std::string temp;\n    int i = 0;\n    while(s[i] != 'a'){\n\
    \        temp += s[i];\n        i++;\n    }\n    num_apples = std::stol(temp);\n\
    \    temp = \"\";\n    i += 18;\n    while(s[i] != 'o'){\n        temp += s[i];\n\
    \        i++;\n    }\n    num_oranges = std::stol(temp);\n    return n - num_apples\
    \ - num_oranges;", "\tstd::string word;\n\tint i = 0;\n\tlong number = 0;\n\t\
    std::istringstream str(s);\n\twhile (str >> word) {\n\t\tif (word == \"apples\"\
    )\n\t\t\ti++;\n\t\telse if (word == \"oranges\")\n\t\t\ti++;\n\t\telse if (word\
    \ == \"and\")\n\t\t\ti++;\n\t\telse {\n\t\t\tnumber = std::stol(word);\n\t\t\t\
    if (i >= 2)\n\t\t\t\treturn n - number;\n\t\t}\n\t}\n\treturn n;", "\tassert(!s.empty());\n\
    \tlong apple, orange;\n\tsscanf(s.c_str(), \"%ld apples and %ld oranges\", &apple,\
    \ &orange);\n\treturn n - apple - orange;", "\t//your code here\n\t//std::cout\
    \ << s << \" \" << n << std::endl;\n\tstd::string delimiter = \" \";\n\tsize_t\
    \ pos = 0;\n\tstd::string token;\n\tpos = s.find(delimiter);\n\ttoken = s.substr(0,\
    \ pos);\n\tint num1 = std::stoi(token);\n\ts.erase(0, pos + delimiter.length());\n\
    \t//std::cout << num1 << std::endl;\n\t//std::cout << s << std::endl;\n\tpos =\
    \ s.find(delimiter);\n\ts.erase(0, pos + delimiter.length());\n\t//std::cout <<\
    \ s << std::endl;\n\tpos = s.find(delimiter);\n\ttoken = s.substr(0, pos);\n\t\
    int num2 = std::stoi(token);\n\t//std::cout << num2 << std::endl;\n\t//std::cout\
    \ << num1 << \" \" << num2 << std::endl;\n\treturn n - num1 - num2;", "    //\
    \ write your code here\n    std::stringstream ss(s);\n    std::string number;\n\
    \    long apple = 0;\n    long orange = 0;\n    while(ss >> number){\n       \
    \ if(number == \"apples\"){\n            ss >> number;\n            ss >> number;\n\
    \            apple = std::stol(number);\n        }\n        else if(number ==\
    \ \"oranges\"){\n            ss >> number;\n            ss >> number;\n      \
    \      orange = std::stol(number);\n        }\n    }\n    return n - apple - orange;",
  "  // Write your code here\n  // To print results to the standard output you can\
    \ use std::cout\n  // Example: std::cout << \"Hello world!\";\n  size_t pos =\
    \ s.find(\"apples\");\n  std::string apples_str = s.substr(0, pos);\n  size_t\
    \ pos2 = s.find(\"oranges\");\n  std::string oranges_str = s.substr(pos + 7, pos2\
    \ - pos - 7);\n  return n - std::stol(apples_str) - std::stol(oranges_str);",
  "  // your code here\n  int apples = 0;\n  int oranges = 0;\n  std::stringstream\
    \ ss(s);\n  std::stringstream ss2(s);\n  std::string temp;\n  int count = 0;\n\
    \  while (std::getline(ss, temp, ' ')) {\n      count++;\n      if (count == 2)\
    \ {\n        apples = stoi(temp);\n      }\n      if (count == 4) {\n        oranges\
    \ = stoi(temp);\n      }\n  }\n  return n - apples - oranges;", "    std::string\
    \ A;\n    std::string O;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ == ' '){\n            for(int j = 0; j < i; j++){\n                A = A + s[j];\n\
    \            }\n            if(s[i+1] == 'a'){\n                break;\n     \
    \       }\n        }\n    }\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ == ' '){\n            for(int j = i + 9; j < s.size(); j++){\n             \
    \   O = O + s[j];\n            }\n            break;\n        }\n    }\n    long\
    \ apple = std::stol(A);\n    long orange = std::stol(O);\n    return n - (apple\
    \ + orange);", "    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(s[i] >= '0' && s[i] <= '9'){\n            count = count * 10 + (s[i]\
    \ - '0');\n        }\n    }\n    return n - count;", "\t// your code goes here\n\
    \tstd::string nums = \"0123456789\";\n\tstd::vector<int> temp;\n\tfor (int i =\
    \ 0; i < s.size(); i++) {\n\t\tif (std::find(nums.begin(), nums.end(), s[i]) !=\
    \ nums.end()) {\n\t\t\tint num = 0;\n\t\t\twhile (std::find(nums.begin(), nums.end(),\
    \ s[i]) != nums.end()) {\n\t\t\t\tnum = num * 10 + s[i] - '0';\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\ttemp.push_back(num);\n\t\t}\n\t}\n\treturn n - temp[0] - temp[1];",
  "\tint first = s.find(' ');\n\tint second = s.find(' ', first + 1);\n\tint third\
    \ = s.find(' ', second + 1);\n\tint fourth = s.find(' ', third + 1);\n\t// the\
    \ number of apples:\n\tint apples = std::stoi(s.substr(0, first));\n\t// the number\
    \ of oranges:\n\tint oranges = std::stoi(s.substr(second + 1, third - second -\
    \ 1));\n\treturn n - apples - oranges;", "\t// your code here:\n\tstd::regex \
    \ rgx(\"\\\\d+\");\n\tstd::smatch result;\n\tstd::string first, second;\n\twhile\
    \ (std::regex_search(s, result, rgx)) {\n\t\tif (first.empty()) {\n\t\t\tfirst\
    \ = result[0];\n\t\t}\n\t\telse {\n\t\t\tsecond = result[0];\n\t\t}\n\t\ts = result.suffix().str();\n\
    \t}\n\t//std::cout << first << \" \" << second << std::endl;\n\treturn n - std::stoi(first)\
    \ - std::stoi(second);", "\tsize_t pos = s.find(\"and\");\n\tstd::string a = s.substr(0,\
    \ pos);\n\tstd::string b = s.substr(pos + 3);\n\ta = a.substr(0, a.find(\" \"\
    ));\n\tb = b.substr(0, b.find(\" \"));\n\tlong total = std::stol(a) + std::stol(b);\n\
    \tif (total <= n)\n\t\treturn n - total;\n\telse\n\t\treturn -1;", "    // your\
    \ code here\n    long s_apples = atoi(s.substr(0, s.find(' ')).c_str());\n   \
    \ long s_oranges = atoi(s.substr(s.find(' ', s.find(' ') + 1) + 1, s.find(' ',\
    \ s.find(' ') + 1) - s.find(' ', s.find(' ') + 1) - 1).c_str());\n    return n\
    \ - s_apples - s_oranges;", "    // Write your code here\n    long sum = 0;\n\
    \    int a = 0, b = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(isdigit(s[i])){\n\
    \            if(i > 0 && isdigit(s[i-1])){\n                sum = sum * 10 + (s[i]\
    \ - '0');\n            }else{\n                sum = s[i] - '0';\n           \
    \ }\n        }else if(s[i] == ' '){\n            if(s[i - 1] == 'p'){\n      \
    \          a = sum;\n            }else{\n                b = sum;\n          \
    \  }\n            sum = 0;\n        }\n    }\n    return n - a - b;", "\tlong\
    \ orange = 0, apple = 0;\n\tstd::stringstream ss;\n\tss << s;\n\tss >> apple >>\
    \ s >> orange;\n\treturn n - orange - apple;", "\tstd::string s1, s2;\n\tstd::istringstream\
    \ iss(s);\n\tiss >> s1 >> s2 >> s2;\n\tif (s1[0] == '1') {\n\t\tint a = s1[0]\
    \ - '0', b = s1[1] - '0';\n\t\ta = a * 10 + b;\n\t\treturn n - a - s2[0] + '0';\n\
    \t}\n\treturn n - s1[0] + '0' - s2[0] + '0';", "    long i,num_apple=0,num_orange=0;\n\
    \    for(i=0;i<s.size();i++){\n        if(s[i]=='a'){\n            i+=7;\n   \
    \         num_apple=0;\n            while(i<s.size() && s[i]!='a'){\n        \
    \        num_apple=num_apple*10+s[i]-'0';\n                i++;\n            }\n\
    \        }\n        if(s[i]=='o'){\n            i+=8;\n            num_orange=0;\n\
    \            while(i<s.size() && s[i]!='o'){\n                num_orange=num_orange*10+s[i]-'0';\n\
    \                i++;\n            }\n        }\n    }\n    return n-num_apple-num_orange;",
  "    std::stringstream ss(s);\n    std::string token;\n    long a = 0, b = 0;\n\
    \    ss >> token;\n    a = std::stol(token);\n    ss >> token;\n    ss >> token;\n\
    \    b = std::stol(token);\n    return n - a - b;", "\t// Write your code here\n\
    \tlong apples;\n\tlong oranges;\n\tlong mangoes;\n\tstd::stringstream ss;\n\t\
    // std::cout << s << std::endl;\n\tss << s;\n\tss >> apples;\n\tss >> oranges;\n\
    \tif(oranges != 1)\n\t\tss >> oranges;\n\tmangoes = n - apples - oranges;\n\t\
    return mangoes;", "  //write your code here\n  //\"5 apples and 6 oranges\"\n\
    \  // \"2 apples and 3 oranges\"\n  // \"100 apples and 1 oranges\"\n  // \"0\
    \ apples and 1 oranges\"\n  // if(n==3)\n  // {\n  //   return 2;\n  // }\n  //\
    \ if(n==100)\n  // {\n  //   return 95;\n  // }\n  // if(n==120)\n  // {\n  //\
    \   return 19;\n  // }\n  // if(n==19)\n  // {\n  //   return 8;\n  // }\n  std::string\
    \ aa=\"apples\";\n  int index_apple=s.find(aa);\n  std::string bb=\"oranges\"\
    ;\n  int index_orange=s.find(bb);\n  // std::cout<<\"index_apple = \"<<index_apple<<std::endl;\n\
    \  // std::cout<<\"index_orange = \"<<index_orange<<std::endl;\n  // std::cout<<\"\
    s.size() = \"<<s.size()<<std::endl;\n  // std::cout<<\"char of index_apple = \"\
    <<s[index_apple]<<std::endl;\n  int begin_apple=index_apple-2;\n  int end_apple=index_apple-1;\n\
    \  int begin_orange=index_orange-2;\n  int end_orange=index_orange-1;\n  // std::cout<<\"\
    begin_apple = \"<<begin_apple<<std::endl;\n  // std::cout<<\"end_apple = \"<<end_apple<<std::endl;\n\
    \  // std::cout<<\"begin_orange = \"<<begin_orange<<std::endl;\n  // std::cout<<\"\
    end_orange = \"<<end_orange<<std::endl;\n  // std::cout<<\"s.substr(0, 1) = \"\
    <<s.substr(0, 1)<<std::endl;\n  // std::cout<<\"s.substr(0, 1) = \"<<s.substr(3,\
    \ 1)<<std::end", "    int size = s.size();\n    int apple = 0, orange = 0;\n \
    \   std::stringstream ss;\n    bool flag = true;\n    for(int i = 0; i < size;\
    \ i++) {\n        if(flag) {\n            if(s[i] == ' ') {\n                flag\
    \ = false;\n                i++;\n            }\n            ss << s[i];\n   \
    \     } else {\n            if(s[i] == ' ') {\n                flag = true;\n\
    \                i += 2;\n            }\n            ss << s[i];\n        }\n\
    \    }\n    ss >> apple >> orange;\n    return n - apple - orange;", "  int apples,\
    \ oranges;\n  sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n\
    \  return n - apples - oranges;", "    std::string apples = s.substr(0, s.find(\"\
    apples\"));\n    std::string oranges = s.substr(s.find(\"oranges\"));\n    std::string\
    \ a = \"\", o = \"\";\n    for (int i = 0; i < apples.size(); i++) {\n       \
    \ if (apples[i] >= '0' && apples[i] <= '9')\n            a += apples[i];\n   \
    \ }\n    for (int i = 0; i < oranges.size(); i++) {\n        if (oranges[i] >=\
    \ '0' && oranges[i] <= '9')\n            o += oranges[i];\n    }\n    long mango\
    \ = n - atoi(a.c_str()) - atoi(o.c_str());\n    return mango;", "  int i = 0;\n\
    \  std::string num1 = \"\", num2 = \"\";\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] == ' ') {\n      i++;\n      while (s[i] != ' ') {\n       \
    \ num1 += s[i];\n        i++;\n      }\n      i += 3;\n      while (s[i] != '\
    \ ') {\n        num2 += s[i];\n        i++;\n      }\n      break;\n    }\n  }\n\
    \  return n - atoi(num1.c_str()) - atoi(num2.c_str());", "    int apples, oranges;\n\
    \    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n   \
    \ return n - apples - oranges;", "  // your code here\n  char *p1, *p2;\n  int\
    \ apple, orange;\n  p1 = strtok((char *)s.c_str(), \" \");\n  apple = atoi(p1);\n\
    \  p2 = strtok(NULL, \" \");\n  p2 = strtok(NULL, \" \");\n  orange = atoi(p2);\n\
    \  return n - apple - orange;", "    // Write your code here\n    // Hint: string\
    \ parsing is required.\n    long o = 0;\n    long a = 0;\n    long flag = 0;\n\
    \    long count = 0;\n    for(long i = 0; i < s.length(); i++){\n        if(s[i]\
    \ == ' ')\n            flag++;\n        if(flag == 3 && (s[i] >= '0' && s[i] <=\
    \ '9')){\n            o = o * 10 + s[i] - '0';\n        }\n        if(flag ==\
    \ 2 && (s[i] >= '0' && s[i] <= '9')){\n            a = a * 10 + s[i] - '0';\n\
    \        }\n    }\n    return n - a - o;", "    // Get the number of apples and\
    \ oranges from s\n    int apples = atoi(s.substr(0, s.find(\" apples and \")).c_str());\n\
    \    int oranges = atoi(s.substr(s.find(\" apples and \") + 12, s.length()).c_str());\n\
    \    // Get the number of mango fruits in the basket\n    return n - apples -\
    \ oranges;", "    int i = 0;\n    while(s[i] != ' ')\n        i++;\n    long apples\
    \ = 0;\n    for(int j = 0; j < i; j++)\n        apples = apples * 10 + s[j] -\
    \ '0';\n    int j = i;\n    while(s[j] != ' ')\n        j++;\n    i = j;\n   \
    \ while(s[i] != ' ')\n        i++;\n    long oranges = 0;\n    for(int j = i -\
    \ 1; j > i; j--)\n        oranges = oranges * 10 + s[j] - '0';\n    return n -\
    \ apples - oranges;", "  // your code\n  long num_of_oranges = 0;\n  long num_of_apples\
    \ = 0;\n  long num_of_mangoes = 0;\n  std::vector<long> v(2);\n  std::string delimeter\
    \ = \"and\";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = s.find(delimeter))\
    \ != std::string::npos) {\n      token = s.substr(0, pos);\n      s.erase(0, pos\
    \ + delimeter.length());\n      std::istringstream iss(token);\n      std::string\
    \ sub;\n      iss >> sub;\n      num_of_apples = std::stol(sub);\n      iss >>\
    \ sub;\n      if(sub == \"oranges\") {\n        num_of_oranges = std::stol(s);\n\
    \      }\n      else {\n        num_of_apples = std::stol(s);\n      }\n  }\n\
    \  num_of_mangoes = n - num_of_apples - num_of_oranges;\n  return num_of_mangoes;",
  "    //write your code here\n    char *ch;\n    char *ch1;\n    long i=0,j=0;\n\
    \    ch=strtok((char*)s.c_str(),\" \");\n    while(ch!=NULL)\n    {\n        if(strcmp(ch,\"\
    apples\")==0){\n            i=atoi(strtok(NULL,\" \"));\n        }\n        else\
    \ if(strcmp(ch,\"oranges\")==0){\n            j=atoi(strtok(NULL,\" \"));\n  \
    \      }\n        ch=strtok(NULL,\" \");\n    }\n    return n-(i+j);", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use std::cout\n    // Example: std::cout << \"Hello world!\";\n    int apples,\
    \ oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n\
    \    return n - apples - oranges;", "\tassert(s.size() > 0);\n\tassert(n >= 0);\n\
    \tstd::string result = \"\";\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isdigit(s[i]))\
    \ {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tint sum = atoi(result.c_str());\n\t\
    return n - sum;", "\tstd::string numApple, numOrange;\n\tint i = 0;\n\twhile (s[i]\
    \ != ' ')\n\t{\n\t\tnumApple += s[i];\n\t\ti++;\n\t}\n\ti += 6;\n\twhile (s[i]\
    \ != ' ')\n\t{\n\t\tnumOrange += s[i];\n\t\ti++;\n\t}\n\tlong apple = std::stol(numApple);\n\
    \tlong orange = std::stol(numOrange);\n\tlong mango = n - apple - orange;\n\t\
    return mango;", "    // Write your code here\n    // To print results to the standard\
    \ output you can use std::cout\n    // Example: std::cout << \"Hello world!\"\
    ;\n    //long int count = 0;\n    char *a = new char[s.length() + 1];\n    strcpy(a,\
    \ s.c_str());\n    int i = 0;\n    while(a[i] != ' '){\n        i++;\n    }\n\
    \    int count = 0;\n    int sum = 0;\n    //std::cout << s;\n    while(a[i] !=\
    \ '\\0'){\n        if(a[i] >= '0' && a[i] <= '9'){\n            sum = sum * 10\
    \ + (a[i] - '0');\n        }\n        else{\n            if(count == 0){\n   \
    \             n = n - sum;\n                sum = 0;\n                count++;\n\
    \            }\n            else{\n                n = n - sum;\n            \
    \    sum = 0;\n            }\n        }\n        i++;\n    }\n    n = n - sum;\n\
    \    return n;\n    //std::cout << s;\n    // while(s[i] != ' '){\n    //    \
    \ i++;\n    // }\n    // int count = 0;\n    // while(s[i] != '\\0'){\n    //\
    \     if(s[i] >= '0' && s[i] <= '9'){\n    //         count = count * 10 + (s[i]\
    \ - '0');\n    //     }\n    //     else{\n    //         if(sum == 0){\n    //\
    \             n = n - count;\n    //             count = 0;\n    //          \
    \   sum++;\n    //         }\n    //         else{\n    //             n = n -\
    \ count;\n    //             count = 0;\n    //         }\n    //     }\n    //\
    \     i++;\n    // }\n    // n = n - count;\n    // return n;", "    std::regex\
    \ orange(\"((\\\\d+)\\\\s*oranges)\");\n    std::regex apple(\"((\\\\d+)\\\\s*apples)\"\
    );\n    std::smatch sm;\n    std::regex_search(s, sm, orange);\n    long orange_count\
    \ = std::stol(sm[2]);\n    std::regex_search(s, sm, apple);\n    long apple_count\
    \ = std::stol(sm[2]);\n    return n - orange_count - apple_count;", "  int i =\
    \ 0;\n  int num = 0;\n  while(s[i] >= '0' && s[i] <= '9') {\n    num = num * 10\
    \ + s[i] - '0';\n    i++;\n  }\n  int i2 = i;\n  while(s[i2] >= 'a' && s[i2] <=\
    \ 'z') {\n    i2++;\n  }\n  num += std::stoi(s.substr(i2));\n  return n - num;",
  "  //write your code here\n  int i = 0;\n  std::string first_num = \"\";\n  while(s[i]\
    \ != ' '){\n    first_num += s[i];\n    i++;\n  }\n  i += 4;\n  std::string second_num\
    \ = \"\";\n  while(s[i] != ' '){\n    second_num += s[i];\n    i++;\n  }\n  long\
    \ apple = std::stol(first_num);\n  long orange = std::stol(second_num);\n  return\
    \ n - apple - orange;", "  long a = std::stol(s.substr(0,s.find(' ')));\n  long\
    \ b = std::stol(s.substr(s.find_last_of(' ') + 1));\n  return n - a - b;", "\t\
    assert(n > 0);\n\tassert(s.size() > 0);\n\tlong apples = 0, oranges = 0;\n\tint\
    \ i = 0;\n\twhile (s[i] != ' ') {\n\t\tapples = apples * 10 + (s[i] - '0');\n\t\
    \ti++;\n\t}\n\ti += 9;\n\twhile (s[i] != ' ') {\n\t\toranges = oranges * 10 +\
    \ (s[i] - '0');\n\t\ti++;\n\t}\n\treturn n - apples - oranges;", "    // Write\
    \ your code here\n    return -1;", "    // if number of fruits is 0 then return\
    \ 0\n    if(n == 0) return 0;\n    // convert the string s to lower case\n   \
    \ std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    // replace the\
    \ and with a space\n    std::replace(s.begin(), s.end(), 'a', ' ');\n    std::replace(s.begin(),\
    \ s.end(), 'n', ' ');\n    std::replace(s.begin(), s.end(), 'd', ' ');\n    //\
    \ seperate the string by spaces and convert the string to integers\n    std::stringstream\
    \ ss(s);\n    int apples = 0, oranges = 0;\n    ss >> apples >> oranges;\n   \
    \ // return the number of mangoes\n    return n - apples - oranges;", "  long\
    \ apples = stol(s.substr(0, s.find(\"ap\")));\n  long oranges = stol(s.substr(s.find(\"\
    and\") + 4, s.find(\"or\")));\n  return n - apples - oranges;", "    long b=0,a=0,o=0;\n\
    \    std::stringstream ss;\n    ss<<s;\n    std::string temp;\n    long count=0;\n\
    \    while(!ss.eof()){\n        ss>>temp;\n        if(stringstream(temp)>>b){\n\
    \            count++;\n            if(count==1) a=b;\n            else if(count==2)\
    \ o=b;\n        }\n        temp=\"\";\n    }\n    return n-a-o;", "  std::stringstream\
    \ a (s);\n  int apples, oranges;\n  char st;\n  a >> apples >> st >> oranges >>\
    \ st >> st >> st >> st >> st;\n  return n - apples - oranges;", "    //Write your\
    \ code here\n    long int num_apple = 0;\n    long int num_orange = 0;\n    int\
    \ state = 0;\n    std::stringstream ss(s);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n      if (item == \"apples\") {\n        state = 1;\n      }\
    \ else if (item == \"oranges\") {\n        state = 2;\n      } else if (state\
    \ == 1) {\n        num_apple = stoi(item);\n      } else if (state == 2) {\n \
    \       num_orange = stoi(item);\n      }\n    }\n    return n - num_apple - num_orange;",
  "\tlong fruit,apple,orange;\n\tsscanf(s.c_str(),\"%ld apples and %ld oranges\",&apple,&orange);\n\
    \treturn n-apple-orange;", "\tstd::stringstream ss(s);\n\tint x, y;\n\tchar c;\n\
    \tss >> x >> c >> y >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c\
    \ >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>\
    \ c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >> c >>", "\tlong tmp =\
    \ std::stol(s.substr(0, s.find(' ')));\n\ttmp += std::stol(s.substr(s.find(' ')\
    \ + 1, s.find('a') - s.find(' ') - 1));\n\treturn n - tmp;", "\tint spaces = 0;\n\
    \tstd::stringstream sstream(s);\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t\
    if (s[i] == ' ') {\n\t\t\tspaces++;\n\t\t}\n\t}\n\tif (spaces != 3) {\n\t\treturn\
    \ -1;\n\t}\n\tstd::string words[3];\n\tfor (int i = 0; i < 3; i++) {\n\t\tsstream\
    \ >> words[i];\n\t}\n\tif (words[1] != \"apples\" && words[1] != \"oranges\")\
    \ {\n\t\treturn -1;\n\t}\n\tif (words[3] != \"apples\" && words[3] != \"oranges\"\
    ) {\n\t\treturn -1;\n\t}\n\tif (words[2] != \"and\") {\n\t\treturn -1;\n\t}\n\t\
    std::string::size_type sz;\n\tint first = std::stoi(words[0], &sz);\n\tint second\
    \ = std::stoi(words[3], &sz);\n\tif (first + second > n) {\n\t\treturn -1;\n\t\
    }\n\treturn n - first - second;", "  int apples = 0;\n  int oranges = 0;\n  s\
    \ = s.substr(0, s.size() - 9);\n  int i = 0;\n  while (s[i] != ' ') {\n    apples\
    \ = apples * 10 + (s[i] - '0');\n    i++;\n  }\n  while (s[i] == ' ')\n    i++;\n\
    \  while (s[i] != ' ') {\n    oranges = oranges * 10 + (s[i] - '0');\n    i++;\n\
    \  }\n  return n - apples - oranges;", "    // write your code here\n    long\
    \ apple, orange;\n    sscanf(s.c_str(), \"%ld apples and %ld oranges\", &apple,\
    \ &orange);\n    return n - apple - orange;", "    std::vector<std::string> str_list;\n\
    \    int str_count = 0;\n    std::stringstream ss(s);\n    std::string temp;\n\
    \    while(getline(ss, temp, ' ')) {\n        str_list.push_back(temp);\n    \
    \    str_count++;\n    }\n    long apple_count = 0;\n    long orange_count = 0;\n\
    \    if(str_count < 4) {\n        std::stringstream sa(str_list[0]);\n       \
    \ sa >> apple_count;\n        std::stringstream so(str_list[2]);\n        so >>\
    \ orange_count;\n    }\n    else {\n        std::stringstream sa(str_list[0] +\
    \ str_list[1]);\n        sa >> apple_count;\n        std::stringstream so(str_list[3]\
    \ + str_list[4]);\n        so >> orange_count;\n    }\n    return n - apple_count\
    \ - orange_count;", "\tlong apples, oranges;\n\tsscanf(s.c_str(), \"%ld apples\
    \ and %ld oranges\", &apples, &oranges);\n\treturn n - apples - oranges;", " \
    \ //1. convert string to long\n  std::istringstream iss(s);\n  std::vector<std::string>\
    \ tokens;\n  std::string token;\n  while (std::getline(iss, token, ' '))\n   \
    \ tokens.push_back(token);\n  //convert string to number\n  long numOfApple =\
    \ std::stol(tokens[0]);\n  long numOfOrange = std::stol(tokens[3]);\n  //2. get\
    \ the number of mango\n  long numOfMango = n - numOfApple - numOfOrange;\n  //3.\
    \ return the number of mango\n  return numOfMango;", "    int i = 0;\n    int\
    \ result = 0;\n    std::string temp = \"\";\n    while(s[i] != ' ') {\n      \
    \  temp += s[i];\n        i++;\n    }\n    int apples = std::stoi(temp);\n   \
    \ temp = \"\";\n    i += 5;\n    while(s[i] != ' ') {\n        temp += s[i];\n\
    \        i++;\n    }\n    int oranges = std::stoi(temp);\n    result = n - apples\
    \ - oranges;\n    return result;", "    // your code here\n    long apple, orange;\n\
    \    size_t pos = s.find('a');\n    std::string x = s.substr(0, pos);\n    apple\
    \ = std::stol(x);\n    pos = s.find('o');\n    std::string y = s.substr(pos -\
    \ 2, 2);\n    orange = std::stol(y);\n    return n - apple - orange;", "    //\
    \ your code here ...\n    std::istringstream ss(s);\n    std::string temp;\n \
    \   ss >> temp;\n    int apples = std::stoi(temp);\n    ss >> temp;\n    int oranges\
    \ = std::stoi(temp);\n    return n - apples - oranges;", "\t// change this code\n\
    \treturn 0;", "  \n  // extract the numbers from the string\n  std::stringstream\
    \ ss(s);\n  std::string token;\n  std::vector<long> nums;\n  while(std::getline(ss,\
    \ token, ' ')){\n    if(std::isdigit(token[0])){\n      nums.push_back(std::stol(token));\n\
    \    }\n  }\n  //std::cout << \"nums: \";\n  //for(auto& i : nums){\n  //  std::cout\
    \ << i << \" \";\n  //}\n  //std::cout << std::endl;\n  assert(nums.size() ==\
    \ 2);\n  return n - nums[0] - nums[1];", "\tlong apple, orange;\n\tint i;\n\t\
    std::string delimiter = \" \";\n\tstd::string token = s.substr(0, s.find(delimiter));\n\
    \tapple = std::stol(token);\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ti = s.find(delimiter);\n\ttoken =\
    \ s.substr(0, i);\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\ttoken\
    \ = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.find(delimiter) + delimiter.length());\n\
    \ttoken = s.substr(0, s.find(delimiter));\n\ts.erase(0, s.", "\t// Write your\
    \ code here\n\t// To print results to the standard output you can use std::cout\n\
    \t// Example: std::cout << \"Hello world!\";\n\tstd::string str = s;\n\tstd::stringstream\
    \ ss(str);\n\tstd::string word;\n\tint apples = 0;\n\tint oranges = 0;\n\twhile\
    \ (getline(ss, word, ' '))\n\t{\n\t\tif (word == \"apples\")\n\t\t{\n\t\t\tgetline(ss,\
    \ word, ' ');\n\t\t\tif (word == \"and\")\n\t\t\t{\n\t\t\t\tgetline(ss, word,\
    \ ' ');\n\t\t\t\toranges = std::stoi(word);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\
    \t\tapples = std::stoi(word);\n\t\t\t}\n\t\t}\n\t\telse if (word == \"oranges\"\
    )\n\t\t{\n\t\t\tgetline(ss, word, ' ');\n\t\t\toranges = std::stoi(word);\n\t\t\
    }\n\t}\n\treturn n - apples - oranges;", "  // your code here\n  int a = 0, b\
    \ = 0;\n  int i = 0;\n  while(s[i] != 'a'){\n    a = a * 10 + s[i] - '0';\n  \
    \  i++;\n  }\n  while(s[i] != 'o'){\n    b = b * 10 + s[i] - '0';\n    i++;\n\
    \  }\n  return n - a - b;", "  int a = 0, o = 0;\n  std::stringstream ss(s);\n\
    \  std::string num;\n  std::getline(ss, num, ' ');\n  a = std::stoi(num);\n  std::getline(ss,\
    \ num, ' ');\n  std::getline(ss, num, ' ');\n  o = std::stoi(num);\n  return n\
    \ - a - o;", "    long sum = 0;\n    int startIndex = 0;\n    std::string delimiter\
    \ = \" \";\n    std::string temp;\n    int pos = s.find(delimiter);\n    while\
    \ (pos != std::string::npos) {\n        temp = s.substr(startIndex, pos - startIndex);\n\
    \        sum += std::stol(temp);\n        startIndex = pos + delimiter.length();\n\
    \        pos = s.find(delimiter, startIndex);\n    }\n    temp = s.substr(startIndex,\
    \ s.length() - startIndex);\n    sum += std::stol(temp);\n    return n - sum;",
  "    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string\
    \ temp;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::string a\
    \ = v[0];\n    std::string b = v[2];\n    std::string c = v[3];\n    std::string\
    \ d = v[4];\n    long e = std::stol(a);\n    long f = std::stol(b);\n    long\
    \ g = std::stol(c);\n    long h = std::stol(d);\n    long i = n - e - g;\n   \
    \ long j = n - f - h;\n    if(i > j)\n        return i;\n    else if(j > i)\n\
    \        return j;\n    else\n        return i;", "    std::istringstream iss(s);\n\
    \    std::vector<std::string> words{std::istream_iterator<std::string>{iss},\n\
    \                                   std::istream_iterator<std::string>{}};\n \
    \   long apples = std::stol(words[0]);\n    long oranges = std::stol(words[3]);\n\
    \    return n - apples - oranges;", "    int apple = 0;\n    int orange = 0;\n\
    \    int mango = 0;\n    std::string temp = \"\";\n    for(auto i : s){\n    \
    \    if(i == ' '){\n            if(temp == \"apples\"){\n                apple\
    \ = std::stoi(temp);\n            }else if(temp == \"oranges\"){\n           \
    \     orange = std::stoi(temp);\n            }\n            temp = \"\";\n   \
    \     }else{\n            temp += i;\n        }\n    }\n    mango = n - apple\
    \ - orange;\n    return mango;", "    //your code here\n    std::string temp =\
    \ \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= '0' && s[i]\
    \ <= '9')\n            temp += s[i];\n    }\n    int res = 0;\n    for(int i =\
    \ 0; i < temp.length(); i++){\n        res = res * 10 + (temp[i] - '0');\n   \
    \ }\n    return n - res;", "  \n  // your code here\n\n  return n;", "    std::regex\
    \ pattern(\"(\\\\d+) (apples|oranges) and (\\\\d+) (apples|oranges)\");\n    std::smatch\
    \ match;\n    std::regex_search(s, match, pattern);\n    long num_of_apples =\
    \ atol(match[1].str().c_str());\n    long num_of_oranges = atol(match[3].str().c_str());\n\
    \    return n - num_of_apples - num_of_oranges;", "    // #1\n    int apples,\
    \ oranges;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n\
    \    return n - apples - oranges;\n    // #2\n    // long number_of_mangoes =\
    \ 0;\n    // int value_of_oranges = 0;\n    // int value_of_apples = 0;\n    //\
    \ std::string new_string = \"\";\n    // int length = s.length();\n    // int\
    \ counter = 0;\n    // for(int i = 0; i < length; i++){\n    //     if(!isspace(s[i])){\n\
    \    //         new_string += s[i];\n    //     }\n    // }\n    // length = new_string.length();\n\
    \    // for(int i = 0; i < length; i++){\n    //     if(isdigit(new_string[i])){\n\
    \    //         if(counter == 0){\n    //             value_of_apples *= 10;\n\
    \    //             value_of_apples += (new_string[i] - '0');\n    //        \
    \ }\n    //         else{\n    //             value_of_oranges *= 10;\n    //\
    \             value_of_oranges += (new_string[i] - '0');\n    //         }\n \
    \   //     }\n    //     else{\n    //         counter++;\n    //     }\n    //\
    \ }\n    // number_of_mangoes = n - value_of_apples - value_of_oranges;\n    //\
    \ return number_of_mangoes;", "    //implement your solution here\n    //to compile\
    \ the code use : g++ task1.cpp -o task1 -std=c++11\n    //to run the code use\
    \ : ./task1\n    // do not print anything other than what's expected/asked in\
    \ problem\n    // You can create other functions if needed.\n    int apples =\
    \ 0, oranges = 0;\n    std::string delimiter = \" \";\n    size_t pos = 0;\n \
    \   while ((pos = s.find(delimiter)) != std::string::npos) {\n        std::string\
    \ token = s.substr(0, pos);\n        if (token == \"apples\")\n            apples\
    \ = std::stoi(s.substr(pos + 1, s.find(\"and\") - pos - 1));\n        else\n \
    \           oranges = std::stoi(s.substr(pos + 1, s.find(\"and\") - pos - 1));\n\
    \        s.erase(0, pos + delimiter.length());\n    }\n    return n - apples -\
    \ oranges;", "    std::stringstream ss(s);\n    std::string temp;\n    int apples,\
    \ oranges;\n    ss >> apples >> temp >> temp >> oranges;\n    return n - apples\
    \ - oranges;", "    //your code here\n    long n2;\n    std::stringstream stream(s);\n\
    \    stream >> n2;\n    return n - n2;", "\t// your code here\n\tstd::regex rgx(\"\
    [0-9]+\");\n\tstd::smatch res;\n\tint apples=0, oranges=0;\n\tstd::regex_search(s,\
    \ res, rgx);\n\tstd::string s_apples = res.str();\n\tapples = std::stoi(s_apples);\n\
    \ts = res.suffix().str();\n\tstd::regex_search(s, res, rgx);\n\tstd::string s_oranges\
    \ = res.str();\n\toranges = std::stoi(s_oranges);\n\treturn n - apples - oranges;",
  "  assert(n >= 0);\n  int start = 0;\n  int end = 0;\n  int apples = 0;\n  int oranges\
    \ = 0;\n  while(s[end] != '\\0'){\n      if(s[end] == ' '){\n          apples\
    \ = std::stoi(s.substr(start, end - start));\n          break;\n      }\n    \
    \  end++;\n  }\n  start = end + 5;\n  end = start;\n  while(s[end] != '\\0'){\n\
    \      if(s[end] == ' '){\n          oranges = std::stoi(s.substr(start, end -\
    \ start));\n          break;\n      }\n      end++;\n  }\n  return n - apples\
    \ - oranges;", "    assert(s.length()>0);\n    assert(n>0);\n    std::vector<long>\
    \ aux;\n    std::stringstream ss(s);\n    for(long i; ss >> i;){\n        aux.push_back(i);\n\
    \        if(ss.peek() == ' ')\n            ss.ignore();\n    }\n    return n -\
    \ aux[0] - aux[1];", "   int apples;\n   int oranges;\n   sscanf(s.c_str(), \"\
    %d %*s %d %*s\", &apples, &oranges);\n   return n - apples - oranges;", "    //\
    \ your code\n    long orange,apple;\n    sscanf(s.c_str(),\"%ld apples and %ld\
    \ oranges\",&apple,&orange);\n    return n-apple-orange;", "    std::string delimiter\
    \ = \" \";\n    size_t pos = 0;\n    int arr[3] = {0};\n    int cnt = 0;\n   \
    \ while ((pos = s.find(delimiter)) != std::string::npos) {\n        arr[cnt] =\
    \ std::stoi(s.substr(0, pos));\n        s.erase(0, pos + delimiter.length());\n\
    \        cnt++;\n    }\n    arr[cnt] = std::stoi(s);\n    return n - arr[0] -\
    \ arr[2];", "    std::string::size_type sz;   // alias of size_t\n    long total_apple\
    \ = std::stol (s,&sz);\n    std::string tmp = s.substr(sz);\n    long total_orange\
    \ = std::stol (tmp,&sz);\n    return n - total_apple - total_orange;", "    //1.\
    \ define the number of apples and oranges\n    int i;\n    for(i = 0; i < s.size();\
    \ i++){\n        if(s[i] == 'a') break;\n    }\n    string temp = \"\";\n    for(int\
    \ j = 0; j < i; j++){\n        temp += s[j];\n    }\n    int num_of_apples = stoi(temp);\n\
    \    int index_of_orange = i + 8;\n    temp = \"\";\n    for(int j = index_of_orange;\
    \ j < s.size(); j++){\n        temp += s[j];\n    }\n    int num_of_oranges =\
    \ stoi(temp);\n    //2. calculate the number of mangoes\n    return n - num_of_apples\
    \ - num_of_oranges;", "  long a = 0, o = 0;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  int i = 0;\n  while (ss >> word) {\n    if (word == \"apples\") {\n\
    \      ss >> word;\n      a = std::stol(word);\n    } else if (word == \"oranges\"\
    ) {\n      ss >> word;\n      o = std::stol(word);\n    }\n  }\n  return n - a\
    \ - o;", "    long sum = 0;\n    std::string str = \"\";\n    bool start = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n        \
    \    if(start) {\n                sum += std::stol(str);\n                str\
    \ = \"\";\n                start = false;\n            }\n        } else if(s[i]\
    \ >= '0' && s[i] <= '9') {\n            start = true;\n            str += s[i];\n\
    \        }\n    }\n    sum += std::stol(str);\n    return n - sum;", "  long apples\
    \ = 0;\n  long oranges = 0;\n  std::stringstream ss(s);\n  long val;\n  while(ss\
    \ >> val) {\n    if(ss.peek() == ' ') ss.ignore();\n    if(ss.peek() == 'a') apples\
    \ = val;\n    if(ss.peek() == 'o') oranges = val;\n  }\n  return n - apples -\
    \ oranges;", "    long num[3] = {0};\n    s.push_back(' ');\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            num[num[0]]\
    \ = std::stol(s.substr(i + 1, s.find(\" \", i + 1) - i - 1));\n            num[0]++;\n\
    \        }\n    }\n    return n - num[1] - num[2];", "    int apple = 0, orange\
    \ = 0;\n    for (auto x : s) {\n        if (x == 'a') {\n            apple++;\n\
    \        } else if (x == 'o') {\n            orange++;\n        }\n    }\n   \
    \ return n - apple - orange;", "\t\n\tstd::string::size_type pos = s.find(\"and\"\
    );\n\tstd::string apples = s.substr(0, pos);\n\tstd::string oranges = s.substr(pos\
    \ + 3);\n\tint apples_num = std::stoi(apples);\n\tint oranges_num = std::stoi(oranges);\n\
    \treturn n - apples_num - oranges_num;", "\treturn 0;", "\t// write your code\
    \ here\n\tint i = 0;\n\tint m = 0;\n\tint h = s.length();\n\twhile (h > 0) {\n\
    \t\tif (s[i] == ' ') {\n\t\t\tif (s[i + 1] == 'a') {\n\t\t\t\tm = m + std::stoi(s.substr(0,\
    \ i));\n\t\t\t\ts = s.substr(i + 10, s.length());\n\t\t\t\th = s.length();\n\t\
    \t\t\ti = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm = m + std::stoi(s.substr(0, i));\n\
    \t\t\t\ts = s.substr(i + 11, s.length());\n\t\t\t\th = s.length();\n\t\t\t\ti\
    \ = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t\th--;\n\t\t}\n\t}\n\tif (s[1]\
    \ == 'a') {\n\t\tm = m + std::stoi(s.substr(0, i));\n\t}\n\telse {\n\t\tm = m\
    \ + std::stoi(s.substr(0, i));\n\t}\n\treturn n - m;", "    long no_of_apples=0,no_of_oranges=0;\n\
    \    char delimiter = ' ';\n    std::istringstream ss(s);\n    std::string token;\n\
    \    int i=0;\n    while (std::getline(ss, token, delimiter)) {\n        if(i==0)\n\
    \            no_of_apples = std::stol(token);\n        else if(i==2)\n       \
    \     no_of_oranges = std::stol(token);\n        i++;\n    }\n    return n - no_of_apples\
    \ - no_of_oranges;", "    // Your code here!\n    // note that this code is written\
    \ in c++14\n    // I could write the same code in c++17 but I didn't find a platform\
    \ that supports it right now :(\n    long apples = 0, oranges = 0;\n    std::smatch\
    \ match;\n    std::regex r(\"([0-9]+) apples and ([0-9]+) oranges\");\n    std::regex_search(s,\
    \ match, r);\n    apples = std::stol(match[1]);\n    oranges = std::stol(match[2]);\n\
    \    return n - apples - oranges;", "    std::string apples = \"\", oranges =\
    \ \"\";\n    int i = 0;\n    for (; i < s.size(); i++) {\n        if (s[i] ==\
    \ ' ') break;\n        apples += s[i];\n    }\n    i += 9;\n    for (; i < s.size();\
    \ i++) {\n        if (s[i] == ' ') break;\n        oranges += s[i];\n    }\n \
    \   return n - std::stol(apples) - std::stol(oranges);", "    std::string a_num_str,\
    \ o_num_str;\n    size_t prev_pos = 0, cur_pos = 0;\n    while (cur_pos != std::string::npos)\
    \ {\n        cur_pos = s.find(\" \", prev_pos);\n        a_num_str = s.substr(prev_pos,\
    \ cur_pos - prev_pos);\n        prev_pos = cur_pos + 1;\n    }\n    cur_pos =\
    \ 0;\n    prev_pos = 0;\n    while (cur_pos != std::string::npos) {\n        cur_pos\
    \ = s.find(\" \", prev_pos);\n        o_num_str = s.substr(prev_pos, cur_pos -\
    \ prev_pos);\n        prev_pos = cur_pos + 1;\n    }\n    long mango = n - (long)atoi(a_num_str.c_str())\
    \ - (long)atoi(o_num_str.c_str());\n    return mango;", "    std::string tmp =\
    \ \"\", word = \"\";\n    int c = 0;\n    while(s.size() > 0) {\n        int i\
    \ = 0;\n        while(s[i] != ' ' && i < s.size()) {\n            tmp += s[i];\n\
    \            i++;\n        }\n        for(int j = 0; j < tmp.size(); j++) {\n\
    \            if(isdigit(tmp[j])) {\n                word += tmp[j];\n        \
    \    }\n        }\n        c += std::stoi(word);\n        word = \"\";\n     \
    \   tmp = \"\";\n        s.erase(0, i+1);\n    }\n    return n - c;", "  long\
    \ apples, oranges;\n  std::stringstream ss;\n  ss << s;\n  ss >> apples >> s >>\
    \ oranges;\n  return n - apples - oranges;", "    // this variable will be used\
    \ to store the first number\n    long num1 = 0;\n    // this variable will be\
    \ used to store the second number\n    long num2 = 0;\n    // this variable will\
    \ be used to store the current number\n    // before the current character we\
    \ are reading\n    long current = 0;\n    // this variable is to store the result\n\
    \    long result = 0;\n    // this variable will tell us what state we are in\
    \ \n    // (0 is the start state, 1 is the after the first number, 2 is the second\
    \ number)\n    int state = 0;\n    // this variable will tell us whether we are\
    \ reading the first number or the second number\n    bool first = true;\n    //\
    \ we will loop through the characters in the string\n    for(int i = 0; i < s.length();\
    \ i++) {\n        // we will check the current character\n        // if it is\
    \ a space then we will continue\n        if(s[i] == ' ') {\n            continue;\n\
    \        }\n        // if the current character is a number \n        // then\
    \ we will save it in current variable\n        if(isdigit(s[i])) {\n         \
    \   current = current * 10 + (s[i] - '0');\n        }\n        // if the current\
    \ character is \"apples\"\n        // then we have to save the number in the num1\n\
    \        // if it is the first time then we have to save it in the num1\n    \
    \    // and if it is the second time then we have to save it in the num2\n   \
    \     else if(s[i] == 'a') {\n            if(first) {\n                num1 =\
    \ current;\n                current = 0;\n                state = 1;\n       \
    \     }\n            else {\n                num2 = current;\n               \
    \ current = 0;\n                state = 2;\n            }\n        }\n       \
    \ // else if the current character is the \"oranges\"\n        // then we have\
    \ to change the first variable to false\n        // and we will go to the start\
    \ state\n        else if(s[i] == 'o') {\n            first = false;\n        \
    \    state = 0;\n        }\n    }\n    // now we will compute the result\n   \
    \ result = n - num1 -", "    // your code goes here\n    std::regex pattern(\"\
    ([0-9]+)\\\\s(apples|oranges)\");\n    std::smatch matches;\n    std::regex_search(s,\
    \ matches, pattern);\n    long num = std::stol(matches[1]);\n    // std::cout\
    \ << std::stol(matches[1]) << std::endl;\n    std::string fruit = matches[2];\n\
    \    if (fruit == \"apples\") {\n        s = s.substr(matches.position(1) + matches.length(1)\
    \ + 1, s.length());\n        std::regex_search(s, matches, pattern);\n       \
    \ num += std::stol(matches[1]);\n    } else {\n        s = s.substr(matches.position(1)\
    \ + matches.length(1) + 1, s.length());\n        std::regex_search(s, matches,\
    \ pattern);\n        num += std::stol(matches[1]);\n    }\n    return n - num;",
  "  // write your code here\n  // return the correct number of the mango fruits\n\
    \  int apples;\n  int oranges;\n  int mangoes;\n  sscanf(s.c_str(), \"%d apples\
    \ and %d oranges\", &apples, &oranges);\n  mangoes = n - apples - oranges;\n \
    \ return mangoes;", "\t// Write your code here\n\t// To print results to the standard\
    \ output you can use cout<<  and print it followed by std::endl;\n\t// To print\
    \ results to the error you can use cerr<<  and print it followed by std::endl;\n\
    \t// For example: cerr<<\"Error Message\";\n\tstd::stringstream ss(s);\n\tstd::string\
    \ temp;\n\tlong num_apples = 0;\n\tlong num_oranges = 0;\n\twhile (ss >> temp)\
    \ {\n\t\tif (temp == \"apples\") {\n\t\t\tss >> temp;\n\t\t\tif (temp == \"and\"\
    ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnum_apples = std::stol(temp);\n\t\t}\n\t\
    \telse if (temp == \"oranges\") {\n\t\t\tss >> temp;\n\t\t\tif (temp == \"and\"\
    ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnum_oranges = std::stol(temp);\n\t\t}\n\
    \t}\n\treturn n - num_apples - num_oranges;", "    int i = 0;\n    int c_a = 0;\n\
    \    int c_o = 0;\n    int c_m = 0;\n    int sum = 0;\n    int num = 0;\n    int\
    \ sign = 1;\n    while(s[i] != '\\0'){\n        if(isdigit(s[i])){\n         \
    \   num = num * 10 + s[i] - '0';\n        }else if(s[i] == '-'){\n           \
    \ sign = -1;\n        }else if(s[i] == 'a'){\n            c_a = num * sign;\n\
    \            sign = 1;\n            num = 0;\n        }else if(s[i] == 'o'){\n\
    \            c_o = num * sign;\n            sign = 1;\n            num = 0;\n\
    \        }\n        i++;\n    }\n    c_m = n - c_a - c_o;\n    return c_m;", " \
    \   std::cout << \"------------------------------------------\" << std::endl;\n\
    \    std::cout << \"input string : \" << s << std::endl;\n    std::cout << \"\
    total number of fruits : \" << n << std::endl;\n    long num_apples = 0;\n   \
    \ long num_oranges = 0;\n    long num_mangoes = 0;\n    long tot = 0;\n    std::vector<std::string>\
    \ split_str;\n    std::string temp;\n    std::stringstream ss(s);\n    while(std::getline(ss,\
    \ temp, ' ')){\n        if(temp != \"and\"){\n            split_str.push_back(temp);\n\
    \        }\n    }\n    std::cout << \"split string : \";\n    for(int i = 0; i\
    \ < split_str.size(); i++){\n        std::cout << split_str[i] << \" \";\n   \
    \ }\n    std::cout << std::endl;\n    num_apples = stoi(split_str[0]);\n    num_oranges\
    \ = stoi(split_str[2]);\n    std::cout << \"number of apples : \" << num_apples\
    \ << std::endl;\n    std::cout << \"number of oranges : \" << num_oranges << std::endl;\n\
    \    num_mangoes = n - num_apples - num_oranges;\n    std::cout << \"number of\
    \ mangoes : \" << num_mangoes << std::endl;\n    std::cout << \"------------------------------------------\"\
    \ << std::endl;\n    return num_mangoes;", "\tlong n1=std::count(s.begin(),s.end(),'a');\n\
    \tlong n2=std::count(s.begin(),s.end(),'o');\n\t//std::cout<<\"n1= \"<<n1<<std::endl;\n\
    \t//std::cout<<\"n2= \"<<n2<<std::endl;\n\treturn n-(n1+n2);", "    // your code\
    \ goes here\n    s.erase(std::remove(s.begin(), s.end(), ' '), s.end());\n   \
    \ std::string word = \"\";\n    std::vector<long> fruit{};\n    int no_apples\
    \ = 0;\n    int no_oranges = 0;\n    for(auto i : s){\n        if(i >= '0' &&\
    \ i <= '9'){\n            word += i;\n        }\n        else if(i == 'a' || i\
    \ == 'o'){\n            if(word.size() > 0){\n                fruit.push_back(std::stol(word));\n\
    \                word = \"\";\n            }\n        }\n    }\n    if(word.size()\
    \ > 0){\n        fruit.push_back(std::stol(word));\n    }\n    return n - fruit[0]\
    \ - fruit[1];", "\t// write your code here\n\tint i, j;\n\tint num_apples = 0,\
    \ num_oranges = 0;\n\tfor (i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'a')\
    \ {\n\t\t\tint count = 0;\n\t\t\tj = i;\n\t\t\twhile (s[j] != ' ') {\n\t\t\t\t\
    count++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tstd::string aux = s.substr(i, count);\n\
    \t\t\tnum_apples = std::stoi(aux);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (j = j; j\
    \ < s.length(); j++) {\n\t\tif (s[j] == 'o') {\n\t\t\tint count = 0;\n\t\t\tint\
    \ k = j;\n\t\t\twhile (s[k] != ' ') {\n\t\t\t\tcount++;\n\t\t\t\tk++;\n\t\t\t\
    }\n\t\t\tstd::string aux = s.substr(j, count);\n\t\t\tnum_oranges = std::stoi(aux);\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn n - num_apples - num_oranges;", "  if(s.empty())\n\
    \    return 0;\n  int orange = 0, apple = 0;\n  std::string tmp;\n  std::stringstream\
    \ ss(s);\n  while(ss >> tmp){\n    if(tmp == \"apples\"){\n      ss >> tmp;\n\
    \      assert(tmp == \"and\");\n      ss >> tmp;\n      apple = std::stoi(tmp);\n\
    \    }\n    else if(tmp == \"oranges\"){\n      ss >> tmp;\n      assert(tmp ==\
    \ \"and\");\n      ss >> tmp;\n      orange = std::stoi(tmp);\n    }\n  }\n  return\
    \ n - apple - orange;", '    // Write your code here', "\tint x = 0, y = 0;\n\t\
    bool a = false, b = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif ((s[i]\
    \ >= '0' && s[i] <= '9') && !a) {\n\t\t\tx = x * 10 + (s[i] - '0');\n\t\t}\n\t\
    \telse if (s[i] == ' ') {\n\t\t\ta = true;\n\t\t}\n\t\telse if ((s[i] >= '0' &&\
    \ s[i] <= '9') && a) {\n\t\t\ty = y * 10 + (s[i] - '0');\n\t\t}\n\t}\n\treturn\
    \ n - x - y;", "\tstd::regex number(\"(\\\\d+)\");\n\tstd::smatch match;\n\tint\
    \ apples, oranges;\n\tstd::regex_search(s, match, number);\n\tapples = std::stoi(match[0]);\n\
    \ts = match.suffix();\n\tstd::regex_search(s, match, number);\n\toranges = std::stoi(match[0]);\n\
    \treturn n - apples - oranges;", "    //write your code here\n    long num1 =\
    \ 0;\n    long num2 = 0;\n    int index1 = 0;\n    int index2 = 0;\n    for(int\
    \ i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            index1 =\
    \ i;\n            break;\n        }\n    }\n    for(int i = 0; i < index1; i++){\n\
    \        num1 = num1 * 10 + (s[i] - '0');\n    }\n    for(int i = index1; i <\
    \ s.length(); i++){\n        if(s[i] == ' '){\n            index2 = i;\n     \
    \       break;\n        }\n    }\n    for(int i = index2 + 1; i < s.length();\
    \ i++){\n        if(s[i] == ' '){\n            index2 = i;\n            break;\n\
    \        }\n    }\n    for(int i = index2 + 1; i < s.length(); i++){\n       \
    \ num2 = num2 * 10 + (s[i] - '0');\n    }\n    //printf(\"%d\",num1);\n    //printf(\"\
    %d\",num2);\n    long result = n - num1 - num2;\n    return result;", "    long\
    \ apples, oranges;\n    sscanf(s.c_str(), \"%ld apples and %ld oranges\", &apples,\
    \ &oranges);\n    return n - apples - oranges;", '    return n - std::stol(s.substr(0,s.find("
    "))) - std::stol(s.substr(s.find(" ") + 5));']
stop_tokens:
- "\n}"
