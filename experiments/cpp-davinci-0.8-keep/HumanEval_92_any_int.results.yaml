name: HumanEval_92_any_int
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (((int)x == x) && ((int)y\
    \ == y) && ((int)z == z)) && ((x == y + z) || (y == x + z) || (z == x + y));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjlbb79s0: /tmp/tmpjlbb79s0.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == (y + z)) || (y == (x\
    \ + z)) || (z == (x + y));\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3k8wgy2o: /tmp/tmp3k8wgy2o.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x==y+z||y==x+z||z==x+y)\n  \
    \      return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpkekatqz1: /tmp/tmpkekatqz1.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    bool result;\n    if (fmod(x, 1)\
    \ == 0 && fmod(y, 1) == 0 && fmod(z, 1) == 0) {\n        if (x == y + z || y ==\
    \ x + z || z == x + y) {\n            result = true;\n        } else {\n     \
    \       result = false;\n        }\n    } else {\n        result = false;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = any_int;\n   \
    \ assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_sopnchj: /tmp/tmp_sopnchj.cpp:35: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3bzl19mn: /tmp/tmp3bzl19mn.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpf9e9i8wk: /tmp/tmpf9e9i8wk.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(x+y==z || x+z==y || y+z==x) {\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpda231jks: /tmp/tmpda231jks.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((x + y == z) || (x + z ==\
    \ y) || (y + z == x));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9nb1y5ol: /tmp/tmp9nb1y5ol.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if (x == y + z || y == x + z || z\
    \ == x + y)\n    return true;\n  else\n    return false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjoomt4d_: /tmp/tmpjoomt4d_.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (fmod(x, 1) != 0 && fmod(y,\
    \ 1) != 0 && fmod(z, 1) != 0)\n        return false;\n    if (x == y + z || y\
    \ == x + z || z == x + y)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppk8onpep: /tmp/tmppk8onpep.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(floor(x) == x && floor(y) ==\
    \ y && floor(z) == z){\n        if(x + y == z || x + z == y || y + z == x){\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkua_78wp: /tmp/tmpkua_78wp.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == (y + z) || y == (x + z)\
    \ || z == (x + y)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpozkytv6_: /tmp/tmpozkytv6_.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpvoldb_26: /tmp/tmpvoldb_26.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (z == x + y && x == int(x) &&\
    \ y == int(y) && z == int(z))\n\t\treturn true;\n\telse if (x == y + z && x ==\
    \ int(x) && y == int(y) && z == int(z))\n\t\treturn true;\n\telse if (y == x +\
    \ z && x == int(x) && y == int(y) && z == int(z))\n\t\treturn true;\n\telse\n\t\
    \treturn false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx1j1elmu: /tmp/tmpx1j1elmu.cpp:32: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(static_cast<int>(x)==static_cast<int>(y+z)||static_cast<int>(y)==static_cast<int>(x+z)||static_cast<int>(z)==static_cast<int>(x+y))\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3_7agc6d: /tmp/tmp3_7agc6d.cpp:25: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return x == y + z || y == x + z\
    \ || z == x + y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm93oht7w: /tmp/tmpm93oht7w.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool t = (x == y + z || y == x +\
    \ z || z == x + y);\n\tint a = (int)x;\n\tint b = (int)y;\n\tint c = (int)z;\n\
    \treturn t && a == x && b == y && c == z;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpka9ywc7t: /tmp/tmpka9ywc7t.cpp:29: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn std::ceil(x) == std::ceil(y)\
    \ + std::ceil(z) || std::ceil(y) == std::ceil(x) + std::ceil(z) || std::ceil(z)\
    \ == std::ceil(x) + std::ceil(y);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa7t9l7bh: /tmp/tmpa7t9l7bh.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    bool result = false;\n    if (x\
    \ == (y + z) || y == (x + z) || z == (x + y)) {\n        result = true;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptatfewfs: /tmp/tmptatfewfs.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z)\n\t\treturn true;\n\
    \telse if (y == x + z)\n\t\treturn true;\n\telse if (z == x + y)\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvwpucuim: /tmp/tmpvwpucuim.cpp:25: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ( (int)x + (int)y == (int)z\
    \ ) || ( (int)x + (int)z == (int)y ) || ( (int)y + (int)z == (int)x );\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxyifjb8_: /tmp/tmpxyifjb8_.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return ( (x == (y + z)) || (y ==\
    \ (x + z)) || (z == (x + y)) );\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx2gexaag: /tmp/tmpx2gexaag.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (int(x) == int(y) + int(z) ||\
    \ int(y) == int(x) + int(z) || int(z) == int(x) + int(y))\n\t\treturn true;\n\t\
    else\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfhykpaa8: /tmp/tmpfhykpaa8.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (static_cast<int>(x) + static_cast<int>(y)\
    \ == static_cast<int>(z)) || (static_cast<int>(x) + static_cast<int>(z) == static_cast<int>(y))\
    \ || (static_cast<int>(y) + static_cast<int>(z) == static_cast<int>(x));\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbdoxitgn: /tmp/tmpbdoxitgn.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(is_integral<float>::value\
    \ == true);\n    if(is_integral<float>::value == true)\n    {\n        if((x ==\
    \ y + z)||(y == x + z)||(z == x + y))\n        {\n            return true;\n \
    \       }\n        else\n        {\n            return false;\n        }\n   \
    \ }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/c++/11/cassert:44,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpt7ftzcxy.cpp:2:\n/tmp/tmpt7ftzcxy.cpp: In function \u2018bool\
    \ any_int(float, float, float)\u2019:\n/tmp/tmpt7ftzcxy.cpp:12:12: error: \u2018\
    is_integral\u2019 was not declared in this scope; did you mean \u2018std::is_integral\u2019\
    ?\n   12 |     assert(is_integral<float>::value == true);\n      |           \
    \ ^~~~~~~~~~~\nIn file included from /usr/include/c++/11/bits/move.h:57,\n   \
    \              from /usr/include/c++/11/bits/stl_pair.h:59,\n                \
    \ from /usr/include/c++/11/bits/stl_algobase.h:64,\n                 from /usr/include/c++/11/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/11/cmath:1935,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:41,\n                 from\
    \ /tmp/tmpt7ftzcxy.cpp:2:\n/usr/include/c++/11/type_traits:392:12: note: \u2018\
    std::is_integral\u2019 declared here\n  392 |     struct is_integral\n      |\
    \            ^~~~~~~~~~~\nIn file included from /usr/include/c++/11/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt7ftzcxy.cpp:2:\n/tmp/tmpt7ftzcxy.cpp:12:24: error:\
    \ expected primary-expression before \u2018float\u2019\n   12 |     assert(is_integral<float>::value\
    \ == true);\n      |                        ^~~~~\n/tmp/tmpt7ftzcxy.cpp:12:24:\
    \ error: expected \u2018)\u2019 before \u2018float\u2019\n/tmp/tmpt7ftzcxy.cpp:12:24:\
    \ error: expected \u2018)\u2019 before \u2018float\u2019\n/tmp/tmpt7ftzcxy.cpp:12:5:\
    \ note: to match this \u2018(\u2019\n   12 |     assert(is_integral<float>::value\
    \ == true);\n      |     ^~~~~~\n/tmp/tmpt7ftzcxy.cpp:13:20: error: expected primary-expression\
    \ before \u2018float\u2019\n   13 |     if(is_integral<float>::value == true)\n\
    \      |                    ^~~~~\n/tmp/tmpt7ftzcxy.cpp:13:20: error: expected\
    \ \u2018)\u2019 before \u2018float\u2019\n   13 |     if(is_integral<float>::value\
    \ == true)\n      |       ~            ^~~~~\n      |                    )\n/tmp/tmpt7ftzcxy.cpp:24:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   24 | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat sum = x + y + z;\n\tif (x ==\
    \ sum || y == sum || z == sum) {\n\t\treturn true;\n\t}\n\telse return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp_83mhal: /tmp/tmpp_83mhal.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (int(x) + int(y) == int(z))\n\t\
    \treturn true;\n\telse if (int(x) + int(z) == int(y))\n\t\treturn true;\n\telse\
    \ if (int(y) + int(z) == int(x))\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpta03v2jv: /tmp/tmpta03v2jv.cpp:32: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if( (x+y==z) || (x+z==y) || (y+z==x)\
    \ ) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppuwyxaai: /tmp/tmppuwyxaai.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a, b, c;\n\ta = x;\n\tb = y;\n\
    \tc = z;\n\tif (a + b == c || a + c == b || b + c == a) {\n\t\treturn true;\n\t\
    }\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2oc0gyuh: /tmp/tmp2oc0gyuh.cpp:34: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((int)x + (int)y == (int)z) {\n\
    \t\treturn true;\n\t}\n\telse if ((int)x + (int)z == (int)y) {\n\t\treturn true;\n\
    \t}\n\telse if ((int)y + (int)z == (int)x) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjyxw71yq: /tmp/tmpjyxw71yq.cpp:36: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (((x + y) == z || (x + z) == y\
    \ || (y + z) == x) && (std::floor(x) == x) && (std::floor(y) == y) && (std::floor(z)\
    \ == z))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbhd27_8e: /tmp/tmpbhd27_8e.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (z==y+x && (std::isnan(x) &&\
    \ std::isnan(y) && std::isnan(z))) {\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj8rbuaww: /tmp/tmpj8rbuaww.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((x == y + z || y == x + z ||\
    \ z == x + y) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmoxmwymr: /tmp/tmpmoxmwymr.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp701hie7l: /tmp/tmp701hie7l.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\t// assuming int is the same as float\n\
    \tif (x - y == z || x - z == y || y - x == z || y - z == x || z - x == y || z\
    \ - y == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe6lvlr64: /tmp/tmpe6lvlr64.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  bool sum = false;\n    if(x == y\
    \ + z || y == x + z || z == x + y)\n      sum = true;\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv_zrw8xp: /tmp/tmpv_zrw8xp.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (floor(x) == x && floor(y)\
    \ == y && floor(z) == z && (x == y + z || y == x + z || z == x + y));\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpszn95wv8: /tmp/tmpszn95wv8.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (std::ceil(x) == x && std::ceil(y)\
    \ == y && std::ceil(z) == z) {\n\t\tif (std::ceil(x) == std::ceil(y) + std::ceil(z))\n\
    \t\t\treturn true;\n\t\telse if (std::ceil(y) == std::ceil(x) + std::ceil(z))\n\
    \t\t\treturn true;\n\t\telse if (std::ceil(z) == std::ceil(x) + std::ceil(y))\n\
    \t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjawz__l_: /tmp/tmpjawz__l_.cpp:36: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  int a = x + y;\n  int b = x + z;\n\
    \  int c = y + z;\n  if (a == z || b == y || c == x) {\n    return true;\n  }\n\
    \  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7v3cusg3: /tmp/tmp7v3cusg3.cpp:26: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(ceil(x) == ceil(y+z) || ceil(y)\
    \ == ceil(x+z) || ceil(z) == ceil(x+y)){\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbrtyesmb: /tmp/tmpbrtyesmb.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo90dgtgv: /tmp/tmpo90dgtgv.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x != (int)x || y != (int)y ||\
    \ z != (int)z)\n        return false;\n    return (x + y == z || x + z == y ||\
    \ y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmb9w0uck: /tmp/tmpmb9w0uck.cpp:27: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdbvcx7d_: /tmp/tmpdbvcx7d_.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // check that all the inputs are\
    \ integers\n    if (int(x) == x && int(y) == y && int(z) == z) {\n        // return\
    \ if one of the input numbers is equal to the sum of the other two\n        return\
    \ x == y + z || y == x + z || z == x + y;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp56k15wsc: /tmp/tmp56k15wsc.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return std::fmod(x, 1) == 0 &&\
    \ std::fmod(y, 1) == 0 && std::fmod(z, 1) == 0 && x + y == z ||\n           x\
    \ + z == y || y + z == x;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpljy18nf5: /tmp/tmpljy18nf5.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    //turn to int and compare\n   \
    \ //find max\n    if(x==(y+z) || x==(y-z) || x==(z-y)){\n        return true;\n\
    \    }\n    if(y==(x+z) || y==(x-z) || y==(z-x)){\n        return true;\n    }\n\
    \    if(z==(y+x) || z==(y-x) || z==(x-y)){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqiya5e7c: /tmp/tmpqiya5e7c.cpp:29: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(x==y+z||x==y-z||y==x+z||y==x-z||z==x+y||z==x-y)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4q01d6xb: /tmp/tmp4q01d6xb.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || x == y - z || x\
    \ == z - y)\n\t\treturn true;\n\telse if (y == x + z || y == x - z || y == z -\
    \ x)\n\t\treturn true;\n\telse if (z == x + y || z == x - y || z == y - x)\n\t\
    \treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp01h6x85f: /tmp/tmp01h6x85f.cpp:25: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2w17sxzj: /tmp/tmp2w17sxzj.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(std::floor(x) == x && std::floor(y)\
    \ == y && std::floor(z) == z){\n    if(x == y + z || y == x + z || z == x + y){\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7j9n9yld: /tmp/tmp7j9n9yld.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n   float a,b,c;\n   a=round(x);\n \
    \  b=round(y);\n   c=round(z);\n   if((a+b==c) or (a+c==b) or (b+c==a)){\n   \
    \ return true;\n   }\n   else{\n    return false;\n   }\n}\nint main() {\n   \
    \ auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqswrdjlj: /tmp/tmpqswrdjlj.cpp:34: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool isEqual = false;\n\t\n\tstd::vector<float>\
    \ vec = {x, y, z};\n\t\n\tfor (float i = 0; i < vec.size(); i++) {\n\t\tif (i\
    \ == std::floor(i)) {\n\t\t\tisEqual = true;\n\t\t} else {\n\t\t\tisEqual = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (isEqual) {\n\t\t\n\t\tfloat sum = x + y;\n\
    \t\t\n\t\tif (z == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tsum = x + z;\n\
    \t\t\n\t\tif (y == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tsum = y + z;\n\
    \t\t\n\t\tif (x == sum) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\
    \t}\n\t\n\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n   \
    \ assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpadtm2xej: /tmp/tmpadtm2xej.cpp:54: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(fmod(x, y) == 0 && fmod(x, z)\
    \ == 0 && fmod(z, y) == 0)\n    return true;\n  else\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6i4u1t2f: /tmp/tmp6i4u1t2f.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((x + y == z) || (x + z ==\
    \ y) || (y + z == x)) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpibq0jbsr: /tmp/tmpibq0jbsr.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (floor(x) == floor(y+z) || floor(y)\
    \ == floor(x+z) || floor(z) == floor(x+y))\n        return true;\n    else\n \
    \       return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_gox6_2d: /tmp/tmp_gox6_2d.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return ( ( (int)x + (int)y == (int)z)\
    \ || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x) );\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmps61l99z6: /tmp/tmps61l99z6.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x + y == z || x + z == y || y\
    \ + z == x) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmph5p8g76u: /tmp/tmph5p8g76u.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (floor(x) + floor(y) ==\
    \ floor(z) || floor(x) + floor(z) == floor(y) || floor(y) + floor(z) == floor(x));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptrkbd7nt: /tmp/tmptrkbd7nt.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(((x==y+z) || (y==x+z) || (z==x+y))\
    \ && (std::floor(x)==x) && (std::floor(y)==y) && (std::floor(z)==z)) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8t00f8yq: /tmp/tmp8t00f8yq.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x + y == z || x + z == y\
    \ || y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1sd_x7ns: /tmp/tmp1sd_x7ns.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return (int)x+(int)y==(int)z||(int)x+(int)z==(int)y||(int)y+(int)z==(int)x;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbd596pm4: /tmp/tmpbd596pm4.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(floor(x)==x && floor(y)==y &&\
    \ floor(z)==z) {\n\t\tif(x+y==z || x+z==y || y+z==x) {\n\t\t\treturn true;\n\t\
    \t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptxne9q4l: /tmp/tmptxne9q4l.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a = (int)x;\n\tint b = (int)y;\n\
    \tint c = (int)z;\n\tif (a + b == c || a + c == b || b + c == a) {\n\t\treturn\
    \ true;\n\t}\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6zyj49r: /tmp/tmpc6zyj49r.cpp:32: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\t//if(!(x-y==z||y-x==z||z-x==y||z-y==x||x-z==y||y-z==x))\
    \ return false;\n\tif(int(x+y)==z||int(y+z)==x||int(z+x)==y) return true;\n\t\
    else return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr1pxsk40: /tmp/tmpr1pxsk40.cpp:20: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  int a = x;\n  int b = y;\n  int c\
    \ = z;\n  int sum = a + b;\n  if ((sum == c) || (sum == a) || (sum == b)) {\n\
    \    return true;\n  }\n  else {\n    return false;\n  }\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpypw21le2: /tmp/tmpypw21le2.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint p = x;\n\tint q = y;\n\tint r\
    \ = z;\n\tif (p == y + z || q == x + z || r == x + y) {\n\t\treturn true;\n\t\
    }\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp34j9elg6: /tmp/tmp34j9elg6.cpp:26: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (static_cast<int>(x) + static_cast<int>(y)\
    \ == static_cast<int>(z)) {\n\t\treturn true;\n\t}\n\telse if (static_cast<int>(x)\
    \ + static_cast<int>(z) == static_cast<int>(y)) {\n\t\treturn true;\n\t}\n\telse\
    \ if (static_cast<int>(y) + static_cast<int>(z) == static_cast<int>(x)) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqgibmrxm: /tmp/tmpqgibmrxm.cpp:36: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(x == (y+z) || y == (x+z) || z\
    \ == (x+y)) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0j58lb13: /tmp/tmp0j58lb13.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(fmod(x,1)==0 && fmod(y,1)==0 &&\
    \ fmod(z,1)==0){\n    if(x==y+z || x+y==z || y+z==x){\n      return true;\n  \
    \  }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmputm_qmhi: /tmp/tmputm_qmhi.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  bool sum = false;\n  sum = (x + y\
    \ == z || x + z == y || y + z == x);\n  return (x - (int)x == 0 && y - (int)y\
    \ == 0 && z - (int)z == 0 && sum);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc_y89zme: /tmp/tmpc_y89zme.cpp:27: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(x==y+z || y==x+z || z==x+y){\n\
    \      return true;\n  }\n  else{\n      return false;\n  }\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbkx59etj: /tmp/tmpbkx59etj.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return ((x==y+z || y==x+z || z==x+y)\
    \ && (x==(int)x && y==(int)y && z==(int)z));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9lm_257h: /tmp/tmp9lm_257h.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  int a, b, c;\n  a = x;\n  b = y;\n\
    \  c = z;\n  return (a == b + c || b == a + c || c == a + b);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ofx95u3: /tmp/tmp_ofx95u3.cpp:29: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x, b = y, c = z;\n    return\
    \ (a + b == c || a + c == b || b + c == a);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3udoc3yk: /tmp/tmp3udoc3yk.cpp:26: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return ((x==y+z)||(y==x+z)||(z==x+y))&&(x==(int)x)&&(y==(int)y)&&(z==(int)z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptxe379ru: /tmp/tmptxe379ru.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return floor(x) == x && floor(y)\
    \ == y && floor(z) == z && (x + y == z || x + z == y || y + z == x);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiujwuh4e: /tmp/tmpiujwuh4e.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool res1 = (x + y == z);\n\tbool\
    \ res2 = (x + z == y);\n\tbool res3 = (y + z == x);\n\tbool sum = (res1 || res2\
    \ || res3);\n\tbool frac1 = (x != floor(x));\n\tbool frac2 = (y != floor(y));\n\
    \tbool frac3 = (z != floor(z));\n\tbool frac = (frac1 || frac2 || frac3);\n\t\
    if (sum && !frac) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptpvqme4y: /tmp/tmptpvqme4y.cpp:38: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return floor(x) == floor(y + z) ||\
    \ floor(y) == floor(x + z) || floor(z) == floor(x + y);\n}\nint main() {\n   \
    \ auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp4rz2edje: /tmp/tmp4rz2edje.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (floor(x) == x && floor(y)\
    \ == y && floor(z) == z && (x == y + z || y == x + z || z == x + y));\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaq8uagod: /tmp/tmpaq8uagod.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (ceil(x) == floor(x) && ceil(y)\
    \ == floor(y) && ceil(z) == floor(z)) {\n\t\tif (x + y == z || x + z == y || y\
    \ + z == x) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxtm3n0n9: /tmp/tmpxtm3n0n9.cpp:35: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn x == y + z || y == x + z ||\
    \ z == x + y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkv6aspst: /tmp/tmpkv6aspst.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  // Write code here\n  std::cout <<\
    \ x << std::endl;\n  std::cout << y << std::endl;\n  std::cout << z << std::endl;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: "2\n3\n1\n"
  stderr: "tmphxb_4ass: /tmp/tmphxb_4ass.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x==y+z||y==x+z||z==x+y)\n  \
    \      return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1ok5c6lg: /tmp/tmp1ok5c6lg.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpstesp5hp: /tmp/tmpstesp5hp.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x + y == z && x == floor(x) &&\
    \ y == floor(y) && z == floor(z))\n\t\treturn true;\n\telse if (x + z == y &&\
    \ x == floor(x) && y == floor(y) && z == floor(z))\n\t\treturn true;\n\telse if\
    \ (y + z == x && x == floor(x) && y == floor(y) && z == floor(z))\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbhjxvz7f: /tmp/tmpbhjxvz7f.cpp:32: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool is_int = true;\n\tif (x != (int)x)\
    \ {\n\t\tis_int = false;\n\t}\n\tif (y != (int)y) {\n\t\tis_int = false;\n\t}\n\
    \tif (z != (int)z) {\n\t\tis_int = false;\n\t}\n\tif (is_int) {\n\t\tif (x + y\
    \ == z || x + z == y || y + z == x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8irw1obg: /tmp/tmp8irw1obg.cpp:40: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(x-y-z==0){\n\t\treturn true;\n\
    \t}\n\telse if(y-x-z==0){\n\t\treturn true;\n\t}\n\telse if(z-x-y==0){\n\t\treturn\
    \ true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7opc4qa: /tmp/tmpb7opc4qa.cpp:29: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == y + z || y == x + z\
    \ || z == x + y) && !((x - (int)x) || (y - (int)y) || (z - (int)z));\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl5akf4u9: /tmp/tmpl5akf4u9.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat a = (float)x + (float)y + (float)z;\n\
    \tfloat b = (float)x + (float)y;\n\tfloat c = (float)x + (float)z;\n\tfloat d\
    \ = (float)y + (float)z;\n\t//printf(\"%d %d %d %d\\n\", a, b, c, d);\n\tif (x\
    \ == b || x == c || x == d || y == c || y == d || z == b || z == c || z == d)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpelcgf8xm: /tmp/tmpelcgf8xm.cpp:26: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool int1 = (x == int(x));\n\tbool\
    \ int2 = (y == int(y));\n\tbool int3 = (z == int(z));\n\tif ((int1 && int2 &&\
    \ int3) && ((x + y == z) || (x + z == y) || (y + z == x)))\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsrjus_ol: /tmp/tmpsrjus_ol.cpp:31: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (std::isnan(x) || std::isnan(y)\
    \ || std::isnan(z))\n\t\treturn false;\n\tif (std::isinf(x) || std::isinf(y) ||\
    \ std::isinf(z))\n\t\treturn false;\n\tif (std::is_integral<float>::value)\n\t\
    \treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwr0z8yr1: /tmp/tmpwr0z8yr1.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat sum = x + y + z;\n\treturn\
    \ ((fmod(sum, 1) == 0) && ((fmod(x, 1) == 0) || (fmod(y, 1) == 0) || (fmod(z,\
    \ 1) == 0)));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy6f5zl6n: /tmp/tmpy6f5zl6n.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((x==y+z)||(y==x+z)||(z==x+y))\
    \ && (fmod(x,1)==0 && fmod(y,1)==0 && fmod(z,1)==0);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpti9lg76l: /tmp/tmpti9lg76l.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x - y == z || y - x == z\
    \ || x - z == y || z - x == y || y - z == x || z - y == x);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpyvwsdlf5: /tmp/tmpyvwsdlf5.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return x+y==z||x+z==y||y+z==x;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsry9kcjz: /tmp/tmpsry9kcjz.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(x == y + z || y == x + z || z\
    \ == x + y)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp2spc_le3: /tmp/tmp2spc_le3.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(x == y + z || y == x + z || z\
    \ == x + y) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplhphriep: /tmp/tmplhphriep.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (z == x + y && ceil(x) == x &&\
    \ ceil(y) == y && ceil(z) == z) {\n\t\treturn true;\n\t}\n\telse if (x == y +\
    \ z && ceil(x) == x && ceil(y) == y && ceil(z) == z) {\n\t\treturn true;\n\t}\n\
    \telse if (y == x + z && ceil(x) == x && ceil(y) == y && ceil(z) == z) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfozflm8c: /tmp/tmpfozflm8c.cpp:36: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\t//your code here\n\t\n\tif (x ==\
    \ (y + z) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\t\
    if (y == (x + z) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\
    \tif (z == (x + y) && x == (int)x && y == (int)y && z == (int)z)\n\t\treturn true;\n\
    \treturn false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj01q2j8m: /tmp/tmpj01q2j8m.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x != (int)x) {\n\t\treturn false;\n\
    \t}\n\tif (y != (int)y) {\n\t\treturn false;\n\t}\n\tif (z != (int)z) {\n\t\t\
    return false;\n\t}\n\tif (x + y == z) {\n\t\treturn true;\n\t}\n\tif (x + z ==\
    \ y) {\n\t\treturn true;\n\t}\n\tif (y + z == x) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3no_g9td: /tmp/tmp3no_g9td.cpp:43: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if( (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) ){\n        if( (x + y == z) || (x + z == y) || (y\
    \ + z == x) ){\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjore_p6_: /tmp/tmpjore_p6_.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a = x;\n\tint b = y;\n\tint c\
    \ = z;\n\tif ((a == b + c) || (b == a + c) || (c == a + b)) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqzhk7bt6: /tmp/tmpqzhk7bt6.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == y + z) || (y == x +\
    \ z) || (z == x + y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpugxty_sl: /tmp/tmpugxty_sl.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat sum = x + y + z;\n\tif ((x\
    \ == sum - x - y) || (y == sum - x - z) || (z == sum - x - y))\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpia2qk6d0: /tmp/tmpia2qk6d0.cpp:21: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool result = false;\n\tif ((x ==\
    \ y + z || y == x + z || z == x + y) && x == (int)x && y == (int)y && z == (int)z)\
    \ {\n\t\tresult = true;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ow13hyg: /tmp/tmp7ow13hyg.cpp:29: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (int)x == (int)y + (int)z\
    \ || (int)y == (int)x + (int)z || (int)z == (int)x + (int)y;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpn7vbp5op: /tmp/tmpn7vbp5op.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) && ((x + y == z) || (x + z == y) || (y + z == x));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq9q7mh3h: /tmp/tmpq9q7mh3h.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((std::floor(x) + std::floor(y)\
    \ == std::floor(z)) || (std::floor(x) + std::floor(z) == std::floor(y)) || (std::floor(y)\
    \ + std::floor(z) == std::floor(x)));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9d6wva_x: /tmp/tmp9d6wva_x.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || x == z + y || z\
    \ == x + y || z == y + x || y == x + z || y == z + x) {\n\t\treturn true;\n\t\
    }\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl5s80ijb: /tmp/tmpl5s80ijb.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x>= 0 && y>= 0 && z>= 0)\n \
    \       if(x==y+z || y==x+z || z==x+y)\n            return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwneaaawd: /tmp/tmpwneaaawd.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == (y + z) || y == (x + z)\
    \ || z == (x + y)){\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1m0w76es: /tmp/tmp1m0w76es.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn x == y + z || y == x + z ||\
    \ z == x + y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp49blrhuf: /tmp/tmp49blrhuf.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp58_bf2do: /tmp/tmp58_bf2do.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x==y+z)||(y==x+z)||(z==x+y);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4uofjuke: /tmp/tmp4uofjuke.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == (y + z)) || (y == (x\
    \ + z)) || (z == (x + y));\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpym3o91ir: /tmp/tmpym3o91ir.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x + y == z || x + z == y\
    \ || y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6fc3vtrr: /tmp/tmp6fc3vtrr.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == (y + z) || y == (x + z)\
    \ || z == (x + y)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmozvwvrk: /tmp/tmpmozvwvrk.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdsi087sb: /tmp/tmpdsi087sb.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn(x == y + z || y == x + z ||\
    \ z == x + y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkvh7dl3v: /tmp/tmpkvh7dl3v.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((x == y + z || y == x + z\
    \ || z == x + y) && (x == (int)x && y == (int)y && z == (int)z));\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoovv8ta4: /tmp/tmpoovv8ta4.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a = x;\n\tint b = y;\n\tint c\
    \ = z;\n\tif (x == a && y == b && z == c) {\n\t\tif (x == a + b || x == a + c\
    \ || y == b + c) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy2f65n87: /tmp/tmpy2f65n87.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(x == y + z || y == x + z || z\
    \ == x + y)\n    return true;\n  else\n    return false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpq3nsi8gw: /tmp/tmpq3nsi8gw.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a = x;\n\tint b = y;\n\tint c\
    \ = z;\n\tif (x + y == z) {\n\t\treturn true;\n\t}\n\telse if (x + z == y) {\n\
    \t\treturn true;\n\t}\n\telse if (y + z == x) {\n\t\treturn true;\n\t}\n\telse\
    \ if (a + b == c) {\n\t\treturn true;\n\t}\n\telse if (a + c == b) {\n\t\treturn\
    \ true;\n\t}\n\telse if (b + c == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1h9crb1y: /tmp/tmp1h9crb1y.cpp:41: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x+y==z || x+z==y || y+z==x)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9fwyuede: /tmp/tmp9fwyuede.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((int)x == ((int)y + (int)z) ||\
    \ (int)y == ((int)x + (int)z) || (int)z == ((int)x + (int)y))\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv2ojspq_: /tmp/tmpv2ojspq_.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint sum = x + y + z;\n\tif (sum ==\
    \ int(x) || sum == int(y) || sum == int(z)) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxnmo62oc: /tmp/tmpxnmo62oc.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxyl1z9yg: /tmp/tmpxyl1z9yg.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1laiqct1: /tmp/tmp1laiqct1.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint a = x;\n\tint b = y;\n\tint c\
    \ = z;\n\tif (a == b + c || b == a + c || c == a + b)\n\t\treturn true;\n\telse\n\
    \t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe3o3n6dx: /tmp/tmpe3o3n6dx.cpp:31: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if (floor(x) == x && floor(y) ==\
    \ y && floor(z) == z) {\n    if (x + y == z || x + z == y || y + z == x) {\n \
    \     return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj8jh29d9: /tmp/tmpj8jh29d9.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return round(x) + round(y) == round(z)\
    \ || round(x) + round(z) == round(y) || round(y) + round(z) == round(x);\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdc4egooq: /tmp/tmpdc4egooq.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  //checks if all three are integers\
    \ or not\n  if (x - (int)x == 0 && y - (int)y == 0 && z - (int)z == 0) {\n   \
    \ if (x + y == z || x + z == y || y + z == x) {\n      return true;\n    }\n \
    \ }\n  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1o7oylbc: /tmp/tmp1o7oylbc.cpp:31: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || x == y - z || x\
    \ == z - y)\n\t\treturn true;\n\telse if (y == x + z || y == x - z || y == z -\
    \ x)\n\t\treturn true;\n\telse if (z == x + y || z == x - y || z == y - x)\n\t\
    \treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwl2cjrvc: /tmp/tmpwl2cjrvc.cpp:25: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn x == y + z || y == x + z ||\
    \ z == x + y;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphun2tk_o: /tmp/tmphun2tk_o.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == y + z || y == x + z\
    \ || z == x + y) && std::floor(x) == x && std::floor(y) == y && std::floor(z)\
    \ == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1wr584vy: /tmp/tmp1wr584vy.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbvujmjf7: /tmp/tmpbvujmjf7.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn x + y == z || x + z == y ||\
    \ y + z == x;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3k6pz02v: /tmp/tmp3k6pz02v.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y)) return\
    \ true;\n\telse return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph72iwt67: /tmp/tmph72iwt67.cpp:26: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint sum = x + y + z;\n\treturn (int)sum\
    \ == sum;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp13a0rj_9: /tmp/tmp13a0rj_9.cpp:18: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if (x + y == z || x + z == y || y\
    \ + z == x) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp10z1fnx6: /tmp/tmp10z1fnx6.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool result = true;\n\tif (floor(x)\
    \ == x && floor(y) == y && floor(z) == z) {\n\t\tif (x + y == z || x + z == y\
    \ || y + z == x) {\n\t\t\tresult = true;\n\t\t}\n\t\telse {\n\t\t\tresult = false;\n\
    \t\t}\n\t}\n\telse {\n\t\tresult = false;\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfoesdraz: /tmp/tmpfoesdraz.cpp:37: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x + y == z && x == (int)x\
    \ && y == (int)y && z == (int)z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcojry77e: /tmp/tmpcojry77e.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint ix = (int)x;\n\tint iy = (int)y;\n\
    \tint iz = (int)z;\n\tif (x == ix && y == iy && z == iz) {\n\t\tif (ix == iy +\
    \ iz || iy == ix + iz || iz == ix + iy) {\n\t\t\treturn true;\n\t\t}\n\t\telse\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnrka6xi6: /tmp/tmpnrka6xi6.cpp:38: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint x1 = x;\n\tint y1 = y;\n\tint\
    \ z1 = z;\n\tif (x == x1 && y == y1 && z == z1) {\n\t\tif (x == y + z || y ==\
    \ x + z || z == x + y) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1u1e6ukl: /tmp/tmp1u1e6ukl.cpp:38: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return ( (x== y+z) || (y==x+z)\
    \ || (z==x+y));\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0so9fuo_: /tmp/tmp0so9fuo_.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif(x + y == z || x + z == y || y\
    \ + z == x) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcou5pbml: /tmp/tmpcou5pbml.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(std::ceil(x) == x && std::ceil(y)\
    \ == y && std::ceil(z) == z){\n    if(x == y + z || y == x + z || z == x + y){\n\
    \      return true;\n    }else{\n      return false;\n    }\n  }else{\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd_8c3i82: /tmp/tmpd_8c3i82.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat sum = x + y + z;\n\treturn\
    \ int(sum) == sum;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprlurv0nm: /tmp/tmprlurv0nm.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn  (x + y == z) || (x + z ==\
    \ y) || (y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpehkmts58: /tmp/tmpehkmts58.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9v0rsyvp: /tmp/tmp9v0rsyvp.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  \n\t\tif(x==0 || y==0 || z==0){\n\
    \t\t\treturn false;\n\t\t}\n\n\t\tif((x+y)==z || (x+z)==y || (y+z)==x){\n\t\t\t\
    return true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ip_jte6: /tmp/tmp3ip_jte6.cpp:29: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  assert(x>=0&&y>=0&&z>=0);\n  if((int)x+(int)y==(int)z||(int)x+(int)z==(int)y||(int)y+(int)z==(int)x)\n\
    \  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj1q34z1a: /tmp/tmpj1q34z1a.cpp:12: bool any_int(float, float, float):\
    \ Assertion `x>=0&&y>=0&&z>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == (y + z) || y == (x + z)\
    \ || z == (x + y))\n\t\treturn true;\n\telse return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp51bjvnoq: /tmp/tmp51bjvnoq.cpp:20: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if((x == y + z) || (y == x + z)\
    \ || (z == x + y))\n    {\n        return true;\n    }\n    else\n    {\n    \
    \    return false;\n    }\n\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp39emq7mj: /tmp/tmp39emq7mj.cpp:26: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((int)x == ((int)y + (int)z) ||\
    \ (int)y == ((int)x + (int)z) || (int)z == ((int)x + (int)y))\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk5yxhthk: /tmp/tmpk5yxhthk.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Take input and store all the\
    \ inputs\n    return (x+y==z||y+z==x||x+z==y);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpijynyjug: /tmp/tmpijynyjug.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    if(a+b==c || a+c==b || b+c==a)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n    \n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnm9zrw0j: /tmp/tmpnm9zrw0j.cpp:36: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn floor(x) == x && floor(y)\
    \ == y && floor(z) == z && (x + y == z || x + z == y || y + z == x);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp85eop4t7: /tmp/tmp85eop4t7.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x!=0 && y!=0 && z!=0) {\n \
    \       if ((x == y + z) || (y == x + z) || (z == x + y)) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplo794oq1: /tmp/tmplo794oq1.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint first = (int)x;\n\tint second\
    \ = (int)y;\n\tint third = (int)z;\n\tif (first + second == third || second +\
    \ third == first || first + third == second) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq1jc18g_: /tmp/tmpq1jc18g_.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == (y + z) || y == (x + z)\
    \ || z == (x + y))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplmgv6a3l: /tmp/tmplmgv6a3l.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tint sum = x + y + z;\n\tif (sum ==\
    \ x || sum == y || sum == z) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeuynncc_: /tmp/tmpeuynncc_.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tbool result = false;\n\tif (x ==\
    \ y + z || y == x + z || z == x + y) {\n\t\tresult = true;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxtvn90uz: /tmp/tmpxtvn90uz.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmps8yw93a0: /tmp/tmps8yw93a0.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn x+y==z || x+z==y || y+z==x;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphnfctj40: /tmp/tmphnfctj40.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(x == (y + z) || y == (x + z)\
    \ || z == (x + y)){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkwczhx4s: /tmp/tmpkwczhx4s.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  // declare variables to store float\
    \ values\n  float sum_1;\n  float sum_2;\n  float sum_3;\n  // convert float values\
    \ to int values\n  int x_int = static_cast<int>(x);\n  int y_int = static_cast<int>(y);\n\
    \  int z_int = static_cast<int>(z);\n  // convert back to float and add to variables\n\
    \  sum_1 = static_cast<float>(x_int + y_int);\n  sum_2 = static_cast<float>(x_int\
    \ + z_int);\n  sum_3 = static_cast<float>(y_int + z_int);\n  // check if one value\
    \ is equal to the sum of the other two\n  if (x == sum_1 || x == sum_2 || x ==\
    \ sum_3) {\n    return true;\n  } else if (y == sum_1 || y == sum_2 || y == sum_3)\
    \ {\n    return true;\n  } else if (z == sum_1 || z == sum_2 || z == sum_3) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpza9r8meg: /tmp/tmpza9r8meg.cpp:46: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  // return (fmod(x,1)==0 && fmod(y,1)==0\
    \ && fmod(z,1)==0) && (x==y+z || y==x+z || z==x+y);\n  return x==floor(x) && y==floor(y)\
    \ && z==floor(z) && (x==y+z || y==x+z || z==x+y);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc2iuymgf: /tmp/tmpc2iuymgf.cpp:26: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((x + y == z) || (x + z == y)\
    \ || (y + z == x)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfqgjyjcn: /tmp/tmpfqgjyjcn.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && x == floor(x)\
    \ && y == floor(y) && z == floor(z)) {\n        return true;\n    } else if (y\
    \ == x + z && x == floor(x) && y == floor(y) && z == floor(z)) {\n        return\
    \ true;\n    } else if (z == x + y && x == floor(x) && y == floor(y) && z == floor(z))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo3dehol3: /tmp/tmpo3dehol3.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(!(int(x)==x&&int(y)==y&&int(z)==z)){\n\
    \        return false;\n    }\n    else if(int(x)==(int(y)+int(z))||int(y)==(int(x)+int(z))||int(z)==(int(x)+int(y))){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp91h49n92: /tmp/tmp91h49n92.cpp:33: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\t\n\tbool xy =  y + z == x;\n\tbool\
    \ xz =  z + x == y;\n\tbool yz =  x + y == z;\n\treturn xy || xz || yz;\n\t}\n\
    // #include<assert.h>\n// #include<bits/stdc++.h>\n// // Create a function that\
    \ takes a number as an argument.\n// // Add up all the numbers from 1 to the number\
    \ you passed to the function.\n// // For example, if the input is 4 then your\
    \ function should return 10 because 1 + 2 + 3 + 4 = 10.\n// // Examples\n// //\
    \ add_up(4) \u279E 10\n// // add_up(13) \u279E 91\n// // add_up(600) \u279E 180300\n\
    // int add_up(int n) {\n// \t// total = 0;\n// \t// for(int i = 0; i <= n; i++){\n\
    // \t// \ttotal = total + i;\n// \t// }\n// \t// return total;\n// \treturn (n\
    \ * (n + 1)) / 2;\n// }\n// #include<assert.h>\n// #include<bits/stdc++.h>\n//\
    \ // Create a function that takes a number as an argument.\n// // Subtract 1 from\
    \ the number.\n// // Return the result.\n// // Examples\n// // next_id(0) \u279E\
    \ -1\n// // next_id(1) \u279E 0\n// // next_id(2) \u279E 1\n// int next_id(int\
    \ n) {\n// \treturn n - 1;\n// }\n// #include<assert.h>\n// #include<bits/stdc++.h>\n\
    // // Create a function that takes an array of strings and numbers, and filters\
    \ out the array so that it returns an array of integers only.\n// // Examples\n\
    // // filter_list([\"A\", 1, \"B\", 0, 15]) \u279E [1, 0, 15]\n// // filter_list([\"\
    A\", \"B\", \"C\"]) \u279E []\n// // filter_list([1, 2, 3, \"A\",\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0h_sv_0.cpp:54:1: error: expected declaration before \u2018}\u2019\
    \ token\n   54 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((x == y + z) || (y == x +\
    \ z) || (z == x + y)) && (floor(x) == x) && (floor(y) == y) && (floor(z) == z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj4uagcss: /tmp/tmpj4uagcss.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat x1 = floor(x);\n\tfloat y1\
    \ = floor(y);\n\tfloat z1 = floor(z);\n\tif (x1 + y1 == z1 || x1 + z1 == y1 ||\
    \ y1 + z1 == x1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpii7fmiv0: /tmp/tmpii7fmiv0.cpp:31: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  assert(x>0);\n  assert(y>0);\n  assert(z>0);\n\
    \  if(x+y==z){\n    return true;\n  }\n  else if(x+z==y){\n    return true;\n\
    \  }\n  else if(y+z==x){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbs8dd4sk: /tmp/tmpbs8dd4sk.cpp:32: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn ((int)x + (int)y == (int)z\
    \ || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x) && (floor(x) == x\
    \ && floor(y) == y && floor(z) == z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpez5aqdod: /tmp/tmpez5aqdod.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\tif (x == int(x) && y == int(y) && z == int(z)) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv5q6zna6: /tmp/tmpv5q6zna6.cpp:30: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif ((int)x + (int)y == (int)z)\n\t\
    \treturn true;\n\telse if ((int)x + (int)z == (int)y)\n\t\treturn true;\n\telse\
    \ if ((int)y + (int)z == (int)x)\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9lbaafvu: /tmp/tmp9lbaafvu.cpp:32: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return ((x== y+z || y== x+z ||\
    \ z== y+x) && (x == floor(x) && y == floor(y) && z == floor(z)));\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp80yo4ys5: /tmp/tmp80yo4ys5.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == (y + z) || y == (x + z)\
    \ || z == (x + y)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3hqqi70r: /tmp/tmp3hqqi70r.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  \n  assert(x==int(x));\n  assert(y==int(y));\n\
    \  assert(z==int(z));\n  \n  if (x + y == z) {\n    return true;\n  }\n  else\
    \ if (x + z == y) {\n    return true;\n  }\n  else if (y + z == x) {\n    return\
    \ true;\n  }\n  else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2y_71ilu: /tmp/tmp2y_71ilu.cpp:13: bool any_int(float, float, float):\
    \ Assertion `x==int(x)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return (x+y == z || x+z == y || y+z\
    \ == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4148qukn: /tmp/tmp4148qukn.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  bool c = true;\n  if (static_cast<int>(x)\
    \ == x && static_cast<int>(y) == y && static_cast<int>(z) == z) {\n    c = true;\n\
    \  } else {\n    c = false;\n  }\n  if (c) {\n    if (x + y == z || x + z == y\
    \ || y + z == x) {\n      return true;\n    } else {\n      return false;\n  \
    \  }\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5_0qvqv3: /tmp/tmp5_0qvqv3.cpp:39: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x==((int)x));\n    assert(y==((int)y));\n\
    \    assert(z==((int)z));\n    if(x+y==z || x+z==y || y+z==x){\n        return\
    \ true;\n    }else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmct2bl97: /tmp/tmpmct2bl97.cpp:12: bool any_int(float, float, float):\
    \ Assertion `x==((int)x)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  if(x+y==z||x+z==y||y+z==x){\n   \
    \ return true;\n  }else{\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp836n6ymx: /tmp/tmp836n6ymx.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat sum;\n\tsum = x + y + z;\n\t\
    int f = floor(sum);\n\tint c = ceil(sum);\n\tint x1 = floor(x);\n\tint y1 = floor(y);\n\
    \tint z1 = floor(z);\n\tif (f == c) {\n\t\tif (x1 + y1 == z1 || x1 + z1 == y1\
    \ || y1 + z1 == x1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp86iwhhv8: /tmp/tmp86iwhhv8.cpp:42: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if((x == y + z) || (y == x + z)\
    \ || (z == x + y))\n        return true;\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8s0x63zz: /tmp/tmp8s0x63zz.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tfloat a = x + y;\n\tfloat b = x +\
    \ z;\n\tfloat c = y + z;\n\tif (((int)a == a) && ((int)b == b) && ((int)c == c))\
    \ {\n\t\tif ((int)a == (int)z || (int)b == (int)y || (int)c == (int)x) {\n\t\t\
    \treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg71jgp7y: /tmp/tmpg71jgp7y.cpp:38: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (ceil(x) == (ceil(y) + ceil(z)))\
    \ || (ceil(y) == (ceil(x) + ceil(z))) || (ceil(z) == (ceil(x) + ceil(y)));\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9bqunhaw: /tmp/tmp9bqunhaw.cpp:25: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\treturn (x == y + z || y == x + z\
    \ || z == x + y);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpekgjvjhw: /tmp/tmpekgjvjhw.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if(int(x) == int(y) + int(z) ||\
    \ int(y) == int(x) + int(z) || int(z) == int(x) + int(y)){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6q5t4c6d: /tmp/tmp6q5t4c6d.cpp:29: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ff30gh8: /tmp/tmp_ff30gh8.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0 && y >= 0 && z >=\
    \ 0);\n    return ((x + y == z) || (x + z == y) || (y + z == x));\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprr_x1t7v: /tmp/tmprr_x1t7v.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a + b == c || a + c == b || b + c == a) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9mjhsasz: /tmp/tmp9mjhsasz.cpp:31: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == (y + z)) || (y ==\
    \ (x + z)) || (z == (x + y));\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpors0jz3k: /tmp/tmpors0jz3k.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\tif (x == y + z || y == x + z || z\
    \ == x + y) {\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphsa2gppo: /tmp/tmphsa2gppo.cpp:22: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n  return (x + y == z || x + z == y\
    \ || y + z == x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3jzttkic: /tmp/tmp3jzttkic.cpp:18: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n\t\n\tbool sum = false;\n\tif(x + y\
    \ == z || x + z == y || y + z == x){\n\t\tsum = true;\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp14e0ldxc: /tmp/tmp14e0ldxc.cpp:23: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if((x+y==z) || (x+z==y) || (y+z==x))\n\
    \    {\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppq78jwgp: /tmp/tmppq78jwgp.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n// write your code here\n\tassert((x==int(x))&&(y==int(y))&&(z==int(z)));\n\
    \tif(x+y==z||x+z==y||y+z==x)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpejsj84l3: /tmp/tmpejsj84l3.cpp:13: bool any_int(float, float, float):\
    \ Assertion `(x==int(x))&&(y==int(y))&&(z==int(z))' failed.\n"
  exit_code: -6
  status: Exception
