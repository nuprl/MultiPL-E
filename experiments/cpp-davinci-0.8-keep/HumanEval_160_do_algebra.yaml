name: HumanEval_160_do_algebra
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
  \ and operand. The first list has basic algebra operations, and \n// the second\
  \ list is a list of integers. Use the two given lists to build the algebric \n//\
  \ expression and return the evaluation of this expression.\n// The basic algebra\
  \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( *\
  \ ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+',\
  \ '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result =\
  \ 9\n// Note:\n// The length of operator list is equal to the length of operand\
  \ list minus one.\n// Operand is a list of of non-negative integers.\n// Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\
  long do_algebra(std::vector<std::string> _operator_, std::vector<long> operand)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({\"\
  **\", \"*\", \"+\"})), (std::vector<long>({2, 3, 4, 5}))) == (37));\n    assert(candidate((std::vector<std::string>({\"\
  +\", \"*\", \"-\"})), (std::vector<long>({2, 3, 4, 5}))) == (9));\n    assert(candidate((std::vector<std::string>({\"\
  //\", \"*\"})), (std::vector<long>({7, 3, 4}))) == (8));\n}\n"
completions: ["    long ans = operand[0];\n    for(int i = 0; i < operand.size() -\
    \ 1; i++) {\n        if(_operator_[i] == \"+\") {\n            ans += operand[i\
    \ + 1];\n        } else if(_operator_[i] == \"-\") {\n            ans -= operand[i\
    \ + 1];\n        } else if(_operator_[i] == \"*\") {\n            ans *= operand[i\
    \ + 1];\n        } else if(_operator_[i] == \"//\") {\n            ans /= operand[i\
    \ + 1];\n        } else if(_operator_[i] == \"**\") {\n            ans = (long)pow(ans,\
    \ operand[i + 1]);\n        }\n    }\n    return ans;", "  long res = operand[0];\n\
    \  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"\
    +\") {\n      res += operand[i + 1];\n    } else if (_operator_[i] == \"-\") {\n\
    \      res -= operand[i + 1];\n    } else if (_operator_[i] == \"*\") {\n    \
    \  res *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n      res\
    \ /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n      res = pow(res,\
    \ operand[i + 1]);\n    }\n  }\n  return res;", "    // Write your code here\n\
    \    stack<int> s;\n    int i = operand.size()-1;\n    while(i >= 0){\n      \
    \  s.push(operand[i]);\n        i--;\n    }\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n        long a = s.top();\n        s.pop();\n        long b = s.top();\n\
    \        s.pop();\n        if(_operator_[i] == \"+\"){\n            s.push(a+b);\n\
    \        }\n        else if(_operator_[i] == \"-\"){\n            s.push(b-a);\n\
    \        }\n        else if(_operator_[i] == \"*\"){\n            s.push(a*b);\n\
    \        }\n        else if(_operator_[i] == \"/\"){\n            s.push(b/a);\n\
    \        }\n        else if(_operator_[i] == \"^\"){\n            s.push(pow(b,a));\n\
    \        }\n    }\n    return s.top();", "\tassert(_operator_.size() == operand.size()\
    \ - 1);\n\tlong answer = operand[0];\n\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tanswer += operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tanswer -= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tanswer *= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tanswer /= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tanswer = pow(answer, operand[i\
    \ + 1]);\n\t\t}\n\t}\n\treturn answer;", "\t// Write your code here.\n\tstack<long>\
    \ nums;\n\tstack<string> ops;\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\
    \t\tops.push(_operator_[i]);\n\t}\n\tnums.push(operand[0]);\n\tfor (int i = 1;\
    \ i < operand.size(); i++) {\n\t\tnums.push(operand[i]);\n\t\tif (ops.top() ==\
    \ \"*\") {\n\t\t\tlong n1 = nums.top();\n\t\t\tnums.pop();\n\t\t\tlong n2 = nums.top();\n\
    \t\t\tnums.pop();\n\t\t\tnums.push(n1 * n2);\n\t\t\tops.pop();\n\t\t}\n\t\telse\
    \ if (ops.top() == \"//\") {\n\t\t\tlong n1 = nums.top();\n\t\t\tnums.pop();\n\
    \t\t\tlong n2 = nums.top();\n\t\t\tnums.pop();\n\t\t\tnums.push(n2 / n1);\n\t\t\
    \tops.pop();\n\t\t}\n\t\telse if (ops.top() == \"**\") {\n\t\t\tlong n1 = nums.top();\n\
    \t\t\tnums.pop();\n\t\t\tlong n2 = nums.top();\n\t\t\tnums.pop();\n\t\t\tnums.push(pow(n2,\
    \ n1));\n\t\t\tops.pop();\n\t\t}\n\t}\n\tlong res = nums.top();\n\tnums.pop();\n\
    \tfor (int i = 0; i < ops.size(); i++) {\n\t\tif (ops.top() == \"+\") {\n\t\t\t\
    long n1 = nums.top();\n\t\t\tnums.pop();\n\t\t\tres += n1;\n\t\t}\n\t\telse if\
    \ (ops.top() == \"-\") {\n\t\t\tlong n1 = nums.top();\n\t\t\tnums.pop();\n\t\t\
    \tres -= n1;\n\t\t}\n\t\tops.pop();\n\t}\n\treturn res", "    if (_operator_.size()\
    \ == 0 || operand.size() == 0) {\n        return 0;\n    }\n    long result =\
    \ operand[0];\n    for (int i = 0; i < _operator_.size(); i++) {\n        if (_operator_[i]\
    \ == \"+\") {\n            result += operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"-\") {\n            result -= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"*\") {\n            result *= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"//\") {\n            result /= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n\
    \    }\n    return result;", "    // Write your code here\n    long ans = operand[0];\n\
    \    for(int i = 0; i < _operator_.size(); i++){\n        if(_operator_[i] ==\
    \ \"+\"){\n            ans += operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"-\"){\n            ans -= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"*\"){\n            ans *= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"//\"){\n            ans /= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"**\"){\n            ans = pow(ans, operand[i+1]);\n        }\n    }\n \
    \   return ans;", "    std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int\
    \ i = 0; i < operand.size() - 1; i++) {\n        char op = _operator_[i][0];\n\
    \        long op1 = stk.top();\n        stk.pop();\n        long op2 = operand[i\
    \ + 1];\n        switch(op) {\n            case '+':\n                stk.push(op1\
    \ + op2);\n                break;\n            case '-':\n                stk.push(op1\
    \ - op2);\n                break;\n            case '*':\n                stk.push(op1\
    \ * op2);\n                break;\n            case '/':\n                stk.push(op1\
    \ / op2);\n                break;\n            case '^':\n                stk.push(std::pow(op1,\
    \ op2));\n                break;\n        }\n    }\n    return stk.top();", " \
    \   assert(_operator_.size() == operand.size() - 1);\n    int n = operand.size();\n\
    \    long dp[n][n];\n    long minimum = INT_MAX;\n    std::string op_str[n][n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n \
    \       {\n            dp[i][j] = INT_MAX;\n            op_str[i][j] = \"\";\n\
    \        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        dp[i][i] = operand[i];\n\
    \        op_str[i][i] = std::to_string(operand[i]);\n    }\n    for(int l = 2;\
    \ l <= n; l++)\n    {\n        for(int i = 0; i < n - l + 1; i++)\n        {\n\
    \            int j = i + l - 1;\n            for(int k = i; k < j; k++)\n    \
    \        {\n                long left_val = dp[i][k];\n                long right_val\
    \ = dp[k + 1][j];\n                // std::cout << left_val << \" \" << right_val\
    \ << std::endl;\n                std::string left_str = op_str[i][k];\n      \
    \          std::string right_str = op_str[k + 1][j];\n                if(left_val\
    \ == INT_MAX || right_val == INT_MAX)\n                    continue;\n       \
    \         if(_operator_[k] == \"+\")\n                {\n                    if(dp[i][j]\
    \ > left_val + right_val)\n                    {\n                        dp[i][j]\
    \ = left_val + right_val;\n                        op_str[i][j] = left_str + \"\
    +\" + right_str;\n                    }\n                }\n                else\
    \ if(_operator_[k] == \"-\")\n                {\n                    if(dp[i][j]\
    \ > left_val - right_val)\n                    {\n                        dp[i][j]\
    \ = left_val - right_val;\n                        op_", "  std::stack<long> S;\n\
    \  S.push(operand[0]);\n  for(int i = 0; i < _operator_.size(); i++) {\n    int\
    \ x = S.top();\n    S.pop();\n    int y = operand[i+1];\n    if(_operator_[i]\
    \ == \"+\") {\n      S.push(x+y);\n    } else if(_operator_[i] == \"-\") {\n \
    \     S.push(x-y);\n    } else if(_operator_[i] == \"*\") {\n      S.push(x*y);\n\
    \    } else if(_operator_[i] == \"//\") {\n      S.push(x/y);\n    } else if(_operator_[i]\
    \ == \"**\") {\n      S.push(pow(x,y));\n    }\n  }\n  return S.top();", "\tlong\
    \ ans = operand[0];\n\tif (_operator_.size() == 0)\n\t\treturn ans;\n\tfor (int\
    \ i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\")\n\t\t\t\
    ans += operand[i + 1];\n\t\telse if (_operator_[i] == \"-\")\n\t\t\tans -= operand[i\
    \ + 1];\n\t\telse if (_operator_[i] == \"*\")\n\t\t\tans *= operand[i + 1];\n\t\
    \telse if (_operator_[i] == \"//\")\n\t\t\tans /= operand[i + 1];\n\t\telse if\
    \ (_operator_[i] == \"**\")\n\t\t\tans = pow(ans, operand[i + 1]);\n\t}\n\treturn\
    \ ans;", "  //Write your code here.\n  std::stack<long> operands;\n  for(size_t\
    \ i = 0; i < operand.size(); i++) {\n    if(_operator_[i] == \"+\") {\n      long\
    \ op1 = operands.top();\n      operands.pop();\n      long op2 = operand[i+1];\n\
    \      operands.push(op1 + op2);\n    } else if(_operator_[i] == \"-\") {\n  \
    \    long op1 = operands.top();\n      operands.pop();\n      long op2 = operand[i+1];\n\
    \      operands.push(op1 - op2);\n    } else if(_operator_[i] == \"*\") {\n  \
    \    long op1 = operands.top();\n      operands.pop();\n      long op2 = operand[i+1];\n\
    \      operands.push(op1 * op2);\n    } else if(_operator_[i] == \"//\") {\n \
    \     long op1 = operands.top();\n      operands.pop();\n      long op2 = operand[i+1];\n\
    \      operands.push(op1 / op2);\n    } else if(_operator_[i] == \"**\") {\n \
    \     long op1 = operands.top();\n      operands.pop();\n      long op2 = operand[i+1];\n\
    \      operands.push(pow(op1, op2));\n    } else {\n      operands.push(operand[i]);\n\
    \    }\n  }\n  return operands.top();", "  // Write your code here\n\n  long x\
    \ = operand[0];\n  for(int i = 0; i < _operator_.size(); i++){\n      if(_operator_[i]\
    \ == \"+\"){\n          x += operand[i+1];\n      }\n      else if(_operator_[i]\
    \ == \"-\"){\n          x -= operand[i+1];\n      }\n      else if(_operator_[i]\
    \ == \"*\"){\n          x *= operand[i+1];\n      }\n      else if(_operator_[i]\
    \ == \"//\"){\n          x /= operand[i+1];\n      }\n      else if(_operator_[i]\
    \ == \"**\"){\n          x = pow(x, operand[i+1]);\n      }\n  }\n  return x;",
  "  \n  for(int i = 0; i < _operator_.size(); i++){\n    \n    if(_operator_[i] ==\
    \ \"//\"){\n      operand[i] = operand[i] / operand[i+1];\n      operand.erase(operand.begin()\
    \ + i + 1);\n      _operator_.erase(_operator_.begin() + i);\n      i--;\n   \
    \ }\n    else if(_operator_[i] == \"**\"){\n      operand[i] = pow(operand[i],\
    \ operand[i+1]);\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  \n  for(int i = 0; i < _operator_.size(); i++){\n\
    \    \n    if(_operator_[i] == \"*\"){\n      operand[i] = operand[i] * operand[i+1];\n\
    \      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  \n  for(int i = 0; i < _operator_.size(); i++){\n\
    \    \n    if(_operator_[i] == \"+\"){\n      operand[i] = operand[i] + operand[i+1];\n\
    \      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n    else if(_operator_[i] == \"-\"){\n      operand[i]\
    \ = operand[i] - operand[i+1];\n      operand.erase(operand.begin() + i + 1);\n\
    \      _operator_.erase(_operator_.begin() + i);\n      i--;\n    }\n  }\n  \n\
    \  return operand[0];", "    long result = operand[0];\n    // create a stack\
    \ to keep track of the operands\n    std::stack<long> operand_stack;\n    operand_stack.push(result);\n\
    \    // iterate over operator_ and operand\n    for (unsigned i = 0; i < _operator_.size();\
    \ i++) {\n        if (_operator_[i] == \"+\") {\n            operand_stack.push(operand[i+1]);\n\
    \        } else if (_operator_[i] == \"-\") {\n            operand_stack.push(-operand[i+1]);\n\
    \        } else if (_operator_[i] == \"*\") {\n            long temp = operand_stack.top();\n\
    \            operand_stack.pop();\n            operand_stack.push(temp * operand[i+1]);\n\
    \        } else if (_operator_[i] == \"//\") {\n            long temp = operand_stack.top();\n\
    \            operand_stack.pop();\n            operand_stack.push(temp / operand[i+1]);\n\
    \        } else if (_operator_[i] == \"**\") {\n            long temp = operand_stack.top();\n\
    \            operand_stack.pop();\n            operand_stack.push(std::pow(temp,\
    \ operand[i+1]));\n        }\n    }\n    // sum up all the operands\n    while\
    \ (!operand_stack.empty()) {\n        result += operand_stack.top();\n       \
    \ operand_stack.pop();\n    }\n    return result;", "    //int len = _operator_.size();\n\
    \    std::stack<long> stk;\n    //std::unordered_map<std::string, std::function<long(long,\
    \ long)>> map;\n    //map[\"+\"] = [](long a, long b) {return a + b;};\n    //map[\"\
    -\"] = [](long a, long b) {return a - b;};\n    //map[\"*\"] = [](long a, long\
    \ b) {return a * b;};\n    //map[\"//\"] = [](long a, long b) {return a / b;};\n\
    \    //map[\"**\"] = [](long a, long b) {return std::pow(a, b);};\n    for (int\
    \ i = 0; i < _operator_.size(); i++) {\n        std::string op = _operator_[i];\n\
    \        long op1 = operand[i];\n        long op2 = operand[i + 1];\n        if\
    \ (op == \"+\") {\n            stk.push(op1 + op2);\n        } else if (op ==\
    \ \"-\") {\n            stk.push(op1 - op2);\n        } else if (op == \"*\")\
    \ {\n            stk.push(op1 * op2);\n        } else if (op == \"//\") {\n  \
    \          stk.push(op1 / op2);\n        } else if (op == \"**\") {\n        \
    \    stk.push(std::pow(op1, op2));\n        }\n    }\n    return stk.top();",
  "\tif (_operator_.size() == 0)\n\t\treturn 0;\n\tstd::stack<long> stack;\n\tauto\
    \ it = _operator_.begin();\n\tstack.push(operand[0]);\n\tstack.push(operand[1]);\n\
    \tfor (int i = 2; i < operand.size(); i++) {\n\t\tauto op = *it;\n\t\tif (op ==\
    \ \"+\") {\n\t\t\tstack.push(stack.top());\n\t\t\tstack.pop();\n\t\t\tstack.top()\
    \ += operand[i];\n\t\t}\n\t\telse if (op == \"-\") {\n\t\t\tstack.push(stack.top());\n\
    \t\t\tstack.pop();\n\t\t\tstack.top() -= operand[i];\n\t\t}\n\t\telse if (op ==\
    \ \"*\") {\n\t\t\tstack.push(stack.top());\n\t\t\tstack.pop();\n\t\t\tstack.top()\
    \ *= operand[i];\n\t\t}\n\t\telse if (op == \"//\") {\n\t\t\tstack.push(stack.top());\n\
    \t\t\tstack.pop();\n\t\t\tstack.top() /= operand[i];\n\t\t}\n\t\telse if (op ==\
    \ \"**\") {\n\t\t\tstack.push(stack.top());\n\t\t\tstack.pop();\n\t\t\tstack.top()\
    \ = pow(stack.top(), operand[i]);\n\t\t}\n\t\tit++;\n\t}\n\treturn stack.top();",
  "    std::stack<int> s;\n    for(int i = 0; i < _operator_.size(); i++) {\n    \
    \    std::string opt = _operator_[i];\n        if(opt == \"+\") {\n          \
    \  long temp = operand[i];\n            operand[i] = 0;\n            operand[i\
    \ + 1] = operand[i + 1] + temp;\n        } else if(opt == \"-\") {\n         \
    \   long temp = operand[i];\n            operand[i] = 0;\n            operand[i\
    \ + 1] = operand[i + 1] - temp;\n        } else if(opt == \"*\") {\n         \
    \   long temp = operand[i];\n            operand[i] = 0;\n            operand[i\
    \ + 1] = operand[i + 1] * temp;\n        } else if(opt == \"//\") {\n        \
    \    long temp = operand[i];\n            operand[i] = 0;\n            operand[i\
    \ + 1] = operand[i + 1] / temp;\n        } else if(opt == \"**\") {\n        \
    \    long temp = operand[i];\n            operand[i] = 0;\n            operand[i\
    \ + 1] = pow(operand[i + 1], temp);\n        }\n    }\n    return operand[operand.size()\
    \ - 1];", "\tlong result = operand[0];\n\tint count = 0;\n\tfor (int i = 1; i\
    \ < operand.size(); i++) {\n\t\tif (_operator_[count] == \"+\") {\n\t\t\tresult\
    \ += operand[i];\n\t\t}\n\t\telse if (_operator_[count] == \"-\") {\n\t\t\tresult\
    \ -= operand[i];\n\t\t}\n\t\telse if (_operator_[count] == \"*\") {\n\t\t\tresult\
    \ *= operand[i];\n\t\t}\n\t\telse if (_operator_[count] == \"//\") {\n\t\t\tresult\
    \ /= operand[i];\n\t\t}\n\t\telse if (_operator_[count] == \"**\") {\n\t\t\tresult\
    \ = pow(result, operand[i]);\n\t\t}\n\t\tcount++;\n\t}\n\treturn result;", " \
    \   // Write your code here\n    std::stack<long> nums;\n    long sum = 0;\n \
    \   long first = 0;\n    long second = 0;\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n      if(_operator_[i] == \"+\"){\n        first = nums.top();\n    \
    \    nums.pop();\n        second = operand[i+1];\n        nums.push(first + second);\n\
    \      }\n      else if(_operator_[i] == \"-\"){\n        first = nums.top();\n\
    \        nums.pop();\n        second = operand[i+1];\n        nums.push(first\
    \ - second);\n      }\n      else if(_operator_[i] == \"*\"){\n        first =\
    \ nums.top();\n        nums.pop();\n        second = operand[i+1];\n        nums.push(first\
    \ * second);\n      }\n      else if(_operator_[i] == \"//\"){\n        first\
    \ = nums.top();\n        nums.pop();\n        second = operand[i+1];\n       \
    \ nums.push(first / second);\n      }\n      else if(_operator_[i] == \"**\"){\n\
    \        first = nums.top();\n        nums.pop();\n        second = operand[i+1];\n\
    \        nums.push(pow(first, second));\n      }\n      else{\n        nums.push(operand[i]);\n\
    \      }\n    }\n    sum = nums.top();\n    return sum;\n  }\nint main(){\n  std::vector<std::string>\
    \ ops = {\"+\", \"*\", \"-\", \"+\"};\n  std::vector<long> operands = {2, 3, 4,\
    \ 5, 6};\n  long result = do_algebra(ops, operands);\n  assert(result == 9);\n\
    \  std::cout << \"Test passed!\" << std::endl;\n  return 0;", "    long result\
    \ = operand[0];\n    std::cout << result << std::endl;\n    for (int i = 0; i\
    \ < _operator_.size(); i++) {\n        if (_operator_[i] == \"+\") {\n       \
    \     result += operand[i+1];\n        } else if (_operator_[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        } else if (_operator_[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        } else if (_operator_[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if (_operator_[i]\
    \ == \"**\") {\n            result = std::pow(result, operand[i+1]);\n       \
    \ }\n        std::cout << result << std::endl;\n    }\n    return result;", " \
    \ \n  // write your code here\n  assert(_operator_.size()==operand.size()-1);\n\
    \  int size=_operator_.size();\n  for(int i=0;i<size;i++)\n  {\n    if(_operator_[i]==\"\
    +\")\n    {\n      operand[i+1]=operand[i]+operand[i+1];\n    }\n    else if(_operator_[i]==\"\
    -\")\n    {\n      operand[i+1]=operand[i]-operand[i+1];\n    }\n    else if(_operator_[i]==\"\
    *\")\n    {\n      operand[i+1]=operand[i]*operand[i+1];\n    }\n    else if(_operator_[i]==\"\
    //\")\n    {\n      operand[i+1]=operand[i]/operand[i+1];\n    }\n    else if(_operator_[i]==\"\
    **\")\n    {\n      operand[i+1]=pow(operand[i],operand[i+1]);\n    }\n    else\n\
    \    {\n      assert(false);\n    }\n  }\n  return operand[size];", "\tlong result\
    \ = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ result;", "    long res = operand[0];\n    for(int i = 0; i < _operator_.size();\
    \ i++) {\n        if(_operator_[i] == \"+\") {\n            res += operand[i+1];\n\
    \        } else if(_operator_[i] == \"-\") {\n            res -= operand[i+1];\n\
    \        } else if(_operator_[i] == \"*\") {\n            res *= operand[i+1];\n\
    \        } else if(_operator_[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        } else if(_operator_[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;", "    int i;\n    for(i=0;i<_operator_.size();i++)\n\
    \    {\n        if(_operator_[i]==\"+\")\n        {\n            operand[i]=operand[i]+operand[i+1];\n\
    \            operand.erase(operand.begin()+i+1);\n            _operator_.erase(_operator_.begin()+i);\n\
    \            i--;\n        }\n        else if(_operator_[i]==\"-\")\n        {\n\
    \            operand[i]=operand[i]-operand[i+1];\n            operand.erase(operand.begin()+i+1);\n\
    \            _operator_.erase(_operator_.begin()+i);\n            i--;\n     \
    \   }\n        else if(_operator_[i]==\"*\")\n        {\n            operand[i]=operand[i]*operand[i+1];\n\
    \            operand.erase(operand.begin()+i+1);\n            _operator_.erase(_operator_.begin()+i);\n\
    \            i--;\n        }\n        else if(_operator_[i]==\"//\")\n       \
    \ {\n            operand[i]=operand[i]/operand[i+1];\n            operand.erase(operand.begin()+i+1);\n\
    \            _operator_.erase(_operator_.begin()+i);\n            i--;\n     \
    \   }\n        else if(_operator_[i]==\"**\")\n        {\n            operand[i]=pow(operand[i],operand[i+1]);\n\
    \            operand.erase(operand.begin()+i+1);\n            _operator_.erase(_operator_.begin()+i);\n\
    \            i--;\n        }\n    }\n    return operand[0];", "    // Write your\
    \ code here\n    long result = operand[0];\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n        if(_operator_[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\t// Write your code\
    \ here\n\tlong result = operand[0];\n\tfor (long i = 0; i < _operator_.size();\
    \ i++) {\n\t\tswitch (_operator_[i][0]) {\n\t\tcase '+':\n\t\t\tresult += operand[i\
    \ + 1];\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tresult -= operand[i + 1];\n\t\t\t\
    break;\n\t\tcase '*':\n\t\t\tresult *= operand[i + 1];\n\t\t\tbreak;\n\t\tcase\
    \ '/':\n\t\t\tresult /= operand[i + 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
  "    long res = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n\
    \        if(_operator_[i] == \"+\") {\n            res += operand[i+1];\n    \
    \    } else if(_operator_[i] == \"-\") {\n            res -= operand[i+1];\n \
    \       } else if(_operator_[i] == \"*\") {\n            res *= operand[i+1];\n\
    \        } else if(_operator_[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        } else if(_operator_[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;", "    long n=operand.size();\n    long m=_operator_.size();\n\
    \    long dp[n][n];\n    long s[n][n];\n    for(long i=0;i<n;i++)\n    {\n   \
    \     dp[i][i]=operand[i];\n        s[i][i]=i;\n    }\n    for(long l=2;l<=n;l++)\n\
    \    {\n        for(long i=0;i<n-l+1;i++)\n        {\n            long j=i+l-1;\n\
    \            dp[i][j]=INT_MAX;\n            for(long k=i;k<j;k++)\n          \
    \  {\n                long val=0;\n                if(_operator_[k]==\"+\")\n\
    \                {\n                    val=dp[i][k]+dp[k+1][j];\n           \
    \     }\n                else if(_operator_[k]==\"-\")\n                {\n  \
    \                  val=dp[i][k]-dp[k+1][j];\n                }\n             \
    \   else if(_operator_[k]==\"*\")\n                {\n                    val=dp[i][k]*dp[k+1][j];\n\
    \                }\n                else if(_operator_[k]==\"//\")\n         \
    \       {\n                    val=dp[i][k]/dp[k+1][j];\n                }\n \
    \               else if(_operator_[k]==\"**\")\n                {\n          \
    \          val=pow(dp[i][k],dp[k+1][j]);\n                }\n                if(val<dp[i][j])\n\
    \                {\n                    dp[i][j]=val;\n                    s[i][j]=k;\n\
    \                }\n            }\n        }\n    }\n    return dp[0][n-1];",
  "  std::stack<long> stk;\n  long num;\n  for (long i = 0; i < operand.size(); i++)\
    \ {\n    stk.push(operand[i]);\n    if (i > 0) {\n      num = stk.top();\n   \
    \   stk.pop();\n      std::string op = _operator_[i - 1];\n      if (op == \"\
    +\") {\n        stk.top() += num;\n      } else if (op == \"-\") {\n        stk.top()\
    \ -= num;\n      } else if (op == \"*\") {\n        stk.top() *= num;\n      }\
    \ else if (op == \"//\") {\n        stk.top() /= num;\n      } else if (op ==\
    \ \"**\") {\n        stk.top() = std::pow(stk.top(), num);\n      }\n    }\n \
    \ }\n  return stk.top();", "  std::stack<long> holder;\n  holder.push(operand[0]);\n\
    \  operand.erase(operand.begin());\n  for(int i = 0; i < _operator_.size(); i++){\n\
    \    if(_operator_[i] == \"+\"){\n      long temp = holder.top();\n      holder.pop();\n\
    \      holder.push(temp + operand[i]);\n    }\n    else if(_operator_[i] == \"\
    -\"){\n      long temp = holder.top();\n      holder.pop();\n      holder.push(temp\
    \ - operand[i]);\n    }\n    else if(_operator_[i] == \"*\"){\n      long temp\
    \ = holder.top();\n      holder.pop();\n      holder.push(temp * operand[i]);\n\
    \    }\n    else if(_operator_[i] == \"//\"){\n      long temp = holder.top();\n\
    \      holder.pop();\n      holder.push(temp / operand[i]);\n    }\n    else if(_operator_[i]\
    \ == \"**\"){\n      long temp = holder.top();\n      holder.pop();\n      holder.push(std::pow(temp,\
    \ operand[i]));\n    }\n  }\n  return holder.top();", "\tint n = _operator_.size();\n\
    \tvector<long> dp(n, 0);\n\tvector<long> dp2(n, 0);\n\tdp[0] = operand[0];\n\t\
    for (int i = 1; i < n; i++) {\n\t\tif (_operator_[i - 1] == \"+\") {\n\t\t\tdp[i]\
    \ = dp[i - 1] + operand[i];\n\t\t}\n\t\telse if (_operator_[i - 1] == \"-\") {\n\
    \t\t\tdp[i] = dp[i - 1] - operand[i];\n\t\t}\n\t\telse if (_operator_[i - 1] ==\
    \ \"*\") {\n\t\t\tdp[i] = dp[i - 1] * operand[i];\n\t\t}\n\t\telse if (_operator_[i\
    \ - 1] == \"/\") {\n\t\t\tdp[i] = dp[i - 1] / operand[i];\n\t\t}\n\t\telse if\
    \ (_operator_[i - 1] == \"^\") {\n\t\t\tdp[i] = pow(dp[i - 1], operand[i]);\n\t\
    \t}\n\t}\n\tdp2[n - 1] = operand[n];\n\tfor (int i = n - 2; i >= 0; i--) {\n\t\
    \tif (_operator_[i] == \"+\") {\n\t\t\tdp2[i] = dp2[i + 1] + operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tdp2[i] = dp2[i + 1] - operand[i\
    \ + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tdp2[i] = dp2[i +\
    \ 1] * operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"/\") {\n\t\t\t\
    dp2[i] = dp2[i + 1] / operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"\
    ^", "    long tmp = operand[0];\n    for(int i = 0; i < _operator_.size(); i++)\
    \ {\n        if(_operator_[i] == \"+\") tmp += operand[i+1];\n        else if(_operator_[i]\
    \ == \"-\") tmp -= operand[i+1];\n        else if(_operator_[i] == \"*\") tmp\
    \ *= operand[i+1];\n        else if(_operator_[i] == \"//\") tmp /= operand[i+1];\n\
    \        else if(_operator_[i] == \"**\") tmp = pow(tmp, operand[i+1]);\n    }\n\
    \    return tmp;", "    if(_operator_.size() <= 0)\n        return 0;\n    if(operand.size()\
    \ <= 1)\n        return 0;\n    // the stack to hold out numbers\n    std::stack<long>\
    \ stk;\n    // clear the stack \n    //stk.clear();\n    for(int i = 0; i < operand.size();\
    \ i++)\n    {\n        // push the number into the stack\n        stk.push(operand[i]);\n\
    \        // if i is still in the range, push in the operator\n        if(i < _operator_.size())\n\
    \        {\n            // push in the operator\n            stk.push(_operator_[i]);\n\
    \        }\n    }\n    // push an operator to the end of the stack\n    stk.push(\"\
    $\");\n    // then calculate\n    return calculate(stk);", "    // do algebra\
    \ using the operator and operand lists \n    long result = operand[0];\n    int\
    \ i = 0;\n    while(i < _operator_.size()){\n        if(_operator_[i] == \"+\"\
    )\n            result += operand[i+1];\n        else if(_operator_[i] == \"-\"\
    )\n            result -= operand[i+1];\n        else if(_operator_[i] == \"*\"\
    )\n            result *= operand[i+1];\n        else if(_operator_[i] == \"//\"\
    )\n            result /= operand[i+1];\n        else if(_operator_[i] == \"**\"\
    )\n            result = pow(result, operand[i+1]);\n        i++;\n    }\n    return\
    \ result;", "\tint k = operand.size();\n\tlong ret = operand[0];\n\tlong next\
    \ = 0;\n\tfor (int i = 0; i < k - 1; i++) {\n\t\tnext = operand[i + 1];\n\t\t\
    if (_operator_[i] == \"+\") {\n\t\t\tret += next;\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tret -= next;\n\t\t}\n\t\telse if (_operator_[i] == \"*\"\
    ) {\n\t\t\tret *= next;\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\t\
    ret /= next;\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tret = std::pow(ret,\
    \ next);\n\t\t}\n\t}\n\treturn ret;", "  assert(_operator_.size() == operand.size()\
    \ - 1);\n  long result = operand[0];\n  for (int i = 0; i < _operator_.size();\
    \ i++) {\n    if (_operator_[i] == \"+\") {\n      result += operand[i + 1];\n\
    \    } else if (_operator_[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (_operator_[i] == \"*\") {\n      result *= operand[i + 1];\n  \
    \  } else if (_operator_[i] == \"//\") {\n      result /= operand[i + 1];\n  \
    \  } else if (_operator_[i] == \"**\") {\n      result = std::pow(result, operand[i\
    \ + 1]);\n    }\n  }\n  return result;", "    long tmp = operand[0];\n    for(int\
    \ i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\") {\n\
    \            tmp += operand[i+1];\n        } else if(_operator_[i] == \"-\") {\n\
    \            tmp -= operand[i+1];\n        } else if(_operator_[i] == \"*\") {\n\
    \            tmp *= operand[i+1];\n        } else if(_operator_[i] == \"//\")\
    \ {\n            tmp /= operand[i+1];\n        } else if(_operator_[i] == \"**\"\
    ) {\n            tmp = pow(tmp, operand[i+1]);\n        }\n    }\n    return tmp;",
  "    //     Write your code here\n    std::stack<long> s;\n    for(int i=0;i<_operator_.size();i++){\n\
    \        if(_operator_[i]==\"+\"){\n            if(s.size()<2){\n            \
    \    std::cout<<\"error\"<<std::endl;\n                exit(0);\n            }\n\
    \            else{\n                int a=s.top();\n                s.pop();\n\
    \                int b=s.top();\n                s.pop();\n                s.push(a+b);\n\
    \            }\n        }\n        else if(_operator_[i]==\"-\"){\n          \
    \  if(s.size()<2){\n                std::cout<<\"error\"<<std::endl;\n       \
    \         exit(0);\n            }\n            else{\n                int a=s.top();\n\
    \                s.pop();\n                int b=s.top();\n                s.pop();\n\
    \                s.push(b-a);\n            }\n        }\n        else if(_operator_[i]==\"\
    *\"){\n            if(s.size()<2){\n                std::cout<<\"error\"<<std::endl;\n\
    \                exit(0);\n            }\n            else{\n                int\
    \ a=s.top();\n                s.pop();\n                int b=s.top();\n     \
    \           s.pop();\n                s.push(a*b);\n            }\n        }\n\
    \        else if(_operator_[i]==\"//\"){\n            if(s.size()<2){\n      \
    \          std::cout<<\"error\"<<std::endl;\n                exit(0);\n      \
    \      }\n            else{\n                int a=s.top();\n                s.pop();\n\
    \                int b=s.top();\n                s.pop();\n                s.push(b/a);\n\
    \            }\n        }\n        else if(_operator_[i]==\"**\"){\n         \
    \   if(s.size()<2){\n                std::cout<<\"error\"<<std::endl;\n      \
    \          exit(0);\n            }\n            else{\n                int a=s.top();\n\
    \                s.pop();\n                int", "    // Write your code here\n\
    \    if (_operator_.size() != operand.size() - 1)\n        return 0;\n    stack<long>\
    \ operands;\n    stack<string> operators;\n    int i;\n    for (i = 0; i < _operator_.size();\
    \ i++) {\n        while (operators.size() && order(operators.top()) >= order(_operator_[i]))\
    \ {\n            if (operators.top() == \"+\")\n                operands.top()\
    \ += operands.top();\n            else if (operators.top() == \"-\")\n       \
    \         operands.top() -= operands.top();\n            else if (operators.top()\
    \ == \"*\")\n                operands.top() *= operands.top();\n            else\
    \ if (operators.top() == \"/\")\n                operands.top() /= operands.top();\n\
    \            else if (operators.top() == \"^\")\n                operands.top()\
    \ = pow(operands.top(), operands.top());\n            operators.pop();\n     \
    \   }\n        operators.push(_operator_[i]);\n        operands.push(operand[i]);\n\
    \    }\n    while (operators.size()) {\n        if (operators.top() == \"+\")\n\
    \            operands.top() += operands.top();\n        else if (operators.top()\
    \ == \"-\")\n            operands.top() -= operands.top();\n        else if (operators.top()\
    \ == \"*\")\n            operands.top() *= operands.top();\n        else if (operators.top()\
    \ == \"/\")\n            operands.top() /= operands.top();\n        else if (operators.top()\
    \ == \"^\")\n            operands.top() = pow(operands.top(), operands.top());\n\
    \        operators.pop();\n    }\n    return operands.top();", "  // Write your\
    \ code here\n  if(_operator_.size() == 0 || operand.size() == 0)\n    return 0;\n\
    \  if(_operator_.size() + 1 != operand.size())\n    return 0;\n  std::stack<long>\
    \ stack;\n  stack.push(operand[0]);\n  for(size_t i = 0; i < _operator_.size();\
    \ i++){\n    if(_operator_[i] == \"+\"){\n      stack.push(operand[i+1]);\n  \
    \  }\n    else if(_operator_[i] == \"-\"){\n      stack.push(-operand[i+1]);\n\
    \    }\n    else if(_operator_[i] == \"*\"){\n      long lhs = stack.top();\n\
    \      stack.pop();\n      stack.push(lhs * operand[i+1]);\n    }\n    else if(_operator_[i]\
    \ == \"//\"){\n      long lhs = stack.top();\n      stack.pop();\n      stack.push(lhs\
    \ / operand[i+1]);\n    }\n    else if(_operator_[i] == \"**\"){\n      long lhs\
    \ = stack.top();\n      stack.pop();\n      stack.push(pow(lhs, operand[i+1]));\n\
    \    }\n  }\n  long ans = 0;\n  while(!stack.empty()){\n    ans += stack.top();\n\
    \    stack.pop();\n  }\n  return ans;", "  // Write your code here\n  std::stack<std::string>\
    \ op;\n  std::stack<long> num;\n  std::string s;\n  std::vector<std::string>::iterator\
    \ it;\n  std::vector<long>::iterator itt;\n  for(it = _operator_.begin(), itt\
    \ = operand.begin(); it != _operator_.end(); it++, itt++) {\n    num.push(*itt);\n\
    \    op.push(*it);\n  }\n  num.push(*itt);\n  while(!op.empty()) {\n    if(op.top()\
    \ == \"*\") {\n      op.pop();\n      long a = num.top();\n      num.pop();\n\
    \      long b = num.top();\n      num.pop();\n      num.push(a * b);\n    }\n\
    \    else if(op.top() == \"//\") {\n      op.pop();\n      long a = num.top();\n\
    \      num.pop();\n      long b = num.top();\n      num.pop();\n      num.push(b\
    \ / a);\n    }\n    else if(op.top() == \"**\") {\n      op.pop();\n      long\
    \ a = num.top();\n      num.pop();\n      long b = num.top();\n      num.pop();\n\
    \      num.push(std::pow(b, a));\n    }\n    else {\n      num.push(std::stol(op.top()));\n\
    \      op.pop();\n    }\n  }\n  while(num.size() > 1) {\n    long a = num.top();\n\
    \    num.pop();\n    long b = num.top();\n    num.pop();\n    if(num.top() ==\
    \ \"+\") {\n      num.pop();\n      num.push(a + b);\n    }\n    else if(num.top()\
    \ == \"-\") {\n      num.pop();\n      num.push(b - a);\n    }\n  }\n  return\
    \ num.top();", "    long res = operand[0];\n    std::cout << res << std::endl;\n\
    \    for (int i = 0; i < _operator_.size(); i++) {\n        std::cout << _operator_[i]\
    \ << \" \" << operand[i+1] << std::endl;\n        if (_operator_[i] == \"+\")\
    \ {\n            res += operand[i+1];\n        } else if (_operator_[i] == \"\
    -\") {\n            res -= operand[i+1];\n        } else if (_operator_[i] ==\
    \ \"*\") {\n            res *= operand[i+1];\n        } else if (_operator_[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if (_operator_[i]\
    \ == \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n\
    \    return res;", "    stack<long> stk;\n    int j = operand.size() - 1;\n  \
    \  for(int i = _operator_.size() - 1; i >= 0; i--){\n        if(_operator_[i]\
    \ == \"+\"){\n            stk.push(operand[j--] + operand[j--]);\n        }\n\
    \        else if(_operator_[i] == \"-\"){\n            stk.push(operand[j--] -\
    \ operand[j--]);\n        }\n        else if(_operator_[i] == \"*\"){\n      \
    \      stk.push(operand[j--] * operand[j--]);\n        }\n        else if(_operator_[i]\
    \ == \"/\"){\n            stk.push(operand[j--] / operand[j--]);\n        }\n\
    \        else if(_operator_[i] == \"**\"){\n            stk.push(pow(operand[j--],\
    \ operand[j--]));\n        }\n    }\n    if(stk.size() == 1){\n        return\
    \ stk.top();\n    }\n    else{\n        return 0;\n    }", "\tlong result = operand[0];\n\
    \tint i = 0;\n\tint x = 0;\n\twhile (i < _operator_.size()) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn result;", "  std::stack<long> nums;\n  int ptr = 0;\n  for (auto\
    \ s : _operator_) {\n    if (s == \"+\") {\n      nums.push(operand[ptr++] + operand[ptr++]);\n\
    \    } else if (s == \"-\") {\n      long num = operand[ptr++];\n      num = num\
    \ - operand[ptr++];\n      nums.push(num);\n    } else if (s == \"*\") {\n   \
    \   nums.push(operand[ptr++] * operand[ptr++]);\n    } else if (s == \"//\") {\n\
    \      long num = operand[ptr++];\n      num = num / operand[ptr++];\n      nums.push(num);\n\
    \    } else if (s == \"**\") {\n      long num = operand[ptr++];\n      num =\
    \ std::pow(num, operand[ptr++]);\n      nums.push(num);\n    }\n  }\n  long result\
    \ = 0;\n  while (!nums.empty()) {\n    result += nums.top();\n    nums.pop();\n\
    \  }\n  return result;", "    std::stack<long> temp;\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n        if(_operator_[i] == \"+\"){\n            long b = temp.top();\n\
    \            temp.pop();\n            long a = temp.top();\n            temp.pop();\n\
    \            temp.push(a + b);\n        }\n        else if(_operator_[i] == \"\
    -\"){\n            long b = temp.top();\n            temp.pop();\n           \
    \ long a = temp.top();\n            temp.pop();\n            temp.push(a - b);\n\
    \        }\n        else if(_operator_[i] == \"*\"){\n            long b = temp.top();\n\
    \            temp.pop();\n            long a = temp.top();\n            temp.pop();\n\
    \            temp.push(a * b);\n        }\n        else if(_operator_[i] == \"\
    //\"){\n            long b = temp.top();\n            temp.pop();\n          \
    \  long a = temp.top();\n            temp.pop();\n            temp.push(a / b);\n\
    \        }\n        else if(_operator_[i] == \"**\"){\n            long b = temp.top();\n\
    \            temp.pop();\n            long a = temp.top();\n            temp.pop();\n\
    \            temp.push(pow(a, b));\n        }\n    }\n    return temp.top();",
  "   long ans = operand[0];\n   for(int i = 0; i < _operator_.size(); i++) {\n  \
    \    if(_operator_[i] == \"+\") {\n         ans += operand[i+1];\n      } else\
    \ if(_operator_[i] == \"-\") {\n         ans -= operand[i+1];\n      } else if(_operator_[i]\
    \ == \"*\") {\n         ans *= operand[i+1];\n      } else if(_operator_[i] ==\
    \ \"//\") {\n         ans /= operand[i+1];\n      } else if(_operator_[i] == \"\
    **\") {\n         ans = std::pow(ans, operand[i+1]);\n      }\n   }\n   return\
    \ ans;", "\tint i;\n\tchar operator_;\n\tstd::stack<long> myStack;\n\tfor (i =\
    \ 0; i < _operator_.size(); i++) {\n\t\toperator_ = _operator_[i][0];\n\t\tswitch\
    \ (operator_) {\n\t\tcase '+':\n\t\t\tmyStack.push(operand[i] + operand[i + 1]);\n\
    \t\t\tbreak;\n\t\tcase '-':\n\t\t\tmyStack.push(operand[i] - operand[i + 1]);\n\
    \t\t\tbreak;\n\t\tcase '*':\n\t\t\tmyStack.push(operand[i] * operand[i + 1]);\n\
    \t\t\tbreak;\n\t\tcase '/':\n\t\t\tmyStack.push(operand[i] / operand[i + 1]);\n\
    \t\t\tbreak;\n\t\tcase '^':\n\t\t\tmyStack.push(pow(operand[i], operand[i + 1]));\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn myStack.top();", "    // Assertion\n    assert(_operator_.size()\
    \ + 1 == operand.size());\n    assert(_operator_.size() > 0);\n    assert(operand.size()\
    \ > 1);\n    for (auto val : operand) {\n        assert(val >= 0);\n    }\n  \
    \  // End of assertion\n    std::stack<long> stack;\n    // Reverse list\n   \
    \ std::reverse(_operator_.begin(), _operator_.end());\n    // Calculate\n    for\
    \ (int i = 0; i < _operator_.size(); i++) {\n        std::string curr_op = _operator_[i];\n\
    \        long second_val = operand[i];\n        long first_val = operand[i + 1];\n\
    \        if (curr_op == \"+\") {\n            stack.push(first_val + second_val);\n\
    \        } else if (curr_op == \"-\") {\n            stack.push(first_val - second_val);\n\
    \        } else if (curr_op == \"*\") {\n            stack.push(first_val * second_val);\n\
    \        } else if (curr_op == \"//\") {\n            stack.push(first_val / second_val);\n\
    \        } else if (curr_op == \"**\") {\n            stack.push(std::pow(first_val,\
    \ second_val));\n        }\n    }\n    // Return result\n    return stack.top();",
  "    stack<long> nums;\n    for(int i = 0; i < operand.size(); i++) {\n        nums.push(operand[i]);\n\
    \        if(i != 0) {\n            long a = nums.top();\n            nums.pop();\n\
    \            long b = nums.top();\n            nums.pop();\n            if(_operator_[i-1]\
    \ == \"+\") {\n                nums.push(a+b);\n            }\n            else\
    \ if(_operator_[i-1] == \"-\") {\n                nums.push(b-a);\n          \
    \  }\n            else if(_operator_[i-1] == \"*\") {\n                nums.push(a*b);\n\
    \            }\n            else if(_operator_[i-1] == \"//\") {\n           \
    \     nums.push(b/a);\n            }\n            else if(_operator_[i-1] == \"\
    **\") {\n                nums.push(pow(b,a));\n            }\n        }\n    }\n\
    \    return nums.top();", "  std::stack<long> s;\n  for(int i = 0; i < operand.size();\
    \ i++) {\n    s.push(operand[i]);\n    if(i < _operator_.size()) {\n      if(_operator_[i]\
    \ == \"+\") {\n        long num2 = s.top();\n        s.pop();\n        long num1\
    \ = s.top();\n        s.pop();\n        s.push(num1 + num2);\n      } else if(_operator_[i]\
    \ == \"-\") {\n        long num2 = s.top();\n        s.pop();\n        long num1\
    \ = s.top();\n        s.pop();\n        s.push(num1 - num2);\n      } else if(_operator_[i]\
    \ == \"*\") {\n        long num2 = s.top();\n        s.pop();\n        long num1\
    \ = s.top();\n        s.pop();\n        s.push(num1 * num2);\n      } else if(_operator_[i]\
    \ == \"//\") {\n        long num2 = s.top();\n        s.pop();\n        long num1\
    \ = s.top();\n        s.pop();\n        s.push(num1 / num2);\n      } else if(_operator_[i]\
    \ == \"**\") {\n        long num2 = s.top();\n        s.pop();\n        long num1\
    \ = s.top();\n        s.pop();\n        s.push(pow(num1, num2));\n      }\n  \
    \  }\n  }\n  long result = s.top();\n  s.pop();\n  return result;", "\tstd::stack<long>\
    \ st;\n\tfor (int i = 0; i < operand.size(); i++) {\n\t\tst.push(operand[i]);\n\
    \t\tif (i < _operator_.size()) {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\
    \t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tif (_operator_[i] == \"+\")\n\t\
    \t\t\tst.push(a + b);\n\t\t\telse if (_operator_[i] == \"-\")\n\t\t\t\tst.push(b\
    \ - a);\n\t\t\telse if (_operator_[i] == \"*\")\n\t\t\t\tst.push(a * b);\n\t\t\
    \telse if (_operator_[i] == \"/\")\n\t\t\t\tst.push(b / a);\n\t\t\telse if (_operator_[i]\
    \ == \"^\")\n\t\t\t\tst.push(pow(b, a));\n\t\t}\n\t}\n\treturn st.top();", "\t\
    int n= _operator_.size();\n\twhile(n>0){\n\t\tif(n<=0)\n\t\t\tbreak;\n\t\tfor(int\
    \ i=0;i<_operator_.size();i++){\n\t\t\tif(_operator_[i]==\"+\"){\n\t\t\t\tlong\
    \ sum=operand[i]+operand[i+1];\n\t\t\t\t_operator_.erase(_operator_.begin()+i);\n\
    \t\t\t\toperand.erase(operand.begin()+i);\n\t\t\t\toperand[i]=sum;\n\t\t\t\tn--;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(_operator_[i]==\"-\"){\n\t\t\t\tlong diff=operand[i]-operand[i+1];\n\
    \t\t\t\t_operator_.erase(_operator_.begin()+i);\n\t\t\t\toperand.erase(operand.begin()+i);\n\
    \t\t\t\toperand[i]=diff;\n\t\t\t\tn--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(_operator_[i]==\"\
    *\"){\n\t\t\t\tlong product=operand[i]*operand[i+1];\n\t\t\t\t_operator_.erase(_operator_.begin()+i);\n\
    \t\t\t\toperand.erase(operand.begin()+i);\n\t\t\t\toperand[i]=product;\n\t\t\t\
    \tn--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(_operator_[i]==\"//\"){\n\t\t\t\
    \tlong division=operand[i]/operand[i+1];\n\t\t\t\t_operator_.erase(_operator_.begin()+i);\n\
    \t\t\t\toperand.erase(operand.begin()+i);\n\t\t\t\toperand[i]=division;\n\t\t\t\
    \tn--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(_operator_[i]==\"**\"){\n\t\t\t\
    \tlong power=pow(operand[i],oper", "  // Make the operand list a stack.\n  std::stack<long>\
    \ numbers;\n  // Loop through every operator.\n  for (int i = _operator_.size()\
    \ - 1; i >= 0; i--) {\n    std::string op = _operator_[i];\n    // Flip the operand\
    \ list.\n    long a = operand[i + 1];\n    long b = operand[i];\n    // Do the\
    \ appropriate operation.\n    if (op == \"+\") {\n      numbers.push(a + b);\n\
    \    } else if (op == \"-\") {\n      numbers.push(a - b);\n    } else if (op\
    \ == \"*\") {\n      numbers.push(a * b);\n    } else if (op == \"//\") {\n  \
    \    numbers.push(a / b);\n    } else if (op == \"**\") {\n      numbers.push(pow(a,\
    \ b));\n    }\n  }\n  // If there is only one thing in the stack, then return\
    \ it.\n  if (numbers.size() == 1) {\n    return numbers.top();\n  }\n  // If there\
    \ are multiple things in the stack, then something went wrong.\n  assert(false);",
  "\t// Write your code here\n\tstd::stack<long> s;\n\tstd::stack<std::string> st;\n\
    \tfor (auto& i : _operator_) {\n\t\tst.push(i);\n\t}\n\ts.push(operand[0]);\n\t\
    std::cout << \"Stack size: \" << s.size() << std::endl;\n\tfor (int i = 1; i <\
    \ operand.size(); i++) {\n\t\ts.push(operand[i]);\n\t\tstd::cout << \"Stack size:\
    \ \" << s.size() << std::endl;\n\t\tlong op2 = s.top();\n\t\ts.pop();\n\t\tlong\
    \ op1 = s.top();\n\t\ts.pop();\n\t\tstd::string ope = st.top();\n\t\tst.pop();\n\
    \t\tstd::cout << \"Operator: \" << ope << \" Op1: \" << op1 << \" Op2: \" << op2\
    \ << std::endl;\n\t\tif (ope == \"+\") {\n\t\t\ts.push(op1 + op2);\n\t\t}\n\t\t\
    else if (ope == \"-\") {\n\t\t\ts.push(op1 - op2);\n\t\t}\n\t\telse if (ope ==\
    \ \"*\") {\n\t\t\ts.push(op1 * op2);\n\t\t}\n\t\telse if (ope == \"/\") {\n\t\t\
    \ts.push(op1 / op2);\n\t\t}\n\t\telse if (ope == \"^\") {\n\t\t\ts.push(pow(op1,\
    \ op2));\n\t\t}\n\t\tstd::cout << \"Stack size: \" << s.size() << std::endl;\n\
    \t}\n\treturn s.top();", "  std::stack<long> s;\n  //  while(s.empty()==false)\n\
    \  //  {\n  //     cout<<s.top()<<\" \";\n  //     s.pop();\n  //  }\n  //  cout<<endl;\n\
    \  //  cout<<_operator_.size()<<endl;\n  //  cout<<operand.size()<<endl;\n  s.push(operand[0]);\n\
    \  for(int i=0;i<_operator_.size();i++)\n  {\n     //cout<<_operator_[i]<<endl;\n\
    \     long n1=s.top();\n     s.pop();\n     long n2=operand[i+1];\n     //cout<<n1<<\"\
    \ \"<<n2<<endl;\n     if(_operator_[i]==\"+\")\n     {\n        s.push(n1+n2);\n\
    \     }\n     else if(_operator_[i]==\"-\")\n     {\n        s.push(n1-n2);\n\
    \     }\n     else if(_operator_[i]==\"*\")\n     {\n        s.push(n1*n2);\n\
    \     }\n     else if(_operator_[i]==\"/\")\n     {\n        s.push(n1/n2);\n\
    \     }\n     else if(_operator_[i]==\"^\")\n     {\n        s.push(pow(n1,n2));\n\
    \     }\n     else\n     {\n        //cout<<\"Invalid\"<<endl;\n        return\
    \ 0;\n     }\n  }\n  return s.top();\n  }\n\nvoid test_case_1() {\n   std::vector<std::string>\
    \ _operator_ = {\"+\", \"*\", \"-\"};\n   std::vector<long> operand = {2, 3, 4,\
    \ 5};\n   long result = do_algebra(_operator_, operand);\n   assert(result ==\
    \ 9);", "    long result = operand[0];\n    for(int i = 0; i < _operator_.size();\
    \ i++) {\n        if(_operator_[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if(_operator_[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if(_operator_[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if(_operator_[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if(_operator_[i] == \"**\")\n            result = std::pow(result,\
    \ operand[i+1]);\n    }\n    return result;", "  // Write your code here\n  long\
    \ res=operand[0];\n  for(int i=0;i<_operator_.size();i++){\n      if(_operator_[i]==\"\
    +\"){\n          res+=operand[i+1];\n      }\n      else if(_operator_[i]==\"\
    -\"){\n          res-=operand[i+1];\n      }\n      else if(_operator_[i]==\"\
    *\"){\n          res*=operand[i+1];\n      }\n      else if(_operator_[i]==\"\
    //\"){\n          res/=operand[i+1];\n      }\n      else if(_operator_[i]==\"\
    **\"){\n          res=pow(res,operand[i+1]);\n      }\n  }\n  return res;", " \
    \   std::stack<int> st;\n    st.push(operand[0]);\n    operand.erase(operand.begin());\n\
    \    for(int i=0;i<_operator_.size();i++){\n        if(_operator_[i]==\"+\"){\n\
    \            st.push(operand[i]);\n        }else if(_operator_[i]==\"-\"){\n \
    \           st.push(-operand[i]);\n        }else if(_operator_[i]==\"*\"){\n \
    \           int val = st.top();\n            st.pop();\n            st.push(val*operand[i]);\n\
    \        }else if(_operator_[i]==\"//\"){\n            int val = st.top();\n \
    \           st.pop();\n            st.push(val/operand[i]);\n        }else if(_operator_[i]==\"\
    **\"){\n            int val = st.top();\n            st.pop();\n            st.push(pow(val,operand[i]));\n\
    \        }\n    }\n    long ans = 0;\n    while(!st.empty()){\n        ans+=st.top();\n\
    \        st.pop();\n    }\n    return ans;", "\t// Write your code here\n\tint\
    \ n = _operator_.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tint length =\
    \ operand.size();\n\tif (length == 0) {\n\t\treturn 0;\n\t}\n\tlong result = operand[0];\n\
    \tlong second_operand = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tsecond_operand = operand[i + 1];\n\t\t\tresult = pow(result,\
    \ second_operand);\n\t\t}\n\t}\n\treturn result;", "    int n = operand.size();\n\
    \    long arr[n];\n    arr[0] = operand[0];\n    for(int i = 1; i < n; i++)\n\
    \    {\n        arr[i] = operand[i];\n        if(_operator_[i-1] == \"+\")\n \
    \           arr[i] = arr[i-1] + arr[i];\n        else if(_operator_[i-1] == \"\
    -\")\n            arr[i] = arr[i-1] - arr[i];\n        else if(_operator_[i-1]\
    \ == \"*\")\n            arr[i] = arr[i-1] * arr[i];\n        else if(_operator_[i-1]\
    \ == \"/\")\n            arr[i] = arr[i-1] / arr[i];\n        else if(_operator_[i-1]\
    \ == \"^\")\n            arr[i] = pow(arr[i-1], arr[i]);\n    }\n    return arr[n-1];",
  "    // write code here\n    long ans = operand[0];\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n        if(_operator_[i] == \"+\"){\n            ans += operand[i+1];\n\
    \        }else if(_operator_[i] == \"-\"){\n            ans -= operand[i+1];\n\
    \        }else if(_operator_[i] == \"*\"){\n            ans *= operand[i+1];\n\
    \        }else if(_operator_[i] == \"//\"){\n            ans /= operand[i+1];\n\
    \        }else if(_operator_[i] == \"**\"){\n            ans = pow(ans, operand[i+1]);\n\
    \        }\n    }\n    return ans;", "  long result = operand[0];\n  long n =\
    \ operand.size();\n  for (int i = 1; i < n; i++) {\n    if (_operator_[i - 1]\
    \ == \"+\")\n      result += operand[i];\n    else if (_operator_[i - 1] == \"\
    -\")\n      result -= operand[i];\n    else if (_operator_[i - 1] == \"*\")\n\
    \      result *= operand[i];\n    else if (_operator_[i - 1] == \"//\")\n    \
    \  result /= operand[i];\n    else if (_operator_[i - 1] == \"**\")\n      result\
    \ = pow(result, operand[i]);\n  }\n  return result;", "\tlong answer = operand[0];\n\
    \tfor (long i = 0; i < _operator_.size(); i++) {\n\t\tswitch (_operator_[i]) {\n\
    \t\tcase \"+\":\n\t\t\tanswer += operand[i + 1];\n\t\t\tbreak;\n\t\tcase \"-\"\
    :\n\t\t\tanswer -= operand[i + 1];\n\t\t\tbreak;\n\t\tcase \"*\":\n\t\t\tanswer\
    \ *= operand[i + 1];\n\t\t\tbreak;\n\t\tcase \"//\":\n\t\t\tanswer /= operand[i\
    \ + 1];\n\t\t\tbreak;\n\t\tcase \"**\":\n\t\t\tanswer = pow(answer, operand[i\
    \ + 1]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn answer;", "  long long answer = operand[0];\n\
    \  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"\
    +\") {\n      answer += operand[i + 1];\n    } else if (_operator_[i] == \"-\"\
    ) {\n      answer -= operand[i + 1];\n    } else if (_operator_[i] == \"*\") {\n\
    \      answer *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n\
    \      answer /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n\
    \      answer = std::pow(answer, operand[i + 1]);\n    }\n  }\n  return answer;",
  "    std::vector<long> stack;\n    int i = 0;\n    long result = 0;\n    while (i\
    \ < _operator_.size()) {\n        if (_operator_[i] == \"+\") {\n            result\
    \ = operand[i] + operand[i + 1];\n            if (i == 0) {\n                stack.push_back(result);\n\
    \            } else {\n                stack.pop_back();\n                stack.push_back(result);\n\
    \            }\n        } else if (_operator_[i] == \"-\") {\n            result\
    \ = operand[i] - operand[i + 1];\n            if (i == 0) {\n                stack.push_back(result);\n\
    \            } else {\n                stack.pop_back();\n                stack.push_back(result);\n\
    \            }\n        } else if (_operator_[i] == \"*\") {\n            result\
    \ = operand[i] * operand[i + 1];\n            if (i == 0) {\n                stack.push_back(result);\n\
    \            } else {\n                stack.pop_back();\n                stack.push_back(result);\n\
    \            }\n        } else if (_operator_[i] == \"//\") {\n            result\
    \ = operand[i] / operand[i + 1];\n            if (i == 0) {\n                stack.push_back(result);\n\
    \            } else {\n                stack.pop_back();\n                stack.push_back(result);\n\
    \            }\n        } else if (_operator_[i] == \"**\") {\n            result\
    \ = pow(operand[i], operand[i + 1]);\n            if (i == 0) {\n            \
    \    stack.push_back(result);\n            } else {\n                stack.pop_back();\n\
    \                stack.push_back(result);\n            }\n        }\n        i++;\n\
    \    }\n    return result;", "    std::vector<std::string> operator_(_operator_);\n\
    \    int i = 0;\n    if(operator_.size() == 1 && operator_[0] == \"-\"){\n   \
    \     return -1 * operand[1];\n    }\n    while(operator_.size() != 0){\n    \
    \    if(operator_[i] == \"*\"){\n            operand[i] = operand[i] * operand[i+1];\n\
    \            operand.erase(operand.begin() + i + 1);\n            operator_.erase(operator_.begin()\
    \ + i);\n            i = 0;\n        }\n        else if(operator_[i] == \"/\"\
    ){\n            operand[i] = operand[i] / operand[i+1];\n            operand.erase(operand.begin()\
    \ + i + 1);\n            operator_.erase(operator_.begin() + i);\n           \
    \ i = 0;\n        }\n        else if(operator_[i] == \"**\"){\n            operand[i]\
    \ = pow(operand[i], operand[i+1]);\n            operand.erase(operand.begin()\
    \ + i + 1);\n            operator_.erase(operator_.begin() + i);\n           \
    \ i = 0;\n        }\n        else if(operator_[i] == \"+\"){\n            i++;\n\
    \        }\n        else if(operator_[i] == \"-\"){\n            i++;\n      \
    \  }\n    }\n    i = 0;\n    while(operator_.size() != 0){\n        if(operator_[i]\
    \ == \"+\"){\n            operand[i] = operand[i] + operand[i+1];\n          \
    \  operand.erase(operand.begin() + i + 1);\n            operator_.erase(operator_.begin()\
    \ + i);\n            i = 0;\n        }\n        else if(operator_[i] == \"-\"\
    ){\n            operand[i] = operand[i] - operand[i+1];\n            operand.erase(operand.begin()\
    \ + i + 1);\n            operator_.erase(operator_.begin() + i);\n           \
    \ i = 0;\n        }\n", "    // Algorithm only works for positive numbers, so\
    \ exit if operand contains negative number\n    for (int i = 0; i < operand.size();\
    \ i++) {\n        if (operand[i] < 0) {\n            std::cout << \"Negative numbers\
    \ not supported!\" << std::endl;\n            return 0;\n        }\n    }\n  \
    \  // Add variables to make the algorithm easier to understand\n    int x = operand[0];\n\
    \    int y = operand[1];\n    // Remove first two elements of operand vector\n\
    \    operand.erase(operand.begin());\n    operand.erase(operand.begin());\n  \
    \  // Add variables to make the algorithm easier to understand\n    std::string\
    \ a = _operator_[0];\n    // Remove first element of operator vector\n    _operator_.erase(_operator_.begin());\n\
    \    // Base case\n    if (_operator_.size() == 0) {\n        if (a == \"+\")\
    \ {\n            return x + y;\n        } else if (a == \"-\") {\n           \
    \ return x - y;\n        } else if (a == \"*\") {\n            return x * y;\n\
    \        } else if (a == \"//\") {\n            return x / y;\n        } else\
    \ if (a == \"**\") {\n            return pow(x, y);\n        }\n    }\n    //\
    \ Recursive case\n    if (a == \"+\") {\n        operand.insert(operand.begin(),\
    \ x + y);\n    } else if (a == \"-\") {\n        operand.insert(operand.begin(),\
    \ x - y);\n    } else if (a == \"*\") {\n        operand.insert(operand.begin(),\
    \ x * y);\n    } else if (a == \"//\") {\n        operand.insert(operand.begin(),\
    \ x / y);\n    } else if (a == \"**\") {\n        operand.insert(operand.begin(),\
    \ pow(x, y));\n    }\n    return do_algebra(_operator_, operand);", "  assert(_operator_.size()\
    \ == operand.size() - 1);\n  std::stack<long> stk;\n  stk.push(operand[0]);\n\
    \  int i = 1;\n  for (auto o: _operator_) {\n    long r = operand[i++];\n    if\
    \ (o == \"+\") {\n      long a = stk.top();\n      stk.pop();\n      stk.push(a\
    \ + r);\n    } else if (o == \"-\") {\n      long a = stk.top();\n      stk.pop();\n\
    \      stk.push(a - r);\n    } else if (o == \"*\") {\n      long a = stk.top();\n\
    \      stk.pop();\n      stk.push(a * r);\n    } else if (o == \"//\") {\n   \
    \   long a = stk.top();\n      stk.pop();\n      stk.push(a / r);\n    } else\
    \ if (o == \"**\") {\n      long a = stk.top();\n      stk.pop();\n      stk.push(std::pow(a,\
    \ r));\n    }\n  }\n  return stk.top();", "    std::stack<long> s;\n    long a,\
    \ b;\n    s.push(operand[0]);\n    for(long i = 0; i < _operator_.size(); i++)\
    \ {\n        if(_operator_[i] == \"+\") {\n            s.push(operand[i+1]);\n\
    \        }\n        else if(_operator_[i] == \"-\") {\n            s.push(-operand[i+1]);\n\
    \        }\n        else if(_operator_[i] == \"*\") {\n            a = s.top();\n\
    \            s.pop();\n            s.push(a * operand[i+1]);\n        }\n    \
    \    else if(_operator_[i] == \"//\") {\n            a = s.top();\n          \
    \  s.pop();\n            s.push(a / operand[i+1]);\n        }\n        else if(_operator_[i]\
    \ == \"**\") {\n            a = s.top();\n            s.pop();\n            s.push(pow(a,\
    \ operand[i+1]));\n        }\n    }\n    long sum = 0;\n    while(!s.empty())\
    \ {\n        sum += s.top();\n        s.pop();\n    }\n    return sum;", "   \
    \ int n = operand.size();\n    std::string op;\n    long op1, op2;\n    std::stack<long>\
    \ operands;\n    long result = 0;\n    for(int i = 0; i < n; i++) {\n        op\
    \ = _operator_[i];\n        if(op == \"+\") {\n            op1 = operands.top();\n\
    \            operands.pop();\n            op2 = operand[i];\n            operands.push(op1\
    \ + op2);\n        }\n        else if(op == \"-\") {\n            op1 = operands.top();\n\
    \            operands.pop();\n            op2 = operand[i];\n            operands.push(op1\
    \ - op2);\n        }\n        else if(op == \"*\") {\n            op1 = operands.top();\n\
    \            operands.pop();\n            op2 = operand[i];\n            operands.push(op1\
    \ * op2);\n        }\n        else if(op == \"//\") {\n            op1 = operands.top();\n\
    \            operands.pop();\n            op2 = operand[i];\n            operands.push(op1\
    \ / op2);\n        }\n        else if(op == \"**\") {\n            op1 = operands.top();\n\
    \            operands.pop();\n            op2 = operand[i];\n            operands.push(pow(op1,\
    \ op2));\n        }\n        else {\n            operands.push(operand[i]);\n\
    \        }\n    }\n    result = operands.top();\n    return result;", "\t// Write\
    \ your code here.", "    long result = operand[0];\n    int last_plus_sign = -1;\n\
    \    for (int i = 0; i < _operator_.size(); i++) {\n        if (_operator_[i]\
    \ == \"+\") {\n            result += operand[i + 1];\n            last_plus_sign\
    \ = i;\n        } else if (_operator_[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (_operator_[i] == \"*\") {\n            if (last_plus_sign\
    \ == -1) {\n                result *= operand[i + 1];\n            } else {\n\
    \                operand[i + 1] *= operand[last_plus_sign + 1];\n            \
    \    operand[last_plus_sign + 1] = operand[i + 1];\n                _operator_[last_plus_sign]\
    \ = \"*\";\n                _operator_.erase(_operator_.begin() + i);\n      \
    \          i--;\n            }\n        } else if (_operator_[i] == \"//\") {\n\
    \            if (last_plus_sign == -1) {\n                result /= operand[i\
    \ + 1];\n            } else {\n                operand[i + 1] /= operand[last_plus_sign\
    \ + 1];\n                operand[last_plus_sign + 1] = operand[i + 1];\n     \
    \           _operator_[last_plus_sign] = \"//\";\n                _operator_.erase(_operator_.begin()\
    \ + i);\n                i--;\n            }\n        } else if (_operator_[i]\
    \ == \"**\") {\n            if (last_plus_sign == -1) {\n                result\
    \ = pow(result, operand[i + 1]);\n            } else {\n                operand[i\
    \ + 1] = pow(operand[last_plus_sign + 1], operand[i + 1]);\n                operand[last_plus_sign\
    \ + 1] = operand[i + 1];\n                _operator_[last_plus_sign] = \"**\"\
    ;\n                _operator_.erase(_operator_.begin() + i);\n               \
    \ i--;\n            }\n        }\n    }\n    return result;", "\tlong ans = operand[0];\n\
    \tfor(int i = 0; i < operand.size() - 1; i++) {\n\t\tif(_operator_[i] == \"+\"\
    ) {\n\t\t\tans += operand[i + 1];\n\t\t}\n\t\telse if(_operator_[i] == \"-\")\
    \ {\n\t\t\tans -= operand[i + 1];\n\t\t}\n\t\telse if(_operator_[i] == \"*\")\
    \ {\n\t\t\tans *= operand[i + 1];\n\t\t}\n\t\telse if(_operator_[i] == \"//\"\
    ) {\n\t\t\tans /= operand[i + 1];\n\t\t}\n\t\telse if(_operator_[i] == \"**\"\
    ) {\n\t\t\tans = pow(ans, operand[i + 1]);\n\t\t}\n\t}\n\treturn ans;", "\tif\
    \ (_operator_.size() != operand.size() - 1) {\n\t\treturn -1;\n\t}\n\tstd::stack<long>\
    \ exp;\n\tlong res = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++)\
    \ {\n\t\texp.push(operand[i + 1]);\n\t\tif (_operator_[i] == \"+\") {\n\t\t\t\
    res += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\t\
    res -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\t\
    res *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\t\
    res /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\t\
    res = pow(res, operand[i + 1]);\n\t\t}\n\t}\n\treturn res;", "\tlong result =\
    \ operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ result;", "\tassert(_operator_.size() == operand.size() - 1);\n\tassert(_operator_.size()\
    \ > 0);\n\tassert(operand.size() > 1);\n\tstd::stack<long> op_stk;\n\top_stk.push(operand[0]);\n\
    \tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tlong op1 = op_stk.top();\n\
    \t\top_stk.pop();\n\t\tlong op2 = operand[i + 1];\n\t\tswitch (_operator_[i])\
    \ {\n\t\tcase \"+\": op_stk.push(op1 + op2); break;\n\t\tcase \"-\": op_stk.push(op1\
    \ - op2); break;\n\t\tcase \"*\": op_stk.push(op1 * op2); break;\n\t\tcase \"\
    //\": op_stk.push(op1 / op2); break;\n\t\tcase \"**\": op_stk.push(pow(op1, op2));\
    \ break;\n\t\tdefault: break;\n\t\t}\n\t}\n\treturn op_stk.top();", "    if(_operator_.size()\
    \ == 0) return operand[0];\n    if(_operator_.size() == 1){\n        if(_operator_[0]\
    \ == \"+\") return operand[0] + operand[1];\n        if(_operator_[0] == \"-\"\
    ) return operand[0] - operand[1];\n        if(_operator_[0] == \"*\") return operand[0]\
    \ * operand[1];\n        if(_operator_[0] == \"//\") return operand[0] / operand[1];\n\
    \        if(_operator_[0] == \"**\") return pow(operand[0], operand[1]);\n   \
    \ }\n    if(_operator_[0] == \"**\"){\n        long m = pow(operand[0], operand[1]);\n\
    \        operand.erase(operand.begin());\n        operand[0] = m;\n        _operator_.erase(_operator_.begin());\n\
    \        return do_algebra(_operator_, operand);\n    }\n    for(int i = 0; i\
    \ < _operator_.size(); i++){\n        if(_operator_[i] == \"*\"){\n          \
    \  long m = operand[i] * operand[i+1];\n            operand.erase(operand.begin()\
    \ + i);\n            operand[i] = m;\n            _operator_.erase(_operator_.begin()\
    \ + i);\n            return do_algebra(_operator_, operand);\n        }\n    \
    \    if(_operator_[i] == \"//\"){\n            long m = operand[i] / operand[i+1];\n\
    \            operand.erase(operand.begin() + i);\n            operand[i] = m;\n\
    \            _operator_.erase(_operator_.begin() + i);\n            return do_algebra(_operator_,\
    \ operand);\n        }\n    }\n    for(int i = 0; i < _operator_.size(); i++){\n\
    \        if(_operator_[i] == \"+\"){\n            long m = operand[i] + operand[i+1];\n\
    \            operand.erase(operand.begin() + i);\n            operand[i", "  assert(_operator_.size()\
    \ + 1 == operand.size());\n  std::stack<long> stk;\n  for (int i = 0; i < _operator_.size();\
    \ i++) {\n    if (_operator_[i] == \"+\") {\n      long x = stk.top();\n     \
    \ stk.pop();\n      long y = stk.top();\n      stk.pop();\n      stk.push(x +\
    \ y);\n    } else if (_operator_[i] == \"-\") {\n      long x = stk.top();\n \
    \     stk.pop();\n      long y = stk.top();\n      stk.pop();\n      stk.push(y\
    \ - x);\n    } else if (_operator_[i] == \"*\") {\n      long x = stk.top();\n\
    \      stk.pop();\n      long y = stk.top();\n      stk.pop();\n      stk.push(x\
    \ * y);\n    } else if (_operator_[i] == \"//\") {\n      long x = stk.top();\n\
    \      stk.pop();\n      long y = stk.top();\n      stk.pop();\n      stk.push(y\
    \ / x);\n    } else if (_operator_[i] == \"**\") {\n      long x = stk.top();\n\
    \      stk.pop();\n      long y = stk.top();\n      stk.pop();\n      stk.push(std::pow(y,\
    \ x));\n    }\n    stk.push(operand[i + 1]);\n  }\n  return stk.top();", "  //replace\
    \ the following code with your solution\n  if (_operator_.size() != operand.size()\
    \ - 1) {\n    return 0;\n  }\n  for (long i = 1; i < operand.size(); i++) {\n\
    \    if (_operator_[i - 1] == \"*\") {\n      operand[i] = operand[i - 1] * operand[i];\n\
    \    } else if (_operator_[i - 1] == \"+\") {\n      operand[i] = operand[i -\
    \ 1] + operand[i];\n    } else if (_operator_[i - 1] == \"-\") {\n      operand[i]\
    \ = operand[i - 1] - operand[i];\n    } else if (_operator_[i - 1] == \"//\")\
    \ {\n      operand[i] = operand[i - 1] / operand[i];\n    } else if (_operator_[i\
    \ - 1] == \"**\") {\n      operand[i] = pow(operand[i - 1], operand[i]);\n   \
    \ }\n  }\n  return operand[operand.size() - 1];", "    if(_operator_.size()==0)\
    \ return 0;\n    long left = operand[0];\n    for(int i=0;i<_operator_.size();i++){\n\
    \        long right = operand[i+1];\n        std::string op = _operator_[i];\n\
    \        if(op==\"+\") left += right;\n        else if(op==\"-\") left -= right;\n\
    \        else if(op==\"*\") left *= right;\n        else if(op==\"//\") left /=\
    \ right;\n        else if(op==\"**\") left = pow(left,right);\n    }\n    return\
    \ left;", "    assert(_operator_.size()+1 == operand.size());\n    std::stack<long>\
    \ operators;\n    long result = operand[0];\n    operators.push(result);\n   \
    \ for(int i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] == \"\
    +\") {\n            result += operand[i+1];\n            operators.push(operand[i+1]);\n\
    \        } else if(_operator_[i] == \"-\") {\n            result -= operand[i+1];\n\
    \            operators.push(-operand[i+1]);\n        } else if(_operator_[i] ==\
    \ \"*\") {\n            long prevResult = operators.top();\n            operators.pop();\n\
    \            long temp = prevResult * operand[i+1];\n            result += temp;\n\
    \            operators.push(temp);\n        } else if(_operator_[i] == \"//\"\
    ) {\n            long prevResult = operators.top();\n            operators.pop();\n\
    \            long temp = prevResult / operand[i+1];\n            result += temp;\n\
    \            operators.push(temp);\n        } else if(_operator_[i] == \"**\"\
    ) {\n            long prevResult = operators.top();\n            operators.pop();\n\
    \            long temp = std::pow(prevResult, operand[i+1]);\n            result\
    \ += temp;\n            operators.push(temp);\n        }\n    }\n    return result;",
  "  assert(_operator_.size() == operand.size() - 1);\n  std::stack<std::string> op_stack;\n\
    \  std::stack<long> num_stack;\n  int op_i = 0;\n  for (int i = 0; i < operand.size();\
    \ i++) {\n    num_stack.push(operand[i]);\n    if (i < _operator_.size()) {\n\
    \      op_stack.push(_operator_[i]);\n    }\n  }\n  while (!op_stack.empty())\
    \ {\n    std::string op = op_stack.top();\n    op_stack.pop();\n    long op1 =\
    \ num_stack.top();\n    num_stack.pop();\n    long op2 = num_stack.top();\n  \
    \  num_stack.pop();\n    if (op == \"+\") {\n      num_stack.push(op1 + op2);\n\
    \    } else if (op == \"-\") {\n      num_stack.push(op1 - op2);\n    } else if\
    \ (op == \"*\") {\n      num_stack.push(op1 * op2);\n    } else if (op == \"//\"\
    ) {\n      num_stack.push(op1 / op2);\n    } else if (op == \"**\") {\n      num_stack.push(pow(op1,\
    \ op2));\n    }\n  }\n  return num_stack.top();", "  long result = operand[0];\n\
    \  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"\
    +\") {\n      result += operand[i + 1];\n    } else if (_operator_[i] == \"-\"\
    ) {\n      result -= operand[i + 1];\n    } else if (_operator_[i] == \"*\") {\n\
    \      result *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n\
    \      result = std::pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
  "  // your code goes here\n  stack<int> operators;\n  stack<int> operands;\n  for(int\
    \ i=0;i<_operator_.size();i++){\n    if(_operator_[i]==\"+\")\n      operators.push(1);\n\
    \    else if(_operator_[i]==\"-\")\n      operators.push(2);\n    else if(_operator_[i]==\"\
    *\")\n      operators.push(3);\n    else if(_operator_[i]==\"/\")\n      operators.push(4);\n\
    \    else\n      operators.push(5);\n  }\n  for(int i=0;i<operand.size();i++){\n\
    \    operands.push(operand[i]);\n  }\n  while(operators.size()>0){\n    int op=operators.top();\n\
    \    operators.pop();\n    int num1=operands.top();\n    operands.pop();\n   \
    \ int num2=operands.top();\n    operands.pop();\n    int result;\n    if(op==1)\n\
    \      result=num1+num2;\n    else if(op==2)\n      result=num1-num2;\n    else\
    \ if(op==3)\n      result=num1*num2;\n    else if(op==4)\n      result=num1/num2;\n\
    \    else\n      result=pow(num1,num2);\n    operands.push(result);\n  }\n  return\
    \ operands.top();", "    if(_operator_.size() == 0) return operand[0];\n    std::stack<long>\
    \ s;\n    s.push(operand[0]);\n    long res = 0;\n    for(int i = 0; i < _operator_.size();\
    \ i++){\n        if(_operator_[i] == \"+\"){\n            s.push(operand[i+1]);\n\
    \        }else if(_operator_[i] == \"-\"){\n            s.push(-operand[i+1]);\n\
    \        }else if(_operator_[i] == \"*\"){\n            res = s.top() * operand[i+1];\n\
    \            s.pop();\n            s.push(res);\n        }else if(_operator_[i]\
    \ == \"//\"){\n            res = s.top() / operand[i+1];\n            s.pop();\n\
    \            s.push(res);\n        }else if(_operator_[i] == \"**\"){\n      \
    \      res = pow(s.top(), operand[i+1]);\n            s.pop();\n            s.push(res);\n\
    \        }\n    }\n    res = 0;\n    while(!s.empty()){\n        res += s.top();\n\
    \        s.pop();\n    }\n    return res;", "  std::stack<long> myStack;\n  long\
    \ temp;\n  for(int i = 0; i < _operator_.size(); i++){\n    // While there are\
    \ still operator left, we will pop the top two items\n    // from the stack and\
    \ combine them with the operator. Then push the result\n    // back to the stack\n\
    \    if(myStack.size() > 1 && _operator_[i] != \"**\"){\n      long first = myStack.top();\n\
    \      myStack.pop();\n      long second = myStack.top();\n      myStack.pop();\n\
    \      if(_operator_[i] == \"+\")\n        temp = first + second;\n      else\
    \ if(_operator_[i] == \"-\")\n        temp = second - first;\n      else if(_operator_[i]\
    \ == \"*\")\n        temp = first * second;\n      else if(_operator_[i] == \"\
    //\")\n        temp = second / first;\n      myStack.push(temp);\n    }\n    //\
    \ If there is only one value in the stack, and the operator is exponentiation\n\
    \    // we need to pop the first value and exponentiate it with the next value\
    \ in the\n    // operand list\n    else if(_operator_[i] == \"**\"){\n      long\
    \ first = myStack.top();\n      myStack.pop();\n      temp = std::pow(first, operand[i+1]);\n\
    \      myStack.push(temp);\n    }\n    // Otherwise we push the current value\
    \ in the operand to the stack\n    else{\n      myStack.push(operand[i]);\n  \
    \  }\n  }\n  return myStack.top();", "    std::stack<long> s;\n    for(int i =\
    \ 0; i < operand.size(); i++) {\n        s.push(operand[i]);\n        if(i < _operator_.size())\
    \ {\n            long op2 = s.top();\n            s.pop();\n            long op1\
    \ = s.top();\n            s.pop();\n            long res = 0;\n            if(_operator_[i]\
    \ == \"+\") {\n                res = op1 + op2;\n            } else if(_operator_[i]\
    \ == \"-\") {\n                res = op1 - op2;\n            } else if(_operator_[i]\
    \ == \"*\") {\n                res = op1 * op2;\n            } else if(_operator_[i]\
    \ == \"//\") {\n                res = op1 / op2;\n            } else if(_operator_[i]\
    \ == \"**\") {\n                res = pow(op1, op2);\n            }\n        \
    \    s.push(res);\n        }\n    }\n    return s.top();", "  // Write your code\
    \ here...\n  assert(_operator_.size() == operand.size() - 1);\n  long first =\
    \ operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i]\
    \ == \"+\") {\n      first += operand[i + 1];\n    } else if (_operator_[i] ==\
    \ \"-\") {\n      first -= operand[i + 1];\n    } else if (_operator_[i] == \"\
    *\") {\n      first *= operand[i + 1];\n    } else if (_operator_[i] == \"//\"\
    ) {\n      first /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n\
    \      first = pow(first, operand[i + 1]);\n    }\n  }\n  return first;", "\t\
    long result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\
    \tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\t\
    else if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\
    \telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\
    \t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i\
    \ + 1]);\n\t\t}\n\t}\n\treturn result;", "  assert(_operator_.size() + 1 == operand.size());\n\
    \  stack<long> s;\n  s.push(operand[0]);\n  for (int i = 1; i < operand.size();\
    \ i++) {\n    if (_operator_[i - 1] == \"+\") {\n      s.push(operand[i]);\n \
    \   } else if (_operator_[i - 1] == \"-\") {\n      s.push(-operand[i]);\n   \
    \ } else if (_operator_[i - 1] == \"*\") {\n      long tmp = s.top();\n      s.pop();\n\
    \      s.push(tmp * operand[i]);\n    } else if (_operator_[i - 1] == \"//\")\
    \ {\n      long tmp = s.top();\n      s.pop();\n      s.push(tmp / operand[i]);\n\
    \    } else if (_operator_[i - 1] == \"**\") {\n      long tmp = s.top();\n  \
    \    s.pop();\n      s.push(pow(tmp, operand[i]));\n    }\n  }\n  long ans = 0;\n\
    \  while (!s.empty()) {\n    ans += s.top();\n    s.pop();\n  }\n  return ans;",
  "\tassert(_operator_.size() == operand.size() - 1);\n\tfor (auto i = 0; i < _operator_.size();\
    \ ++i) {\n\t\tif (_operator_[i] == \"//\") {\n\t\t\toperand[i] = (long)floor(operand[i]\
    \ / operand[i + 1]);\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\toperand[i]\
    \ = pow(operand[i], operand[i + 1]);\n\t\t\toperand.erase(operand.begin() + i\
    \ + 1);\n\t\t\t_operator_.erase(_operator_.begin() + i);\n\t\t\ti--;\n\t\t}\n\t\
    }\n\tfor (auto i = 0; i < _operator_.size(); ++i) {\n\t\tif (_operator_[i] ==\
    \ \"*\") {\n\t\t\toperand[i] *= operand[i + 1];\n\t\t\toperand.erase(operand.begin()\
    \ + i + 1);\n\t\t\t_operator_.erase(_operator_.begin() + i);\n\t\t\ti--;\n\t\t\
    }\n\t}\n\tfor (auto i = 0; i < _operator_.size(); ++i) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\toperand[i] += operand[i + 1];\n\t\t\toperand.erase(operand.begin()\
    \ + i + 1);\n\t\t\t_operator_.erase(_operator_.begin() + i);\n\t\t\ti--;\n\t\t\
    }\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\toperand[i] -= operand[i + 1];\n\
    \t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn operand[0", "\tif(_operator_.size()\
    \ == 0) return operand[0];\n\tlong result = operand[0];\n\tfor(int i = 0; i <\
    \ _operator_.size(); i++){\n\t\tswitch(_operator_[i]){\n\t\t\tcase \"+\": result\
    \ += operand[i+1]; break;\n\t\t\tcase \"-\": result -= operand[i+1]; break;\n\t\
    \t\tcase \"*\": result *= operand[i+1]; break;\n\t\t\tcase \"//\": result /= operand[i+1];\
    \ break;\n\t\t\tcase \"**\": result = (long) pow(result, operand[i+1]); break;\n\
    \t\t}\n\t}\n\treturn result;", "\tstd::stack<long> stack;\n\tfor (int i = 0; i\
    \ < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tstack.push(operand[i]\
    \ + operand[i + 1]);\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tstack.push(operand[i]\
    \ - operand[i + 1]);\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tstack.push(operand[i]\
    \ * operand[i + 1]);\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tstack.push(operand[i]\
    \ / operand[i + 1]);\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tstack.push(pow(operand[i],\
    \ operand[i + 1]));\n\t\t}\n\t}\n\treturn stack.top();", "  assert(_operator_.size()\
    \ == operand.size() - 1);\n  assert(_operator_.size() > 0);\n  assert(operand.size()\
    \ > 1);\n  std::stack<long> nums;\n  int idx = 0;\n  nums.push(operand[idx++]);\n\
    \  for (auto op : _operator_) {\n    long a = nums.top();\n    nums.pop();\n \
    \   long b = operand[idx++];\n    if (op == \"+\") {\n      nums.push(a + b);\n\
    \    } else if (op == \"-\") {\n      nums.push(a - b);\n    } else if (op ==\
    \ \"*\") {\n      nums.push(a * b);\n    } else if (op == \"//\") {\n      nums.push(a\
    \ / b);\n    } else if (op == \"**\") {\n      nums.push(pow(a, b));\n    }\n\
    \  }\n  return nums.top();", "\tlong result = operand[0];\n\tfor (int i = 0; i\
    \ < _operator_.size(); i++) {\n\t\tstd::string _operator = _operator_[i];\n\t\t\
    if (_operator == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if\
    \ (_operator == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if\
    \ (_operator == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if\
    \ (_operator == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if\
    \ (_operator == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\
    \t}\n\treturn result;", "\tint size = _operator_.size();\n\tlong sum = operand[0];\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\t\
    sum += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\t\
    sum -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\t\
    sum *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\t\
    sum /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\t\
    sum = pow(sum, operand[i + 1]);\n\t\t}\n\t}\n\treturn sum;", "    \n    std::stack<int>\
    \ st;\n    st.push(operand[0]);\n    for(int i=0;i<_operator_.size();i++)\n  \
    \  {\n        if(_operator_[i]==\"+\")\n        {\n            st.push(operand[i+1]);\n\
    \        }\n        else if(_operator_[i]==\"-\")\n        {\n            st.push(-operand[i+1]);\n\
    \        }\n        else if(_operator_[i]==\"*\")\n        {\n            int\
    \ k=st.top();\n            st.pop();\n            st.push(k*operand[i+1]);\n \
    \       }\n        else if(_operator_[i]==\"//\")\n        {\n            int\
    \ k=st.top();\n            st.pop();\n            st.push(k/operand[i+1]);\n \
    \       }\n        else if(_operator_[i]==\"**\")\n        {\n            int\
    \ k=st.top();\n            st.pop();\n            st.push(pow(k,operand[i+1]));\n\
    \        }\n    }\n    int ans=0;\n    while(!st.empty())\n    {\n        ans+=st.top();\n\
    \        st.pop();\n    }\n    return ans;", "    int n = _operator_.size();\n\
    \    assert(n == operand.size() - 1);\n    assert(n >= 1);\n    assert(operand.size()\
    \ >= 2);\n    std::stack<long> stk;\n    stk.push(operand[0]);\n    for (int i\
    \ = 0; i < n; ++i) {\n        if (_operator_[i] == \"+\") {\n            stk.push(operand[i\
    \ + 1]);\n        } else if (_operator_[i] == \"-\") {\n            stk.push(-operand[i\
    \ + 1]);\n        } else if (_operator_[i] == \"*\") {\n            long tmp =\
    \ stk.top();\n            stk.pop();\n            stk.push(tmp * operand[i + 1]);\n\
    \        } else if (_operator_[i] == \"//\") {\n            long tmp = stk.top();\n\
    \            stk.pop();\n            stk.push(tmp / operand[i + 1]);\n       \
    \ } else if (_operator_[i] == \"**\") {\n            long tmp = stk.top();\n \
    \           stk.pop();\n            stk.push(pow(tmp, operand[i + 1]));\n    \
    \    }\n    }\n    long ret = 0;\n    while (!stk.empty()) {\n        ret += stk.top();\n\
    \        stk.pop();\n    }\n    return ret;", "  std::stack<long> st;\n  int i\
    \ = 0;\n  while (i < operand.size()) {\n    if (i == 0) {\n      st.push(operand[i]);\n\
    \    } else {\n      if (_operator_[i - 1] == \"+\") {\n        long val = st.top();\n\
    \        st.pop();\n        st.push(val + operand[i]);\n      } else if (_operator_[i\
    \ - 1] == \"-\") {\n        long val = st.top();\n        st.pop();\n        st.push(val\
    \ - operand[i]);\n      } else if (_operator_[i - 1] == \"*\") {\n        long\
    \ val = st.top();\n        st.pop();\n        st.push(val * operand[i]);\n   \
    \   } else if (_operator_[i - 1] == \"//\") {\n        long val = st.top();\n\
    \        st.pop();\n        st.push(val / operand[i]);\n      } else if (_operator_[i\
    \ - 1] == \"**\") {\n        long val = st.top();\n        st.pop();\n       \
    \ st.push(pow(val, operand[i]));\n      }\n    }\n    i++;\n  }\n  return st.top();",
  "  long num1;\n  long num2;\n  long result;\n  std::stack<long> stack;\n  int size\
    \ = operand.size();\n  int size_ops = _operator_.size();\n  if(size > 2) {\n \
    \   for(int i = 0; i < size_ops; i++) {\n      num1 = operand[i];\n      num2\
    \ = operand[i+1];\n      std::string op = _operator_[i];\n      result = 0;\n\
    \      if(op == \"+\") {\n        result = num1 + num2;\n      }\n      else if(op\
    \ == \"-\") {\n        result = num1 - num2;\n      }\n      else if(op == \"\
    *\") {\n        result = num1 * num2;\n      }\n      else if(op == \"//\") {\n\
    \        result = num1 / num2;\n      }\n      else if(op == \"**\") {\n     \
    \   result = num1 ^ num2;\n      }\n      else {\n        assert(false);\n   \
    \   }\n      stack.push(result);\n    }\n    // int size_stack = stack.size();\n\
    \    // for(int i = 0; i < size_stack; i++) {\n    //   operand[i] = stack.top();\n\
    \    //   stack.pop();\n    // }\n    // operand.resize(size_stack);\n    // return\
    \ do_algebra(_operator_, operand);\n  }\n  else {\n    // Only 2 operands\n  \
    \  if(_operator_[0] == \"+\") {\n      result = operand[0] + operand[1];\n   \
    \ }\n    else if(_operator_[0] == \"-\") {\n      result = operand[0] - operand[1];\n\
    \    }\n    else if(_operator_[0] == \"*\") {\n      result = operand[0] * operand[1];\n\
    \    }\n    else if(_operator_[0] == \"//\") {\n      result = operand[0] / operand[1];\n\
    \    }\n    else if(_operator_[0] == \"**\") {\n      result = operand[0] ^ oper",
  "\tint n = operand.size();\n\tlong ans = operand[0];\n\tfor (int i = 1; i < n; i++)\
    \ {\n\t\tif (_operator_[i - 1] == \"+\") {\n\t\t\tans += operand[i];\n\t\t}\n\t\
    \telse if (_operator_[i - 1] == \"-\") {\n\t\t\tans -= operand[i];\n\t\t}\n\t\t\
    else if (_operator_[i - 1] == \"*\") {\n\t\t\tans *= operand[i];\n\t\t}\n\t\t\
    else if (_operator_[i - 1] == \"/\") {\n\t\t\tans /= operand[i];\n\t\t}\n\t\t\
    else if (_operator_[i - 1] == \"^\") {\n\t\t\tans = pow(ans, operand[i]);\n\t\t\
    }\n\t}\n\treturn ans;", "  // WRITE YOUR CODE HERE!\n  assert(_operator_.size()\
    \ == operand.size() - 1);\n  stack<long> st;\n  st.push(operand[0]);\n  for (int\
    \ i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"+\") {\n  \
    \    st.push(operand[i + 1]);\n    } else if (_operator_[i] == \"-\") {\n    \
    \  st.push(-operand[i + 1]);\n    } else if (_operator_[i] == \"*\") {\n     \
    \ long a = st.top();\n      st.pop();\n      st.push(a * operand[i + 1]);\n  \
    \  } else if (_operator_[i] == \"//\") {\n      long a = st.top();\n      st.pop();\n\
    \      st.push(a / operand[i + 1]);\n    } else if (_operator_[i] == \"**\") {\n\
    \      long a = st.top();\n      st.pop();\n      st.push(pow(a, operand[i + 1]));\n\
    \    }\n  }\n  long ret = 0;\n  while (!st.empty()) {\n    ret += st.top();\n\
    \    st.pop();\n  }\n  return ret;", "  long res = operand[0];\n  for (int i =\
    \ 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"+\") {\n      res\
    \ += operand[i + 1];\n    } else if (_operator_[i] == \"-\") {\n      res -= operand[i\
    \ + 1];\n    } else if (_operator_[i] == \"*\") {\n      res *= operand[i + 1];\n\
    \    } else if (_operator_[i] == \"//\") {\n      res /= operand[i + 1];\n   \
    \ } else if (_operator_[i] == \"**\") {\n      res = pow(res, operand[i + 1]);\n\
    \    }\n  }\n  return res;", "    // Write your code here\n    assert(_operator_.size()+1\
    \ == operand.size());\n    std::stack<long> eval;\n    for(int i=0;i<_operator_.size();i++){\n\
    \        std::string c = _operator_[i];\n        if(c == \"+\"){\n           \
    \ long sum = operand[i] + operand[i+1];\n            eval.push(sum);\n       \
    \ }\n        else if(c == \"-\"){\n            long dif = operand[i] - operand[i+1];\n\
    \            eval.push(dif);\n        }\n        else if(c == \"*\"){\n      \
    \      long prod = operand[i] * operand[i+1];\n            eval.push(prod);\n\
    \        }\n        else if(c == \"//\"){\n            long div = operand[i] /\
    \ operand[i+1];\n            eval.push(div);\n        }\n        else if(c ==\
    \ \"**\"){\n            long exp = pow(operand[i],operand[i+1]);\n           \
    \ eval.push(exp);\n        }\n    }\n    long res = eval.top();\n    return res;",
  "  assert(_operator_.size() == operand.size() - 1);\n  std::stack<long> operand_stack;\n\
    \  operand_stack.push(operand[0]);\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"+\") {\n      operand_stack.push(operand[i + 1]);\n\
    \    } else if (_operator_[i] == \"-\") {\n      operand_stack.push(-operand[i\
    \ + 1]);\n    } else if (_operator_[i] == \"*\") {\n      operand_stack.top()\
    \ *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n      operand_stack.top()\
    \ /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n      operand_stack.top()\
    \ = std::pow(operand_stack.top(), operand[i + 1]);\n    }\n  }\n  long result\
    \ = 0;\n  while (!operand_stack.empty()) {\n    result += operand_stack.top();\n\
    \    operand_stack.pop();\n  }\n  return result;", "    assert(_operator_.size()\
    \ == operand.size() - 1);\n    std::stack<long> st;\n    st.push(operand[0]);\n\
    \    for (int i = 0; i < _operator_.size(); i++) {\n        long op2 = operand[i\
    \ + 1];\n        if (_operator_[i] == \"+\") {\n            st.push(op2);\n  \
    \      } else if (_operator_[i] == \"-\") {\n            st.push(-op2);\n    \
    \    } else if (_operator_[i] == \"*\") {\n            long tmp = st.top();\n\
    \            st.pop();\n            st.push(tmp * op2);\n        } else if (_operator_[i]\
    \ == \"//\") {\n            long tmp = st.top();\n            st.pop();\n    \
    \        st.push(tmp / op2);\n        } else if (_operator_[i] == \"**\") {\n\
    \            long tmp = st.top();\n            st.pop();\n            st.push(std::pow(tmp,\
    \ op2));\n        }\n    }\n    long result = 0;\n    while (!st.empty()) {\n\
    \        result += st.top();\n        st.pop();\n    }\n    return result;", "\t\
    long result = operand[0];\n\tstd::stack<std::string> s;\n\tfor (int i = 0; i <\
    \ _operator_.size(); i++) {\n\t\tif (s.empty()) {\n\t\t\ts.push(_operator_[i]);\n\
    \t\t}\n\t\telse {\n\t\t\twhile (!s.empty() && s.top() == \"*\") {\n\t\t\t\ts.pop();\n\
    \t\t\t\tresult *= operand[i + 1];\n\t\t\t}\n\t\t\ts.push(_operator_[i]);\n\t\t\
    }\n\t}\n\twhile (!s.empty()) {\n\t\tif (s.top() == \"+\")\n\t\t\tresult += operand[operand.size()\
    \ - 1];\n\t\telse if (s.top() == \"-\")\n\t\t\tresult -= operand[operand.size()\
    \ - 1];\n\t\ts.pop();\n\t}\n\treturn result;", "  assert(_operator_.size() + 1\
    \ == operand.size());\n  for (int i = 0; i < _operator_.size(); i++) {\n    if\
    \ (_operator_[i] == \"**\") {\n      operand[i + 1] = std::pow(operand[i], operand[i\
    \ + 1]);\n      operand.erase(operand.begin() + i);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"//\") {\n      operand[i + 1] = operand[i] / operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"*\") {\n      operand[i + 1] = operand[i] * operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"+\") {\n      operand[i + 1] = operand[i] + operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"-\") {\n      operand[i + 1] = operand[i] - operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  return oper", "    std::stack<long> st;\n \
    \   for(long i = 0; i < _operator_.size(); i++) {\n        std::string op = _operator_[i];\n\
    \        if(op == \"+\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = operand[i+1];\n            st.push(a+b);\n        }\n  \
    \      else if(op == \"-\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = operand[i+1];\n            st.push(a-b);\n        }\n  \
    \      else if(op == \"*\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = operand[i+1];\n            st.push(a*b);\n        }\n  \
    \      else if(op == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = operand[i+1];\n            st.push(a/b);\n        }\n  \
    \      else if(op == \"**\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = operand[i+1];\n            st.push(pow(a,b));\n        }\n\
    \    }\n    return st.top();", "    std::stack<long> stk;\n    stk.push(operand[0]);\n\
    \    stk.push(operand[1]);\n    int counter = 2;\n    while(counter < operand.size()){\n\
    \        long b = stk.top();\n        stk.pop();\n        long a = stk.top();\n\
    \        stk.pop();\n        if(_operator_[counter-1] == \"+\"){\n           \
    \ stk.push(a+b);\n        }else if(_operator_[counter-1] == \"-\"){\n        \
    \    stk.push(a-b);\n        }else if(_operator_[counter-1] == \"*\"){\n     \
    \       stk.push(a*b);\n        }else if(_operator_[counter-1] == \"//\"){\n \
    \           stk.push(a/b);\n        }else if(_operator_[counter-1] == \"**\"){\n\
    \            stk.push(pow(a,b));\n        }\n        counter++;\n    }\n    return\
    \ stk.top();", "    // Write your code here\n    stack<long>stk;\n    stk.push(operand[0]);\n\
    \    for(int i=0;i<_operator_.size();i++){\n        char op = _operator_[i][0];\n\
    \        if(op=='+')\n            stk.push(operand[i+1]);\n        else if(op=='-')\n\
    \            stk.push(-operand[i+1]);\n        else if(op=='*'){\n           \
    \ long val = stk.top();\n            stk.pop();\n            stk.push(val*operand[i+1]);\n\
    \        }\n        else if(op=='/'){\n            long val = stk.top();\n   \
    \         stk.pop();\n            stk.push(val/operand[i+1]);\n        }\n   \
    \     else if(op=='^'){\n            long val = stk.top();\n            stk.pop();\n\
    \            stk.push(pow(val,operand[i+1]));\n        }\n    }\n    long ans\
    \ = 0;\n    while(!stk.empty()){\n        ans+=stk.top();\n        stk.pop();\n\
    \    }\n    return ans;", "\tlong ret = operand[0];\n\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tret += operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tret -= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tret *= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tret /= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tret = pow(ret, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn ret;", "\tlong res = operand[0];\n\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tres += operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tres -= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tres *= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tres /= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tres = pow(res, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn res;", "\t// Write your code here.\n\tlong result = operand[0];\n\
    \tint size = _operator_.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (_operator_[i]\
    \ == \"+\")\n\t\t\tresult += operand[i + 1];\n\t\telse if (_operator_[i] == \"\
    -\")\n\t\t\tresult -= operand[i + 1];\n\t\telse if (_operator_[i] == \"*\")\n\t\
    \t\tresult *= operand[i + 1];\n\t\telse if (_operator_[i] == \"//\")\n\t\t\tresult\
    \ /= operand[i + 1];\n\t\telse if (_operator_[i] == \"**\")\n\t\t\tresult = pow(result,\
    \ operand[i + 1]);\n\t}\n\treturn result;", "\tstd::stack<long> stack;\n\tstack.push(operand[0]);\n\
    \tstack.push(operand[1]);\n\tfor (int i = 2; i < operand.size(); i++) {\n\t\t\
    std::string x = _operator_[i - 1];\n\t\tlong val2 = stack.top();\n\t\tstack.pop();\n\
    \t\tlong val1 = stack.top();\n\t\tstack.pop();\n\t\tif (x == \"+\") {\n\t\t\t\
    stack.push(val1 + val2);\n\t\t}\n\t\telse if (x == \"-\") {\n\t\t\tstack.push(val1\
    \ - val2);\n\t\t}\n\t\telse if (x == \"*\") {\n\t\t\tstack.push(val1 * val2);\n\
    \t\t}\n\t\telse if (x == \"/\") {\n\t\t\tstack.push(val1 / val2);\n\t\t}\n\t\t\
    else if (x == \"**\") {\n\t\t\tstack.push(std::pow(val1, val2));\n\t\t}\n\t\t\
    else if (x == \"//\") {\n\t\t\tstack.push(val1 / val2);\n\t\t}\n\t\telse {\n\t\
    \t\tstack.push(val1);\n\t\t\tstack.push(val2);\n\t\t}\n\t}\n\treturn stack.top();",
  "    long cur_result = operand[0];\n    for (int i = 0; i < _operator_.size(); i++)\
    \ {\n        if (_operator_[i] == \"+\")\n            cur_result += operand[i\
    \ + 1];\n        else if (_operator_[i] == \"-\")\n            cur_result -= operand[i\
    \ + 1];\n        else if (_operator_[i] == \"*\")\n            cur_result *= operand[i\
    \ + 1];\n        else if (_operator_[i] == \"//\")\n            cur_result /=\
    \ operand[i + 1];\n        else if (_operator_[i] == \"**\")\n            cur_result\
    \ = std::pow(cur_result, operand[i + 1]);\n    }\n    return cur_result;", " \
    \   long result = operand[0];\n    for(int i = 0; i < _operator_.size(); i++)\
    \ {\n        if(_operator_[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\") {\n            result /=\
    \ operand[i+1];\n        }\n        else if(_operator_[i] == \"**\") {\n     \
    \       result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "  // write your solution here\n  int m = _operator_.size();\n  int n = operand.size();\n\
    \  assert(m == n - 1);\n  std::stack<long> s;\n  for (int i = 0; i < n; i++) {\n\
    \    if (i == 0) {\n      s.push(operand[i]);\n    } else {\n      char oper =\
    \ _operator_[i - 1][0];\n      long op1 = s.top();\n      s.pop();\n      long\
    \ op2 = operand[i];\n      if (oper == '+') {\n        s.push(op1 + op2);\n  \
    \    } else if (oper == '-') {\n        s.push(op1 - op2);\n      } else if (oper\
    \ == '*') {\n        s.push(op1 * op2);\n      } else if (oper == '/') {\n   \
    \     s.push(op1 / op2);\n      } else if (oper == '^') {\n        s.push(pow(op1,\
    \ op2));\n      }\n    }\n  }\n  return s.top();", "    // write your code here\n\
    \    assert(_operator_.size() == operand.size() - 1);\n    std::stack<long> st;\n\
    \    st.push(operand[0]);\n    for (int i = 0; i < _operator_.size(); i++) {\n\
    \        long second = operand[i + 1];\n        long first = st.top();\n     \
    \   st.pop();\n        if (_operator_[i] == \"+\") {\n            st.push(first\
    \ + second);\n        } else if (_operator_[i] == \"-\") {\n            st.push(first\
    \ - second);\n        } else if (_operator_[i] == \"*\") {\n            st.push(first\
    \ * second);\n        } else if (_operator_[i] == \"//\") {\n            st.push(first\
    \ / second);\n        } else if (_operator_[i] == \"**\") {\n            st.push(pow(first,\
    \ second));\n        }\n    }\n    return st.top();", "    long result = operand[0];\n\
    \    for(int i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] ==\
    \ \"+\") {\n            result += operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "\tstack<long> s;\n\tlong left_num, right_num;\n\t\
    //cout << \"operand size \" << operand.size() << endl;\n\t//cout << \"operator\
    \ size \" << _operator_.size() << endl;\n\tfor (int i = 0; i < operand.size();\
    \ i++) {\n\t\ts.push(operand[i]);\n\t\tif (i < _operator_.size()) {\n\t\t\tleft_num\
    \ = s.top();\n\t\t\ts.pop();\n\t\t\tright_num = s.top();\n\t\t\ts.pop();\n\t\t\
    \tif (_operator_[i] == \"+\")\n\t\t\t\ts.push(left_num + right_num);\n\t\t\telse\
    \ if (_operator_[i] == \"-\")\n\t\t\t\ts.push(left_num - right_num);\n\t\t\telse\
    \ if (_operator_[i] == \"*\")\n\t\t\t\ts.push(left_num * right_num);\n\t\t\telse\
    \ if (_operator_[i] == \"/\")\n\t\t\t\ts.push(left_num / right_num);\n\t\t\telse\
    \ if (_operator_[i] == \"**\")\n\t\t\t\ts.push(pow(left_num, right_num));\n\t\t\
    }\n\t}\n\treturn s.top();", "    if (_operator_.size() != operand.size() - 1)\
    \ {\n        return 0;\n    }\n    long ans = operand[0];\n    for (int i = 0;\
    \ i < _operator_.size(); i++) {\n        std::string op = _operator_[i];\n   \
    \     if (op == \"+\") {\n            ans += operand[i + 1];\n        } else if\
    \ (op == \"-\") {\n            ans -= operand[i + 1];\n        } else if (op ==\
    \ \"*\") {\n            ans *= operand[i + 1];\n        } else if (op == \"//\"\
    ) {\n            ans /= operand[i + 1];\n        } else if (op == \"**\") {\n\
    \            ans = pow(ans, operand[i + 1]);\n        }\n    }\n    return ans;",
  "\t// write your code here\n\tlong result = operand[0];\n\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\
    \t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = std::pow(result,\
    \ operand[i + 1]);\n\t\t}\n\t}\n\treturn result;", "    // First, we construct\
    \ stack in the form of a two-dimensional vector.\n    // Second, we add the first\
    \ two elements into the first stack.\n    // Third, we iterate the operator.\n\
    \    //      If the current operator is an exponent operator, we pop two elements\
    \ off the first stack and add them\n    //      to the second stack.\n    // \
    \     If the current operator is a multiplication operator, we pop two elements\
    \ off the first stack and\n    //      multiply them and add the result to the\
    \ second stack.\n    //      If the current operator is a division operator, we\
    \ pop two elements off the first stack and divide\n    //      them and add the\
    \ result to the second stack.\n    //      If the current operator is an addition\
    \ operator, we pop two elements off the first stack and add them\n    //     \
    \ and add the result to the second stack.\n    //      If the current operator\
    \ is a subtraction operator, we pop two elements off the first stack and subtract\n\
    \    //      them and add the result to the second stack.\n    //      Then, we\
    \ add the next element to the first stack.\n    // Fourth, we pop two elements\
    \ off the first stack and add them and add the result to the second stack.\n \
    \   // Last, we return the last element of the second stack.\n    // Note: We\
    \ use two stacks because the exponentation operator has higher precedence than\
    \ the other operators.\n    std::vector<std::vector<long>> stack;\n    stack.push_back(std::vector<long>());\n\
    \    stack.push_back(std::vector<long>());\n    stack[0].push_back(operand[0]);\n\
    \    stack[0].push_back(operand[1]);\n    for (int i = 0; i < _operator_.size();\
    \ i++) {\n        if (_operator_[i] == \"**\") {\n            long temp_a = stack[0].back();\n\
    \            stack[0].pop_back();\n            long temp_b = stack[0].back();\n\
    \            stack[0].pop_back();\n            stack[1].push_back(std::pow(temp_b,\
    \ temp_a));\n        } else if (_operator_[i] == \"*\") {\n            long temp_a\
    \ = stack[0].back();\n           ", "\t// Write your code here\n\treturn 0;",
  "  // Write your code here\n  long left, right;\n  int op;\n  int size = operand.size();\n\
    \  std::stack<long> st;\n  st.push(operand[size-1]);\n  for(int i = size-2; i\
    \ >= 0; i--){\n    left = operand[i];\n    right = st.top();\n    op = _operator_[i]\
    \ == \"+\" ? 1 : _operator_[i] == \"-\" ? 2 : _operator_[i] == \"*\" ? 3 : _operator_[i]\
    \ == \"//\" ? 4 : 5;\n    st.pop();\n    switch(op){\n      case 1: st.push(left\
    \ + right);\n              break;\n      case 2: st.push(left - right);\n    \
    \          break;\n      case 3: st.push(left * right);\n              break;\n\
    \      case 4: st.push(left / right);\n              break;\n      case 5: st.push(pow(left,\
    \ right));\n              break;\n    }\n  }\n  return st.top();", "  // Write\
    \ your code here\n  stack<long>st;\n  int n = _operator_.size();\n  st.push(operand[0]);\n\
    \  for(int i=0;i<n;i++){\n      long t2 = operand[i+1];\n      long t1 = st.top();\n\
    \      st.pop();\n      if(_operator_[i]==\"+\")st.push(t1+t2);\n      else if(_operator_[i]==\"\
    -\")st.push(t1-t2);\n      else if(_operator_[i]==\"*\")st.push(t1*t2);\n    \
    \  else if(_operator_[i]==\"//\")st.push(t1/t2);\n      else if(_operator_[i]==\"\
    **\")st.push(pow(t1,t2));\n  }\n  return st.top();", '  // Write your code here',
  "  std::stack<long> s;\n  for(int i = 0; i < operand.size(); i++) {\n    s.push(operand[i]);\n\
    \    if(i < _operator_.size()) {\n      long op2 = s.top();\n      s.pop();\n\
    \      long op1 = s.top();\n      s.pop();\n      if(_operator_[i] == \"+\")\n\
    \        s.push(op1 + op2);\n      else if(_operator_[i] == \"-\")\n        s.push(op1\
    \ - op2);\n      else if(_operator_[i] == \"*\")\n        s.push(op1 * op2);\n\
    \      else if(_operator_[i] == \"//\")\n        s.push(op1 / op2);\n      else\
    \ if(_operator_[i] == \"**\")\n        s.push(std::pow(op1, op2));\n    }\n  }\n\
    \  return s.top();", "    assert(_operator_.size() == operand.size() - 1);\n \
    \   long result = operand[0];\n    int i = 0;\n    while (i < _operator_.size())\
    \ {\n        if (_operator_[i] == \"+\") {\n            result += operand[i +\
    \ 1];\n        } else if (_operator_[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (_operator_[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (_operator_[i] == \"//\") {\n            result /=\
    \ operand[i + 1];\n        } else if (_operator_[i] == \"**\") {\n           \
    \ result = pow(result, operand[i + 1]);\n        }\n        i++;\n    }\n    return\
    \ result;", "\t// Write your code here\n\t// To print results to the standard\
    \ output you can use Printf()\n\t// Example:\n\t// Printf(\"%d\", result);\n\t\
    stack<long> S;\n\tlong x = 0;\n\tlong op1 = 0;\n\tlong op2 = 0;\n\tfor (int i\
    \ = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\t\
    op1 = S.top();\n\t\t\tS.pop();\n\t\t\top2 = S.top();\n\t\t\tS.pop();\n\t\t\tx\
    \ = op1 + op2;\n\t\t\tS.push(x);\n\t\t}\n\t\telse if (_operator_[i] == \"-\")\
    \ {\n\t\t\top1 = S.top();\n\t\t\tS.pop();\n\t\t\top2 = S.top();\n\t\t\tS.pop();\n\
    \t\t\tx = op1 - op2;\n\t\t\tS.push(x);\n\t\t}\n\t\telse if (_operator_[i] == \"\
    *\") {\n\t\t\top1 = S.top();\n\t\t\tS.pop();\n\t\t\top2 = S.top();\n\t\t\tS.pop();\n\
    \t\t\tx = op1 * op2;\n\t\t\tS.push(x);\n\t\t}\n\t\telse if (_operator_[i] == \"\
    //\") {\n\t\t\top1 = S.top();\n\t\t\tS.pop();\n\t\t\top2 = S.top();\n\t\t\tS.pop();\n\
    \t\t\tx = op1 / op2;\n\t\t\tS.push(x);\n\t\t}\n\t\telse if (_operator_[i] == \"\
    **\") {\n\t\t\top1 = S.top();\n\t\t\tS.pop();\n\t\t\top2 = S.top();\n\t\t\tS.pop();\n\
    \t\t\tx = pow(op1, op2);\n\t\t\tS.push(x);\n\t\t}\n\t\telse {\n\t\t\tS.push(operand[i]);\n\
    \t\t}\n\t", "    long result = operand[0];\n    for(int i = 0; i < _operator_.size();\
    \ i++) {\n        switch(_operator_[i][0]) {\n            case '+': {\n      \
    \          result += operand[i+1];\n                break;\n            }\n  \
    \          case '-': {\n                result -= operand[i+1];\n            \
    \    break;\n            }\n            case '*': {\n                result *=\
    \ operand[i+1];\n                break;\n            }\n            case '/':\
    \ {\n                result /= operand[i+1];\n                break;\n       \
    \     }\n            case '^': {\n                result = pow(result, operand[i+1]);\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "  // ensure operator size equals to operand size - 1\n  assert(_operator_.size()\
    \ == operand.size() - 1);\n  // ensure there is at least one operator and at least\
    \ two operands\n  assert(_operator_.size() != 0 && operand.size() != 0);\n  //\
    \ if only two operands and one operator\n  if (operand.size() == 2) {\n    if\
    \ (_operator_[0] == \"+\") return operand[0] + operand[1];\n    if (_operator_[0]\
    \ == \"-\") return operand[0] - operand[1];\n    if (_operator_[0] == \"*\") return\
    \ operand[0] * operand[1];\n    if (_operator_[0] == \"//\") return operand[0]\
    \ / operand[1];\n    if (_operator_[0] == \"**\") return pow(operand[0], operand[1]);\n\
    \  }\n\n  std::vector<std::string> ops = _operator_;\n  std::vector<long> nums\
    \ = operand;\n  long res = 0;\n  // find the operator with highest priority\n\
    \  auto it = std::find(ops.begin(), ops.end(), \"**\");\n  if (it != ops.end())\
    \ {\n    res = nums[it - ops.begin()] + nums[it - ops.begin() + 1];\n    nums.erase(nums.begin()\
    \ + it - ops.begin());\n    nums[it - ops.begin()] = res;\n    ops.erase(it);\n\
    \    return do_algebra(ops, nums);\n  }\n\n  it = std::find(ops.begin(), ops.end(),\
    \ \"*\");\n  if (it != ops.end()) {\n    res = nums[it - ops.begin()] * nums[it\
    \ - ops.begin() + 1];\n    nums.erase(nums.begin() + it - ops.begin());\n    nums[it\
    \ - ops.begin()] = res;\n    ops.erase(it);\n    return do_algebra(ops, nums);\n\
    \  }\n\n  it = std::find(ops.begin(), ops.end", "    std::cout << \"do_algebra:\
    \ \" << std::endl;\n    for (int i = 0; i < _operator_.size(); i++) {\n      \
    \  std::cout << _operator_[i] << \",\";\n    }\n    std::cout << std::endl;\n\
    \    for (int i = 0; i < operand.size(); i++) {\n        std::cout << operand[i]\
    \ << \",\";\n    }\n    std::cout << std::endl;\n    int cur = 0;\n    long total\
    \ = operand[cur];\n    for (int i = 0; i < _operator_.size(); i++) {\n       \
    \ std::string oper = _operator_[i];\n        cur++;\n        long next = operand[cur];\n\
    \        std::cout << \"oper = \" << oper << \", total = \" << total << \", next\
    \ = \" << next << std::endl;\n        if (oper == \"+\") {\n            total\
    \ += next;\n        } else if (oper == \"-\") {\n            total -= next;\n\
    \        } else if (oper == \"*\") {\n            total *= next;\n        } else\
    \ if (oper == \"//\") {\n            total /= next;\n        } else if (oper ==\
    \ \"**\") {\n            total = (long)pow(total, next);\n        }\n    }\n \
    \   return total;", "    long ret = operand[0];\n    for (int i = 0; i < _operator_.size();\
    \ i++) {\n        if (_operator_[i] == \"+\") {\n            ret += operand[i+1];\n\
    \        } else if (_operator_[i] == \"-\") {\n            ret -= operand[i+1];\n\
    \        } else if (_operator_[i] == \"*\") {\n            ret *= operand[i+1];\n\
    \        } else if (_operator_[i] == \"//\") {\n            ret /= operand[i+1];\n\
    \        } else if (_operator_[i] == \"**\") {\n            ret = pow(ret, operand[i+1]);\n\
    \        }\n    }\n    return ret;", "    if(operand.size() == 1)\n        return\
    \ operand[0];\n    std::stack<long> s;\n    std::string op = _operator_[0];\n\
    \    long operand1 = operand[0];\n    long operand2 = operand[1];\n    if(op ==\
    \ \"+\"){\n        operand1 += operand2;\n    }\n    else if(op == \"-\"){\n \
    \       operand1 -= operand2;\n    }\n    else if(op == \"*\"){\n        operand1\
    \ *= operand2;\n    }\n    else if(op == \"//\"){\n        operand1 /= operand2;\n\
    \    }\n    else if(op == \"**\"){\n        operand1 = (long)pow(operand1, operand2);\n\
    \    }\n    s.push(operand1);\n    for(int i = 1; i < _operator_.size(); i++){\n\
    \        op = _operator_[i];\n        operand1 = s.top();\n        s.pop();\n\
    \        operand2 = operand[i+1];\n        if(op == \"+\"){\n            operand1\
    \ += operand2;\n        }\n        else if(op == \"-\"){\n            operand1\
    \ -= operand2;\n        }\n        else if(op == \"*\"){\n            operand1\
    \ *= operand2;\n        }\n        else if(op == \"//\"){\n            operand1\
    \ /= operand2;\n        }\n        else if(op == \"**\"){\n            operand1\
    \ = (long)pow(operand1, operand2);\n        }\n        s.push(operand1);\n   \
    \ }\n    return s.top();", "  // Write your code here\n  int i;\n  for(i=0;i<_operator_.size();i++)\n\
    \  {\n      if(_operator_[i]==\"+\")\n      {\n          operand[i+1]=operand[i]+operand[i+1];\n\
    \      }\n      else if(_operator_[i]==\"-\")\n      {\n          operand[i+1]=operand[i]-operand[i+1];\n\
    \      }\n      else if(_operator_[i]==\"*\")\n      {\n          operand[i+1]=operand[i]*operand[i+1];\n\
    \      }\n      else if(_operator_[i]==\"//\")\n      {\n          operand[i+1]=operand[i]/operand[i+1];\n\
    \      }\n      else if(_operator_[i]==\"**\")\n      {\n          operand[i+1]=pow(operand[i],operand[i+1]);\n\
    \      }\n  }\n  return operand[i];", "    int n = _operator_.size();\n    //\
    \ printf(\"size = %d\\n\", n);\n    std::stack<long> s;\n    // printf(\"push\
    \ %ld\\n\", operand[0]);\n    s.push(operand[0]);\n    for (int i = 0; i < n;\
    \ i++) {\n        long a = s.top();\n        s.pop();\n        long b = operand[i\
    \ + 1];\n        // printf(\"a = %ld b = %ld\\n\", a, b);\n        if (_operator_[i]\
    \ == \"+\") {\n            s.push(a + b);\n        } else if (_operator_[i] ==\
    \ \"-\") {\n            s.push(a - b);\n        } else if (_operator_[i] == \"\
    *\") {\n            s.push(a * b);\n        } else if (_operator_[i] == \"//\"\
    ) {\n            s.push(a / b);\n        } else if (_operator_[i] == \"**\") {\n\
    \            s.push(pow(a, b));\n        }\n    }\n    return s.top();", "  assert(_operator_.size()\
    \ == operand.size() - 1);\n  for (int i = 1; i < operand.size(); i++) {\n    if\
    \ (_operator_[i - 1] == \"*\") {\n      operand[i] = operand[i - 1] * operand[i];\n\
    \    } else if (_operator_[i - 1] == \"//\") {\n      operand[i] = operand[i -\
    \ 1] / operand[i];\n    } else if (_operator_[i - 1] == \"+\") {\n      operand[i]\
    \ = operand[i - 1] + operand[i];\n    } else if (_operator_[i - 1] == \"-\") {\n\
    \      operand[i] = operand[i - 1] - operand[i];\n    } else if (_operator_[i\
    \ - 1] == \"**\") {\n      operand[i] = pow(operand[i - 1], operand[i]);\n   \
    \ }\n  }\n  return operand[operand.size() - 1];", "    // Write your code here\n\
    \    long result = operand[0];\n    for(int i = 0; i < _operator_.size(); i++){\n\
    \        if(_operator_[i] == \"+\"){\n            result += operand[i+1];\n  \
    \      }\n        else if(_operator_[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\tlong res = operand[0];\n\
    \tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\"\
    )\n\t\t\tres += operand[i + 1];\n\t\telse if (_operator_[i] == \"-\")\n\t\t\t\
    res -= operand[i + 1];\n\t\telse if (_operator_[i] == \"*\")\n\t\t\tres *= operand[i\
    \ + 1];\n\t\telse if (_operator_[i] == \"//\")\n\t\t\tres /= operand[i + 1];\n\
    \t\telse if (_operator_[i] == \"**\")\n\t\t\tres = (long)pow(res, operand[i +\
    \ 1]);\n\t}\n\treturn res;", "\tlong res = operand[0];\n\tfor (int i = 0; i <\
    \ _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tres += operand[i\
    \ + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tres -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tres *= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tres /= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tres = pow(res,\
    \ operand[i + 1]);\n\t\t}\n\t}\n\treturn res;", "\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tif (_operator_[i] == \"**\") {\n\t\t\toperand[i] = pow(operand[i],\
    \ operand[i + 1]);\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\tfor (int i = 0; i < _operator_.size(); i++)\
    \ {\n\t\tif (_operator_[i] == \"//\") {\n\t\t\toperand[i] = operand[i] / operand[i\
    \ + 1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\tfor (int i = 0; i < _operator_.size(); i++)\
    \ {\n\t\tif (_operator_[i] == \"*\") {\n\t\t\toperand[i] = operand[i] * operand[i\
    \ + 1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\tfor (int i = 0; i < _operator_.size(); i++)\
    \ {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\toperand[i] = operand[i] + operand[i\
    \ + 1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t_operator_.erase(_operator_.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\tfor (int i = 0; i < _operator_.size(); i++)\
    \ {\n\t\tif (_operator_[i] == \"-\") {\n\t\t\toperand[i] = operand[i] - operand[i\
    \ + 1];\n\t\t\toperand.erase(operand.begin() + i + 1);\n\t\t\t", "    std::vector<long>\
    \ res;\n    for(int i = 0; i < _operator_.size(); i++) {\n        std::string\
    \ op = _operator_[i];\n        if(op == \"+\") {\n            res.push_back(operand[i]\
    \ + operand[i+1]);\n        }\n        else if(op == \"-\") {\n            res.push_back(operand[i]\
    \ - operand[i+1]);\n        }\n        else if(op == \"*\") {\n            res.push_back(operand[i]\
    \ * operand[i+1]);\n        }\n        else if(op == \"//\") {\n            res.push_back(operand[i]\
    \ / operand[i+1]);\n        }\n        else if(op == \"**\") {\n            res.push_back(pow(operand[i],\
    \ operand[i+1]));\n        }\n    }\n    return res[0];", "  // write your code\
    \ here\n  long result = operand[0];\n  for(int i = 0; i < _operator_.size(); i++)\
    \ {\n    if(_operator_[i] == \"+\") {\n      result += operand[i+1];\n    }\n\
    \    else if(_operator_[i] == \"-\") {\n      result -= operand[i+1];\n    }\n\
    \    else if(_operator_[i] == \"*\") {\n      result *= operand[i+1];\n    }\n\
    \    else if(_operator_[i] == \"//\") {\n      result /= operand[i+1];\n    }\n\
    \    else if(_operator_[i] == \"**\") {\n      result = pow(result, operand[i+1]);\n\
    \    }\n  }\n  return result;", "    std::stack<long> st;\n    long res=0;\n \
    \   int n = _operator_.size();\n    for(int i=0;i<n;i++){\n        if(_operator_[i]==\"\
    +\"){\n            long k1 = st.top();\n            st.pop();\n            long\
    \ k2 = st.top();\n            st.pop();\n            st.push(k1+k2);\n       \
    \ }else if(_operator_[i]==\"-\"){\n            long k1 = st.top();\n         \
    \   st.pop();\n            long k2 = st.top();\n            st.pop();\n      \
    \      st.push(k2-k1);\n        }else if(_operator_[i]==\"*\"){\n            long\
    \ k1 = st.top();\n            st.pop();\n            long k2 = st.top();\n   \
    \         st.pop();\n            st.push(k1*k2);\n        }else if(_operator_[i]==\"\
    //\"){\n            long k1 = st.top();\n            st.pop();\n            long\
    \ k2 = st.top();\n            st.pop();\n            st.push(k2/k1);\n       \
    \ }else if(_operator_[i]==\"**\"){\n            long k1 = st.top();\n        \
    \    st.pop();\n            long k2 = st.top();\n            st.pop();\n     \
    \       long tmp = 1;\n            for(int j=0;j<k1;j++){\n                tmp*=k2;\n\
    \            }\n            st.push(tmp);\n        }else{\n            st.push(operand[i]);\n\
    \        }\n    }\n    assert(st.size()==1);\n    return st.top();", "  assert(_operator_.size()\
    \ == operand.size() - 1);\n  for (int i = 0; i < _operator_.size(); i++) {\n \
    \   if (_operator_[i] == \"//\") {\n      operand[i] = operand[i] / operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"**\") {\n      operand[i] = pow(operand[i], operand[i\
    \ + 1]);\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"*\") {\n      operand[i] = operand[i] * operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"+\") {\n      operand[i] = operand[i] + operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  for (int i = 0; i < _operator_.size(); i++)\
    \ {\n    if (_operator_[i] == \"-\") {\n      operand[i] = operand[i] - operand[i\
    \ + 1];\n      operand.erase(operand.begin() + i + 1);\n      _operator_.erase(_operator_.begin()\
    \ + i);\n      i--;\n    }\n  }\n  return operand[", "    stack<long> operands;\n\
    \    stack<string> operators;\n    int size = operand.size();\n    if(size ==\
    \ 0)\n        return 0;\n    operands.push(operand[0]);\n    for(int i = 1; i\
    \ < size; i++){\n        operands.push(operand[i]);\n        operators.push(_operator_[i-1]);\n\
    \        while(operators.size() != 0 && operands.size() >= 2){\n            long\
    \ second = operands.top();\n            operands.pop();\n            long first\
    \ = operands.top();\n            operands.pop();\n            string op = operators.top();\n\
    \            operators.pop();\n            if(op == \"+\")\n                operands.push(first\
    \ + second);\n            else if(op == \"-\")\n                operands.push(first\
    \ - second);\n            else if(op == \"*\")\n                operands.push(first\
    \ * second);\n            else if(op == \"//\")\n                operands.push(first\
    \ / second);\n            else if(op == \"**\")\n                operands.push(pow(first,\
    \ second));\n        }\n    }\n    return operands.top();", "    assert(_operator_.size()\
    \ == operand.size() - 1);\n    for (int i = 0; i < _operator_.size(); i++) {\n\
    \        if (_operator_[i] == \"*\") {\n            operand[i + 1] = operand[i]\
    \ * operand[i + 1];\n            operand[i] = 0;\n        }\n        else if (_operator_[i]\
    \ == \"/\") {\n            operand[i + 1] = operand[i] / operand[i + 1];\n   \
    \         operand[i] = 0;\n        }\n        else if (_operator_[i] == \"+\"\
    ) {\n            operand[i + 1] = operand[i] + operand[i + 1];\n            operand[i]\
    \ = 0;\n        }\n        else if (_operator_[i] == \"-\") {\n            operand[i\
    \ + 1] = operand[i] - operand[i + 1];\n            operand[i] = 0;\n        }\n\
    \        else if (_operator_[i] == \"^\") {\n            operand[i + 1] = pow(operand[i],\
    \ operand[i + 1]);\n            operand[i] = 0;\n        }\n    }\n    long ans\
    \ = 0;\n    for (int i = 0; i < operand.size(); i++) {\n        ans += operand[i];\n\
    \    }\n    return ans;", "  // Write your code here\n  // return answer;\n  std::stack<long>\
    \ store;\n  for(int i = 0; i < _operator_.size(); i++){\n    if(_operator_[i]\
    \ == \"+\"){\n      long add = store.top();\n      store.pop();\n      add +=\
    \ operand[i+1];\n      store.push(add);\n    }\n    else if(_operator_[i] == \"\
    -\"){\n      long sub = store.top();\n      store.pop();\n      sub -= operand[i+1];\n\
    \      store.push(sub);\n    }\n    else if(_operator_[i] == \"*\"){\n      long\
    \ mul = store.top();\n      store.pop();\n      mul *= operand[i+1];\n      store.push(mul);\n\
    \    }\n    else if(_operator_[i] == \"//\"){\n      long div = store.top();\n\
    \      store.pop();\n      div /= operand[i+1];\n      store.push(div);\n    }\n\
    \    else if(_operator_[i] == \"**\"){\n      long pow = store.top();\n      store.pop();\n\
    \      pow = pow ^ operand[i+1];\n      store.push(pow);\n    }\n  }\n  return\
    \ store.top();", "    // Write your code here\n    stack<long> op;\n    for(int\
    \ i=0;i<_operator_.size();i++){\n        if(_operator_[i]==\"+\"){\n         \
    \   long a=op.top();op.pop();\n            long b=op.top();op.pop();\n       \
    \     op.push(a+b);\n        }\n        else if(_operator_[i]==\"-\"){\n     \
    \       long a=op.top();op.pop();\n            long b=op.top();op.pop();\n   \
    \         op.push(b-a);\n        }\n        else if(_operator_[i]==\"*\"){\n \
    \           long a=op.top();op.pop();\n            long b=op.top();op.pop();\n\
    \            op.push(a*b);\n        }\n        else if(_operator_[i]==\"//\"){\n\
    \            long a=op.top();op.pop();\n            long b=op.top();op.pop();\n\
    \            op.push(b/a);\n        }\n        else if(_operator_[i]==\"**\"){\n\
    \            long a=op.top();op.pop();\n            long b=op.top();op.pop();\n\
    \            op.push(pow(b,a));\n        }\n        else {\n            long a=op.top();op.pop();\n\
    \            long b=op.top();op.pop();\n            op.push(b%a);\n        }\n\
    \    }\n    return op.top();", "    long result = operand[0];\n    for(int i =\
    \ 0; i < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\") {\n   \
    \         result += operand[i+1];\n        } else if(_operator_[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        } else if(_operator_[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        } else if(_operator_[i] == \"\
    //\") {\n            result /= operand[i+1];\n        } else if(_operator_[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "  //if(_operator_.size() > 0 && operand.size()>1)\n\
    \  std::stack<int> ss;\n  long x,y;\n  for(int i=0;i<_operator_.size();i++)\n\
    \  {\n      if(_operator_[i]==\"+\")\n      {\n          x=ss.top();\n       \
    \   ss.pop();\n          y=ss.top();\n          ss.pop();\n          ss.push(x+y);\n\
    \      }\n      else if(_operator_[i]==\"-\")\n      {\n          x=ss.top();\n\
    \          ss.pop();\n          y=ss.top();\n          ss.pop();\n          ss.push(y-x);\n\
    \      }\n      else if(_operator_[i]==\"*\")\n      {\n          x=ss.top();\n\
    \          ss.pop();\n          y=ss.top();\n          ss.pop();\n          ss.push(x*y);\n\
    \      }\n      else if(_operator_[i]==\"//\")\n      {\n          x=ss.top();\n\
    \          ss.pop();\n          y=ss.top();\n          ss.pop();\n          ss.push(y/x);\n\
    \      }\n      else if(_operator_[i]==\"**\")\n      {\n          x=ss.top();\n\
    \          ss.pop();\n          y=ss.top();\n          ss.pop();\n          ss.push(pow(y,x));\n\
    \      }\n      else\n      {\n          ss.push(operand[i]);\n      }\n  }\n\
    \  return ss.top();", "  assert(_operator_.size()+1 == operand.size());\n  long\
    \ result = operand[0];\n  // now iterate through the operators and operands and\
    \ calculate the result\n  for(long i = 0; i < _operator_.size(); i++) {\n    if\
    \ (_operator_[i] == \"+\") {\n      result += operand[i+1];\n    } else if (_operator_[i]\
    \ == \"-\") {\n      result -= operand[i+1];\n    } else if (_operator_[i] ==\
    \ \"*\") {\n      result *= operand[i+1];\n    } else if (_operator_[i] == \"\
    //\") {\n      result /= operand[i+1];\n    } else if (_operator_[i] == \"**\"\
    ) {\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;",
  "\tlong result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\
    \tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\t\
    else if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\
    \telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\
    \t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i\
    \ + 1]);\n\t\t}\n\t}\n\treturn result;", "  long result = operand[0];\n  for (int\
    \ i = 0; i < _operator_.size(); i++) {\n    switch (_operator_[i][0]) {\n    \
    \  case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n\
    \        result -= operand[i + 1];\n        break;\n      case '*':\n        result\
    \ *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i\
    \ + 1];\n        break;\n      case '^':\n        result = pow(result, operand[i\
    \ + 1]);\n        break;\n      default:\n        assert(0);\n    }\n  }\n  return\
    \ result;", "    long res = operand[0];\n    for(long i = 0; i < _operator_.size();\
    \ i++) {\n        if(_operator_[i] == \"+\") {\n            res += operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"-\") {\n            res -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\") {\n            res *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"**\") {\n            res = pow(res,\
    \ operand[i+1]);\n        }\n    }\n    return res;", "    long ans = operand[0];\n\
    \    for(int i = 0; i < _operator_.size(); i++) {\n        switch(_operator_[i][0])\
    \ {\n            case '+': ans += operand[i+1]; break;\n            case '-':\
    \ ans -= operand[i+1]; break;\n            case '*': ans *= operand[i+1]; break;\n\
    \            case '/': ans /= operand[i+1]; break;\n            case '^': ans\
    \ = pow(ans, operand[i+1]); break;\n        }\n    }\n    return ans;", "    long\
    \ result = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n   \
    \     if(_operator_[i] == \"+\") {\n            result += operand[i+1];\n    \
    \    }\n        else if(_operator_[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\") {\n            result /=\
    \ operand[i+1];\n        }\n        else if(_operator_[i] == \"**\") {\n     \
    \       result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "\tassert(!_operator_.empty());\n\tassert(operand.size() > 1);\n\tstd::stack<long>\
    \ numbers;\n\tnumbers.push(operand[0]);\n\tfor (int i = 0; i < _operator_.size();\
    \ i++) {\n\t\tswitch (_operator_[i][0]) {\n\t\tcase '+':\n\t\t\tnumbers.push(operand[i\
    \ + 1]);\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tnumbers.push(-operand[i + 1]);\n\t\
    \t\tbreak;\n\t\tcase '*':\n\t\t\tnumbers.top() *= operand[i + 1];\n\t\t\tbreak;\n\
    \t\tcase '/':\n\t\t\tnumbers.top() /= operand[i + 1];\n\t\t\tbreak;\n\t\tcase\
    \ '^':\n\t\t\tnumbers.top() = pow(numbers.top(), operand[i + 1]);\n\t\t\tbreak;\n\
    \t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (!numbers.empty())\
    \ {\n\t\tsum += numbers.top();\n\t\tnumbers.pop();\n\t}\n\treturn sum;", "   \
    \ // Write your code here\n    return 0;", "  long ret = operand[0];\n  for (int\
    \ i = 0; i < _operator_.size(); i++) {\n    std::string operator_ = _operator_[i];\n\
    \    long b = operand[i + 1];\n    if (operator_ == \"+\") {\n      ret += b;\n\
    \    } else if (operator_ == \"-\") {\n      ret -= b;\n    } else if (operator_\
    \ == \"*\") {\n      ret *= b;\n    } else if (operator_ == \"//\") {\n      ret\
    \ /= b;\n    } else if (operator_ == \"**\") {\n      ret = std::pow(ret, b);\n\
    \    }\n  }\n  return ret;", "    // Write your code here\n    int i,j;\n    for(i=0;i<_operator_.size();i++)\n\
    \    {\n        if(_operator_[i]==\"//\")\n        {\n            operand[i]=(long)operand[i]/(long)operand[i+1];\n\
    \            for(j=i+1;j<operand.size()-1;j++)\n            {\n              \
    \  operand[j]=operand[j+1];\n            }\n            operand.erase(operand.begin()+j);\n\
    \            for(j=i;j<_operator_.size()-1;j++)\n            {\n             \
    \   _operator_[j]=_operator_[j+1];\n            }\n            _operator_.erase(_operator_.begin()+j);\n\
    \            i--;\n        }\n        else if(_operator_[i]==\"**\")\n       \
    \ {\n            operand[i]=pow(operand[i],operand[i+1]);\n            for(j=i+1;j<operand.size()-1;j++)\n\
    \            {\n                operand[j]=operand[j+1];\n            }\n    \
    \        operand.erase(operand.begin()+j);\n            for(j=i;j<_operator_.size()-1;j++)\n\
    \            {\n                _operator_[j]=_operator_[j+1];\n            }\n\
    \            _operator_.erase(_operator_.begin()+j);\n            i--;\n     \
    \   }\n    }\n    for(i=0;i<_operator_.size();i++)\n    {\n        if(_operator_[i]==\"\
    *\")\n        {\n            operand[i]*=operand[i+1];\n            for(j=i+1;j<operand.size()-1;j++)\n\
    \            {\n                operand[j]=operand[j+1];\n            }\n    \
    \        operand.erase(operand.begin()+j);\n            for(j=i;j<_operator_.size()-1;j++)\n\
    \            {\n                _operator_[j]=_operator_[j+1];", "  long sum =\
    \ operand[0];\n  for(int i = 0; i < _operator_.size(); i++) {\n    if(_operator_[i]\
    \ == \"+\") {\n      sum += operand[i+1];\n    } else if(_operator_[i] == \"-\"\
    ) {\n      sum -= operand[i+1];\n    } else if(_operator_[i] == \"*\") {\n   \
    \   sum *= operand[i+1];\n    } else if(_operator_[i] == \"//\") {\n      sum\
    \ /= operand[i+1];\n    } else if(_operator_[i] == \"**\") {\n      sum = pow(sum,\
    \ operand[i+1]);\n    }\n  }\n  return sum;", "  // Write your code here.\n  assert(_operator_.size()+1\
    \ == operand.size());\n  for(int i=1;i<operand.size();i++){\n    if(_operator_[i-1]\
    \ == \"**\"){\n      operand[i] = pow(operand[i-1],operand[i]);\n      operand.erase(operand.begin()\
    \ + i-1);\n      _operator_.erase(_operator_.begin() + i-1);\n      i--;\n   \
    \ }\n  }\n  for(int i=1;i<operand.size();i++){\n    if(_operator_[i-1] == \"*\"\
    ){\n      operand[i] = operand[i-1] * operand[i];\n      operand.erase(operand.begin()\
    \ + i-1);\n      _operator_.erase(_operator_.begin() + i-1);\n      i--;\n   \
    \ }\n    else if(_operator_[i-1] == \"//\"){\n      operand[i] = operand[i-1]\
    \ / operand[i];\n      operand.erase(operand.begin() + i-1);\n      _operator_.erase(_operator_.begin()\
    \ + i-1);\n      i--;\n    }\n  }\n  for(int i=1;i<operand.size();i++){\n    if(_operator_[i-1]\
    \ == \"+\"){\n      operand[i] = operand[i-1] + operand[i];\n      operand.erase(operand.begin()\
    \ + i-1);\n      _operator_.erase(_operator_.begin() + i-1);\n      i--;\n   \
    \ }\n    else if(_operator_[i-1] == \"-\"){\n      operand[i] = operand[i-1] -\
    \ operand[i];\n      operand.erase(operand.begin() + i-1);\n      _operator_.erase(_operator_.begin()\
    \ + i-1);\n      i--;\n    }\n  }\n  return operand[0];", "  auto m = _operator_.size();\n\
    \  long result = operand[0];\n  for (int i = 0; i < m; i++) {\n    if (_operator_[i]\
    \ == \"+\") {\n      result += operand[i + 1];\n    } else if (_operator_[i] ==\
    \ \"-\") {\n      result -= operand[i + 1];\n    } else if (_operator_[i] == \"\
    *\") {\n      result *= operand[i + 1];\n    } else if (_operator_[i] == \"//\"\
    ) {\n      result /= operand[i + 1];\n    } else if (_operator_[i] == \"**\")\
    \ {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
  "  long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n\
    \    if (_operator_[i] == \"+\") {\n      result += operand[i + 1];\n    } else\
    \ if (_operator_[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if\
    \ (_operator_[i] == \"*\") {\n      result *= operand[i + 1];\n    } else if (_operator_[i]\
    \ == \"//\") {\n      result /= operand[i + 1];\n    } else if (_operator_[i]\
    \ == \"**\") {\n      result = std::pow(result, operand[i + 1]);\n    }\n  }\n\
    \  return result;", "\tlong len = operand.size();\n\tlong ans = operand[0];\n\t\
    for (long i = 1; i < len; i++) {\n\t\tif (_operator_[i - 1] == \"+\")\n\t\t\t\
    ans += operand[i];\n\t\telse if (_operator_[i - 1] == \"-\")\n\t\t\tans -= operand[i];\n\
    \t\telse if (_operator_[i - 1] == \"*\")\n\t\t\tans *= operand[i];\n\t\telse if\
    \ (_operator_[i - 1] == \"//\")\n\t\t\tans /= operand[i];\n\t\telse if (_operator_[i\
    \ - 1] == \"**\")\n\t\t\tans = pow(ans, operand[i]);\n\t}\n\treturn ans;", " \
    \  long result = operand[0];\n   for (int i = 0; i < _operator_.size(); i++) {\n\
    \      switch (_operator_[i][0]) {\n         case '+':\n            result +=\
    \ operand[i + 1];\n            break;\n         case '-':\n            result\
    \ -= operand[i + 1];\n            break;\n         case '*':\n            result\
    \ *= operand[i + 1];\n            break;\n         case '/':\n            result\
    \ /= operand[i + 1];\n            break;\n         case '%':\n            result\
    \ %= operand[i + 1];\n            break;\n         case '^':\n            result\
    \ = pow(result, operand[i + 1]);\n            break;\n         default:\n    \
    \        break;\n      }\n   }\n   return result;", "    assert(_operator_.size()\
    \ + 1 == operand.size());\n    std::stack<long> st;\n    st.push(operand[0]);\n\
    \    for (int i = 0; i < _operator_.size(); i++) {\n        long num1 = st.top();\n\
    \        st.pop();\n        long num2 = operand[i + 1];\n        if (_operator_[i]\
    \ == \"+\")\n            st.push(num1 + num2);\n        else if (_operator_[i]\
    \ == \"-\")\n            st.push(num1 - num2);\n        else if (_operator_[i]\
    \ == \"*\")\n            st.push(num1 * num2);\n        else if (_operator_[i]\
    \ == \"//\")\n            st.push(num1 / num2);\n        else if (_operator_[i]\
    \ == \"**\")\n            st.push(pow(num1, num2));\n    }\n    return st.top();",
  "\tlong result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\
    \tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\t\
    else if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\
    \telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\
    \t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i\
    \ + 1]);\n\t\t}\n\t}\n\treturn result;", "    // Write your code here\n    long\
    \ i, result = operand[0];\n    for(i = 0; i < _operator_.size(); i++) {\n    \
    \    if(_operator_[i] == \"+\") {\n            result += operand[i+1];\n     \
    \   }\n        else if(_operator_[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(_operator_[i] == \"//\") {\n            result /=\
    \ operand[i+1];\n        }\n        else if(_operator_[i] == \"**\") {\n     \
    \       result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    assert(_operator_.size() == operand.size() - 1);\n    long res = operand[0];\n\
    \    for (int i = 0; i < _operator_.size(); i++) {\n        if (_operator_[i]\
    \ == \"+\") {\n            res += operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"-\") {\n            res -= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"*\") {\n            res *= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"//\") {\n            res /= operand[i + 1];\n        } else if (_operator_[i]\
    \ == \"**\") {\n            res = pow(res, operand[i + 1]);\n        }\n    }\n\
    \    return res;", "    // Remove the operator at the end, since we don't need\
    \ that to build the expression.\n    _operator_.pop_back();\n    // The stack\
    \ where we store our operands.\n    std::stack<long> st;\n    for (size_t i =\
    \ 0; i < operand.size(); i++) {\n        // Initially, we have the operands on\
    \ the stack.\n        st.push(operand[i]);\n        // If there is an operation\
    \ before the operand, then we do the operation and push\n        // the result\
    \ to the stack.\n        if (i < _operator_.size()) {\n            std::string\
    \ op = _operator_[i];\n            long num1 = st.top();\n            st.pop();\n\
    \            long num2 = st.top();\n            st.pop();\n            if (op\
    \ == \"+\") {\n                st.push(num1 + num2);\n            } else if (op\
    \ == \"-\") {\n                st.push(num1 - num2);\n            } else if (op\
    \ == \"*\") {\n                st.push(num1 * num2);\n            } else if (op\
    \ == \"//\") {\n                st.push(num1 / num2);\n            } else if (op\
    \ == \"**\") {\n                st.push(std::pow(num1, num2));\n            }\n\
    \        }\n    }\n    return st.top();", "\t// Write your code here\n\tlong result\
    \ = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ result;", "  // use a stack\n  std::stack<long> s;\n  s.push(operand[0]);\n\
    \  int j = 0;\n  for(int i = 1; i < operand.size(); i++) {\n    long num1 = s.top();\n\
    \    s.pop();\n    long num2 = operand[i];\n    if(_operator_[j] == \"+\") {\n\
    \      s.push(num1 + num2);\n    } else if(_operator_[j] == \"-\") {\n      s.push(num1\
    \ - num2);\n    } else if(_operator_[j] == \"*\") {\n      s.push(num1 * num2);\n\
    \    } else if(_operator_[j] == \"//\") {\n      s.push(num1 / num2);\n    } else\
    \ if(_operator_[j] == \"**\") {\n      s.push(pow(num1, num2));\n    }\n    j++;\n\
    \  }\n  return s.top();", "    if (_operator_.size() == 0) return 0;\n    char\
    \ op = _operator_[0][0];\n    long num = operand[0];\n    operand.erase(operand.begin());\n\
    \    switch (op) {\n        case '+': {\n            num += do_algebra(_operator_,\
    \ operand);\n            break;\n        }\n        case '-': {\n            num\
    \ -= do_algebra(_operator_, operand);\n            break;\n        }\n       \
    \ case '*': {\n            num *= do_algebra(_operator_, operand);\n         \
    \   break;\n        }\n        case '/': {\n            num /= do_algebra(_operator_,\
    \ operand);\n            break;\n        }\n        case '^': {\n            num\
    \ = pow(num, do_algebra(_operator_, operand));\n            break;\n        }\n\
    \    }\n    return num;", "\t// using stack to store value.\n\tstd::stack<long>\
    \ st;\n\t// using queue to store operator.\n\tstd::queue<std::string> q;\n\tfor\
    \ (int i = 0; i < _operator_.size(); i++) {\n\t\tq.push(_operator_[i]);\n\t}\n\
    \t// init first operand\n\tlong temp = operand[0];\n\tfor (int i = 1; i < operand.size();\
    \ i++) {\n\t\tstd::string str = q.front();\n\t\tq.pop();\n\t\tif (str == \"+\"\
    ) {\n\t\t\ttemp += operand[i];\n\t\t}\n\t\telse if (str == \"-\") {\n\t\t\ttemp\
    \ -= operand[i];\n\t\t}\n\t\telse if (str == \"*\") {\n\t\t\ttemp *= operand[i];\n\
    \t\t}\n\t\telse if (str == \"//\") {\n\t\t\ttemp /= operand[i];\n\t\t}\n\t\telse\
    \ if (str == \"**\") {\n\t\t\ttemp = pow(temp, operand[i]);\n\t\t}\n\t}\n\treturn\
    \ temp;", "    std::stack<long> stack;\n    stack.push(operand[0]);\n    for(int\
    \ i = 0; i < _operator_.size(); i++) {\n        char op = _operator_[i][0];\n\
    \        long rhs = operand[i+1];\n        long lhs = stack.top();\n        stack.pop();\n\
    \        if(op == '+')\n            stack.push(lhs + rhs);\n        else if(op\
    \ == '-')\n            stack.push(lhs - rhs);\n        else if(op == '*')\n  \
    \          stack.push(lhs * rhs);\n        else if(op == '/')\n            stack.push(lhs\
    \ / rhs);\n        else if(op == '^')\n            stack.push(pow(lhs, rhs));\n\
    \    }\n    return stack.top();", "    // Parse the operator list and use switch\
    \ statement to call operator functions.\n    // Start from the end of the operator\
    \ list.\n    for (int i = _operator_.size() - 1; i >= 0; i--) {\n        switch\
    \ (_operator_[i]) {\n            case \"+\":\n                operand[i] = operand[i]\
    \ + operand[i + 1];\n                operand.erase(operand.begin() + i + 1);\n\
    \                break;\n            case \"-\":\n                operand[i] =\
    \ operand[i] - operand[i + 1];\n                operand.erase(operand.begin()\
    \ + i + 1);\n                break;\n            case \"*\":\n               \
    \ operand[i] = operand[i] * operand[i + 1];\n                operand.erase(operand.begin()\
    \ + i + 1);\n                break;\n            case \"//\":\n              \
    \  operand[i] = operand[i] / operand[i + 1];\n                operand.erase(operand.begin()\
    \ + i + 1);\n                break;\n            case \"**\":\n              \
    \  operand[i] = pow(operand[i], operand[i + 1]);\n                operand.erase(operand.begin()\
    \ + i + 1);\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return operand[0];", "    // +-* are associative, / and\
    \ ** are right associative.\n    // (a+b)+c=a+(b+c)\n    // (a*b)*c=a*(b*c)\n\
    \    // a+(b*c)=(a+b)*(a+c)\n    // a*(b+c)=(a*b)+(a*c)\n    // a**b**c=a**(b**c)\n\
    \    // a//b//c=a//(b//c)\n    // a**(b//c)=(a**b)//(a**c)\n    // a//(b**c)=(a//b)**(a//c)\n\
    \    // a//b**c=a//(b**c)\n    // a**b//c=a**(b//c)\n    long i=0;\n    while(i<_operator_.size()){\n\
    \        if(_operator_[i]==\"**\"){\n            operand[i+1]=pow(operand[i],operand[i+1]);\n\
    \            operand.erase(operand.begin()+i);\n            _operator_.erase(_operator_.begin()+i);\n\
    \        }\n        else if(_operator_[i]==\"//\"){\n            operand[i+1]=floor(pow(operand[i],1/operand[i+1]));\n\
    \            operand.erase(operand.begin()+i);\n            _operator_.erase(_operator_.begin()+i);\n\
    \        }\n        else i++;\n    }\n    i=0;\n    while(i<_operator_.size()){\n\
    \        if(_operator_[i]==\"*\"){\n            operand[i+1]*=operand[i];\n  \
    \          operand.erase(operand.begin()+i);\n            _operator_.erase(_operator_.begin()+i);\n\
    \        }\n        else if(_operator_[i]==\"/\"){\n            operand[i+1]=floor(operand[i]/operand[i+1]);\n\
    \            operand.erase(operand.begin()+i);\n            _operator_.er", " \
    \   int result = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n\
    \        int next_operand = operand[i+1];\n        std::string op = _operator_[i];\n\
    \        if(op == \"+\") result += next_operand;\n        else if(op == \"-\"\
    ) result -= next_operand;\n        else if(op == \"*\") result *= next_operand;\n\
    \        else if(op == \"//\") result /= next_operand;\n        else if(op ==\
    \ \"**\") result = pow(result, next_operand);\n    }\n    return result;", " \
    \ long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n\
    \    switch (_operator_[i][0]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '/':\n        result /= operand[i + 1];\n        break;\n      case\
    \ '^':\n        result = pow(result, operand[i + 1]);\n        break;\n      default:\n\
    \        assert(false);\n    }\n  }\n  return result;", "  // Implement your solution\
    \ below.\n  //NOTE: array[] is already implemented. DO NOT MODIFY!\n  long result\
    \ = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i]\
    \ == \"+\") {\n      result += operand[i + 1];\n    } else if (_operator_[i] ==\
    \ \"-\") {\n      result -= operand[i + 1];\n    } else if (_operator_[i] == \"\
    *\") {\n      result *= operand[i + 1];\n    } else if (_operator_[i] == \"//\"\
    ) {\n      result /= operand[i + 1];\n    } else if (_operator_[i] == \"**\")\
    \ {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
  "\tlong result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\
    \tstd::string op = _operator_[i];\n\t\tif (op == \"+\") {\n\t\t\tresult += operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\
    \t\t}\n\t\telse if (op == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\
    \telse if (op == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if\
    \ (op == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\t\
    return result;", "    // Write your code here\n    std::stack<long> stk;\n   \
    \ for(size_t i = 0; i < _operator_.size(); ++i) {\n        if(_operator_[i] ==\
    \ \"+\") {\n            long b = stk.top();\n            stk.pop();\n        \
    \    long a = stk.top();\n            stk.pop();\n            stk.push(a + b);\n\
    \        } else if(_operator_[i] == \"-\") {\n            long b = stk.top();\n\
    \            stk.pop();\n            long a = stk.top();\n            stk.pop();\n\
    \            stk.push(a - b);\n        } else if(_operator_[i] == \"*\") {\n \
    \           long b = stk.top();\n            stk.pop();\n            long a =\
    \ stk.top();\n            stk.pop();\n            stk.push(a * b);\n        }\
    \ else if(_operator_[i] == \"//\") {\n            long b = stk.top();\n      \
    \      stk.pop();\n            long a = stk.top();\n            stk.pop();\n \
    \           stk.push(a / b);\n        } else if(_operator_[i] == \"**\") {\n \
    \           long b = stk.top();\n            stk.pop();\n            long a =\
    \ stk.top();\n            stk.pop();\n            stk.push(std::pow(a, b));\n\
    \        } else {\n            assert(false);\n        }\n    }\n    return stk.top();",
  "  long res = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n   \
    \ if (_operator_[i] == \"+\") {\n      res += operand[i + 1];\n    } else if (_operator_[i]\
    \ == \"-\") {\n      res -= operand[i + 1];\n    } else if (_operator_[i] == \"\
    *\") {\n      res *= operand[i + 1];\n    } else if (_operator_[i] == \"//\")\
    \ {\n      res /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n\
    \      res = std::pow(res, operand[i + 1]);\n    }\n  }\n  return res;", "\tlong\
    \ ret = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i]\
    \ == \"+\") {\n\t\t\tret += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"-\") {\n\t\t\tret -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"*\") {\n\t\t\tret *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"//\") {\n\t\t\tret /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i]\
    \ == \"**\") {\n\t\t\tret = pow(ret, operand[i + 1]);\n\t\t}\n\t}\n\treturn ret;",
  "  // Write your code here\n  return 0;", "    /*Implement a function that, given\
    \ two lists operator, and operand. \n    The first list has basic algebra operations,\
    \ and the second list is a list of integers. \n    Use the two given lists to\
    \ build the algebric expression and return the evaluation of this expression.\
    \ \n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction (\
    \ - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation\
    \ ( ** ) \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n\
    \    result = 2 + 3 * 4 - 5\n    => result = 9\n    Note:\n    The length of operator\
    \ list is equal to the length of operand list minus one.\n    Operand is a list\
    \ of of non-negative integers.\n    Operator list has at least one operator, and\
    \ operand list has at least two operands. \n    */\n    long ans = 0;\n    auto\
    \ it = operand.begin();\n    if (_operator_.empty()) {\n        return 0;\n  \
    \  }\n    ans = *it;\n    ++it;\n    for (auto op : _operator_) {\n        auto\
    \ v = *it;\n        ++it;\n        if (op == \"+\") {\n            ans += v;\n\
    \        } else if (op == \"-\") {\n            ans -= v;\n        } else if (op\
    \ == \"*\") {\n            ans *= v;\n        } else if (op == \"//\") {\n   \
    \         ans /= v;\n        } else if (op == \"**\") {\n            ans = pow(ans,\
    \ v);\n        }\n    }\n    return ans;", "    long result = operand[0];\n  \
    \  for(long i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] ==\
    \ \"+\") {\n            result += operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long res = operand[0];\n    for(int i = 0; i\
    \ < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\")\n          \
    \  res += operand[i+1];\n        else if(_operator_[i] == \"-\")\n           \
    \ res -= operand[i+1];\n        else if(_operator_[i] == \"*\")\n            res\
    \ *= operand[i+1];\n        else if(_operator_[i] == \"//\")\n            res\
    \ /= operand[i+1];\n        else if(_operator_[i] == \"**\")\n            res\
    \ = pow(res, operand[i+1]);\n    }\n    return res;", "  long ans = operand[0];\n\
    \  for(int i = 0; i < _operator_.size(); i++) {\n    if(_operator_[i] == \"+\"\
    ) {\n      ans += operand[i+1];\n    } else if(_operator_[i] == \"-\") {\n   \
    \   ans -= operand[i+1];\n    } else if(_operator_[i] == \"*\") {\n      ans *=\
    \ operand[i+1];\n    } else if(_operator_[i] == \"//\") {\n      ans /= operand[i+1];\n\
    \    } else if(_operator_[i] == \"**\") {\n      ans = (long) pow(ans, operand[i+1]);\n\
    \    }\n  }\n  return ans;", "    long total = operand[0];\n    for(int i = 0;\
    \ i < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\") {\n      \
    \      total += operand[i+1];\n        }\n        else if(_operator_[i] == \"\
    -\") {\n            total -= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"*\") {\n            total *= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"//\") {\n            total /= operand[i+1];\n        }\n        else if(_operator_[i]\
    \ == \"**\") {\n            total = std::pow(total, operand[i+1]);\n        }\n\
    \    }\n    return total;", "  long ans = operand[0];\n  for(int i = 0; i < _operator_.size();\
    \ i++) {\n    if(_operator_[i] == \"+\") {\n      ans += operand[i+1];\n    }\n\
    \    else if(_operator_[i] == \"-\") {\n      ans -= operand[i+1];\n    }\n  \
    \  else if(_operator_[i] == \"*\") {\n      ans *= operand[i+1];\n    }\n    else\
    \ if(_operator_[i] == \"//\") {\n      ans /= operand[i+1];\n    }\n    else if(_operator_[i]\
    \ == \"**\") {\n      ans = pow(ans, operand[i+1]);\n    }\n  }\n  return ans;",
  "\treturn 0;", "  long num;\n  std::stack<long> st;\n  for(int i = 0; i < _operator_.size();\
    \ i++) {\n    if(_operator_[i] == \"+\") {\n      num = st.top();\n      st.pop();\n\
    \      num += operand[i+1];\n      st.push(num);\n    }\n    else if(_operator_[i]\
    \ == \"-\") {\n      num = st.top();\n      st.pop();\n      num -= operand[i+1];\n\
    \      st.push(num);\n    }\n    else if(_operator_[i] == \"*\") {\n      num\
    \ = st.top();\n      st.pop();\n      num *= operand[i+1];\n      st.push(num);\n\
    \    }\n    else if(_operator_[i] == \"//\") {\n      num = st.top();\n      st.pop();\n\
    \      num /= operand[i+1];\n      st.push(num);\n    }\n    else if(_operator_[i]\
    \ == \"**\") {\n      num = st.top();\n      st.pop();\n      num = pow(num, operand[i+1]);\n\
    \      st.push(num);\n    }\n  }\n  return st.top();", "    int i;\n    stack<int>\
    \ st;\n    st.push(operand[0]);\n    for(i=0;i<_operator_.size();i++){\n     \
    \   if(_operator_[i]==\"+\")\n            st.push(operand[i+1]);\n        else\
    \ if(_operator_[i]==\"-\")\n            st.push(-operand[i+1]);\n        else\
    \ if(_operator_[i]==\"*\")\n            st.top() *= operand[i+1];\n        else\
    \ if(_operator_[i]==\"//\")\n            st.top() /= operand[i+1];\n        else\
    \ if(_operator_[i]==\"**\")\n            st.top() = pow(st.top(),operand[i+1]);\n\
    \    }\n    long ans = 0;\n    while(!st.empty()){\n        ans += st.top();\n\
    \        st.pop();\n    }\n    return ans;"]
stop_tokens:
- "\n}"
