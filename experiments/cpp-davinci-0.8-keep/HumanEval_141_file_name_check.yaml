name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  std::string file_name_check(std::string file_name) {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["    int found = 0;\n    std::string extension = \"\";\n    bool extension_valid\
    \ = false;\n    std::string file_name_without_extension = \"\";\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            found++;\n            for (int j = i + 1; j < file_name.length();\
    \ j++) {\n                extension += file_name[j];\n            }\n        \
    \    if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                extension_valid = true;\n            }\n            break;\n\
    \        }\n        file_name_without_extension += file_name[i];\n    }\n    if\
    \ (found != 1) {\n        return \"No\";\n    }\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name_without_extension.length(); i++) {\n        if ((file_name_without_extension[i]\
    \ >= 'a' && file_name_without_extension[i] <= 'z') ||\n            (file_name_without_extension[i]\
    \ >= 'A' && file_name_without_extension[i] <= 'Z')) {\n            break;\n  \
    \      }\n        if (file_name_without_extension[i] >= '0' && file_name_without_extension[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (extension_valid == false) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    int count = 0;\n    int c = 0;\n\
    \    std::string part1;\n    std::string part2;\n    int index;\n    int n = file_name.length();\n\
    \    int i;\n    for(i = 0; i < n; i++) {\n        if(file_name[i] == '.') {\n\
    \            count++;\n            index = i;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n            c++;\n    }\n    if(c > 3) {\n \
    \       return \"No\";\n    }\n    if(count != 1) {\n        return \"No\";\n\
    \    }\n    for(i = 0; i < index; i++) {\n        part1 += file_name[i];\n   \
    \ }\n    for(i = index+1; i < n; i++) {\n        part2 += file_name[i];\n    }\n\
    \    if(part1.length() == 0) {\n        return \"No\";\n    }\n    if(part1[0]\
    \ >= 'a' && part1[0] <= 'z') {\n        if(part2 == \"txt\" || part2 == \"exe\"\
    \ || part2 == \"dll\") {\n            return \"Yes\";\n        }\n        else\
    \ {\n            return \"No\";\n        }\n    }\n    else if(part1[0] >= 'A'\
    \ && part1[0] <= 'Z') {\n        if(part2 == \"txt\" || part2 == \"exe\" || part2\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n        else {\n    \
    \        return \"No\";\n        }\n    }\n    else {\n        return \"No\";\n\
    \    }", "\tint i, len = file_name.length(), len1 = 0, len2 = 0, digit_count =\
    \ 0;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n\t\t\tdigit_count++;\n\t\tif (file_name[i] == '.')\n\t\t\tbreak;\n\t\
    \tlen1++;\n\t}\n\tif (i == len)\n\t\treturn \"No\";\n\tif (digit_count > 3)\n\t\
    \treturn \"No\";\n\tif (len1 == 0)\n\t\treturn \"No\";\n\tif (file_name[0] < 'a'\
    \ || file_name[0] > 'z')\n\t\tif (file_name[0] < 'A' || file_name[0] > 'Z')\n\t\
    \t\treturn \"No\";\n\tlen2 = len - len1 - 1;\n\tif (len2 != 3)\n\t\treturn \"\
    No\";\n\tstd::string str = file_name.substr(len1 + 1, len2);\n\tif (str != \"\
    txt\" && str != \"exe\" && str != \"dll\")\n\t\treturn \"No\";\n\treturn \"Yes\"\
    ;", "  // your code here\n  return file_name;", "    if (file_name.find(\".\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n\n    std::vector<std::string>\
    \ v = {\"txt\", \"exe\", \"dll\"};\n    int dot_pos = file_name.find(\".\");\n\
    \    std::string left = file_name.substr(0, dot_pos);\n    std::string right =\
    \ file_name.substr(dot_pos + 1);\n    std::string regex = \"[A-Z]\";\n    std::regex\
    \ r(regex);\n    if (std::regex_match(left, r)) {\n        return \"No\";\n  \
    \  }\n\n    if (std::find(v.begin(), v.end(), right) == v.end()) {\n        return\
    \ \"No\";\n    }\n\n    return \"Yes\";", "    // Input your code here\n    std::string\
    \ word = file_name;\n    int count1 = 0;\n    int count2 = 0;\n    int count3\
    \ = 0;\n    for(int i = 0; i < word.length(); i++){\n        if(word[i] == '.'){\n\
    \            count1++;\n        }\n        if(isdigit(word[i])){\n           \
    \ count2++;\n        }\n        if(!isalpha(word[i])){\n            count3++;\n\
    \        }\n    }\n    if(count1 != 1 || count2 > 3 || count3 == 0){\n       \
    \ return \"No\";\n    }\n    else{\n        std::string p1 = word.substr(0, word.find('.'));\n\
    \        std::string p2 = word.substr(word.find('.') + 1);\n        std::transform(p2.begin(),\
    \ p2.end(), p2.begin(), ::tolower);\n        if(p2 == \"txt\" || p2 == \"exe\"\
    \ || p2 == \"dll\"){\n            return \"Yes\";\n        }\n        else{\n\
    \            return \"No\";\n        }\n    }", "    std::regex pattern (\"([a-zA-Z][a-zA-Z0-9]{0,3})\\\
    .(txt|exe|dll)\");\n    return std::regex_match(file_name, pattern) ? \"Yes\"\
    \ : \"No\";", "    // TODO: Write your code here\n    int  num_of_dots = std::count(file_name.begin(),\
    \ file_name.end(), '.');\n    if(num_of_dots > 1)\n        return \"No\";\n  \
    \  std::size_t found = file_name.find_last_of(\".\");\n    std::string name =\
    \ file_name.substr(0,found);\n    std::string extension = file_name.substr(found+1);\n\
    \    if(name.empty())\n        return \"No\";\n    if(std::count_if(name.begin(),\
    \ name.end(), [](char c){return isdigit(c);}) > 3)\n        return \"No\";\n \
    \   if(!isalpha(name[0]))\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   return \"Yes\";", "    int dot_pos = file_name.find('.');\n    int counter\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i]))\n\
    \            counter++;\n    }\n    if (counter > 3) {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(dot_pos+1, dot_pos+3) != \"txt\" &&\n     \
    \   file_name.substr(dot_pos+1, dot_pos+3) != \"exe\" &&\n        file_name.substr(dot_pos+1,\
    \ dot_pos+3) != \"dll\") {\n        return \"No\";\n    }\n    if (isdigit(file_name[0]))\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "    std::string res\
    \ = \"Yes\";\n    bool dot_found = false;\n    bool digits_found = false;\n  \
    \  int dot_index = -1;\n    int digits_counter = 0;\n    for (int i = 0; i < file_name.size();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot_found = true;\n\
    \            dot_index = i;\n        } else if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            digits_found = true;\n            digits_counter++;\n\
    \        }\n    }\n    if (digits_counter > 3) {\n        res = \"No\";\n    }\
    \ else if (!dot_found) {\n        res = \"No\";\n    } else if (!(file_name[0]\
    \ >= 'a' && file_name[0] <= 'z') && !(file_name[0] >= 'A' && file_name[0] <= 'Z'))\
    \ {\n        res = \"No\";\n    } else if (file_name.substr(dot_index+1, file_name.size()-dot_index)\
    \ != \"txt\" && file_name.substr(dot_index+1, file_name.size()-dot_index) != \"\
    exe\" && file_name.substr(dot_index+1, file_name.size()-dot_index) != \"dll\"\
    ) {\n        res = \"No\";\n    }\n    return res;", "\tint count = 0;\n\tint\
    \ dot = 0;\n\tbool ans = false;\n\tint len = file_name.length();\n\tfor (int i\
    \ = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t}\n\t\
    }\n\tif (count <= 3 && dot == 1) {\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\
    if (file_name[i] == '.') {\n\t\t\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\t\
    \t\tif (file_name[j] == 't' && file_name[j + 1] == 'x' && file_name[j + 2] ==\
    \ 't') {\n\t\t\t\t\t\tans = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (file_name[j] ==\
    \ 'e' && file_name[j + 1] == 'x' && file_name[j + 2] == 'e') {\n\t\t\t\t\t\tans\
    \ = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (file_name[j] == 'd' && file_name[j + 1]\
    \ == 'l' && file_name[j + 2] == 'l') {\n\t\t\t\t\t\tans = true;\n\t\t\t\t\t}\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tans = false;\n\t}\n\tif (ans ==\
    \ true) {\n\t\treturn \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";\n\t}", "   \
    \ // TODO\n    std::string first_substring, second_substring;\n    int counter=0;\n\
    \    for(int i=0; i<file_name.length(); i++){\n        if(i == 0){\n         \
    \   if(isalpha(file_name[i])){\n                first_substring += file_name[i];\n\
    \            }else{\n                return \"No\";\n            }\n        }else\
    \ if(file_name[i] == '.'){\n            counter++;\n        }else if(isdigit(file_name[i])){\n\
    \            counter++;\n        }else{\n            first_substring += file_name[i];\n\
    \        }\n    }\n    if(counter <= 3){\n        int dot_position;\n        for(int\
    \ i=0; i<file_name.length(); i++){\n            if(file_name[i] == '.'){\n   \
    \             dot_position = i;\n            }\n        }\n        for(int i=dot_position+1;\
    \ i<file_name.length(); i++){\n            second_substring += file_name[i];\n\
    \        }\n        if(second_substring == \"txt\" || second_substring == \"exe\"\
    \ || second_substring == \"dll\"){\n            return \"Yes\";\n        }else{\n\
    \            return \"No\";\n        }\n    }else{\n        return \"No\";\n \
    \   }", "\tint dot = file_name.find('.');\n\tstd::string dotsub = file_name.substr(dot\
    \ + 1);\n\tstd::string substr = file_name.substr(0, dot);\n\tint i = 0;\n\twhile\
    \ (i < substr.length()) {\n\t\tif (substr[i] < 65 || substr[i] > 122 || (substr[i]\
    \ > 90 && substr[i] < 97)) {\n\t\t\treturn \"No\";\n\t\t}\n\t\ti++;\n\t}\n\ti\
    \ = 0;\n\tint count = 0;\n\twhile (i < substr.length()) {\n\t\tif (substr[i] >=\
    \ 48 && substr[i] <= 57) {\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif (count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif (dotsub != \"txt\" && dotsub != \"exe\"\
    \ && dotsub != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", '    //
    write your code here', "    std::string temp = file_name;\n    std::string sub1\
    \ = \"\";\n    std::string sub2 = \"\";\n    int count = 0;\n    int pos_dot =\
    \ 0;\n    int pos_dot2 = 0;\n    int flag = 0;\n    while((pos_dot = temp.find('.'))\
    \ != std::string::npos) {\n        sub1 = temp.substr(0, pos_dot);\n        sub2\
    \ = temp.substr(pos_dot+1, temp.length()-1);\n        flag = 1;\n        if (sub1.length()\
    \ <= 3 && (sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\")) {\n       \
    \     for (int i = 0; i < sub1.length(); i++) {\n                if (sub1[i] <=\
    \ '9' && sub1[i] >= '0') {\n                    count++;\n                }\n\
    \            }\n            if (count == sub1.length()) {\n                flag\
    \ = 0;\n            }\n        }\n        else {\n            flag = 0;\n    \
    \    }\n        temp = temp.substr(pos_dot+1, temp.length()-1);\n    }\n    if\
    \ (flag == 1) {\n        return \"Yes\";\n    }\n    else {\n        return \"\
    No\";\n    }", "    int file = file_name.find(\".\");\n    if (file == -1 || file\
    \ == 0)\n    {\n        return \"No\";\n    }\n    int num = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++)\n    {\n        if (i < file && file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            num++;\n        }\n \
    \   }\n    if (num > 3)\n    {\n        return \"No\";\n    }\n    std::string\
    \ first = file_name.substr(0, file);\n    std::string last = file_name.substr(file\
    \ + 1, file_name.length() - file - 1);\n    if (first[0] >= 'a' && first[0] <=\
    \ 'z' || first[0] >= 'A' && first[0] <= 'Z')\n    {\n        if (last == \"txt\"\
    \ || last == \"exe\" || last == \"dll\")\n        {\n            return \"Yes\"\
    ;\n        }\n    }\n    return \"No\";", "    int count = 0;\n    int dot = 0;\n\
    \    bool f = false;\n    if (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z') {\n        f = true;\n    }\n    if (!f) {\n\
    \        return \"No\";\n    }\n    if (file_name[0] >= '0' && file_name[0] <=\
    \ '9') {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n        if (file_name[i] == '.') {\n            dot++;\n\
    \        }\n    }\n    std::string ending = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if (count > 3 || dot != 1 || file_name.find(\".\") == 0 || ending\
    \ != \"txt\" && ending != \"exe\" && ending != \"dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";", "    int len = file_name.length();\n    int pos\
    \ = file_name.find(\".\");\n    if(pos==-1)\n        return \"No\";\n    if(pos==0\
    \ || pos==len-1)\n        return \"No\";\n    std::string s1 = file_name.substr(0,pos);\n\
    \    std::string s2 = file_name.substr(pos+1,len-pos-1);\n    int cnt=0;\n   \
    \ for(int i=0;i<s1.length();i++)\n    {\n        if(s1[i]>='0' && s1[i]<='9')\n\
    \            cnt++;\n    }\n    if(cnt>3)\n        return \"No\";\n    if(s2!=\"\
    txt\" && s2!=\"exe\" && s2!=\"dll\")\n        return \"No\";\n    return \"Yes\"\
    ;", "    // TODO\n    std::regex p(\"(\\\\b\\\\w+\\\\.)([[:alpha:]]{2,3})\");\n\
    \    return std::regex_match(file_name, p) ? \"Yes\" : \"No\";", "    //return\
    \ file_name;\n    int k = 0;\n    bool is_latin_letter = false;\n    bool is_extention_valid\
    \ = false;\n    bool is_empty_before_dot = false;\n    bool is_num_of_digits_valid\
    \ = false;\n    bool is_num_of_dots_valid = false;\n    int num_of_digits = 0;\n\
    \    int num_of_dots = 0;\n    std::string extention;\n    std::string name_before_dot;\n\
    \    for(int i = 0; i < file_name.length(); i++){\n        if(isdigit(file_name[i])){\n\
    \            num_of_digits++;\n        }\n        if(num_of_digits > 3){\n   \
    \         break;\n        }\n        if(file_name[i] == '.'){\n            num_of_dots++;\n\
    \            if(num_of_dots == 1){\n                for(int j = i+1; j < file_name.length();\
    \ j++){\n                    extention += file_name[j];\n                }\n \
    \           }\n        }\n        if(num_of_dots == 1){\n            for(int j\
    \ = 0; j < i; j++){\n                name_before_dot += file_name[j];\n      \
    \      }\n        }\n    }\n    if(num_of_digits < 4){\n        is_num_of_digits_valid\
    \ = true;\n    }\n    if(num_of_dots == 1){\n        is_num_of_dots_valid = true;\n\
    \    }\n    if(extention == \"txt\" || extention == \"exe\" || extention == \"\
    dll\"){\n        is_extention_valid = true;\n    }\n    if(name_before_dot.length()\
    \ > 0){\n        is_empty_before_dot = true;\n    }\n    if(isalpha(file_name[0])){\n\
    \        is_latin_letter = true;\n    }\n    if(is_extention_valid && is_latin_letter\
    \ && is_num_of_digits_", "    std::string val = \"No\";\n    int count = 0;\n\
    \    int dot_count = 0;\n    int c = 0;\n    int d;\n    std::string str, str1;\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if((file_name[i] >=\
    \ '0' && file_name[i] <= '9')) {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            c = i;\n        }\n    }\n\
    \    if(count <= 3 && dot_count == 1) {\n        for(int i = 0; i < c; i++) {\n\
    \            str += file_name[i];\n        }\n        for(int i = c + 1; i < file_name.length();\
    \ i++) {\n            str1 += file_name[i];\n        }\n        if(str.length()\
    \ == 0) {\n            val = \"No\";\n        }\n        else if(str[0] >= 'a'\
    \ && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n            if(str1 ==\
    \ \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n                val = \"Yes\"\
    ;\n            }\n        }\n    }\n    return val;", "\tint cnt = 0;\n\tif (isalpha(file_name[0]))\
    \ {\n\t\tfor (char ch : file_name) {\n\t\t\tif (isdigit(ch)) cnt++;\n\t\t}\n\t\
    \tstd::stringstream ss(file_name);\n\t\tstd::string item;\n\t\tstd::vector<std::string>\
    \ split_string;\n\t\twhile (std::getline(ss, item, '.')) {\n\t\t\tsplit_string.push_back(item);\n\
    \t\t}\n\t\tif (cnt <= 3 && split_string.size() == 2 && (split_string[1] == \"\
    txt\" || split_string[1] == \"exe\" || split_string[1] == \"dll\")) return \"\
    Yes\";\n\t\telse return \"No\";\n\t}\n\telse return \"No\";", "    // Your code\
    \ here\n    int num = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n            num++;\n\
    \        if(file_name[i] == '.')\n            dot++;\n    }\n    if(dot != 1 ||\
    \ num > 3 || !((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >=\
    \ 'A' && file_name[0] <= 'Z')))\n        return \"No\";\n    std::string sub =\
    \ file_name.substr(file_name.find(\".\") + 1);\n    if(sub == \"txt\" || sub ==\
    \ \"exe\" || sub == \"dll\")\n        return \"Yes\";\n    return \"No\";", " \
    \ \tstd::string before_dot = \"\";\n  \tstd::string after_dot = \"\";\n  \tint\
    \ count = 0;\n  \tfor(int i = 0; i < file_name.length(); i++) {\n     \tchar c\
    \ = file_name[i];\n     \tif(c == '.') {\n      \t\tbefore_dot = file_name.substr(0,\
    \ i);\n      \t\tafter_dot = file_name.substr(i+1, file_name.length()-i-1);\n\
    \      \t\tcount++;\n      \t}\n    }\n  \tif(count > 1) {\n    \treturn \"No\"\
    ;\n    }\n  \tif(!isalpha(before_dot[0])) {\n     \treturn \"No\";\n    }\n  \t\
    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n \
    \    \treturn \"No\";\n    }\n  \tfor(int i = 0; i < before_dot.length(); i++)\
    \ {\n     \tchar c = before_dot[i];\n     \tif(isdigit(c)) {\n      \t\treturn\
    \ \"No\";\n        }\n    }\n  \treturn \"Yes\";", "    if (file_name.size() <=\
    \ 4 || file_name.find('.') == std::string::npos) {\n        return \"No\";\n \
    \   }\n    if (!(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >=\
    \ 'A' && file_name[0] <= 'Z')) {\n        return \"No\";\n    }\n    for (int\
    \ i = 1; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n  \
    \          break;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            return \"No\";\n        }\n    }\n    if (file_name.substr(file_name.find('.'),\
    \ 4) != \".txt\" && file_name.substr(file_name.find('.'), 4) != \".exe\" && file_name.substr(file_name.find('.'),\
    \ 4) != \".dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "  \
    \  std::regex pattern(R\"(^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$)\");\n    return\
    \ std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";", "    std::string\
    \ ans;\n    int n = file_name.size();\n    if(n<4) return \"No\";\n    int digits\
    \ = 0;\n    for(int i=0;i<n;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n\
    \            digits++;\n        }\n    }\n    if(digits>3) return \"No\";\n  \
    \  int dot = 0;\n    int last_dot;\n    for(int i=0;i<n;i++){\n        if(file_name[i]=='.'){\n\
    \            dot++;\n            last_dot = i;\n        }\n    }\n    if(dot!=1)\
    \ return \"No\";\n    for(int i=0;i<last_dot;i++){\n        if(file_name[i]>='0'\
    \ && file_name[i]<='9'){\n            return \"No\";\n        }\n    }\n    if(file_name[last_dot+1]=='t'\
    \ && file_name[last_dot+2]=='x' && file_name[last_dot+3]=='t'){\n        return\
    \ \"Yes\";\n    }\n    if(file_name[last_dot+1]=='e' && file_name[last_dot+2]=='x'\
    \ && file_name[last_dot+3]=='e'){\n        return \"Yes\";\n    }\n    if(file_name[last_dot+1]=='d'\
    \ && file_name[last_dot+2]=='l' && file_name[last_dot+3]=='l'){\n        return\
    \ \"Yes\";\n    }\n    return \"No\";", "\tstd::string str1, str2;\n\tstr1.assign(file_name.begin(),\
    \ file_name.begin() + file_name.find('.'));\n\tstr2.assign(file_name.begin() +\
    \ file_name.find('.') + 1, file_name.end());\n\tint count = 0;\n\tfor (int i =\
    \ 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n\t\t\tcount++;\n\t}\n\tif (count > 3)\n\t\treturn \"No\";\n\tif (file_name.find('.')\
    \ == std::string::npos)\n\t\treturn \"No\";\n\tif ((file_name[0] >= 'a' && file_name[0]\
    \ <= 'z') || (file_name[0] >= 'A' && file_name[0] <= 'Z')) {\n\t\tif (str2 ==\
    \ \"txt\" || str2 == \"exe\" || str2 == \"dll\")\n\t\t\treturn \"Yes\";\n\t\t\
    else\n\t\t\treturn \"No\";\n\t}\n\telse\n\t\treturn \"No\";", "    std::regex\
    \ r(\"^[a-zA-Z]+(0*[1-9][0-9]{0,2})*(\\\\.txt|\\\\.exe|\\\\.dll)$\");\n    return\
    \ regex_match(file_name, r) ? \"Yes\" : \"No\";", "  \tint count = 0;\n\tfor(int\
    \ i = 0; i < file_name.length(); i++)\n\t{\n\t\tif(isdigit(file_name[i])) count++;\n\
    \t}\n\tstd::string str = file_name.substr(file_name.find('.')+1);\n\tif(count>3\
    \ || file_name.find('.')==std::string::npos || file_name.find('.')==0 || !isalpha(file_name[0])\
    \ || (str!=\"txt\" && str!=\"exe\" && str!=\"dll\"))\n\t\treturn \"No\";\n\treturn\
    \ \"Yes\";", "  for(int i = 0; i < file_name.size(); i++) {\n    if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n      if(file_name[i] == '0' && i + 2 < file_name.size()\
    \ && file_name[i + 1] == '0' && file_name[i + 2] == '0') {\n        return \"\
    No\";\n      }\n    }\n  }\n  bool name_found = false;\n  bool extension_found\
    \ = false;\n  int dot_index = -1;\n  std::string name = \"\";\n  std::string extension\
    \ = \"\";\n  for(int i = 0; i < file_name.size(); i++) {\n    if(file_name[i]\
    \ == '.') {\n      dot_index = i;\n      break;\n    }\n  }\n  for(int i = 0;\
    \ i < file_name.size(); i++) {\n    if(file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') {\n      name_found = true;\n    }\n    if(file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z') {\n      name_found = true;\n    }\n  }\n  for(int i = dot_index + 1;\
    \ i < file_name.size(); i++) {\n    if(file_name[i] == 't' && file_name[i + 1]\
    \ == 'x' && file_name[i + 2] == 't') {\n      extension_found = true;\n    }\n\
    \    if(file_name[i] == 'e' && file_name[i + 1] == 'x' && file_name[i + 2] ==\
    \ 'e') {\n      extension_found = true;\n    }\n    if(file_name[i] == 'd' &&\
    \ file_name[i + 1] == 'l' && file_name[i + 2] == 'l') {\n      extension_found\
    \ = true;\n    }\n  }\n  if(name_found && extension_found) {\n    return \"Yes\"\
    ;\n", '    ', "  std::regex pattern (\"(?x)(?i) \n  ^[a-z] \n  (?!([a-z]*[.]{1}[0-9]*){3,})\
    \ \n  ([a-z]*[0-9]*[.]{1}) \n  (?!.{0,}) \n  (txt|exe|dll)$\");\n  return std::regex_match(file_name,\
    \ pattern) ? \"Yes\" : \"No\";", "    std::regex reg(\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[txt|exe|dll]$\");\n    return std::regex_match(file_name, reg) ? \"Yes\" : \"\
    No\";", "\tstd::string answer = \"No\";\n\t\n\tstd::regex file_format(\"^[a-zA-Z]+[\\\
    \\d]{0,3}[\\\\.](txt|exe|dll)$\");\n\tstd::smatch match;\n\tstd::regex_search(file_name,\
    \ match, file_format);\n\t\n\tanswer = (match.size() > 0) ? \"Yes\" : \"No\";\n\
    \t\n\treturn answer;", "  std::regex valid_file_name(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)\");\n  return std::regex_match(file_name, valid_file_name) ?\
    \ \"Yes\" : \"No\";", "\tstd::string::iterator it = file_name.begin();\n\tstd::string\
    \ extension;\n\tint count = 0;\n\tfor (it = file_name.begin(); it != file_name.end();\
    \ it++) {\n\t\tif (isdigit(*it)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count >\
    \ 3) {\n\t\treturn \"No\";\n\t}\n\tcount = 0;\n\tfor (it = file_name.begin();\
    \ it != file_name.end(); it++) {\n\t\tif (*it == '.') {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\tif (count != 1) {\n\t\treturn \"No\";\n\t}\n\tcount = 0;\n\tfor (it\
    \ = file_name.begin(); it != file_name.end(); it++) {\n\t\tif (*it == '.') {\n\
    \t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\tif (count == 0) {\n\t\treturn \"No\"\
    ;\n\t}\n\tstd::string name = file_name.substr(0, count);\n\tif (name.size() ==\
    \ 0) {\n\t\treturn \"No\";\n\t}\n\tit = name.begin();\n\tfor (it = name.begin();\
    \ it != name.end(); it++) {\n\t\tif (!(isdigit(*it) || isalpha(*it))) {\n\t\t\t\
    return \"No\";\n\t\t}\n\t}\n\textension = file_name.substr(count + 1, file_name.size()\
    \ - count);\n\tif (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "\tint count = 0;\n\
    \tbool dot = false;\n\tbool found = false;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (isdigit(file_name[i]))\n\t\t\tcount++;\n\t\tif (file_name[i]\
    \ == '.')\n\t\t\tdot = true;\n\t\tif (file_name[i] == '.' && file_name[i - 1]\
    \ == '.')\n\t\t\treturn \"No\";\n\t\tif (file_name[i] == '.' && file_name[i +\
    \ 1] == '.')\n\t\t\treturn \"No\";\n\t\tif (file_name[i] == '.' && file_name[i\
    \ + 1] == '.' && file_name[i - 1] == '.')\n\t\t\treturn \"No\";\n\t\tif (file_name[i]\
    \ == '.' && (file_name[i + 1] == 't' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 't'))\n\t\t\tfound = true;\n\t\tif (file_name[i] == '.' && (file_name[i\
    \ + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i + 3] == 'e'))\n\t\t\t\
    found = true;\n\t\tif (file_name[i] == '.' && (file_name[i + 1] == 'd' && file_name[i\
    \ + 2] == 'l' && file_name[i + 3] == 'l'))\n\t\t\tfound = true;\n\t}\n\tif (count\
    \ > 3)\n\t\treturn \"No\";\n\tif (!dot)\n\t\treturn \"No\";\n\tif (!isalpha(file_name[0]))\n\
    \t\treturn \"No\";\n\tif (!found)\n\t\treturn \"No\";\n\treturn \"Yes\";", "\t\
    std::regex pattern(\"([a-zA-Z]*[0-9]{0,3}).((txt)|(exe)|(dll))\");\n\tif (std::regex_match(file_name,\
    \ pattern))\n\t\treturn \"Yes\";\n\telse\n\t\treturn \"No\";", "    int count_dot\
    \ = 0;\n    int count_digit = 0;\n    int sub_str_before_dot_len;\n    int sub_str_after_dot_len;\n\
    \    std::string sub_str_before_dot;\n    std::string sub_str_after_dot;\n   \
    \ std::vector<std::string> sub_str_after_dot_acceptable_str = {\"txt\", \"exe\"\
    , \"dll\"};\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            count_dot++;\n            sub_str_before_dot = file_name.substr(0,\
    \ i);\n            sub_str_after_dot = file_name.substr(i + 1, file_name.length()\
    \ - 1);\n        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \            count_digit++;\n        }\n    }\n    if (count_dot == 1 && count_digit\
    \ <= 3) {\n        sub_str_before_dot_len = sub_str_before_dot.length();\n   \
    \     sub_str_after_dot_len = sub_str_after_dot.length();\n        if (sub_str_before_dot_len\
    \ != 0) {\n            for (int i = 0; i < sub_str_after_dot_acceptable_str.size();\
    \ i++) {\n                if (sub_str_after_dot == sub_str_after_dot_acceptable_str[i])\
    \ {\n                    return \"Yes\";\n                }\n            }\n \
    \       }\n    }\n    return \"No\";", "\tstd::string valid[] = {\"txt\", \"exe\"\
    , \"dll\"};\n\tint count = 0;\n\tint count_after_dot = 0;\n\tfor(int i = 0; i\
    \ < file_name.length(); i++) {\n\t\tif(file_name[i] == '.') {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount_after_dot++;\n\
    \t\t}\n\t}\n\tstd::string after_dot = file_name.substr(file_name.find(\".\") +\
    \ 1);\n\tstd::string before_dot = file_name.substr(0, file_name.find(\".\"));\n\
    \tif(count == 1 && before_dot.length() >= 1 && count_after_dot <= 3 && \n\t\t\
    (before_dot[0] >= 'a' && before_dot[0] <= 'z' || before_dot[0] >= 'A' && before_dot[0]\
    \ <= 'Z')) {\n\t\tfor(int i = 0; i < 3; i++) {\n\t\t\tif(after_dot == valid[i])\
    \ {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";", "\tint valid,\
    \ dot, nums;\n\tstd::string cut, cut2;\n\tvalid = 1;\n\tdot = 0;\n\tnums = 0;\n\
    \tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] == '.')\
    \ {\n\t\t\tdot++;\n\t\t\tcut = file_name.substr(0, i);\n\t\t\tcut2 = file_name.substr(i\
    \ + 1, file_name.length() - i - 1);\n\t\t}\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n\t\t\tnums++;\n\t}\n\tif (nums > 3)\n\t\tvalid = 0;\n\tif (dot != 1)\n\
    \t\tvalid = 0;\n\tif (cut == \"\")\n\t\tvalid = 0;\n\tif (cut[0] < 'A' || (cut[0]\
    \ > 'Z' && cut[0] < 'a') || cut[0] > 'z')\n\t\tvalid = 0;\n\tif (cut2 != \"txt\"\
    \ && cut2 != \"exe\" && cut2 != \"dll\")\n\t\tvalid = 0;\n\tif (valid == 1)\n\t\
    \treturn \"Yes\";\n\telse\n\t\treturn \"No\";", "    // your code here\n    std::cout\
    \ << file_name;\n    if(std::count(file_name.begin(), file_name.end(), '.') >\
    \ 1)\n    {\n        return \"No\";\n    }\n    std::string first = file_name.substr(0,\
    \ file_name.find('.'));\n    std::string last = file_name.substr(file_name.find('.')\
    \ + 1);\n    std::cout << first << last;\n    if(std::regex_match(first, std::regex(\"\
    [a-zA-Z][a-zA-Z0-9]*\")) == false)\n    {\n        return \"No\";\n    }\n   \
    \ if(std::regex_match(last, std::regex(\"txt|exe|dll\")) == false)\n    {\n  \
    \      return \"No\";\n    }\n    int count = 0;\n    for(char c : file_name)\n\
    \    {\n        if(isdigit(c))\n        {\n            count++;\n        }\n \
    \   }\n    if(count > 3)\n    {\n        return \"No\";\n    }\n    return \"\
    Yes\";", "    std::stringstream ss(file_name);\n    std::string item;\n    std::vector<std::string>\
    \ splitString;\n    while (std::getline(ss, item, '.'))\n    {\n        splitString.push_back(item);\n\
    \    }\n    int count = 0;\n    for (int i = 0; i < splitString[0].length(); i++)\n\
    \    {\n        if (splitString[0][i] >= '0' && splitString[0][i] <= '9')\n  \
    \      {\n            count++;\n        }\n    }\n    if (count > 3)\n    {\n\
    \        return \"No\";\n    }\n    if (splitString[0].length() <= 1)\n    {\n\
    \        return \"No\";\n    }\n    if (!(splitString[0][0] >= 'a' && splitString[0][0]\
    \ <= 'z') && !(splitString[0][0] >= 'A' && splitString[0][0] <= 'Z'))\n    {\n\
    \        return \"No\";\n    }\n    if (splitString[1] != \"txt\" && splitString[1]\
    \ != \"exe\" && splitString[1] != \"dll\")\n    {\n        return \"No\";\n  \
    \  }\n    return \"Yes\";", "    int j = 0;\n    int b = 0;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        b++;\n        }\n        if (isdigit(file_name[i])) {\n            j++;\n\
    \        }\n    }\n    if (b != 1) {\n        return \"No\";\n    }\n    if (j\
    \ > 3) {\n        return \"No\";\n    }\n    return \"Yes\";", '  return "";',
  "  if(file_name.find('.')==-1) return \"No\";\n  std::string sub=file_name.substr(0,file_name.find('.'));\n\
    \  if(!isalpha(sub[0])) return \"No\";\n  for(int i=0;i<sub.length();i++){\n \
    \   if(isdigit(sub[i])) return \"No\";\n  }\n  sub=file_name.substr(file_name.find('.'));\n\
    \  if(sub!=\".txt\" && sub!=\".exe\" && sub!=\".dll\") return \"No\";\n  int num=0;\n\
    \  for(int i=0;i<file_name.length();i++){\n    if(isdigit(file_name[i])) num++;\n\
    \  }\n  if(num>3) return \"No\";\n  return \"Yes\";", "\t\n\tstd::string str =\
    \ \"\";\n\tint counter = 0;\n\tbool dot = false;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (isdigit(file_name[i])) {\n\t\t\tcounter++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot = true;\n\t\t}\n\t}\n\t\n\tif (counter > 3 || dot == false)\
    \ {\n\t\treturn \"No\";\n\t}\n\n\tstr = file_name.substr(file_name.find(\".\"\
    ) + 1);\n\tif (str == \"txt\" || str == \"exe\" || str == \"dll\") {\n\t\treturn\
    \ \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";\n\t}\n\t", "    if(count(file_name.begin(),\
    \ file_name.end(), '.') != 1){\n        return \"No\";\n    }\n    int len = file_name.length();\n\
    \    std::string before_dot, after_dot;\n    int len_dot = file_name.find('.');\n\
    \    before_dot = file_name.substr(0, len_dot);\n    after_dot = file_name.substr(len_dot+1,\
    \ len);\n    if(isdigit(before_dot[0]))\n        return \"No\";\n    else if(!std::regex_match(before_dot,\
    \ std::regex(\"[a-zA-Z]+\"))){\n        return \"No\";\n    }\n    if(!std::regex_match(after_dot,\
    \ std::regex(\"[txt|exe|dll]\"))){\n        return \"No\";\n    }\n    return\
    \ \"Yes\";", "    //write code here\n    string str1 = \"\";\n    for(int i =\
    \ 0;i<file_name.length();i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n\
    \            str1 += file_name[i];\n        }\n    }\n    if(str1.length()>3){\n\
    \        return \"No\";\n    }\n    string str2 = \"\";\n    for(int i = 0;i<file_name.length();i++){\n\
    \        if(file_name[i]=='.'){\n            str2 = file_name.substr(i+1,3);\n\
    \            break;\n        }\n    }\n    if(str2.length()!=3){\n        return\
    \ \"No\";\n    }\n    else if(str2==\"txt\" || str2==\"exe\" || str2==\"dll\"\
    ){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }",
  "\t\t//int dotPosition=file_name.find('.');\n\t\t//std::string subStringBeforeDot=file_name.substr(0,dotPosition);\n\
    \t\t//std::string subStringAfterDot=file_name.substr(dotPosition+1);\n\t\tint\
    \ dotPosition=file_name.find('.');\n\t\tstd::string subStringBeforeDot=file_name.substr(0,dotPosition);\n\
    \t\tstd::string subStringAfterDot=file_name.substr(dotPosition+1);\n\t\tint stringLength=file_name.length();\n\
    \t\tint count=0;\n\t\t//cout<<stringLength<<endl;\n\t\t//cout<<subStringBeforeDot<<endl;\n\
    \t\t//cout<<subStringAfterDot<<endl;\n\t\tfor(int i=0;i<stringLength;i++){\n\t\
    \t\tif(file_name[i]>='0' && file_name[i]<='9'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\
    \t}\n\t\tif(count>3){\n\t\t\treturn \"No\";\n\t\t}\n\t\tif(count<=3){\n\t\t\t\
    if(subStringBeforeDot[0]>='A' && subStringBeforeDot[0]<='Z' || subStringBeforeDot[0]>='a'\
    \ && subStringBeforeDot[0]<='z'){\n\t\t\t\tif(subStringAfterDot==\"txt\" || subStringAfterDot==\"\
    exe\" || subStringAfterDot==\"dll\"){\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t}\n\t\
    \t\t\telse{\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\
    \treturn \"No\";\n\t\t\t}\n\t\t}", "\t// create a counter to count the number\
    \ of digits in the file name\n\tint digits = 0;\n\t// create a counter to count\
    \ the number of dots in the file name\n\tint dots = 0;\n\t// iterate over the\
    \ name string\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\t// if the\
    \ character is between 0 and 9, increment the digits counter\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tdigits++;\n\t\t}\n\t\t// if the character\
    \ is a dot, increment the dots counter\n\t\tif (file_name[i] == '.') {\n\t\t\t\
    dots++;\n\t\t}\n\t}\n\t// create a vector to hold the substrings after the dot\n\
    \tstd::vector<std::string> exts = {\"txt\", \"exe\", \"dll\"};\n\t// create substring\
    \ to hold the substring after the dot\n\tstd::string ext = \"\";\n\t// find the\
    \ index of the dot in the file name\n\tint dot_index = file_name.find('.');\n\t\
    // store the substring in the ext variable\n\text = file_name.substr(dot_index\
    \ + 1);\n\t// if the number of digits is more than 3 or the number of dots is\
    \ not equal to one\n\t// or the first character of the file name is not between\
    \ a-z or A-Z or the ext is not\n\t// equal to any of the extensions in the ext\
    \ vector\n\tif (digits > 3 || dots != 1 || !((file_name[0] >= 'a' && file_name[0]\
    \ <= 'z') || (file_name[0] >= 'A' && file_name[0] <= 'Z')) || std::find(exts.begin(),\
    \ exts.end(), ext) == exts.end()) {\n\t\t// return No\n\t\treturn \"No\";\n\t\
    }\n\t// return Yes\n\treturn \"Yes\";", "  if (file_name.find('.') == std::string::npos)\
    \ {\n    return \"No\";\n  }\n  std::string file_name_prefix, file_name_suffix;\n\
    \  std::tie(file_name_prefix, file_name_suffix) = [&]() {\n    auto file_name_prefix_start\
    \ = file_name.begin();\n    auto file_name_prefix_end = std::find(file_name.begin(),\
    \ file_name.end(), '.');\n    auto file_name_suffix_start = file_name_prefix_end\
    \ + 1;\n    auto file_name_suffix_end = file_name.end();\n    return std::make_tuple(std::string(file_name_prefix_start,\
    \ file_name_prefix_end),\n                           std::string(file_name_suffix_start,\
    \ file_name_suffix_end));\n  }();\n  std::transform(file_name_prefix.begin(),\
    \ file_name_prefix.end(), file_name_prefix.begin(), tolower);\n  std::transform(file_name_suffix.begin(),\
    \ file_name_suffix.end(), file_name_suffix.begin(), tolower);\n  return\n    (file_name_prefix.size()\
    \ >= 1 && file_name_prefix.find_first_of(\"0123456789\") == std::string::npos\
    \ &&\n     file_name_prefix.find_first_of(\"abcdefghijklmnopqrstuvwxyz\") != std::string::npos)\
    \ &&\n    (file_name_suffix == \"txt\" || file_name_suffix == \"exe\" || file_name_suffix\
    \ == \"dll\") &&\n    std::count_if(file_name.begin(), file_name.end(), [](char\
    \ c) { return c >= '0' && c <= '9'; }) <= 3 ?\n    \"Yes\" : \"No\";", "    int\
    \ cnt = 0;\n    bool dot = false;\n    std::string alp = \"\", num = \"\", ext\
    \ = \"\";\n    if (isalpha(file_name[0]))\n    {\n        for (auto i : file_name)\n\
    \        {\n            if (isalpha(i))\n                alp += i;\n         \
    \   else if (isdigit(i))\n                num += i;\n            else if (i ==\
    \ '.')\n            {\n                dot = true;\n                continue;\n\
    \            }\n            else\n                return \"No\";\n        }\n\
    \        if (num.size() > 3)\n            return \"No\";\n        if (!dot)\n\
    \            return \"No\";\n        for (int i = file_name.size() - 1; i >= 0;\
    \ i--)\n        {\n            if (file_name[i] == '.')\n                break;\n\
    \            ext += file_name[i];\n        }\n        reverse(ext.begin(), ext.end());\n\
    \        if (ext == \"txt\" || ext == \"exe\" || ext == \"dll\")\n           \
    \ return \"Yes\";\n        else\n            return \"No\";\n    }\n    else\n\
    \        return \"No\";", "\t// TODO: Check the file's name for validity and return\
    \ \"Yes\" or \"No\" accordingly.\n\tstring file = file_name;\n\tstring dot = \"\
    .\";\n\tint count = 0;\n\tint index = file.find(dot);\n\tint res = file.find(\"\
    txt\");\n\tint res1 = file.find(\"exe\");\n\tint res2 = file.find(\"dll\");\n\t\
    for (int i = 0; i < file.length(); i++) {\n\t\tif (file[i] == '0' || file[i] ==\
    \ '1' || file[i] == '2' || file[i] == '3' || file[i] == '4' || file[i] == '5'\
    \ || file[i] == '6' || file[i] == '7' || file[i] == '8' || file[i] == '9') {\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\telse\
    \ if (file[0] < 'a' || file[0] > 'z' || file[0] < 'A' || file[0] > 'Z') {\n\t\t\
    return \"No\";\n\t}\n\telse if (file.find(dot) == std::string::npos) {\n\t\treturn\
    \ \"No\";\n\t}\n\telse if (res == std::string::npos && res1 == std::string::npos\
    \ && res2 == std::string::npos) {\n\t\treturn \"No\";\n\t}\n\telse {\n\t\treturn\
    \ \"Yes\";\n\t}", "\tint dot_cnt = 0;\n\tint digit_cnt = 0;\n\tint latin_cnt =\
    \ 0;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n\t\t\tdigit_cnt++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_cnt++;\n\t\t}\n\t\tif ((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\tlatin_cnt++;\n\
    \t\t}\n\t}\n\tif (dot_cnt == 1 && digit_cnt <= 3 && latin_cnt > 0) {\n\t\tstd::string\
    \ temp = file_name.substr(file_name.find(\".\") + 1);\n\t\tif (temp == \"txt\"\
    \ || temp == \"exe\" || temp == \"dll\") {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\
    \treturn \"No\";", "  int counter = 0;\n  for (int i = 0; i < file_name.length();\
    \ i++) {\n    if (file_name[i] == '.') {\n      counter++;\n    }\n  }\n  std::string\
    \ str = file_name.substr(0, file_name.find(\".\"));\n  std::string str2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n  for (int i = 0; i < str.length(); i++) {\n    if ((str[i] >= 'a'\
    \ && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')) {\n      counter++;\n\
    \    }\n  }\n  if (counter == 1) {\n    if (str2 == \"txt\" || str2 == \"exe\"\
    \ || str2 == \"dll\") {\n      return \"Yes\";\n    }\n  }\n  return \"No\";",
  "\tint l = file_name.length();\n\tif (l < 5) {\n\t\treturn \"No\";\n\t}\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\tif (count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string\
    \ s;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] != '.') {\n\t\t\t\
    s += file_name[i];\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\tint count1\
    \ = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= '0' && s[i]\
    \ <= '9') {\n\t\t\tcount1++;\n\t\t}\n\t}\n\tif (count1 > 3) {\n\t\treturn \"No\"\
    ;\n\t}\n\tstd::string s1;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ < '0' || s[i] > '9') {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\treturn\
    \ \"Yes\";\n\t\t\t}\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\treturn\
    \ \"Yes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\
    }\n\tstd::string s2;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] ==\
    \ '.') {\n\t\t\tfor (int j = i + 1; j < l; j++) {\n\t\t\t\ts2 += file_name[j];\n\
    \t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (s2 == \"txt\")", "  std::string ret =\
    \ \"No\";\n  std::string mystring = file_name;\n  std::vector<std::string> strvec;\n\
    \  std::size_t pos = 0, found;\n  while((found = mystring.find_first_of('.', pos))\
    \ != std::string::npos)\n  {\n    strvec.push_back(mystring.substr(pos, found\
    \ - pos));\n    pos = found+1;\n  }\n  strvec.push_back(mystring.substr(pos));\n\
    \  std::string stemp = strvec[0];\n  std::string etemp = strvec[1];\n  int cnt\
    \ = std::count_if(stemp.begin(), stemp.end(), [](char c){ return std::isdigit(c);\
    \ });\n  if(cnt > 3)\n    return ret;\n  if(etemp != \"txt\" && etemp != \"exe\"\
    \ && etemp != \"dll\")\n    return ret;\n  if(!isalpha(stemp[0]))\n    return\
    \ ret;\n  ret = \"Yes\";\n  return ret;", "    // my code\n    int dot_pos = -1;\n\
    \    int num_count = 0;\n    int dot_count = 0;\n    if (file_name.length() ==\
    \ 0) {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot_pos = i;\n     \
    \       dot_count++;\n        }\n        if (isdigit(file_name[i])) {\n      \
    \      num_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    if (num_count > 3) {\n        return \"No\";\n    }\n  \
    \  if (dot_pos == 0) {\n        return \"No\";\n    }\n    if (!isalpha(file_name[0]))\
    \ {\n        return \"No\";\n    }\n    std::string file_type = file_name.substr(dot_pos+1,\
    \ file_name.length()-dot_pos-1);\n    if (file_type != \"txt\" && file_type !=\
    \ \"exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";", "\t// code here\n\tbool dot = false;\n\tint nums = 0;\n\tstd::string\
    \ file_type;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (!(i ==\
    \ 0 && (file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z'))) {\n\t\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\t\
    \tnums++;\n\t\t\t}\n\t\t\telse if (file_name[i] == '.') {\n\t\t\t\tdot = true;\n\
    \t\t\t\tfor (int j = i + 1; j < file_name.length(); j++) {\n\t\t\t\t\tfile_type\
    \ += file_name[j];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (dot\
    \ == false || nums > 3 || !(file_type == \"txt\" || file_type == \"exe\" || file_type\
    \ == \"dll\")) {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "  int dot_count=0;\n\
    \  int count_digits=0;\n  std::string str_before_dot;\n  std::string str_after_dot;\n\
    \  for(auto i=0;i<file_name.size();i++){\n    if(isdigit(file_name[i])) count_digits++;\n\
    \    if(file_name[i]=='.') dot_count++;\n  }\n  if(dot_count!=1) return \"No\"\
    ;\n  if(count_digits>3) return \"No\";\n  if(file_name[0]>='0' && file_name[0]<='9')\
    \ return \"No\";\n  int pos=file_name.find(\".\");\n  if(pos==0) return \"No\"\
    ;\n  str_before_dot=file_name.substr(0,pos);\n  str_after_dot=file_name.substr(pos+1);\n\
    \  if(str_after_dot!=\"txt\" && str_after_dot!=\"exe\" && str_after_dot!=\"dll\"\
    )\n    return \"No\";\n  return \"Yes\";", "    std::stringstream ss(file_name);\n\
    \    std::string beforeDot, afterDot;\n    std::vector<std::string> v = {\"txt\"\
    , \"exe\", \"dll\"};\n    bool found = false;\n    int number_of_digits = 0;\n\
    \    while(std::getline(ss, beforeDot, '.')){\n        std::getline(ss, afterDot,\
    \ '.');\n    }\n    for(int i = 0; i < beforeDot.length(); i++){\n        if(beforeDot[i]\
    \ >= '0' && beforeDot[i] <= '9'){\n            number_of_digits++;\n        }\n\
    \    }\n    for(int i = 0; i < v.size(); i++){\n        if(v[i] == afterDot){\n\
    \            found = true;\n        }\n    }\n    if(number_of_digits <= 3 &&\
    \ found && afterDot != \"\" && beforeDot != \"\" && \n    (beforeDot[0] >= 'a'\
    \ && beforeDot[0] <= 'z') || (beforeDot[0] >= 'A' && beforeDot[0] <= 'Z')){\n\
    \        return \"Yes\";\n    }\n    return \"No\";", "\tstd::string sub_before_dot;\n\
    \tstd::string sub_after_dot;\n\tint dot_index = -1;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_index = i;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (dot_index == -1) {\n\t\treturn \"No\";\n\t}\n\tif (dot_index\
    \ == 0) {\n\t\treturn \"No\";\n\t}\n\tfor (int i = 0; i < dot_index; i++) {\n\t\
    \tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\treturn \"No\";\n\t\t\
    }\n\t}\n\tfor (int i = dot_index + 1; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i < dot_index; i++) {\n\t\tsub_before_dot += file_name[i];\n\t}\n\tfor\
    \ (int i = dot_index + 1; i < file_name.length(); i++) {\n\t\tsub_after_dot +=\
    \ file_name[i];\n\t}\n\tif (sub_after_dot != \"txt\" && sub_after_dot != \"exe\"\
    \ && sub_after_dot != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";",
  "\tint count_dot = 0;\n\tint count_digit = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcount_dot++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount_digit++;\n\t\t}\n\t}\n\tif (count_dot\
    \ == 1 && count_digit <= 3) {\n\t\tstd::string sub_string1 = file_name.substr(0,\
    \ file_name.find(\".\"));\n\t\tstd::string sub_string2 = file_name.substr(file_name.find(\"\
    .\") + 1, file_name.length());\n\t\tif (sub_string1.length() != 0 && (sub_string1[0]\
    \ >= 'a' && sub_string1[0] <= 'z' || sub_string1[0] >= 'A' && sub_string1[0] <=\
    \ 'Z')) {\n\t\t\tif (sub_string2 == \"txt\" || sub_string2 == \"exe\" || sub_string2\
    \ == \"dll\") {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\"\
    ;", "  int dot_index, digit_count=0;\n  for(int i=0;i<file_name.length();i++){\n\
    \    if(file_name[i]=='.'){\n      dot_index=i;\n    }\n    if(file_name[i]-'0'>=0\
    \ && file_name[i]-'0'<=9){\n      digit_count++;\n    }\n  }\n  std::string sub_s=file_name.substr(dot_index+1);\n\
    \  if(digit_count>3){\n    return \"No\";\n  }\n  if(file_name[0]-'0'>=0 && file_name[0]-'0'<=9){\n\
    \    return \"No\";\n  }\n  if(sub_s==\"txt\" || sub_s==\"exe\" || sub_s==\"dll\"\
    ){\n    return \"Yes\";\n  }\n  return \"No\";", "    std::regex txt_regex(\"\
    ([a-zA-Z]+)\\\\.txt\");\n    std::regex exe_regex(\"([a-zA-Z]+)\\\\.exe\");\n\
    \    std::regex dll_regex(\"([a-zA-Z]+)\\\\.dll\");\n    if(std::regex_match(file_name,\
    \ txt_regex) || std::regex_match(file_name, exe_regex) || std::regex_match(file_name,\
    \ dll_regex)) {\n        return \"Yes\";\n    }\n    return \"No\";", "\tif (file_name.empty())\n\
    \t\treturn \"No\";\n\tint count = 0;\n\tbool hasDot = false;\n\tstd::string strBeforeDot;\n\
    \tstd::string strAfterDot;\n\tfor (auto& c : file_name) {\n\t\tif (c >= '0' &&\
    \ c <= '9') {\n\t\t\t++count;\n\t\t\tif (count == 4)\n\t\t\t\treturn \"No\";\n\
    \t\t}\n\t\telse if (c == '.') {\n\t\t\tif (hasDot)\n\t\t\t\treturn \"No\";\n\t\
    \t\thasDot = true;\n\t\t}\n\t\telse if (!hasDot) {\n\t\t\tif (!(c >= 'a' && c\
    \ <= 'z') && !(c >= 'A' && c <= 'Z'))\n\t\t\t\treturn \"No\";\n\t\t\tstrBeforeDot.push_back(c);\n\
    \t\t}\n\t\telse {\n\t\t\tstrAfterDot.push_back(c);\n\t\t}\n\t}\n\tif (strBeforeDot.empty()\
    \ || strAfterDot.empty())\n\t\treturn \"No\";\n\tif (strAfterDot != \"txt\" &&\
    \ strAfterDot != \"exe\" && strAfterDot != \"dll\")\n\t\treturn \"No\";\n\treturn\
    \ \"Yes\";", "\tif(std::regex_match(file_name, std::regex(\"([a-zA-Z])([a-zA-Z0-9]{0,3})(\\\
    \\.txt|\\\\.exe|\\\\.dll)\")))\n\t\treturn \"Yes\";\n\treturn \"No\";", "    int\
    \ dot_pos = file_name.find(\".\");\n    if (dot_pos == std::string::npos || dot_pos\
    \ == 0) {\n        return \"No\";\n    }\n    for (int i = 0; i < dot_pos; i++)\
    \ {\n        if (i == 0 && !isalpha(file_name[i])) {\n            return \"No\"\
    ;\n        }\n        if (isdigit(file_name[i])) {\n            return \"No\"\
    ;\n        }\n    }\n    std::string file_extension = file_name.substr(dot_pos\
    \ + 1);\n    if (file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.size(); i++) {\n        if (isdigit(file_name[i])) {\n\
    \            count++;\n        }\n    }\n    if (count > 3) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // your code here\n    bool dot =\
    \ false;\n    std::string a, b;\n    for (auto i = 0; i < file_name.size(); i++)\
    \ {\n        if (file_name[i] == '.') {\n            dot = true;\n           \
    \ continue;\n        }\n        if (!dot) {\n            if (!isalpha(file_name[i]))\
    \ return \"No\";\n            a += file_name[i];\n        } else {\n         \
    \   b += file_name[i];\n        }\n    }\n    if (a.size() == 0 || (b != \"txt\"\
    \ && b != \"exe\" && b != \"dll\")) return \"No\";\n    for (auto i = 0; i < a.size();\
    \ i++) {\n        if (isdigit(a[i])) return \"No\";\n    }\n    return \"Yes\"\
    ;", "    int indexOfDot = file_name.find(\".\");\n    std::string beforeDot =\
    \ file_name.substr(0, indexOfDot);\n    std::string afterDot = file_name.substr(indexOfDot\
    \ + 1);\n    int dotCounter = 0;\n    int numberCounter = 0;\n    if (indexOfDot\
    \ == 0) {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dotCounter++;\n    \
    \    }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n          \
    \  numberCounter++;\n        }\n    }\n    if (dotCounter != 1 || numberCounter\
    \ > 3) {\n        return \"No\";\n    }\n    if (!((afterDot == \"txt\") || (afterDot\
    \ == \"exe\") || (afterDot == \"dll\"))) {\n        return \"No\";\n    }\n  \
    \  if (!((beforeDot[0] >= 'a' && beforeDot[0] <= 'z') || (beforeDot[0] >= 'A'\
    \ && beforeDot[0] <= 'Z'))) {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;", "    std::string sub = file_name.substr(0,file_name.find('.'));\n    std::regex\
    \ nums(\"\\\\d{3,}\");\n    std::regex num(\"\\\\d\");\n    int digits = std::distance(std::sregex_iterator(file_name.begin(),\
    \ file_name.end(), num),\n                               std::sregex_iterator());\n\
    \    std::smatch m;\n    std::regex a(\"^[a-zA-Z]\\\\w*[.][txt,exe,dll]$\");\n\
    \    std::regex_search(file_name, m, a);\n    // std::cout << m.size() << \"\\\
    n\";\n    if(std::regex_search(file_name, nums) || (digits > 3) || file_name.find('.')\
    \ > file_name.length()-4 || sub.empty() || !m.size())\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";", "    \n    int len = file_name.length();\n\
    \    if(file_name[0]<'a' || file_name[0]>'z')\n    {\n        if(file_name[0]<'A'\
    \ || file_name[0]>'Z')\n        {\n            return \"No\";\n        }\n   \
    \ }\n    int i,j;\n    int counter = 0;\n    for(i=0;i<len;i++)\n    {\n     \
    \   if(file_name[i]>='0' && file_name[i]<='9')\n        {\n            counter++;\n\
    \        }\n    }\n    if(counter>3)\n    {\n        return \"No\";\n    }\n \
    \   std::string string_to_check = \"\";\n    for(i=0;i<len;i++)\n    {\n     \
    \   if(file_name[i]=='.')\n        {\n            break;\n        }\n        string_to_check\
    \ = string_to_check + file_name[i];\n    }\n    if(string_to_check.length()==0)\n\
    \    {\n        return \"No\";\n    }\n    int flag = 0;\n    for(j=i+1;j<len;j++)\n\
    \    {\n        if(file_name[j]=='t' || file_name[j]=='e' || file_name[j]=='x'\
    \ || file_name[j]=='d' || file_name[j]=='l')\n        {\n            flag = 1;\n\
    \        }\n        else\n        {\n            flag = 0;\n            break;\n\
    \        }\n    }\n    if(flag==1)\n    {\n        return \"Yes\";\n    }\n  \
    \  else\n    {\n        return \"No\";\n    }", "  int counter = 0;\n  if (file_name.find(\"\
    .\") == std::string::npos) {\n    return \"No\";\n  }\n  if (file_name.find(\"\
    ..\") != std::string::npos) {\n    return \"No\";\n  }\n  for (int i = 0; i <\
    \ file_name.length(); i++) {\n    if (file_name[i] == '.') {\n      counter++;\n\
    \    }\n  }\n  if (counter > 1) {\n    return \"No\";\n  }\n  std::string ext\
    \ = file_name.substr(file_name.find(\".\") + 1);\n  if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") {\n    return \"No\";\n  }\n  std::string noExt\
    \ = file_name.substr(0, file_name.find(\".\"));\n  for (int i = 0; i < noExt.length();\
    \ i++) {\n    if (isdigit(noExt[i])) {\n      return \"No\";\n    }\n  }\n  return\
    \ \"Yes\";", "    if (count(file_name.begin(), file_name.end(), '.') != 1) return\
    \ \"No\";\n    string a = file_name.substr(0, file_name.find(\".\"));\n    string\
    \ b = file_name.substr(file_name.find(\".\") + 1);\n    if (count(a.begin(), a.end(),\
    \ '0') > 3 || count(a.begin(), a.end(), '1') > 3 || count(a.begin(), a.end(),\
    \ '2') > 3 || count(a.begin(), a.end(), '3') > 3 || count(a.begin(), a.end(),\
    \ '4') > 3 || count(a.begin(), a.end(), '5') > 3 || count(a.begin(), a.end(),\
    \ '6') > 3 || count(a.begin(), a.end(), '7') > 3 || count(a.begin(), a.end(),\
    \ '8') > 3 || count(a.begin(), a.end(), '9') > 3) return \"No\";\n    if (!(b\
    \ == \"txt\" || b == \"exe\" || b == \"dll\")) return \"No\";\n    if (!(isalpha(a[0])))\
    \ return \"No\";\n    if (a == \"\") return \"No\";\n    return \"Yes\";", " \
    \   int digits_count = 0;\n    bool dot_found = false;\n    bool valid_extension\
    \ = false;\n    std::string sub_before_dot;\n    std::string sub_after_dot;\n\
    \    std::size_t start = 0;\n    std::size_t dot_position = file_name.find('.');\n\
    \    // loop over string\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        // check if char is digit or not, if yes, increment digits_count\n  \
    \      if (isdigit(file_name[i])) {\n            digits_count++;\n        }\n\
    \        // if char is dot, set dot_found to true, and store the string before\
    \ dot\n        if (file_name[i] == '.') {\n            dot_found = true;\n   \
    \         sub_before_dot = file_name.substr(start, dot_position);\n          \
    \  // store string after dot\n            sub_after_dot = file_name.substr(dot_position\
    \ + 1, file_name.length());\n        }\n    }\n    // check if digits_count is\
    \ greater than 3, if yes, return \"No\"\n    if (digits_count > 3) {\n       \
    \ return \"No\";\n    }\n    // check if string before dot is not empty, and starts\
    \ with letter\n    if (sub_before_dot != \"\" && isalpha(sub_before_dot[0])) {\n\
    \        // check if string after dot is valid, if yes, return \"Yes\"\n     \
    \   if (sub_after_dot == \"txt\" || sub_after_dot == \"exe\" || sub_after_dot\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n    }\n    // return\
    \ \"No\"\n    return \"No\";", "    const int min_len = 5;\n    const int max_len\
    \ = 10;\n    const int mid_len = 4;\n    if (file_name.length() < min_len || file_name.length()\
    \ > max_len)\n        return \"No\";\n    int dot_pos = -1;\n    int num_count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_pos = i;\n            continue;\n        }\n    \
    \    if (isdigit(file_name[i])) {\n            num_count++;\n            if (num_count\
    \ > 3)\n                return \"No\";\n        }\n    }\n    if (dot_pos == -1)\n\
    \        return \"No\";\n    if (dot_pos < 1 || !isalpha(file_name[0]))\n    \
    \    return \"No\";\n    std::string sub = file_name.substr(dot_pos + 1, mid_len);\n\
    \    if (sub != \"txt\" && sub != \"exe\" && sub != \"dll\")\n        return \"\
    No\";\n    return \"Yes\";", "    int count = 0;\n    bool check = false;\n  \
    \  bool dot = false;\n    bool first_char = false;\n    std::string s = \"\";\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot = true;\n            check = true;\n        }\n \
    \       if(!dot) {\n            if(file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n                first_char = true;\n            }\n            if(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n                first_char = true;\n     \
    \       }\n        }\n        if(check) {\n            s += file_name[i];\n  \
    \      }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    if(dot)\
    \ {\n        if(!first_char) {\n            return \"No\";\n        }\n      \
    \  if(s != \".txt\" && s != \".exe\" && s != \".dll\") {\n            return \"\
    No\";\n        }\n    }\n    else {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";", "    for(char& i : file_name) if(isdigit(i)) return \"No\";\n   \
    \ int count = 0;\n    for(char& i : file_name) if(i == '.') count++;\n    if(count\
    \ != 1) return \"No\";\n    if(file_name.substr(file_name.find('.') + 1) != \"\
    txt\" && file_name.substr(file_name.find('.') + 1) != \"exe\" && file_name.substr(file_name.find('.')\
    \ + 1) != \"dll\") return \"No\";\n    if(file_name.substr(0, file_name.find('.'))\
    \ == \"\") return \"No\";\n    if(!isalpha(file_name[0])) return \"No\";\n   \
    \ return \"Yes\";", "    bool dot = false;\n    bool extention = false;\n    int\
    \ count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot = true;\n            count = 0;\n        } else if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        } else if(file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            dot = false;\n            count\
    \ = 0;\n        } else if(file_name[i] >= 'A' && file_name[i] <= 'Z') {\n    \
    \        dot = false;\n            count = 0;\n        } else if(file_name[i]\
    \ == 't' && file_name[i+1] == 'x' && file_name[i+2] == 't') {\n            extention\
    \ = true;\n        } else if(file_name[i] == 'e' && file_name[i+1] == 'x' && file_name[i+2]\
    \ == 'e') {\n            extention = true;\n        } else if(file_name[i] ==\
    \ 'd' && file_name[i+1] == 'l' && file_name[i+2] == 'l') {\n            extention\
    \ = true;\n        }\n    }\n    return (dot && count <= 3 && extention) ? \"\
    Yes\" : \"No\";", "\tint dot = 0;\n\tint count = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t}\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count >\
    \ 3) {\n\t\treturn \"No\";\n\t}\n\tif (dot != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    else {\n\t\tif ((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z')) {\n\t\t\tif (file_name.substr(file_name.find(\"\
    .\") + 1) == \"txt\" || file_name.substr(file_name.find(\".\") + 1) == \"exe\"\
    \ || file_name.substr(file_name.find(\".\") + 1) == \"dll\") {\n\t\t\t\treturn\
    \ \"Yes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\t\
    else {\n\t\t\treturn \"No\";\n\t\t}\n\t}", "    std::regex reg(\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\");\n    std::smatch match;\n    return std::regex_match(file_name,\
    \ match, reg) ? \"Yes\" : \"No\";", "  int dot_position = file_name.find(\".\"\
    );\n  int digits_counter = 0;\n  for (int i = 0; i < file_name.length(); i++)\
    \ {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digits_counter++;\n\
    \    }\n  }\n  if (digits_counter > 3) {\n    return \"No\";\n  }\n  if (dot_position\
    \ == -1) {\n    return \"No\";\n  }\n  std::string before_dot = file_name.substr(0,\
    \ dot_position);\n  std::string after_dot = file_name.substr(dot_position + 1,\
    \ file_name.length() - dot_position - 1);\n  if ((before_dot.length() == 0) ||\
    \ ((before_dot[0] < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z'))) {\n    return \"No\";\n  }\n  if ((after_dot != \"txt\") && (after_dot\
    \ != \"exe\") && (after_dot != \"dll\")) {\n    return \"No\";\n  }\n  return\
    \ \"Yes\";", "    std::regex reg(R\"(^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$)\"\
    );\n    return std::regex_match(file_name, reg) ? \"Yes\" : \"No\";", "  int dot_counter=0;\n\
    \  if(isdigit(file_name[0]))\n    return \"No\";\n  for(int i=0;i<file_name.length();i++){\n\
    \    if(file_name[i]=='.')\n      dot_counter++;\n    if(file_name[i]=='.' &&\
    \ file_name[i+1]=='t' && file_name[i+2]=='x' && file_name[i+3]=='t')\n      return\
    \ \"Yes\";\n    if(file_name[i]=='.' && file_name[i+1]=='e' && file_name[i+2]=='x'\
    \ && file_name[i+3]=='e')\n      return \"Yes\";\n    if(file_name[i]=='.' &&\
    \ file_name[i+1]=='d' && file_name[i+2]=='l' && file_name[i+3]=='l')\n      return\
    \ \"Yes\";\n  }\n  if(dot_counter!=1)\n    return \"No\";\n  return \"Yes\";",
  "\tint count = 0;\n\tint size = file_name.size();\n\tint pos1, pos2;\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tif (isdigit(file_name[i])) {\n\t\t\tcount++;\n\t\
    \t}\n\t\tif (file_name[i] == '.') {\n\t\t\tpos1 = i;\n\t\t}\n\t}\n\tpos2 = pos1\
    \ + 1;\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\tif (pos1 == 0 || pos1 ==\
    \ size - 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string str;\n\tstr = file_name.substr(pos2,\
    \ size - pos2);\n\tif (str != \"txt\" && str != \"exe\" && str != \"dll\") {\n\
    \t\treturn \"No\";\n\t}\n\treturn \"Yes\";", "\tstd::string substr1, substr2;\n\
    \n\t// for dot check\n\tif (file_name.find('.') == std::string::npos)\n\t\treturn\
    \ \"No\";\n\n\t// for starting check\n\tif (file_name[0] < 'a' || file_name[0]\
    \ > 'z')\n\t\treturn \"No\";\n\n\t// for 3 digits check\n\tint count = 0;\n\t\
    for (auto ch : file_name)\n\t\tif (ch >= '0' && ch <= '9')\n\t\t\tcount++;\n\t\
    if (count > 3)\n\t\treturn \"No\";\n\n\t// for extention check\n\tsize_t pos =\
    \ file_name.find('.');\n\tsubstr1 = file_name.substr(pos + 1);\n\tstd::transform(substr1.begin(),\
    \ substr1.end(), substr1.begin(), ::tolower);\n\tstd::cout << substr1 << \"\\\
    n\";\n\tif (substr1 == \"txt\" || substr1 == \"exe\" || substr1 == \"dll\")\n\t\
    \treturn \"Yes\";\n\telse\n\t\treturn \"No\";", "  regex e(\"([A-Za-z][A-Za-z0-9]*)(\\\
    \\.)(txt|exe|dll)\");\n  smatch m;\n  bool check = regex_match(file_name, m, e);\n\
    \  if(check){\n    return \"Yes\";\n  }\n  return \"No\";", "\tbool ok = true;\n\
    \tint dot_pos = -1;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (!((file_name[i]\
    \ >= '0' && file_name[i] <= '9') || (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ || (file_name[i] >= 'A' && file_name[i] <= 'Z') || file_name[i] == '.'))\n\t\
    \t\tok = false;\n\t\tif (file_name[i] == '.') {\n\t\t\tif (dot_pos != -1) ok =\
    \ false;\n\t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (ok == false) return \"No\";\n\t\
    if (dot_pos == -1) return \"No\";\n\tif (dot_pos == 0) return \"No\";\n\tif (!((file_name[0]\
    \ >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A' && file_name[0] <= 'Z')))\
    \ return \"No\";\n\tif (file_name.substr(dot_pos + 1, file_name.size() - dot_pos\
    \ - 1) != \"txt\" && file_name.substr(dot_pos + 1, file_name.size() - dot_pos\
    \ - 1) != \"exe\" && file_name.substr(dot_pos + 1, file_name.size() - dot_pos\
    \ - 1) != \"dll\") return \"No\";\n\treturn \"Yes\";", "    int i=0, cnt=0, dot=0;\n\
    \    // std::regex r (\"^[a-zA-Z][a-zA-Z0-9]+\\.txt|exe|dll$\");\n    // std::regex\
    \ r (\"^[a-zA-Z][a-zA-Z0-9]+\\.(txt|exe|dll)$\");\n    std::regex r (\"^[a-zA-Z][a-zA-Z0-9]+\\\
    \\.(txt|exe|dll)$\");\n    std::smatch s;\n    std::regex_search(file_name, s,\
    \ r);\n    if(s.empty())\n        return \"No\";\n    for(i=0; i<file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            dot = 1;\n          \
    \  cnt = 0;\n        }\n        else if(file_name[i] >='0' && file_name[i] <=\
    \ '9')\n            cnt++;\n        if(cnt>3)\n            return \"No\";\n  \
    \  }\n    if(dot == 0)\n        return \"No\";\n    return \"Yes\";", "    //\
    \ your code here\n    if (file_name.find(\".\") == std::string::npos)\n      \
    \  return \"No\";\n    if (file_name.substr(0, file_name.find(\".\")).empty())\n\
    \        return \"No\";\n    if (file_name.substr(file_name.find(\".\") + 1, file_name.length()\
    \ - file_name.find(\".\")).empty())\n        return \"No\";\n    if (file_name.find(\"\
    .\") != file_name.rfind(\".\"))\n        return \"No\";\n    if (file_name.substr(file_name.find(\"\
    .\") + 1, file_name.length() - file_name.find(\".\")).length() > 3)\n        return\
    \ \"No\";\n    std::regex pattern(\"[a-zA-Z]\");\n    if (!std::regex_match(file_name.substr(0,\
    \ file_name.find(\".\")), pattern))\n        return \"No\";\n    if (file_name.find_first_of(\"\
    0123456789\") != std::string::npos) {\n        int count = 0;\n        for (int\
    \ i = 0; i < file_name.length(); i++) {\n            if (isdigit(file_name[i]))\n\
    \                count++;\n        }\n        if (count > 3)\n            return\
    \ \"No\";\n    }\n    std::vector<std::string> v = {\"txt\", \"exe\", \"dll\"\
    };\n    if (std::find(v.begin(), v.end(), file_name.substr(file_name.find(\".\"\
    ) + 1, file_name.length() - file_name.find(\".\"))) == v.end())\n        return\
    \ \"No\";\n    return \"Yes\";", "  char file_name_chars[file_name.length() +\
    \ 1];\n  strcpy(file_name_chars, file_name.c_str());\n  char* file_name_arr[file_name.length()\
    \ + 1];\n  char* cur_file_name = strtok(file_name_chars, \".\");\n  int file_name_count\
    \ = 0;\n  while (cur_file_name != NULL) {\n    file_name_arr[file_name_count]\
    \ = cur_file_name;\n    cur_file_name = strtok(NULL, \".\");\n    file_name_count++;\n\
    \  }\n  std::string allowed_extensions[3] = {\"txt\", \"exe\", \"dll\"};\n  std::string\
    \ file_extension = file_name_arr[1];\n  int number_of_digits = 0;\n  for (int\
    \ i = 0; i < file_name_arr[0].length(); i++) {\n    if (file_name_arr[0][i] >=\
    \ '0' && file_name_arr[0][i] <= '9') {\n      number_of_digits++;\n    }\n  }\n\
    \  if (file_name_count != 2 || number_of_digits > 3 ||\n      std::find(allowed_extensions,\
    \ allowed_extensions + 3, file_extension) == allowed_extensions + 3) {\n    return\
    \ \"No\";\n  }\n  return \"Yes\";", "  int n = file_name.size();\n  int count\
    \ = 0;\n  bool b = false;\n  std::string s = \"\";\n  std::string f = \"\";\n\
    \  for(int i = 0; i < n; i++) {\n    if(file_name[i] == '.') {\n      b = true;\n\
    \      continue;\n    }\n    if(!b) {\n      s += file_name[i];\n    } else {\n\
    \      f += file_name[i];\n    }\n  }\n  int k = s.size();\n  for(int i = 0; i\
    \ < k; i++) {\n    if(isdigit(s[i])) {\n      count++;\n    }\n  }\n  if(count\
    \ > 3) {\n    return \"No\";\n  }\n  if(!isalpha(s[0])) {\n    return \"No\";\n\
    \  }\n  if(f != \"txt\" && f != \"exe\" && f != \"dll\") {\n    return \"No\"\
    ;\n  }\n  return \"Yes\";", "    int dot_index = file_name.find('.');\n    std::string\
    \ name_extension = file_name.substr(dot_index);\n    std::string name = file_name.substr(0,\
    \ dot_index);\n    if ((name_extension != \".txt\" && name_extension != \".exe\"\
    \ && name_extension != \".dll\") || name.length() == 0 ||\n        name.find_first_not_of(\"\
    0123456789\") == std::string::npos ||\n        name.length() - name.find_first_not_of(\"\
    0123456789\") > 3)\n        return \"No\";\n    return \"Yes\";", "    int len\
    \ = file_name.length();\n    // This is a dummy string that simply contains a\
    \ '.'.\n    std::string dummy_dot = \".\";\n    // If the lenght of the filename\
    \ is less than 4, then it cannot have a valid extension.\n    if (len < 4) {\n\
    \        return \"No\";\n    }\n    // If the number of occurences of the '.'\
    \ is not equal to 1, then it cannot have\n    // a valid extension.\n    if (std::count(file_name.begin(),\
    \ file_name.end(), '.') != 1) {\n        return \"No\";\n    }\n    // split_string\
    \ contains the file name and its extension.\n    std::vector<std::string> split_string;\n\
    \    // We now split the string based on '.' and store it in split_string.\n \
    \   std::stringstream ss(file_name);\n    std::string token;\n    while (std::getline(ss,\
    \ token, '.')) {\n        split_string.push_back(token);\n    }\n    // We check\
    \ if the substring before the dot contains any characters other than letters.\n\
    \    // If it does, then the substring is invalid.\n    if (split_string[0].find_first_not_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    // We check if the substring before the\
    \ dot contains any digits.\n    // If it does, then the substring is invalid.\n\
    \    if (split_string[0].find_first_of(\"0123456789\") != std::string::npos) {\n\
    \        return \"No\";\n    }\n    // If the substring after the dot does not\
    \ equal any of the valid extensions,\n    // then the extension is invalid.\n\
    \    if (split_string[1] != \"txt\" && split_string[1] != \"exe\" && split_string[1]\
    \ != \"dll\") {\n        return \"No\";\n    }\n    // Otherwise, the filename\
    \ is valid.\n    return \"Yes\";", "  std::regex pattern(\"^([a-zA-Z]{1}[a-zA-Z0-9]*)(\\\
    \\.txt|\\\\.exe|\\\\.dll)$\");\n  return std::regex_match(file_name, pattern)\
    \ ? \"Yes\" : \"No\";", "\tstd::string str_before_dot;\n\tstd::string str_after_dot;\n\
    \tint digits = 0;\n\tint count_dot = 0;\n\tbool is_valid = true;\n\tfor (char\
    \ c : file_name) {\n\t\tif (c == '.') {\n\t\t\tcount_dot++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (count_dot == 0) {\n\t\t\tif (c >= '0' && c <= '9')\n\t\t\t\tdigits++;\n\
    \t\t\tif (digits > 3) {\n\t\t\t\tis_valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\tstr_before_dot += c;\n\t\t}\n\t\telse if (count_dot == 1) {\n\t\t\tstr_after_dot\
    \ += c;\n\t\t}\n\t\telse {\n\t\t\tis_valid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tif (count_dot != 1)\n\t\tis_valid = false;\n\tif (str_before_dot.size() == 0)\n\
    \t\tis_valid = false;\n\tif (str_before_dot[0] < 'A' || str_before_dot[0] > 'z')\n\
    \t\tis_valid = false;\n\tif (str_after_dot != \"txt\" && str_after_dot != \"exe\"\
    \ && str_after_dot != \"dll\")\n\t\tis_valid = false;\n\treturn is_valid ? \"\
    Yes\" : \"No\";", "  std::regex rgx(\"^([a-zA-Z][a-zA-Z0-9]{0,3}).(txt|exe|dll)$\"\
    );\n  return std::regex_match(file_name, rgx) ? \"Yes\" : \"No\";", "    std::string\
    \ number = \"0123456789\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string format = \"txt\", \"exe\", \"dll\";\n    int len = file_name.length();\n\
    \    int count = 0;\n    int index;\n    int count_alpha = 0;\n    int alpha_index;\n\
    \    int count_dot = 0;\n    int dot_index;\n    int count_format = 0;\n    for\
    \ (int i = 0; i < len; i++) {\n        for (int j = 0; j < number.length(); j++)\
    \ {\n            if (file_name[i] == number[j]) {\n                count++;\n\
    \                index = i;\n            }\n        }\n        for (int j = 0;\
    \ j < alphabet.length(); j++) {\n            if (file_name[i] == alphabet[j])\
    \ {\n                count_alpha++;\n                alpha_index = i;\n      \
    \      }\n        }\n        if (file_name[i] == '.') {\n            count_dot++;\n\
    \            dot_index = i;\n        }\n        for (int j = 0; j < format.length();\
    \ j++) {\n            std::string str = file_name.substr(dot_index + 1, len -\
    \ dot_index);\n            if (str == format[j]) {\n                count_format++;\n\
    \            }\n        }\n    }\n    if (count <= 3 && count_alpha == 1 && count_dot\
    \ == 1 && count_format == 1) {\n        return \"Yes\";\n    }\n    else {\n \
    \       return \"No\";\n    }", "    int count = 0;\n    int i;\n    for(i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    std::string substr_before;\n    std::string substr_after;\n\
    \    int j;\n    for(j = 0; j < file_name.length(); j++) {\n        if(file_name[j]\
    \ == '.') {\n            substr_before = file_name.substr(0, j);\n           \
    \ substr_after = file_name.substr(j+1, file_name.length()-1);\n            break;\n\
    \        }\n    }\n    if(!substr_before.length() || substr_before[0] < 'a' ||\
    \ substr_before[0] > 'z') {\n        return \"No\";\n    }\n    if(substr_after\
    \ != \"txt\" && substr_after != \"exe\" && substr_after != \"dll\") {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";", "  int a=0,b=0,c=0,d=0,e=0,f=0,g=0,count\
    \ = 0;\n  for(int i=0; i<file_name.length(); i++){\n    if(a==0 && file_name[i]>='a'\
    \ && file_name[i]<='z')\n      a=1;\n    else if(b==0 && file_name[i]>='A' &&\
    \ file_name[i]<='Z')\n      b=1;\n    else if(c==0 && file_name[i]>='0' && file_name[i]<='9')\n\
    \      c=1;\n    else if(d==0 && file_name[i]=='.')\n      d=1;\n    else if(e==0\
    \ && file_name[i]=='.')\n      e=1;\n    else if(f==0 && file_name[i]=='.')\n\
    \      f=1;\n    else if(g==0 && file_name[i]=='.')\n      g=1;\n    else\n  \
    \    count++;\n  }\n  if(a==1 && b==1 && c==1 && d==1 && e==1 && f==1 && g==1\
    \ && count == 0)\n    return \"Yes\";\n  else\n    return \"No\";", "    std::regex\
    \ pattern{\"^[a-zA-Z]\\\\w*(\\\\.exe|\\\\.txt|\\\\.dll)$\"};\n    std::smatch\
    \ matches;\n    std::regex_search(file_name, matches, pattern);\n    return matches.size()\
    \ ? \"Yes\" : \"No\";", "    int len = file_name.length();\n    int num = 0;\n\
    \    std::string temp = \"\";\n    bool dot_exist = false;\n    bool first_letter\
    \ = false;\n    bool file_name_valid = false;\n    for(int i = 0; i < len; i++){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            num++;\n\
    \        }else if(file_name[i] == '.'){\n            if(!dot_exist){\n       \
    \         dot_exist = true;\n            }else{\n                break;\n    \
    \        }\n        }else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z'){\n            if(!first_letter){\n          \
    \      first_letter = true;\n            }\n        }\n        if(file_name[i]\
    \ != '.'){\n            temp += file_name[i];\n        }\n    }\n    if(num <=\
    \ 3 && dot_exist && first_letter){\n        if(temp == \"txt\" || temp == \"exe\"\
    \ || temp == \"dll\"){\n            file_name_valid = true;\n        }\n    }\n\
    \    if(file_name_valid){\n        return \"Yes\";\n    }else{\n        return\
    \ \"No\";\n    }", "    std::string alphas = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string types = \"txtexe\";\n    std::string suffixes = \"dle\";\n\
    \    int count = 0;\n    std::string str1, str2;\n    if(file_name.find('.') !=\
    \ std::string::npos) {\n        str1 = file_name.substr(0, file_name.find('.'));\n\
    \        str2 = file_name.substr(file_name.find('.') + 1);\n        if(str1.length()\
    \ == 0) {\n            return \"No\";\n        }\n        if(!(alphas.find(str1[0])\
    \ != std::string::npos)) {\n            return \"No\";\n        }\n        for(int\
    \ i = 0; i < str1.length(); i++) {\n            if(alphas.find(str1[i]) == std::string::npos)\
    \ {\n                count++;\n            }\n        }\n        if(count > 3)\
    \ {\n            return \"No\";\n        }\n        if(str2.length() != 3) {\n\
    \            return \"No\";\n        }\n        for(int i = 0; i < 3; i++) {\n\
    \            if(!(types.find(str2[i]) != std::string::npos)) {\n             \
    \   return \"No\";\n            }\n        }\n        if(suffixes.find(str2[2])\
    \ == std::string::npos) {\n            return \"No\";\n        }\n        return\
    \ \"Yes\";\n    }\n    return \"No\";", "    std::regex file_check(\"^([a-zA-Z]{1})([a-zA-Z0-9]{0,3}).(txt|exe|dll)$\"\
    );\n    return std::regex_match(file_name, file_check) ? \"Yes\" : \"No\";", " \
    \   // your code here\n    std::string result = \"No\";\n    std::string str_dot(\"\
    .\");\n    std::string str_txt(\".txt\");\n    std::string str_exe(\".exe\");\n\
    \    std::string str_dll(\".dll\");\n    std::size_t found = file_name.find(\"\
    .\");\n    if(found != std::string::npos)\n    {\n        std::string sub_str1\
    \ = file_name.substr(0,found);\n        std::string sub_str2 = file_name.substr(found+1);\n\
    \        //std::cout<<sub_str1<<\"\\n\";\n        //std::cout<<sub_str2<<\"\\\
    n\";\n        int count = 0;\n        for(int i=0;i<sub_str1.length();i++)\n \
    \       {\n            if(std::isdigit(sub_str1[i]))\n            {\n        \
    \        count++;\n            }\n        }\n        if(count<=3)\n        {\n\
    \            if(sub_str1[0]>='a' && sub_str1[0]<='z' || sub_str1[0]>='A' && sub_str1[0]<='Z')\n\
    \            {\n                if(sub_str2.compare(str_txt)==0 || sub_str2.compare(str_exe)==0\
    \ || sub_str2.compare(str_dll)==0)\n                {\n                    result\
    \ = \"Yes\";\n                }\n            }\n        }\n    }\n    return result;",
  "\tint len = file_name.length();\n\tint count = 0;\n\tint position = 0;\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tposition = i;\n\
    \t\t}\n\t}\n\tif (count <= 3 && position > 0 && (file_name[position + 1] == 't'\
    \ && file_name[position + 2] == 'x' && file_name[position + 3] == 't' || file_name[position\
    \ + 1] == 'e' && file_name[position + 2] == 'x' && file_name[position + 3] ==\
    \ 'e' || file_name[position + 1] == 'd' && file_name[position + 2] == 'l' && file_name[position\
    \ + 3] == 'l')) {\n\t\treturn \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";\n\t}",
  "  int dot_pos = -1;\n  int digit_cnt = 0;\n  for (int i = 0; i < file_name.size();\
    \ i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digit_cnt++;\n\
    \    }\n    if (file_name[i] == '.') {\n      dot_pos = i;\n    }\n  }\n  if (digit_cnt\
    \ > 3) {\n    return \"No\";\n  }\n  if (dot_pos == -1) {\n    return \"No\";\n\
    \  }\n  if (dot_pos == 0) {\n    return \"No\";\n  }\n  if (file_name[dot_pos+1]\
    \ == 't' &&\n      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3]\
    \ == 't') {\n    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'e' &&\n\
    \      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3] == 'e') {\n\
    \    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'd' &&\n      file_name[dot_pos+2]\
    \ == 'l' &&\n      file_name[dot_pos+3] == 'l') {\n    return \"Yes\";\n  }\n\
    \  return \"No\";", '  return file_name;', "  int count_dot = 0;\n  int count_digit\
    \ = 0;\n  // count the number of dots in the file name\n  for (size_t i = 0; i\
    \ < file_name.size(); i++) {\n    if (file_name[i] == '.') {\n      count_dot++;\n\
    \    }\n  }\n  // count the number of digits in the file name\n  for (size_t i\
    \ = 0; i < file_name.size(); i++) {\n    if (isdigit(file_name[i])) {\n      count_digit++;\n\
    \    }\n  }\n  // the file's name contains exactly one dot '.'\n  if (count_dot\
    \ != 1) {\n    return \"No\";\n  }\n  // There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n  if (count_digit > 3) {\n    return \"No\";\n\
    \  }\n  // get the substring after the dot\n  std::string extension;\n  size_t\
    \ pos = file_name.find('.');\n  extension = file_name.substr(pos + 1);\n  // The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  if\
    \ (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n \
    \   return \"No\";\n  }\n  // The substring before the dot should not be empty,\
    \ and it starts with a letter \n  // from the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \  std::string name = file_name.substr(0, pos);\n  if (name.empty() || !isalpha(name[0]))\
    \ {\n    return \"No\";\n  }\n  return \"Yes\";", "    string extensions[3] =\
    \ {\"txt\", \"exe\", \"dll\"};\n    int count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n\
    \    }\n    string ext = file_name.substr(file_name.find(\".\") + 1);\n    for(int\
    \ i = 0; i < 3; i++) {\n        if (extensions[i] == ext) {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";", "    std::string invalid_ext[]\
    \ = {\"txt\", \"exe\", \"dll\"};\n    int digit_count = 0;\n    int dot_count\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(isdigit(file_name[i]))\n\
    \            digit_count++;\n        if(file_name[i] == '.')\n            dot_count++;\n\
    \    }\n    if(dot_count != 1 || digit_count > 3) {\n        return \"No\";\n\
    \    }\n    std::string name = file_name.substr(0, file_name.find(\".\"));\n \
    \   std::string ext = file_name.substr(file_name.find(\".\") + 1);\n    if(name.length()\
    \ == 0 || !isalpha(name[0])) {\n        return \"No\";\n    }\n    for(int i =\
    \ 0; i < 3; i++) {\n        if(ext == invalid_ext[i]) {\n            return \"\
    Yes\";\n        }\n    }\n    return \"No\";", "    // TODO: implement the function.\n\
    \    std::regex pattern{R\"(([a-zA-Z][^.]+\\.(exe|txt|dll)))\"};\n    return std::regex_match(file_name,\
    \ pattern) ? \"Yes\" : \"No\";", '    return "";', "    // check if there is more\
    \ than 3 digits\n    int cnt = 0;\n    for (char c : file_name)\n        if (c\
    \ >= '0' && c <= '9')\n            cnt++;\n    if (cnt > 3)\n        return \"\
    No\";\n    // check if there is only one dot\n    int cnt2 = 0;\n    for (char\
    \ c : file_name)\n        if (c == '.')\n            cnt2++;\n    if (cnt2 !=\
    \ 1)\n        return \"No\";\n    // get the substring before the dot\n    int\
    \ dot_pos = 0;\n    for (int i = 0; i < file_name.size(); i++)\n        if (file_name[i]\
    \ == '.')\n            dot_pos = i;\n    std::string before_dot = file_name.substr(0,\
    \ dot_pos);\n    // check if the substring before the dot is empty\n    if (before_dot.size()\
    \ == 0)\n        return \"No\";\n    // check if the substring before the dot\
    \ starts with latin alphapet\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n\
    \        if (before_dot[0] < 'A' || before_dot[0] > 'Z')\n            return \"\
    No\";\n    // get the substring after the dot\n    std::string after_dot = file_name.substr(dot_pos\
    \ + 1);\n    // check if the substring after the dot is legal\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";", "    regex file_pattern(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$|^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$|^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\"\
    );\n    return regex_match(file_name, file_pattern) ? \"Yes\" : \"No\";", "\t\
    regex pattern(\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\");\n\tif (regex_match(file_name,\
    \ pattern)) {\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";", "  std::string result\
    \ = \"No\";\n  size_t index_of_dot;\n  std::set<std::string> extensions = {\"\
    txt\", \"exe\", \"dll\"};\n  int count = 0;\n  for (int i = 0; i < file_name.length();\
    \ i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      count++;\n\
    \    }\n    if (file_name[i] == '.') {\n      index_of_dot = i;\n    }\n  }\n\
    \  if (count <= 3 && file_name[index_of_dot - 1] >= 'a' &&\n      file_name[index_of_dot\
    \ - 1] <= 'z' &&\n      file_name[index_of_dot - 1] >= 'A' &&\n      file_name[index_of_dot\
    \ - 1] <= 'Z' &&\n      extensions.find(file_name.substr(index_of_dot + 1)) !=\
    \ extensions.end()) {\n    result = \"Yes\";\n  }\n  return result;", "    if\
    \ (file_name.empty()) return \"No\";\n    if (file_name.find('.') == std::string::npos)\
    \ return \"No\";\n    if (file_name.find('.') == 0) return \"No\";\n    if (file_name.rfind('.')\
    \ == file_name.size() - 1) return \"No\";\n    int count = 0;\n    bool valid\
    \ = false;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if\
    \ (file_name[i] == '.') {\n            if (file_name[i - 1] >= '0' && file_name[i\
    \ - 1] <= '9') return \"No\";\n            if (file_name[i + 1] >= '0' && file_name[i\
    \ + 1] <= '9') return \"No\";\n            if (file_name[i + 1] < 'a' || file_name[i\
    \ + 1] > 'z') return \"No\";\n            if (file_name[i + 2] < 'a' || file_name[i\
    \ + 2] > 'z') return \"No\";\n            if (file_name[i + 3] < 'a' || file_name[i\
    \ + 3] > 'z') return \"No\";\n            valid = true;\n        }\n    }\n  \
    \  if (count > 3) return \"No\";\n    if (valid) return \"Yes\";\n    return \"\
    No\";", "  if (file_name.size() < 5) return \"No\";\n  bool dot = false;\n  std::string::size_type\
    \ pos = file_name.find('.');\n  if (pos == std::string::npos) return \"No\";\n\
    \  std::string after = file_name.substr(pos + 1);\n  std::string before = file_name.substr(0,\
    \ pos);\n  int cnt = 0;\n  if (after != \"txt\" && after != \"exe\" && after !=\
    \ \"dll\") return \"No\";\n  for (std::string::iterator i = before.begin(); i\
    \ != before.end(); i++) {\n    if (*i >= '0' && *i <= '9') cnt++;\n    if (cnt\
    \ > 3) return \"No\";\n  }\n  if (cnt == 0) return \"No\";\n  if (before[0] <\
    \ 'a' || before[0] > 'z') {\n    if (before[0] < 'A' || before[0] > 'Z') return\
    \ \"No\";\n  }\n  return \"Yes\";", "    int count = 0;\n    if(file_name.length()\
    \ < 5)\n        return \"No\";\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(isdigit(file_name[i]))\n            count++;\n    }\n    if(count\
    \ > 3)\n        return \"No\";\n    if(file_name.find(\".\") == std::string::npos)\n\
    \        return \"No\";\n    else{\n        if(!(file_name.substr(file_name.find(\"\
    .\") + 1, file_name.length() - 1) == \"txt\" || file_name.substr(file_name.find(\"\
    .\") + 1, file_name.length() - 1) == \"exe\" || file_name.substr(file_name.find(\"\
    .\") + 1, file_name.length() - 1) == \"dll\"))\n            return \"No\";\n \
    \   }\n    if(isalpha(file_name[0]))\n        return \"Yes\";\n    else \n   \
    \     return \"No\";", "    for(int i = 0; i < file_name.size(); i++) {\n    \
    \    if(!(file_name[i] >= 'a' && file_name[i] <= 'z') && !(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') && !(file_name[i] >= '0' && file_name[i] <= '9') &&\
    \ file_name[i] != '.') {\n            return \"No\";\n        }\n    }\n    std::string\
    \ str;\n    int c = 0;\n    int dotCount = 0;\n    for(int i = 0; i < file_name.size();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   c++;\n        }\n        if(file_name[i] == '.') {\n            dotCount++;\n\
    \        }\n    }\n    if(c > 3) {\n        return \"No\";\n    }\n    std::string\
    \ substr = file_name.substr(file_name.find('.') + 1);\n    if(dotCount > 1) {\n\
    \        return \"No\";\n    }\n    if(str.empty()) {\n        return \"No\";\n\
    \    }\n    if(!(substr == \"txt\" || substr == \"exe\" || substr == \"dll\"))\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Split the string\
    \ by '.'\n    std::vector<std::string> split_result;\n    std::string temp;\n\
    \    std::stringstream ss(file_name);\n    while (std::getline(ss, temp, '.'))\
    \ {\n        split_result.push_back(temp);\n    }\n    // Check if the size of\
    \ vector is 2\n    if (split_result.size() != 2) {\n        return \"No\";\n \
    \   }\n    // Check if the first substring is not empty and begins with a latin\
    \ alphapet\n    if (split_result[0].empty() || isalpha(split_result[0][0]) ==\
    \ 0) {\n        return \"No\";\n    }\n    // Check if the first substring has\
    \ not more than 3 digits\n    int count = 0;\n    for (int i = 0; i < split_result[0].size();\
    \ i++) {\n        if (isdigit(split_result[0][i])) {\n            count++;\n \
    \       }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    //\
    \ Check if the second substring is one of ['txt', 'exe', 'dll']\n    if (split_result[1]\
    \ != \"txt\" && split_result[1] != \"exe\" && split_result[1] != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "    // C++14!\n    static\
    \ const std::regex pattern {R\"(^([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)$)\"};\n\
    \    if (std::regex_match(file_name, pattern)) return \"Yes\";\n    return \"\
    No\";", "    const int n = file_name.size();\n    int cnt_digits = 0;\n    int\
    \ cnt_dot = 0;\n    int l = 0;\n    int r = 0;\n    for (int i = 0; i < n; ++i)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            ++cnt_digits;\n\
    \        }\n        if (file_name[i] == '.') {\n            ++cnt_dot;\n     \
    \       l = i;\n        }\n    }\n    if (cnt_digits > 3 || cnt_dot != 1) {\n\
    \        return \"No\";\n    }\n    if (file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    r = l + 1;\n    std::string suf = file_name.substr(r);\n\
    \    if (suf != \"txt\" && suf != \"exe\" && suf != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "  assert(file_name.size()>=6 && file_name.size()<=32);\n\
    \  bool count=0;\n  std::string first, second;\n  for(int i=0; i<file_name.size();\
    \ i++){\n    if(file_name[i]=='.') count++;\n    if(count==1) first=file_name.substr(0,\
    \ i);\n    if(count==2) second=file_name.substr(i+1, file_name.size()-i);\n  }\n\
    \  for(int i=0; i<first.size(); i++){\n    if(isdigit(first[i])) return \"No\"\
    ;\n  }\n  if(count!=1) return \"No\";\n  if(first.size()==0) return \"No\";\n\
    \  if(first[0]<'A' || (first[0]>'Z' && first[0]<'a') || first[0]>'z') return \"\
    No\";\n  if(second!=\"txt\" && second!=\"exe\" && second!=\"dll\") return \"No\"\
    ;\n  return \"Yes\";", "  std::regex pat(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    );\n  return std::regex_match(file_name, pat) ? \"Yes\" : \"No\";", "\tint count\
    \ = 0;\n\tint cont = 0;\n\tfor (auto ch : file_name) {\n\t\tif (ch >= '0' && ch\
    \ <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (ch == '.') {\n\t\t\tcont++;\n\t\t\
    }\n\t}\n\tif (count > 3 || cont != 1) {\n\t\treturn \"No\";\n\t}\n\tint index\
    \ = file_name.find('.');\n\tstd::string a = file_name.substr(0, index);\n\tstd::string\
    \ b = file_name.substr(index+1);\n\tif ((a.empty() || a[0] > 'Z' || a[0] < 'A')\
    \ && (a.empty() || a[0] > 'z' || a[0] < 'a')) {\n\t\treturn \"No\";\n\t}\n\tif\
    \ (b == \"txt\" || b == \"exe\" || b == \"dll\") {\n\t\treturn \"Yes\";\n\t}\n\
    \treturn \"No\";", "\tint count=0;\n\tint count1=0;\n\tint count2=0;\n\tfor(auto\
    \ x:file_name)\n\t{\n\t\tif(x>='a' && x<='z' || x>='A' && x<='Z')\n\t\t{\n\t\t\
    \tcount++;\n\t\t}\n\t\tif(x>='0' && x<='9')\n\t\t{\n\t\t\tcount1++;\n\t\t}\n\t\
    \tif(x=='.')\n\t\t{\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif(count==0 || count1>3 ||\
    \ count2>1)\n\t{\n\t\treturn \"No\";\n\t}\n\telse\n\t{\n\t\treturn \"Yes\";\n\t\
    }\n\t", "\tint count = 0;\n\tint dot = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] <= '9' && file_name[i] >= '0') {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot++;\n\t\t}\n\t}\n\tif (count >\
    \ 3 || dot != 1)\n\t\treturn \"No\";\n\tstd::stringstream ss(file_name);\n\tstd::string\
    \ s;\n\tstd::string t;\n\tss >> s;\n\tss >> t;\n\tif (s[0] < 'A' || s[0] > 'z')\n\
    \t\treturn \"No\";\n\tif (t == \"txt\" || t == \"exe\" || t == \"dll\")\n\t\t\
    return \"Yes\";\n\treturn \"No\";", "  // 1. Check if file_name contains '.';\
    \ if not, return 'No'\n  if (file_name.find('.') == std::string::npos) {\n   \
    \ return \"No\";\n  }\n\n  // 2. Count number of digits in file_name\n  //   \
    \ If number of digits is greater than 3, return 'No'\n  int num_digits = 0;\n\
    \  for (int i = 0; i < file_name.length(); i++) {\n    if (isdigit(file_name[i]))\
    \ {\n      num_digits++;\n    }\n  }\n  if (num_digits > 3) {\n    return \"No\"\
    ;\n  }\n\n  // 3. Split file_name into name and extension and check conditions\
    \ for both\n  int dot_position = file_name.find('.');\n  std::string name = file_name.substr(0,\
    \ dot_position);\n  std::string extension = file_name.substr(dot_position + 1);\n\
    \n  // 3.1 Check conditions for name\n  // 3.1.1 Check if name is not empty\n\
    \  if (name.empty()) {\n    return \"No\";\n  }\n  // 3.1.2 Check if name starts\
    \ with a letter\n  if (!isalpha(name[0])) {\n    return \"No\";\n  }\n\n  // 3.2\
    \ Check conditions for extension\n  // 3.2.1 Check if extension is one of the\
    \ allowed extensions\n  std::vector<std::string> allowed_extensions {\"txt\",\
    \ \"exe\", \"dll\"};\n  if (std::find(allowed_extensions.begin(), allowed_extensions.end(),\
    \ extension) == allowed_extensions.end()) {\n    return \"No\";\n  }\n\n  // File\
    \ name is valid\n  return \"Yes\";", "    if (std::count_if(file_name.begin(),\
    \ file_name.end(), isdigit) > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (!isalpha(file_name[0]))\
    \ {\n        return \"No\";\n    }\n    std::string file_ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if (file_ext != \"txt\" && file_ext != \"exe\" && file_ext !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    int ct\
    \ = 0;\n    size_t dot = file_name.find('.');\n    if (dot == std::string::npos\
    \ || dot == 0 || dot == file_name.size() - 1 ||\n        (file_name[dot + 1] !=\
    \ 't' && file_name[dot + 1] != 'e' && file_name[dot + 1] != 'd') ||\n        file_name[dot\
    \ + 2] != 'x' || file_name[dot + 3] != 'e')\n        return \"No\";\n    for (size_t\
    \ i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') continue;\n\
    \        if (file_name[i] < '0' || file_name[i] > '9') break;\n        ct++;\n\
    \    }\n    if (ct > 3) return \"No\";\n    return \"Yes\";", "  int dotPos =\
    \ file_name.find('.');\n  std::string subs;\n  for(int i = 0; i < dotPos; i++)\
    \ {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      return \"No\"\
    ;\n    }\n  }\n  if (dotPos == -1) {\n    return \"No\";\n  }\n  subs = file_name.substr(dotPos+1);\n\
    \  if (subs == \"txt\" || subs == \"exe\" || subs == \"dll\") {\n    return \"\
    Yes\";\n  }\n  return \"No\";", "\tstd::vector<std::string> postfixes{\"txt\"\
    , \"exe\", \"dll\"};\n\tbool is_valid_file_name = true;\n\tint digit_count = 0;\n\
    \tint dot_count = 0;\n\tint postfix_index = -1;\n\tint length = file_name.length();\n\
    \tfor (int i = 0; i < length; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tdigit_count++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\
    \tdot_count++;\n\t\t\tpostfix_index = i;\n\t\t}\n\t}\n\tif (digit_count > 3 ||\
    \ dot_count != 1) {\n\t\tis_valid_file_name = false;\n\t}\n\tif (postfix_index\
    \ == -1 || postfix_index == 0 || postfix_index == length - 1) {\n\t\tis_valid_file_name\
    \ = false;\n\t}\n\tstd::string postfix;\n\tfor (int i = postfix_index + 1; i <\
    \ length; i++) {\n\t\tpostfix += file_name[i];\n\t}\n\tfor (auto const& s : postfixes)\
    \ {\n\t\tif (s == postfix) {\n\t\t\tis_valid_file_name = true;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (is_valid_file_name) {\n\t\treturn \"Yes\";\n\t}\n\treturn \"\
    No\";", "    std::regex rgx(\"[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\");\n    if(std::regex_match(file_name,\
    \ rgx))\n        return \"Yes\";\n    return \"No\";", "    int cnt = 0;\n   \
    \ int cntdot = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len;\
    \ i++) {\n        if(isdigit(file_name[i])) {\n            cnt++;\n        }\n\
    \        if(file_name[i] == '.') {\n            cntdot++;\n        }\n    }\n\
    \    if(cnt <= 3 && cntdot == 1) {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";", "    // check number of digits\n    int count=0;\n    int digits =\
    \ 0;\n    int dot = 0;\n    // loop over the string\n    for(int i=0;i<file_name.length();i++){\n\
    \        // check for digits\n        if(file_name[i]>='0' && file_name[i]<='9'){\n\
    \            count++;\n        }\n        // check for .\n        if(file_name[i]=='.'){\n\
    \            dot++;\n        }\n    }\n    // if digits are more than 3 return\
    \ No\n    if(count>3){\n        return \"No\";\n    }\n    // if . is not present\
    \ or > 1 then return No\n    if(dot==0 || dot>1){\n        return \"No\";\n  \
    \  }\n    // find index of the dot\n    int index = file_name.find('.');\n   \
    \ // get the substring before and after the dot\n    std::string bfr_dot = file_name.substr(0,index);\n\
    \    std::string after_dot = file_name.substr(index+1);\n    // if the before\
    \ dot is empty then return No\n    if(bfr_dot.length()==0){\n        return \"\
    No\";\n    }\n    // check if the before dot starts with letter or not\n    if(!(bfr_dot[0]>='a'\
    \ && bfr_dot[0]<='z') && !(bfr_dot[0]>='A' && bfr_dot[0]<='Z')){\n        return\
    \ \"No\";\n    }\n    // check if the substring after dot is txt, exe or dll\n\
    \    if(after_dot!=\"txt\" && after_dot!=\"exe\" && after_dot!=\"dll\"){\n   \
    \     return \"No\";\n    }\n    // if all the above condition are passed, then\
    \ return Yes\n    return \"Yes\";", "    std::regex patt(R\"(^[a-zA-Z]+\\d{0,3}\\\
    .txt$|^[a-zA-Z]+\\d{0,3}\\.exe$|^[a-zA-Z]+\\d{0,3}\\.dll$)\");\n    if(std::regex_match(file_name,\
    \ patt))\n        return \"Yes\";\n    return \"No\";", "\tint dot_count = 0;\n\
    \tint digit_count = 0;\n\tint extension_length = 0;\n\tbool valid_extension =\
    \ false;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\t// There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n\t\tif (isdigit(file_name[i]))\
    \ {\n\t\t\tdigit_count++;\n\t\t\tif (digit_count > 3) {\n\t\t\t\treturn \"No\"\
    ;\n\t\t\t}\n\t\t}\n\t\t// The file's name contains exactly one dot '.'\n\t\tif\
    \ (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tif (dot_count > 1) {\n\t\t\
    \t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\t// The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n\t\tif (file_name[i] == '.' && i > 0)\
    \ {\n\t\t\textension_length = file_name.length() - i - 1;\n\t\t\tif (extension_length\
    \ == 3 && file_name[i + 1] == 't' && file_name[i + 2] == 'x' && file_name[i +\
    \ 3] == 't') {\n\t\t\t\tvalid_extension = true;\n\t\t\t}\n\t\t\tif (extension_length\
    \ == 3 && file_name[i + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i +\
    \ 3] == 'e') {\n\t\t\t\tvalid_extension = true;\n\t\t\t}\n\t\t\tif (extension_length\
    \ == 3 && file_name[i + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i +\
    \ 3] == 'l') {\n\t\t\t\tvalid_extension = true;\n\t\t\t}\n\t\t}\n\t}\n\tif (valid_extension\
    \ == false) {\n\t\treturn \"No\";\n\t}\n\t// The subst", "  int n = file_name.size();\n\
    \  int count = 0;\n  for(int i = 0; i < n; i++)\n  {\n    if(file_name[i] > 47\
    \ && file_name[i] < 58)\n    {\n      count++;\n    }\n  }\n  if(count > 3)\n\
    \  {\n    return \"No\";\n  }\n  int count1 = 0;\n  for(int i = 0; i < n; i++)\n\
    \  {\n    if(file_name[i] == '.')\n    {\n      count1++;\n    }\n  }\n  if(count1\
    \ != 1)\n  {\n    return \"No\";\n  }\n  int count2 = 0;\n  for(int i = 0; i <\
    \ n; i++)\n  {\n    if(file_name[i] == '.')\n    {\n      count2++;\n    }\n \
    \   if(count2 == 1)\n    {\n      if(file_name[i+1] == 't' && file_name[i+2] ==\
    \ 'x' && file_name[i+3] == 't')\n      {\n        return \"Yes\";\n      }\n \
    \     else if(file_name[i+1] == 'e' && file_name[i+2] == 'x' && file_name[i+3]\
    \ == 'e')\n      {\n        return \"Yes\";\n      }\n      else if(file_name[i+1]\
    \ == 'd' && file_name[i+2] == 'l' && file_name[i+3] == 'l')\n      {\n       \
    \ return \"Yes\";\n      }\n      else\n      {\n        return \"No\";\n    \
    \  }\n    }\n  }", "\tstd::stringstream ss(file_name);\n\tstd::string fname, extension;\n\
    \tstd::getline(ss, fname, '.');\n\tstd::getline(ss, extension, '.');\n\tif(std::count_if(fname.begin(),\
    \ fname.end(), [](char c){return std::isdigit(c);}) > 3 || !std::isalpha(fname[0])\
    \ || (extension != \"txt\" && extension != \"exe\" && extension != \"dll\")) return\
    \ \"No\";\n\treturn \"Yes\";", "\tint count=0;\n\tint dot_count=0;\n\tfor(int\
    \ i=0;i<file_name.length();i++)\n\t{\n\t\tif(file_name[i]=='.')\n\t\t{\n\t\t\t\
    dot_count++;\n\t\t}\n\t\tif(file_name[i]>='0'&&file_name[i]<='9')\n\t\t{\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\tif(count>3||dot_count!=1)\n\t{\n\t\treturn \"No\";\n\
    \t}\n\t\n\tfor(int i=0;i<file_name.length();i++)\n\t{\n\t\tif(file_name[i]=='.')\n\
    \t\t{\n\t\t\tstd::string temp=file_name.substr(i+1,file_name.length()-i-1);\n\t\
    \t\tif(temp!=\"txt\"&&temp!=\"exe\"&&temp!=\"dll\")\n\t\t\t{\n\t\t\t\treturn \"\
    No\";\n\t\t\t}\n\t\t\ttemp=file_name.substr(0,i);\n\t\t\tif(temp==\"\")\n\t\t\t\
    {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(temp[0]>='a'&&temp[0]<='z'||temp[0]>='A'&&temp[0]<='Z')\n\
    \t\t\t\t{\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\
    \t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "    if(file_name.find('.')\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    std::string fname\
    \ = file_name.substr(0, file_name.find('.'));\n    std::string fextension = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(std::count_if(fname.begin(), fname.end(), [](char c) { return\
    \ c >= '0' && c <= '9'; }) > 3) {\n        return \"No\";\n    }\n    if(std::count(file_name.begin(),\
    \ file_name.end(), '.') != 1) {\n        return \"No\";\n    }\n    if(!isalpha(fname[0]))\
    \ {\n        return \"No\";\n    }\n    if(fextension != \"txt\" && fextension\
    \ != \"exe\" && fextension != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";", "  // Your code here!\n  std::regex pattern(\"(^[a-zA-Z]+)([0-9]{0,3})(\\\
    \\.)(txt|exe|dll)$\");\n  std::smatch matches;\n  if(std::regex_match(file_name,\
    \ matches, pattern))\n    return \"Yes\";\n  return \"No\";", "    // your code\
    \ here\n    int start_flag = 0;\n    int dot_flag = 0;\n    int count = 0;\n \
    \   if(file_name.length() <= 3)\n        return \"No\";\n    for(auto i : file_name)\n\
    \    {\n        if(i >= '0' && i <= '9')\n            count++;\n        if(count\
    \ > 3)\n            return \"No\";\n        if(i == '.')\n        {\n        \
    \    if(dot_flag == 1)\n                return \"No\";\n            dot_flag =\
    \ 1;\n        }\n        if(i >= 'a' && i <= 'z' || i >= 'A' && i <= 'Z')\n  \
    \      {\n            if(dot_flag == 1)\n                return \"No\";\n    \
    \        start_flag = 1;\n        }\n    }\n    if(start_flag == 0)\n        return\
    \ \"No\";\n    if(file_name.substr(file_name.length() - 3, file_name.length())\
    \ != \"txt\" && file_name.substr(file_name.length() - 3, file_name.length()) !=\
    \ \"exe\" && file_name.substr(file_name.length() - 3, file_name.length()) != \"\
    dll\")\n        return \"No\";\n    return \"Yes\";", "\tif (std::count_if(file_name.begin(),\
    \ file_name.end(), ::isdigit) > 3)\n\t\treturn \"No\";\n\tif (std::count(file_name.begin(),\
    \ file_name.end(), '.') != 1)\n\t\treturn \"No\";\n\tif (std::count_if(file_name.begin(),\
    \ file_name.end(), ::isalpha) == 0)\n\t\treturn \"No\";\n\tif (file_name.substr(file_name.find('.'))\
    \ != \".txt\" && file_name.substr(file_name.find('.')) != \".exe\" && file_name.substr(file_name.find('.'))\
    \ != \".dll\")\n\t\treturn \"No\";\n\treturn \"Yes\";", "    // write your code\
    \ here\n    char *afterdot = strchr(file_name.c_str(), '.');\n    char *beforedot\
    \ = strtok(file_name.c_str(), \".\");\n    int dots = 0;\n    int chk = 1;\n \
    \   for(int i = 0; file_name[i] != '\\0'; i++)\n    {\n        if(file_name[i]\
    \ == '.')\n            dots++;\n        if(dots > 1)\n            chk = 0;\n \
    \   }\n    if(afterdot == NULL || beforedot == NULL || dots != 1)\n        chk\
    \ = 0;\n    if(!((afterdot[1] == 't' && afterdot[2] == 'x' && afterdot[3] == 't')\
    \ || (afterdot[1] == 'e' && afterdot[2] == 'x' && afterdot[3] == 'e') || (afterdot[1]\
    \ == 'd' && afterdot[2] == 'l' && afterdot[3] == 'l')))\n        chk = 0;\n  \
    \  int cnt = 0;\n    for(int i = 0; beforedot[i] != '\\0'; i++)\n    {\n     \
    \   if(beforedot[i] >= '0' && beforedot[i] <= '9')\n            cnt++;\n    }\n\
    \    if(cnt > 3)\n        chk = 0;\n    if(chk == 1)\n        return \"Yes\";\n\
    \    else\n        return \"No\";", "    // case 1: \"example.txt\"\n    // case\
    \ 2: \"1example.dll\"\n    // case 3: \"1.exe\"\n    // case 4: \"1example\"\n\
    \    // case 5: \"1example.txtt\"\n    // case 6: \"example.ex\"\n    // case\
    \ 7: \"example\"\n    // case 8: \"1example.txtt.txt\"\n    // case 9: \"example.txt.txt\"\
    \n    // case 10: \"1\"\n    // case 11: \"11\"\n    // case 12: \"111\"\n   \
    \ // case 13: \"1111\"\n    // case 14: \".\"\n    // case 15: \"..\"\n    //\
    \ case 16: \"1.1\"\n    // case 17: \"...\"\n    // case 18: \"....\"\n    //\
    \ case 19: \"1.1.1\"\n    // case 20: \"1.1.1.1\"\n    // case 21: \"..txt\"\n\
    \    // case 22: \".txt\"\n    // case 23: \"example...\"\n    // case 24: \"\
    example..\"\n    // case 25: \"example..txt\"\n    // case 26: \"example..txtt\"\
    \n    // case 27: \"example.txtt\"\n    // case 28: \"example...txt\"\n    //\
    \ case 29: \".example.txt\"\n    // case 30: \"..example.txt\"\n    // case 31:\
    \ \"example.\"\n    // case 32: \"example.txt.\"\n    // case 33: \"example.txt..\"\
    \n    // case 34: \"example.txt...\"\n    // case 35: \"example.txt..txt\"\n \
    \   // case 36: \"example.txt.txt\"\n    // case 37: \"example.txt..exe\"\n  \
    \  // case 38: \"example.txt.exe\"\n    // case 39: \"example.txt..dll\"\n   \
    \ // case 40: \"example.txt.dll\"\n    // case 41: \"exampl.e.txt\"\n    // case\
    \ 42: \"e.xam.ple.txt\"\n    // case 43: \"e.xampl.e.txt\"\n    // case 44: \"\
    e..xam.ple.txt\"\n    // case 45:", "\t// TODO: implement code here\n\treturn\
    \ \"\";", "    int dot_count = 0;\n    int digit_count = 0;\n    for (int i =\
    \ 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') dot_count++;\n\
    \        if (file_name[i] == '.' && i == 0) return \"No\";\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') digit_count++;\n        if (digit_count > 3)\
    \ return \"No\";\n    }\n    if (dot_count != 1) return \"No\";\n    std::string\
    \ extention = file_name.substr(file_name.find('.')+1);\n    if (extention != \"\
    txt\" && extention != \"exe\" && extention != \"dll\") return \"No\";\n    return\
    \ \"Yes\";", "    std::regex pattern(R\"(([A-Za-z])\\w*\\.(exe|txt|dll))\");\n\
    \    if (std::regex_match(file_name, pattern)) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }", "    int count = 0;\n    int check\
    \ = 0;\n    int point = 0;\n    for(int i = 0; i < file_name.length(); i++){\n\
    \        if(isalpha(file_name[i])){\n            check = 1;\n        }\n     \
    \   if(file_name[i] == '.'){\n            point = 1;\n        }\n        if(isdigit(file_name[i])){\n\
    \            count++;\n        }\n    }\n    if(count > 3){\n        return \"\
    No\";\n    }\n    if(check == 0){\n        return \"No\";\n    }\n    if(point\
    \ == 0){\n        return \"No\";\n    }\n    if(file_name.find(\"exe\") == std::string::npos\
    \ && file_name.find(\"txt\") == std::string::npos && file_name.find(\"dll\") ==\
    \ std::string::npos){\n        return \"No\";\n    }\n    return \"Yes\";", "\t\
    int count = 0;\n\tint n = file_name.length();\n\tstd::vector<char> v(file_name.begin(),\
    \ file_name.end());\n\tif (v[0] >= '0' && v[0] <= '9') {\n\t\treturn \"No\";\n\
    \t}\n\tfor (int i = 0; i < n; i++) {\n\t\tif (v[i] >= '0' && v[i] <= '9') {\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\tcount\
    \ = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (v[i] == '.') {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif (count != 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substr(file_name.find('.')\
    \ + 1) != \"txt\" &&\n\t\tfile_name.substr(file_name.find('.') + 1) != \"exe\"\
    \ &&\n\t\tfile_name.substr(file_name.find('.') + 1) != \"dll\") {\n\t\treturn\
    \ \"No\";\n\t}\n\treturn \"Yes\";", "    std::string const allowedExtensions[]\
    \ = {\"txt\", \"exe\", \"dll\"};\n    int allowedExtensionsLength = sizeof(allowedExtensions)\
    \ / sizeof(allowedExtensions[0]);\n    int count = 0;\n    int flag = 0;\n   \
    \ int flag1 = 0;\n    int file_name_size = file_name.size();\n    for (int i =\
    \ 0; i < file_name_size; i++) {\n        if (file_name[i] == '.') {\n        \
    \    flag++;\n        }\n        if (file_name[i] == '.' && i == 0) {\n      \
    \      return \"No\";\n        }\n        if (file_name[i] == '.' && i != file_name_size\
    \ - 1) {\n            flag1++;\n        }\n        if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if (count\
    \ > 3) {\n        return \"No\";\n    }\n    if (flag > 1) {\n        return \"\
    No\";\n    }\n    if (flag == 0) {\n        return \"No\";\n    }\n    if (flag1\
    \ == 0) {\n        return \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find(\"\
    .\") + 1);\n    for (int i = 0; i < allowedExtensionsLength; i++) {\n        if\
    \ (extension == allowedExtensions[i]) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";", "  std::regex file_name_regex(\"[a-z]{1}[a-z0-9.]{1,}\\\
    \\.[txt|exe|dll]{3}\");\n  if (std::regex_match(file_name, file_name_regex)) {\n\
    \    return \"Yes\";\n  }\n  return \"No\";", "  if(file_name.length() < 5) return\
    \ \"No\";\n  int dot_loc = file_name.find('.');\n  if(dot_loc == std::string::npos)\
    \ return \"No\";\n  if(dot_loc == 0) return \"No\";\n  std::string before_dot\
    \ = file_name.substr(0, dot_loc);\n  if(!std::isalpha(before_dot[0])) return \"\
    No\";\n  std::string after_dot = file_name.substr(dot_loc + 1);\n  if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n\
    \  int num_digits = 0;\n  for(char c : before_dot) {\n    if(std::isdigit(c))\
    \ num_digits++;\n  }\n  if(num_digits > 3) return \"No\";\n  return \"Yes\";",
  '    return "";', "    int num_of_digits = 0;\n    int num_of_dots = 0;\n    int\
    \ dot_index = -1;\n    int latin_char_found = 0;\n    int latin_char_index = -1;\n\
    \    bool is_valid = true;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        char current_char = file_name[i];\n        if (std::isdigit(current_char))\
    \ {\n            num_of_digits++;\n        } else if (current_char == '.') {\n\
    \            num_of_dots++;\n            dot_index = i;\n        } else if (std::isalpha(current_char))\
    \ {\n            latin_char_found++;\n            latin_char_index = i;\n    \
    \    }\n    }\n    if (num_of_digits > 3) {\n        is_valid = false;\n    }\n\
    \    if (num_of_dots != 1) {\n        is_valid = false;\n    }\n    if (dot_index\
    \ == 0) {\n        is_valid = false;\n    }\n    if (latin_char_found != 1) {\n\
    \        is_valid = false;\n    }\n    if (latin_char_index >= dot_index) {\n\
    \        is_valid = false;\n    }\n    if (file_name.substr(dot_index + 1) !=\
    \ \"txt\" \n        && file_name.substr(dot_index + 1) != \"exe\" \n        &&\
    \ file_name.substr(dot_index + 1) != \"dll\") {\n        is_valid = false;\n \
    \   }\n    if (is_valid) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }", "  int dot_count = 0;\n  int digit_count = 0;\n  if (file_name.length()\
    \ == 0) {\n    return \"No\";\n  }\n  for (int i = 0; i < file_name.length();\
    \ i++) {\n    if (file_name[i] == '.') {\n      dot_count++;\n    }\n    if (isdigit(file_name[i]))\
    \ {\n      digit_count++;\n    }\n  }\n  if (dot_count != 1 || digit_count > 3)\
    \ {\n    return \"No\";\n  }\n  std::string prefix = file_name.substr(0, file_name.find('.'));\n\
    \  std::string suffix = file_name.substr(file_name.find('.') + 1);\n  if (prefix.length()\
    \ == 0 || isdigit(prefix[0])) {\n    return \"No\";\n  }\n  if (suffix != \"txt\"\
    \ && suffix != \"exe\" && suffix != \"dll\") {\n    return \"No\";\n  }\n  return\
    \ \"Yes\";", "    bool dot_flag = false;\n    std::string format = file_name.substr(file_name.find('.')+1);\n\
    \    std::transform(format.begin(), format.end(), format.begin(), ::tolower);\n\
    \    if (format != \"txt\" && format != \"exe\" && format != \"dll\") return \"\
    No\";\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            if (dot_flag == true) return \"No\";\n            else\
    \ dot_flag = true;\n        }\n        if (isdigit(file_name[i])) {\n        \
    \    if (file_name[i-1] >= '0' && file_name[i-1] <= '9') {\n                if\
    \ (file_name[i-2] >= '0' && file_name[i-2] <= '9') {\n                    return\
    \ \"No\";\n                }\n            }\n        }\n    }\n    if (dot_flag\
    \ == false) return \"No\";\n    if (file_name[0] < 'a' || file_name[0] > 'z')\
    \ return \"No\";\n    return \"Yes\";", "    std::cout << file_name << std::endl;\n\
    \    if(std::count(file_name.begin(), file_name.end(), '.') != 1){\n        return\
    \ \"No\";\n    }\n    std::regex reg(\"[0-9]{1,3}\");\n    if(std::regex_search(file_name,\
    \ reg)){\n        return \"No\";\n    }\n    reg = \"[a-zA-Z]*\\\\.\";\n    if(!std::regex_search(file_name,\
    \ reg)){\n        return \"No\";\n    }\n    reg = \"\\\\.(txt|exe|dll)\";\n \
    \   if(!std::regex_search(file_name, reg)){\n        return \"No\";\n    }\n \
    \   return \"Yes\";", "\tint count1 = 0, count2 = 0;\n\tstd::string sub1, sub2;\n\
    \tbool flag1 = false, flag2 = false;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount1++;\n\
    \t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tflag1 = true;\n\t\t\tcount2++;\n\t\
    \t}\n\t}\n\tif (count1 > 3 || count2 != 1) {\n\t\treturn \"No\";\n\t}\n\telse\
    \ {\n\t\tfor (int i = 0; i < file_name.length(); i++) {\n\t\t\tif (file_name[i]\
    \ == '.') {\n\t\t\t\tflag2 = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (flag2\
    \ == false) {\n\t\t\t\tsub1.push_back(file_name[i]);\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\tsub2.push_back(file_name[i]);\n\t\t\t}\n\t\t}\n\t\tif (sub1[0] < 'a' ||\
    \ sub1[0] > 'z') {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (sub2 == \"txt\" || sub2\
    \ == \"exe\" || sub2 == \"dll\") {\n\t\t\treturn \"Yes\";\n\t\t}\n\t\telse {\n\
    \t\t\treturn \"No\";\n\t\t}\n\t}", "    // 1. Check the file name if it has not\
    \ more than 3 digits\n    int counter = 0;\n    for (auto &c : file_name) {\n\
    \        if (c >= '0' && c <= '9') {\n            counter++;\n        }\n    }\n\
    \    if (counter > 3) {\n        return \"No\";\n    }\n    // 2. Check file name\
    \ if it contains exactly one dot '.'\n    int dot_counter = 0;\n    for (auto\
    \ &c : file_name) {\n        if (c == '.') {\n            dot_counter++;\n   \
    \     }\n    }\n    if (dot_counter != 1) {\n        return \"No\";\n    }\n \
    \   // 3. Check the file name if it starts with a letter from a latin alphapet\n\
    \    if (file_name[0] < 'a' || file_name[0] > 'z') {\n        if (file_name[0]\
    \ < 'A' || file_name[0] > 'Z') {\n            return \"No\";\n        }\n    }\n\
    \    // 4. Check the file name if the substring after the dot is one of these\
    \ ['txt', 'exe', 'dll']\n    std::string file_type = file_name.substr(file_name.length()\
    \ - 3, 3);\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "  int n\
    \ = file_name.size();\n  std::string extention = file_name.substr(n-3, n);\n \
    \ if (file_name.find('.') == std::string::npos ||\n  std::count_if(file_name.begin(),\
    \ file_name.end(),\n    [](const char& c) { return c >= '0' && c <= '9'; }) >\
    \ 3 ||\n  !std::isalpha(file_name[0]) || extention != \"txt\" && extention !=\
    \ \"exe\" && extention != \"dll\")\n    return \"No\";\n  return \"Yes\";", " \
    \   std::string no = \"No\";\n    std::string yes = \"Yes\";\n    std::string\
    \ temp = \"\";\n    std::string postDot = \"\";\n    bool check = false;\n   \
    \ int counter = 0;\n    for(int i = 0; i < file_name.length(); i++){\n       \
    \ if(file_name[i] == '.'){\n            check = true;\n            for(int j =\
    \ i + 1; j < file_name.length(); j++){\n                postDot += file_name[j];\n\
    \            }\n            break;\n        }\n        temp += file_name[i];\n\
    \    }\n    if(check == false){\n        return no;\n    }\n    if(temp.length()\
    \ < 1){\n        return no;\n    }\n    if(temp[0] >= '0' && temp[0] <= '9'){\n\
    \        return no;\n    }\n    for(int i = 0; i < temp.length(); i++){\n    \
    \    if(temp[i] >= '0' && temp[i] <= '9'){\n            counter++;\n        }\n\
    \    }\n    if(counter > 3){\n        return no;\n    }\n    if(postDot != \"\
    txt\" && postDot != \"exe\" && postDot != \"dll\"){\n        return no;\n    }\n\
    \    return yes;", "    std::regex reg(\"[a-zA-Z]+[0-9]{0,3}.[a-z]{3}\");\n  \
    \  return std::regex_match(file_name, reg) ? \"Yes\" : \"No\";", '    // your
    code here...', "  assert(1 <= file_name.size() && file_name.size() <= 30);\n \
    \ int digits = 0;\n  int dots = 0;\n  int len = file_name.size();\n  for (int\
    \ i = 0; i < len; i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n      digits++;\n    }\n    if (file_name[i] == '.') {\n      dots++;\n \
    \   }\n  }\n  int index = file_name.find('.');\n  std::string sub = file_name.substr(index\
    \ + 1);\n  if (dots != 1 || digits > 3 || index == 0 || sub != \"txt\" && sub\
    \ != \"exe\" && sub != \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\";",
  "  if(std::count_if(file_name.begin(), file_name.end(), ::isdigit) > 3)\n    return\
    \ \"No\";\n  int pos = file_name.find('.');\n  if(pos == -1)\n    return \"No\"\
    ;\n  if(pos > file_name.size() - 4)\n    return \"No\";\n  std::string sub = file_name.substr(pos\
    \ + 1);\n  if(sub != \"txt\" && sub != \"exe\" && sub != \"dll\")\n    return\
    \ \"No\";\n  if(!isalpha(file_name[0]))\n    return \"No\";\n  return \"Yes\";",
  "\tint count = 0;\n\tint check = 0;\n\tint count2 = 0;\n\tint count3 = 0;\n\tint\
    \ count4 = 0;\n\tint count5 = 0;\n\tint count6 = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == 'a' || file_name[i] == 'b' || file_name[i] == 'c' || file_name[i] == 'd'\
    \ || file_name[i] == 'e' || file_name[i] == 'f' || file_name[i] == 'g' || file_name[i]\
    \ == 'h' || file_name[i] == 'i' || file_name[i] == 'j' || file_name[i] == 'k'\
    \ || file_name[i] == 'l' || file_name[i] == 'm' || file_name[i] == 'n' || file_name[i]\
    \ == 'o' || file_name[i] == 'p' || file_name[i] == 'q' || file_name[i] == 'r'\
    \ || file_name[i] == 's' || file_name[i] == 't' || file_name[i] == 'u' || file_name[i]\
    \ == 'v' || file_name[i] == 'w' || file_name[i] == 'x' || file_name[i] == 'y'\
    \ || file_name[i] == 'z' || file_name[i] == 'A' || file_name[i] == 'B' || file_name[i]\
    \ == 'C' || file_name[i] == 'D' || file_name[i] == 'E' || file_name[i] == 'F'\
    \ || file_name[i] == 'G' || file_name[i] == 'H' || file_name[i] == 'I' || file_name[i]\
    \ == 'J' || file_name[i] == 'K' ||", "    assert(file_name!=\"\");\n    int dot_counter=0;\n\
    \    int digit_counter=0;\n    if(isalpha(file_name[0])==0){\n        return \"\
    No\";\n    }\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]=='.'){\n\
    \            dot_counter++;\n        }\n        if(isdigit(file_name[i])){\n \
    \           digit_counter++;\n        }\n    }\n    if(dot_counter!=1 || digit_counter>3){\n\
    \        return \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(extension!=\"txt\" && extension!=\"exe\" && extension!=\"dll\"\
    ){\n        return \"No\";\n    }\n    return \"Yes\";", "    int len=file_name.length();\n\
    \    if(len<=3)\n    {\n        return \"No\";\n    }\n    int i=0;\n    int count=0;\n\
    \    while(i<len)\n    {\n        if(file_name[i]>='0' && file_name[i]<='9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(count>3)\n\
    \    {\n        return \"No\";\n    }\n    i=0;\n    int flag=0;\n    while(i<len)\n\
    \    {\n        if(file_name[i]=='.')\n        {\n            flag++;\n      \
    \  }\n        i++;\n    }\n    if(flag!=1)\n    {\n        return \"No\";\n  \
    \  }\n    std::string str;\n    for(i=0;i<len;i++)\n    {\n        if(file_name[i]=='.')\n\
    \        {\n            break;\n        }\n        str+=file_name[i];\n    }\n\
    \    if(str.length()==0)\n    {\n        return \"No\";\n    }\n    int l=str.length();\n\
    \    if(!((str[0]>='a' && str[0]<='z') || (str[0]>='A' && str[0]<='Z')))\n   \
    \ {\n        return \"No\";\n    }\n    str=\"\";\n    for(i=i+1;i<len;i++)\n\
    \    {\n        str+=file_name[i];\n    }\n    if(str!=\"txt\" && str!=\"exe\"\
    \ && str!=\"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";",
  "    std::vector<std::string> valid_extensions = {\"txt\", \"exe\", \"dll\"};\n\
    \    std::string extension;\n    size_t dot_index;\n    std::regex latin_letter_regex(\"\
    [a-zA-Z]\");\n    std::regex digit_regex(\"[0-9]\");\n    std::regex valid_extension_regex(\"\
    txt|exe|dll\");\n    std::smatch match;\n    dot_index = file_name.find('.');\n\
    \    if (dot_index == std::string::npos) {\n        return \"No\";\n    }\n  \
    \  if (!std::regex_search(file_name.substr(0, dot_index), match, latin_letter_regex))\
    \ {\n        return \"No\";\n    }\n    if (std::regex_search(file_name.substr(0,\
    \ dot_index), match, digit_regex)) {\n        if (match.size() > 3) {\n      \
    \      return \"No\";\n        }\n    }\n    extension = file_name.substr(dot_index\
    \ + 1);\n    if (!std::regex_search(extension, match, valid_extension_regex))\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "\tstd::regex pattern(\"\
    ^[a-zA-Z]+[a-zA-Z0-9]{0,3}\\\\.(?:txt|exe|dll)$\");\n\treturn std::regex_match(file_name,\
    \ pattern) ? \"Yes\" : \"No\";", "  int state = 0;\n  int count = 0;\n  int dots\
    \ = 0;\n  bool valid = true;\n  for (int i = 0; i < file_name.size(); i++) {\n\
    \    switch (state) {\n      case 0:\n        if ((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n          state\
    \ = 1;\n        } else {\n          valid = false;\n        }\n        break;\n\
    \      case 1:\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n  \
    \        count++;\n          if (count > 3) {\n            valid = false;\n  \
    \        }\n        } else if (file_name[i] == '.') {\n          dots++;\n   \
    \       state = 2;\n        } else {\n          valid = false;\n        }\n  \
    \      break;\n      case 2:\n        if (file_name[i] == 't' || file_name[i]\
    \ == 'e' || file_name[i] == 'd') {\n          state = 3;\n        } else {\n \
    \         valid = false;\n        }\n        break;\n      case 3:\n        if\
    \ (file_name[i] == 'x') {\n          state = 4;\n        } else if (file_name[i]\
    \ == 'l') {\n          state = 5;\n        } else {\n          valid = false;\n\
    \        }\n        break;\n      case 4:\n        if (file_name[i] == 'e') {\n\
    \          state = 6;\n        } else {\n          valid = false;\n        }\n\
    \        break;\n      case 5:\n        if (file_name[i] == 'l') {\n         \
    \ state = 6;\n        } else {\n          valid = false;\n        }\n        break;\n\
    \      case 6:\n        valid = false;\n        break;\n    }\n  }\n  if (dots\
    \ == 1 && state == 6 && valid) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }", "  std::string valid[] = {\"txt\", \"exe\", \"dll\"};\n  std::string\
    \ answer = \"No\";\n  int count = 0;\n  int countdot = 0;\n  int substringchecker\
    \ = 0;\n  int substringchecker2 = 0;\n  if (file_name.length() > 0) {\n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n      if (file_name[i] == '.') {\n\
    \        countdot++;\n      }\n      if (isdigit(file_name[i])) {\n        count++;\n\
    \      }\n      if (file_name[i] == '.') {\n        substringchecker = i;\n  \
    \    }\n    }\n    if (count < 4 && countdot == 1) {\n      for (int i = substringchecker;\
    \ i < file_name.length(); i++) {\n        substringchecker2++;\n      }\n    \
    \  std::string substring1 = file_name.substr(0, substringchecker);\n      std::string\
    \ substring2 = file_name.substr(substringchecker + 1, substringchecker2);\n  \
    \    int count2 = 0;\n      for (int i = 0; i < 3; i++) {\n        if (substring2\
    \ == valid[i]) {\n          count2++;\n        }\n      }\n      if (count2 >\
    \ 0) {\n        if (substring1.length() > 0) {\n          if (isalpha(substring1[0]))\
    \ {\n            answer = \"Yes\";\n          }\n        }\n      }\n    }\n \
    \ }\n  return answer;", "  std::regex e(\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\
    );\n  if (std::regex_match(file_name, e)) {\n    return \"Yes\";\n  }\n  return\
    \ \"No\";", "  std::vector<std::string> a={\"txt\",\"exe\",\"dll\"};\n  std::string\
    \ s=\"\";\n  int c=0;\n  for(int i=0;i<file_name.size();i++){\n    if(file_name[i]>='0'&&file_name[i]<='9')c++;\n\
    \    if(file_name[i]=='.')break;\n    s+=file_name[i];\n  }\n  std::string tmp=\"\
    \";\n  for(int i=file_name.size()-1;i>=0;i--){\n    if(file_name[i]=='.')break;\n\
    \    tmp+=file_name[i];\n  }\n  std::reverse(tmp.begin(),tmp.end());\n  if(c>3)return\
    \ \"No\";\n  if(file_name.find('.')==std::string::npos)return \"No\";\n  if(file_name.find('.')==0)return\
    \ \"No\";\n  if(file_name.find('.')==file_name.size()-1)return \"No\";\n  if(!isalpha(file_name[0]))return\
    \ \"No\";\n  for(int i=0;i<a.size();i++){\n    if(tmp==a[i])return \"Yes\";\n\
    \  }\n  return \"No\";", "\tint count = 0;\n\tstd::string extention = \"\";\n\t\
    std::string name = \"\";\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\
    \tif (file_name[i] == '.') {\n\t\t\textention = file_name.substr(i+1, file_name.length()\
    \ - i - 1);\n\t\t\tname = file_name.substr(0, i);\n\t\t\tcount++;\n\t\t}\n\t\t\
    if (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \tif (count <= 3 && extention == \"txt\" || extention == \"exe\" || extention\
    \ == \"dll\"\n\t\t&& count == 1 && name != \"\") {\n\t\treturn \"Yes\";\n\t}\n\
    \telse {\n\t\treturn \"No\";\n\t}", "    int count = 0;\n    for(int i = 0; i\
    \ < file_name.length(); i++) {\n        if(isdigit(file_name[i])) {\n        \
    \    count++;\n        }\n    }\n    if(count > 3) {\n        return \"No\";\n\
    \    }\n    std::string pre = file_name.substr(0, file_name.find('.'));\n    std::string\
    \ post = file_name.substr(file_name.find('.') + 1);\n    std::transform(pre.begin(),\
    \ pre.end(), pre.begin(), ::tolower);\n    std::transform(post.begin(), post.end(),\
    \ post.begin(), ::tolower);\n    if(count == 0 && file_name.find('.') == std::string::npos\
    \ && pre.length() > 0) {\n        return \"Yes\";\n    }\n    if(file_name.find('.')\
    \ == std::string::npos || pre.length() == 0 || (post != \"txt\" && post != \"\
    exe\" && post != \"dll\")) {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;", "\tint i = 0;\n\tint j = 0;\n\tint l = file_name.length();\n\tint flag = 0;\n\
    \tint dot = 0;\n\tint k = 0;\n\tchar a;\n\tstd::string s = \"\";\n\tstd::string\
    \ s1 = \"\";\n\tstd::string s2 = \"\";\n\twhile (i<l && dot<2) {\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot++;\n\t\t\ti++;\n\t\t}\n\t\tif (dot == 1) {\n\t\t\twhile\
    \ (j<l) {\n\t\t\t\ts2 += file_name[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\twhile (j<l) {\n\t\t\t\tif (file_name[j] == '.') {\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t\ts1 += file_name[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    std::cout << s1 << \"\\n\";\n\tstd::cout << s2 << \"\\n\";\n\tfor (i = 0; i<s1.length();\
    \ i++) {\n\t\ta = s1[i];\n\t\tif ((a>='0' && a<='9') || (a>='a' && a<='z') ||\
    \ (a>='A' && a<='Z')) {\n\t\t\tif (a >= '0' && a <= '9') {\n\t\t\t\tk++;\n\t\t\
    \t}\n\t\t\tif (k > 3) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    \telse {\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1) {\n\t\t\
    return \"No\";\n\t}\n\tif (s2 == \"txt\" || s2 == \"exe\" || s2 == \"dll\") {\n\
    \t\treturn \"Yes\";\n\t}\n\telse {\n\t\treturn \"No\";", "    int digitsCount\
    \ = 0;\n    std::string validExtensions[] = {\"txt\", \"exe\", \"dll\"};\n   \
    \ int dotIndex = file_name.find(\".\");\n    if (dotIndex == -1) {\n        return\
    \ \"No\";\n    }\n\n    std::string prefix = file_name.substr(0, dotIndex);\n\
    \    std::string suffix = file_name.substr(dotIndex + 1);\n\n    for (int i =\
    \ 0; i < prefix.length(); i++) {\n        if (isdigit(prefix[i])) {\n        \
    \    digitsCount++;\n        }\n    }\n\n    if (digitsCount > 3) {\n        return\
    \ \"No\";\n    }\n\n    if (std::find(std::begin(validExtensions), std::end(validExtensions),\
    \ suffix) == std::end(validExtensions)) {\n        return \"No\";\n    }\n\n \
    \   return \"Yes\";", "\tstd::regex r(R\"(^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$)\"\
    );\n\treturn std::regex_match(file_name, r) ? \"Yes\" : \"No\";", "\tint count\
    \ = 0;\n\tint dots = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\t\
    if (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\t\
    if (file_name[i] == '.') {\n\t\t\tdots++;\n\t\t}\n\t}\n\tif (count > 3 || dots\
    \ != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string substring = file_name.substr(0,\
    \ file_name.find('.'));\n\tstd::string extension = file_name.substr(file_name.find('.')\
    \ + 1);\n\tif (substring.length() == 0 || (substring[0] < 'a' || substring[0]\
    \ > 'z') && (substring[0] < 'A' || substring[0] > 'Z')) {\n\t\treturn \"No\";\n\
    \t}\n\tstd::string arr[] = { \"txt\", \"exe\", \"dll\" };\n\tif (std::find(std::begin(arr),\
    \ std::end(arr), extension) != std::end(arr)) {\n\t\treturn \"Yes\";\n\t}\n\t\
    return \"No\";", "    int count = 0;\n    int count_ch = 0;\n    int flag = 0;\n\
    \    int count_dot = 0;\n    std::string res = \"No\";\n    std::string dot =\
    \ \".\";\n    std::string ch;\n    std::vector<std::string> ext;\n    ext.push_back(\"\
    txt\");\n    ext.push_back(\"exe\");\n    ext.push_back(\"dll\");\n    std::stringstream\
    \ s(file_name);\n    while(getline(s, ch, '.')) {\n        count_dot++;\n    \
    \    for(auto i : ch) {\n            if(i >= '0' && i <= '9') {\n            \
    \    count++;\n            }\n            else if(i >= 'a' && i <= 'z' || i >=\
    \ 'A' && i <= 'Z') {\n                count_ch++;\n            }\n        }\n\
    \        if(count_ch > 0 && count == 0) {\n            flag = 1;\n        }\n\
    \        else {\n            flag = 0;\n        }\n        count = 0;\n      \
    \  count_ch = 0;\n    }\n    if(count_dot == 2 && flag == 1) {\n        res =\
    \ \"Yes\";\n    }\n    return res;", "    std::string sub_before = file_name.substr(0,\
    \ file_name.find('.'));\n    std::string sub_after = file_name.substr(file_name.find('.')\
    \ + 1);\n    int digits = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n            digits++;\n\
    \    }\n    if (digits > 3)\n        return \"No\";\n    if (file_name.find('.')\
    \ == std::string::npos)\n        return \"No\";\n    if (sub_before.length() ==\
    \ 0)\n        return \"No\";\n    if (sub_before[0] < 'A' || sub_before[0] > 'z'\
    \ || (sub_before[0] > 'Z' && sub_before[0] < 'a'))\n        return \"No\";\n \
    \   if (sub_after != \"txt\" && sub_after != \"exe\" && sub_after != \"dll\")\n\
    \        return \"No\";\n    return \"Yes\";", "    int len = file_name.length();\n\
    \    int i = 0;\n    bool found_dot = false;\n    int count_numbers = 0;\n   \
    \ for(i = 0; i < len; i++) {\n        if(isdigit(file_name[i]))\n            count_numbers++;\n\
    \        if(file_name[i] == '.') {\n            found_dot = true;\n          \
    \  break;\n        }\n    }\n    std::string extension = file_name.substr(i+1,\
    \ len-i);\n    std::cout << extension << std::endl;\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(!found_dot)\n        return \"No\";\n    if(count_numbers > 3)\n      \
    \  return \"No\";\n    std::string name = file_name.substr(0, i);\n    if(name\
    \ == \"\")\n        return \"No\";\n    if(isalpha(name[0]))\n        return \"\
    Yes\";\n    return \"No\";", "    // Your code goes here\n    int count = 0;\n\
    \    std::string::iterator it = file_name.begin();\n    for(; it != file_name.end();\
    \ it++) {\n        if(isdigit(*it)) {\n            count++;\n        }\n    }\n\
    \    if(count > 3) {\n        return \"No\";\n    }\n    else {\n        count\
    \ = 0;\n        for(it = file_name.begin(); it != file_name.end(); it++) {\n \
    \           if(*it == '.') {\n                count++;\n            }\n      \
    \  }\n        if(count != 1) {\n            return \"No\";\n        }\n      \
    \  else {\n            std::string temp1 = file_name.substr(0, file_name.find(\"\
    .\"));\n            if(temp1.empty()) {\n                return \"No\";\n    \
    \        }\n            else {\n                if(isalpha(temp1[0])) {\n    \
    \                std::string temp2 = file_name.substr(file_name.find(\".\") +\
    \ 1);\n                    if(temp2 == \"txt\" || temp2 == \"exe\" || temp2 ==\
    \ \"dll\") {\n                        return \"Yes\";\n                    }\n\
    \                    else {\n                        return \"No\";\n        \
    \            }\n                }\n                else {\n                  \
    \  return \"No\";\n                }\n            }\n        }\n    }", "\tint\
    \ i, j, k, cnt = 0, len = file_name.length();\n\tstd::string ans;\n\tfor (i =\
    \ 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\
    \t\tcnt++;\n\t\t}\n\t}\n\tif (cnt > 3) {\n\t\tans = \"No\";\n\t\treturn ans;\n\
    \t}\n\tint cnt_dot = 0;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] ==\
    \ '.') {\n\t\t\tcnt_dot++;\n\t\t}\n\t}\n\tif (cnt_dot != 1) {\n\t\tans = \"No\"\
    ;\n\t\treturn ans;\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] ==\
    \ '.') {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == 0) {\n\t\tans = \"No\";\n\t\treturn\
    \ ans;\n\t}\n\tfor (j = 0; j < i; j++) {\n\t\tif ((file_name[j] >= 'a' && file_name[j]\
    \ <= 'z') || (file_name[j] >= 'A' && file_name[j] <= 'Z')) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\telse {\n\t\t\tans = \"No\";\n\t\t\treturn ans;\n\t\t}\n\t}\n\tstd::string\
    \ s;\n\tfor (k = i + 1; k < len; k++) {\n\t\ts.push_back(file_name[k]);\n\t}\n\
    \tif (s == \"txt\" || s == \"exe\" || s == \"dll\") {\n\t\tans = \"Yes\";\n\t\t\
    return ans;\n\t}\n\telse {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}", "    int\
    \ cnt_num=0;\n    bool f_dot=false;\n    bool f_pre_dot=false;\n    bool f_post_dot=false;\n\
    \    bool f_pre_num=false;\n    bool f_post_num=false;\n    for(int i=0;i<file_name.size();i++){\n\
    \        if(file_name[i]=='.'){\n            if(!f_dot){\n                f_dot=true;\n\
    \                f_pre_dot=true;\n            }\n            else{\n         \
    \       return \"No\";\n            }\n        }\n        else if(file_name[i]=='0'\
    \ || file_name[i]=='1' || file_name[i]=='2' || file_name[i]=='3' || file_name[i]=='4'\
    \ || file_name[i]=='5' || file_name[i]=='6' || file_name[i]=='7' || file_name[i]=='8'\
    \ || file_name[i]=='9'){\n            if(!f_dot){\n                if(!f_pre_num){\n\
    \                    f_pre_num=true;\n                }\n                cnt_num++;\n\
    \            }\n            else{\n                if(!f_post_num){\n        \
    \            f_post_num=true;\n                }\n                cnt_num++;\n\
    \            }\n        }\n        else if(file_name[i]=='a' || file_name[i]=='b'\
    \ || file_name[i]=='c' || file_name[i]=='d' || file_name[i]=='e' || file_name[i]=='f'\
    \ || file_name[i]=='g' || file_name[i]=='h' || file_name[i]=='i' || file_name[i]=='j'\
    \ || file_name[i]=='k' || file_name[i]=='l' || file_name[i]=='m' || file_name[i]=='n'\
    \ || file_name[i]=='o' ||", "  bool flag = true;\n  int count = 0;\n  int index\
    \ = 0;\n  std::vector<std::string> suffixes = {\"txt\", \"exe\", \"dll\"};\n \
    \ std::string str;\n  for(int i = 0; i < file_name.size(); i++) {\n    if(file_name[i]\
    \ == '.') {\n      index = i;\n      flag = false;\n    }\n    if(flag && (file_name[i]\
    \ >= '0' && file_name[i] <= '9')) {\n      count++;\n    }\n  }\n  for(int i =\
    \ index+1; i < file_name.size(); i++) {\n    str += file_name[i];\n  }\n  if(count\
    \ > 3 || index == 0 || str.size() != 3) {\n    return \"No\";\n  }\n  for(int\
    \ i = 0; i < suffixes.size(); i++) {\n    if(str == suffixes[i]) {\n      return\
    \ \"Yes\";\n    }\n  }\n  return \"No\";", "    // your code here\n    // replace\
    \ this with your code\n  assert(file_name.length()>=3);\n  int n = file_name.length();\n\
    \  if(file_name[0]<'a'||file_name[0]>'z'){\n    if(file_name[0]<'A'||file_name[0]>'Z'){\n\
    \      return \"No\";\n    }\n  }\n  int counter=0;\n  int index=-1;\n  for(int\
    \ i=0;i<n;i++){\n    if(file_name[i]>='0'&&file_name[i]<='9'){\n      counter++;\n\
    \    }\n    if(file_name[i]=='.'){\n      index=i;\n    }\n  }\n  if(counter>3){\n\
    \    return \"No\";\n  }\n  if(index==-1){\n    return \"No\";\n  }\n  std::string\
    \ a=file_name.substr(index+1,n-index);\n  if(a!=\"txt\"&&a!=\"exe\"&&a!=\"dll\"\
    ){\n    return \"No\";\n  }\n  return \"Yes\";", "    //your code here\n    int\
    \ count_digit=0;\n    int count_dot=0;\n    if(file_name[0]>='0' && file_name[0]<='9')\n\
    \        return \"No\";\n    for(int i=0;i<file_name.length();i++)\n    {\n  \
    \      if(file_name[i]>='0' && file_name[i]<='9')\n            count_digit++;\n\
    \        if(file_name[i]=='.')\n            count_dot++;\n    }\n    if(count_digit>3\
    \ || count_dot!=1)\n        return \"No\";\n    std::string ext=file_name.substr(file_name.find('.')+1);\n\
    \    if(ext==\"txt\" || ext==\"exe\" || ext==\"dll\")\n        return \"Yes\"\
    ;\n    return \"No\";", "    const std::string allowed_postfixes[] = {\"txt\"\
    , \"exe\", \"dll\"};\n    int dot_pos = file_name.find('.');\n    if (dot_pos\
    \ == std::string::npos) return \"No\";\n    int digits_count = 0;\n    for (int\
    \ i = 0; i < dot_pos; i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') digits_count++;\n    }\n    if (digits_count > 3) return \"No\";\n \
    \   if (!((file_name[0] >= 'a' && file_name[0] <= 'z') ||\n         (file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z'))) return \"No\";\n    std::string postfix = file_name.substr(dot_pos\
    \ + 1);\n    for (int i = 0; i < 3; i++) {\n        if (postfix == allowed_postfixes[i])\
    \ return \"Yes\";\n    }\n    return \"No\";", "    \n    int count = 0;\n   \
    \ if (file_name.find(\".\") == std::string::npos) return \"No\";\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i])) {\n\
    \            count++;\n        }\n    }\n    if (count > 3) return \"No\";\n \
    \   std::string s = file_name.substr(file_name.find(\".\") + 1);\n    if (s ==\
    \ \"txt\" || s == \"exe\" || s == \"dll\") return \"Yes\";\n    return \"No\";",
  "    std::string::size_type index = file_name.find('.');\n    std::string::size_type\
    \ digits = file_name.find_first_of(\"0123456789\");\n    std::vector<std::string>\
    \ ok_suffixes{\"txt\", \"exe\", \"dll\"};\n    std::string suffix = file_name.substr(index\
    \ + 1);\n    int idx = std::find(ok_suffixes.begin(), ok_suffixes.end(), suffix)\
    \ != ok_suffixes.end();\n    int dot_count = std::count(file_name.begin(), file_name.end(),\
    \ '.');\n    return idx && index != 0 && dot_count == 1 && digits == std::string::npos\
    \ ? \"Yes\" : \"No\";", "\tbool dot_check = false;\n\tint dot_pos = 0;\n\tint\
    \ dot_counter = 0;\n\tint digit_counter = 0;\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_pos = i;\n\t\t\tdot_check\
    \ = true;\n\t\t\tdot_counter++;\n\t\t}\n\t\tif (isdigit(file_name[i])) {\n\t\t\
    \tdigit_counter++;\n\t\t}\n\t}\n\tif (digit_counter > 3) {\n\t\treturn \"No\"\
    ;\n\t}\n\tif (dot_counter != 1) {\n\t\treturn \"No\";\n\t}\n\tif (dot_check) {\n\
    \t\tstd::string file_type = file_name.substr(dot_pos + 1);\n\t\tif (file_type\
    \ == \"txt\" || file_type == \"exe\" || file_type == \"dll\") {\n\t\t\treturn\
    \ \"Yes\";\n\t\t}\n\t\telse {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"No\"\
    ;", "  // your code here\n  std::regex text_regex(\"[a-zA-Z]{1}([a-zA-Z0-9]*).(txt|exe|dll)\"\
    );\n  std::regex_match(file_name, text_regex);\n  if(regex_match(file_name, text_regex)){\n\
    \  \treturn \"Yes\";\n  }else{\n  \treturn \"No\";\n  }"]
stop_tokens:
- "\n}"
