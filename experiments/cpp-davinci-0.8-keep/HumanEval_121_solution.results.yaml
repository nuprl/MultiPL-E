name: HumanEval_121_solution
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int counter = 1;\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(lst[i] % 2 != 0 && counter % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n        counter++;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpcke4qcp8: /tmp/tmpcke4qcp8.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i+=2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\t// just for simplicity we are using for loop.\n\tlong odd_sum = 0;\n\t\
    for (int i = 0; i < lst.size(); i+=2) {\n\t\t// Since the given list is non-empty,\
    \ we need not check for \n\t\t// input less than 1.\n\t\tif (lst[i] % 2 != 0)\
    \ {\n\t\t\todd_sum += lst[i];\n\t\t}\n\t}\n\treturn odd_sum;\n}\nint main() {\n\
    \    auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==0 &&\
    \ lst[i]%2==1){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Your code here\n    long odd = 0;\n    for(int i = 0; i < lst.size();\
    \ i+=2){\n        if(lst[i] % 2 != 0){\n            odd += lst[i];\n        }\n\
    \    }\n    return odd;\n}\nint main() {\n    auto candidate = solution;\n   \
    \ assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i+=2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int odd = 0;\n    for(int i = 0; i < lst.size(); i += 2)\n        if(lst[i]\
    \ % 2 == 1)\n            odd += lst[i];\n    return odd;\n}\nint main() {\n  \
    \  auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    //loop over vector and check for odd number in even\
    \ position\n    for(int i = 1; i < lst.size(); i+=2){\n      if(lst[i] % 2 !=\
    \ 0){\n        sum += lst[i];\n      }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpjaii1j5k: /tmp/tmpjaii1j5k.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n        if(lst[i]\
    \ % 2 == 0)\n            sum += lst[i];\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpk03i9sbt: /tmp/tmpk03i9sbt.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int n = lst.size();\n    int sum = 0;\n    for(int i = 1; i < n; i +=\
    \ 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n   \
    \ assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpu7zrq7b_: /tmp/tmpu7zrq7b_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long ans = 0;\n  if(lst.size() < 2) return ans;\n  std::vector<long>::iterator\
    \ it = lst.begin();\n  int cnt = 0;\n  while(it != lst.end()){\n    if(cnt % 2\
    \ == 0){\n      if(*it % 2 != 0)\n        ans += *it;\n    }\n    it++;\n    cnt++;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Your code here\n    long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n\
    \    {\n        if(lst[i]%2!=0)\n        {\n            sum+=lst[i];\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2!=0)\n\
    \        {\n            if(lst[i]%2==0)\n            {\n                sum+=lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpq4ehc18y: /tmp/tmpq4ehc18y.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long answer = 0;\n  for(int i = 1; i < lst.size(); i += 2)\n    if(lst[i]\
    \ % 2 == 0)\n      answer += lst[i];\n  return answer;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmp6e4ngi8y: /tmp/tmp6e4ngi8y.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int count = 0;\n  for (auto &i : lst) {\n    if (i % 2 == 0) {\n      count++;\n\
    \    }\n  }\n  if (count == lst.size()) {\n    return 0;\n  } else {\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n      if (lst[i]\
    \ % 2 != 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  return std::accumulate(lst.begin() + 1, lst.end(), 0L, [](long x, long\
    \ y) { return x + ((y % 2 == 0) ? 0 : y); });\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgo7rhm1e: /tmp/tmpgo7rhm1e.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint sum = 0;\n\tint i = 0;\n\tfor (auto n : lst) {\n\t\tif (i % 2 == 0\
    \ && n % 2 != 0)\n\t\t\tsum += n;\n\t\ti++;\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] % 2 == 0 && i % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n   \
    \ assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpnefaw5wg: /tmp/tmpnefaw5wg.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // Write your code here...\n  int pos = 0;\n  int sum = 0;\n  while(pos\
    \ < lst.size()){\n    if (pos % 2 == 0 && lst[pos] % 2 != 0){\n      sum += lst[pos];\n\
    \    }\n    pos++;\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n      \
    \  if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long output = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            output += lst[i];\n        }\n  \
    \  }\n    return output;\n}\nint main() {\n    auto candidate = solution;\n  \
    \  assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tif (lst.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t\
    }\n\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0){\n            if(lst[i] % 2 != 0){\n                sum += lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(unsigned int i = 0; i < lst.size(); i += 2) {\n\
    \        if(lst[i] % 2 != 0) {\n            ans += lst[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int n = lst.size();\n    long ans = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        if(i%2==0 && lst[i]%2==1)\n        {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // write your code here\n  long res = 0;\n  for(int i = 1; i < lst.size();\
    \ i += 2) {\n    if(lst[i] % 2 == 0) res += lst[i];\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpidp4_uhv: /tmp/tmpidp4_uhv.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if (i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong ans = 0;\n\tfor (int i = 0; i < lst.size(); i+=2) {\n\t\tif (lst[i]\
    \ % 2 != 0) {\n\t\t\tans += lst[i];\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n     \
    \   if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  std::vector<long> v;\n  for(int i=0;i<lst.size();i++){\n    if(i%2==0){\n\
    \      if(lst[i]%2!=0){\n        v.push_back(lst[i]);\n      }\n    }\n  }\n \
    \ int sum=0;\n  for(int i=0;i<v.size();i++){\n    sum+=v[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong answer = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n\t\t\tanswer += lst[i];\n\t\t}\n\t}\n\treturn\
    \ answer;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tint cnt = 0;\n\tfor (auto const& element : lst) {\n\t\t\
    if (cnt % 2 == 0) {\n\t\t\tif (element % 2 != 0) {\n\t\t\t\tsum += element;\n\t\
    \t\t}\n\t\t}\n\t\tcnt++;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int even = 0;\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(even%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n\
    \        }\n        even++;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long ans = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] %\
    \ 2 == 1 && i % 2 == 0){\n      ans += lst[i];\n    }\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long evenTotal = 0;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (i % 2 == 0 && lst[i] % 2 != 0) {\n            evenTotal += lst[i];\n\
    \        }\n    }\n    return evenTotal;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(long i = 0; i < lst.size(); i++)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            if(lst[i] % 2 != 0)\n            {\n\
    \                ans += lst[i];\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tint pos = 0;\n\tfor (long i = 0; i < lst.size(); i++)\
    \ {\n\t\tif (pos % 2 == 0 && lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t\tpos++;\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint oddSum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i]\
    \ % 2 == 1) {\n\t\t\toddSum += lst[i];\n\t\t}\n\t}\n\treturn oddSum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long output = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n      output += lst[i];\n    }\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2==0 && lst[i]%2!=0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int lst_size = lst.size();\n  int sum = 0;\n  for (int i = 0; i < lst_size;\
    \ i += 2) {\n    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==0)\n\
    \        {\n            if(lst[i]%2!=0)\n            {\n                sum+=lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  return accumulate(lst.begin() + 1, lst.end(), 0, [](long s, long n) { return\
    \ s + (n % 2 == 0 ? n : 0); });\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpelwmbo4b: /tmp/tmpelwmbo4b.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 && lst[i]%2!=0)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long res = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long res = 0;\n    int i = 0;\n    while(i < lst.size()){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            res += lst[i];\n        }\n     \
    \   i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    std::vector<long> odd;\n    long sum = 0;\n    // this loop gets all\
    \ the odd numbers into the vector\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] % 2 != 0){\n            odd.push_back(lst[i]);\n        }\n\
    \    }\n    // this loop adds all the odd numbers in the even positions\n    for(int\
    \ i = 0; i < odd.size(); i += 2){\n        sum += odd[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpinbj3phz: /tmp/tmpinbj3phz.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if((i\
    \ + 1) % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n   \
    \ assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpvzse8bva: /tmp/tmpvzse8bva.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++)\n        if(lst[i]%2!=0&&i%2==0)\n\
    \            sum+=lst[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n      if(i%2==0 && lst[i]%2!=0){\n\
    \        sum+=lst[i];\n      }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i++)\n        if(i%2\
    \ == 0 && lst[i]%2 == 1)\n            ans += lst[i];\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 != 0)\n      sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int x=0;\n  for(int i=0;i<lst.size();i+=2){\n    if(lst[i]%2!=0){\n   \
    \   x+=lst[i];\n    }\n  }\n  return x;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long answer = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n    \
    \    if(lst[i] % 2 == 0) answer += lst[i];\n    }\n    return answer;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmp8m73d99t: /tmp/tmp8m73d99t.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    int size = lst.size();\n    // this will only access\
    \ the even indices in the list\n    for (int i = 0; i < size; i += 2) {\n    \
    \    // this will only add odd numbers\n        if (lst[i] % 2 == 1) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong answer = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n\t\t\tanswer += lst[i];\n\t\t}\n\t}\n\treturn\
    \ answer;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    if(lst.size() == 0) return 0;\n    long sum = 0;\n    for(long i = 0;\
    \ i < lst.size(); i++)\n    {\n        if(lst[i] % 2 != 0 && i % 2 == 0)\n   \
    \     {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long s=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==0&&lst[i]%2!=0){\n\
    \            s+=lst[i];\n        }\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long ans = 0;\n  for(int i = 1; i < lst.size(); i+=2) ans += lst[i];\n\
    \  return ans;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpu_l5fx68: /tmp/tmpu_l5fx68.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  if(lst.size() == 0)\n    return 0;\n  long sum = 0;\n  for(long i = 0;\
    \ i < lst.size(); i++)\n  {\n    if(i % 2 == 0 && lst[i] % 2 != 0)\n      sum\
    \ += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  if(lst.size() <= 0){\n    return 0;\n  }\n\n  int sum = 0;\n  for(int i\
    \ = 0; i < lst.size(); i++){\n    if(i % 2 == 0 && lst[i] % 2 != 0){\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i]\
    \ % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // your code here\n  long sum = 0;\n  for(int i = 1; i < lst.size(); i+=2)\n\
    \  {\n    if(lst[i] % 2 == 0)\n    {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpez1s32m8: /tmp/tmpez1s32m8.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  int i=0;\n  while(i<lst.size()){\n    if(lst[i]%2==0){\n\
    \      sum=sum+lst[i+1];\n    }\n    i=i+2;\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpvpz2jxnw: /tmp/tmpvpz2jxnw.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int out = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n      out += lst[i];\n    }\n  }\n  return out;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if((i+1)%2\
    \ == 0){\n            if(lst[i]%2 != 0){\n                ans += lst[i];\n   \
    \         }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpyiw7ldxo: /tmp/tmpyiw7ldxo.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong ans = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ != 0 && lst[i] % 2 == 0) {\n\t\t\tans += lst[i];\n\t\t}\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmp7evulmh2: /tmp/tmp7evulmh2.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // Add your code here\n  long solution = 0;\n  for(int i = 1; i < lst.size();\
    \ i = i + 2){\n    if(lst[i] % 2 == 0){\n      solution += lst[i];\n    }\n  }\n\
    \  return solution;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpral29iy_: /tmp/tmpral29iy_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2!=0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n        if(lst[i]\
    \ % 2 == 0)\n            sum += lst[i];\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpi60_tuti: /tmp/tmpi60_tuti.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(long i=0;i<lst.size();i++){\n    if(i%2==0){\n     \
    \ if(lst[i]%2!=0){\n        sum+=lst[i];\n      }\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int l=lst.size();\n    long sum=0;\n    for(int i=0;i<l;i++)\n    {\n\
    \        if(i%2==0 && lst[i]%2!=0)\n        {\n            sum+=lst[i];\n    \
    \    }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong long sum = 0;\n\tint counter = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] % 2 == 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmp50fx20n2: /tmp/tmp50fx20n2.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  return std::accumulate(lst.begin() + 1, lst.end(), 0, [](long a, long b)\
    \ { return a + (b % 2 != 0 && b % 2 == 0); });\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpxwvso2rl: /tmp/tmpxwvso2rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int count = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            count = count + lst[i];\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // Write your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size();\
    \ i++)\n  {\n    if(i % 2 == 0 && lst[i] % 2 != 0)\n    {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong answer = 0;\n\tif (lst.size() == 0) return 0;\n\tint size = lst.size();\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tif (i % 2 == 0 && lst[i] % 2 != 0) {\n\
    \t\t\tanswer += lst[i];\n\t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    int i=0;\n    for(auto x:lst){\n        if(i%2!=0 &&\
    \ x%2==0){\n            sum+=x;\n        }\n        i++;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpatorhkgw: /tmp/tmpatorhkgw.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long result=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 &&\
    \ lst[i]%2!=0)\n    {\n      result+=lst[i];\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Your code here\n    int ans = 0;\n    if(lst.size() == 0) return 0;\n\
    \    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i % 2 == 0 && lst[i]\
    \ % 2 != 0)\n        {\n            ans += lst[i];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0){\n            if(lst[i] % 2 != 0){\n                sum += lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2==0&&lst[i]%2!=0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Write your code here\n    long counter = 0;\n    for(int i = 1; i\
    \ < lst.size(); i += 2){\n        if(lst[i] % 2 == 0){\n            counter +=\
    \ lst[i];\n        }\n    }\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmp_6i9e1hy: /tmp/tmp_6i9e1hy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            ans += lst[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  // Your code here\n  int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n\
    \    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpk59gvdnt: /tmp/tmpk59gvdnt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i++)\n        if(lst[i]\
    \ % 2 != 0 && i % 2 == 0)\n            ans += lst[i];\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int y = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      y += lst[i];\n    }\n  }\n  return y;\n}\nint main() {\n\
    \    auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if\
    \ (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long result=0;\n  for(int i=0;i<lst.size();i+=2){\n    if(lst[i]%2!=0){\n\
    \      result+=lst[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long soln = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            soln += lst[i];\n        }\n   \
    \ }\n    return soln;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long even = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0)\n      even += lst[i];\n  }\n  return even;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i]\
    \ % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(i%2==0&&lst[i]%2!=0)\n\
    \t\t\tsum+=lst[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\t// your code here\n\t\tstd::vector<long>::iterator iter = lst.begin();\n\
    \t\tlong sum = 0;\n\t\twhile (iter != lst.end()) {\n\t\t\tif (*iter % 2 != 0 &&\
    \ distance(lst.begin(), iter) % 2 == 0) {\n\t\t\t\tsum += *iter;\n\t\t\t}\n\t\t\
    \titer++;\n\t\t}\n\t\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long count=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==0\
    \ && lst[i]%2!=0)\n        {\n            count=count+lst[i];\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\t// TODO: Create sum variable and loop through vector\n\tint sum = 0;\n\t\
    for (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0 && lst[i] % 2 != 0)\
    \ {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\t// TODO: Implement solution\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (i % 2 == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t\
    }\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tstd::vector<long> oddEven;\n\tstd::vector<long> odd;\n\tlong i = 0;\n\t\
    if (lst.size() % 2 == 0) {\n\t\toddEven.resize(lst.size() / 2);\n\t}\n\telse {\n\
    \t\toddEven.resize(lst.size() / 2 + 1);\n\t}\n\twhile (i < lst.size()) {\n\t\t\
    oddEven[i / 2] = lst[i];\n\t\ti = i + 2;\n\t}\n\ti = 0;\n\twhile (i < oddEven.size())\
    \ {\n\t\tif (oddEven[i] % 2 != 0) {\n\t\t\todd.push_back(oddEven[i]);\n\t\t}\n\
    \t\ti++;\n\t}\n\tlong res = 0;\n\tfor (long j = 0; j < odd.size(); j++) {\n\t\t\
    res = res + odd[j];\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long res = 0;\n  for (unsigned int i = 0; i < lst.size(); i++) {\n    if\
    \ ((i + 1) % 2 == 0 && lst[i] % 2 != 0) {\n      res += lst[i];\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmp0k1eltpu: /tmp/tmp0k1eltpu.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  // TODO: Implement the solution\n  for(int i = 0; i <\
    \ lst.size(); i++)\n  {\n    if(i % 2 == 0 && lst[i] % 2 != 0)\n    {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(long i=0;i<lst.size();i++){\n    if(i%2!=0&&lst[i]%2==0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmp2j68yiv9: /tmp/tmp2j68yiv9.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if ((i % 2\
    \ == 0) && (lst[i] % 2 != 0)) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  if(lst.size()==0)\n  return 0;\n  std::vector<long> v;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    if(i%2==0)\n    {\n      if(lst[i]%2!=0)\n      v.push_back(lst[i]);\n\
    \    }\n  }\n  long sum=0;\n  for(int i=0;i<v.size();i++)\n  sum+=v[i];\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2!=0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sz = lst.size();\n    long result = 0;\n    for(long i = 0; i <\
    \ sz; i += 2) {\n        if(lst[i] % 2 != 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong ans = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tans += lst[i];\n\t\t}\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long total = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n \
    \       if (lst[i] % 2 != 0) {\n            total += lst[i];\n        }\n    }\n\
    \    return total;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i+=2)\n  {\n    if(lst[i]%2!=0)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Your code here\n    long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n\
    \    {\n        if(lst[i]%2!=0)\n        {\n            sum+=lst[i];\n       \
    \ }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i+=2)\n  {\n    if(lst[i]%2==1)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int s=0;\n  for(int i=0;i<lst.size();i+=2)\n  {\n    if(lst[i]%2!=0)\n\
    \    s+=lst[i];\n  }\n  return s;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong oddSum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n\t\t\toddSum += lst[i];\n\t\t}\n\t}\n\treturn\
    \ oddSum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n      if(lst[i]\
    \ % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i+=2) {\n    if (lst[i]\
    \ % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum=0;\n\tif(lst.size()==0) return 0;\n\tfor(int i=0;i<lst.size();i+=2){\n\
    \t\tif(lst[i]%2==1) sum+=lst[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong result=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(i%2==0 && lst[i]%2!=0){\n\
    \t\t\tresult+=lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tif (lst.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tif (i % 2 == 0 && lst[i] % 2 != 0)\n\t\t\tsum +=\
    \ lst[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long answer = 0;\n    int temp = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            answer += lst[i];\n\
    \        }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint total=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(i%2==0)\n\t\t\
    {\n\t\t\tif(lst[i]%2!=0)\n\t\t\t{\n\t\t\t\ttotal=total+lst[i];\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = solution;\n   \
    \ assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long answer = 0;\n    for(int i = 0; i < lst.size(); i++) {\n       \
    \ if(i % 2 == 0 && lst[i] % 2 != 0) {\n            answer += lst[i];\n       \
    \ }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long count = 0;\n  if (lst.size() == 0) {\n    return 0;\n  }\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n  \
    \    count += lst[i];\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    std::vector<long> even, odd;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            even.push_back(lst[i]);\n        }\
    \ else {\n            odd.push_back(lst[i]);\n        }\n    }\n    long sum =\
    \ 0;\n    for (auto el : odd) {\n        sum += el;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmp_bkf95h4: /tmp/tmp_bkf95h4.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int i = 0;\n  int even = 0;\n  int odd = 0;\n  for (auto num : lst) {\n\
    \    if (i % 2 == 0) {\n      even += num;\n    } else {\n      odd += num;\n\
    \    }\n    i++;\n  }\n  return even - odd;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpgj4lrcdl: /tmp/tmpgj4lrcdl.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n   long sum = 0;\n   // Your code here\n   int i = 0;\n   while(i<lst.size()){\n\
    \      if(lst[i]%2 == 0 && i%2 == 0){\n         sum += lst[i];\n      }\n    \
    \  i++;\n   }\n   return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmph8tmrlvh: /tmp/tmph8tmrlvh.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0) {\n\t\t\tif (lst[i] % 2 != 0) {\n\t\t\t\tsum += lst[i];\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2!=0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long result = 0;\n  if(lst.size()==0)\n  return 0;\n  for(int i=0;i<lst.size();i++)\n\
    \  {\n    if(i%2==0 && lst[i]%2!=0)\n    result+=lst[i];\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 ==\
    \ 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  if(lst.size() == 0) return 0;\n  long result = 0;\n  for(int i = 0; i <\
    \ lst.size(); i++)\n  {\n    if(i % 2 == 0 && lst[i] % 2 != 0)\n    {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(unsigned int i=0;i<lst.size();i++){\n    if(i%2!=0){\n\
    \      if(lst[i]%2==0){\n        sum+=lst[i];\n      }\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: "tmpyu10iz6k: /tmp/tmpyu10iz6k.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long result = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long result=0;\n  for(int i=0;i<lst.size();i+=2){\n    if(lst[i]%2!=0){\n\
    \      result+=lst[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1})))\
    \ == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n\
    \    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5,\
    \ 9}))) == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n\
    \    assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n      if(lst[i]\
    \ % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if\
    \ (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int odd_sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n      odd_sum += lst[i];\n    }\n  }\n  return\
    \ odd_sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    // Your code here...\n    std::vector<long> odd;\n    for(long i = 0;\
    \ i < lst.size(); i++){\n      if(lst[i] % 2 != 0 && i % 2 == 0){\n        odd.push_back(lst[i]);\n\
    \      }\n    }\n    int sum = 0;\n    for(int i = 0; i < odd.size(); i++){\n\
    \      sum += odd[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    int sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==0)\n\
    \        {\n            if(lst[i]%2!=0)\n            {\n                sum+=lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  int r = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i]\
    \ % 2 == 1) {\n      r += lst[i];\n    }\n  }\n  return r;\n}\nint main() {\n\
    \    auto candidate = solution;\n    assert(candidate((std::vector<long>({5, 8,\
    \ 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
    \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
    \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long answer = 0;\n    for(int i = 0; i < lst.size(); i++) {\n       \
    \ if(i % 2 == 0 && lst[i] % 2 != 0) {\n            answer += lst[i];\n       \
    \ }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==0){\n\
    \            if(lst[i]%2!=0){\n                sum+=lst[i];\n            }\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n\
    \    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3,\
    \ 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24,\
    \ 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n\
    \    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3, 13, 2,\
    \ 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  int size = lst.size();\n  for(int i = 0; i < size; i++)\
    \ {\n    if(i % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0){\n            if(lst[i] % 2 != 0){\n                sum += lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({5, 8, 7, 1}))) == (12));\n\
    \    assert(candidate((std::vector<long>({3, 3, 3, 3, 3}))) == (9));\n    assert(candidate((std::vector<long>({30,\
    \ 13, 24, 321}))) == (0));\n    assert(candidate((std::vector<long>({5, 9})))\
    \ == (5));\n    assert(candidate((std::vector<long>({2, 4, 8}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({30, 13, 23, 32}))) == (23));\n    assert(candidate((std::vector<long>({3,\
    \ 13, 2, 9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tint result = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n\t\t\tresult += lst[i];\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    std::vector<long> odds;\n    for(int i = 0; i < lst.size(); i++){\n \
    \       if(i % 2 == 0 && lst[i] % 2 != 0){\n            odds.push_back(lst[i]);\n\
    \        }\n    }\n    return std::accumulate(odds.begin(), odds.end(), 0);\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if ((i % 2\
    \ == 0) && (lst[i] % 2 != 0)) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long odd_even_sum=0;\n    for(long i=0;i<lst.size();i++){\n        if(i%2==0\
    \ && lst[i]%2!=0){\n            odd_even_sum+=lst[i];\n        }\n    }\n    return\
    \ odd_even_sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
    \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3,\
    \ 3}))) == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321})))\
    \ == (0));\n    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
    \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
