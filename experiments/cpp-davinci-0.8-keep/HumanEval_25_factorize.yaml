name: HumanEval_25_factorize
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n// Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n// Input number should be equal to the product of all factors\n\
  // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
  // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n"
tests: "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
  \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
  \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
  \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
  \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3, 3,\
  \ 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3, 19, 19,\
  \ 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
completions: ["\tstd::vector<long> answer;\n\tassert(n >= 2);\n\twhile (n % 2 == 0)\
    \ {\n\t\tanswer.push_back(2);\n\t\tn /= 2;\n\t}\n\tfor (long d = 3; d * d <= n;\
    \ d += 2) {\n\t\twhile (n % d == 0) {\n\t\t\tanswer.push_back(d);\n\t\t\tn /=\
    \ d;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tanswer.push_back(n);\n\t}\n\treturn answer;",
  "\t// Insert your code here\n\tstd::vector<long> vec;\n\tfor (long i = 2; i <= n;\
    \ i++) {\n\t\tif (n % i == 0) {\n\t\t\tvec.push_back(i);\n\t\t\tn /= i;\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn vec;", "    std::vector<long> result;\n    long factor\
    \ = 2;\n    for (; factor * factor <= n; ++factor) {\n        for (; n % factor\
    \ == 0; n /= factor) {\n            result.push_back(factor);\n        }\n   \
    \ }\n    if (n > 1) {\n        result.push_back(n);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::vector<long> v;\n    // long n = std::stol(num);\n\
    \    while (n % 2 == 0) {\n        result.push_back(2);\n        n = n / 2;\n\
    \    }\n    for (long i = 3; i <= std::sqrt(n); i = i + 2) {\n        while (n\
    \ % i == 0) {\n            result.push_back(i);\n            n = n / i;\n    \
    \    }\n    }\n    if (n > 2)\n        result.push_back(n);\n    return result;",
  "    // \u0444\u0430\u043A\u0442\u043E\u0440\u0438\u0437\u0430\u0446\u0438\u044F\
    \ \u043C\u0435\u0442\u043E\u0434\u043E\u043C \u043F\u0440\u043E\u0441\u0442\u044B\
    \u0445 \u043C\u043D\u043E\u0436\u0438\u0442\u0435\u043B\u0435\u0439\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n \
    \           int k = 0;\n            while (n % i == 0) {\n                k++;\n\
    \                n /= i;\n            }\n            for (int j = 0; j < k; j++)\
    \ {\n                factors.push_back(i);\n            }\n        }\n    }\n\
    \    return factors;", "    std::vector<long> ret;\n    for (long i = 2; i * i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            ret.push_back(i);\n   \
    \         n /= i;\n            i--;\n        }\n    }\n    ret.push_back(n);\n\
    \    return ret;", "    std::vector<long> res;\n    if (n == 1 || n == 0) {\n\
    \        res.push_back(n);\n        return res;\n    }\n    if (n == 2) {\n  \
    \      res.push_back(2);\n        return res;\n    }\n    long num = n;\n    while\
    \ (num % 2 == 0) {\n        res.push_back(2);\n        num /= 2;\n    }\n    for\
    \ (long i = 3; i * i <= num; i += 2) {\n        while (num % i == 0) {\n     \
    \       res.push_back(i);\n            num /= i;\n        }\n    }\n    if (num\
    \ > 2) {\n        res.push_back(num);\n    }\n    return res;", "    assert(n>0);\n\
    \    std::vector<long> result;\n    while(n%2==0){\n        result.push_back(2);\n\
    \        n=n/2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n\
    \            result.push_back(i);\n            n=n/i;\n        }\n    }\n    if(n>2){\n\
    \        result.push_back(n);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        result.push_back(n);\n    }\n    return result;", "\t\
    std::vector<long> v;\n\tfor (long i = 2; i * i <= n; i++) {\n\t\twhile (n % i\
    \ == 0) {\n\t\t\tv.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 1)\n\t\t\
    v.push_back(n);\n\treturn v;", "    std::vector<long>res;\n    if(n%2==0){\n \
    \       while(n%2==0){\n            res.push_back(2);\n            n=n/2;\n  \
    \      }\n    }\n    for(int i=3;i<=sqrt(n);i+=2){\n        if(n%i==0){\n    \
    \        while(n%i==0){\n                res.push_back(i);\n                n=n/i;\n\
    \            }\n        }\n    }\n    if(n>2){\n        res.push_back(n);\n  \
    \  }\n    return res;", "\tstd::vector<long> v;\n\t// your code goes here\n\t\
    // Even number check\n\twhile (n % 2 == 0) {\n\t\tv.push_back(2);\n\t\tn = n /\
    \ 2;\n\t}\n\t// Remaining factor check\n\tfor (int i = 3; i <= sqrt(n); i = i\
    \ + 2) {\n\t\twhile (n % i == 0) {\n\t\t\tv.push_back(i);\n\t\t\tn = n / i;\n\t\
    \t}\n\t}\n\t// This condition is to handle the case\n\t// when n is a prime number\
    \ greater than 2\n\tif (n > 2)\n\t\tv.push_back(n);\n\treturn v;", "    std::vector<long>\
    \ res;\n    long count = 0;\n    while(n%2 == 0) {\n        count++;\n       \
    \ n = n/2;\n    }\n    if(count > 0) {\n        for(int i = 0; i < count; i++)\
    \ {\n            res.push_back(2);\n        }\n    }\n    for(long i = 3; i <=\
    \ sqrt(n); i = i+2) {\n        count = 0;\n        while(n%i == 0) {\n       \
    \     count++;\n            n = n/i;\n        }\n        if(count > 0) {\n   \
    \         for(int j = 0; j < count; j++) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    if(n > 2) {\n        res.push_back(n);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long number = n;\n\
    \    long divisor = 2;\n    while (number > 1) {\n        if (number % divisor\
    \ == 0) {\n            res.push_back(divisor);\n            number /= divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return res;",
  "    std::vector<long> factors;\n    // TODO: your code here.\n    assert(n > 0);\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return factors;",
  "    std::vector<long> res;\n    while (n % 2 == 0) {\n        res.push_back(2);\n\
    \        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n      \
    \  while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    if (n > 2)\n        res.push_back(n);\n    return res;",
  "\tstd::vector<long> list;\n\t// ############################################################\n\
    \tfor (long i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tlist.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\t// ############################################################\n\
    \treturn list;", "    // \u0412\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043D\
    \u0438\u0435 \u0437\u0434\u0435\u0441\u044C\n    std::vector<long> divisors;\n\
    \    while (n % 2 == 0) {\n        divisors.push_back(2);\n        n /= 2;\n \
    \   }\n    for (int i = 3; i <= sqrt(n); i+=2) {\n        while (n % i == 0) {\n\
    \            divisors.push_back(i);\n            n /= i;\n        }\n    }\n \
    \   if (n > 2)\n        divisors.push_back(n);\n    return divisors;", "    assert(n\
    \ >= 1);\n    std::vector<long> res;\n    while (n > 1) {\n        int d = 1;\n\
    \        while (n % d != 0) {\n            d++;\n        }\n        while (n %\
    \ d == 0) {\n            res.push_back(d);\n            n /= d;\n        }\n \
    \   }\n    return res;", "\tstd::vector<long> result;\n\tlong number = n;\n\t\
    for (long factor = 2; factor * factor <= number; factor++) {\n\t\twhile (number\
    \ % factor == 0) {\n\t\t\tresult.push_back(factor);\n\t\t\tnumber /= factor;\n\
    \t\t}\n\t}\n\tif (number > 1) {\n\t\tresult.push_back(number);\n\t}\n\treturn\
    \ result;", "  assert(n > 0);\n  std::vector<long> result;\n  int cnt = 0;\n \
    \ for (int i = 2; i*i <= n; i++) {\n    if (n % i == 0) {\n      cnt = 0;\n  \
    \    while (n % i == 0) {\n        cnt++;\n        n /= i;\n      }\n      while\
    \ (cnt--) {\n        result.push_back(i);\n      }\n    }\n  }\n  if (n > 1) {\n\
    \    result.push_back(n);\n  }\n  return result;", "\tstd::vector<long> result;\n\
    \t// Insert code here\n\t// result = {2, 3, 3, 3, 3}; // Output for n = 81\n\t\
    // result = {3, 5, 5}; // Output for n = 75\n\t// result = {3, 5, 7}; // Output\
    \ for n = 105\n\treturn result;", "    std::vector<long> list;\n    int temp =\
    \ n;\n    while(n%2==0){\n        list.push_back(2);\n        n = n/2;\n    }\n\
    \    for(int i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            list.push_back(i);\n\
    \            n = n/i;\n        }\n    }\n    if(n>2){\n        list.push_back(n);\n\
    \    }\n    return list;", "    std::vector<long> factors;\n    factors.push_back(1);\n\
    \    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n       \
    \     factors.push_back(i);\n            if (i != sqrt(n)) {\n               \
    \ factors.push_back(n / i);\n            }\n        }\n    }\n    std::sort(factors.begin(),\
    \ factors.end());\n    return factors;", "\tstd::vector<long> list;\n\twhile (n\
    \ % 2 == 0) {\n\t\tlist.push_back(2);\n\t\tn = n / 2;\n\t}\n\tfor (int i = 3;\
    \ i <= sqrt(n); i = i + 2) {\n\t\twhile (n % i == 0) {\n\t\t\tlist.push_back(i);\n\
    \t\t\tn = n / i;\n\t\t}\n\t}\n\tif (n > 2)\n\t\tlist.push_back(n);\n\treturn list;",
  "\tstd::vector<long> answer;\n\tstd::vector<long> primes;\n\tint i = 2;\n\twhile\
    \ (n > 1) {\n\t\tif (n % i == 0) {\n\t\t\tanswer.push_back(i);\n\t\t\twhile (n\
    \ % i == 0)\n\t\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn answer;", "    std::vector<long>\
    \ res;\n    while (n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n\
    \    }\n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0)\
    \ {\n            res.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  if (n > 2)\n        res.push_back(n);\n    return res;", "  vector<long> res;\n\
    \  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      res.push_back(i);\n\
    \      n /= i;\n      i--;\n    }\n  }\n  return res;", "    std::vector<long>\
    \ res;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n \
    \           res.push_back(i);\n            while (n % i == 0) {\n            \
    \    n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;", "\tassert(n > 0);\n\tstd::vector<long> v;\n\tfor (long\
    \ i = 2; i * i <= n; i++) {\n\t\tint cnt = 0;\n\t\twhile (n % i == 0) {\n\t\t\t\
    n /= i;\n\t\t\tcnt++;\n\t\t}\n\t\tfor (int j = 0; j < cnt; j++) {\n\t\t\tv.push_back(i);\n\
    \t\t}\n\t}\n\tif (n > 1) {\n\t\tv.push_back(n);\n\t}\n\treturn v;", "     std::vector<long>\
    \ result;\n     long sqrt_n = sqrt(n) + 1;\n     for (int i = 2; i < sqrt_n; i++)\
    \ {\n          while (n % i == 0) {\n               result.push_back(i);\n   \
    \            n /= i;\n          }\n     }\n     if (n > 1)\n          result.push_back(n);\n\
    \     return result;", "\tstd::vector<long> factors;\n\twhile (n % 2 == 0) {\n\
    \t\tfactors.push_back(2);\n\t\tn /= 2;\n\t}\n\tfor (long i = 3; i <= sqrt(n);\
    \ i += 2) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\t\t\tn /=\
    \ i;\n\t\t}\n\t}\n\tif (n > 2)\n\t\tfactors.push_back(n);\n\treturn factors;",
  "\t\n\tstd::vector<long> fact;\n\twhile(n%2==0)\n\t{\n\t\tfact.push_back(2);\n\t\
    \tn/=2;\n\t}\n\tfor(long i=3;i<=sqrt(n);i+=2)\n\t{\n\t\twhile(n%i==0)\n\t\t{\n\
    \t\t\tfact.push_back(i);\n\t\t\tn/=i;\n\t\t}\n\t}\n\tif(n>2)\n\t{\n\t\tfact.push_back(n);\n\
    \t}\n\treturn fact;", "\tstd::vector<long> res;\n\tlong cnt = 0;\n\tfor (int i\
    \ = 2; i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tcnt = 0;\n\t\t\twhile (n %\
    \ i == 0) {\n\t\t\t\tcnt++;\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t\tfor (int j = 0; j\
    \ < cnt; j++) {\n\t\t\t\tres.push_back(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;",
  "    std::vector<long> v;\n    if(n==0 || n==1) return v;\n    if(n<0) {\n     \
    \   v.push_back(-1);\n        n = abs(n);\n    }\n    long i = 2;\n    while(i<=n)\
    \ {\n        if(n%i==0) {\n            v.push_back(i);\n            n /= i;\n\
    \        }\n        else\n            i++;\n    }\n    return v;", "    std::vector<long>\
    \ factors;\n    if (n % 2 == 0) {\n        factors.push_back(2);\n        n /=\
    \ 2;\n    }\n    while (n % 2 == 0) {\n        factors.push_back(2);\n       \
    \ n /= 2;\n    }\n    // i += 2 to skip all the even numbers\n    for (long i\
    \ = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    // if (n == 1) return {};\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;",
  "    //std::vector<long> res;\n    std::vector<long> factors;\n    factors.push_back(1);\n\
    \    factors.push_back(n);\n    // if(n%2==0) {\n    //     res.push_back(2);\n\
    \    //     n=n/2;\n    // }\n    // for(int i=3;i<=n;i=i+2) {\n    //     if(n%i==0)\
    \ {\n    //         res.push_back(i);\n    //         n=n/i;\n    //     }\n \
    \   // }\n    // return res;\n    for(int i=2;i<=n;i++) {\n        if(n%i==0)\
    \ {\n            if(std::find(factors.begin(),factors.end(),i)==factors.end())\n\
    \                factors.push_back(i);\n            n=n/i;\n        }\n    }\n\
    \    return factors;", "    std::vector<long> factors;\n    for (int i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return factors;",
  "    std::vector<long> result;\n    while (n % 2 == 0) {\n        result.push_back(2);\n\
    \        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n      \
    \  while (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    if (n > 2)\n        result.push_back(n);\n    return result;",
  "    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n   \
    \     }\n    }\n    return factors;", "\t// TODO\n\tstd::vector<long> result;\n\
    \tif (n <= 1) {\n\t\tresult.push_back(n);\n\t\treturn result;\n\t}\n\tfor (long\
    \ i = 2; i <= n; ++i) {\n\t\twhile (n % i == 0) {\n\t\t\tresult.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn result;", "    std::vector<long> result;\n\
    \    while (n%2 == 0) {\n        result.push_back(2);\n        n = n/2;\n    }\n\
    \    for (long i = 3; i <= std::sqrt(n); i = i+2) {\n        while (n%i == 0)\
    \ {\n            result.push_back(i);\n            n = n/i;\n        }\n    }\n\
    \    if (n > 2)\n        result.push_back(n);\n    return result;", "    std::vector<long>\
    \ factors;\n    long *prime = (long *) malloc(n * sizeof(long));\n    memset(prime,\
    \ 0, n);\n    for (long i = 2; i < n; i++) {\n        if (prime[i] == 0) {\n \
    \           if (n % i == 0) {\n                factors.push_back(i);\n       \
    \         n /= i;\n                prime[i] = 1;\n                i = 1;\n   \
    \         }\n        }\n    }\n    free(prime);\n    return factors;", "    assert(n>0);\n\
    \    std::vector<long> factors;\n    for(long i=2; i<=n; i++){\n        while(n%i==0){\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;", "    std::vector<long> result;\n    for (long factor = 2;\
    \ factor <= n; factor++) {\n        while (n % factor == 0) {\n            result.push_back(factor);\n\
    \            n /= factor;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          res.push_back(i);\n            n /= i;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    if (n > 0) {\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                result.push_back(i);\n\
    \                i--;\n                n /= i;\n            }\n        }\n   \
    \ }\n    return result;", "    std::vector<long> factors;\n    if (n == 1) {\n\
    \        factors.push_back(1);\n        return factors;\n    }\n    for (long\
    \ i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ primeFactors;\n    long curr = n;\n    for (long i = 2; i < n; i++) {\n    \
    \    if (curr % i == 0) {\n            primeFactors.push_back(i);\n          \
    \  curr /= i;\n            i--;\n        }\n    }\n    primeFactors.push_back(curr);\n\
    \    return primeFactors;", "    std::vector<long> factors;\n    if (n == 0) {\n\
    \        return factors;\n    }\n    if (n < 0) {\n        factors.push_back(-1);\n\
    \        n = -n;\n    }\n    for (long i = 2; i <= n; i++) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n    }\n    return factors;", "    std::vector<long> Factors;\n    std::vector<long>\
    \ count;\n    long copy = n;\n    for(long i = 2;i*i<=n;i++){\n        int c =\
    \ 0;\n        while(n%i==0){\n            c++;\n            n/=i;\n        }\n\
    \        if(c>0){\n            Factors.push_back(i);\n            count.push_back(c);\n\
    \        }\n    }\n    if(n>1){\n        Factors.push_back(n);\n        count.push_back(1);\n\
    \    }\n    std::vector<long> final;\n    for(int i = 0;i<Factors.size();i++){\n\
    \        while(count[i]--){\n            final.push_back(Factors[i]);\n      \
    \  }\n    }\n    long long product = 1;\n    for(int i = 0;i<final.size();i++){\n\
    \        product*=final[i];\n    }\n    assert(product==copy);\n    return final;",
  "    std::vector<long> factors;\n    while (n % 2 == 0)\n    {\n        factors.push_back(2);\n\
    \        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2)\n   \
    \ {\n        while (n % i == 0)\n        {\n            factors.push_back(i);\n\
    \            n = n / i;\n        }\n    }\n    if (n > 2)\n        factors.push_back(n);\n\
    \    return factors;", "    std::vector<long> ans;\n    for (long i = 2; i <=\
    \ n; ++i) {\n        int cnt = 0;\n        while (n % i == 0) {\n            ++cnt;\n\
    \            n /= i;\n        }\n        if (cnt) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;", "\tstd::vector<long> v;\n\tint cnt = 0;\n\
    \twhile (n % 2 == 0) {\n\t\tcnt++;\n\t\tn /= 2;\n\t}\n\tif (cnt > 0) {\n\t\tfor\
    \ (int i = 0; i < cnt; i++)\n\t\t\tv.push_back(2);\n\t}\n\tfor (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n\t\tcnt = 0;\n\t\twhile (n % i == 0) {\n\t\t\tcnt++;\n\t\
    \t\tn /= i;\n\t\t}\n\t\tif (cnt > 0) {\n\t\t\tfor (int j = 0; j < cnt; j++)\n\t\
    \t\t\tv.push_back(i);\n\t\t}\n\t}\n\tif (n > 2) {\n\t\tv.push_back(n);\n\t}\n\t\
    return v;", "    std::vector<long> ret;\n    while(n%2==0){\n        ret.push_back(2);\n\
    \        n=n/2;\n    }\n    while(n%3==0){\n        ret.push_back(3);\n      \
    \  n=n/3;\n    }\n    long i=5;\n    while(i*i<=n){\n        while(n%i==0){\n\
    \            ret.push_back(i);\n            n=n/i;\n        }\n        i+=2;\n\
    \    }\n    if(n>1){\n        ret.push_back(n);\n    }\n    return ret;", "  std::vector<long>\
    \ ans;\n  for (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n    \
    \  ans.push_back(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    ans.push_back(n);\n\
    \  }\n  return ans;", "    // Write your code here\n    std::vector<long> res;\n\
    \    while(n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n\
    \    for(long i = 3; i <= n; i += 2) {\n        while(n % i == 0) {\n        \
    \    res.push_back(i);\n            n /= i;\n        }\n    }\n    return res;",
  "\tstd::vector<long> res;\n\tfor (long i = 2; i * i <= n; i++) {\n\t\twhile (n %\
    \ i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 1)\
    \ {\n\t\tres.push_back(n);\n\t}\n\treturn res;", "    if (n < 2) return std::vector<long>();\n\
    \    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n\
    \        n /= 2;\n    }\n    for (long i = 3; i <= std::sqrt(n); i += 2) {\n \
    \       while (n % i == 0) {\n            factors.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n \
    \   }\n    return factors;", "  std::vector<long> factors{};\n  long l = 2;\n\
    \  while (n > 1) {\n    while (n % l == 0) {\n      factors.push_back(l);\n  \
    \    n /= l;\n    }\n    l++;\n  }\n  return factors;", "    std::vector<long>\
    \ result;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n\
    \            result.push_back(i);\n            n /= i;\n            i--;\n   \
    \     }\n    }\n    result.push_back(n);\n    return result;", "    std::vector<long>\
    \ res;\n    while(n%2==0){\n        res.push_back(2);\n        n/=2;\n    }\n\
    \    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            res.push_back(i);\n\
    \            n/=i;\n        }\n    }\n    if(n>2)\n        res.push_back(n);\n\
    \    return res;", "    std::vector<long> res;\n    for (long i = 2; i <= n; i++)\
    \ {\n        int cnt = 0;\n        while (n % i == 0) {\n            n /= i;\n\
    \            cnt++;\n        }\n        for (int j = 0; j < cnt; j++) {\n    \
    \        res.push_back(i);\n        }\n    }\n    return res;", "    \tlong ncopy\
    \ = n;\n        std::vector<long> factors;\n        for (long p = 2; p * p <=\
    \ n; ++p) {\n            while (ncopy % p == 0) {\n                factors.push_back(p);\n\
    \                ncopy /= p;\n            }\n        }\n        if (ncopy > 1)\
    \ {\n            factors.push_back(ncopy);\n        }\n        return factors;",
  "\tstd::vector<long> v;\n\tint i = 2;\n\twhile (n > 1) {\n\t\tint count = 0;\n\t\
    \twhile (n % i == 0) {\n\t\t\tn /= i;\n\t\t\tcount++;\n\t\t}\n\t\twhile (count\
    \ > 0) {\n\t\t\tv.push_back(i);\n\t\t\tcount--;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ v;", "    std::vector<long> res;\n    if (n < 0) {\n        res.push_back(-1);\n\
    \        n *= -1;\n    }\n    while (n % 2 == 0) {\n        res.push_back(2);\n\
    \        n /= 2;\n    }\n    for (long i = 3; i <= n; i += 2) {\n        while\
    \ (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n       \
    \ }\n    }\n    return res;", "    assert(n>0);\n    // TODO: implement factorization\
    \ algorithm\n    std::vector<long> fact;\n    while(n%2==0){\n        fact.push_back(2);\n\
    \        n = n/2;\n    }\n    for(int i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n\
    \            fact.push_back(i);\n            n=n/i;\n        }\n    }\n    if(n>2){\n\
    \        fact.push_back(n);\n    }\n    return fact;", "    std::vector<long>\
    \ prime;\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i\
    \ == 0) {\n            prime.push_back(i);\n            n = n / i;\n         \
    \   i--;\n        }\n    }\n    return prime;", "\tstd::vector<long> result;\n\
    \tfor (long i = 2; i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\twhile (n % i ==\
    \ 0) {\n\t\t\t\tresult.push_back(i);\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;", "    std::vector<long> res;\n    while(n>1){\n        int i=2;\n\
    \        while(n%i!=0){\n            i++;\n        }\n        res.push_back(i);\n\
    \        n/=i;\n    }\n    return res;", "\tstd::vector<long> result;\n\tlong\
    \ l=sqrt(n);\n\tfor(long i=2;i<=l;i++)\n\t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\twhile(n%i==0)\n\
    \t\t\t{\n\t\t\t\tresult.push_back(i);\n\t\t\t\tn=n/i;\n\t\t\t}\n\t\t}\n\t}\n\t\
    if(n>1)\n\t\tresult.push_back(n);\n\treturn result;", "\tstd::vector<long> v;\n\
    \tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tv.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn v;", "    std::vector<long>res;\n\
    \    for(long i=2;i<=n;i++){\n        while(n%i==0){\n            res.push_back(i);\n\
    \            n/=i;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ output;\n    std::vector<long> prime(n+1,1);\n    prime[0]=0;\n    prime[1]=0;\n\
    \    for(long i=2;i<n+1;i++){\n        if(prime[i]==1){\n            for(long\
    \ j=i*i;j<n+1;j+=i){\n                prime[j]=0;\n            }\n        }\n\
    \    }\n    for(long i=2;i<n+1;i++){\n        if(prime[i]==1 && n%i==0){\n   \
    \         long num=0;\n            while(n%i==0){\n                num++;\n  \
    \              n/=i;\n            }\n            for(long j=0;j<num;j++){\n  \
    \              output.push_back(i);\n            }\n        }\n    }\n    return\
    \ output;", "    std::vector<long> factors;\n    for (long i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    return factors;", "    // TODO: write your\
    \ code here\n    std::vector<long> prime;\n    for(long d = 2; d * d <= n; ++d)\
    \ {\n        while(n % d == 0) {\n            prime.push_back(d);\n          \
    \  n /= d;\n        }\n    }\n    if(n > 1) {\n        prime.push_back(n);\n \
    \   }\n    return prime;", "    std::vector<long> prime_factors;\n    std::vector<long>\
    \ factors;\n    while (n % 2 == 0) {\n        prime_factors.push_back(2);\n  \
    \      n = n / 2;\n    }\n    for (long i = 3; i <= sqrt(n); i = i + 2) {\n  \
    \      while (n % i == 0) {\n            prime_factors.push_back(i);\n       \
    \     n = n / i;\n        }\n    }\n    if (n > 2)\n        prime_factors.push_back(n);\n\
    \    return prime_factors;", "    std::vector<long> res;\n    for (long i = 2;\
    \ i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;", "    std::vector<long> v;\n    long x = n;\n    for(long\
    \ i = 2; i <= x; i++) {\n        if(x % i == 0) {\n            v.push_back(i);\n\
    \            x /= i;\n            i = 1;\n        }\n    }\n    return v;", " \
    \   std::vector<long> a;\n    for(long i=2;i<=n;i++)\n    {\n        while(n%i==0)\n\
    \        {\n            a.push_back(i);\n            n=n/i;\n        }\n    }\n\
    \    return a;", "    assert(n > 0);\n    std::vector<long> res;\n    while (n\
    \ % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n    int i =\
    \ 3;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        } else {\n            i += 2;\n        }\n    }\n\
    \    if (n > 1) {\n        res.push_back(n);\n    }\n    return res;", "    std::vector<long>\
    \ factors;\n    if (n > 0) {\n        int count = 0;\n        while (n % 2 ==\
    \ 0) {\n            count++;\n            n /= 2;\n        }\n        for (int\
    \ i = 0; i < count; i++)\n            factors.push_back(2);\n        for (int\
    \ i = 3; i <= sqrt(n); i += 2) {\n            count = 0;\n            while (n\
    \ % i == 0) {\n                count++;\n                n /= i;\n           \
    \ }\n            for (int j = 0; j < count; j++)\n                factors.push_back(i);\n\
    \        }\n        if (n > 2)\n            factors.push_back(n);\n    }\n   \
    \ return factors;", "\tint z = 0;\n\tstd::vector<long> v;\n\tfor (long i = 2;\
    \ i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tz++;\n\t\t\tv.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn v;", "\tstd::vector<long> result;\n\tif (n\
    \ == 0) {\n\t\treturn result;\n\t}\n\tif (n == 1) {\n\t\tresult.push_back(1);\n\
    \t\treturn result;\n\t}\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i ==\
    \ 0) {\n\t\t\tresult.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ result;", "  std::vector<long> factors;\n  while (n % 2 == 0) {\n    factors.push_back(2);\n\
    \    n /= 2;\n  }\n  for (long d = 3; d <= sqrt(n); d += 2) {\n    while (n %\
    \ d == 0) {\n      factors.push_back(d);\n      n /= d;\n    }\n  }\n  if (n >\
    \ 2) {\n    factors.push_back(n);\n  }\n  return factors;", "    std::vector<long>\
    \ result;\n    int i = 2;\n    while (n > 1) {\n        int count = 0;\n     \
    \   while (n % i == 0) {\n            count++;\n            n /= i;\n        }\n\
    \        if (count > 0) {\n            result.push_back(i);\n        }\n     \
    \   i++;\n    }\n    return result;", "\tstd::vector<long> res;\n\tint i=0;\n\t\
    while(n>1)\n\t{\n\t\twhile(n%factor[i]==0)\n\t\t{\n\t\t\tres.push_back(factor[i]);\n\
    \t\t\tn/=factor[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn res;", "\tstd::vector<long>\
    \ res = {};\n\tfor (long i = 2; i*i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\
    \t\tres.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tres.push_back(n);\n\
    \t}\n\treturn res;", "\tstd::vector<long> factors;\n\tfor (long i = 2; i <= n;\
    \ i++) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\t\t\tn /= i;\n\
    \t\t}\n\t}\n\treturn factors;", "\tlong p = 2;\n\tstd::vector<long> res;\n\twhile\
    \ (n != 1) {\n\t\tlong k = 0;\n\t\twhile (n % p == 0) {\n\t\t\tn /= p;\n\t\t\t\
    k++;\n\t\t}\n\t\tif (k != 0) {\n\t\t\tres.insert(res.end(), k, p);\n\t\t}\n\t\t\
    p++;\n\t}\n\treturn res;", '    // your code here', "  std::vector<long> result;\n\
    \  if (n == 1) return result;\n  int count = 0;\n  while (n % 2 == 0) {\n    n\
    \ /= 2;\n    ++count;\n  }\n  while (count--) result.push_back(2);\n  long d =\
    \ 3;\n  while (d * d <= n) {\n    if (n % d == 0) {\n      count = 0;\n      while\
    \ (n % d == 0) {\n        n /= d;\n        ++count;\n      }\n      while (count--)\
    \ result.push_back(d);\n    }\n    d += 2;\n  }\n  if (n > 1) result.push_back(n);\n\
    \  return result;", "    assert(n > 0);\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ result;\n    long curr = 2;\n    long ct = 0;\n    while (n != 1) {\n      \
    \  if (n % curr == 0) {\n            result.push_back(curr);\n            n /=\
    \ curr;\n            ++ct;\n        } else {\n            curr++;\n        }\n\
    \    }\n    return result;", "    std::vector<long> factors;\n    if (n==1) {\n\
    \        factors.push_back(1);\n        return factors;\n    }\n    long i = 2;\n\
    \    while (n != 1) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;", "    std::vector<long>  result;\n    for (int i = 2; i <=\
    \ n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return result;", "  std::vector<long>\
    \ primes;\n  std::vector<long> factors;\n  if (n==1) {\n    primes.push_back(1);\n\
    \    return primes;\n  }\n  else {\n    for (long i=2; i<=n; i++) {\n      if\
    \ (n%i==0) {\n        primes.push_back(i);\n        factors.push_back(i);\n  \
    \      n=n/i;\n        i=1;\n      }\n    }\n    return factors;\n  }", "  assert(n\
    \ >= 2);\n\n  std::vector<long> primeFactors;\n  while (n % 2 == 0) {\n    primeFactors.push_back(2);\n\
    \    n /= 2;\n  }\n\n  for (long factor = 3; factor <= sqrt(n); factor += 2) {\n\
    \    while (n % factor == 0) {\n      primeFactors.push_back(factor);\n      n\
    \ /= factor;\n    }\n  }\n\n  if (n > 2) {\n    primeFactors.push_back(n);\n \
    \ }\n\n  return primeFactors;", "    // your code goes here\n    std::vector<long>\
    \ v;\n    long i=2;\n    while(n!=1)\n    {\n        if(n%i==0)\n        {\n \
    \           v.push_back(i);\n            n/=i;\n        }\n        else\n    \
    \    {\n            i++;\n        }\n    }\n    return v;", "\tstd::vector<long>\
    \ factors;\n\tint count = 0;\n\twhile (n % 2 == 0) {\n\t\tcount++;\n\t\tn = n\
    \ / 2;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tfactors.push_back(2);\n\t\
    }\n\tcount = 0;\n\tfor (int i = 3; i <= sqrt(n); i = i + 2) {\n\t\twhile (n %\
    \ i == 0) {\n\t\t\tcount++;\n\t\t\tn = n / i;\n\t\t}\n\t\tfor (int j = 0; j <\
    \ count; j++) {\n\t\t\tfactors.push_back(i);\n\t\t}\n\t\tcount = 0;\n\t}\n\tif\
    \ (n > 2) {\n\t\tfactors.push_back(n);\n\t}\n\treturn factors;", "    assert(n>=1);\n\
    \    std::vector<long> a;\n    while(n%2==0){\n        a.push_back(2);\n     \
    \   n=n/2;\n    }\n    for(long i=3;i<=sqrt(n);i=i+2){\n        while(n%i==0){\n\
    \            a.push_back(i);\n            n=n/i;\n        }\n    }\n    if(n>2){\n\
    \        a.push_back(n);\n    }\n    return a;", "    std::vector<long> res;\n\
    \    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n         \
    \   res.push_back(i);\n            n /= i;\n        }\n    }\n    return res;",
  "    std::vector<long> prime_factors;\n    for (long i = 2; i*i <= n; i++) {\n \
    \       while (n % i == 0) {\n            prime_factors.push_back(i);\n      \
    \      n /= i;\n        }\n    }\n    if (n > 1) {\n        prime_factors.push_back(n);\n\
    \    }\n    return prime_factors;", "    std::vector<long> result;\n    for (long\
    \ i = 2; i*i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;", "  std::vector<long> answer;\n  long num = n;\n \
    \ for (long divisor = 2; divisor <= num; divisor++) {\n    int freq = 0;\n   \
    \ while (num % divisor == 0) {\n      freq++;\n      num /= divisor;\n    }\n\
    \    if (freq != 0) {\n      while (freq--) {\n        answer.push_back(divisor);\n\
    \      }\n    }\n  }\n  return answer;", "    if (n == 1) return std::vector<long>();\n\
    \    std::vector<long> vec;\n    int div = 2;\n    while (n > 1) {\n        while\
    \ (n % div == 0) {\n            vec.push_back(div);\n            n /= div;\n \
    \       }\n        div++;\n    }\n    return vec;", "    std::vector<long> result;\n\
    \    int i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n         \
    \   result.push_back(i);\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long factor = 2;\n \
    \   while (n > 1) {\n        while (n % factor == 0) {\n            result.push_back(factor);\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    return result;",
  "    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n    \
    \    }\n    }\n    return result;", "    assert(n > 0);\n    std::vector<long>\
    \ r;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n\
    \            r.push_back(i);\n            n /= i;\n        }\n    }\n    if (n\
    \ > 1) {\n        r.push_back(n);\n    }\n    return r;", "    std::vector<long>\
    \ factors;\n    factors.clear();\n    while(n%2==0){\n        factors.push_back(2);\n\
    \        n/=2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n\
    \            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>2)\
    \ factors.push_back(n);\n    return factors;", "    assert(n >= 1);\n    // Implement\
    \ me!\n    vector<long> prime_factors;\n    for (long i = 2; i <= sqrt(n); i++)\
    \ {\n        if (n % i == 0) {\n            int count = 0;\n            while\
    \ (n % i == 0) {\n                count++;\n                n /= i;\n        \
    \    }\n            for (int j = 0; j < count; j++)\n                prime_factors.push_back(i);\n\
    \        }\n    }\n    if (n != 1)\n        prime_factors.push_back(n);\n    return\
    \ prime_factors;", "    std::vector<long> primes;\n    int count = 0;\n    while\
    \ (n % 2 == 0) {\n        count++;\n        n = n / 2;\n    }\n    if (count >\
    \ 0) {\n        primes.push_back(2);\n    }\n    for (int i = 3; i <= sqrt(n);\
    \ i = i + 2) {\n        count = 0;\n        while (n % i == 0) {\n           \
    \ count++;\n            n = n / i;\n        }\n        if (count > 0) {\n    \
    \        primes.push_back(i);\n        }\n    }\n    if (n > 2) {\n        primes.push_back(n);\n\
    \    }\n    return primes;", "\tstd::vector<long> v;\n\twhile (n % 2 == 0) {\n\
    \t\tv.push_back(2);\n\t\tn /= 2;\n\t}\n\tfor (long i = 3; i * i <= n; i += 2)\
    \ {\n\t\twhile (n % i == 0) {\n\t\t\tv.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t\
    }\n\tif (n > 2)\n\t\tv.push_back(n);\n\treturn v;", "    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;",
  "\tstd::vector<long> primes;\n\tfor (int i = 2; i <= n; i++) {\n\t\twhile (n % i\
    \ == 0) {\n\t\t\tprimes.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn primes;",
  "    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n    \
    \        i--;\n        }\n    }\n    return result;", "    std::vector<long> ret;\n\
    \    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n         \
    \   ret.push_back(i);\n            n /= i;\n        }\n    }\n    return ret;",
  "\tstd::vector<long> factors;\n\tint divisor = 2;\n\t//std::cout << n << std::endl;\n\
    \twhile (n > 1) {\n\t\tint power = 0;\n\t\twhile (n % divisor == 0) {\n\t\t\t\
    n /= divisor;\n\t\t\tpower++;\n\t\t}\n\t\tif (power > 0) {\n\t\t\tfor (int i =\
    \ 0; i < power; i++) {\n\t\t\t\tfactors.push_back(divisor);\n\t\t\t}\n\t\t}\n\t\
    \tdivisor++;\n\t}\n\treturn factors;", "  long i = 2;\n  std::vector<long> primeFactors;\n\
    \  while (n > 1) {\n    while (n % i == 0) {\n      primeFactors.push_back(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return primeFactors;", "    std::vector<long>\
    \ factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n\
    \ /= 2;\n    }\n    for (long i = 3; i <= std::sqrt(n); i += 2) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n   \
    \     }\n    }\n    if (n > 2)\n        factors.push_back(n);\n    return factors;",
  "    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n        if(n%i==0)\n\
    \        {\n            v.push_back(i);\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return v;", "    assert(n > 0);\n    std::vector<long>\
    \ prime;\n    for(long i = 2; i <= n; ++i) {\n        while(n % i == 0) {\n  \
    \          prime.push_back(i);\n            n /= i;\n        }\n    }\n    return\
    \ prime;", "    std::vector<long> res;\n    while (n % 2 == 0) {\n        res.push_back(2);\n\
    \        n /= 2;\n    }\n    for (long i = 3; i * i <= n; i += 2) {\n        while\
    \ (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n       \
    \ }\n    }\n    if (n > 2)\n        res.push_back(n);\n    return res;", "   \
    \ std::vector<long> result;\n    long d = 2;\n    while (n > 1) {\n        while\
    \ (n % d == 0) {\n            result.push_back(d);\n            n /= d;\n    \
    \    }\n        d += 1;\n    }\n    return result;", "    std::vector<long> res;\n\
    \    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n         \
    \   res.push_back(i);\n            n /= i;\n        }\n    }\n    return res;",
  "    std::vector<long> result;\n    // Put your code here. You may use standard\
    \ library functions, but you must use only C++ without any Python or Java libraries\n\
    \    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n          \
    \  result.push_back(i);\n            n /= i;\n        }\n    }\n    return result;",
  "    std::vector<long> factors;\n    // Implement factorization\n    for(long i=2;i<=n;){\n\
    \        if(n%i==0){\n            factors.push_back(i);\n            n/=i;\n \
    \       }\n        else{\n            i++;\n        }\n    }\n    return factors;",
  "    std::vector<long> prime;\n    for(long i=2;i<=n;i++)\n    {\n        if(n%i==0)\n\
    \        {\n            prime.push_back(i);\n            n/=i;\n            i--;\n\
    \        }\n    }\n    return prime;", "    if (n == 1) {\n        return {1};\n\
    \    }\n    long tmp = n;\n    std::vector<long> ans;\n    for (long i = 2; i\
    \ * i <= n; i++) {\n        while (tmp % i == 0) {\n            ans.push_back(i);\n\
    \            tmp /= i;\n        }\n    }\n    if (tmp != 1) {\n        ans.push_back(tmp);\n\
    \    }\n    return ans;", "    std::vector<long> res;\n    for (long i = 2; i\
    \ <= n; i++) {\n        if (n % i == 0) {\n            res.push_back(i);\n   \
    \         while (n % i == 0) {\n                n /= i;\n            }\n     \
    \   }\n    }\n    return res;", "    std::vector<long> factors;\n    std::map<long,\
    \ int> factors_map;\n    while (n % 2 == 0) {\n        factors_map[2]++;\n   \
    \     n = n / 2;\n    }\n    for (long i = 3; i <= sqrt(n); i = i + 2) {\n   \
    \     while (n % i == 0) {\n            factors_map[i]++;\n            n = n /\
    \ i;\n        }\n    }\n    if (n > 2) {\n        factors_map[n]++;\n    }\n \
    \   for (auto factor : factors_map) {\n        for (int i = 0; i < factor.second;\
    \ i++) {\n            factors.push_back(factor.first);\n        }\n    }\n   \
    \ return factors;", "\tassert(n > 0);\n\tstd::vector<long> res;\n\tif (n == 1)\
    \ {\n\t\tres.push_back(1);\n\t\treturn res;\n\t}\n\twhile (n % 2 == 0) {\n\t\t\
    res.push_back(2);\n\t\tn /= 2;\n\t}\n\tfor (long i = 3; i * i <= n; i += 2) {\n\
    \t\twhile (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\
    \tif (n > 2) {\n\t\tres.push_back(n);\n\t}\n\treturn res;", "    if (n <= 1) return\
    \ {};\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n     \
    \   while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;", "    // Default for negative numbers and\
    \ 0 is [].\n    if (n < 1) {\n        return {};\n    }\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;", "\tstd::vector<long> factors;\n\twhile (n % 2 == 0) {\n\t\
    \tfactors.push_back(2);\n\t\tn /= 2;\n\t}\n\tfor (long i = 3; i <= n; i += 2)\
    \ {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\t\t\tn /= i;\n\t\t\
    }\n\t}\n\treturn factors;", "    assert(n > 0);\n    std::vector<long> prime;\n\
    \    long x = 2;\n    while(n!=1){\n        if(n%x==0){\n            prime.push_back(x);\n\
    \            n/=x;\n        }\n        else x++;\n    }\n    return prime;", " \
    \   std::vector<long> res;\n    for (long d = 2; d <= n; d++) {\n        while\
    \ (n % d == 0) {\n            res.push_back(d);\n            n /= d;\n       \
    \ }\n    }\n    return res;", "    std::vector<long> factors;\n    for (int i\
    \ = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ prime;\n    std::vector<long> ans;\n    for(long p=2;p*p<=n;p++){\n        while(n%p==0){\n\
    \            n=n/p;\n            prime.push_back(p);\n        }\n    }\n    if(n>1){\n\
    \        prime.push_back(n);\n    }\n    return prime;", "\tstd::vector<long>\
    \ factors;\n\tfor (long i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\t\
    factors.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;", "  std::vector<long>\
    \ factors;\n  factors.clear();\n  long i;\n  // handle even numbers\n  while(!(n&1)){\n\
    \    factors.push_back(2);\n    n>>=1;\n  }\n  // skip all even number, we will\
    \ only iterate over\n  // odd integers\n  for(i=3;i<=sqrt(n);i+=2){\n    // when\
    \ i goes in, n must be odd\n    while(n%i==0){\n      n=n/i;\n      factors.push_back(i);\n\
    \    }\n  }\n  // This condition is to handle the case when n\n  // is a prime\
    \ number greater than 2\n  if(n>2)\n    factors.push_back(n);\n  return factors;",
  "  if (n == 1) {\n    return {};\n  }\n  for (long i = 2; i < n; i++) {\n    if\
    \ (n % i == 0) {\n      auto r = factorize(n / i);\n      r.push_back(i);\n  \
    \    return r;\n    }\n  }\n  return {n};", "    std::vector<long> factors;\n\
    \    long num=2;\n    while(n!=1)\n    {\n        if(n%num==0)\n        {\n  \
    \          factors.push_back(num);\n            n=n/num;\n        }\n        else\n\
    \        {\n            num++;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ result;\n    long divisor = 2;\n    while (n > 1) {\n        while (n % divisor\
    \ == 0) {\n            result.push_back(divisor);\n            n /= divisor;\n\
    \        }\n        divisor += 1;\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n  \
    \          res.push_back(i);\n            n /= i;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> factors;\n    // TODO: Insert your code here\n\
    \    std::cout << \"Entering factorize().\" << std::endl;\n    std::cout << \"\
    The number to be factorized is: \" << n << std::endl;\n    std::cout << \"The\
    \ factor of \" << n << \" is: \";\n    if (n == 1)\n    {\n        factors.push_back(1);\n\
    \        std::cout << 1 << std::endl;\n        return factors;\n    }\n    while\
    \ (n % 2 == 0)\n    {\n        factors.push_back(2);\n        n = n / 2;\n   \
    \ }\n    for (int i = 3; i <= sqrt(n); i = i + 2)\n    {\n        while (n % i\
    \ == 0)\n        {\n            factors.push_back(i);\n            n = n / i;\n\
    \        }\n    }\n    if (n > 2)\n        factors.push_back(n);\n    std::sort(factors.begin(),\
    \ factors.end());\n    for (int i = 0; i < factors.size(); i++)\n    {\n     \
    \   std::cout << factors[i] << \" \";\n    }\n    std::cout << std::endl;\n  \
    \  return factors;", "\tstd::vector<long> ans;\n\tfor (long i = 2; i <= n; i++)\
    \ {\n\t\twhile (n % i == 0) {\n\t\t\tans.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\
    \t}\n\treturn ans;", "    std::vector<long> prime_factors;\n    while (n % 2 ==\
    \ 0) {\n        prime_factors.push_back(2);\n        n = n / 2;\n    }\n    for\
    \ (long i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n    \
    \        prime_factors.push_back(i);\n            n = n / i;\n        }\n    }\n\
    \    if (n > 2)\n        prime_factors.push_back(n);\n    return prime_factors;",
  "  std::vector<long> factors;\n  while (n % 2 == 0) {\n    factors.push_back(2);\n\
    \    n /= 2;\n  }\n  for (long i = 3; i <= n; i += 2) {\n    while (n % i == 0)\
    \ {\n      factors.push_back(i);\n      n /= i;\n    }\n  }\n  return factors;",
  "    if (n == 1) {\n        return {};\n    }\n    std::vector<long> result;\n \
    \   long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n\
    \            result.push_back(factor);\n            n /= factor;\n        }\n\
    \        factor++;\n    }\n    return result;", "    std::vector<long> factors;\n\
    \    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n  \
    \  }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;",
  "    std::vector<long> res;\n    if (n < 2) return res;\n    while (n % 2 == 0)\
    \ {\n        res.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i\
    \ * i <= n; i += 2) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 2) res.push_back(n);\n   \
    \ return res;", "    std::vector<long> res;\n    for (long i = 2; i * i <= n;\
    \ i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n      \
    \      n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    for (long i = 2; i\
    \ * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;", "    assert(n >= 2);\n    std::vector<long> factors;\n\
    \    for (long i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            --i;\n        }\n    }\n    return factors;",
  "\tlong m = n;\n\tlong i = 2;\n\tstd::vector<long> v;\n\twhile (i <= m) {\n\t\t\
    if (m % i == 0) {\n\t\t\tv.push_back(i);\n\t\t\tm = m / i;\n\t\t}\n\t\telse {\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn v;", "\tstd::vector<long> result;\n\tfor (long\
    \ d = 2; d * d <= n; ++d) {\n\t\tint p = 0;\n\t\twhile (n % d == 0) {\n\t\t\t\
    ++p;\n\t\t\tn /= d;\n\t\t}\n\t\tfor (int i = 0; i < p; ++i)\n\t\t\tresult.push_back(d);\n\
    \t}\n\tif (n > 1)\n\t\tresult.push_back(n);\n\treturn result;", "\tstd::vector<long>\
    \ factors;\n\tfor (long i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\t\
    factors.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;", "\t", " \
    \ assert(n > 0);\n  std::vector<long> factors;\n  long m = n;\n  for (long i =\
    \ 2; i <= m; i++) {\n    if (m % i == 0) {\n      factors.push_back(i);\n    \
    \  m /= i;\n      i--;\n    }\n  }\n  return factors;", "  std::vector<long> factors;\n\
    \  for (long d = 2; d * d <= n; d++) {\n    while (n % d == 0) {\n      factors.push_back(d);\n\
    \      n /= d;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n \
    \ return factors;", "    std::vector<long> result;\n    for (long i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            result.push_back(i);\n   \
    \         n /= i;\n            i = 1;\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    // write your code here\n    long n1=n;\n  \
    \  long n2=n;\n    long i=2;\n    while(n1>1){\n        while(n1%i==0){\n    \
    \        n1=n1/i;\n            result.push_back(i);\n        }\n        i++;\n\
    \    }\n    std::sort(result.begin(),result.end());\n    return result;", "  \
    \  std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n       \
    \ }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n    return res;",
  "\tstd::vector<long> v;\n\tfor (long i = 2; i*i <= n; i++) {\n\t\tif (n%i != 0)\n\
    \t\t\tcontinue;\n\t\tv.push_back(i);\n\t\twhile (n%i == 0) {\n\t\t\tn /= i;\n\t\
    \t}\n\t}\n\tif (n > 1)\n\t\tv.push_back(n);\n\treturn v;", "    std::vector<long>\
    \ res = {};\n    long i = 2;\n    while (n>1) {\n        if (n%i==0) {\n     \
    \       res.push_back(i);\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return res;", "    std::vector<long> result;\n \
    \   // insert your code here\n    std::vector<long> prime;\n    prime.push_back(2);\n\
    \    for(long i=3;i<=n;i++){\n        bool isprime = true;\n        for(int j=0;j<prime.size();j++){\n\
    \            if(i%prime[j]==0){\n                isprime = false;\n          \
    \      break;\n            }\n        }\n        if(isprime){\n            prime.push_back(i);\n\
    \        }\n    }\n    while(n>1){\n        for(int i=0;i<prime.size();i++){\n\
    \            if(n%prime[i]==0){\n                result.push_back(prime[i]);\n\
    \                n = n/prime[i];\n                break;\n            }\n    \
    \    }\n    }\n    //\n    return result;", "\tassert(n > 0);\n\tstd::vector<long>\
    \ factors;\n\tfor (long i = 2; i <= n; ++i) {\n\t\twhile (n % i == 0) {\n\t\t\t\
    factors.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;", "  std::vector<long>\
    \ result;\n  if (n == 0) {\n    return result;\n  }\n  while (n % 2 == 0) {\n\
    \    result.push_back(2);\n    n /= 2;\n  }\n  for (long i = 3; i <= sqrt(n);\
    \ i += 2) {\n    while (n % i == 0) {\n      result.push_back(i);\n      n /=\
    \ i;\n    }\n  }\n  if (n > 2) {\n    result.push_back(n);\n  }\n  return result;",
  "    std::vector<long> factors;\n    long factor=2;\n    if(n<2)\n    {\n      \
    \  throw std::runtime_error(\"Input number should be equal to the product of all\
    \ factors.\");\n    }\n    while(n>1)\n    {\n        if(n%factor==0)\n      \
    \  {\n            factors.push_back(factor);\n            n/=factor;\n       \
    \ }\n        else\n        {\n            factor++;\n        }\n    }\n    return\
    \ factors;", "  assert(n > 0);\n  std::vector<long> factors;\n  for (long i =\
    \ 2; i * i <= n; i++) {\n    while (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1)\n    factors.push_back(n);\n  return\
    \ factors;", "\tstd::vector<long> res;\n\t\n\tif (n % 2 == 0)\n\t{\n\t\tres.push_back(2);\n\
    \t\twhile (n % 2 == 0)\n\t\t{\n\t\t\tn /= 2;\n\t\t}\n\t}\n\t\n\tfor (long i =\
    \ 3; i <= n; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\tres.push_back(i);\n\
    \t\t\twhile (n % i == 0)\n\t\t\t{\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return res;", "    // TODO: Fix algorithm\n    std::vector<long> v;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            v.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        v.push_back(n);\n\
    \    return v;", "  std::vector<long> factorization;\n  for (long i = 2; i <=\
    \ n; i++) {\n    while (n % i == 0) {\n      factorization.push_back(i);\n   \
    \   n /= i;\n    }\n  }\n  return factorization;", "\tstd::vector<long> factors;\n\
    \tfor (long i = 2; i <= sqrt(n); i++) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 1)\n\t\tfactors.push_back(n);\n\treturn factors;",
  "    std::vector<long> result;\n    if (n == 1)\n        return result;\n    long\
    \ divisor = 2;\n    while (n > 1) {\n        if (n % divisor == 0) {\n       \
    \     result.push_back(divisor);\n            n /= divisor;\n        } else {\n\
    \            ++divisor;\n        }\n    }\n    return result;", "    assert(n\
    \ > 0);\n    std::vector<long> factors;\n    for (long d = 2; d * d <= n; d++)\
    \ {\n        int power = 0;\n        while (n % d == 0) {\n            power++;\n\
    \            n /= d;\n        }\n        if (power > 0) {\n            factors.push_back(d);\n\
    \        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n  \
    \  return factors;", "    std::vector<long> res;\n    for (long i = 2; i <= n;\
    \ ++i) {\n        while (n % i == 0) {\n            res.push_back(i);\n      \
    \      n /= i;\n        }\n    }\n    return res;", "    std::vector<long> v;\n\
    \    int i=2;\n    while(n>1){\n        if(n%i==0){\n            v.push_back(i);\n\
    \            n/=i;\n        }\n        else\n            i++;\n    }\n    return\
    \ v;", "    // Create vector with n elements\n    std::vector<long> result(n,\
    \ 1);\n    // We will put the result in this vector (it will be a list of prime\
    \ factors)\n    std::vector<long> factors;\n    // We will be decrementing n.\
    \ We will use this variable to\n    // record the original n.\n    long orig_n\
    \ = n;\n    // Keep dividing n by its smallest prime factor till there are no\
    \ more factors left\n    while (n > 1) {\n        // Get the smallest prime factor\
    \ of n\n        int i = 1;\n        while (i < n && i < orig_n) {\n          \
    \  i++;\n            if (n % i == 0) {\n                break;\n            }\n\
    \        }\n        // We know that i is now a prime factor of n\n        // Divide\
    \ n by i as many times as possible\n        while (n % i == 0) {\n           \
    \ // Add i to the list of factors\n            factors.push_back(i);\n       \
    \     // Divide n by i\n            n /= i;\n        }\n    }\n    return factors;",
  "    std::vector<long> res;\n    for (long d = 2; d <= n; d++) {\n        while\
    \ (n % d == 0) {\n            res.push_back(d);\n            n /= d;\n       \
    \ }\n    }\n    return res;", "  std::vector<long> v;\n  std::vector<long> vl;\n\
    \  long sqrt_n = (long)std::sqrt(n);\n  for (int i = 2; i <= sqrt_n; i++) {\n\
    \    if (n % i == 0) {\n      v.push_back(i);\n      if (i != n / i)\n       \
    \ v.push_back(n / i);\n    }\n  }\n  for (int i = 0; i < v.size(); i++) {\n  \
    \  if (n % v[i] == 0) {\n      n = n / v[i];\n      vl.push_back(v[i]);\n    \
    \  i = -1;\n    }\n  }\n  return vl;", "    std::vector<long> ret_v;\n    if (n<=1)\
    \ {\n        ret_v.push_back(n);\n        return ret_v;\n    }\n    else {\n \
    \       for (long i=2; i<=n; i++) {\n            while (n%i==0) {\n          \
    \      ret_v.push_back(i);\n                n = n/i;\n            }\n        }\n\
    \        return ret_v;\n    }", "    std::vector<long> res;\n    for (long i =\
    \ 2; i <= n; ++i) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ fact;\n    long i;\n    // iterate from 2 to n\n    for (i = 2; i <= n; i++)\
    \ {\n        // if i divides n, add i to fact and n/i to n\n        while (n %\
    \ i == 0) {\n            fact.push_back(i);\n            n = n / i;\n        }\n\
    \    }\n    return fact;", "    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n\
    \    {\n        if(n%i==0)\n        {\n            int c=0;\n            while(n%i==0)\n\
    \            {\n                c++;\n                n/=i;\n            }\n \
    \           for(int j=0;j<c;j++)\n            {\n                v.push_back(i);\n\
    \            }\n        }\n    }\n    return v;", "\tstd::vector<long> factors;\n\
    \tlong i = 2;\n\twhile (n > 1) {\n\t\tif (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn factors;",
  "    std::vector<long> output;\n    long p = 2;\n    while (n > 1) {\n        long\
    \ count = 0;\n        while (n % p == 0) {\n            count++;\n           \
    \ n /= p;\n        }\n        for (long i = 0; i < count; i++) {\n           \
    \ output.push_back(p);\n        }\n        p++;\n    }\n    return output;", " \
    \   long i = 2;\n    std::vector<long> res;\n    while (n != 1) {\n        int\
    \ counter = 0;\n        while (n % i == 0) {\n            n /= i;\n          \
    \  counter++;\n        }\n        for (int j = 0; j < counter; j++) {\n      \
    \      res.push_back(i);\n        }\n        i++;\n    }\n    return res;", "\t\
    std::vector<long> factor;\n\tif (n%2 == 0)\n\t{\n\t\tfactor.push_back(2);\n\t\t\
    while (n%2 == 0)\n\t\t{\n\t\t\tn = n / 2;\n\t\t}\n\t}\n\tfor (int i = 3; i <=\
    \ sqrt(n); i = i + 2)\n\t{\n\t\tif (n%i == 0)\n\t\t{\n\t\t\tfactor.push_back(i);\n\
    \t\t\twhile (n%i == 0)\n\t\t\t{\n\t\t\t\tn = n / i;\n\t\t\t}\n\t\t}\n\t}\n\tif\
    \ (n > 2)\n\t{\n\t\tfactor.push_back(n);\n\t}\n\treturn factor;", "    std::vector<long>\
    \ res;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n\
    \            res.push_back(i);\n            n /= i;\n        }\n    }\n    if\
    \ (n > 1)\n        res.push_back(n);\n    return res;", "    std::vector<long>\
    \ ans;\n    for (long i = 2; i * i <= n; i++) {\n        int cnt = 0;\n      \
    \  while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n\
    \        if (cnt > 0) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ if (n > 1) {\n        ans.push_back(n);\n    }\n    return ans;", "    std::vector<long>\
    \ primes;\n    for (long i = 2; i <= n / i; i++) {\n        int multiplicity =\
    \ 0;\n        while (n % i == 0) {\n            multiplicity++;\n            n\
    \ /= i;\n        }\n        if (multiplicity > 0) {\n            primes.push_back(i);\n\
    \        }\n    }\n    if (n > 1) {\n        primes.push_back(n);\n    }\n   \
    \ return primes;", "  if (n <= 3) {\n    std::vector<long> output(1, n);\n   \
    \ return output;\n  }\n  long i = 2;\n  std::vector<long> output;\n  while (n\
    \ > 1) {\n    if (n % i == 0) {\n      output.push_back(i);\n      n /= i;\n \
    \   } else {\n      i++;\n    }\n  }\n  return output;", "    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;",
  "    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n    \twhile(n%i==0)\n\
    \    \t{\n    \t\tv.push_back(i);\n    \t\tn/=i;\n    \t}\n    }\n    return v;",
  "    std::vector<long> factors;\n    long factor = 2;\n    while (n >= factor) {\n\
    \        while (n % factor == 0) {\n            factors.push_back(factor);\n \
    \           n /= factor;\n        }\n        factor++;\n    }\n    return factors;",
  "\tstd::vector<long> factors = {};\n\twhile (n % 2 == 0) {\n\t\tfactors.push_back(2);\n\
    \t\tn /= 2;\n\t}\n\tfor (long i = 3; i * i <= n; i += 2) {\n\t\twhile (n % i ==\
    \ 0) {\n\t\t\tfactors.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 2) {\n\
    \t\tfactors.push_back(n);\n\t}\n\treturn factors;"]
stop_tokens:
- "\n}"
