name: HumanEval_57_monotonic
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
  \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
  // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
  \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
  \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
  \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
  \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
  \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
  \ 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) ==\
  \ (true));\n}\n"
completions: ["  // Your code here\n  int i,n=l.size();\n  int inc=0,dec=0;\n  for(i=0;i<n-1;i++)\n\
    \  {\n    if(l[i]<l[i+1])\n    {\n      inc++;\n    }\n    else if(l[i]>l[i+1])\n\
    \    {\n      dec++;\n    }\n  }\n  if(inc==n-1 || dec==n-1)\n  {\n    return\
    \ true;\n  }\n  else\n  {\n    return false;\n  }", "    int flag = 0;\n    if(l.size()\
    \ == 1) return true;\n    for(int i = 0; i < l.size()-1; i++) {\n        if(l[i]\
    \ < l[i+1]) flag = 1;\n        else if(l[i] > l[i+1]) flag = -1;\n        else\
    \ return false;\n    }\n    if(flag == 1 || flag == -1) return true;\n    return\
    \ false;", "  if (l.size() == 0) {\n    return true;\n  }\n  int i = 0;\n  int\
    \ index = 0;\n  for (; i < l.size() - 1; i++) {\n    if (l[i] != l[i + 1]) {\n\
    \      index = i;\n      break;\n    }\n  }\n  if (i == l.size() - 1) {\n    return\
    \ true;\n  }\n  if (l[index] < l[index + 1]) {\n    for (int j = index; j < l.size()\
    \ - 1; j++) {\n      if (l[j] > l[j + 1]) {\n        return false;\n      }\n\
    \    }\n  } else {\n    for (int j = index; j < l.size() - 1; j++) {\n      if\
    \ (l[j] < l[j + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;",
  "    bool increasing = true;\n    bool decreasing = true;\n    if (l.size() == 1)\
    \ {\n        return true;\n    }\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n\
    \        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;", "    int inc = 0;\n    int dec\
    \ = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i +\
    \ 1]) {\n            inc++;\n        }\n        if (l[i] < l[i + 1]) {\n     \
    \       dec++;\n        }\n    }\n    if (inc == 0 || dec == 0) {\n        return\
    \ true;\n    }\n    return false;", "  bool increasing = true;\n  bool decreasing\
    \ = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ {\n      decreasing = false;\n    }\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n  }\n  return increasing || decreasing;", '    return is_sorted(l.begin(),
    l.end()) || is_sorted(l.rbegin(), l.rend());', "    if (l.size() <= 1) {\n   \
    \     return true;\n    }\n    int x = 0;\n    int sign = 0;\n    for (int i =\
    \ 0; i < l.size() - 1; i++) {\n        x = l[i + 1] - l[i];\n        if (x > 0)\
    \ {\n            if (sign == 0) {\n                sign = 1;\n            } else\
    \ if (sign == -1) {\n                return false;\n            }\n        } else\
    \ if (x < 0) {\n            if (sign == 0) {\n                sign = -1;\n   \
    \         } else if (sign == 1) {\n                return false;\n           \
    \ }\n        }\n    }\n    return true;", "    bool incr=true,decr=true;\n   \
    \ if(l.size()==1)\n        return true;\n    for(int i=0;i<l.size()-1;i++){\n\
    \        if(l[i]>l[i+1])\n            incr=false;\n        if(l[i]<l[i+1])\n \
    \           decr=false;\n    }\n    return (incr|decr);", "    if (l.size() <=\
    \ 1) return true;\n    bool monotonic_increasing = true;\n    bool monotonic_decreasing\
    \ = true;\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++) {\n    \
    \    if (l[i] > l[i + 1]) monotonic_increasing = false;\n        if (l[i] < l[i\
    \ + 1]) monotonic_decreasing = false;\n    }\n    return monotonic_increasing\
    \ || monotonic_decreasing;", "    // Write your code here\n    bool result = true;\n\
    \    int c = l[0];\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for(int i = 1; i < l.size(); i++){\n        if(l[i] < c){\n            increasing\
    \ = false;\n        }\n        if(l[i] > c){\n            decreasing = false;\n\
    \        }\n        c = l[i];\n    }\n    if(increasing || decreasing){\n    \
    \    result = true;\n    }\n    else{\n        result = false;\n    }\n    return\
    \ result;", "    long len = l.size();\n    if (len <= 2) {\n        return true;\n\
    \    }\n    bool increasing = false;\n    if (l[0] <= l[1]) {\n        increasing\
    \ = true;\n    }\n    for (long i = 1; i < len - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;", "    int\
    \ i = 0;\n    while(i<l.size()-1){\n        if(l[i]<l[i+1])\n            break;\n\
    \        i++;\n    }\n    if(i == l.size()-1)\n        return true;\n    i = 0;\n\
    \    while(i<l.size()-1){\n        if(l[i]>l[i+1])\n            break;\n     \
    \   i++;\n    }\n    if(i == l.size()-1)\n        return true;\n    return false;",
  "\tif (l.size() <= 1)\n\t\treturn true;\n\tint i = 0;\n\tint j = l.size() - 1;\n\
    \twhile (i <= j) {\n\t\tif (l[i] > l[i + 1])\n\t\t\treturn false;\n\t\ti++;\n\t\
    }\n\twhile (j >= 0) {\n\t\tif (l[j] < l[j - 1])\n\t\t\treturn false;\n\t\tj--;\n\
    \t}\n\treturn true;", '    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.begin(),
    l.end(), std::greater<long>());', "    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (size_t i = 0; i < l.size() - 1; i++) {\n        if (l[i] <\
    \ l[i + 1]) {\n            decreasing = false;\n        }\n        if (l[i] >\
    \ l[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;", "    if (l.size() <= 1) {\n        return true;\n    }\n  \
    \  bool ascending = false;\n    for (int i = 0; i < l.size() - 1; i++) {\n   \
    \     if (l[i] != l[i + 1]) {\n            ascending = l[i] < l[i + 1];\n    \
    \        break;\n        }\n    }\n    if (ascending) {\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l[i] > l[i + 1]) {\n          \
    \      return false;\n            }\n        }\n    } else {\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l[i] < l[i + 1]) {\n      \
    \          return false;\n            }\n        }\n    }\n    return true;",
  '    return std::is_sorted(l.begin(), l.end());', "  int len=l.size();\n  int i=0;\n\
    \  int i_last=0;\n  int flag=0;\n  for(int i=0;i<len-1;i++){\n    if(l[i]>l[i+1]){\n\
    \      if(flag==0){\n        flag=1;\n        i_last=i;\n      }\n      else if(flag==1){\n\
    \        if(i_last!=i-1){\n          return false;\n        }\n        else if(i_last==i-1){\n\
    \          i_last=i;\n        }\n      }\n      else if(flag==2){\n        return\
    \ false;\n      }\n    }\n    else if(l[i]<l[i+1]){\n      if(flag==0){\n    \
    \    flag=2;\n        i_last=i;\n      }\n      else if(flag==2){\n        if(i_last!=i-1){\n\
    \          return false;\n        }\n        else if(i_last==i-1){\n         \
    \ i_last=i;\n        }\n      }\n      else if(flag==1){\n        return false;\n\
    \      }\n    }\n  }\n  return true;", "    bool increasing = true;\n    bool\
    \ decreasing = true;\n    int i = 0;\n    while (i < l.size() - 1 && (increasing\
    \ || decreasing)) {\n        increasing &= l[i] <= l[i + 1];\n        decreasing\
    \ &= l[i] >= l[i + 1];\n        i++;\n    }\n    return increasing || decreasing;",
  "    bool inc=false,dec=false;\n    for(auto i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1]){\n\
    \            inc=true;\n        }\n        if(l[i]<l[i+1]){\n            dec=true;\n\
    \        }\n    }\n    if(inc==true&&dec==true){\n        return false;\n    }\n\
    \    return true;", "    int f = 1;\n    for(int i = 0; i < l.size() - 1; i++)\
    \ {\n        if(l[i] > l[i + 1])\n            f = -1;\n        else if(l[i] <\
    \ l[i + 1])\n            f = 1;\n    }\n    for(int i = 0; i < l.size() - 1; i++)\
    \ {\n        if(f == 1 && l[i] > l[i + 1])\n            return false;\n      \
    \  else if(f == -1 && l[i] < l[i + 1])\n            return false;\n    }\n   \
    \ return true;", "  bool increasing = true;\n  bool decreasing = true;\n  for\
    \ (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return (increasing || decreasing);", "\tint n = l.size();\n\tif (n\
    \ == 1) {\n\t\treturn true;\n\t}\n\n\tbool inc = false;\n\tbool dec = false;\n\
    \tfor (int i = 0; i < n - 1; i++) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tinc = true;\n\
    \t\t} else if (l[i] > l[i + 1]) {\n\t\t\tdec = true;\n\t\t}\n\t}\n\tif (inc and\
    \ dec) {\n\t\treturn false;\n\t}\n\treturn true;", "    if (l.size() < 2) return\
    \ true;\n    std::vector<long>::iterator it;\n    it = std::adjacent_find(l.begin(),\
    \ l.end(), std::greater<long>());\n    if (it != l.end()) return false;\n    it\
    \ = std::adjacent_find(l.begin(), l.end(), std::less<long>());\n    if (it !=\
    \ l.end()) return false;\n    return true;", "    if (l.size() <= 1) return true;\n\
    \    bool inc = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n \
    \       if ((l[i] < l[i - 1]) != inc) return false;\n    }\n    return true;",
  "    bool c, d;\n    int i = 0;\n    if (l.size() > 1) {\n        while (l[i] ==\
    \ l[i + 1]) {\n            i++;\n        }\n        if (l[i] > l[i + 1]) {\n \
    \           c = true;\n        } else {\n            c = false;\n        }\n \
    \       i = l.size() - 1;\n        while (l[i] == l[i - 1]) {\n            i--;\n\
    \        }\n        if (l[i] > l[i - 1]) {\n            d = true;\n        } else\
    \ {\n            d = false;\n        }\n        return c == d;\n    } else {\n\
    \        return true;\n    }", "  bool decreasing = false;\n  bool increasing\
    \ = false;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ {\n      increasing = true;\n    }\n    if (l[i] > l[i + 1]) {\n      decreasing\
    \ = true;\n    }\n  }\n  return decreasing ^ increasing;", "  bool inc = true;\n\
    \  bool dec = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i]\
    \ > l[i + 1]) {\n      inc = false;\n    }\n    if (l[i] < l[i + 1]) {\n     \
    \ dec = false;\n    }\n  }\n  return inc || dec;", "\t// Write your code here.\n\
    \tbool res = true;\n\tif (l.size() == 0) {\n\t\treturn res;\n\t}\n\tif (l.size()\
    \ == 1) {\n\t\treturn res;\n\t}\n\tbool is_increasing = l[0] < l[1];\n\tint i\
    \ = 0;\n\tfor (i = 0; i < l.size() - 1; i++) {\n\t\tif (is_increasing) {\n\t\t\
    \tif (l[i] > l[i + 1]) {\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\telse {\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res;", "    bool is_increasing = true;\n    bool\
    \ is_decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n      \
    \  if (l[i] > l[i + 1]) {\n            is_increasing = false;\n        }\n   \
    \     if (l[i] < l[i + 1]) {\n            is_decreasing = false;\n        }\n\
    \    }\n    return is_increasing || is_decreasing;", "    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n \
    \       if (l[i] > l[i + 1])\n            increasing = false;\n        if (l[i]\
    \ < l[i + 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;", "    bool increasing=true;\n    bool decreasing=true;\n    if(l.size()==1)\n\
    \        return true;\n    if(l.size()==2){\n        if(l[0]<=l[1])\n        \
    \    return true;\n        else\n            return false;\n    }\n    for(int\
    \ i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1])\n            increasing=false;\n\
    \        if(l[i]<l[i+1])\n            decreasing=false;\n    }\n    if(increasing\
    \ || decreasing)\n        return true;\n    else\n        return false;", "  \
    \  if (l.size() <= 2) {\n        return true;\n    }\n    int dir = 0;\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] == l[i-1]) {\n          \
    \  continue;\n        }\n        int cur = l[i] > l[i-1] ? 1 : -1;\n        if\
    \ (dir != 0 && dir != cur) {\n            return false;\n        }\n        dir\
    \ = cur;\n    }\n    return true;", "  bool inc = true;\n  bool dec = true;\n\
    \  int n = l.size();\n  int i = 0;\n  while (i < n - 1 && inc && dec) {\n    if\
    \ (l[i] > l[i + 1]) {\n      inc = false;\n    }\n    if (l[i] < l[i + 1]) {\n\
    \      dec = false;\n    }\n    i++;\n  }\n  return inc || dec;", "  if (l.size()\
    \ <= 1) return true;\n  bool inc = l[0] < l[1];\n  for (size_t i = 1; i < l.size()\
    \ - 1; i++) {\n    if (inc && l[i] > l[i + 1]) return false;\n    if (!inc &&\
    \ l[i] < l[i + 1]) return false;\n  }\n  return true;", "    // Write your code\
    \ here.\n    int n = l.size();\n    int i=0;\n    int j=1;\n    for(;i<n-1;i++){\n\
    \        if(l[i] == l[j]){\n            j++;\n            continue;\n        }\n\
    \        if(l[i] < l[j]){\n            break;\n        }\n        if(l[i] > l[j]){\n\
    \            break;\n        }\n    }\n    for(;i<n-1;i++){\n        if(l[i] ==\
    \ l[j]){\n            j++;\n            continue;\n        }\n        if(l[i]\
    \ < l[j]){\n            return false;\n        }\n        if(l[i] > l[j]){\n \
    \           return false;\n        }\n    }\n    return true;", "\tif (l.size()\
    \ == 0 || l.size() == 1) {\n\t\treturn true;\n\t}\n\tint i = 0;\n\tbool inc =\
    \ false;\n\tbool dec = false;\n\twhile (i < l.size() - 1) {\n\t\tif (l[i] < l[i\
    \ + 1]) {\n\t\t\tinc = true;\n\t\t\tbreak;\n\t\t}\n\t\tif (l[i] > l[i + 1]) {\n\
    \t\t\tdec = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i == l.size() - 1)\
    \ {\n\t\treturn true;\n\t}\n\ti++;\n\twhile (i < l.size() - 1) {\n\t\tif (inc)\
    \ {\n\t\t\tif (l[i] > l[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    if (dec) {\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn true;", "    // [1, 1, 1, 1]\n    int check = 0;\n\
    \    if (l[0] <= l[1]) {\n        check = 1;\n    } else {\n        check = -1;\n\
    \    }\n    for (int i = 1; i < l.size(); i++) {\n        if (check == 1 && l[i]\
    \ < l[i - 1]) {\n            return false;\n        } else if (check == -1 &&\
    \ l[i] > l[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i <\
    \ l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;", "    if (l.size() <= 1) return true;\n  \
    \  bool inc = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n   \
    \     if (inc) {\n            if (l[i] > l[i + 1]) return false;\n        } else\
    \ {\n            if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return\
    \ true;", "\tbool s=true;\n\tfor(long i=0;i<l.size()-1;i++){\n\t\tif(l[i]>l[i+1]){\n\
    \t\t\ts=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(s==true){\n\t\treturn true;\n\t\
    }\n\tfor(long i=0;i<l.size()-1;i++){\n\t\tif(l[i]<l[i+1]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "\tbool result = true;\n\tbool is_inc = true;\n\t\
    bool is_dec = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i]\
    \ > l[i + 1]) {\n\t\t\tis_inc = false;\n\t\t}\n\t\tif (l[i] < l[i + 1]) {\n\t\t\
    \tis_dec = false;\n\t\t}\n\t}\n\tif (!is_inc && !is_dec) {\n\t\tresult = false;\n\
    \t}\n\treturn result;", "  // Use a boolean flag to track if the list is increasing\
    \ or decreasing.\n  // Update the flag when you encounter the first two elements.\n\
    \  // Walk through the list, comparing the current element to the previous one.\n\
    \  // If the current element is less/greater than the previous element,\n  //\
    \ check that this isn't a contradiction to the list being\n  // monotonically\
    \ increasing/decreasing.\n  // If you reach the end of the list without contradictions,\
    \ return True.\n  // Else, return False.\n  bool flag = true;\n  bool asc = true;\n\
    \  bool dec = true;\n  if (l.size() == 1) {\n    return true;\n  }\n  if (l[0]\
    \ < l[1]) {\n    asc = true;\n    dec = false;\n  } else if (l[0] > l[1]) {\n\
    \    asc = false;\n    dec = true;\n  }\n  for (int i = 1; i < l.size(); i++)\
    \ {\n    if (asc) {\n      if (l[i - 1] > l[i]) {\n        return false;\n   \
    \   }\n    } else if (dec) {\n      if (l[i - 1] < l[i]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;", "    // Your code here\n    int size =\
    \ l.size();\n    if(size == 0 || size == 1)\n    {\n        return true;\n   \
    \ }\n    int i = 0;\n    while(i < size-1)\n    {\n        if(l[i] > l[i+1])\n\
    \        {\n            break;\n        }\n        i++;\n    }\n    if(i == size-1)\n\
    \    {\n        return true;\n    }\n    i = 0;\n    while(i < size-1)\n    {\n\
    \        if(l[i] < l[i+1])\n        {\n            break;\n        }\n       \
    \ i++;\n    }\n    if(i == size-1)\n    {\n        return true;\n    }\n    return\
    \ false;", "  bool inc = true;\n  bool dec = true;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] > l[i + 1])\n      inc = false;\n    if (l[i] < l[i\
    \ + 1])\n      dec = false;\n  }\n  return inc | dec;", "    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    bool monotonic_increasing = true;\n    bool\
    \ monotonic_decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            monotonic_increasing = false;\n \
    \       }\n        if (l[i] < l[i + 1]) {\n            monotonic_decreasing =\
    \ false;\n        }\n    }\n    return monotonic_increasing || monotonic_decreasing;",
  "    bool inc=1,dec=1;\n    for(int i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1]){\n\
    \            inc=0;\n        }\n        if(l[i]<l[i+1]){\n            dec=0;\n\
    \        }\n    }\n    return (inc | dec);", "\tbool increasing = true;\n\tbool\
    \ decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i]\
    \ < l[i + 1]) {\n\t\t\tdecreasing = false;\n\t\t}\n\t\tif (l[i] > l[i + 1]) {\n\
    \t\t\tincreasing = false;\n\t\t}\n\t}\n\treturn (increasing || decreasing);",
  "\t// Write your code here.\n\tbool isIncreasing = false;\n\tbool isDecreasing =\
    \ false;\n\tint len = l.size();\n\tfor (int i = 0; i < len - 1; i++) {\n\t\tif\
    \ (l[i] < l[i + 1]) {\n\t\t\tisIncreasing = true;\n\t\t}\n\t\tif (l[i] > l[i +\
    \ 1]) {\n\t\t\tisDecreasing = true;\n\t\t}\n\t}\n\tif (isIncreasing == true &&\
    \ isDecreasing == false) {\n\t\treturn true;\n\t}\n\tif (isIncreasing == false\
    \ && isDecreasing == true) {\n\t\treturn true;\n\t}\n\treturn false;", "  \n \
    \ bool increasing = true;\n  bool decreasing = true;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n\
    \    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing\
    \ || decreasing;", "    long n = l.size();\n    if (n <= 2) {\n        return\
    \ true;\n    }\n    bool incr = true;\n    bool decr = true;\n    for (long i\
    \ = 1; i < n; i++) {\n        if (l[i] < l[i-1]) {\n            incr = false;\n\
    \        }\n        if (l[i] > l[i-1]) {\n            decr = false;\n        }\n\
    \    }\n    return incr || decr;", "\tint n = l.size();\n\tif (n == 1)\n\t\treturn\
    \ true;\n\tif (l[0] < l[1]) {\n\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\tif\
    \ (l[i] > l[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tfor (int\
    \ i = 1; i < n - 1; i++) {\n\t\t\tif (l[i] < l[i + 1])\n\t\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "    bool increasing = true;\n    bool decreasing\
    \ = true;\n    int len = l.size();\n    for (int i = 0; i < len - 1; i++) {\n\
    \        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n\
    \        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;", "   if(l.size()<=1)return true;\n\
    \   bool isIncreasing=true;\n   for(int i=1;i<l.size();i++){\n       if(l[i]<l[i-1]){\n\
    \           isIncreasing=false;\n           break;\n       }\n   }\n   if(isIncreasing)return\
    \ true;\n   bool isDecreasing=true;\n   for(int i=1;i<l.size();i++){\n       if(l[i]>l[i-1]){\n\
    \           isDecreasing=false;\n           break;\n       }\n   }\n   return\
    \ isDecreasing;", "    bool isIncreasing = true;\n    bool isDecreasing = true;\n\
    \    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n\
    \            isDecreasing = false;\n        }\n        if (l[i] > l[i + 1]) {\n\
    \            isIncreasing = false;\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing;", "    // State machine,\n    // 0 - start\n    // 1 - increasing\n\
    \    // 2 - decreasing\n    int sm = 0;\n    for (int i = 0; i < l.size() - 1;\
    \ i++) {\n        int diff = l[i] - l[i + 1];\n        if (diff == 0) continue;\n\
    \        if (sm == 0) {\n            sm = diff > 0 ? 2 : 1;\n        } else if\
    \ (sm == 1) {\n            if (diff > 0) {\n                return false;\n  \
    \          }\n        } else if (sm == 2) {\n            if (diff < 0) {\n   \
    \             return false;\n            }\n        }\n    }\n    return true;",
  "  if (l.size() < 3) return true;\n  std::vector<long> s;\n  for (int i = 0; i <\
    \ l.size() - 1; i++) {\n    s.push_back(l[i + 1] - l[i]);\n  }\n  int c = 0;\n\
    \  for (int i = 0; i < s.size() - 1; i++) {\n    if (s[i] * s[i + 1] <= 0) {\n\
    \      c += 1;\n    }\n  }\n  if (c > 0) {\n    return false;\n  }\n  return true;",
  "    // Your code here\n    bool ascending=true;\n    bool descending=true;\n  \
    \  if(l.size()==1)\n        return true;\n    for(int i=0;i<l.size()-1;i++)\n\
    \    {\n        if(l[i]>l[i+1])\n            ascending=false;\n        if(l[i]<l[i+1])\n\
    \            descending=false;\n    }\n    if(ascending||descending)\n       \
    \ return true;\n    else\n        return false;", "    bool inc = true;\n    bool\
    \ dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i]\
    \ > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] < l[i +\
    \ 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;",
  "    if (l.size() == 0) {\n        return true;\n    }\n    // bool result = true;\n\
    \    int diff = l[1] - l[0];\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   if (diff < 0) {\n            if (l[i] - l[i - 1] > 0) {\n                return\
    \ false;\n            }\n        } else if (diff > 0) {\n            if (l[i]\
    \ - l[i - 1] < 0) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;", "    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;", "  // your code here\n  // l is a list of integers\n  // implement\
    \ this function\n  int n = l.size();\n  int count1 = 0;\n  int count2 = 0;\n \
    \ for(int i = 0; i < n-1; i++){\n    if(l[i]<=l[i+1]){\n      count1++;\n    }\n\
    \    if(l[i]>=l[i+1]){\n      count2++;\n    }\n  }\n  if(count1 == n-1){\n  \
    \  return true;\n  }\n  if(count2 == n-1){\n    return true;\n  }\n  return false;",
  "    // Your code goes here:\n    long last = l[0];\n    bool inc = true;\n    bool\
    \ dec = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last)\
    \ {\n            inc = false;\n        }\n        if (l[i] > last) {\n       \
    \     dec = false;\n        }\n        last = l[i];\n    }\n    return inc ||\
    \ dec;", "    if (l.size() < 2) {\n        return true;\n    }\n    int i = 0;\n\
    \    bool increasing = false;\n    bool decreasing = false;\n    while (i < l.size()\
    \ - 1) {\n        if (l[i] < l[i + 1]) {\n            if (increasing == false)\
    \ {\n                increasing = true;\n            }\n            if (decreasing\
    \ == true) {\n                return false;\n            }\n        } else if\
    \ (l[i] > l[i + 1]) {\n            if (decreasing == false) {\n              \
    \  decreasing = true;\n            }\n            if (increasing == true) {\n\
    \                return false;\n            }\n        }\n        i++;\n    }\n\
    \    return true;", "    // Your code here\n    std::vector<long> l1(l.begin(),\
    \ l.end());\n    std::sort(l1.begin(), l1.end());\n    if(l == l1){\n        return\
    \ true;\n    }\n    std::reverse(l1.begin(), l1.end());\n    if(l == l1){\n  \
    \      return true;\n    }\n    return false;", "    // Your code here\n    bool\
    \ inc = false;\n    bool dec = false;\n    if(l.size() <= 1)\n        return true;\n\
    \    if(l[0] < l[1]){\n        inc = true;\n    }\n    else if(l[0] > l[1]){\n\
    \        dec = true;\n    }\n    for(int i = 1; i < l.size()-1; i++){\n      \
    \  if(inc && l[i] > l[i+1]){\n            return false;\n        }\n        else\
    \ if(dec && l[i] < l[i+1]){\n            return false;\n        }\n    }\n   \
    \ return true;", "    if (l.size() <= 2) {\n        return true;\n    }\n    int\
    \ i = 0;\n    bool increasing = false;\n    bool decreasing = false;\n    for\
    \ (i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n         \
    \   increasing = true;\n            break;\n        }\n        if (l[i] > l[i\
    \ + 1]) {\n            decreasing = true;\n            break;\n        }\n   \
    \ }\n    if (increasing) {\n        while (i < l.size() - 1) {\n            if\
    \ (l[i] > l[i + 1]) {\n                return false;\n            }\n        \
    \    i++;\n        }\n    }\n    if (decreasing) {\n        while (i < l.size()\
    \ - 1) {\n            if (l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n            i++;\n        }\n    }\n    return true;", "    //\
    \ +++ your code here +++\n    int up,down;\n    up=down=0;\n    if(l.size()==1)\n\
    \        return true;\n    if(l[0]<l[1])\n        up=1;\n    else if(l[0]>l[1])\n\
    \        down=1;\n    if(up==down)\n        return false;\n    for(int i=1;i<l.size()-1;i++)\n\
    \    {\n        if(up==1)\n        {\n            if(l[i]>l[i+1])\n          \
    \      return false;\n        }\n        else if(down==1)\n        {\n       \
    \     if(l[i]<l[i+1])\n                return false;\n        }\n    }\n    return\
    \ true;", "    bool inc = false;\n    bool dec = false;\n    long prev = -1;\n\
    \    for (long i=0; i<l.size(); i++) {\n        if (prev >= 0) {\n           \
    \ if (l[i] > prev) {\n                inc = true;\n            } else if (l[i]\
    \ < prev) {\n                dec = true;\n            }\n        }\n        prev\
    \ = l[i];\n    }\n    return inc ^ dec;", "    long size = l.size();\n    if (size\
    \ == 1) {\n        return true;\n    }\n    bool is_monotonic = true;\n    bool\
    \ is_increasing = l[0] < l[1];\n    for (long i = 1; i < size - 1; i++) {\n  \
    \      bool curr_increasing = l[i] < l[i + 1];\n        if (curr_increasing !=\
    \ is_increasing) {\n            is_monotonic = false;\n            break;\n  \
    \      }\n    }\n    return is_monotonic;", "    bool ascending = true;\n    bool\
    \ descending = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            ascending = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) {\n            descending = false;\n        }\n    }\n    return\
    \ ascending || descending;", "  int count = 0;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      count++;\n    } else if (l[i]\
    \ > l[i + 1]) {\n      count--;\n    }\n  }\n  return count == 0 || count == -l.size()\
    \ + 1 || count == l.size() - 1;", '    return true;', "    bool increasing = true;\n\
    \    bool decreasing = true;\n    int i = 0;\n    while (i < l.size() - 1) {\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n        if (l[i]\
    \ < l[i + 1])\n            decreasing = false;\n        i++;\n    }\n    return\
    \ (increasing || decreasing);", "    if (l.size() <= 2) {\n        return true;\n\
    \    }\n    int k = (l[1] > l[0]) ? 1 : -1;\n    for (int i = 1; i < l.size()\
    \ - 1; i++) {\n        if (k == 1 && l[i] > l[i + 1]) {\n            return false;\n\
    \        }\n        if (k == -1 && l[i] < l[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "\tlong len = l.size();\n\tif (len == 1)\n\
    \t\treturn true;\n\telse if (len == 2)\n\t\treturn l[0] == l[1];\n\tbool increasing\
    \ = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < len - 1; i++) {\n\t\
    \tif (l[i] < l[i + 1])\n\t\t\tdecreasing = false;\n\t\tif (l[i] > l[i + 1])\n\t\
    \t\tincreasing = false;\n\t}\n\treturn increasing || decreasing;", "\tif (l.size()\
    \ <= 1)\n\t\treturn true;\n\tint direction = 0;\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tint cmp = l[i - 1] - l[i];\n\t\tif (cmp == 0)\n\t\t\tcontinue;\n\
    \t\tif (direction == 0)\n\t\t\tdirection = cmp;\n\t\telse if (direction != cmp)\n\
    \t\t\treturn false;\n\t}\n\treturn true;", "\t// Write your code here\n\tbool\
    \ increase = false;\n\tbool decrease = false;\n\tfor (int i = 0; i < l.size()\
    \ - 1; i++) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tincrease = true;\n\t\t}\n\t\t\
    if (l[i] > l[i + 1]) {\n\t\t\tdecrease = true;\n\t\t}\n\t}\n\tif (increase ==\
    \ false) {\n\t\treturn true;\n\t}\n\tif (decrease == false) {\n\t\treturn true;\n\
    \t}\n\treturn false;", "    bool is_increasing = true;\n    bool is_decreasing\
    \ = true;\n    int i;\n    int n = l.size();\n    if (n == 1) {\n        return\
    \ true;\n    }\n    for (i = 0; i < n - 1; i++) {\n        if (l[i] > l[i + 1])\
    \ {\n            is_increasing = false;\n        }\n        if (l[i] < l[i + 1])\
    \ {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing\
    \ || is_decreasing;", "    bool inc = false;\n    if(l.size() <= 1) return true;\n\
    \    for(int i = 0; i < l.size() - 1; i++) {\n        if(l[i] != l[i+1]) {\n \
    \           if(l[i] < l[i+1]) inc = true;\n            break;\n        }\n   \
    \ }\n    if(inc) {\n        for(int i = 0; i < l.size() - 1; i++) {\n        \
    \    if(l[i] > l[i+1]) return false;\n        }\n    } else {\n        for(int\
    \ i = 0; i < l.size() - 1; i++) {\n            if(l[i] < l[i+1]) return false;\n\
    \        }\n    }\n    return true;", "  // Write your code here\n  int v,leng;\n\
    \  v=0;\n  leng=l.size();\n  if(leng==1)\n  {\n    return true;\n  }\n  for(int\
    \ i=0;i<leng-1;i++)\n  {\n    if(l[i]<l[i+1])\n    {\n      v++;\n    }\n    else\
    \ if(l[i]>l[i+1])\n    {\n      v--;\n    }\n    else\n    {\n      v=v;\n   \
    \ }\n  }\n  if(v==(leng-1)||v==-(leng-1))\n  {\n    return true;\n  }\n  else\n\
    \  {\n    return false;\n  }\n", "  assert(l.size() > 0);\n  std::vector<long>::iterator\
    \ it;\n  it = std::adjacent_find(l.begin(), l.end(),\n                       \
    \   [](long a, long b) { return a != b; });\n  if (it == l.end())\n    return\
    \ true;\n  return (b - a) * (l.back() - l.front()) > 0;", "    bool increasing\
    \ = true;\n    bool decreasing = true;\n    if (l.size() <= 1) {\n        return\
    \ true;\n    }\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i]\
    \ > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;", "    // TODO: Write - Your - Code\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1;\
    \ i++) {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n    \
    \    if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;", "  if (l.size() <= 1) {\n    return true;\n  }\n\
    \  bool order = true;\n  for (size_t i = 0; i < l.size() - 1; i++) {\n    if (l[i]\
    \ > l[i + 1]) {\n      order = false;\n      break;\n    }\n  }\n  if (order)\
    \ {\n    return true;\n  }\n  order = true;\n  for (size_t i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      order = false;\n      break;\n\
    \    }\n  }\n  return order;", "  // Write your code here\n  // Can also be done\
    \ using binary search\n  bool flag = false;\n  int len = l.size();\n  if(len <\
    \ 2)\n    return true;\n  int n = len - 1;\n  while(n>0){\n    if(l[n] < l[n-1]){\n\
    \      flag = true;\n      break;\n    }\n    n--;\n  }\n  if(flag){\n    n =\
    \ len - 1;\n    while(n>0){\n      if(l[n] > l[n-1]){\n        return false;\n\
    \      }\n      n--;\n    }\n  }\n  return true;", "  // Type your code here\n\
    \    int n = l.size();\n    std::vector<long> v;\n    for(int i=0;i<n-1;i++){\n\
    \        if(l[i]<l[i+1])\n            v.push_back(1);\n        else if(l[i]>l[i+1])\n\
    \            v.push_back(-1);\n        else\n            v.push_back(0);\n   \
    \ }\n    int flag = 0;\n    for(int i=0;i<v.size()-1;i++){\n        if(v[i]>v[i+1]){\n\
    \            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1)\n\
    \        return false;\n    else\n        return true;", "    int flag = 0;\n\
    \    for(int i = 0; i < l.size()-1; i++) {\n        if(l[i] < l[i+1]) {\n    \
    \        flag = 1;\n            break;\n        }\n        else if(l[i] > l[i+1])\
    \ {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag\
    \ == 0)\n        return true;\n    else if(flag == 1) {\n        for(int i = 0;\
    \ i < l.size()-1; i++) {\n            if(l[i] > l[i+1])\n                return\
    \ false;\n        }\n        return true;\n    }\n    else {\n        for(int\
    \ i = 0; i < l.size()-1; i++) {\n            if(l[i] < l[i+1])\n             \
    \   return false;\n        }\n        return true;\n    }", "    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (long i = 0; i < l.size() - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;", "    bool inc = true;\n\
    \    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            dec = false;\n        }\n    }\n    return (inc ||\
    \ dec);", "  int counter = 0;\n  int counter1 = 0;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      counter++;\n    }\n    if (l[i]\
    \ > l[i + 1]) {\n      counter1++;\n    }\n  }\n  if (counter == l.size() - 1)\
    \ {\n    return true;\n  }\n  if (counter1 == l.size() - 1) {\n    return true;\n\
    \  }\n  return false;", "    int count_increase = 0;\n    int count_decrease =\
    \ 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] <= l[i +\
    \ 1])\n            count_increase++;\n        if (l[i] >= l[i + 1])\n        \
    \    count_decrease++;\n    }\n    if (count_increase == l.size() - 1 || count_decrease\
    \ == l.size() - 1)\n        return true;\n    else\n        return false;", " \
    \   bool inorder = true;\n    bool dorder = true;\n    for (int i = 0; i < l.size()\
    \ - 1; i++) {\n        if (l[i + 1] < l[i]) {\n            inorder = false;\n\
    \        }\n        if (l[i + 1] > l[i]) {\n            dorder = false;\n    \
    \    }\n    }\n    return inorder || dorder;", "\tbool isInc = false;\n\tbool\
    \ isDec = false;\n\tint sz = l.size();\n\tfor (int i = 0; i < sz - 1; i++) {\n\
    \t\tif (l[i] > l[i + 1]) {\n\t\t\tisDec = true;\n\t\t}\n\t\tif (l[i] < l[i + 1])\
    \ {\n\t\t\tisInc = true;\n\t\t}\n\t}\n\treturn !(isInc && isDec);", "    int sign\
    \ = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i +\
    \ 1]) {\n            if (sign != -1) {\n                sign = 1;\n          \
    \  } else {\n                return false;\n            }\n        } else if (l[i]\
    \ > l[i + 1]) {\n            if (sign != 1) {\n                sign = -1;\n  \
    \          } else {\n                return false;\n            }\n        }\n\
    \    }\n    return true;", "    int dir = 0;\n    for (int i = 0; i < l.size()\
    \ - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            if (dir == 0) {\n \
    \               dir = 1;\n            } else if (dir == -1) {\n              \
    \  return false;\n            }\n        } else if (l[i] > l[i + 1]) {\n     \
    \       if (dir == 0) {\n                dir = -1;\n            } else if (dir\
    \ == 1) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;", "    bool incr = true;\n    bool decr = true;\n    for (int\
    \ i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  incr = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decr\
    \ = false;\n        }\n    }\n    return incr || decr;", "    if (l.size() <=\
    \ 1) {\n        return true;\n    }\n    std::vector<long> diffs;\n    for (size_t\
    \ i = 0; i < l.size() - 1; i++) {\n        diffs.push_back(l[i + 1] - l[i]);\n\
    \    }\n    bool decreasing = true;\n    bool increasing = true;\n    for (size_t\
    \ i = 0; i < diffs.size(); i++) {\n        if (diffs[i] > 0) {\n            decreasing\
    \ = false;\n        }\n        if (diffs[i] < 0) {\n            increasing = false;\n\
    \        }\n    }\n    return decreasing || increasing;", "    bool ascending\
    \ = true;\n    bool descending = true;\n    int i = 0;\n    while (i < l.size()\
    \ - 1) {\n        if (l[i] < l[i + 1]) {\n            descending = false;\n  \
    \      }\n        if (l[i] > l[i + 1]) {\n            ascending = false;\n   \
    \     }\n        i++;\n    }\n    return ascending || descending;", "    bool\
    \ inc = true;\n    bool dec = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n   \
    \     if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n    }\n   \
    \ return (inc || dec);", "  int direction = 0;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] == l[i + 1]) {\n      continue;\n    } else if (l[i]\
    \ < l[i + 1]) {\n      if (direction == 0) {\n        direction = 1;\n      }\
    \ else if (direction == -1) {\n        return false;\n      }\n    } else {\n\
    \      if (direction == 0) {\n        direction = -1;\n      } else if (direction\
    \ == 1) {\n        return false;\n      }\n    }\n  }\n  return true;", "  //\
    \ Fill in your code here\n  // Check if list is increasing\n  bool isIncreasing\
    \ = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1])\
    \ {\n      isIncreasing = false;\n      break;\n    }\n  }\n  if (isIncreasing)\
    \ return true;\n  // Check if list is decreasing\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n  }\n \
    \ return true;", "\tif (l.size() < 2)\n\t\treturn true;\n\tbool increasing = true;\n\
    \tbool decreasing = true;\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i\
    \ - 1] < l[i])\n\t\t\tdecreasing = false;\n\t\tif (l[i - 1] > l[i])\n\t\t\tincreasing\
    \ = false;\n\t}\n\treturn increasing || decreasing;", "  if (l.size() < 3) {\n\
    \    return true;\n  }\n\n  int comparator;\n  long curr, prev;\n  prev = l[0];\n\
    \  for (int i = 1; i < l.size(); i++) {\n    curr = l[i];\n    if (i == 1) {\n\
    \      if (curr > prev) {\n        comparator = 1;\n      } else if (curr < prev)\
    \ {\n        comparator = -1;\n      } else {\n        comparator = 0;\n     \
    \ }\n    } else {\n      if (comparator == 1) {\n        if (curr < prev) {\n\
    \          return false;\n        }\n      } else if (comparator == -1) {\n  \
    \      if (curr > prev) {\n          return false;\n        }\n      } else {\n\
    \        return false;\n      }\n    }\n    prev = curr;\n  }\n  return true;",
  "  std::vector<long> li = l;\n  std::vector<long> ld = l;\n  std::sort(li.begin(),\
    \ li.end());\n  std::sort(ld.begin(), ld.end(), std::greater<long>());\n  return\
    \ (li == l) || (ld == l);", "    bool inc = true;\n    bool dec = true;\n    for\
    \ (size_t i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n  \
    \          inc = false;\n        }\n        if (l[i] < l[i + 1]) {\n         \
    \   dec = false;\n        }\n    }\n    return (inc || dec);", "    bool sorted\
    \ = true;\n    bool unsorted = true;\n    int len = l.size();\n    for (int i\
    \ = 0; i < len - 1; i++) {\n        sorted = sorted & (l[i] <= l[i + 1]);\n  \
    \      unsorted = unsorted & (l[i] >= l[i + 1]);\n    }\n    return sorted | unsorted;",
  "    int flag = 0;\n    for(int i = 0; i < l.size()-1; i++) {\n        if(l[i] >\
    \ l[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n   \
    \ if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < l.size()-1; i++)\
    \ {\n            if(l[i] < l[i+1]) {\n                flag = 1;\n            \
    \    break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return\
    \ false;\n    }\n    return true;", "  int direction = 0;\n  int current = 0;\n\
    \  int previous = 0;\n  for (auto i : l) {\n    current = i;\n    if (direction\
    \ == 0) {\n      if (current > previous) {\n        direction = 1;\n      } else\
    \ if (current < previous) {\n        direction = -1;\n      }\n    } else if (direction\
    \ == 1) {\n      if (current < previous) {\n        return false;\n      }\n \
    \   } else if (direction == -1) {\n      if (current > previous) {\n        return\
    \ false;\n      }\n    }\n    previous = current;\n  }\n  return true;", "\tbool\
    \ result = true;\n\tstd::vector<long>::iterator it;\n\tfor (it = l.begin(); it\
    \ != l.end() - 1; it++) {\n\t\tif (*it != *(it + 1)) {\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif (it == l.end() - 1) {\n\t\treturn result;\n\t}\n\tbool isIncreasing =\
    \ (*it < *(it + 1));\n\tif (isIncreasing) {\n\t\tfor (it = it + 1; it != l.end()\
    \ - 1; it++) {\n\t\t\tif (*it > *(it + 1)) {\n\t\t\t\tresult = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (it = it + 1; it != l.end() - 1; it++)\
    \ {\n\t\t\tif (*it < *(it + 1)) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;", "\tbool isIncreasing = false;\n\tbool isDecreasing\
    \ = false;\n\tint n = l.size();\n\t\n\tfor(int i = 0; i < n - 1; i++) {\n\t\t\
    if(l[i] < l[i + 1])\n\t\t\tisIncreasing = true;\n\t\tif(l[i] > l[i + 1])\n\t\t\
    \tisDecreasing = true;\n\t}\n\treturn (isIncreasing ^ isDecreasing) ? false :\
    \ true;", "  if (l.size() == 0 || l.size() == 1) return true;\n  bool increasing\
    \ = l[0] < l[1];\n  for (int i = 1; i < l.size() - 1; i++) {\n    if (increasing\
    \ && l[i] > l[i + 1]) return false;\n    if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n  }\n  return true;", "  bool is_increasing = false;\n  bool is_decreasing\
    \ = false;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] <= l[i +\
    \ 1]) {\n      is_increasing = true;\n    }\n    if (l[i] >= l[i + 1]) {\n   \
    \   is_decreasing = true;\n    }\n  }\n  return is_increasing || is_decreasing;",
  "  bool decreasing = false;\n  bool increasing = false;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      decreasing = true;\n    }\n \
    \   if (l[i] < l[i + 1]) {\n      increasing = true;\n    }\n  }\n  return (decreasing\
    \ || increasing) ? false : true;", "    bool increasing=false, decreasing=false;\n\
    \    for(int i=0; i<l.size()-1; i++) {\n        if(l[i]<l[i+1]) {\n          \
    \  increasing=true;\n        }\n        if(l[i]>l[i+1]) {\n            decreasing=true;\n\
    \        }\n    }\n    return increasing || decreasing;", "  // Your code here\n\
    \  bool increasing;\n  if(l[0] < l[1]) increasing = true;\n  else increasing =\
    \ false;\n  for(int i = 1; i < l.size()-1; i++){\n      if(increasing == true){\n\
    \          if(l[i] > l[i+1]) return false;\n      }\n      else{\n          if(l[i]\
    \ < l[i+1]) return false;\n      }\n  }\n  return true;", "\tint i = 0;\n\tint\
    \ j = 0;\n\tint k = 0;\n\tfor (i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i] <\
    \ l[i + 1]) {\n\t\t\tj++;\n\t\t}\n\t\telse if (l[i] > l[i + 1]) {\n\t\t\tk++;\n\
    \t\t}\n\t}\n\tif (j == l.size() - 1 || k == l.size() - 1) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "    int lsize = l.size();\n    bool inc,\
    \ dec, flag;\n    inc = dec = flag = false;\n    for(int i = 0; i < lsize-1; i++)\
    \ {\n        if(l[i] > l[i+1]) {\n            dec = true;\n        }\n       \
    \ if(l[i] < l[i+1]) {\n            inc = true;\n        }\n        if(dec && inc)\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    return\
    \ !flag;", "\tif (l.size() < 3)\n\t\treturn true;\n\tint diff = l[1] - l[0];\n\
    \tfor (int i = 2; i < l.size(); i++) {\n\t\tif (diff * (l[i] - l[i - 1]) < 0)\n\
    \t\t\treturn false;\n\t}\n\treturn true;", "    long size = l.size();\n    bool\
    \ inc = true;\n    bool dec = true;\n    for (long i = 0; i < size - 1; i++) {\n\
    \        if (l[i] > l[i + 1])\n            inc = false;\n        if (l[i] < l[i\
    \ + 1])\n            dec = false;\n    }\n    return inc || dec;", "    // Your\
    \ code here\n    int flag;\n    bool mon = true;\n    for(int i=0;i<l.size()-1;i++){\n\
    \        if(l[i]<l[i+1]){\n            flag = 1;\n            break;\n       \
    \ }\n        else if(l[i]>l[i+1]){\n            flag = 2;\n            break;\n\
    \        }\n    }\n    if(flag == 1){\n        for(int i=0;i<l.size()-1;i++){\n\
    \            if(l[i]>l[i+1]){\n                mon = false;\n                break;\n\
    \            }\n        }\n    }\n    else if(flag == 2){\n        for(int i=0;i<l.size()-1;i++){\n\
    \            if(l[i]<l[i+1]){\n                mon = false;\n                break;\n\
    \            }\n        }\n    }\n    return mon;", "    int n = l.size();\n \
    \   if(n <= 1)\n        return true;\n    // check increasing.\n    bool inc =\
    \ true;\n    for(int i = 0; i < n - 1; i++) {\n        if(l[i] > l[i + 1]) {\n\
    \            inc = false;\n            break;\n        }\n    }\n    if(inc)\n\
    \        return true;\n    // check decreasing.\n    bool dec = true;\n    for(int\
    \ i = 0; i < n - 1; i++) {\n        if(l[i] < l[i + 1]) {\n            dec = false;\n\
    \            break;\n        }\n    }\n    return dec;", "  bool is_inc = false;\n\
    \  bool is_dec = false;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i]\
    \ <= l[i + 1]) {\n      is_inc = true;\n    }\n    if (l[i] >= l[i + 1]) {\n \
    \     is_dec = true;\n    }\n  }\n  return is_inc ^ is_dec;", "\t// return true\
    \ if strictly increasing\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i]\
    \ > l[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "    // Your\
    \ code here!\n    int increasing = 0;\n    int decreasing = 0;\n    for(int i\
    \ = 0; i < l.size()-1; i++){\n        if(l[i]<l[i+1])\n            increasing\
    \ += 1;\n        else if(l[i]>l[i+1])\n            decreasing += 1;\n    }\n \
    \   if(increasing != 0 && decreasing != 0)\n        return false;\n    else\n\
    \        return true;", "  if (l.size() <= 1) {\n    return true;\n  }\n\n  bool\
    \ increasing = false;\n  bool decreasing = false;\n\n  for (size_t i = 0; i <\
    \ l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      decreasing = true;\n\
    \    } else if (l[i] < l[i + 1]) {\n      increasing = true;\n    }\n  }\n\n \
    \ return increasing == false && decreasing == false ||\n         increasing !=\
    \ decreasing;", "\tif (l.size() <= 1) {\n\t\treturn true;\n\t}\n\tbool increase\
    \ = l[0] < l[1];\n\tfor (size_t i = 0; i < l.size() - 1; i++) {\n\t\tif (increase\
    \ && l[i] > l[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!increase && l[i]\
    \ < l[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "\tbool increasing\
    \ = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++)\
    \ {\n\t\tif (l[i] < l[i + 1])\n\t\t\tdecreasing = false;\n\t\tif (l[i] > l[i +\
    \ 1])\n\t\t\tincreasing = false;\n\t}\n\treturn increasing || decreasing;", " \
    \   if (l.size() == 0) return true;\n    if (l.size() == 1) return true;\n   \
    \ bool increasing = l[0] < l[1];\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        if (increasing && l[i] > l[i + 1]) return false;\n        if (!increasing\
    \ && l[i] < l[i + 1]) return false;\n    }\n    return true;", "    bool b=true;\n\
    \    int sl = l.size();\n    for(int i=0;i<sl-1;i++){\n      if(l[i]>l[i+1]){\n\
    \        b=false;\n        break;\n      }\n    }\n    if(b==true){\n      return\
    \ true;\n    }\n    b=true;\n    for(int i=0;i<sl-1;i++){\n      if(l[i]<l[i+1]){\n\
    \        b=false;\n        break;\n      }\n    }\n    if(b==true){\n      return\
    \ true;\n    }\n    return false;", "    // your code here\n    int state;\n \
    \   std::vector<long>::iterator it = l.begin();\n    if(*it < *(it+1)) state =\
    \ 1;\n    else if(*it > *(it+1)) state = 2;\n    else state = 0;\n    for(it;\
    \ it != l.end()-1; it++){\n        if(*it < *(it+1) && state != 1){\n        \
    \    return false;\n        }\n        else if(*it > *(it+1) && state != 2){\n\
    \            return false;\n        }\n    }\n    return true;", "\t/*\n\t// Version\
    \ 1 of code.\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int\
    \ i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i] > l[i + 1]) {\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tdecreasing = false;\n\t\t\
    }\n\t}\n\treturn increasing || decreasing;\n\t*/\n\t// Version 2 of code.\n\t\
    bool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size()\
    \ - 1; i++) {\n\t\tif (l[i] > l[i + 1]) {\n\t\t\tincreasing = false;\n\t\t}\n\t\
    \tif (l[i] < l[i + 1]) {\n\t\t\tdecreasing = false;\n\t\t}\n\t\tif (increasing\
    \ == false && decreasing == false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;", "    if (l.size() == 0) return true;\n    int sign = 0;\n    for (size_t\
    \ i = 1; i < l.size(); i++) {\n        int s = sign;\n        sign = 0;\n    \
    \    if (l[i] == l[i-1]) continue;\n        if (l[i] > l[i-1]) sign = 1;\n   \
    \     if (l[i] < l[i-1]) sign = -1;\n        if (s == 0) continue;\n        if\
    \ (s != sign) return false;\n    }\n    return true;", "\tint count = 0;\n\tint\
    \ i = 0;\n\twhile (i < l.size() - 1 && l[i] == l[i + 1]) {\n\t\tcount++;\n\t\t\
    i++;\n\t}\n\tif (count == l.size() - 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \tcount = 0;\n\t\ti = 0;\n\t\twhile (i < l.size() - 1 && l[i] <= l[i + 1]) {\n\
    \t\t\tcount++;\n\t\t\ti++;\n\t\t}\n\t\tif (count == l.size() - 1) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t\ti = 0;\n\t\t\twhile (i < l.size()\
    \ - 1 && l[i] >= l[i + 1]) {\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\
    if (count == l.size() - 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t}\n\t}", "  int size = l.size();\n  if (size <\
    \ 3) {\n    return true;\n  }\n  bool result = false;\n  bool increasing = false;\n\
    \  bool decreasing = false;\n  for (int i = 0; i < size - 1; i++) {\n    if (l[i]\
    \ > l[i + 1]) {\n      decreasing = true;\n    } else if (l[i] < l[i + 1]) {\n\
    \      increasing = true;\n    }\n  }\n  result = increasing ^ decreasing;\n \
    \ return result;", "    // TODO: complete this function\n    bool flag=false;\n\
    \    for(int i=0;i<l.size()-1;i++){\n        if(l[i]<l[i+1]){\n            flag=true;\n\
    \            break;\n        }\n    }\n    if(flag){\n        for(int i=0;i<l.size()-1;i++){\n\
    \            if(l[i]>l[i+1]){\n                return false;\n            }\n\
    \        }\n    }\n    else{\n        for(int i=0;i<l.size()-1;i++){\n       \
    \     if(l[i]<l[i+1]){\n                return false;\n            }\n       \
    \ }\n    }\n    return true;", "    if (l.size() < 2) {\n        return true;\n\
    \    }\n    int flag = 0;\n    for (auto i = l.begin(); i != l.end() - 1; i++)\
    \ {\n        if (*i < *(i + 1)) {\n            if (flag == -1) {\n           \
    \     return false;\n            }\n            flag = 1;\n        } else if (*i\
    \ > *(i + 1)) {\n            if (flag == 1) {\n                return false;\n\
    \            }\n            flag = -1;\n        }\n    }\n    return true;", " \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0;\
    \ i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;", "    bool\
    \ dec = true;\n    bool inc = true;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n   \
    \     if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n    }\n   \
    \ return (dec || inc);", "\tif (l.size() <= 1) {\n\t\treturn true;\n\t}\n\tbool\
    \ is_increasing = l[0] < l[1];\n\tfor (size_t i = 1; i < l.size() - 1; i++) {\n\
    \t\tif (is_increasing) {\n\t\t\tif (l[i] > l[i + 1]) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn true;", "\t// your code goes here\n\tbool increasing\
    \ = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++)\
    \ {\n\t\tif (l[i] > l[i + 1])\n\t\t\tincreasing = false;\n\t\tif (l[i] < l[i +\
    \ 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;", " \
    \ bool inc = true;\n  bool dec = true;\n  for (int i = 0; i < l.size() - 1; i++)\
    \ {\n    if (l[i] > l[i + 1])\n      inc = false;\n    if (l[i] < l[i + 1])\n\
    \      dec = false;\n  }\n  return inc || dec;", "  if (l.size() == 0) {\n   \
    \ return true;\n  }\n  // Find the type of ordering (increasing or decreasing)\
    \ in first two elements.\n  long first = l[0];\n  long second = l[1];\n  bool\
    \ increasing = first < second;\n  // Loop over all the remaining elements.\n \
    \ for (int i = 1; i < l.size(); i++) {\n    if (increasing) {\n      if (l[i]\
    \ < l[i - 1]) {\n        return false;\n      }\n    } else {\n      if (l[i]\
    \ > l[i - 1]) {\n        return false;\n      }\n    }\n  }\n  return true;",
  "\tassert(l.size() > 1);\n\tbool increasing = true;\n\tbool decreasing = true;\n\
    \tint i = 0;\n\twhile(i < l.size() - 1) {\n\t\tif(l[i] < l[i + 1])\n\t\t\tdecreasing\
    \ = false;\n\t\tif(l[i] > l[i + 1])\n\t\t\tincreasing = false;\n\t\ti++;\n\t}\n\
    \treturn (increasing || decreasing);", "  if (l.size() == 0) {\n    return true;\n\
    \  }\n  int k = l[0];\n  int g = 0; //1 means increasing and -1 means decreasing\n\
    \  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > k) {\n      if (g == 0)\
    \ {\n        g = 1;\n      } else if (g == -1) {\n        return false;\n    \
    \  }\n    } else if (l[i] < k) {\n      if (g == 0) {\n        g = -1;\n     \
    \ } else if (g == 1) {\n        return false;\n      }\n    }\n    k = l[i];\n\
    \  }\n  return true;", "  std::vector<long>::iterator it;\n  if(l.size()==1)\n\
    \  {\n    return true;\n  }\n  else\n  {\n    int flag_up = 0;\n    int flag_down\
    \ = 0;\n    for(it=l.begin();it!=l.end()-1;it++)\n    {\n      if((*it)<(*(it+1)))\n\
    \      {\n        flag_up++;\n      }\n      else if((*it)>(*(it+1)))\n      {\n\
    \        flag_down++;\n      }\n    }\n    if(flag_up==l.size()-1 || flag_down==l.size()-1)\n\
    \    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n\
    \  }", "    assert(l.size() > 0);\n    bool inc = true;\n    bool dec = true;\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i-1]) {\n    \
    \        inc = false;\n        }\n        if (l[i] > l[i-1]) {\n            dec\
    \ = false;\n        }\n    }\n    return inc || dec;", "    bool isincreasing=true;\n\
    \    bool isdecreasing=true;\n    for(auto i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1]){\n\
    \            isincreasing=false;\n        }\n        if(l[i]<l[i+1]){\n      \
    \      isdecreasing=false;\n        }\n    }\n    return (isincreasing||isdecreasing);",
  "  // start is 0\n  long int start = 0;\n  long int check = 0;\n  long int check1\
    \ = 0;\n  long int check2 = 0;\n  long int i = 0;\n  long int j = 0;\n  // check\
    \ if the vector is empty\n  if (l.size() == 0) {\n    return true;\n  }\n  //\
    \ this loop will check the monotonically increasing or decreasing\n  while (i\
    \ < l.size() - 1) {\n    check = l[i];\n    check1 = l[i + 1];\n    // if the\
    \ values are increasing\n    if (check <= check1) {\n      i++;\n      start =\
    \ 1;\n    }\n    // if the values are decreasing\n    else if (check >= check1)\
    \ {\n      i++;\n      start = 2;\n    }\n    else {\n      return false;\n  \
    \  }\n  }\n  // if the values are increasing\n  if (start == 1) {\n    while (j\
    \ < l.size() - 1) {\n      check2 = l[j];\n      check1 = l[j + 1];\n      if\
    \ (check2 <= check1) {\n        j++;\n      }\n      else {\n        return false;\n\
    \      }\n    }\n  }\n  // if the values are decreasing\n  else if (start == 2)\
    \ {\n    while (j < l.size() - 1) {\n      check2 = l[j];\n      check1 = l[j\
    \ + 1];\n      if (check2 >= check1) {\n        j++;\n      }\n      else {\n\
    \        return false;\n      }\n    }\n  }\n  return true;", "\t// Write your\
    \ code here.\n\tint n = l.size();\n\tbool flag = false;\n\tfor (int i = 0; i <\
    \ n - 1; i++) {\n\t\tif (l[i] == l[i + 1]) {\n\t\t\tcontinue;\n\t\t}\n\t\telse\
    \ if (l[i] < l[i + 1]) {\n\t\t\tif (flag == false) {\n\t\t\t\tflag = true;\n\t\
    \t\t}\n\t\t\telse if (flag == true) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t\telse if (l[i] > l[i + 1]) {\n\t\t\tif (flag == false) {\n\t\t\t\tflag = false;\n\
    \t\t\t}\n\t\t\telse if (flag == true) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;", "\tif (l.size() <= 2)\n\t\treturn true;\n\telse {\n\t\
    \tbool mono = true;\n\t\tint prev_elem = l[0];\n\t\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\t\tif (prev_elem == l[i]) {\n\t\t\t\tprev_elem = l[i];\n\t\t\t\t\
    continue;\n\t\t\t}\n\t\t\telse if (prev_elem < l[i]) {\n\t\t\t\tif (mono == false)\n\
    \t\t\t\t\treturn false;\n\t\t\t\tprev_elem = l[i];\n\t\t\t\tmono = true;\n\t\t\
    \t}\n\t\t\telse if (prev_elem > l[i]) {\n\t\t\t\tif (mono == true)\n\t\t\t\t\t\
    return false;\n\t\t\t\tprev_elem = l[i];\n\t\t\t\tmono = false;\n\t\t\t}\n\t\t\
    }\n\t\treturn true;\n\t}", "    if (l.size() <= 1) {\n        return true;\n \
    \   }\n\n    int direction = 0;\n\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i] == l[i + 1]) {\n            continue;\n        }\n\n   \
    \     if (direction == 0) {\n            direction = l[i] > l[i + 1] ? -1 : 1;\n\
    \        }\n\n        if (direction == -1 && l[i] < l[i + 1]) {\n            return\
    \ false;\n        }\n\n        if (direction == 1 && l[i] > l[i + 1]) {\n    \
    \        return false;\n        }\n    }\n\n    return true;", "    std::vector<long>::iterator\
    \ it;\n    it = l.begin();\n    int flag = 0;\n    for(it; it != l.end()-1; it++)\
    \ {\n        if(*it > *(it+1)) {\n            flag = -1;\n            break;\n\
    \        }\n        else if(*it < *(it+1)) {\n            flag = 1;\n        \
    \    break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    it++;\n\
    \    for(it; it != l.end()-1; it++) {\n        if(flag == 1 && *it > *(it+1))\n\
    \            return false;\n        else if(flag == -1 && *it < *(it+1))\n   \
    \         return false;\n    }\n    return true;", "\tint index = 1;\n\twhile\
    \ (index < l.size() && l[index] > l[index - 1]) {\n\t\tindex++;\n\t}\n\twhile\
    \ (index < l.size() && l[index] < l[index - 1]) {\n\t\tindex++;\n\t}\n\treturn\
    \ index == l.size();", "\tbool inc = true;\n\tbool dec = true;\n\tfor (int i =\
    \ 0; i < l.size() - 1; i++) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tdec = false;\n\
    \t\t}\n\t\tif (l[i] > l[i + 1]) {\n\t\t\tinc = false;\n\t\t}\n\t}\n\treturn (inc\
    \ || dec);", "    int len = l.size();\n    if (len < 3) {\n        return true;\n\
    \    }\n    int inc = l[1] - l[0] > 0 ? 1 : -1;\n    for (int i = 1; i < len;\
    \ i++) {\n        if (inc * (l[i] - l[i - 1]) < 0) {\n            return false;\n\
    \        }\n    }\n    return true;", "    // Write your code here\n    bool res\
    \ = true;\n    int i = 0;\n    int j = i + 1;\n    int n = l.size();\n    while(i\
    \ < n - 1) {\n        if(l[i] != l[j]) {\n            break;\n        }\n    \
    \    i++;\n        j++;\n    }\n    if(i == n - 1) {\n        return res;\n  \
    \  }\n    bool inc = false;\n    if(l[i] < l[j]) {\n        inc = true;\n    }\n\
    \    while(i < n - 1) {\n        if(inc) {\n            if(l[i] > l[j]) {\n  \
    \              res = false;\n                break;\n            }\n        }\
    \ else {\n            if(l[i] < l[j]) {\n                res = false;\n      \
    \          break;\n            }\n        }\n        i++;\n        j++;\n    }\n\
    \    return res;", "    // YOUR CODE HERE\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (long i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;", "    //your code here\n    if(l.size() ==\
    \ 1)\n      return true;\n    if(l[0] <= l[1])\n    {\n        for(int i = 1;\
    \ i < l.size() - 1; i++)\n        {\n            if(l[i] > l[i+1])\n         \
    \     return false;\n        }\n    }\n    else\n    {\n        for(int i = 1;\
    \ i < l.size() - 1; i++)\n        {\n            if(l[i] < l[i+1])\n         \
    \     return false;\n        }\n    }\n    return true;", "    int size = l.size();\n\
    \    int diff = l[1] - l[0];\n    int check = 1;\n    if(diff < 0) {\n       \
    \ check = -1;\n    }\n    for(int i = 1; i < size; i++) {\n        if(check *\
    \ (l[i] - l[i-1]) < 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    if (l.size() == 0) {\n        return true;\n    }\n    char order\
    \ = 'n';\n    for (long i = 0; i < l.size() - 1; i++) {\n        long sign = l[i]\
    \ - l[i + 1];\n        if (sign == 0) {\n            continue;\n        }\n  \
    \      char this_order = sign > 0 ? 'd' : 'i';\n        if (order == 'n') {\n\
    \            order = this_order;\n        } else if (order != this_order) {\n\
    \            return false;\n        }\n    }\n    return true;", "  if (l.size()\
    \ == 0) {\n    return true;\n  }\n  bool flag = false;\n  for (int i = 0; i <\
    \ l.size() - 1; i++) {\n    if (l[i] != l[i + 1]) {\n      flag = true;\n    \
    \  break;\n    }\n  }\n  if (flag == false) {\n    return true;\n  }\n  for (int\
    \ i = 0; i < l.size() - 1; i++) {\n    if (l[i] <= l[i + 1]) {\n      flag = true;\n\
    \    } else {\n      flag = false;\n      break;\n    }\n  }\n  if (flag == true)\
    \ {\n    return true;\n  }\n  for (int i = 0; i < l.size() - 1; i++) {\n    if\
    \ (l[i] >= l[i + 1]) {\n      flag = true;\n    } else {\n      flag = false;\n\
    \      break;\n    }\n  }\n  if (flag == true) {\n    return true;\n  }\n  return\
    \ false;", "  std::vector<long>::iterator itr1, itr2;\n  itr1 = l.begin();\n \
    \ itr2 = l.begin() + 1;\n  bool increasing = false;\n  bool decreasing = false;\n\
    \  while (itr2 != l.end()) {\n    if (*itr1 < *itr2) {\n      itr1++;\n      itr2++;\n\
    \      increasing = true;\n    } else if (*itr1 > *itr2) {\n      itr1++;\n  \
    \    itr2++;\n      decreasing = true;\n    } else {\n      itr1++;\n      itr2++;\n\
    \    }\n  }\n  if (increasing == true && decreasing == false) {\n    return true;\n\
    \  } else if (increasing == false && decreasing == true) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "  bool increasing = true;\n  bool decreasing\
    \ = true;\n  for (unsigned int i = 0; i < l.size() - 1; i++) {\n    if (l[i] >\
    \ l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n\
    \      decreasing = false;\n    }\n  }\n  return increasing || decreasing;", " \
    \   if (l.size() <= 2) {\n        return true;\n    }\n    bool is_increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (is_increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;", "  int\
    \ s = 0;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1])\
    \ {\n      if (s == 0) {\n        s = -1;\n      } else if (s == 1) {\n      \
    \  return false;\n      }\n    } else if (l[i] < l[i + 1]) {\n      if (s == 0)\
    \ {\n        s = 1;\n      } else if (s == -1) {\n        return false;\n    \
    \  }\n    }\n  }\n  return true;", "    std::vector<long> tmp = l;\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (unsigned i = 0; i < l.size(); i++) {\n        if (l[i] != tmp[i]) increasing\
    \ = false;\n        if (l[i] != tmp[l.size() - i - 1]) decreasing = false;\n \
    \   }\n    return increasing || decreasing;", "    int i;\n    int n = l.size();\n\
    \    // check increasing\n    bool increasing = true;\n    for (i = 0; i < n -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n\
    \            break;\n        }\n    }\n    if (increasing) {\n        return true;\n\
    \    }\n    // check decreasing\n    bool decreasing = true;\n    for (i = 0;\
    \ i < n - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            decreasing =\
    \ false;\n            break;\n        }\n    }\n    if (decreasing) {\n      \
    \  return true;\n    }\n    return false;", "    bool is_increasing = false;\n\
    \    bool is_decreasing = false;\n    if (l.size() == 1 || l.size() == 0) {\n\
    \        return true;\n    }\n    for (size_t i = 0; i < l.size() - 1; i++) {\n\
    \        if (l[i] < l[i + 1]) {\n            is_increasing = true;\n        }\n\
    \        if (l[i] > l[i + 1]) {\n            is_decreasing = true;\n        }\n\
    \    }\n    return (is_increasing && !is_decreasing) || (is_decreasing && !is_increasing);",
  "    if(l.size() <= 1)\n        return true;\n    int i = 0;\n    while(i < l.size()\
    \ - 1) {\n        if(l[i] == l[i + 1])\n            i++;\n        else\n     \
    \       break;\n    }\n    bool inc = true;\n    bool dec = true;\n    if(i ==\
    \ l.size() - 1)\n        return true;\n    inc = l[i] < l[i + 1];\n    dec = l[i]\
    \ > l[i + 1];\n    i = i + 1;\n    while(i < l.size() - 1) {\n        if(inc &&\
    \ (l[i] < l[i + 1]))\n            i++;\n        else if(dec && (l[i] > l[i + 1]))\n\
    \            i++;\n        else\n            return false;\n    }\n    return\
    \ true;", "    bool increasing = true;\n    bool decreasing = true;\n    int flag\
    \ = 0;\n    if(l.size() == 1)\n        return true;\n    if(l[0] > l[1])\n   \
    \     flag = -1;\n    else if(l[0] < l[1])\n        flag = 1;\n    for(int i =\
    \ 0; i < l.size() - 1; i++) {\n        if(l[i] > l[i + 1])\n            increasing\
    \ = false;\n        if(l[i] < l[i + 1])\n            decreasing = false;\n   \
    \ }\n    if(flag == 0)\n        return true;\n    else if(flag == 1)\n       \
    \ return increasing;\n    else\n        return decreasing;", "    bool non_decreasing\
    \ = true;\n    bool non_increasing = true;\n    for (int i = 0; i < l.size() -\
    \ 1; i++) {\n        if (l[i] > l[i + 1]) {\n            non_decreasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            non_increasing = false;\n\
    \        }\n    }\n    return non_decreasing || non_increasing;", '  // Your code
    here.', "  std::vector<long>::iterator it;\n  int diff = 0;\n  for (it = l.begin();\
    \ it != l.end() - 1; it++) {\n    if (*it != *(it + 1)) {\n      diff = *it -\
    \ *(it + 1);\n      break;\n    }\n  }\n  for (it = l.begin(); it != l.end() -\
    \ 1; it++) {\n    if (*it - *(it + 1) != diff) {\n      return false;\n    }\n\
    \  }\n  return true;", "    bool isNonDecreasing = true;\n    bool isNonIncreasing\
    \ = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            isNonDecreasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            isNonIncreasing = false;\n        }\n    }\n    return\
    \ isNonDecreasing || isNonIncreasing;", "    bool is_monotonic = true;\n    bool\
    \ is_increasing = false;\n    bool is_decreasing = false;\n    for (int i = 0;\
    \ i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            is_increasing\
    \ = true;\n        } else if (l[i] > l[i + 1]) {\n            is_decreasing =\
    \ true;\n        }\n    }\n    if (is_increasing == true && is_decreasing == true)\
    \ {\n        is_monotonic = false;\n    }\n    return is_monotonic;", "    //\
    \ Your code here\n    long n = l.size();\n    if(n==1) return true;\n    long\
    \ inc = 0, dec = 0;\n    if(l[0]<l[1]) inc = 1;\n    else if(l[0]>l[1]) dec =\
    \ 1;\n    for(long i=1;i<n-1;i++){\n        if(l[i]<l[i+1]){\n            if(dec){\n\
    \                return false;\n            }\n            else{\n           \
    \     inc = 1;\n            }\n        }\n        else if(l[i]>l[i+1]){\n    \
    \        if(inc){\n                return false;\n            }\n            else{\n\
    \                dec = 1;\n            }\n        }\n    }\n    return true;",
  "  // your code here\n  return false;", "    bool increasing = true;\n    bool decreasing\
    \ = true;\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++) {\n    \
    \    if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    \
    \    if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;", "\tint len = l.size();\n\tif (len<=1)\
    \ return false;\n\tif (l[0]>l[1]) {\n\t\tfor (int i=1; i<len-1; i++)\n\t\t\tif\
    \ (l[i]<l[i+1]) return false;\n\t} else {\n\t\tfor (int i=1; i<len-1; i++)\n\t\
    \t\tif (l[i]>l[i+1]) return false;\n\t}\n\treturn true;", "  if (l.size() <= 1)\
    \ return true;\n  int incr = 0;\n  int prev_incr = 0;\n  long prev = l[0];\n \
    \ for (auto it = l.begin() + 1; it != l.end(); ++it) {\n    if (*it > prev) {\n\
    \      incr = 1;\n    } else if (*it < prev) {\n      incr = -1;\n    } else {\n\
    \      incr = 0;\n    }\n    if (incr != prev_incr && prev_incr != 0) {\n    \
    \  return false;\n    }\n    prev_incr = incr;\n    prev = *it;\n  }\n  return\
    \ true;", "\tint a = 1;\n\tint b = 0;\n\tint c = 1;\n\tfor (int i = 0; i < l.size()\
    \ - 1; i++) {\n\t\tif (l[i] > l[i + 1]) {\n\t\t\ta = 0;\n\t\t}\n\t\tif (l[i] <\
    \ l[i + 1]) {\n\t\t\tb = 0;\n\t\t}\n\t\tif (l[i] == l[i + 1]) {\n\t\t\tc = 0;\n\
    \t\t}\n\t}\n\tif (a == 1 || b == 1 || c == 1) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "  // Declare flag for direction.\n  bool decreasing\
    \ = false;\n  // Generate the flag value\n  for (int i = 0; i < l.size() - 1;\
    \ i++) {\n    if (l[i] > l[i + 1]) {\n      decreasing = true;\n      break;\n\
    \    }\n  }\n  // Incrementing or Decrementing flag value\n  for (int i = 0; i\
    \ < l.size() - 1; i++) {\n    if (decreasing && l[i] < l[i + 1]) {\n      return\
    \ false;\n    }\n    if (!decreasing && l[i] > l[i + 1]) {\n      return false;\n\
    \    }\n  }\n  return true;", "    int increasing = 0;\n    for (int i = 0; i\
    \ < l.size() - 1; i++) {\n        if (l[i] <= l[i + 1]) {\n            increasing\
    \ = 1;\n            break;\n        }\n    }\n    if (increasing == 1) {\n   \
    \     for (int i = 0; i < l.size() - 1; i++) {\n            if (l[i] >= l[i +\
    \ 1]) {\n                return false;\n            }\n        }\n    } else {\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            if (l[i] <= l[i\
    \ + 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;", "    bool inc = l[0] < l[1];\n    for (int i = 1; i < l.size()\
    \ - 1; i++) {\n        if (inc && l[i] > l[i + 1]) return false;\n        if (!inc\
    \ && l[i] < l[i + 1]) return false;\n    }\n    return true;", "    int i;\n \
    \   int d,d2;\n    d = d2 = 0;\n    for(i=0;i<l.size()-1;i++){\n        d = l[i]\
    \ - l[i+1];\n        if(i+2 < l.size()){\n            d2 = l[i+1] - l[i+2];\n\
    \        }\n        if( (d*d2) < 0 ){\n            return false;\n        }\n\
    \    }\n    return true;", "\tbool m = true;\n\tif (l.size() > 0) {\n\t\tfor (int\
    \ i = 0; i < l.size() - 1; i++) {\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tif (l[i] > l[i + 1]) {\n\t\t\t\tm = false;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t\tif (l[i] > l[i\
    \ + 1]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (l[i] < l[i + 1]) {\n\t\t\t\tm =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn m;", "\tbool increasing\
    \ = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++)\
    \ {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tdecreasing = false;\n\t\t}\n\t\tif (l[i]\
    \ > l[i + 1]) {\n\t\t\tincreasing = false;\n\t\t}\n\t}\n\treturn increasing ||\
    \ decreasing;", "    assert(l.size() > 0);\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;", "    if (l.size() < 2) return true;\n   \
    \ bool pos = l[1] > l[0], equal = true;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] != l[i-1]) equal = false;\n        if (pos != (l[i] > l[i-1]))\
    \ return false;\n    }\n    return !equal;", "    // your code here\n    bool\
    \ check = false;\n    long size = l.size();\n    long i = 0;\n    long j = size\
    \ - 1;\n    while(i < j) {\n        if(l[i] > l[i+1]) {\n            check = true;\n\
    \            while(i < j) {\n                if(l[i] < l[i+1]) {\n           \
    \         return false;\n                }\n                i++;\n           \
    \ }\n        }\n        else if(l[i] < l[i+1]) {\n            check = true;\n\
    \            while(i < j) {\n                if(l[i] > l[i+1]) {\n           \
    \         return false;\n                }\n                i++;\n           \
    \ }\n        }\n        else {\n            check = false;\n            i++;\n\
    \        }\n    }\n    return check;", "    bool increasing = true;\n    bool\
    \ decreasing = true;\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;", "    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n \
    \       if (l[i] < l[i + 1])\n            decreasing = false;\n        if (l[i]\
    \ > l[i + 1])\n            increasing = false;\n    }\n    return increasing ||\
    \ decreasing;", "    int dec = 0;\n    int inc = 0;\n    for(int i = 0; i < l.size()-1;\
    \ i++) {\n        if(l[i] > l[i+1]) {\n            dec++;\n        } else if(l[i]\
    \ < l[i+1]) {\n            inc++;\n        }\n    }\n    if(dec == 0 || inc ==\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }", "\t\
    long prev = l[0];\n\tlong curr = 0;\n\tint c = 0;\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tcurr = l[i];\n\t\tif (prev > curr) {\n\t\t\tc--;\n\t\t}\n\t\telse\
    \ if (prev < curr) {\n\t\t\tc++;\n\t\t}\n\t\tprev = curr;\n\t}\n\treturn (c ==\
    \ 0 || abs(c) == l.size() - 1);", "\treturn std::is_sorted(l.begin(), l.end())\
    \ || std::is_sorted(l.begin(), l.end(), std::greater<long>());", "  if (l.size()\
    \ == 0) return true;\n  bool is_increasing = l[0] <= l[l.size() - 1];\n  for (int\
    \ i = 1; i < l.size(); i++) {\n    if (is_increasing and l[i - 1] > l[i]) {\n\
    \      return false;\n    }\n    if (!is_increasing and l[i - 1] < l[i]) {\n \
    \     return false;\n    }\n  }\n  return true;", "    bool b1 = true;\n    bool\
    \ b2 = true;\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i] > l[i-1])\
    \ b1 = false;\n        if(l[i] < l[i-1]) b2 = false;\n    }\n    return b1 ||\
    \ b2;", "    if (l.size() <= 1) {\n        return true;\n    }\n    std::vector<long>::iterator\
    \ itr1 = l.begin();\n    std::vector<long>::iterator itr2 = l.begin() + 1;\n \
    \   bool increasing = false;\n    bool decreasing = false;\n    for (; itr2 !=\
    \ l.end(); itr1++, itr2++) {\n        if ((*itr1 < *itr2) && !decreasing) {\n\
    \            increasing = true;\n        } else if ((*itr1 > *itr2) && !increasing)\
    \ {\n            decreasing = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;"]
stop_tokens:
- "\n}"
