name: HumanEval_63_fibfib
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // your\
    \ code here\n  if(n<0) return 0;\n  if(n<=1) return 0;\n  if(n==2) return 1;\n\
    \  long arr[n+1];\n  arr[0]=0;\n  arr[1]=0;\n  arr[2]=1;\n  for(int i=3;i<=n;i++){\n\
    \    arr[i]=arr[i-1]+arr[i-2]+arr[i-3];\n  }\n  return arr[n];\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 3) {\n    return n == 0 ? 0 : 1;\n  }\n  return fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmptvzv9lt7: /tmp/tmptvzv9lt7.cpp:24: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = 0;\n        for (int\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a=0,b=0,c=1,d=1;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return\
    \ 0;\n    if(n==2)\n        return 1;\n    for(int i=3;i<=n;i++)\n    {\n    \
    \    d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code here\n    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2]\
    \ = 1;\n    for(int i = 3; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] +\
    \ dp[i-3];\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t} else if (n == 1) {\n\t\treturn 0;\n\t} else if (n\
    \ == 2) {\n\t\treturn 1;\n\t} else {\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint\
    \ c = 1;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tfor (int i = 0; i < n - 2; i++)\
    \ {\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = a + b + c;\n\t\t\te =\
    \ d;\n\t\t}\n\t\treturn e;\n\t}\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpqn0mftzh: /tmp/tmpqn0mftzh.cpp:42: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code here\n    assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0, b =\
    \ 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Implement this placeholer.\n    long a=0,b=0,c=1,d;\n    if(n==0)\n        return\
    \ 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return\
    \ 1;\n    else{\n        for(int i=3;i<=n;i++){\n            d=a+b+c;\n      \
    \      a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    std::cout\
    \ << \"n = \" << n << std::endl;\n    if (n <= 1) {\n        return 0;\n    }\
    \ else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: "n = 2\nn = 1\nn = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 8\nn = 7\nn = 6\nn = 5\nn = 4\nn = 3\n\
    n = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 5\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 2\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 6\nn = 5\nn = 4\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\n\
    n = 0\nn = 2\nn = 10\nn = 9\nn = 8\nn = 7\nn = 6\nn = 5\nn = 4\nn = 3\nn = 2\n\
    n = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\nn = 3\n\
    n = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 5\nn = 4\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 6\nn = 5\nn = 4\nn = 3\n\
    n = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 5\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 2\nn = 7\nn = 6\nn = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\n\
    n = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\nn = 3\nn = 2\nn = 1\n\
    n = 0\nn = 2\nn = 1\nn = 6\nn = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\n\
    n = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 8\nn = 7\nn = 6\nn = 5\nn = 4\n\
    n = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\n\
    n = 0\nn = 2\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 6\nn = 5\n\
    n = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\nn = 0\n\
    n = 2\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\nn = 1\n\
    n = 0\nn = 5\nn = 4\nn = 3\nn = 2\nn = 1\nn = 0\nn = 2\nn = 1\nn = 3\nn = 2\n\
    n = 1\nn"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ nth=0;\n\tlong n_1th=0;\n\tlong n_2th=0;\n\tlong n_3th=0;\n\tlong i;\n\tif(n==0){\n\
    \t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\
    \t}\n\telse{\n\t\tfor(i=0;i<n;i++){\n\t\t\tif(i==0){\n\t\t\t\tnth=0;\n\t\t\t}\n\
    \t\t\tif(i==1){\n\t\t\t\tnth=0;\n\t\t\t}\n\t\t\tif(i==2){\n\t\t\t\tnth=1;\n\t\t\
    \t}\n\t\t\telse{\n\t\t\t\tnth=n_1th+n_2th+n_3th;\n\t\t\t\tn_3th=n_2th;\n\t\t\t\
    \tn_2th=n_1th;\n\t\t\t\tn_1th=nth;\n\t\t\t}\n\t\t}\n\t}\n\treturn nth;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpotauzxcu: /tmp/tmpotauzxcu.cpp:55: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Write\
    \ your code here\n  long a=0,b=0,c=1,ans;\n  for(int i=3;i<=n;i++)\n  {\n    ans=a+b+c;\n\
    \    a=b;\n    b=c;\n    c=ans;\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp_hpsn4ap: /tmp/tmp_hpsn4ap.cpp:29: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 1) return 0;\n  if (n == 2) return 1;\n  long prev = 0, curr = 1, next =\
    \ 1;\n  for (int i = 3; i <= n; i++) {\n    prev = curr;\n    curr = next;\n \
    \   next = prev + curr + next;\n  }\n  return next;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmph0_s2u9m: /tmp/tmph0_s2u9m.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  long a\
    \ = 0, b = 0, c = 1, next = 1;\n  for (int i = 3; i <= n; i++) {\n    next = a\
    \ + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n  return next;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ < 0) return -1;\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n ==\
    \ 2) return 1;\n\treturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 0) return -1;\n    if (n == 0) return 0;\n    long fibfib0 = 0;\n    long\
    \ fibfib1 = 0;\n    long fibfib2 = 1;\n    long fibfib3 = 0;\n    for (long i\
    \ = 0; i < n - 2; i++) {\n        fibfib3 = fibfib0 + fibfib1 + fibfib2;\n   \
    \     fibfib0 = fibfib1;\n        fibfib1 = fibfib2;\n        fibfib2 = fibfib3;\n\
    \    }\n    return fibfib3;\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp50oo4_6b: /tmp/tmp50oo4_6b.cpp:32: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a = 0, b = 0, c = 1, d = 0;\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 1;\n    for (int i = 3; i <= n; i++) {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // your\
    \ code here\n  assert(n>=0);\n  if(n<=1)\n    return 0;\n  if(n==2)\n    return\
    \ 1;\n  int f1=0,f2=0,f3=1;\n  for(int i=3;i<=n;i++)\n  {\n    int temp=f3;\n\
    \    f3=f1+f2+f3;\n    f1=f2;\n    f2=temp;\n  }\n  return f3;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   if (n > 2) {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  \
    \  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n\
    \  }\n  if (n == 2) {\n    return 1;\n  }\n  long f[n + 1];\n  f[0] = 0;\n  f[1]\
    \ = 0;\n  f[2] = 1;\n  for (int i = 3; i <= n; i++) {\n    f[i] = f[i - 1] + f[i\
    \ - 2] + f[i - 3];\n  }\n  return f[n];\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code goes here\n    long fibfib[] = {0, 0, 1};\n    if (n <= 2)\n     \
    \   return fibfib[n];\n    for (int i = 3; i <= n; i++)\n        fibfib[i % 3]\
    \ = fibfib[(i - 1) % 3] + fibfib[(i - 2) % 3] + fibfib[(i - 3) % 3];\n    return\
    \ fibfib[n % 3];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n==0)\n        return 0;\n    if (n==1)\n        return 0;\n    if (n==2)\n\
    \        return 1;\n    long a=0,b=0,c=1,d;\n    for (int i=3;i<=n;i++)\n    {\n\
    \        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    int memo[n+1];\n    memo[0]\
    \ = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    for (int i = 3; i <= n; i++) {\n\
    \        memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n    }\n    return memo[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n==0\
    \ || n==1) return 0;\n  if (n==2) return 1;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ fibfib[n + 1];\n\tfibfib[0] = 0;\n\tfibfib[1] = 0;\n\tfibfib[2] = 1;\n\tfor\
    \ (int i = 3; i <= n; i++) {\n\t\tfibfib[i] = fibfib[i - 1] + fibfib[i - 2] +\
    \ fibfib[i - 3];\n\t}\n\treturn fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n>=0);\n\
    \  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return\
    \ 1;\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 0) {\n    return -1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n ==\
    \ 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long t1 = 0;\n\
    \  long t2 = 0;\n  long t3 = 1;\n  long res = 0;\n  for (int i = 3; i <= n; i++)\
    \ {\n    res = t1 + t2 + t3;\n    t1 = t2;\n    t2 = t3;\n    t3 = res;\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tlong temp1 = 0;\n\tlong temp2 = 0;\n\tlong temp3\
    \ = 1;\n\tlong result = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\tresult = temp1\
    \ + temp2 + temp3;\n\t\ttemp1 = temp2;\n\t\ttemp2 = temp3;\n\t\ttemp3 = result;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ f1=0,f2=0,f3=1,f4=0;\n    for(int i=3;i<=n;i++){\n        f4=f1+f2+f3;\n   \
    \     f1=f2;\n        f2=f3;\n        f3=f4;\n    }\n    return f4;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpl1_8q3vo: /tmp/tmpl1_8q3vo.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long a = 0, b = 0, c = 1, sum = 0;\n    for (int i = 3; i <= n; i++) {\n \
    \       sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  // your code here\n  if(n<=1)\n  return 0;\n  if(n==2)\n  return 1;\n\
    \  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\tlong fib1\
    \ = 0;\n\tlong fib2 = 0;\n\tlong fib3 = 1;\n\tlong fib4 = 1;\n\tlong result =\
    \ 1;\n\tfor (int i = 2; i < n; i++) {\n\t\tresult = fib1 + fib2 + fib3;\n\t\t\
    fib1 = fib2;\n\t\tfib2 = fib3;\n\t\tfib3 = result;\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 1;\n    long l = 1;\n    for (int x =\
    \ 1; x < n; x++) {\n        i = j;\n        j = k;\n        k = l;\n        l\
    \ = i + j + k;\n    }\n    return l;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmphlvdbue3: /tmp/tmphlvdbue3.cpp:30: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ *fibfib = new long[n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2]\
    \ = 1;\n    for (int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2] + fibfib[i - 3];\n    }\n    return fibfib[n];\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = a + b + c;\n    for (int i = 3; i < n;\
    \ i++) {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b +\
    \ c;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ first = 0;\n    long second = 0;\n    long third = 1;\n    long current = 0;\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    for (int i = 2;\
    \ i < n; i++) {\n        current = first + second + third;\n        first = second;\n\
    \        second = third;\n        third = current;\n    }\n    return current;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    if (n == 2) return 1;\n    long fiba = 0, fibb = 0,\
    \ fibc = 1;\n    long res = 0;\n    for (int i = 3; i <= n; i++) {\n        res\
    \ = fiba + fibb + fibc;\n        fiba = fibb;\n        fibb = fibc;\n        fibc\
    \ = res;\n    }\n    return res;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib[n+2];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    long i = 0;\n\
    \    for(i = 3; i <= n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n \
    \ long d = 1;\n  long e = 0;\n  long f = 0;\n  while (n >= 3) {\n    n -= 1;\n\
    \    e = a + b + c;\n    f = d + e + b;\n    a = b;\n    b = c;\n    c = e;\n\
    \    d = e;\n    e = f;\n  }\n  return f;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpxy7lc6jc: /tmp/tmpxy7lc6jc.cpp:39: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // TODO:\
    \ implement this function\n  if(n==0) return 0;\n  if(n==1) return 0;\n  if(n==2)\
    \ return 1;\n  long fib[n];\n  fib[0]=0;\n  fib[1]=0;\n  fib[2]=1;\n  for(int\
    \ i=3;i<=n;i++){\n    fib[i]=fib[i-1]+fib[i-2]+fib[i-3];\n  }\n  return fib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //Write\
    \ code here\n    if(n==0 || n==1) return 0;\n    if(n==2) return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tlong num3 =\
    \ 1;\n\tlong num4 = num1 + num2 + num3;\n\tfor (int i = 3; i < n; i++) {\n\t\t\
    num1 = num2;\n\t\tnum2 = num3;\n\t\tnum3 = num4;\n\t\tnum4 = num1 + num2 + num3;\n\
    \t}\n\treturn num4;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    if (n == 2) return 1;\n    long a = 0, b = 0, c = 1,\
    \ d = 0;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n       \
    \ a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 3) {\n    return n;\n  }\n  long f3 = 0;\n  long f2 = 1;\n  long f1 = 2;\n\
    \  long current = 3;\n  while (current < n) {\n    f3 = f2;\n    f2 = f1;\n  \
    \  f1 = f3 + f2 + f1;\n    current++;\n  }\n  return f1;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpahjv94nn: /tmp/tmpahjv94nn.cpp:33: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   else {\n        std::vector<long> fibfibs;\n        fibfibs.push_back(0);\n\
    \        fibfibs.push_back(0);\n        fibfibs.push_back(1);\n        for (int\
    \ i = 3; i <= n; i++) {\n            fibfibs.push_back(fibfibs[i-1] + fibfibs[i-2]\
    \ + fibfibs[i-3]);\n        }\n        return fibfibs[n];\n    }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  if (n == 0) return 0;\n  long fib[n+1];\n  fib[0] = 0;\n  fib[1] =\
    \ 0;\n  fib[2] = 1;\n  for (int i = 3; i <= n; i++) {\n    fib[i] = fib[i-1] +\
    \ fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long f_1 = 0;\n    long f_2 = 0;\n    long f_3 = 1;\n    long f_n = 0;\n \
    \   for (long i = 3; i <= n; i++) {\n        f_n = f_1 + f_2 + f_3;\n        f_1\
    \ = f_2;\n        f_2 = f_3;\n        f_3 = f_n;\n    }\n    return f_n;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  std::vector<long>\
    \ fib = {0, 0, 1};\n  if (n < fib.size()) {\n    return fib[n];\n  }\n  long temp,\
    \ a = 0, b = 0, c = 1;\n  while (n-- > 2) {\n    temp = c;\n    c = a + b + c;\n\
    \    a = b;\n    b = temp;\n  }\n  return c;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    else if (n == 2) return 1;\n    long a = 0, b = 0, c\
    \ = 1, d = 0;\n    for (long i = 3; i <= n; i++) {\n        d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ fib[n+1];\n\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn 0;\n\tif(n\
    \ == 2)\n\t\treturn 1;\n\tfib[0] = 0;\n\tfib[1] = 0;\n\tfib[2] = 1;\n\tfor(int\
    \ i = 3; i <= n; i++)\n\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\treturn\
    \ fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n>=0);\n\
    \    std::vector<long> v={0,0,1};\n    for(int i=3;i<=n;i++){\n        v.push_back(v[i-1]+v[i-2]+v[i-3]);\n\
    \    }\n    return v[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a=0,b=0,c=1,d;\n    if(n==0) return a;\n    if(n==1) return b;\n    if(n==2)\
    \ return c;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n    \
    \    b=c;\n        c=d;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n   \
    \     return 1;\n    }\n    long x, y, z;\n    x = y = 0;\n    z = 1;\n    while\
    \ (n-- > 2) {\n        x = y;\n        y = z;\n        z = x + y + z;\n    }\n\
    \    return z;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpa49xmna7: /tmp/tmpa49xmna7.cpp:37: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  std::vector<long>\
    \ a;\n  a.push_back(0);\n  a.push_back(0);\n  a.push_back(1);\n  while (a.size()\
    \ != n) {\n    a.push_back(a[a.size()-1] + a[a.size()-2] + a[a.size()-3]);\n \
    \ }\n  return a[a.size()-1];\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpop1aictz: /tmp/tmpop1aictz.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ a=0,b=0,c=1,d=0;\n  for(int i=3;i<=n;i++){\n    d=a+b+c;\n    a=b;\n    b=c;\n\
    \    c=d;\n  }\n  return d;\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmplj41vaar: /tmp/tmplj41vaar.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    \n\
    \    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return\
    \ 0;\n    }\n    if(n == 2) {\n        return 1;\n    }\n    long fib_n_3 = 0;\n\
    \    long fib_n_2 = 0;\n    long fib_n_1 = 1;\n    long fib_n = 0;\n    for(int\
    \ i = 2; i < n; i++) {\n        fib_n = fib_n_3 + fib_n_2 + fib_n_1;\n       \
    \ fib_n_3 = fib_n_2;\n        fib_n_2 = fib_n_1;\n        fib_n_1 = fib_n;\n \
    \   }\n    return fib_n;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n    return 0;\n  }\n  else\
    \ if (n == 2) {\n    return 1;\n  }\n  else {\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp97_s1p9p: /tmp/tmp97_s1p9p.cpp:20: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 0) {\n    return -1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n ==\
    \ 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long a = 0;\n\
    \  long b = 0;\n  long c = 1;\n  long d = a + b + c;\n  for (int i = 3; i <= n;\
    \ i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpxscc5v32: /tmp/tmpxscc5v32.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ fib[n + 1];\n\tfib[0] = 0;\n\tfib[1] = 0;\n\tfib[2] = 1;\n\tfor (int i = 3;\
    \ i <= n; i++) {\n\t\tfib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n\t}\n\t\
    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  long m = n - 3;\n  long first_fib = 0;\n  long second_fib\
    \ = 1;\n  long current_fib = 1;\n  long sum = 0;\n  while (m >= 0) {\n    m--;\n\
    \    sum += first_fib;\n    first_fib = second_fib;\n    second_fib = current_fib;\n\
    \    current_fib = first_fib + second_fib;\n  }\n  return sum + current_fib;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpxf8lye9e: /tmp/tmpxf8lye9e.cpp:43: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a=0,b=0,c=1,d=0;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return\
    \ 0;\n    if(n==2)\n        return 1;\n    for(int i=0;i<n-2;i++)\n    {\n   \
    \     d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Please\
    \ write your code here.\n  if(n==0)\n  return 0;\n  if(n==1)\n  return 0;\n  if(n==2)\n\
    \  return 1;\n  int a,b,c,d;\n  a=0;\n  b=0;\n  c=1;\n  for(int i=3;i<=n;i++)\n\
    \  {\n    d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n  }\n  return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  static\
    \ long cache[1024] = {0};\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 1;\n  if (cache[n] == 0) {\n    cache[n] = fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n  }\n  return cache[n];\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ dp[100];\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n    for(int i = 3;\
    \ i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n    }\n    return\
    \ dp[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    long ans = 1;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 1;\n    for (int i = 3; i <= n; i++) {\n\
    \        ans = a + b + c;\n        a = b;\n        b = c;\n        c = ans;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 3) return (n==2);\n    long f = 0, g = 1, gg = 0;\n    for (long i = 3;\
    \ i <= n; i++) {\n        f = g;\n        g = gg;\n        gg = f + g + gg;\n\
    \    }\n    return gg;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmptb1ojqea: /tmp/tmptb1ojqea.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long\
    \ d = a + b + c;\n  for (int i = 3; i < n; i++) {\n    a = b;\n    b = c;\n  \
    \  c = d;\n    d = a + b + c;\n  }\n  return d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib[n + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int\
    \ i = 3; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  static\
    \ std::vector<long> cache(10000);\n  if (n < 0) {\n    return -1;\n  }\n  if (n\
    \ <= 2) {\n    return 0;\n  }\n  if (n == 3) {\n    return 1;\n  }\n  if (cache[n\
    \ - 1] != 0) {\n    return cache[n - 1];\n  }\n  cache[n - 1] = fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n  return cache[n - 1];\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpwxwjd753: /tmp/tmpwxwjd753.cpp:34: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  long i=0,\
    \ j=0, k=1, sum=0;\n  for (int x=0; x<n-2; x++) {\n    sum = i + j + k;\n    i\
    \ = j;\n    j = k;\n    k = sum;\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    std::vector<long>\
    \ fib(n+1);\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for(int i\
    \ = 3; i <= n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n\
    \    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tlong a = 0, b = 0, c = 1, d;\n\tfor (int i = 3; i <= n; i++) {\n\t\
    \td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp943_fike: /tmp/tmp943_fike.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a[n+1];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 1;\n    for(int i=3;i<=n;i++)\n\
    \    {\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    }\n    return a[n];\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 2) {\n    return 0;\n  }\n  long a = 0, b = 0, c = 1;\n  for (long i = 2;\
    \ i < n; i++) {\n    a = b;\n    b = c;\n    c = a + b + c;\n  }\n  return c;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp_t3qn43e: /tmp/tmp_t3qn43e.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n==0)\
    \ return 0;\n  if (n==1) return 0;\n  if (n==2) return 1;\n  long dp[n];\n  dp[0]\
    \ = 0;\n  dp[1] = 0;\n  dp[2] = 1;\n  for (int i=3; i<n; i++) {\n    dp[i] = dp[i-1]\
    \ + dp[i-2] + dp[i-3];\n  }\n  return dp[n-1];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpme0w7h6y: /tmp/tmpme0w7h6y.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ s0 = 0, s1 = 0, s2 = 1, s3 = 1;\n    if (n == 0) return s0;\n    if (n == 1)\
    \ return s1;\n    if (n == 2) return s2;\n    if (n == 3) return s3;\n    while\
    \ (n > 3) {\n        s0 = s1;\n        s1 = s2;\n        s2 = s3;\n        s3\
    \ = s0 + s1 + s2;\n        n--;\n    }\n    return s3;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n==0)\
    \ return 0;\n  else if (n==1) return 0;\n  else if (n==2) return 1;\n  else return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 0) {\n        assert(false);\n    }\n    else if (n == 0) {\n        return\
    \ 0;\n    }\n    else if (n == 1) {\n        return 0;\n    }\n    else if (n\
    \ == 2) {\n        return 1;\n    }\n    else {\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int i\
    \ = 3; i <= n; i++)\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    return\
    \ fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ *fib = new long[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n \
    \   for(int i = 3; i < n+1; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   std::vector<long> vec{0, 0, 1};\n    while (vec.size() < n) {\n        vec.push_back(vec[vec.size()\
    \ - 1] + vec[vec.size() - 2] + vec[vec.size() - 3]);\n    }\n    return vec[n\
    \ - 1];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpurh64oo8: /tmp/tmpurh64oo8.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tint fib1\
    \ = 0;\n\tint fib2 = 0;\n\tint fib3 = 1;\n\tint fib = 0;\n\tfor (int i = 3; i\
    \ <= n; i++) {\n\t\tfib = fib1 + fib2 + fib3;\n\t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\
    \t\tfib3 = fib;\n\t}\n\treturn fib;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ TODO: Your code here!\n    if(n<=2) return 0;\n    if(n==3) return 1;\n    long\
    \ fib3=0,fib2=0,fib1=1;\n    long ans=1;\n    for(int i=4;i<=n;i++){\n       \
    \ ans=fib3+fib2+fib1;\n        fib3=fib2;\n        fib2=fib1;\n        fib1=ans;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpe7lklv7q: /tmp/tmpe7lklv7q.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tstd::vector<long>\
    \ fib;\n\tfib.push_back(0);\n\tfib.push_back(0);\n\tfib.push_back(1);\n\tfor (int\
    \ i = 3; i <= n; i++) {\n\t\tfib.push_back(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n\
    \t}\n\treturn fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ first=0,second=0,third=1,temp;\n    for(int i=0;i<n;i++){\n        temp=third;\n\
    \        third=first+second+third;\n        first=second;\n        second=temp;\n\
    \    }\n    return first;\n}\nint main() {\n    auto candidate = fibfib;\n   \
    \ assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong*\
    \ Fib = new long[n + 1];\n\tFib[0] = 0;\n\tFib[1] = 0;\n\tFib[2] = 1;\n\tfor (int\
    \ i = 3; i <= n; i++) {\n\t\tFib[i] = Fib[i - 1] + Fib[i - 2] + Fib[i - 3];\n\t\
    }\n\treturn Fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tlong n3\
    \ = 0;\n\tlong n2 = 1;\n\tlong n1 = 0;\n\tlong n0 = 0;\n\tfor (long i = 2; i <\
    \ n; i++) {\n\t\tn0 = n1 + n2 + n3;\n\t\tn3 = n2;\n\t\tn2 = n1;\n\t\tn1 = n0;\n\
    \t}\n\treturn n0;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpavltf7j5: /tmp/tmpavltf7j5.cpp:35: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n>=0);\n\
    \  if(n == 0 || n == 1)\n    return 0;\n  if(n == 2)\n    return 1;\n  long a\
    \ = 0, b = 0, c = 1, d = 0;\n  for(int i = 3; i <= n; i++) {\n    d = a + b +\
    \ c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long a = 0, b = 0, c = 1, d;\n  for (long i = 2; i <= n; i++) {\n\
    \    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp0bqf4sd4: /tmp/tmp0bqf4sd4.cpp:29: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   if (n == 3) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    long a = 0, b = 0, c = 1, d;\n    for (int i = 0; i < n; i++) {\n\
    \        d = c + b + a;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp397gisl7: /tmp/tmp397gisl7.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ first = 0;\n\tlong second = 0;\n\tlong third = 1;\n\tlong result = 0;\n\tif\
    \ (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 2) {\n\t\treturn 1;\n\t}\n\tfor (int i = 3; i <= n; i++) {\n\t\tresult =\
    \ first + second + third;\n\t\tfirst = second;\n\t\tsecond = third;\n\t\tthird\
    \ = result;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    int\
    \ arr[n];\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 1;\n    for(int i =\
    \ 3; i < n; i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n    }\n\
    \    return arr[n-1];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpoawv6ell: /tmp/tmpoawv6ell.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ YOUR CODE HERE\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2)\
    \ return 1;\n    long a=0,b=0,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n\
    \        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long a = 0, b = 0, c = 1, res = 0;\n    for (int i = 3; i <= n; i++) {\n \
    \       res = a + b + c;\n        a = b;\n        b = c;\n        c = res;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long a = 0, b = 0, c = 1, d = 0;\n    for (int i = 3; i <= n; i++) {\n   \
    \     d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // your\
    \ code here\n  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n\
    \    return 1;\n  \n  long n_3 = 0;\n  long n_2 = 0;\n  long n_1 = 1;\n  long\
    \ n_t = n_3 + n_2 + n_1;\n  for(int i=3;i<=n;i++)\n  {\n    n_3 = n_2;\n    n_2\
    \ = n_1;\n    n_1 = n_t;\n    n_t = n_3 + n_2 + n_1;\n  }\n  return n_t;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmphvf523hd: /tmp/tmphvf523hd.cpp:41: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ f_minus_3 = 0;\n    long f_minus_2 = 0;\n    long f_minus_1 = 1;\n    if (n\
    \ == 0) return 0;\n    else if (n == 1) return 0;\n    else if (n == 2) return\
    \ 1;\n    else {\n        long current_fib = 1;\n        for (int i = 3; i <=\
    \ n; i++) {\n            current_fib = f_minus_1 + f_minus_2 + f_minus_3;\n  \
    \          f_minus_3 = f_minus_2;\n            f_minus_2 = f_minus_1;\n      \
    \      f_minus_1 = current_fib;\n        }\n        return current_fib;\n    }\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ a = 0, b = 0, c = 1, d;\n  if (n == 0) return a;\n  for (long i = 2; i <= n;\
    \ i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpzh22pl_k: /tmp/tmpzh22pl_k.cpp:29: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n==0)\n\
    \t\treturn 0;\n\tif (n==1)\n\t\treturn 0;\n\tif (n==2)\n\t\treturn 1;\n\tlong\
    \ ans=0;\n\tlong fibfib[n+1];\n\tfibfib[0]=0;\n\tfibfib[1]=0;\n\tfibfib[2]=1;\n\
    \tfor (long i=3;i<=n;i++)\n\t\tfibfib[i]=fibfib[i-1]+fibfib[i-2]+fibfib[i-3];\n\
    \treturn fibfib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ fib[n+1];\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n  for (int i = 3; i\
    \ <= n; i++)\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  return fib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ f0 = 0;\n\tlong f1 = 0;\n\tlong f2 = 1;\n\tfor (long i = 2; i <= n; i++) {\n\
    \t\tlong f3 = f0 + f1 + f2;\n\t\tf0 = f1;\n\t\tf1 = f2;\n\t\tf2 = f3;\n\t}\n\t\
    return f2;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp77mqoe5o: /tmp/tmp77mqoe5o.cpp:30: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code goes here\n    if(n==0)return 0;\n    if(n==1)return 0;\n    if(n==2)return\
    \ 1;\n    long dp[n+1];\n    dp[0]=0;\n    dp[1]=0;\n    dp[2]=1;\n    for(int\
    \ i=3;i<=n;i++){\n        dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n    }\n    return dp[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a = 0, b = 0, c = 1, d;\n    if (n == 0)\n    return a;\n    for (int i = 2;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpv9dx0e1y: /tmp/tmpv9dx0e1y.cpp:31: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  std::vector<long>\
    \ fib = {0, 0, 1};\n  for (long i = 3; i <= n; i++) {\n    fib.push_back(fib[i-1]\
    \ + fib[i-2] + fib[i-3]);\n  }\n  return fib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ memo[n+1];\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    for(int\
    \ i = 3; i < n+1; i++) {\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n\
    \    }\n    return memo[n];\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code here.\n  if(n==0 || n==1){\n    return 0;\n  }\n  else if(n==2){\n    return\
    \ 1;\n  }\n  else{\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n  }\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 1;\n\tlong\
    \ d = 0;\n\tfor (int i = 2; i < n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long a = 0, b = 0, c = 1, d = 0;\n    for (int i = 3; i <= n; i++) {\n   \
    \     d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  long sum\
    \ = 0;\n  long a1 = 0;\n  long a2 = 0;\n  long a3 = 1;\n  for (long i = 2; i <\
    \ n; i++) {\n    sum = a1 + a2 + a3;\n    a1 = a2;\n    a2 = a3;\n    a3 = sum;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    if(n == 0 || n == 1)\n        return 0;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here.\n    if(n == 0)\n        return 0;\n    if(n == 1)\n       \
    \ return 0;\n    if(n == 2)\n        return 1;\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 0) {\n        throw std::invalid_argument(\"n must be positive.\");\n \
    \   }\n    if (n < 2) {\n        return 0;\n    }\n    if (n == 2) {\n       \
    \ return 1;\n    }\n    long a=0, b=0, c=1, r=0;\n    for (long i=3; i<=n; i++)\
    \ {\n        r = a + b + c;\n        a = b;\n        b = c;\n        c = r;\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tlong dp[n\
    \ + 1];\n\tdp[0] = 0;\n\tdp[1] = 0;\n\tdp[2] = 1;\n\tfor (int i = 3; i <= n; i++)\
    \ {\n\t\tdp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n\t}\n\treturn dp[n];\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  // base case\n\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Change\
    \ this line to return the result.\n\t//assert(n<=70); // assert will check the\
    \ condition if it is true then it will do nothing and if it is false then program\
    \ will terminate\n\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tif(n==2)\n\
    \t\treturn 1;\n\tlong a=0,b=0,c=1,d;\n\tfor(int i=3;i<=n;i++)\n\t{\n\t\td=a+b+c;\n\
    \t\ta=b;\n\t\tb=c;\n\t\tc=d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n    for (int i =\
    \ 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\
    \    return dp[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    int\
    \ fibfib[n+1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n \
    \   for(int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ index=3;\n  if(n==0)\n  return 0;\n  if(n==1)\n  return 0;\n  if(n==2)\n  return\
    \ 1;\n  long previous=0;\n  long current=1;\n  long tmp=0;\n  while(index<=n)\n\
    \  {\n    tmp=current;\n    current=current+previous+fibfib(n-3);\n    previous=tmp;\n\
    \    index++;\n  }\n  return current;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpyuw0oqqf: /tmp/tmpyuw0oqqf.cpp:39: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    std::vector<long>\
    \ f(std::max(3L, n + 1));\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 1;\n    for\
    \ (int i = 3; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n\
    \    }\n    return f[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  long a\
    \ = 0, b = 0, c = 1, d = 0;\n  for (int i = 3; i <= n; i++) {\n    d = a + b +\
    \ c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  if (n < 2) return 0;\n  if (n == 2) return 1;\n  std::vector<long>\
    \ fibfib(n);\n  fibfib[0] = 0;\n  fibfib[1] = 0;\n  fibfib[2] = 1;\n  for (long\
    \ i = 3; i < n; ++i) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n\
    \  }\n  return fibfib[n-1];\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpmiazkpgk: /tmp/tmpmiazkpgk.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    std::vector<long>\
    \ fibVec;\n    fibVec.push_back(0);\n    fibVec.push_back(0);\n    fibVec.push_back(1);\n\
    \    while(fibVec.size()<=n) {\n        fibVec.push_back(fibVec[fibVec.size()-1]+fibVec[fibVec.size()-2]+fibVec[fibVec.size()-3]);\n\
    \    }\n    return fibVec[n];\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    for (int i = 2; i < n; i++) {\n        long d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = a + b + c;\n     \
    \   for (int i = 3; i < n; i++) {\n            a = b;\n            b = c;\n  \
    \          c = d;\n            d = a + b + c;\n        }\n        return d;\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    std::vector<long>\
    \ fibs = {0, 0, 1};\n    if (n < 3) return fibs[n];\n    for (int i = 3; i <=\
    \ n; i++) {\n        fibs.push_back(fibs[i-1] + fibs[i-2] + fibs[i-3]);\n    }\n\
    \    return fibs[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return\
    \ 1;\n\tlong i, j, k, result;\n\ti = 0;\n\tj = 0;\n\tk = 1;\n\tfor (long l = 3;\
    \ l <= n; l++) {\n\t\tresult = i + j + k;\n\t\ti = j;\n\t\tj = k;\n\t\tk = result;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // TODO:\
    \ Your code here\n  return -1;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpm2gbl9cf: /tmp/tmpm2gbl9cf.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Write\
    \ your code here.\n  if(n == 0)\n  {\n      return 0;\n  }\n  if(n == 1)\n  {\n\
    \      return 0;\n  }\n  if(n == 2)\n  {\n      return 1;\n  }\n  long * f = new\
    \ long[n+1];\n  f[0] = 0;\n  f[1] = 0;\n  f[2] = 1;\n  for(int i = 3; i <= n;\
    \ i++)\n  {\n      f[i] = f[i-1] + f[i-2] + f[i-3];\n  }\n  return f[n];\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 3) return n;\n    long a = 0, b = 1, c = 1, d = 2;\n    for (int i = 3;\
    \ i < n; i++) {\n        long a1 = a, b1 = b, c1 = c, d1 = d;\n        a = b1;\n\
    \        b = c1;\n        c = d1;\n        d = a1 + b1 + c1;\n    }\n    return\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp6wdiy3r3: /tmp/tmp6wdiy3r3.cpp:29: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ a=0,b=0,c=1,d;\n  for(int i=2;i<=n;i++){\n    d=a+b+c;\n    a=b;\n    b=c;\n\
    \    c=d;\n  }\n  return d;\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpzxqc70d4: /tmp/tmpzxqc70d4.cpp:28: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ ans = 0;\n  std::vector<long> fib{0,0,1};\n  for(long i = 3; i <= n; i++) {\n\
    \    ans = fib[0] + fib[1] + fib[2];\n    fib[0] = fib[1];\n    fib[1] = fib[2];\n\
    \    fib[2] = ans;\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp5cz3slga: /tmp/tmp5cz3slga.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long a = 0, b = 0, c = 1, d = 0;\n    for (int i = 3; i <= n; i++) {\n   \
    \     d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int i\
    \ = 3; i <= n; i++)\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    return\
    \ fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib[n + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int\
    \ i = 3; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n\
    \    }\n    return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n==0)\n        return 0;\n    if (n==1)\n        return 0;\n    if (n==2)\n\
    \        return 1;\n    long f0 = 0;\n    long f1 = 0;\n    long f2 = 1;\n   \
    \ long f3 = 1;\n    long f4 = 2;\n    long f5 = 4;\n    long tmp1 = 0;\n    long\
    \ tmp2 = 0;\n    long tmp3 = 0;\n    long tmp4 = 0;\n    long tmp5 = 0;\n    long\
    \ tmp6 = 0;\n    for (int i=4; i<=n; i++) {\n        tmp1 = f0;\n        tmp2\
    \ = f1;\n        tmp3 = f2;\n        tmp4 = f3;\n        tmp5 = f4;\n        tmp6\
    \ = f5;\n        f0 = tmp2;\n        f1 = tmp3;\n        f2 = tmp4;\n        f3\
    \ = tmp5;\n        f4 = tmp6;\n        f5 = f0 + f1 + f2 + f3 + f4;\n    }\n \
    \   return f5;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp6n3oqv1c: /tmp/tmp6n3oqv1c.cpp:54: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n>=0);\n\
    \tif(n<=2) return n-1;\n\tlong t1=0,t2=1,t3=1,temp;\n\tfor(int i=3;i<=n;i++){\n\
    \t\ttemp=t3;\n\t\tt3=t3+t2+t1;\n\t\tt1=t2;\n\t\tt2=temp;\n\t}\n\treturn t3;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpqyhq_uep: /tmp/tmpqyhq_uep.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n   if (n\
    \ == 0) return 0;\n   if (n == 1) return 0;\n   if (n == 2) return 1;\n   return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ WRITE YOUR CODE HERE\n    if(n==0)\n        return 0;\n    if(n==1)\n      \
    \  return 0;\n    if(n==2)\n        return 1;\n    int a = 0, b = 0, c = 1, sum\
    \ = 0;\n    while(n--){\n        sum = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = sum;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpkgv06en6: /tmp/tmpkgv06en6.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  else if (n == 1) return 0;\n  else if (n == 2) return 1;\n\
    \  else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n    return 0;\n  }\n  else\
    \ if (n == 2) {\n    return 1;\n  }\n  else {\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 1;\n\tlong\
    \ d = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\
    \tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code here\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 0;\n  dp[2] = 1;\n  for\
    \ (int i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n\
    \  }\n  return dp[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tint f1\
    \ = 0, f2 = 0, f3 = 1, result = 0;\n\tif (n == 0)\n\t\treturn 0;\n\tfor (int i\
    \ = 2; i <= n; i++) {\n\t\tresult = f1 + f2 + f3;\n\t\tf1 = f2;\n\t\tf2 = f3;\n\
    \t\tf3 = result;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpr829hc81: /tmp/tmpr829hc81.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ f0 = 0;\n\tlong f1 = 0;\n\tlong f2 = 1;\n\tlong f3 = 1;\n\tlong f4 = 2;\n\t\
    long f5 = 3;\n\tlong f6 = 5;\n\tlong f7 = 8;\n\tlong f8 = 13;\n\tlong f9 = 21;\n\
    \tlong f10 = 34;\n\tlong f11 = 55;\n\tlong f12 = 89;\n\tlong f13 = 144;\n\tlong\
    \ f14 = 233;\n\tlong f15 = 377;\n\tlong f16 = 610;\n\tlong f17 = 987;\n\tlong\
    \ f18 = 1597;\n\tlong f19 = 2584;\n\tlong f20 = 4181;\n\tlong f21 = 6765;\n\t\
    long f22 = 10946;\n\tlong f23 = 17711;\n\tlong f24 = 28657;\n\tlong f25 = 46368;\n\
    \tlong f26 = 75025;\n\tlong f27 = 121393;\n\tlong f28 = 196418;\n\tlong f29 =\
    \ 317811;\n\tlong f30 = 514229;\n\tlong f31 = 832040;\n\tlong f32 = 1346269;\n\
    \tlong f33 = 2178309;\n\tlong f34 = 3524578;\n\tlong f35 = 5702887;\n\tlong f36\
    \ = 9227465;\n\tlong f37 = 14930352;\n\tlong f38 = 24157817;\n\tlong f39 = 39088169;\n\
    \tlong f40 = 63245986;\n\tlong f41 = 102334155;\n\tlong f42 = 165580141;\n\tlong\
    \ f43 = 267914296;\n\tlong f44 = 433494437;\n\tlong f45 = 701408733;\n\tlong f46\
    \ = 1134903170;\n\tlong f47 = 1836311903;\n\tlong f48 = 2971215073;\n\tlong f49\
    \ = 4807526976;\n\tlong f50 = 7778742049;\n\tlong f51 = 12586269025;\n\tlong f52\
    \ = 20365011074;\n\tlong f53 = 3295\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dnyahhb.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp8dnyahhb.cpp:70:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp8dnyahhb.cpp:70:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 2) return 0;\n    long fibs[3] = {0, 0, 1};\n    for (long i = 3; i <=\
    \ n; i++) {\n        long fibsum = 0;\n        for (long j = 0; j < 3; j++) {\n\
    \            fibsum += fibs[j];\n        }\n        for (long j = 0; j < 2; j++)\
    \ {\n            fibs[j] = fibs[j+1];\n        }\n        fibs[2] = fibsum;\n\
    \    }\n    return fibs[2];\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n+1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n \
    \   for(int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code here\n    std::vector<long> fib(n+1);\n    fib[0] = 0;\n    fib[1]\
    \ = 0;\n    fib[2] = 1;\n    for(int i = 3; i <= n; i++) {\n        fib[i] = fib[i-1]\
    \ + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tlong fibfib_array[n + 1];\n\tfibfib_array[0] = 0;\n\tfibfib_array[1]\
    \ = 0;\n\tfibfib_array[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tfibfib_array[i]\
    \ = fibfib_array[i - 1] + fibfib_array[i - 2] + fibfib_array[i - 3];\n\t}\n\t\
    return fibfib_array[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ a = 0, b = 0, c = 1, d;\n\tif (n == 0)\n\t\treturn a;\n\tfor (int i = 2; i <=\
    \ n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn\
    \ d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp8p95ar4v: /tmp/tmp8p95ar4v.cpp:30: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  if (n <= 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n\
    \  }\n  long a = 0, b = 0, c = 1;\n  long sum = 0;\n  while (n > 2) {\n    sum\
    \ = a + b + c;\n    a = b;\n    b = c;\n    c = sum;\n    n--;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n>=0);\n\
    \tif(n==0 || n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tlong\
    \ dp[n+1];\n\tdp[0]=0;\n\tdp[1]=0;\n\tdp[2]=1;\n\tlong result;\n\tfor(int i=3;i<=n;i++){\n\
    \t\tdp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n\t}\n\tresult=dp[n];\n\treturn result;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   long current = 2;\n    long n_minus_1 = 1;\n    long n_minus_2 = 0;\n    long\
    \ n_minus_3 = 0;\n    long sum = 0;\n    while (current < n) {\n        sum =\
    \ n_minus_1 + n_minus_2 + n_minus_3;\n        n_minus_3 = n_minus_2;\n       \
    \ n_minus_2 = n_minus_1;\n        n_minus_1 = sum;\n        current++;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here!\n    std::vector<long> nums(n+1);\n    nums[0] = 0;\n    nums[1]\
    \ = 0;\n    nums[2] = 1;\n    for(int i = 3; i < n+1; i++){\n      nums[i] = nums[i-1]\
    \ + nums[i-2] + nums[i-3];\n    }\n    return nums[n];\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tlong f[n+1];\n\tf[0] = 0;\n\t\
    f[1] = 0;\n\tf[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tf[i] = f[i-1] +\
    \ f[i-2] + f[i-3];\n\t}\n\treturn f[n];\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  static\
    \ int x = 1;\n  static int y = 0;\n  static int z = 0;\n  static int count = 2;\n\
    \  long output;\n  if(n == 0){\n    return 0;\n  }else if(n == 1){\n    return\
    \ 0;\n  }else if(n == 2){\n    return 1;\n  }else{\n    if(count == n){\n    \
    \  return output;\n    }else{\n      output = x + y + z;\n      z = y;\n     \
    \ y = x;\n      x = output;\n      count++;\n      return fibfib(n);\n    }\n\
    \  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpydmttqdh: /tmp/tmpydmttqdh.cpp:44: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    std::vector<long> fibfib_map = {0, 0, 1};\n    for (long i = 3;\
    \ i <= n; i++) {\n        fibfib_map.push_back(fibfib_map[i-1] + fibfib_map[i-2]\
    \ + fibfib_map[i-3]);\n    }\n    return fibfib_map[n];\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  \n  assert(n\
    \ >= 0);\n  if (n < 2) return 0;\n  if (n == 2) return 1;\n  int a[n + 1];\n \
    \ a[0] = 0;\n  a[1] = 0;\n  a[2] = 1;\n  for (int i = 3; i <= n; i++)\n  {\n \
    \     a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n  }\n  return a[n];\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ i,a=0,b=0,c=1,d=0;\n  for(i=1;i<=n;i++)\n  {\n  \td=a+b+c;\n  \ta=b;\n  \tb=c;\n\
    \  \tc=d;\n  }\n  return d;\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpo80gomge: /tmp/tmpo80gomge.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n+1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n \
    \   for(int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n\
    \    }\n    long a = 0, b = 0, c = 1;\n    long i = 3;\n    while (i <= n) {\n\
    \        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \        i++;\n    }\n    return c;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\telse if (n == 1) return 0;\n\telse if (n == 2) return 1;\n\
    \tlong x0 = 0, x1 = 0, x2 = 1, x3 = 1;\n\tfor (int i = 3; i < n; i++) {\n\t\t\
    x3 = x0 + x1 + x2;\n\t\tx0 = x1;\n\t\tx1 = x2;\n\t\tx2 = x3;\n\t}\n\treturn x3;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpi40czxhg: /tmp/tmpi40czxhg.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tlong a[n];\n\ta[0] = 0;\n\ta[1] = 0;\n\ta[2] = 1;\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\ta[i] = a[i - 1] + a[i - 2] + a[i - 3];\n\
    \t}\n\treturn a[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    if (n == 3) {\n     \
    \   return 1;\n    }\n    if (n == 4) {\n        return 2;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 2) return 0;\n    long a = 0, b = 0, c = 1, d;\n    while (n-- > 2) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return c;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib_n;\n    std::vector<long> vec = {0, 0, 1};\n    // Check the result with\
    \ the first three numbers.\n    if (n < 3) {\n        return vec[n];\n    } else\
    \ {\n        for (long i = 3; i <= n; i++) {\n            fibfib_n = vec[0] +\
    \ vec[1] + vec[2];\n            vec[0] = vec[1];\n            vec[1] = vec[2];\n\
    \            vec[2] = fibfib_n;\n        }\n        return fibfib_n;\n    }\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tstd::vector<long>\
    \ v;\n\tv.push_back(0);\n\tv.push_back(0);\n\tv.push_back(1);\n\tfor (int i =\
    \ 3; i <= n; i++) {\n\t\tlong num = v[i - 1] + v[i - 2] + v[i - 3];\n\t\tv.push_back(num);\n\
    \t}\n\treturn v[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 1;\n    long a = 0, b = 0, c = 1, d = 0;\n    for (int i = 3; i <= n;\
    \ i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ fib = 0;\n  if (n > 2) {\n    long minus_one = 2;\n    long minus_two = 1;\n\
    \    long minus_three = 0;\n    for (long i = 3; i <= n; i++) {\n      fib = minus_one\
    \ + minus_two + minus_three;\n      minus_three = minus_two;\n      minus_two\
    \ = minus_one;\n      minus_one = fib;\n    }\n  } else if (n == 2) {\n    fib\
    \ = 1;\n  }\n  return fib;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp8lyjpzl4: /tmp/tmp8lyjpzl4.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    for (int i = 2; i < n; i++) {\n        e = a + b + c;\n        a = b;\n \
    \       b = c;\n        c = e;\n    }\n    return e;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 0) return -1;\n    if (n < 2) return 0;\n    if (n == 2) return 1;\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ a = 0, b = 0, c = 1, d = 1;\n  for (int i = 0; i < n; i++) {\n    d = a + b\
    \ + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpxwql9wj2: /tmp/tmpxwql9wj2.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\telse if (n == 1) {\n\t\treturn 0;\n\t}\n\telse\
    \ if (n == 2) {\n\t\treturn 1;\n\t}\n\telse {\n\t\tlong a = 0;\n\t\tlong b = 0;\n\
    \t\tlong c = 1;\n\t\tlong curr = 0;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\t\
    curr = a + b + c;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = curr;\n\t\t}\n\t\treturn\
    \ curr;\n\t}\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ fib = 0;\n  long first = 0;\n  long second = 1;\n  long third = 1;\n  long counter\
    \ = 2;\n  if (n == 0) {\n    return fib;\n  }\n  if (n == 1) {\n    return fib;\n\
    \  }\n  if (n == 2) {\n    return second;\n  }\n  while (counter < n) {\n    fib\
    \ = first + second + third;\n    first = second;\n    second = third;\n    third\
    \ = fib;\n    counter++;\n  }\n  return fib;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp31lemksk: /tmp/tmp31lemksk.cpp:43: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n   long\
    \ dp[n+1];\n   dp[0] = 0;\n   dp[1] = 0;\n   dp[2] = 1;\n   for(int i = 3; i <=\
    \ n; i++) {\n       dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n   }\n   return dp[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n\
    \    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 1;\n    for (int i = 3; i <= n; i++) {\n        long d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n\
    \ == 2) {\n    return 1;\n  } else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    if(n==0)\n    return 0;\n    if(n==1)\n    return\
    \ 0;\n    if(n==2)\n    return 1;\n    long a=0,b=0,c=1,i=0;\n    for(i=3;i<=n;i++)\n\
    \    {\n        a=b;\n        b=c;\n        c=a+b+c;\n    }\n    return c;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpxur9ff_6: /tmp/tmpxur9ff_6.cpp:36: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // TODO:\
    \ Write your code here\n  if(n==0)\n    return 0;\n  else if(n==1)\n    return\
    \ 0;\n  else if(n==2)\n    return 1;\n  else\n  {\n    long a=0,b=0,c=1,d=0;\n\
    \    for(int i=2;i<n;i++)\n    {\n      d=a+b+c;\n      a=b;\n      b=c;\n   \
    \   c=d;\n    }\n    return d;\n  }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ assert(n >= 0);\n    // write your solution here\n    if(n<=1) return 0;\n \
    \   if(n==2) return 1;\n    // index: 0 1 2 3 4 5 6\n    // output: 0 0 1 1 2\
    \ 4 7\n    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n   \
    \ for(int i=3;i<=n;i++){\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n    }\n\
    \    return dp[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\treturn\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 0) {\n    throw;\n  }\n  if (n < 2) {\n    return 0;\n  }\n  if (n == 2) {\n\
    \    return 1;\n  }\n  long nMinusOne = 1;\n  long nMinusTwo = 0;\n  long nMinusThree\
    \ = 0;\n  long currentValue = 0;\n  for (int i = 3; i <= n; i++) {\n    currentValue\
    \ = nMinusOne + nMinusTwo + nMinusThree;\n    nMinusThree = nMinusTwo;\n    nMinusTwo\
    \ = nMinusOne;\n    nMinusOne = currentValue;\n  }\n  return currentValue;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n < 0) return -1;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long fib1 = 0;\n    long fib2 = 0;\n    long fib3\
    \ = 1;\n    long fibn = 1;\n    for (int i = 3; i <= n; i++) {\n        fibn =\
    \ fib1 + fib2 + fib3;\n        fib1 = fib2;\n        fib2 = fib3;\n        fib3\
    \ = fibn;\n    }\n    return fibn;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ prev = 0;\n  long prevprev = 0;\n  long prevprevprev = 0;\n  long curr = 1;\n\
    \  long temp;\n  for (int i = 0; i < n; i++) {\n    temp = curr;\n    curr = prev\
    \ + prevprev + prevprevprev;\n    prevprevprev = prevprev;\n    prevprev = prev;\n\
    \    prev = temp;\n  }\n  return curr;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp42ae0_m0: /tmp/tmp42ae0_m0.cpp:34: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
