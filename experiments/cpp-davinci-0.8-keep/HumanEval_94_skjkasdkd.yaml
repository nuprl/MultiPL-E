name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // You need to find the largest prime value and return the sum of its digits.\n\
  // Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}))) == (10));\n\
  \    assert(candidate((std::vector<long>({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
  \ 1, 2, 4, 2, 5, 1}))) == (25));\n    assert(candidate((std::vector<long>({1, 3,\
  \ 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}))) == (13));\n  \
  \  assert(candidate((std::vector<long>({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83,\
  \ 0, 5, 6}))) == (11));\n    assert(candidate((std::vector<long>({0, 81, 12, 3,\
  \ 1, 21}))) == (3));\n    assert(candidate((std::vector<long>({0, 8, 1, 2, 1, 7})))\
  \ == (7));\n    assert(candidate((std::vector<long>({8191}))) == (19));\n    assert(candidate((std::vector<long>({8191,\
  \ 123456, 127, 7}))) == (19));\n    assert(candidate((std::vector<long>({127, 97,\
  \ 8192}))) == (10));\n}\n"
completions: ["    long prime = 0;\n    std::vector<long> primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\
    \ 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263,\
    \ 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359,\
    \ 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457,\
    \ 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,\
    \ 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\
    \ 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\
    \ 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881,\
    \ 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997,\
    \ 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,\
    \ 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181,",
  "  long large=0;\n  for(int i=0;i<lst.size();i++){\n    large=std::max(large,lst[i]);\n\
    \  }\n  long sum=0;\n  while(large>0){\n    sum+=large%10;\n    large/=10;\n \
    \ }\n  return sum;", "    long a=0;\n    std::vector<long> primes;\n    for(long\
    \ i=2;i<=100000;i++){\n        bool isPrime=true;\n        for(long j=2;j<i;j++){\n\
    \            if(i%j==0){\n                isPrime=false;\n                break;\n\
    \            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n\
    \        }\n    }\n    for(long i=0;i<lst.size();i++){\n        if(std::find(primes.begin(),primes.end(),lst[i])!=primes.end()){\n\
    \            a=lst[i];\n        }\n    }\n    return a;", "  std::vector<long>\
    \ temp(lst.size());\n  std::sort(lst.begin(), lst.end());\n  std::reverse(lst.begin(),\
    \ lst.end());\n  std::vector<long>::iterator it = std::unique_copy(lst.begin(),\
    \ lst.end(), temp.begin());\n  temp.resize(std::distance(temp.begin(), it));\n\
    \n  int a{0};\n  int n{0};\n  int num{0};\n  int o;\n  int sum{0};\n  for (auto\
    \ i = temp.begin(); i != temp.end(); ++i) {\n    num = *i;\n    if (num <= 1)\
    \ {\n      continue;\n    }\n    for (n = 2; n <= num; n++) {\n      if (num %\
    \ n == 0) {\n        for (o = 2; o <= n; o++) {\n          if (n % o == 0) {\n\
    \            break;\n          }\n        }\n        if (o == n) {\n         \
    \ a = n;\n        }\n      }\n    }\n    if (a == 0) {\n      continue;\n    }\n\
    \    while (a != 0) {\n      sum += a % 10;\n      a /= 10;\n    }\n    return\
    \ sum;\n  }\n  return 0;", "  long MAX_PRIME = 100000;\n  std::vector<bool> sieve(MAX_PRIME,\
    \ false);\n  for (int i = 2; i <= MAX_PRIME; i++) {\n    if (!sieve[i]) {\n  \
    \    for (int j = i + i; j <= MAX_PRIME; j += i) {\n        sieve[j] = true;\n\
    \      }\n    }\n  }\n  long max_prime = -1;\n  for (long n : lst) {\n    if (!sieve[n]\
    \ && n > max_prime) {\n      max_prime = n;\n    }\n  }\n  int sum = 0;\n  while\
    \ (max_prime > 0) {\n    sum += max_prime % 10;\n    max_prime /= 10;\n  }\n \
    \ return sum;", "    long count = 0;\n    long a = *max_element(lst.begin(), lst.end());\n\
    \    while(a!=0){\n        a = a/10;\n        count++;\n    }\n    return count;",
  "\t//step 1, find the largest prime\n\tlong max = 0;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] > max) {\n\t\t\tbool prime = true;\n\t\t\tfor (long j\
    \ = 2; j < lst[i]; j++) {\n\t\t\t\tif (lst[i] % j == 0) {\n\t\t\t\t\tprime = false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prime) {\n\t\t\t\tmax = lst[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\t//step 2, sum the digits\n\tlong sum = 0;\n\twhile (max\
    \ > 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;", "    int\
    \ len = lst.size();\n    if(len == 0) return 0;\n    long largestPrimeValue =\
    \ 0;\n    for(int i = 0; i < len; i++){\n        long num = lst[i];\n        bool\
    \ isPrime = true;\n        if(num == 0) continue;\n        if(num == 1) continue;\n\
    \        for(int j = 2; j < num/2; j++){\n            if(num % j == 0){\n    \
    \            isPrime = false;\n                break;\n            }\n       \
    \ }\n        if(isPrime && largestPrimeValue < num){\n            largestPrimeValue\
    \ = num;\n        }\n    }\n    int sum = 0;\n    while(largestPrimeValue > 0){\n\
    \        sum += largestPrimeValue % 10;\n        largestPrimeValue /= 10;\n  \
    \  }\n    return sum;", "    vector<long> v;\n    vector<long> s;\n    vector<long>\
    \ m;\n    vector<long> f;\n    vector<long> g;\n    vector<long> j;\n    vector<long>\
    \ p;\n    vector<long> o;\n    vector<long> e;\n    vector<long> z;\n    vector<long>\
    \ q;\n    vector<long> m1;\n    vector<long> m2;\n    vector<long> m3;\n    vector<long>\
    \ m4;\n    vector<long> m5;\n    vector<long> m6;\n    vector<long> m7;\n    vector<long>\
    \ m8;\n    vector<long> m9;\n    vector<long> m10;\n    vector<long> m11;\n  \
    \  vector<long> m12;\n    vector<long> m13;\n    vector<long> m14;\n    vector<long>\
    \ m15;\n    vector<long> m16;\n    vector<long> m17;\n    vector<long> m18;\n\
    \    vector<long> m19;\n    vector<long> m20;\n    vector<long> m21;\n    vector<long>\
    \ m22;\n    vector<long> m23;\n    vector<long> m24;\n    vector<long> m25;\n\
    \    vector<long> m26;\n    vector<long> m27;\n    vector<long> m28;\n    vector<long>\
    \ m29;\n    vector<long> m30;\n    vector<long> m31;\n    vector<long> m32;\n\
    \    vector<long> m33;\n    vector<long> m34;\n    vector<long> m35;\n    vector<long>\
    \ m36;\n    vector<long> m37;\n    vector<long> m38;\n    vector<long> m39;\n\
    \    vector<long> m40;\n    vector<long> m41;\n    vector<long> m42;\n    vector<long>\
    \ m43;\n    vector<long> m44;\n    vector<long> m45;\n    vector<long> m46;\n\
    \    vector<long> m47;\n", "    int cnt = 0;\n    long max=0;\n    for(auto x:lst){\n\
    \        if(x > 1){\n            int cnt=0;\n            for(int i=2;i<=x/2;i++){\n\
    \                if(x%i==0){\n                    cnt++;\n                   \
    \ break;\n                }\n            }\n            if(cnt==0) max = std::max(max,x);\n\
    \        }\n    }\n    long sum = 0;\n    while(max){\n        sum += max%10;\n\
    \        max/=10;\n    }\n    return sum;", "    std::vector<long> sorted(lst);\n\
    \    std::sort(sorted.begin(), sorted.end());\n    for (int i = sorted.size()\
    \ - 1; i >= 0; i--) {\n        if (sorted[i] == 0) continue;\n        if (sorted[i]\
    \ % 2 == 0) {\n            if (sorted[i] / 2 == 0) {\n                continue;\n\
    \            }\n            else {\n                if (isPrime(sorted[i] / 2))\
    \ {\n                    return sumDigits(sorted[i] / 2);\n                }\n\
    \            }\n        }\n        else {\n            if (isPrime(sorted[i]))\
    \ {\n                return sumDigits(sorted[i]);\n            }\n        }\n\
    \    }\n    return 0;", "    long n = 0;\n    long mx = 0;\n    // write code\
    \ here\n    for(auto i: lst){\n        n = 0;\n        if(i <= 1) continue;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      n = 0;\n                break;\n            }\n            else\n     \
    \           n = i;\n        }\n        if(n > mx)\n            mx = n;\n    }\n\
    \    int sum = 0;\n    if(mx > 0){\n        for(;mx > 0;mx /= 10)\n          \
    \  sum += mx % 10;\n    }\n    return sum;", "  long largest = 0;\n  for (size_t\
    \ i = 0; i < lst.size(); i++) {\n    long x = lst[i];\n    if (x <= 1) {\n   \
    \   continue;\n    }\n    for (size_t j = 2; j < x; j++) {\n      if (x % j ==\
    \ 0) {\n        break;\n      }\n      if (j == x - 1) {\n        largest = x;\n\
    \      }\n    }\n  }\n  std::cout << largest << '\\n';\n  long sum = 0;\n  while\
    \ (largest > 0) {\n    sum += largest % 10;\n    largest /= 10;\n  }\n  return\
    \ sum;", "    bool ok = true;\n    long max_value = *max_element(lst.begin(),\
    \ lst.end());\n    for (int i = 2; i <= max_value; i++) {\n        for (int j\
    \ = 0; j < lst.size(); j++) {\n            if (lst[j] % i == 0 && lst[j] != i)\
    \ {\n                lst[j] = 0;\n            }\n        }\n    }\n    long max_prime\
    \ = *max_element(lst.begin(), lst.end());\n    std::cout << max_prime << std::endl;\n\
    \    long _sum = 0;\n    while (max_prime > 0) {\n        _sum += max_prime %\
    \ 10;\n        max_prime /= 10;\n    }\n    return _sum;", "    //\n    // | Code\
    \ |\n    //", "    sort(lst.begin(), lst.end());\n    for(int i = lst.size()-1;\
    \ i >= 0; i--){\n        if(lst[i] == 0){\n            continue;\n        }\n\
    \        if(lst[i] == 1){\n            continue;\n        }\n        long num\
    \ = lst[i];\n        bool prime = true;\n        for(int j = 2; j <= sqrt(num);\
    \ j++){\n            if(num % j == 0){\n                prime = false;\n     \
    \           break;\n            }\n        }\n        if(prime){\n           \
    \ long result = 0;\n            while(num > 0){\n                result += num\
    \ % 10;\n                num /= 10;\n            }\n            return result;\n\
    \        }\n    }\n    return 0;", "  // Return the sum of the largest prime's\
    \ digits\n  std::sort(lst.begin(), lst.end());\n  int length = lst.size();\n \
    \ int temp = lst[length-1];\n  int ans = 0;\n  while(temp > 0){\n    int digit\
    \ = temp % 10;\n    ans += digit;\n    temp /= 10;\n  }\n  return ans;", "\tint\
    \ sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] == lst[lst.size()\
    \ - 1]) {\n\t\t\tfor (int j = lst[i]; j > 0; j--) {\n\t\t\t\tint flag = 0;\n\t\
    \t\t\tfor (int k = 2; k <= j / 2; k++) {\n\t\t\t\t\tif (j % k == 0) {\n\t\t\t\t\
    \t\tflag = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag ==\
    \ 0) {\n\t\t\t\t\twhile (j != 0) {\n\t\t\t\t\t\tsum += j % 10;\n\t\t\t\t\t\tj\
    \ /= 10;\n\t\t\t\t\t}\n\t\t\t\t\treturn sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
  "\t//your code here...\n\tlong m = 0;\n\tlong temp;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] == 1) continue;\n\t\tfor (long j = i + 1; j < lst.size();\
    \ j++) {\n\t\t\tif (lst[j] == 1) continue;\n\t\t\tif (lst[i] % lst[j] == 0) {\n\
    \t\t\t\tlst[i] = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = 0; i\
    \ < lst.size(); i++) {\n\t\tif (lst[i] > m) m = lst[i];\n\t}\n\tlong sum = 0;\n\
    \twhile (m != 0) {\n\t\tsum += m % 10;\n\t\tm /= 10;\n\t}\n\treturn sum;", " \
    \ long max = lst[0];\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  long max_prime = max;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (lst[i] != 1 && lst[i] != 0 && lst[i]\
    \ != 2 && lst[i] != 3 && lst[i] != 5 && lst[i] != 7) {\n      for (int j = 2;\
    \ j <= lst[i] / 2; j++) {\n        if (lst[i] % j == 0) {\n          break;\n\
    \        }\n        if (j == lst[i] / 2) {\n          if (lst[i] > max_prime)\
    \ {\n            max_prime = lst[i];\n          }\n        }\n      }\n    }\n\
    \  }\n  long sum = 0;\n  if (max_prime == 1 || max_prime == 0 || max_prime ==\
    \ 2 || max_prime == 3 || max_prime == 5 || max_prime == 7) {\n    return max_prime;\n\
    \  }\n  while (max_prime > 0) {\n    sum += max_prime % 10;\n    max_prime /=\
    \ 10;\n  }\n  return sum;", "\tlong ret = 0;\n\tlong count = 0;\n\tfor (long l\
    \ : lst) {\n\t\tif (l > ret) {\n\t\t\tret = l;\n\t\t}\n\t}\n\twhile (ret > 1)\
    \ {\n\t\tbool got = false;\n\t\tfor (long i = 2; i <= ret; i++) {\n\t\t\tif (ret\
    \ % i == 0) {\n\t\t\t\tret /= i;\n\t\t\t\tgot = true;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif (!got) {\n\t\t\tret = 0;\n\t\t}\n\t}\n\tif (ret == 0) {\n\t\t\
    ret = 1;\n\t}\n\tfor (long i = 0; i < 6; i++) {\n\t\tret *= 10;\n\t}\n\tfor (long\
    \ l : lst) {\n\t\tif (l >= ret) {\n\t\t\tcount += l % 10;\n\t\t\tl /= 10;\n\t\t\
    \tcount += l % 10;\n\t\t\tl /= 10;\n\t\t\tcount += l % 10;\n\t\t\tl /= 10;\n\t\
    \t\tcount += l % 10;\n\t\t\tl /= 10;\n\t\t\tcount += l % 10;\n\t\t\tl /= 10;\n\
    \t\t\tcount += l % 10;\n\t\t}\n\t}\n\treturn count;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        bool isPrime = true;\n\
    \        for (long j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime && lst[i] > largest_prime) {\n            largest_prime\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0)\
    \ {\n        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\
    \    return sum;", "    if(lst.size()<=2) return lst[0];\n    long max=0;\n  \
    \  for(int i=0;i<lst.size();i++){\n        if(lst[i]>max) max=lst[i];\n    }\n\
    \    std::vector<long> prime;\n    prime.push_back(2);\n    for(int i=3;i<=max;i++){\n\
    \        bool flag=true;\n        for(int j=0;j<prime.size();j++){\n         \
    \   if(i%prime[j]==0){\n                flag=false;\n                break;\n\
    \            }\n        }\n        if(flag) prime.push_back(i);\n    }\n    int\
    \ sum=0;\n    for(int i=0;i<prime.size();i++){\n        sum+=prime[i];\n    }\n\
    \    std::cout<<\"Sum of all prime nos in the given range: \"<<sum<<std::endl;\n\
    \    // std::vector<long> nlst;\n    // for(int i=0;i<lst.size();i++){\n    //\
    \     if(lst[i]%prime[prime.size()-1]==0) nlst.push_back(lst[i]);\n    // }\n\
    \    // long sum=0;\n    // for(int i=0;i<nlst.size();i++){\n    //     sum+=nlst[i];\n\
    \    // }\n    // return sum;", "\tlong prime=0;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tbool flag=true;\n\t\tfor(int j=2;j<=sqrt(lst[i]);j++){\n\t\t\tif(lst[i]%j==0){\n\
    \t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==true && lst[i]>prime){\n\
    \t\t\tprime=lst[i];\n\t\t}\n\t}\n\tlong sum=0;\n\twhile(prime>0){\n\t\tsum+=prime%10;\n\
    \t\tprime/=10;\n\t}\n\treturn sum;", "    auto isPrime = [](int n) {\n       \
    \ bool prime = n != 1;\n        for (int i = 2; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                prime = false;\n                break;\n   \
    \         }\n        }\n        return prime;\n    };\n    auto toDigits = [](int\
    \ n) {\n        std::vector<int> digits;\n        while (n > 0) {\n          \
    \  digits.push_back(n % 10);\n            n /= 10;\n        }\n        std::reverse(digits.begin(),\
    \ digits.end());\n        return digits;\n    };\n    auto sum = [](std::vector<int>\
    \ digits) {\n        int res = 0;\n        for (auto digit : digits) {\n     \
    \       res += digit;\n        }\n        return res;\n    };\n    int largestPrime\
    \ = 0;\n    for (auto num : lst) {\n        if (isPrime(num) && num > largestPrime)\
    \ {\n            largestPrime = num;\n        }\n    }\n    return sum(toDigits(largestPrime));",
  "    // Longest prime\n    // Take the largest number in lst\n    // Starting from\
    \ that number, check if it is prime\n    // If prime, return the sum of its digits\n\
    \    // If not prime, check the next number down\n    // Repeat until a prime\
    \ number is found\n    // If no prime number is found, return 0\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    while(true) {\n        if(isPrime(max))\
    \ {\n            long sum = 0;\n            while(max > 0) {\n               \
    \ sum += max % 10;\n                max /= 10;\n            }\n            return\
    \ sum;\n        }\n        max--;\n    }\n    return 0;", "  std::sort(lst.begin(),\
    \ lst.end());\n  return lst[lst.size()-1];", "    int sz = lst.size();\n    for(int\
    \ i = 0; i < sz; i++) {\n        for(int j = i + 1; j < sz; j++) {\n         \
    \   if(lst[i] > lst[j]) {\n                int temp = lst[i];\n              \
    \  lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n\
    \    }\n    // for(int i = 0; i < sz; i++) printf(\"%d \", lst[i]);\n    // printf(\"\
    \\n\");\n    int flag = 0;\n    long ret = -1;\n    int tmp = -1;\n    for(int\
    \ i = sz - 1; i >= 0; i--) {\n        flag = 0;\n        for(int j = 2; j < lst[i];\
    \ j++) {\n            if(lst[i] % j == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n        }\n        if(!flag) {\n          \
    \  // printf(\"%d\\n\", lst[i]);\n            ret = lst[i];\n            break;\n\
    \        }\n    }\n    if(ret == -1) return ret;\n    while(ret) {\n        tmp\
    \ += ret % 10;\n        ret /= 10;\n    }\n    return tmp;", "    std::vector<long>\
    \ prime_numbers;\n    // step 1: create an array of all prime numbers in the range\
    \ of lst\n    for (auto i : lst) {\n        std::vector<long> divisors;\n    \
    \    for (long j = 1; j <= i; j++) {\n            if (i % j == 0) {\n        \
    \        divisors.push_back(j);\n            }\n        }\n        if (divisors.size()\
    \ == 2) {\n            prime_numbers.push_back(i);\n        }\n    }\n    // step\
    \ 2: sort the array of prime numbers\n    std::sort(prime_numbers.begin(), prime_numbers.end());\n\
    \    // step 3: get the last element of the array(the largest prime number)\n\
    \    long largest_prime_number = prime_numbers.back();\n    std::vector<long>\
    \ largest_prime_number_digits;\n    while (largest_prime_number != 0) {\n    \
    \    int digit = largest_prime_number % 10;\n        largest_prime_number_digits.push_back(digit);\n\
    \        largest_prime_number /= 10;\n    }\n    long sum = 0;\n    for (auto\
    \ i : largest_prime_number_digits) {\n        sum += i;\n    }\n    return sum;",
  "    long summ = 0;\n    long maxx = 0;\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 2 ==\
    \ 0){\n            t = t / 2;\n            flag = true;\n        }\n        if(flag){\n\
    \            lst[i] = t;\n        }\n    }\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 3 ==\
    \ 0){\n            t = t / 3;\n            flag = true;\n        }\n        if(flag){\n\
    \            lst[i] = t;\n        }\n    }\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 5 ==\
    \ 0){\n            t = t / 5;\n            flag = true;\n        }\n        if(flag){\n\
    \            lst[i] = t;\n        }\n    }\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 7 ==\
    \ 0){\n            t = t / 7;\n            flag = true;\n        }\n        if(flag){\n\
    \            lst[i] = t;\n        }\n    }\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 11 ==\
    \ 0){\n            t = t / 11;\n            flag = true;\n        }\n        if(flag){\n\
    \            lst[i] = t;\n        }\n    }\n    for(long i=0; i<lst.size(); i++){\n\
    \        long t = lst[i];\n        bool flag = false;\n        while(t % 13 ==\
    \ 0){\n            t = t / 13;\n            flag = true;\n        }\n        if(flag){\n\
    \            l", "    // Prime number checker function.\n    auto isPrime = [](long\
    \ n) {\n        // Corner cases\n        if (n <= 1)  return false;\n        if\
    \ (n <= 3)  return true;\n        // This is checked so that we can skip\n   \
    \     // middle five numbers in below loop\n        if (n%2 == 0 || n%3 == 0)\
    \ return false;\n        for (long i=5; i*i<=n; i=i+6)\n            if (n%i ==\
    \ 0 || n%(i+2) == 0)\n               return false;\n        return true;\n   \
    \ };\n    // Method to find the largest sum of digits.\n    auto largestPrime\
    \ = [&](long n) {\n        long num = 0;\n        for (long i = 0; i < lst.size();\
    \ i++) {\n            if (isPrime(lst[i]) && lst[i] > num)\n                num\
    \ = lst[i];\n        }\n        return num;\n    };\n    // Calculating the sum\
    \ of digits of the largest prime number.\n    return (largestPrime(lst.size())\
    \ > 0) ?\n        std::to_string(largestPrime(lst.size())).length() : 0;", " \
    \   long largest = 0;\n    for(long i = 0; i < lst.size(); i++){\n        long\
    \ temp = lst[i];\n        if(temp <= largest)\n            continue;\n       \
    \ int counter = 0;\n        for(long j = 1; j <= temp; j++){\n            if(temp\
    \ % j == 0)\n                counter++;\n        }\n        if(counter == 2)\n\
    \            largest = temp;\n    }\n    long sum = 0;\n    for(int i = 0; i <\
    \ to_string(largest).length(); i++){\n        sum += to_string(largest)[i] - '0';\n\
    \    }\n    return sum;", "\tlong largest = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] > largest) {\n\t\t\tlargest = lst[i];\n\t\t}\n\t}\n\t\
    for (int i = 2; i < largest; i++) {\n\t\tfor (int j = 2; j < largest; j++) {\n\
    \t\t\tif (largest % j == 0) {\n\t\t\t\tlargest = j;\n\t\t\t}\n\t\t}\n\t}\n\tstd::cout\
    \ << largest << std::endl;\n\t// largest = sqrt(largest);\n\tlong sum = 0;\n\t\
    while (largest != 0) {\n\t\tsum += largest % 10;\n\t\tlargest /= 10;\n\t}\n\t\
    return sum;", "\tlong primeNumber = 0;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tlong number = lst[i];\n\t\tif (number > 10000000) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tbool isPrime = true;\n\t\tfor (int j = 2; j < number; j++) {\n\t\t\t\
    if (number % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif (isPrime) {\n\t\t\tprimeNumber = number;\n\t\t}\n\t}\n\tlong sum = 0;\n\
    \twhile (primeNumber > 0) {\n\t\tlong mod = primeNumber % 10;\n\t\tsum += mod;\n\
    \t\tprimeNumber /= 10;\n\t}\n\treturn sum;", "  long largestPrime = 0;\n  for\
    \ (long i = 0; i < lst.size(); i++) {\n    bool prime = true;\n    for (long j\
    \ = 2; j < lst[i]; j++) {\n      if (lst[i] % j == 0) {\n        prime = false;\n\
    \        break;\n      }\n    }\n    if (prime) {\n      if (lst[i] > largestPrime)\
    \ {\n        largestPrime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while\
    \ (largestPrime > 0) {\n    long lastDigit = largestPrime % 10;\n    sum += lastDigit;\n\
    \    largestPrime /= 10;\n  }\n  return sum;", "  // your code\n  long largestPrime\
    \ = 0;\n  for(auto const& x : lst) {\n    bool isPrime = true;\n    for(int j\
    \ = 2; j <= sqrt(x); j++) {\n      if(x % j == 0) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if(isPrime && x > largestPrime) {\n     \
    \ largestPrime = x;\n    }\n  }\n  std::cout << largestPrime << std::endl;\n \
    \ long primeSum = 0;\n  while(largestPrime > 0) {\n    primeSum += largestPrime\
    \ % 10;\n    largestPrime /= 10;\n  }\n  return primeSum;", "  std::vector<int>\
    \ prime_list = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\
    \ 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\
    \ 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\
    \ 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,\
    \ 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,\
    \ 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\
    \ 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\
    \ 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\
    \ 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953,\
    \ 967, 971, 977, 983, 991, 997};\n  long largest_prime = 0;\n  for (auto item\
    \ : lst) {\n    for (auto prime : prime_list) {\n      if (item == prime) {\n\
    \        if (item > largest_prime) {\n          largest_prime = item;\n      \
    \  }\n      }\n    }\n  }\n  std::cout << largest_prime << std", "  std::sort(lst.begin(),\
    \ lst.end());\n  return lst[lst.size()-1];", "  long l=lst.size();\n  for(long\
    \ i=0;i<l;i++)\n  {\n    if(lst[i]>lst[0])\n    {\n      lst[0]=lst[i];\n    }\n\
    \  }\n  std::vector<long> prime;\n  prime.push_back(2);\n  long x=2;\n  while(x<=lst[0])\n\
    \  {\n    bool isprime=true;\n    for(long i=0;i<prime.size();i++)\n    {\n  \
    \    if(x%prime[i]==0)\n      {\n        isprime=false;\n        break;\n    \
    \  }\n    }\n    if(isprime)\n    {\n      prime.push_back(x);\n    }\n    x=x+1;\n\
    \  }\n  for(long i=0;i<prime.size();i++)\n  {\n    if(prime[i]==lst[0])\n    {\n\
    \      long s=0;\n      while(lst[0]!=0)\n      {\n        s=s+lst[0]%10;\n  \
    \      lst[0]=lst[0]/10;\n      }\n      return s;\n    }\n  }\n  return 0;",
  "  std::set<long> s;\n  int count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n\
    \    if (s.find(lst[i]) == s.end()) {\n      s.insert(lst[i]);\n      count++;\n\
    \    }\n  }\n  return count;", "  std::sort(lst.begin(), lst.end());\n  std::reverse(lst.begin(),\
    \ lst.end());\n  for (int k = 0; k < lst.size(); k++) {\n    std::cout << lst[k]\
    \ << std::endl;\n  }\n  for (int j = 0; j < lst.size(); j++) {\n    long k = 2;\n\
    \    while (k <= lst[j]) {\n      if (lst[j] % k == 0) {\n        break;\n   \
    \   }\n      k++;\n    }\n    if (k > lst[j]) {\n      std::string str = std::to_string(lst[j]);\n\
    \      int sum = 0;\n      for (int i = 0; i < str.length(); i++) {\n        sum\
    \ += (str[i] - '0');\n      }\n      return sum;\n    }\n  }\n  return 0;", "\t\
    int mx = *max_element(lst.begin(), lst.end());\n\tlong temp = 0;\n\tfor (int i\
    \ = mx; i >= 0; i--) {\n\t\tif (find(lst.begin(), lst.end(), i) != lst.end())\
    \ {\n\t\t\tint flag = 0;\n\t\t\tfor (int j = 2; j < i; j++) {\n\t\t\t\tif (i %\
    \ j == 0) {\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    if (flag == 0) {\n\t\t\t\ttemp = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlong\
    \ sum = 0;\n\twhile (temp != 0) {\n\t\tsum += temp % 10;\n\t\ttemp /= 10;\n\t\
    }\n\treturn sum;", "    \n    std::vector<long> primes = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,",
  "    long large = *max_element(lst.begin(), lst.end());\n    if(large <= 1) {\n\
    \        return large;\n    }\n    bool flag[large+1];\n    memset(flag, true,\
    \ sizeof(flag));\n    for(long i = 2; i*i <= large; i++) {\n        if(flag[i])\
    \ {\n            for(long j = i*i; j <= large; j += i) {\n                flag[j]\
    \ = false;\n            }\n        }\n    }\n    long num = 0;\n    for(long i\
    \ = 2; i <= large; i++) {\n        if(flag[i]) {\n            num = i;\n     \
    \   }\n    }\n    long sum = 0;\n    while(num > 0) {\n        sum += num % 10;\n\
    \        num /= 10;\n    }\n    return sum;", "    std::vector<long> prime_numbers;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        bool isPrime = true;\n    \
    \    for(int j = 2; j <= sqrt(lst[i]); j++){\n            if(lst[i] % j == 0){\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if(isPrime && lst[i] > 1){\n            prime_numbers.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(prime_numbers.begin(), prime_numbers.end());\n\
    \    int largest_prime = prime_numbers[prime_numbers.size() - 1];\n    int sum\
    \ = 0;\n    while(largest_prime != 0){\n        sum += largest_prime % 10;\n \
    \       largest_prime /= 10;\n    }\n    return sum;", "  int count = 0;\n  int\
    \ x;\n  std::vector<long> vt;\n  for (int i = 0; i < lst.size(); i++) {\n    if\
    \ (lst[i] <= 1) {\n      continue;\n    }\n    else {\n      if (lst[i] == 2)\
    \ {\n        vt.push_back(lst[i]);\n      }\n      else {\n        for (int j\
    \ = 2; j <= lst[i]/2; j++) {\n          if (lst[i] % j == 0) {\n            count++;\n\
    \            break;\n          }\n        }\n        if (count == 0) {\n     \
    \     vt.push_back(lst[i]);\n        }\n        count = 0;\n      }\n    }\n \
    \ }\n  std::sort(vt.begin(), vt.end());\n  x = vt[vt.size()-1];\n  std::cout <<\
    \ x << std::endl;\n  int sum = 0;\n  while (x > 0) {\n    sum += x % 10;\n   \
    \ x /= 10;\n  }\n  return sum;", "  // Write your code here\n  // We will iterate\
    \ the vector\n  long largest_prime_number = 0;\n  bool flag = false;\n  for(auto\
    \ itr = lst.begin(); itr != lst.end(); itr++)\n  {\n    // Then we check if it\
    \ is a prime number\n    flag = false;\n    for(int i = 2; i <= *itr/2; i++)\n\
    \    {\n      if(*itr % i == 0)\n      {\n        flag = true;\n        break;\n\
    \      }\n    }\n    if(!flag)\n    {\n      // If yes, we check if it is greater\
    \ than the largest prime number\n      if(*itr > largest_prime_number)\n     \
    \ {\n        largest_prime_number = *itr;\n      }\n    }\n  }\n  // Once we are\
    \ done, we add the sum of its digits\n  long sum = 0;\n  while(largest_prime_number\
    \ != 0)\n  {\n    sum += largest_prime_number % 10;\n    largest_prime_number\
    \ /= 10;\n  }\n  return sum;", "    long long ans = 0;\n    bool isPrime = true;\n\
    \    bool isPrime2 = true;\n    long long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    int k = 0;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] % 2 == 0) {\n            k++;\n        }\n    }\n    if (k\
    \ == lst.size()) {\n        return 2;\n    }\n    if (max == 0) {\n        return\
    \ 2;\n    }\n    if (max == 1) {\n        return 2;\n    }\n    if (max == 2)\
    \ {\n        return 2;\n    }\n    for (long long i = max; i > 1; i--) {\n   \
    \     for (long long j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            for (long j = 0; j < lst.size();\
    \ j++) {\n                if (lst[j] == i) {\n                    for (long long\
    \ c = i; c > 0; c /= 10) {\n                        ans += c % 10;\n         \
    \           }\n                    return ans;\n                }\n          \
    \  }\n        }\n        isPrime = true;\n    }\n    return 2;", "\tlong prime\
    \ = -1;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tlong factor = 2;\n\t\t\
    while (lst[i] % factor != 0)\n\t\t\tfactor++;\n\t\tif (factor == lst[i]) {\n\t\
    \t\tif (lst[i] > prime)\n\t\t\t\tprime = lst[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\
    \twhile (prime > 0) {\n\t\tsum += prime % 10;\n\t\tprime /= 10;\n\t}\n\treturn\
    \ sum;", "\t// input : list of integers\n\t// output : largest prime value, sum\
    \ of its digits\n\t// edge cases : empty list\n\t// assumptions : all inputs are\
    \ integers\n\t// approach : brute force\n\t// pseudocode :\n\t// define isPrime(input\
    \ : long)\n\t//\tcheck if input is prime and return bool\n\n\t// define primeDigitSum(input\
    \ : long)\n\t// \tfind sum of all digits and return\n\n\t// define largestPrime(input\
    \ : long)\n\t// \tfind largest prime value and return\n\n\t// define getLargestPrimeDigitSum(input\
    \ : list)\n\t// \tset largestPrime to 0\n\t// \tfor all elements in list\n\t//\
    \ \t\tif largestPrime is less than element\n\t// \t\t\tif isPrime(element) is\
    \ true\n\t// \t\t\t\tset largestPrime to element\n\t// \treturn primeDigitSum(largestPrime)\n\
    \n\treturn 0;", "  std::vector<long> prime_list;\n  std::vector<long> non_prime_list;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] != 0 && lst[i] != 1)\
    \ {\n      for (int j = 2; j <= sqrt(lst[i]); j++) {\n        if (lst[i] % j ==\
    \ 0) {\n          non_prime_list.push_back(lst[i]);\n          break;\n      \
    \  }\n      }\n      if (std::find(non_prime_list.begin(), non_prime_list.end(),\
    \ lst[i]) == non_prime_list.end()) {\n        prime_list.push_back(lst[i]);\n\
    \      }\n    }\n  }\n  long max_prime = *std::max_element(prime_list.begin(),\
    \ prime_list.end());\n  // std::cout << \"max prime: \" << max_prime << std::endl;\n\
    \  int sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime % 10;\n    max_prime\
    \ /= 10;\n  }\n  return sum;", "    // return true if no can be divided by number\n\
    \    auto is_prime = [](long x) {\n        if (x < 2) return false;\n        if\
    \ (x % 2 == 0) return false;\n        for (int i = 3; i < x; i += 2) {\n     \
    \       if (x % i == 0) return false;\n        }\n        return true;\n    };\n\
    \    // get the sum of digits of the value\n    auto sum_digits = [](long x) {\n\
    \        int result = 0;\n        while (x) {\n            result += x % 10;\n\
    \            x /= 10;\n        }\n        return result;\n    };\n    std::vector<long>\
    \ prime_numbers;\n    for (auto e : lst) {\n        if (is_prime(e)) {\n     \
    \       prime_numbers.push_back(e);\n        }\n    }\n    long max_prime = *std::max_element(prime_numbers.begin(),\
    \ prime_numbers.end());\n    return sum_digits(max_prime);", "\t//std::cout <<\
    \ \"skjkasdkd\" << std::endl;\n\tlong result = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] == 0) continue;\n\t\t//std::cout << \"skjkasdkd \" <<\
    \ std::endl;\n\t\tint flag = 0;\n\t\tfor (int j = 2; j <= std::sqrt(lst[i]); j++)\
    \ {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif (flag == 0) {\n\t\t\tresult = lst[i];\n\t\t}\n\t}\n\treturn result;",
  "    \n    auto largestPrime = 0;\n    auto sum = 0;\n    for(auto i = 0; i < lst.size();\
    \ i++) {\n        if(lst[i] == 0 || lst[i] == 1) {\n            continue;\n  \
    \      }\n        auto isPrime = true;\n        for(auto j = 2; j <= sqrt(lst[i]);\
    \ j++) {\n            if(lst[i] % j == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) {\n   \
    \         largestPrime = lst[i];\n        }\n    }\n    while(largestPrime > 0)\
    \ {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n \
    \   return sum;", "  using namespace std;\n  long mx = *max_element(lst.begin(),\
    \ lst.end());\n  long x = mx;\n  while(x > 1) {\n    bool isPrime = true;\n  \
    \  for(long i = 2; i * i <= x; i++) {\n      if(x % i == 0) {\n        isPrime\
    \ = false;\n        break;\n      }\n    }\n    if(isPrime) {\n      break;\n\
    \    }\n    x--;\n  }\n  long ans = 0;\n  while(x > 0) {\n    ans += x % 10;\n\
    \    x /= 10;\n  }\n  return ans;", "  long maxPrime = 0;\n  for (int i = 0; i\
    \ < lst.size(); i++) {\n    long n = lst[i];\n    if (n > 1) {\n      // start\
    \ at two, the first prime number\n      bool isPrime = true;\n      for (int i\
    \ = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n          isPrime = false;\n\
    \          break;\n        }\n      }\n      if (isPrime && n > maxPrime) {\n\
    \        maxPrime = n;\n      }\n    }\n  }\n  int sum = 0;\n  while (maxPrime\
    \ != 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return sum;",
  "    //max element\n    auto it = max_element(lst.begin(), lst.end());\n    //iterator\
    \ to position\n    long max = *it;\n    long c = 0;\n    std::vector<long> vec;\n\
    \    while(max != 0){\n        c = max % 10;\n        vec.push_back(c);\n    \
    \    max = max / 10;\n    }\n    long sum = 0;\n    for(int i = 0; i < vec.size();\
    \ i++){\n        sum += vec[i];\n    }\n    return sum;", "    // your code\n\
    \    long maxNum = *max_element(lst.begin(), lst.end());\n    long count = 0;\n\
    \    for(int i = 2; i <= maxNum; i++){\n        int flag = 0;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                flag =\
    \ 1;\n                break;\n            }\n        }\n        if(flag == 0){\n\
    \            for(int lst_i = 0; lst_i < lst.size(); lst_i++){\n              \
    \  if(lst[lst_i] == i){\n                    count += i;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    long i,j,flag,res=0;\n\
    \    for(i=0;i<lst.size();i++)\n    {\n        flag=0;\n        for(j=2;j<=lst[i]/2;j++)\n\
    \        {\n            if(lst[i]%j==0)\n            {\n                flag=1;\n\
    \                break;\n            }\n        }\n        if(flag==0)\n     \
    \   {\n            res=lst[i];\n        }\n    }\n    long r=0;\n    while(res>0)\n\
    \    {\n        r=r+res%10;\n        res=res/10;\n    }\n    return r;", "   \
    \ long bigNum = 0;\n    long tempNum = 0;\n    long sum = 0;\n    for(auto it\
    \ = lst.begin(); it != lst.end(); it++){\n        tempNum = *it;\n        if(tempNum\
    \ >= bigNum){\n            bigNum = tempNum;\n        }\n    }\n    for(auto it\
    \ = lst.begin(); it != lst.end(); it++){\n        tempNum = *it;\n        if(tempNum\
    \ == bigNum){\n            sum += (tempNum % 10);\n            tempNum /= 10;\n\
    \            sum += (tempNum % 10);\n            tempNum /= 10;\n            sum\
    \ += (tempNum % 10);\n            tempNum /= 10;\n            sum += (tempNum\
    \ % 10);\n            tempNum /= 10;\n            sum += (tempNum % 10);\n   \
    \         tempNum /= 10;\n            sum += (tempNum % 10);\n            tempNum\
    \ /= 10;\n            sum += (tempNum % 10);\n            tempNum /= 10;\n   \
    \         sum += (tempNum % 10);\n            tempNum /= 10;\n            sum\
    \ += (tempNum % 10);\n            tempNum /= 10;\n            sum += (tempNum\
    \ % 10);\n            tempNum /= 10;\n            sum += (tempNum % 10);\n   \
    \         tempNum /= 10;\n            sum += (tempNum % 10);\n            tempNum\
    \ /= 10;\n            sum += (tempNum % 10);\n            tempNum /= 10;\n   \
    \         sum += (tempNum % 10);\n            tempNum /= 10;\n            sum\
    \ += (tempNum % 10);\n            tempNum /= 10;\n            sum += (tempNum\
    \ % 10);\n            tempNum /= 10;\n            sum += (tempNum % 10);\n   \
    \         tempNum /= 10;\n            sum += (tempNum % 10);\n            tempNum\
    \ /= 10;\n            sum += (tempNum % 10);\n            tempNum /= 10;\n   \
    \         sum += (tempNum % 10);\n            tempNum /= 10;\n            sum\
    \ += (tempNum % 10);\n            tempNum /= 10;\n            sum += (tempNum\
    \ % 10);\n            tempNum /= 10", "\tfor (long i = 0; i < lst.size(); i++)\
    \ {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] = 0;\n\t\t}\n\t}\n\tlst.erase(std::remove(lst.begin(),\
    \ lst.end(), 0), lst.end());\n\tif (lst.size() == 0) {\n\t\treturn 2;\n\t}\n\t\
    long top = *std::max_element(lst.begin(), lst.end());\n\tint coeff = 2;\n\tint\
    \ temp = 2;\n\tbool found = false;\n\tfor (long i = 2; i <= top; i++) {\n\t\t\
    found = false;\n\t\ttemp = 2;\n\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\
    \t\tif (i % lst[j] == 0) {\n\t\t\t\tcoeff = coeff * temp;\n\t\t\t\tfound = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp++;\n\t\t}\n\t\tif (!found) {\n\t\t\tcoeff\
    \ = coeff * i;\n\t\t}\n\t}\n\treturn coeff;", "  long largest = -9999999999999;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > largest)\n      largest\
    \ = lst[i];\n  }\n  for(int i = 0; i < lst.size(); i++){\n    for(int j = 2; j\
    \ < lst[i]; j++){\n      if(lst[i] % j == 0){\n        lst[i] = -1;\n        break;\n\
    \      }\n    }\n  }\n  long largestprime = -99999999999999;\n  for(int i = 0;\
    \ i < lst.size(); i++){\n    if(lst[i] > largestprime)\n      largestprime = lst[i];\n\
    \  }\n  if(largestprime < 0)\n    return -1;\n  int counter = 0;\n  int temp =\
    \ largestprime;\n  while(temp != 0){\n    temp /= 10;\n    counter++;\n  }\n \
    \ long largestprimecopy = largestprime;\n  long sum = 0;\n  for(int i = 0; i <\
    \ counter; i++){\n    sum += largestprimecopy % 10;\n    largestprimecopy /= 10;\n\
    \  }\n  return sum;", "    long n = lst.size();\n    std::vector<long>  s(n);\n\
    \    std::copy(lst.begin(), lst.end(), s.begin());\n    sort(s.begin(), s.end());\n\
    \    std::vector<long>::iterator ip;\n    ip = std::unique(s.begin(), s.end());\n\
    \    s.resize(std::distance(s.begin(), ip));\n    int i = s.size() - 1;\n    while\
    \ (i >= 0) {\n        if (s[i] > 1) {\n            long l = 0;\n            while\
    \ (s[i] != 0) {\n                l += s[i] % 10;\n                s[i] /= 10;\n\
    \            }\n            if (l == s[i]) {\n                break;\n       \
    \     }\n        }\n        i--;\n    }\n    return s[i];", "    //    assert(\
    \ 0 );\n    //    return 0;", "  // std::vector<int>::iterator it;\n  // std::sort(lst.begin(),\
    \ lst.end());\n  // std::sort(lst.begin(), lst.end(), [](int x, int y) { return\
    \ x > y; });\n  // it = std::find_if(lst.begin(), lst.end(), [](int x) { return\
    \ x % 2 == 0; });\n  // std::cout << *it << '\\n';\n  long largest = 0;\n  long\
    \ temp;\n  for (int i = 0; i < lst.size(); i++) {\n    temp = lst[i];\n    while\
    \ (temp > 0) {\n      if (temp > largest)\n        largest = temp;\n      temp\
    \ /= 10;\n    }\n  }\n  temp = largest;\n  int sum = 0;\n  while (temp > 0) {\n\
    \    sum += temp % 10;\n    temp /= 10;\n  }\n  return sum;", "  long a = 0;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    a += lst[i];\n  }\n  return a;",
  "  int sum = 0;\n  long max = *std::max_element(lst.begin(), lst.end());\n  while\
    \ (max > 0) {\n    sum += max % 10;\n    max /= 10;\n  }\n  return sum;", "\t\
    //cout << \"entered\" << endl;\n\tif (lst.size() == 0)\n\t\treturn 0;\n\tlong\
    \ a = -1;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tlong b = lst[i];\n\t\t\
    int flag = 0;\n\t\tfor (int j = 2; j <= b / 2; j++) {\n\t\t\tif (b % j == 0) {\n\
    \t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\t\
    a = max(a, b);\n\t\t}\n\t}\n\t//cout << \"a=\" << a << endl;\n\tif (a == -1)\n\
    \t\treturn -1;\n\tlong ans = 0;\n\twhile (a != 0) {\n\t\tlong b = a % 10;\n\t\t\
    ans += b;\n\t\ta /= 10;\n\t}\n\treturn ans;", "    // The largest prime value\
    \ should be less than 1000.\n    // You need to find the largest prime value in\
    \ lst.\n    // But first you need to find if the number is prime\n    std::vector<long>\
    \ primes;\n    // Traverse through all numbers from 2 to max element of lst\n\
    \    for (int i = 2; i <= *std::max_element(lst.begin(), lst.end()); i++) {\n\
    \        bool isPrime = true;\n        // Check if i is a prime number\n     \
    \   for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     // If number is prime then add it to list of primes\n        if (isPrime)\n\
    \            primes.push_back(i);\n    }\n    // Now that we have all the primes,\
    \ find the largest one in lst\n    long largestPrime = 0;\n    for (int i = 0;\
    \ i < primes.size(); i++) {\n        if (std::find(lst.begin(), lst.end(), primes[i])\
    \ != lst.end()) {\n            largestPrime = primes[i];\n        }\n    }\n \
    \   // Sum the digits of largest prime\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        int rem = largestPrime % 10;\n        sum += rem;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    // Write your code here\n    std::vector<long>\
    \ res;\n    for(long i=0;i<lst.size();i++){\n        if(lst[i]%2!=0)\n       \
    \     res.push_back(lst[i]);\n    }\n    for(long i=0;i<res.size();i++){\n   \
    \     long j=3;\n        while(j<=sqrt(res[i])){\n            if(res[i]%j==0){\n\
    \                res.erase(res.begin()+i);\n                break;\n         \
    \   }\n            j+=2;\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    long sum=0;\n    long digit=0;\n    while(res[res.size()-1]!=0){\n      \
    \  digit=res[res.size()-1]%10;\n        sum+=digit;\n        res[res.size()-1]=res[res.size()-1]/10;\n\
    \    }\n    return sum;", "  long maxPrime = 2;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    long num = lst[i];\n    if (num > maxPrime) {\n      bool isPrime\
    \ = true;\n      for (long j = 2; j <= num / 2; j++) {\n        if (num % j ==\
    \ 0) {\n          isPrime = false;\n          break;\n        }\n      }\n   \
    \   if (isPrime) {\n        maxPrime = num;\n      }\n    }\n  }\n  int count\
    \ = 0;\n  while (maxPrime) {\n    count += maxPrime % 10;\n    maxPrime /= 10;\n\
    \  }\n  return count;", "    // find largest prime number\n    long largestPrime\
    \ = 0;\n    for (auto number : lst) {\n        long largestNonPrime = number;\n\
    \        for (long i = 2; i <= number; i++) {\n            if (number % i == 0)\
    \ {\n                largestNonPrime = i;\n                break;\n          \
    \  }\n        }\n        if (largestNonPrime == number) {\n            largestPrime\
    \ = number;\n        }\n    }\n    long sumOfLargestPrime = 0;\n    while (largestPrime\
    \ > 0) {\n        sumOfLargestPrime += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sumOfLargestPrime;", "  long mx=-1;\n  int n=lst.size();\n\
    \  for(int i=0;i<n;i++){\n    int flag=0;\n    if(lst[i]==0)continue;\n    if(lst[i]==1)continue;\n\
    \    for(int j=2;j<=sqrt(lst[i]);j++){\n      if(lst[i]%j==0){\n        flag=1;\n\
    \        break;\n      }\n    }\n    if(flag==0){\n      if(lst[i]>mx)mx=lst[i];\n\
    \    }\n  }\n  if(mx==-1)return 0;\n  std::vector<int>v;\n  while(mx>0){\n   \
    \ v.push_back(mx%10);\n    mx/=10;\n  }\n  int s=0;\n  for(int i=0;i<v.size();i++){\n\
    \    s+=v[i];\n  }\n  return s;", "  \n  return 0;", "    auto l = std::max_element(lst.begin(),\
    \ lst.end());\n    std::cout << \"max \" << *l << std::endl;\n    while (true)\
    \ {\n        bool q = true;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            if (lst[i] % *l == 0)\n                q = false;\n        }\n  \
    \      if (q)\n            break;\n        *l -= 1;\n    }\n    long sum = 0;\n\
    \    for (int i = 0; i < 10; i++) {\n        long d = *l % 10;\n        sum +=\
    \ d;\n        *l = *l / 10;\n    }\n    return sum;", "  long largestPrime = 0;\n\
    \  long i = 2;\n  while (i < *max_element(lst.begin(), lst.end()))\n  {\n    if\
    \ (all_of(lst.begin(), lst.end(), [i](int n) {return n % i != 0; }))\n    {\n\
    \      largestPrime = i;\n    }\n    i++;\n  }\n  long sum = 0;\n  for (; largestPrime\
    \ > 0; largestPrime /= 10)\n  {\n    sum += largestPrime % 10;\n  }\n  return\
    \ sum;", "    // for (int i = 0; i < lst.size(); i++)\n    // {\n    //     std::cout\
    \ << lst[i] << \" \";\n    // }\n    // std::cout << std::endl;\n    long n =\
    \ 1;\n    long max_prime = 0;\n    long prime_sum = 0;\n    while (lst.size()\
    \ > 0)\n    {\n        n++;\n        int i = 0;\n        while (i < lst.size())\n\
    \        {\n            if (lst[i] % n == 0)\n            {\n                lst.erase(lst.begin()\
    \ + i);\n            }\n            else\n            {\n                i++;\n\
    \            }\n        }\n        if (lst.size() > 0)\n        {\n          \
    \  max_prime = n;\n        }\n    }\n    while (max_prime > 0)\n    {\n      \
    \  prime_sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return prime_sum;",
  '    return lst[0];', "    long largestPrime = 1;\n    for (auto it = lst.begin();\
    \ it != lst.end(); ++it) {\n        for (long i = 2; i <= *it; ++i) {\n      \
    \      if (*it % i == 0) {\n                if (*it == i) {\n                \
    \    if (i > largestPrime) {\n                        largestPrime = i;\n    \
    \                }\n                }\n                *it /= i;\n           \
    \     i = 1;\n            }\n        }\n    }\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;", "\tlong i, j, n;\n\tlong sum = 0;\n\tlong temp;\n\tn =\
    \ lst.size();\n\t// cout << \"n \" << n << endl;\n\tlong max = lst[0];\n\tfor\
    \ (i = 0; i < n; i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\
    \t}\n\t// cout << \"max \" << max << endl;\n\tfor (i = 2; i < max; i++) {\n\t\t\
    temp = 0;\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (lst[j] % i == 0) {\n\t\t\t\
    \ttemp++;\n\t\t\t}\n\t\t}\n\t\tif (temp == n) {\n\t\t\twhile (i > 0) {\n\t\t\t\
    \tsum += i % 10;\n\t\t\t\ti /= 10;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ sum;", "    // Good Luck!\n    long l,i,j,k,prime[1000],flag,t;\n    for(l=0;l<lst.size();l++)\n\
    \    {\n        std::vector<long> temp,temp1;\n        for(i=2;i<lst[l];i++)\n\
    \        {\n          flag=0;\n          for(j=2;j<=i/2;j++)\n          {\n  \
    \          if(i%j==0)\n            {\n              flag=1;\n              break;\n\
    \            }\n          }\n          if(flag==0)\n          {\n            temp.push_back(i);\n\
    \          }\n        }\n        for(k=0;k<temp.size();k++)\n        {\n     \
    \     if(lst[l]%temp[k]==0)\n          {\n            temp1.push_back(temp[k]);\n\
    \          }\n        }\n        prime[l]=*max_element(temp1.begin(),temp1.end());\n\
    \        temp.clear();\n        temp1.clear();\n    }\n    long max=*max_element(prime,prime+lst.size());\n\
    \    long sum=0;\n    while(max>0)\n    {\n      t=max%10;\n      sum=sum+t;\n\
    \      max=max/10;\n    }\n    return sum;", "\tstd::vector<long> vs;\n\tfor (auto\
    \ e : lst) {\n\t\tint k = e;\n\t\tif (k == 0) continue;\n\t\tint cnt = 0;\n\t\t\
    for (int j = 1; j <= k; j++) {\n\t\t\tif (k % j == 0) cnt++;\n\t\t}\n\t\tif (cnt\
    \ == 2) vs.push_back(k);\n\t}\n\tsort(vs.begin(), vs.end());\n\tlong ret = 0;\n\
    \tfor (auto e : vs.back()) {\n\t\tret += e - '0';\n\t}\n\treturn ret;", "    int\
    \ t=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>t){\n          \
    \  t=lst[i];\n        }\n    }\n    int x=0;\n    for(int i=2;i<=t;i++){\n   \
    \     int c=0;\n        for(int j=2;j<=t;j++){\n            if(i%j==0){\n    \
    \            c++;\n            }\n        }\n        if(c==1){\n            x=i;\n\
    \        }\n    }\n    std::vector<int> a;\n    int o=x;\n    while(o!=0){\n \
    \       a.push_back(o%10);\n        o=o/10;\n    }\n    int s=0;\n    for(int\
    \ i=0;i<a.size();i++){\n        s=s+a[i];\n    }\n    return s;", "    long largestPrime(long\
    \ x);\n    long sumOfDigits(long x);\n    long primeNumber = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++){\n        if(largestPrime(lst[i]) > primeNumber){\n\
    \            primeNumber = largestPrime(lst[i]);\n        }\n    }\n    return\
    \ sumOfDigits(primeNumber);", "  long big = 0;\n  long val = 0;\n  for (auto n\
    \ : lst) {\n    if (n > big) {\n      big = n;\n    }\n  }\n  for (long i = 2;\
    \ i <= big; i++) {\n    bool isPrime = true;\n    for (long j = 2; j < i; j++)\
    \ {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n     \
    \ }\n    }\n    if (isPrime) {\n      val = i;\n    }\n  }\n  // std::cout <<\
    \ val << std::endl;\n  std::vector<long> arr;\n  while (val != 0) {\n    long\
    \ dig = val % 10;\n    arr.push_back(dig);\n    val /= 10;\n  }\n  return std::accumulate(arr.begin(),\
    \ arr.end(), 0);", "    if(lst.size()<1)\n        return -1;\n    long max = lst[0];\n\
    \    for(int i=1;i<lst.size();i++)\n        if(lst[i]>max)\n            max =\
    \ lst[i];\n    // cout<<max<<endl;\n    int number = max;\n    int largestPrime\
    \ = 0;\n    while(number != 0){\n        int prime = 0;\n        bool flag = true;\n\
    \        for(int i=2;i<number;i++){\n            if(number%i == 0){\n        \
    \        flag = false;\n                break;\n            }\n        }\n   \
    \     if(flag){\n            prime = number;\n            if(prime > largestPrime)\n\
    \                largestPrime = prime;\n        }\n        number--;\n    }\n\
    \    // cout<<largestPrime<<endl;\n    int digitSum = 0;\n    while(largestPrime\
    \ > 0){\n        digitSum += largestPrime%10;\n        largestPrime /= 10;\n \
    \   }\n    return digitSum;", '    return 0;', "    // loop through every number\
    \ in the vector\n    // if it is a prime number, return the sum of its digits\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        // test if number is prime\n\
    \        if (lst[i] == 1) {\n            continue;\n        }\n        // if it\
    \ is a prime number, test if it's digits sum to a prime number\n        for (int\
    \ j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n            \
    \    break;\n            }\n            // if it is, return the sum of those digits\n\
    \            if (j == lst[i] - 1) {\n                // create a temp var to store\
    \ the number\n                long num = lst[i];\n                // intialize\
    \ a var to store the sum of the digits\n                long digitSum = 0;\n \
    \               // loop through every digit of the number and add it to the sum\n\
    \                while (num != 0) {\n                    int lastDigit = num %\
    \ 10;\n                    digitSum += lastDigit;\n                    num /=\
    \ 10;\n                }\n                // test if the digit sum is a prime\
    \ number\n                for (int k = 2; k < digitSum; k++) {\n             \
    \       if (digitSum % k == 0) {\n                        break;\n           \
    \         }\n                    // if it is, return the sum of its digits\n \
    \                   if (k == digitSum - 1) {\n                        return digitSum;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return 0;", "  std::vector<long> a;\n  int ans = 0;\n  for(auto i : lst) {\n\
    \    while(i) {\n      a.push_back(i%10);\n      i /= 10;\n    }\n  }\n  long\
    \ out = 0;\n  for(auto i : a) {\n    out = std::max(out, i);\n  }\n  for(auto\
    \ i : a) {\n    if(i == out) {\n      ans += i;\n    }\n  }\n  return ans;", "\t\
    long lp = 0;\n\tfor (auto x : lst) {\n\t\tif (x == 1)\n\t\t\tcontinue;\n\t\tlong\
    \ tmp = x;\n\t\tfor (int i = 2; i < tmp; i++) {\n\t\t\tif (tmp % i == 0) {\n\t\
    \t\t\ttmp /= i;\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t}\n\t\tif (tmp > lp)\n\t\t\tlp =\
    \ tmp;\n\t}\n\tlong ans = 0;\n\twhile (lp > 0) {\n\t\tans += lp % 10;\n\t\tlp\
    \ /= 10;\n\t}\n\treturn ans;", "    long n= lst.size();\n    std::vector<long>\
    \ primes;\n    long m=*max_element(lst.begin(),lst.end());\n    long arr[m+1];\n\
    \    for(long i=0;i<=m;i++)\n        arr[i]=0;\n    for(long i=2;i<=m;i++)\n \
    \   {\n        if(arr[i]==0)\n        {\n            primes.push_back(i);\n  \
    \          for(long j=i*i;j<=m;j+=i)\n                arr[j]=1;\n        }\n \
    \   }\n    std::vector<long> v;\n    for(long i=0;i<n;i++)\n    {\n        if(std::find(primes.begin(),primes.end(),lst[i])!=primes.end())\n\
    \            v.push_back(lst[i]);\n    }\n    long sum=0;\n    if(v.size()>0)\n\
    \    {\n        long m=*max_element(v.begin(),v.end());\n        while(m>0)\n\
    \        {\n            sum+=m%10;\n            m/=10;\n        }\n    }\n   \
    \ return sum;", "    \n    long max_prime_num = 0;\n    // check all num are prime?\n\
    \    // if yes, return sum all num\n    // else, get largest prime num\n    //\
    \ return sum of largest prime num\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        // check prime\n        int flag = 0;\n        for (int j = 2; j <= lst[i]/2;\
    \ j++) {\n            if (lst[i] % j == 0) {\n                flag = 1;\n    \
    \            break;\n            }\n        }\n        if (flag == 0) {\n    \
    \        if (lst[i] > max_prime_num) {\n                max_prime_num = lst[i];\n\
    \            }\n        }\n    }\n    // sum digit max_prime_num\n    long sum_digit\
    \ = 0;\n    while (max_prime_num != 0) {\n        sum_digit += max_prime_num %\
    \ 10;\n        max_prime_num /= 10;\n    }\n    return sum_digit;", "    if(lst.size()\
    \ < 0) return 0;\n    long sum = 0;\n    sort(lst.begin(), lst.end());\n    for(auto\
    \ a : lst) {\n        for(auto b : lst) {\n            if(a*b > lst.back()) {\n\
    \                return sum;\n            }\n            if(a*b < lst.back())\
    \ {\n                sum += a*b;\n            }\n        }\n    }\n    return\
    \ sum;", "\t\tlong st, en, i, j, k, sum = 0, count = 0, num;\n\t\tstd::sort(lst.begin(),\
    \ lst.end());\n\t\tfor (i = lst.size() - 1; i >= 0; i--) {\n\t\t\t\tif (lst[i]\
    \ == 1) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnum = lst[i];\n\t\t\t\tfor\
    \ (j = 2; j < num; j++) {\n\t\t\t\t\t\tif (num % j == 0) {\n\t\t\t\t\t\t\t\tcount++;\n\
    \t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 0) {\n\t\
    \t\t\t\t\twhile (num > 0) {\n\t\t\t\t\t\t\t\tst = num % 10;\n\t\t\t\t\t\t\t\t\
    sum = sum + st;\n\t\t\t\t\t\t\t\tnum = num / 10;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\
    return sum;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t}\n\t\treturn 1;", "    long maxPrime\
    \ = 0;\n    for (long i : lst) {\n        if (i > maxPrime && isPrime(i)) {\n\
    \            maxPrime = i;\n        }\n    }\n    return sumDigits(maxPrime);",
  "    int l = lst.size();\n    long max = lst[0];\n    for(int i = 1; i < l; i++)\n\
    \    {\n        if(lst[i] > max)\n            max = lst[i];\n    }\n    // std::cout\
    \ << max << \"\\n\";\n    int size = std::to_string(max).length();\n    long *ar\
    \ = new long[max+1];\n    std::memset(ar, 0, sizeof(ar));\n    // std::cout <<\
    \ ar[0] << \"\\n\";\n    long res = 0;\n    for(int i = 2; i < size; i++)\n  \
    \  {\n        for(int j = 0; j < l; j++)\n        {\n            if(lst[j]%i ==\
    \ 0)\n            {\n                // std::cout << lst[j] << \" \";\n      \
    \          res += lst[j];\n            }\n        }\n        // std::cout << \"\
    \\n\";\n    }\n    return res;", "\treturn 0;", "  long largest = 0;\n  long sum\
    \ = 0;\n  for (auto i = lst.begin(); i != lst.end(); i++) {\n    if (*i > largest)\
    \ {\n      largest = *i;\n    }\n  }\n  while (largest) {\n    if (largest ==\
    \ 1) {\n      return sum;\n    }\n    if (largest % 2 == 0) {\n      largest /=\
    \ 2;\n    } else if (largest % 3 == 0) {\n      largest /= 3;\n    } else if (largest\
    \ % 5 == 0) {\n      largest /= 5;\n    } else if (largest % 7 == 0) {\n     \
    \ largest /= 7;\n    } else if (largest % 11 == 0) {\n      largest /= 11;\n \
    \   } else if (largest % 13 == 0) {\n      largest /= 13;\n    } else if (largest\
    \ % 17 == 0) {\n      largest /= 17;\n    } else if (largest % 19 == 0) {\n  \
    \    largest /= 19;\n    } else if (largest % 23 == 0) {\n      largest /= 23;\n\
    \    } else if (largest % 29 == 0) {\n      largest /= 29;\n    } else if (largest\
    \ % 31 == 0) {\n      largest /= 31;\n    } else if (largest % 37 == 0) {\n  \
    \    largest /= 37;\n    } else if (largest % 41 == 0) {\n      largest /= 41;\n\
    \    } else if (largest % 43 == 0) {\n      largest /= 43;\n    } else if (largest\
    \ % 47 == 0) {\n      largest /= 47;\n    } else if (largest % 53 == 0) {\n  \
    \    largest /= 53;\n    } else if (largest % 59 == 0) {\n      largest /= 59;\n\
    \    } else if (largest % 61 == 0) {\n      largest /= 61;\n    } else if (largest\
    \ % 67 == 0) {\n      largest /= 67;\n    } else if (largest % 71 == 0) {\n  \
    \    largest /= 71;\n    } else if (largest % 73 == 0) {\n      largest /= 73;\n\
    \    } else if (largest % 79 == 0)", "  long prime = 0;\n  std::vector<long> primes;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    bool isPrime = true;\n    long\
    \ num = lst[i];\n    if (num == 0 || num == 1)\n      continue;\n    if (num ==\
    \ 2) {\n      primes.push_back(num);\n      continue;\n    }\n    for (int j =\
    \ 2; j < num / 2; j++) {\n      if (num % j == 0) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if (isPrime)\n      primes.push_back(num);\n\
    \  }\n  std::sort(primes.begin(), primes.end());\n  prime = primes[primes.size()\
    \ - 1];\n  int sum = 0;\n  while (prime > 0) {\n    sum += prime % 10;\n    prime\
    \ /= 10;\n  }\n  return sum;", "    long larg=0;\n    std::sort(lst.begin(),lst.end());\n\
    \    for(long i=lst.size()-1;i>=0;i--){\n        if(lst[i]%2==0){\n          \
    \  continue;\n        }\n        else{\n            if(lst[i]==1)\n          \
    \      break;\n            else{\n                long flag=0;\n             \
    \   for(long j=3;j<=sqrt(lst[i]);j+=2){\n                    if(lst[i]%j==0){\n\
    \                        flag=1;\n                        break;\n           \
    \         }\n                }\n                if(flag==0){\n               \
    \     larg=lst[i];\n                    break;\n                }\n          \
    \  }\n        }\n    }\n    long sum=0;\n    while(larg>0){\n        sum+=larg%10;\n\
    \        larg/=10;\n    }\n    return sum;", "    long p = 0;\n    int cnt = 0;\n\
    \    long sum = 0;\n    int i = 0;\n    for(int j = 0; j < lst.size(); j++){\n\
    \        for(i = 2; i <= lst[j]/2; i++){\n            if(lst[j] % i == 0){\n \
    \               cnt++;\n                break;\n            }\n        }\n   \
    \     if(cnt == 0 && lst[j] > p){\n            p = lst[j];\n        }\n      \
    \  cnt = 0;\n    }\n    std::cout << p << std::endl;\n    while(p != 0){\n   \
    \     sum += p % 10;\n        p /= 10;\n    }\n    return sum;", "\tlong max_prime\
    \ = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tbool prime = true;\n\t\t\
    if (lst[i] < 2) {\n\t\t\tprime = false;\n\t\t}\n\t\tif (lst[i] > 2) {\n\t\t\t\
    for (long j = 2; j <= sqrt(lst[i]); j++) {\n\t\t\t\tif (lst[i] % j == 0) {\n\t\
    \t\t\t\tprime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (prime\
    \ && lst[i] > max_prime) {\n\t\t\tmax_prime = lst[i];\n\t\t}\n\t}\n\tif (max_prime\
    \ < 10) {\n\t\treturn max_prime;\n\t}\n\tlong sum = 0;\n\twhile (max_prime > 0)\
    \ {\n\t\tsum += max_prime % 10;\n\t\tmax_prime /= 10;\n\t}\n\treturn sum;", "\t\
    //find the prime factors of all elements in the list\n\tstd::vector<long> primes;\n\
    \tfor(int x = 0; x < lst.size(); x++){\n\t\tprimes.push_back(lst[x]);\n\t\tfor(int\
    \ i = 2; i < lst[x]; i++){\n\t\t\tif(lst[x] % i == 0){\n\t\t\t\tif(std::find(primes.begin(),\
    \ primes.end(), i) == primes.end()){\n\t\t\t\t\tprimes.push_back(i);\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\tfor(int x = 0; x < primes.size(); x++){\n\t\tstd::cout\
    \ << primes[x] << \" \";\n\t}\n\tstd::cout << std::endl;\n\tint max = 0;\n\tfor(int\
    \ x = 0; x < primes.size(); x++){\n\t\tif(primes[x] > max){\n\t\t\tmax = primes[x];\n\
    \t\t}\n\t}\n\tstd::cout << max << std::endl;\n\tint sum = 0;\n\tint temp = max;\n\
    \twhile(temp > 0){\n\t\tsum += temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn sum;",
  "    // Write your code here\n    //int s = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    //int ss = 0;\n    int t = 0;\n    int q = 0;\n    int w\
    \ = 0;\n    //int x = 0;\n    int e = 0;\n    int r = 0;\n    int y = 0;\n   \
    \ //int u = 0;\n    int i = 0;\n    int p = 0;\n    //int j = 0;\n    int k =\
    \ 0;\n    int l = 0;\n    int d = 0;\n    //int m = 0;\n    int o = 0;\n    //int\
    \ z = 0;\n    //int bb = 0;\n    int b1 = 0;\n    int b2 = 0;\n    int b3 = 0;\n\
    \    int b4 = 0;\n    int b5 = 0;\n    int b6 = 0;\n    int b7 = 0;\n    int b8\
    \ = 0;\n    int b9 = 0;\n    int b10 = 0;\n    int b11 = 0;\n    int b12 = 0;\n\
    \    int b13 = 0;\n    int b14 = 0;\n    int b15 = 0;\n    int b16 = 0;\n    int\
    \ b17 = 0;\n    int b18 = 0;\n    int b19 = 0;\n    int b20 = 0;\n    int b21\
    \ = 0;\n    int b22 = 0;\n    int b23 = 0;\n    int b24 = 0;\n    int b25 = 0;\n\
    \    int b26 = 0;\n    int b27 = 0;\n    int b28 = 0;\n    int b29 = 0;\n    int\
    \ b30 = 0;\n    int b31 = 0;\n    int b32 = 0;\n    int b33 = 0;\n    int b34\
    \ = 0;\n    int b35 = 0;\n    int b36 = 0;\n    int b37 = 0;\n    int b38 = 0;\n\
    \    int b39 = 0;\n    int b40 = 0;\n    int b41 = 0;\n    int b42 = 0", "  //\
    \ Your code here\n  long res = 0;\n  for(long i = 0; i < lst.size(); i++){\n \
    \   int coun = 0;\n    for(long j = 1; j <= lst[i]; j++){\n      if(lst[i] % j\
    \ == 0){\n        coun++;\n      }\n    }\n    if(coun == 2){\n      while(lst[i]\
    \ > 0){\n        res += lst[i] % 10;\n        lst[i] /= 10;\n      }\n    }\n\
    \  }\n  return res;", "  bool prime;\n  long max=0;\n  int sz=lst.size();\n  for(int\
    \ i=0;i<sz;i++){\n    prime=true;\n    if(lst[i]>=2){\n      for(int j=2;j<lst[i];j++){\n\
    \        if(lst[i]%j==0){\n          prime=false;\n          break;\n        }\n\
    \      }\n      if(prime && lst[i]>max){\n        max=lst[i];\n      }\n    }\n\
    \  }\n  int sum=0;\n  while(max>0){\n    sum+=max%10;\n    max/=10;\n  }\n  return\
    \ sum;", "    long max_prime_num = *max_element(lst.begin(), lst.end());\n   \
    \ std::vector<long> primes;\n    for (long i = 2; i <= max_prime_num; i++) {\n\
    \        bool is_prime = true;\n        for (long j = 2; j <= sqrt(i); j++) {\n\
    \            if (i % j == 0) {\n                is_prime = false;\n          \
    \      break;\n            }\n        }\n        if (is_prime) {\n           \
    \ primes.push_back(i);\n        }\n    }\n    max_prime_num = *max_element(primes.begin(),\
    \ primes.end());\n    return std::accumulate(std::to_string(max_prime_num).begin(),\
    \ std::to_string(max_prime_num).end(), 0, std::plus<long>());", "  long max =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n    \
    \  max = lst[i];\n    }\n  }\n  int prime = 0;\n  for (int i = max; i > 0; i--)\
    \ {\n    int count = 0;\n    for (int j = 1; j <= i; j++) {\n      if (i % j ==\
    \ 0) {\n        count++;\n      }\n    }\n    if (count == 2) {\n      prime =\
    \ i;\n      break;\n    }\n  }\n  int digit = 0;\n  while (prime != 0) {\n   \
    \ digit += prime % 10;\n    prime /= 10;\n  }\n  return digit;", "\tstd::sort(lst.begin(),\
    \ lst.end());\n\tint x = lst.size() - 1;\n\t// std::cout << lst[x] << \"\\n\"\
    ;\n\t// int y = lst[x];\n\t// int sum = 0;\n\t// while (y > 0) {\n\t// \tint r\
    \ = y % 10;\n\t// \tsum = sum + r;\n\t// \ty = y / 10;\n\t// }\n\t// return sum;\n\
    \tint y = lst[x];\n\tint sum = 0;\n\twhile (y > 0) {\n\t\tint r = y % 10;\n\t\t\
    sum = sum + r;\n\t\ty = y / 10;\n\t}\n\treturn sum;", "\tlong largestPrime = -1;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tlong num = lst[i];\n\t\tif (num\
    \ == 1) continue;\n\t\tbool isPrime = true;\n\t\tfor (long j = 2; j <= sqrt(num);\
    \ j++) {\n\t\t\tif (num % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tlargestPrime = std::max(largestPrime,\
    \ num);\n\t\t}\n\t}\n\tif (largestPrime == -1) {\n\t\treturn 0;\n\t}\n\tlong sum\
    \ = 0;\n\twhile (largestPrime) {\n\t\tsum += largestPrime % 10;\n\t\tlargestPrime\
    \ /= 10;\n\t}\n\treturn sum;", "  long maxp = 0;\n  long sum = 0;\n  std::sort(lst.begin(),\
    \ lst.end());\n  if(lst[lst.size()-1] < 2) {\n    return sum;\n  }\n  for(int\
    \ i = 0; i < lst.size(); i++) {\n    if(lst[i] > 1) {\n      maxp = lst[i];\n\
    \      break;\n    }\n  }\n  for(int i = 2; i <= (int)sqrt(maxp); i++) {\n   \
    \ while(maxp % i == 0) {\n      maxp /= i;\n    }\n  }\n  while(maxp > 0) {\n\
    \    sum += maxp % 10;\n    maxp /= 10;\n  }\n  return sum;", "  auto comp = [](auto\
    \ a, auto b) { return std::abs(a) < std::abs(b); };\n  std::sort(lst.begin(),\
    \ lst.end(), comp);\n  for (auto i : lst) {\n    if (i <= 1) continue;\n    bool\
    \ is_prime = true;\n    for (auto j = 2; j < i; ++j) {\n      if (i % j == 0)\
    \ {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime)\
    \ {\n      int sum = 0;\n      for (int x = std::abs(i); x > 0; x /= 10) {\n \
    \       sum += x % 10;\n      }\n      return sum;\n    }\n  }\n  return 0;",
  "  long c=0;\n  bool flag;\n  long k,g;\n  std::sort(lst.begin(),lst.end());\n \
    \ for(long i=lst.size()-1;i>=0;i--)\n  {\n    k=lst[i];\n    if(k>1)\n    {\n\
    \      for(long j=2;j<=k/2;j++)\n      {\n        if(k%j==0)\n        {\n    \
    \      flag=false;\n          break;\n        }\n        else\n        {\n   \
    \       flag=true;\n        }\n      }\n      if(flag==true)\n      {\n      \
    \  g=k;\n        while(g!=0)\n        {\n          c=c+g%10;\n          g=g/10;\n\
    \        }\n        break;\n      }\n    }\n  }\n  return c;", "\tif (lst.size()\
    \ == 0)\n\t\treturn 0;\n\tfor (int i = lst.size() - 1; i >= 0; i--) {\n\t\tif\
    \ (lst[i] == 0)\n\t\t\tcontinue;\n\t\tint flag = 1;\n\t\tfor (int j = 2; j <=\
    \ sqrt(lst[i]); j++) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tflag = 0;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 1) {\n\t\t\tlong ans = 0;\n\t\t\twhile\
    \ (lst[i] != 0) {\n\t\t\t\tans += lst[i] % 10;\n\t\t\t\tlst[i] /= 10;\n\t\t\t\
    }\n\t\t\treturn ans;\n\t\t}\n\t}\n\treturn 0;", "  long l=lst.size();\n  std::vector<long>\
    \ isprime(l,1);\n  for(long i=0;i<l;i++)\n  {\n    if(lst[i]==0)\n    {\n    \
    \  isprime[i]=0;\n    }\n    for(long j=2;j<=sqrt(lst[i]);j++)\n    {\n      if(lst[i]%j==0)\n\
    \      {\n        isprime[i]=0;\n        break;\n      }\n    }\n  }\n  long largest_prime=0;\n\
    \  for(long i=0;i<l;i++)\n  {\n    if(isprime[i]==1)\n    {\n      largest_prime=lst[i];\n\
    \    }\n  }\n  long sum=0;\n  while(largest_prime>0)\n  {\n    sum=sum+largest_prime%10;\n\
    \    largest_prime=largest_prime/10;\n  }\n  return sum;", "    // lst.resize(100000);\n\
    \    // for(int i = 0; i < 100000; i++)\n    //     lst[i] = rand() % 1000000000;\n\
    \    // for(int i = 0; i < 100000; i++)\n    //     cout << lst[i] << \" \";\n\
    \    // cout << endl;\n    std::vector<bool> prime(1000000000, 1);\n    prime[0]\
    \ = prime[1] = 0;\n    for(long i = 2; i < 1000000000; i++)\n        if(prime[i])\n\
    \            for(long j = i * i; j < 1000000000; j += i)\n                prime[j]\
    \ = 0;\n    std::vector<long> primes;\n    for(long i = 0; i < 1000000000; i++)\n\
    \        if(prime[i])\n            primes.push_back(i);\n    long mx = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++)\n        if(lst[i] > mx)\n            mx\
    \ = lst[i];\n    std::vector<long> dp(mx + 1, 0);\n    for(int i = 2; i <= mx;\
    \ i++)\n        if(prime[i])\n            dp[i] = i;\n        else{\n        \
    \    for(int j = 0; j < primes.size(); j++){\n                if(i % primes[j]\
    \ == 0){\n                    dp[i] = dp[i / primes[j]];\n                   \
    \ break;\n                }\n            }\n        }\n    // cout << \"hello\\\
    n\";\n    long ans = 0;\n    for(int i = 0; i < lst.size(); i++)\n        ans\
    \ += dp[lst[i]];\n    if(ans == 0)\n        return -1;\n    return ans;", "  long\
    \ prime = 0;\n  for (auto i : lst) {\n    if (i > prime) {\n      prime = i;\n\
    \    }\n  }\n  if (std::find(lst.begin(), lst.end(), prime) == lst.end()) {\n\
    \    for (auto i : lst) {\n      if (i > prime) {\n        prime = i;\n      }\n\
    \    }\n  }\n  std::cout << prime << std::endl;\n  long sum = 0;\n  while (prime\
    \ > 0) {\n    sum += prime % 10;\n    prime /= 10;\n  }\n  return sum;", "  long\
    \ largestPrime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    bool isPrime\
    \ = true;\n    for (long j = 2; j <= lst[i] / 2; j++) {\n      if (lst[i] % j\
    \ == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime\
    \ && lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  long\
    \ result = 0;\n  while (largestPrime > 0) {\n    result += largestPrime % 10;\n\
    \    largestPrime /= 10;\n  }\n  return result;", "\tlong maxp = 0;\n\tfor (auto\
    \ n : lst)\n\t\tif (n > maxp && std::all_of(lst.begin(), lst.end(), [n](long x)\
    \ {return (x % n != 0 || x == n);}))\n\t\t\tmaxp = n;\n\tint sum = 0;\n\twhile\
    \ (maxp) {\n\t\tsum += maxp % 10;\n\t\tmaxp /= 10;\n\t}\n\treturn sum;", "\tlong\
    \ primes[100000], z = 0;\n\tfor (long i = 2; i < 100000; i++) {\n\t\tbool isPrime\
    \ = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0)\n\t\t\t\t\
    isPrime = false;\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimes[z] = i;\n\t\t\tz++;\n\
    \t\t}\n\t}\n\tlong maxPrime = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\
    \tfor (long j = 0; j < z; j++) {\n\t\t\tif (lst[i] == primes[j]) {\n\t\t\t\tif\
    \ (lst[i] > maxPrime)\n\t\t\t\t\tmaxPrime = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong\
    \ sum = 0;\n\twhile (maxPrime > 0) {\n\t\tsum += maxPrime % 10;\n\t\tmaxPrime\
    \ /= 10;\n\t}\n\treturn sum;", "    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = lst.size() - 1; i >= 0; i--) {\n        long x = lst[i];\n        if\
    \ (x < 2) break;\n        bool flag = false;\n        for (int j = 2; j < x; j++)\
    \ {\n            if (x % j == 0) {\n                flag = true;\n           \
    \     break;\n            }\n        }\n        if (!flag) {\n            int\
    \ sum = 0;\n            while (x > 0) {\n                sum += x % 10;\n    \
    \            x /= 10;\n            }\n            return sum;\n        }\n   \
    \ }\n    return 0;", "  long largestPrime = 2;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    long num = lst[i];\n    if (num < 2) {\n      continue;\n    }\n\
    \    bool isPrime = true;\n    for (long j = 2; j <= sqrt(num); j++) {\n     \
    \ if (num % j == 0) {\n        isPrime = false;\n        break;\n      }\n   \
    \ }\n    if (isPrime && num > largestPrime) {\n      largestPrime = num;\n   \
    \ }\n  }\n  return largestPrime;", "\tlong max = *std::max_element(lst.begin(),\
    \ lst.end());\n\tfor (long i = 2; i < max; i++) {\n\t\tfor (long j = 0; j < lst.size();\
    \ j++) {\n\t\t\tif (lst[j] % i == 0) {\n\t\t\t\tlst[j] = lst[j] / i;\n\t\t\t}\n\
    \t\t}\n\t}\n\tlong sum = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif\
    \ (lst[i] > 9) {\n\t\t\tsum += lst[i] % 10;\n\t\t\tsum += lst[i] / 10;\n\t\t}\n\
    \t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;", "    for(long i\
    \ = 0; i < lst.size(); i++) {\n        for(long j = i+1; j < lst.size(); j++)\
    \ {\n            if(lst[i] < lst[j]) {\n                lst[i] = lst[i] + lst[j];\n\
    \                lst[j] = lst[i] - lst[j];\n                lst[i] = lst[i] -\
    \ lst[j];\n            }\n        }\n    }\n    long val = 0;\n    for(long i\
    \ = 0; i < lst.size(); i++) {\n        if(lst[i] == 1) {\n            continue;\n\
    \        }\n        for(long j = 2; j <= lst[i]/2; j++) {\n            if(lst[i]\
    \ % j == 0) {\n                break;\n            }\n            else if(j ==\
    \ lst[i]/2) {\n                val = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(val != 0) {\n        sum += val % 10;\n        val\
    \ /= 10;\n    }\n    return sum;", "  \n  std::vector<long> prime;\n  std::vector<long>\
    \ palin;\n  std::vector<long> ans;\n  // std::cout<<lst.size()<<std::endl;\n \
    \ for(int i=0;i<lst.size();i++){\n    // std::cout<<\"lst[i] : \"<<lst[i]<<std::endl;\n\
    \    long sum=0;\n    long t=lst[i];\n    while(t>0){\n      sum=sum+(t%10);\n\
    \      t=t/10;\n    }\n    // std::cout<<\"sum : \"<<sum<<std::endl;\n    if(lst[i]==1){\n\
    \      // prime.push_back(lst[i]);\n      ans.push_back(1);\n    }\n    else if(lst[i]==2){\n\
    \      // prime.push_back(lst[i]);\n      ans.push_back(2);\n    }\n    else if(lst[i]==3){\n\
    \      // prime.push_back(lst[i]);\n      ans.push_back(3);\n    }\n    else if(lst[i]%2==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%3==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%5==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%7==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%11==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%13==0){\n\
    \      // std::cout<<\"not prime\"<<std::endl;\n    }\n    else if(lst[i]%17",
  "  long largest = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n  }\n  for (long i = largest;\
    \ i > 1; i--) {\n    bool prime = true;\n    for (long x = 2; x < i; x++) {\n\
    \      if (i % x == 0) {\n        prime = false;\n      }\n    }\n    if (prime)\
    \ {\n      std::vector<long> numbers;\n      while (i != 0) {\n        numbers.push_back(i\
    \ % 10);\n        i /= 10;\n      }\n      long sum = 0;\n      for (long x =\
    \ 0; x < numbers.size(); x++) {\n        sum += numbers[x];\n      }\n      return\
    \ sum;\n    }\n  }\n  return 0;", "\tlong n = lst.size();\n\tlong max = 0;\n\t\
    for (long i = 0; i < n; i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\
    \t\t}\n\t}\n\tstd::vector<bool> prime(max + 1, true);\n\tlong i = 2;\n\twhile\
    \ (i * i <= max) {\n\t\tif (prime[i] == true) {\n\t\t\tfor (long j = i * i; j\
    \ <= max; j += i) {\n\t\t\t\tprime[j] = false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\
    \tlong max_prime = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (prime[lst[i]]\
    \ && lst[i] > max_prime) {\n\t\t\tmax_prime = lst[i];\n\t\t}\n\t}\n\tlong sum\
    \ = 0;\n\twhile (max_prime) {\n\t\tlong digit = max_prime % 10;\n\t\tsum += digit;\n\
    \t\tmax_prime /= 10;\n\t}\n\treturn sum;", "    long mx = *std::max_element(lst.begin(),\
    \ lst.end());\n    std::bitset<10000> primes;\n    primes.set();\n    primes[0]\
    \ = primes[1] = 0;\n    for (long i = 2; i <= sqrt(mx); i++) {\n        if (primes[i])\
    \ {\n            for (long j = i * i; j <= mx; j += i)\n                primes[j]\
    \ = 0;\n        }\n    }\n    return std::accumulate(primes.begin(), primes.end(),\
    \ 0);", "    long max=0;\n    for(long i=0;i<lst.size();i++){\n        long num=lst[i];\n\
    \        bool prime=true;\n        for(long j=2;j<num;j++){\n            if(num%j==0){\n\
    \                prime=false;\n                break;\n            }\n       \
    \ }\n        if(prime){\n            if(num>max){\n                max=num;\n\
    \            }\n        }\n    }\n    long sum=0;\n    while(max>0){\n       \
    \ sum+=max%10;\n        max/=10;\n    }\n    return sum;", '  std::vector<long>
    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
    67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,
    151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
    239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
    337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,
    433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,
    541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,
    641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,
    743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,
    857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,
    971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051,
    1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
    1153, 1163, 1171, 1181, 1187, 1193, 12', "    long res = 0;\n    long max_prime\
    \ = INT_MIN;\n    for(int i = 0; i < lst.size(); i++) {\n        long tmp = lst[i];\n\
    \        if(tmp == 1) continue;\n        long count = 0;\n        for(int j =\
    \ 2; j <= tmp/2; j++) {\n            if(tmp % j == 0) count++;\n        }\n  \
    \      if(count == 0) {\n            if(tmp > max_prime) max_prime = tmp;\n  \
    \      }\n    }\n    std::string str = std::to_string(max_prime);\n    for(int\
    \ i = 0; i < str.size(); i++) {\n        res += str[i] - '0';\n    }\n    return\
    \ res;", "\tint max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tint flag\
    \ = 0;\n\t\tfor (int j = 2; j < lst[i] / 2; j++) {\n\t\t\tif (lst[i] % j == 0)\
    \ {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\
    \t\t\tmax = std::max(max, lst[i]);\n\t\t}\n\t}\n\tint sum = 0;\n\twhile (max !=\
    \ 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;", "    std::vector<long>\
    \ prime;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i] == 1)\n      \
    \      continue;\n        else{\n            for(int j=0;j<lst.size();j++){\n\
    \                if(i==j || lst[j] == 1)\n                    continue;\n    \
    \            else{\n                    if(lst[i]%lst[j] == 0)\n             \
    \           lst[i] = 1;\n                }\n            }\n        }\n    }\n\
    \    for(int i=0;i<lst.size();i++){\n        if(lst[i] != 1)\n            prime.push_back(lst[i]);\n\
    \    }\n    int max = prime[0];\n    for(int i=0;i<prime.size();i++){\n      \
    \  if(prime[i] > max)\n            max = prime[i];\n    }\n    int sum = 0;\n\
    \    while(max > 0){\n        sum += max%10;\n        max /= 10;\n    }\n    return\
    \ sum;", "\tint n = lst.size();\n\tlong max=INT_MIN;\n\tfor(int i=0;i<n;i++){\n\
    \t\tfor(int j=i+1;j<n;j++){\n\t\t\tlong m = lst[i]*lst[j];\n\t\t\tif(m>max) max=m;\n\
    \t\t}\n\t}\n\tlong sum=0;\n\twhile(max>0){\n\t\tsum+=max%10;\n\t\tmax/=10;\n\t\
    }\n\treturn sum;", "\tstd::vector<long> temp=lst;\n\tfor(int i=0;i<temp.size();i++){\n\
    \t\twhile(temp[i]%2==0)\n\t\t\ttemp[i]/=2;\n\t\twhile(temp[i]%3==0)\n\t\t\ttemp[i]/=3;\n\
    \t\twhile(temp[i]%5==0)\n\t\t\ttemp[i]/=5;\n\t\twhile(temp[i]%7==0)\n\t\t\ttemp[i]/=7;\n\
    \t\twhile(temp[i]%11==0)\n\t\t\ttemp[i]/=11;\n\t\twhile(temp[i]%13==0)\n\t\t\t\
    temp[i]/=13;\n\t\twhile(temp[i]%17==0)\n\t\t\ttemp[i]/=17;\n\t\twhile(temp[i]%19==0)\n\
    \t\t\ttemp[i]/=19;\n\t\twhile(temp[i]%23==0)\n\t\t\ttemp[i]/=23;\n\t\twhile(temp[i]%29==0)\n\
    \t\t\ttemp[i]/=29;\n\t\twhile(temp[i]%31==0)\n\t\t\ttemp[i]/=31;\n\t\twhile(temp[i]%37==0)\n\
    \t\t\ttemp[i]/=37;\n\t\twhile(temp[i]%41==0)\n\t\t\ttemp[i]/=41;\n\t\twhile(temp[i]%43==0)\n\
    \t\t\ttemp[i]/=43;\n\t\twhile(temp[i]%47==0)\n\t\t\ttemp[i]/=47;\n\t\twhile(temp[i]%53==0)\n\
    \t\t\ttemp[i]/=53;\n\t\twhile(temp[i]%59==0)\n\t\t\ttemp[i]/=59;\n\t\twhile(temp[i]%61==0)\n\
    \t\t\ttemp[i]/=61;\n\t\twhile(temp[i]%67==0", "  long temp;\n  std::vector<long>\
    \ vct(lst.size());\n  std::copy(lst.begin(), lst.end(), vct.begin());\n  std::sort(vct.begin(),\
    \ vct.end());\n  std::vector<long>::iterator it = std::unique(vct.begin(), vct.end());\n\
    \  vct.resize(std::distance(vct.begin(), it));\n  for (long i = 0; i < vct.size();\
    \ i++) {\n    if (vct[i] < 0) {\n      vct[i] = -vct[i];\n    }\n  }\n  for (long\
    \ i = vct.size() - 1; i >= 0; i--) {\n    if (vct[i] > 1) {\n      for (long j\
    \ = 2; j <= vct[i] / 2; j++) {\n        if (vct[i] % j == 0) {\n          vct[i]\
    \ = 0;\n          break;\n        }\n      }\n    }\n  }\n  long max = 0;\n  for\
    \ (long i = 0; i < vct.size(); i++) {\n    if (vct[i] > max) {\n      max = vct[i];\n\
    \    }\n  }\n  int temp1 = max;\n  int sum = 0;\n  while (temp1 != 0) {\n    sum\
    \ = sum + temp1 % 10;\n    temp1 = temp1 / 10;\n  }\n  return sum;", '    std::vector<int>
    primes{0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,13',
  "    long largest_prime = 0;\n    for (auto i : lst) {\n        // check if i is\
    \ prime\n        int prime = 1;\n        for (int j = 2; j < i; j++) {\n     \
    \       if (i % j == 0) {\n                prime = 0;\n                break;\n\
    \            }\n        }\n        if (prime) {\n            largest_prime = i;\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long sum = 0;\n    long largestPrime = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        for(int j = 2; j < lst[i]; j++){\n            if(lst[i] % j ==\
    \ 0){\n                break;\n            }\n            if(j + 1 == lst[i]){\n\
    \                largestPrime = lst[i];\n            }\n        }\n    }\n   \
    \ while(largestPrime != 0){\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    // iterate over vector lst\n    // find\
    \ the largest prime number\n    // sum its digits and return it\n    long largest_prime;\n\
    \    bool flag;\n    std::vector<long>::iterator it;\n    for(it = lst.begin();\
    \ it != lst.end(); it++) {\n        flag = true;\n        for(long i = 2; i <\
    \ *it; i++) {\n            if(*it % i == 0) {\n                flag = false;\n\
    \                break;\n            }\n        }\n        if(flag == true) {\n\
    \            largest_prime = *it;\n        }\n    }\n    // largest_prime = *it;\n\
    \    long sum = 0;\n    while(largest_prime != 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    int fl=0;\n\
    \    long  max=0;\n    long result=0;\n    for(int i=0;i<lst.size();i++)\n   \
    \ {\n        if(lst[i]==1)\n        {\n            fl=1;\n        }\n        if(lst[i]%2==0)\n\
    \        {\n            lst[i]=2;\n        }\n        else if(lst[i]%3==0)\n \
    \       {\n            lst[i]=3;\n        }\n        else if(lst[i]%5==0)\n  \
    \      {\n            lst[i]=5;\n        }\n        else if(lst[i]%7==0)\n   \
    \     {\n            lst[i]=7;\n        }\n        else if(lst[i]%11==0)\n   \
    \     {\n            lst[i]=11;\n        }\n        else if(lst[i]%13==0)\n  \
    \      {\n            lst[i]=13;\n        }\n        else if(lst[i]%17==0)\n \
    \       {\n            lst[i]=17;\n        }\n        else if(lst[i]%19==0)\n\
    \        {\n            lst[i]=19;\n        }\n        else if(lst[i]%23==0)\n\
    \        {\n            lst[i]=23;\n        }\n        else if(lst[i]%29==0)\n\
    \        {\n            lst[i]=29;\n        }\n        else if(lst[i]%31==0)\n\
    \        {\n            lst[i]=31;\n        }\n        else if(lst[i]%37==0)\n\
    \        {\n            lst[i]=37;\n        }\n        else if(lst[i]%41==0)\n\
    \        {\n            lst[i]=41;\n        }\n        else if(lst[i]%43==0)\n\
    \        {\n            lst[i]=43;\n        }\n        else if(lst[i]%47==0)\n\
    \        {\n            lst[i]=47", "    \n    long largestprimevalue = 0;\n \
    \   for(long i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] == 0 || lst[i]\
    \ == 1)\n        {\n            continue;\n        }\n        bool prime = true;\n\
    \        for(long j = 2; j <= lst[i]/2; j++)\n        {\n            if(lst[i]\
    \ % j == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n        if(prime == true)\n        {\n            largestprimevalue\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while(largestprimevalue\
    \ != 0)\n    {\n        sum += largestprimevalue % 10;\n        largestprimevalue\
    \ /= 10;\n    }\n    return sum;", "\t// Return the sum of the largest prime value\
    \ in lst\n\n\tstd::vector<long>::iterator v;\n\tlong sum = 0;\n\tlong value =\
    \ 0;\n\tlong maxValue = 0;\n\tint count = 0;\n\tbool isPrime = true;\n\tint j\
    \ = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tisPrime = true;\n\t\tvalue\
    \ = lst[i];\n\t\tif (value < 0) {\n\t\t\tvalue = value * -1;\n\t\t}\n\t\tif (value\
    \ == 0 || value == 1) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor (j = 2; j <= value /\
    \ 2; j++) {\n\t\t\tif (value % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime == true) {\n\t\t\tif (value > maxValue) {\n\t\t\
    \t\tmaxValue = value;\n\t\t\t}\n\t\t}\n\t}\n\twhile (maxValue > 0) {\n\t\tsum\
    \ = sum + maxValue % 10;\n\t\tmaxValue = maxValue / 10;\n\t}\n\treturn sum;",
  "  std::vector<long> lst1;\n  std::vector<long> lst2;\n  long count = 0;\n  long\
    \ max = lst[0];\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (int i = 1; i <= max; i++) {\n   \
    \ for (int j = 0; j < lst.size(); j++) {\n      if (lst[j] % i == 0) {\n     \
    \   count = count + 1;\n      }\n    }\n    if (count == 2) {\n      lst1.push_back(i);\n\
    \    }\n    count = 0;\n  }\n  max = lst1[0];\n  for (int i = 0; i < lst1.size();\
    \ i++) {\n    if (lst1[i] > max) {\n      max = lst1[i];\n    }\n  }\n  while\
    \ (max != 0) {\n    lst2.push_back(max % 10);\n    max = max / 10;\n  }\n  long\
    \ result = 0;\n  for (int i = 0; i < lst2.size(); i++) {\n    result = result\
    \ + lst2[i];\n  }\n  return result;", "  auto f = std::find_if(lst.begin(), lst.end(),\
    \ [](auto e) { return e > 1; });\n  if (f == lst.end()) return 0;\n  long v =\
    \ *f;\n  long sum = 0;\n  while (v > 0) {\n    sum += v % 10;\n    v /= 10;\n\
    \  }\n  return sum;", "    int i,j,k;\n    long largestPrime=0;\n    long sum=0;\n\
    \    for(i=0;i<lst.size();i++){\n        int flag=0;\n        for(j=2;j<lst[i];j++){\n\
    \            if(lst[i]%j==0){\n                flag=1;\n                break;\n\
    \            }\n        }\n        if(flag==0){\n            largestPrime=lst[i];\n\
    \        }\n    }\n    // std::cout<<largestPrime<<std::endl;\n    while(largestPrime>0){\n\
    \        sum+=largestPrime%10;\n        largestPrime/=10;\n    }\n    return sum;",
  "    std::vector<long> m = lst;\n    std::sort(m.begin(), m.end());\n    std::reverse(m.begin(),\
    \ m.end());\n    for (long i = 0; i < m.size(); i++) {\n        if (m[i] == 0)\n\
    \            continue;\n        if (m[i] == 1)\n            return 1;\n      \
    \  if (m[i] == 2)\n            return 2;\n        for (long j = 3; j < m[i]; j++)\
    \ {\n            if (m[i] % j == 0)\n                break;\n            if (j\
    \ == m[i] - 1)\n                return m[i];\n        }\n    }\n    return 1;",
  "    int max_prime = 0;\n    for(auto it = lst.begin(); it != lst.end(); it++) {\n\
    \        if(*it > 1) {\n            bool isPrime = true;\n            for(long\
    \ i = 2; i < sqrt(*it); i++) {\n                if(*it % i == 0) {\n         \
    \           isPrime = false;\n                    break;\n                }\n\
    \            }\n            if(isPrime) {\n                max_prime = std::max(max_prime,\
    \ *it);\n            }\n        }\n    }\n    return std::accumulate(std::to_string(max_prime).begin(),\
    \ std::to_string(max_prime).end(), 0, [](int a, char c) { return a + (c - '0');\
    \ });", "  std::vector<long> result;\n  for (int i = 0; i < lst.size(); i++) {\n\
    \    if (lst[i] % 2 != 0) {\n      result.push_back(lst[i]);\n    }\n  }\n  int\
    \ count = 0;\n  int largest_prime = 0;\n  int largest_prime_pos = 0;\n  for (int\
    \ i = 0; i < result.size(); i++) {\n    int k = result[i];\n    int check = result[i];\n\
    \    while (k != 0) {\n      count++;\n      k = k / 10;\n    }\n    if (count\
    \ == 1) {\n      if (check > largest_prime) {\n        largest_prime = check;\n\
    \        largest_prime_pos = i;\n      }\n    }\n    else {\n      for (int j\
    \ = 2; j <= sqrt(check); j++) {\n        if (check % j == 0) {\n          break;\n\
    \        }\n        else if (j == sqrt(check)) {\n          if (check > largest_prime)\
    \ {\n            largest_prime = check;\n            largest_prime_pos = i;\n\
    \          }\n        }\n      }\n    }\n    count = 0;\n  }\n  int res = 0;\n\
    \  int final_sum = 0;\n  while (largest_prime > 0) {\n    res = largest_prime\
    \ % 10;\n    final_sum += res;\n    largest_prime = largest_prime / 10;\n  }\n\
    \  return final_sum;", "\tlong max = 0;\n\tlong primeMax = 0;\n\tfor (int i =\
    \ 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\t\t\
    }\n\t}\n\tfor (int i = 2; i <= max; i++) {\n\t\tbool isPrime = true;\n\t\tfor\
    \ (int j = 2; j <= sqrt(i); j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimeMax =\
    \ i;\n\t\t}\n\t}\n\tint sum = 0;\n\twhile (primeMax > 0) {\n\t\tsum += primeMax\
    \ % 10;\n\t\tprimeMax /= 10;\n\t}\n\treturn sum;", "    int p;\n    int c = 0;\n\
    \    std::sort(lst.begin(), lst.end());\n    for (int i = lst.size() - 1; i >=\
    \ 0; i--) {\n        if (lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0\
    \ && lst[i] % 7 != 0) {\n            p = lst[i];\n            break;\n       \
    \ }\n    }\n    while (p > 0) {\n        c += p % 10;\n        p /= 10;\n    }\n\
    \    return c;", "  // Here we need to find the largest prime number in the list\
    \ and then we need to take the sum of the digits\n  // A prime number is only\
    \ divisible by 1 and itself\n  // We need to iterate through the list of numbers\
    \ and check if each number is prime\n  // To check if a number is prime, we can\
    \ iterate over the range of 1 to that number\n  // If the number is divisible\
    \ by any of the numbers in this range, we can stop there.\n\n  int length = lst.size();\n\
    \  // Check if each number is prime\n  int largestPrime = -1;\n  for (int i =\
    \ 0; i < length; i++) {\n    bool isPrime = true;\n    for (int j = 2; j < lst[i];\
    \ j++) {\n      if (lst[i] % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime && lst[i] > largestPrime) {\n      largestPrime\
    \ = lst[i];\n    }\n  }\n  // Return the sum of the digits\n  int digitSum = 0;\n\
    \  for (int k = 0; k < length; k++) {\n    digitSum += largestPrime % 10;\n  \
    \  largestPrime /= 10;\n  }\n  return digitSum;", "    std::vector<long> res;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        bool isPrime = true;\n    \
    \    for(int j = 2; j <= lst[i]/2; j++){\n            if(lst[i] % j == 0){\n \
    \               isPrime = false;\n                break;\n            }\n    \
    \    }\n        if(isPrime){\n            res.push_back(lst[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    int ans = 0;\n    if(res.size()\
    \ >= 1){\n        ans = res[res.size()-1];\n    }\n    int res1 = 0;\n    while(ans\
    \ != 0){\n        res1 += ans % 10;\n        ans /= 10;\n    }\n    return res1;",
  "  // Write your code here\n  int count=0;\n  int sum=0;\n  int i=0;\n  long temp,temp2;\n\
    \  long sum2=0;\n  long max=0;\n  while(i<lst.size()){\n    temp=lst[i];\n   \
    \ //std::cout<<temp<<\"is temp\\n\";\n    if(temp==1 || temp==0){\n      i++;\n\
    \      continue;\n    }\n    for(int j=2;j<temp;j++){\n      if(temp%j==0){\n\
    \        count++;\n        //std::cout<<count<<\"is count\\n\";\n        break;\n\
    \      }\n    }\n    if(count==0){\n      //std::cout<<temp<<\"\\n\";\n      temp2=temp;\n\
    \      while(temp2!=0){\n        sum=sum+temp2%10;\n        temp2=temp2/10;\n\
    \      }\n      //std::cout<<sum<<\"\\n\";\n      sum2=sum2+sum;\n      if(max<sum2){\n\
    \        max=sum2;\n      }\n      sum=0;\n    }\n    count=0;\n    i++;\n  }\n\
    \  return max;", "    int sum = 0;\n    int max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        int num = lst[i];\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(num % lst[j] == 0){\n                if(num != lst[j]){\n    \
    \                num = 0;\n                    break;\n                }\n   \
    \         }\n        }\n        if(num != 0 && num > max){\n            max =\
    \ num;\n        }\n    }\n    std::cout << max << std::endl;\n    while(max !=\
    \ 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
  "\tlong largestPrime = 0;\n\tfor (long num : lst) {\n\t\tbool isPrime = true;\n\t\
    \tif (num <= 1) {\n\t\t\tisPrime = false;\n\t\t}\n\t\telse if (num <= 3) {\n\t\
    \t\tisPrime = true;\n\t\t}\n\t\telse if (num % 2 == 0 || num % 3 == 0) {\n\t\t\
    \tisPrime = false;\n\t\t}\n\t\tlong i = 5;\n\t\twhile (i * i <= num) {\n\t\t\t\
    if (num % i == 0 || num % (i + 2) == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t}\n\
    \t\t\ti += 6;\n\t\t}\n\t\tif (isPrime) {\n\t\t\tlargestPrime = num;\n\t\t}\n\t\
    }\n\tlong digitSum = 0;\n\twhile (largestPrime > 0) {\n\t\tdigitSum += largestPrime\
    \ % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn digitSum;", "    // Try to solve\
    \ this here\n    std::vector<long> prime;\n    long max=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        int j;\n        for(j=2;j<=lst[i]/2;j++){\n            if(lst[i]%j==0){\n\
    \                break;\n            }\n        }\n        if(j>lst[i]/2){\n \
    \           if(lst[i]>max){\n                max=lst[i];\n            }\n    \
    \    }\n    }\n    long sum=0;\n    while(max>0){\n        sum+=max%10;\n    \
    \    max/=10;\n    }\n    return sum;", "    std::vector<long> lst1;\n    for(auto\
    \ i : lst){\n        if(i<0) continue;\n        else lst1.push_back(i);\n    }\n\
    \    long num = *std::max_element(lst1.begin(), lst1.end());\n    long sum = 0;\n\
    \    int count = 0;\n    while(num%2==0){\n        num/=2;\n        count++;\n\
    \    }\n    if(count==1){\n        sum+=2;\n    }\n    else if(count>1){\n   \
    \     while(count!=0){\n            sum+=count%10;\n            count/=10;\n \
    \       }\n    }\n    for(long i=3;i<sqrt(num);i+=2){\n        count = 0;\n  \
    \      while(num%i==0){\n            num/=i;\n            count++;\n        }\n\
    \        if(count==1){\n            sum+=i;\n        }\n        else if(count>1){\n\
    \            while(count!=0){\n                sum+=count%10;\n              \
    \  count/=10;\n            }\n        }\n    }\n    if(num!=1){\n        long\
    \ temp = num;\n        while(temp!=0){\n            sum+=temp%10;\n          \
    \  temp/=10;\n        }\n    }\n    return sum;", "long answer = lst[0];\nlong\
    \ result = 0;\nfor(long i = 0; i < lst.size(); i++){\nif(lst[i] > answer){\nanswer\
    \ = lst[i];", '    std::vector<long> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23,
    29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,
    109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,
    197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
    283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,
    389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,
    487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,
    599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
    811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
    919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
    1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097,
    1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 12', " \
    \   long max = 0;\n    long num = 0;\n    bool flag = false;\n    std::vector<long>::iterator\
    \ it = lst.begin();\n    while(it != lst.end()) {\n        if( *it == 1 || *it\
    \ == 0) {\n            it++;\n            continue;\n        }\n        for(int\
    \ i = 2; i <= *it / 2; ++i) {\n            if( *it % i == 0) {\n             \
    \   flag = true;\n                break;\n            }\n        }\n        if(!flag)\
    \ {\n            num = *it;\n            while(num != 0) {\n                max\
    \ += num % 10;\n                num /= 10;\n            }\n        }\n       \
    \ flag = false;\n        it++;\n    }\n    return max;", "    long max=0;\n  \
    \  for(int i=0;i<lst.size();i++){\n        long aux=lst[i];\n        bool isPrime=true;\n\
    \        for(int i=2;i<=aux/2;i++){\n            if(aux%i==0){\n             \
    \   isPrime=false;\n                break;\n            }\n        }\n       \
    \ if(isPrime){\n            if(aux>max){\n                max=aux;\n         \
    \   }\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum=sum+max%10;\n\
    \        max=max/10;\n    }\n    return sum;", "    int k=1;\n    int primes[lst.size()];\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        for(int j=2;j<=lst[i]/2;j++)\n\
    \        {\n            if(lst[i]%j==0)\n            {\n                k=0;\n\
    \                break;\n            }\n        }\n        if(k)\n        {\n\
    \            primes[i]=lst[i];\n        }\n        k=1;\n    }\n    int arr[primes.size()];\n\
    \    int i;\n    int j=0;\n    for(i=0;i<primes.size();i++)\n    {\n        if(primes[i]!='\\\
    0')\n        {\n            arr[j]=primes[i];\n            j++;\n        }\n \
    \   }\n    long largest=*max_element(arr,arr+j);\n    long sum=0;\n    while(largest>0)\n\
    \    {\n        sum+=largest%10;\n        largest/=10;\n    }\n    return sum;",
  "    assert(std::all_of(lst.begin(), lst.end(), [](long x) { return x >= 0; }));\n\
    \    long largestPrime = *std::max_element(lst.begin(), lst.end());\n    for (long\
    \ i = largestPrime; i > 1; i--) {\n        for (long j = 2; j < i; j++) {\n  \
    \          if (i % j == 0) {\n                largestPrime = i - 1;\n        \
    \        break;\n            }\n        }\n    }\n    long sum = 0;\n    while\
    \ (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "\tlong i, j, max = 0;\n\tstd::vector<long>\
    \ factors;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max)\n\t\t\t\
    max = lst[i];\n\t}\n\tfor (i = 2; i <= max; i++) {\n\t\tfor (j = 2; j <= i; j++)\
    \ {\n\t\t\tif (i % j == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (i == j)\n\t\t\tfactors.push_back(i);\n\
    \t}\n\tlong largest = 0;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tfor (j = 0;\
    \ j < factors.size(); j++) {\n\t\t\tif (lst[i] == factors[j]) {\n\t\t\t\tif (factors[j]\
    \ > largest)\n\t\t\t\t\tlargest = factors[j];\n\t\t\t}\n\t\t}\n\t}\n\tlong sum\
    \ = 0;\n\twhile (largest != 0) {\n\t\tsum += largest % 10;\n\t\tlargest /= 10;\n\
    \t}\n\treturn sum;", "    long max = 0;\n    for(long i=0;i<lst.size();i++){\n\
    \        if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> all_primes;\n\
    \    // long prime = 2;\n    // long st = sqrt(max) + 1;\n    // for(long i=0;i<st;i++){\n\
    \    //     if(prime % )\n    // }\n    // sieve of erathostenes\n    std::vector<bool>\
    \ isPrime(max + 1, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n\
    \    for(long i=2;i<=max;i++){\n        if(isPrime[i]){\n            for(long\
    \ j=i*i;j<=max;j+=i){\n                isPrime[j] = false;\n            }\n  \
    \      }\n    }\n    for(long i=0;i<max;i++){\n        if(isPrime[i]) all_primes.push_back(i);\n\
    \    }\n    long max_prime = 0;\n    for(long i=0;i<lst.size();i++){\n       \
    \ for(long j=0;j<all_primes.size();j++){\n            if(lst[i] == all_primes[j]){\n\
    \                if(all_primes[j] > max_prime) max_prime = all_primes[j];\n  \
    \          }\n        }\n    }\n    long sum = 0;\n    while(max_prime){\n   \
    \     sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "\tlong largestPrime;\n\tfor (auto i : lst) {\n\t\tbool notPrime = false;\n\t\t\
    for (long j = 2; j < i / 2; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tnotPrime\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!notPrime) {\n\t\t\tlargestPrime\
    \ = i;\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (largestPrime != 0) {\n\t\tsum +=\
    \ largestPrime % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn sum;", "    sort(lst.begin(),\
    \ lst.end());\n    long max_prime = -1;\n    int max_prime_index = -1;\n    for\
    \ (int i = lst.size() - 1; i >= 0; i--) {\n        if (lst[i] < 2) {\n       \
    \     continue;\n        }\n        bool is_prime = true;\n        for (int j\
    \ = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n              \
    \  is_prime = false;\n                break;\n            }\n        }\n     \
    \   if (is_prime) {\n            max_prime = lst[i];\n            max_prime_index\
    \ = i;\n            break;\n        }\n    }\n    if (max_prime == -1) {\n   \
    \     return -1;\n    }\n    lst.erase(lst.begin() + max_prime_index);\n    int\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    int tmp = skjkasdkd(lst);\n    if (tmp == -1)\
    \ {\n        return sum;\n    }\n    return sum + tmp;", "  long answer = 0;\n\
    \  std::sort(lst.begin(), lst.end());\n  auto last = std::unique(lst.begin(),\
    \ lst.end());\n  lst.erase(last, lst.end());\n  std::cout << lst[0] << std::endl;\n\
    \  std::cout << lst[1] << std::endl;\n  std::cout << lst[2] << std::endl;\n  std::cout\
    \ << lst[3] << std::endl;\n  std::cout << lst[4] << std::endl;\n  std::cout <<\
    \ lst[5] << std::endl;\n  std::cout << lst[6] << std::endl;\n  std::cout << lst[7]\
    \ << std::endl;\n  std::cout << lst[8] << std::endl;\n  std::cout << lst[9] <<\
    \ std::endl;\n  std::cout << lst[10] << std::endl;\n  std::cout << lst[11] <<\
    \ std::endl;\n  std::cout << lst[12] << std::endl;\n  std::cout << lst[13] <<\
    \ std::endl;\n  std::cout << lst[14] << std::endl;\n  std::cout << lst[15] <<\
    \ std::endl;\n  std::cout << lst[16] << std::endl;\n  std::cout << lst[17] <<\
    \ std::endl;\n  std::cout << lst[18] << std::endl;\n  std::cout << lst[19] <<\
    \ std::endl;\n  std::cout << lst[20] << std::endl;\n  std::cout << lst[21] <<\
    \ std::endl;\n  std::cout << lst[22] << std::endl;\n  std::cout << lst[23] <<\
    \ std::endl;\n  std::cout << lst[24] << std::endl;\n  std::c", "    int x=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        int c=0;\n        for(int j=1;j<=lst[i];j++){\n\
    \            if(lst[i]%j==0){\n                c++;\n            }\n        }\n\
    \        if(c==2){\n            while(lst[i]!=0){\n                x+=lst[i]%10;\n\
    \                lst[i]/=10;\n            }\n        }\n    }\n    return x;",
  "    // sort the list in descending order\n    std::sort(lst.begin(), lst.end(),\
    \ std::greater<int>());\n    // find the largest prime value\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        // check if the number is prime\n       \
    \ bool isPrime = true;\n        for (int j = 2; j < sqrt(lst[i]); j++) {\n   \
    \         if (lst[i] % j == 0) {\n                isPrime = false;\n         \
    \       break;\n            }\n        }\n        if (isPrime) {\n           \
    \ // add its digits and return the sum\n            long sum = 0;\n          \
    \  while (lst[i] > 0) {\n                sum += lst[i] % 10;\n               \
    \ lst[i] /= 10;\n            }\n            return sum;\n        }\n    }\n  \
    \  return 0;", "  long highestPrime = 0;\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    if (lst[i] > highestPrime) {\n      bool isPrime = true;\n      for (int\
    \ j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          isPrime\
    \ = false;\n          break;\n        }\n      }\n      if (isPrime) {\n     \
    \   highestPrime = lst[i];\n      }\n    }\n  }\n  int sumOfDigits = 0;\n  while\
    \ (highestPrime > 0) {\n    sumOfDigits += highestPrime % 10;\n    highestPrime\
    \ /= 10;\n  }\n  return sumOfDigits;", "    std::vector<long> primes;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        for(int j = 2; j < lst[i]; j++) {\n \
    \           if(lst[i] % j == 0) {\n                break;\n            }\n   \
    \         else if(j == lst[i] - 1) {\n                primes.push_back(lst[i]);\n\
    \            }\n        }\n    }\n    long maxprime = *std::max_element(primes.begin(),\
    \ primes.end());\n    std::cout << maxprime << std::endl;\n    int sum = 0;\n\
    \    while(maxprime > 0) {\n        sum += maxprime % 10;\n        maxprime /=\
    \ 10;\n    }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n    //\
    \ 0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3\n    // 1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1\n\
    \    // 1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3\n    // 0,724,32,71,99,32,6,0,5,91,83,0,5,6\n\
    \    // 0,81,12,3,1,21\n    // 0,8,1,2,1,7\n    long largest_prime_number = 0;\n\
    \    for (int i = lst.size() - 1; i >= 0; i--) {\n        if (lst[i] == 1) {\n\
    \            continue;\n        }\n        if (lst[i] < 1) {\n            continue;\n\
    \        }\n        if (lst[i] == 2) {\n            largest_prime_number = 2;\n\
    \            break;\n        }\n        bool isPrime = true;\n        for (int\
    \ j = 2; j <= sqrt(lst[i]); j++) {\n            if (lst[i] % j == 0) {\n     \
    \           isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime) {\n            largest_prime_number = lst[i];\n        \
    \    break;\n        }\n    }\n    long sum_of_digits = 0;\n    while (largest_prime_number\
    \ > 0) {\n        int digit = largest_prime_number % 10;\n        sum_of_digits\
    \ += digit;\n        largest_prime_number /= 10;\n    }\n    return sum_of_digits;",
  "    std::vector<long> res;\n    long sum = 0;\n    for(long i = 0; i < lst.size();\
    \ i++){\n        long temp = 0;\n        for(long j = 0; j < lst.size(); j++){\n\
    \            if(i != j){\n                temp += lst[j];\n            }\n   \
    \     }\n        res.push_back(temp);\n    }\n    long max = 0;\n    for(long\
    \ i = 0; i < res.size(); i++){\n        if(res[i] > max){\n            max = res[i];\n\
    \        }\n    }\n    while(max > 0){\n        sum += max % 10;\n        max\
    \ /= 10;\n    }\n    return sum;", "\tstd::vector<long> res(lst.size());\n\tstd::transform(lst.begin(),\
    \ lst.end(), res.begin(), [](long l) {\n\t\tint sum = 0;\n\t\twhile (l != 0) {\n\
    \t\t\tsum += l % 10;\n\t\t\tl /= 10;\n\t\t}\n\t\treturn sum;\n\t});\n\tauto it\
    \ = std::max_element(res.begin(), res.end());\n\treturn *it;", "    std::vector<long>\
    \ copy = lst;\n    sort(copy.begin(), copy.end());\n    std::vector<long>::iterator\
    \ it = copy.end();\n    it--;\n    long max = *it;\n    long sum = 0;\n    while\
    \ (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;", "  std::sort(lst.begin(), lst.end());\n  auto is_prime = [](long n) {\n\
    \    for (int i = 2; i <= sqrt(n); i++) {\n      if (n % i == 0) return false;\n\
    \    }\n    return true;\n  };\n  for (auto it = lst.rbegin(); it != lst.rend();\
    \ it++) {\n    if (is_prime(*it)) {\n      auto x = *it;\n      auto t = [](long\
    \ n) {\n        long sum = 0;\n        while (n) {\n          sum += n % 10;\n\
    \          n /= 10;\n        }\n        return sum;\n      };\n      return t(x);\n\
    \    }\n  }\n  return -1;", "  long max = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    long temp = lst[i];\n    int count = 0;\n    while (temp != 1) {\n\
    \      int isprime = 1;\n      for (int j = 2; j <= temp / 2; j++) {\n       \
    \ if (temp % j == 0) {\n          isprime = 0;\n          break;\n        }\n\
    \      }\n      if (isprime == 1) {\n        count++;\n        break;\n      }\n\
    \      if (count > max) {\n        max = count;\n      }\n      temp--;\n    }\n\
    \  }\n  return max;", "  long ans = 0;\n  long max = -1;\n  for(long i = 0; i\
    \ < lst.size(); i++){\n    long curr = lst[i];\n    bool prime = true;\n    for(long\
    \ j = 2; j < curr; j++){\n      if(curr % j == 0){\n        prime = false;\n \
    \       break;\n      }\n    }\n    if(prime && curr > max){\n      max = curr;\n\
    \    }\n  }\n  while(max > 0){\n    ans += max % 10;\n    max /= 10;\n  }\n  return\
    \ ans;", "    int value = 0;\n    for(int i = 0; i < lst.size(); i++){\n     \
    \   // std::cout << lst[i] << std::endl;\n        if(lst[i] == 1){\n         \
    \   continue;\n        }\n        else if(lst[i] % 2 == 0){\n            continue;\n\
    \        }\n        else if(lst[i] % 3 == 0){\n            continue;\n       \
    \ }\n        else if(lst[i] % 5 == 0){\n            continue;\n        }\n   \
    \     else if(lst[i] % 7 == 0){\n            continue;\n        }\n        else\
    \ if(lst[i] % 11 == 0){\n            continue;\n        }\n        else if(lst[i]\
    \ % 13 == 0){\n            continue;\n        }\n        else if(lst[i] % 17 ==\
    \ 0){\n            continue;\n        }\n        else if(lst[i] % 19 == 0){\n\
    \            continue;\n        }\n        else if(lst[i] % 23 == 0){\n      \
    \      continue;\n        }\n        else if(lst[i] % 29 == 0){\n            continue;\n\
    \        }\n        else if(lst[i] % 31 == 0){\n            continue;\n      \
    \  }\n        else if(lst[i] % 37 == 0){\n            continue;\n        }\n \
    \       else if(lst[i] % 41 == 0){\n            continue;\n        }\n       \
    \ else if(lst[i] % 43 == 0){\n            continue;\n        }\n        else if(lst[i]\
    \ % 47 == 0){\n            continue;\n        }\n        else if(lst[i] % 53 ==\
    \ 0){\n            continue;\n        }\n        else if(lst[i] % 59 == 0){\n\
    \            continue;\n        }\n        else if(lst[i] % 61 == 0){\n      \
    \      continue;\n        }\n        else if(lst[i] % 67 == 0){\n            continue;\n\
    \        }\n        else if(lst[i] % 71 == 0){\n            continue;\n      \
    \  }\n        else if(lst[", "    // find the max value\n    long max_value =\
    \ lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > max_value)\
    \ {\n            max_value = lst[i];\n        }\n    }\n    // std::cout << \"\
    max_value = \" << max_value << std::endl;\n    // check if max_value is prime\n\
    \    if (max_value == 1) {\n        return 1;\n    }\n    bool prime = true;\n\
    \    for (int i = 2; i <= std::sqrt(max_value); i++) {\n        if (max_value\
    \ % i == 0) {\n            prime = false;\n            break;\n        }\n   \
    \ }\n    if (prime) {\n        return std::accumulate(std::to_string(max_value).begin(),\
    \ std::to_string(max_value).end(), 0) - (std::to_string(max_value).size() * '0');\n\
    \    }\n    // check if numbers are prime\n    std::vector<long> primes;\n   \
    \ primes.push_back(2);\n    for (int i = 3; i <= max_value; i++) {\n        prime\
    \ = true;\n        for (int j = 2; j <= std::sqrt(i); j++) {\n            if (i\
    \ % j == 0) {\n                prime = false;\n                break;\n      \
    \      }\n        }\n        if (prime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    // std::cout << \"primes.size() = \" << primes.size() <<\
    \ std::endl;\n    // std::cout << \"primes.size() = \" << primes.size() << std::endl;\n\
    \    std::vector<long> primes_in_lst;\n    for (int i = 0; i < primes.size();\
    \ i++) {\n        for (int j = 0; j < lst.size(); j++) {\n            if (primes[i]\
    \ == lst[j]) {\n                primes_in_lst.push_back(pr", "    long temp=0;\n\
    \    sort(lst.begin(),lst.end());\n    reverse(lst.begin(),lst.end());\n    while(1){\n\
    \        long temp1=lst[0];\n        if(temp1==2||temp1==3||temp1==5||temp1==7){\n\
    \            temp=temp1;\n            break;\n        }\n        for(long i=2;i<=temp1/2;i++){\n\
    \            if(temp1%i==0){\n                lst.erase(lst.begin());\n      \
    \          break;\n            }\n            if(i==temp1/2-1){\n            \
    \    temp=temp1;\n                break;\n            }\n        }\n        if(temp!=0){\n\
    \            break;\n        }\n    }\n    while(temp){\n        long temp1=temp%10;\n\
    \        lst.push_back(temp1);\n        temp=temp/10;\n    }\n    long sum=0;\n\
    \    for(long i=0;i<lst.size();i++){\n        sum=sum+lst[i];\n    }\n    return\
    \ sum;", "\tint max_prime = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\
    bool isPrime = true;\n\t\tif (lst[i] <= 1) {\n\t\t\tisPrime = false;\n\t\t}\n\t\
    \telse if (lst[i] <= 3) {\n\t\t\tisPrime = true;\n\t\t}\n\t\telse if (lst[i] %\
    \ 2 == 0 || lst[i] % 3 == 0) {\n\t\t\tisPrime = false;\n\t\t}\n\t\telse {\n\t\t\
    \tfor (int j = 5; j*j <= lst[i]; j += 6) {\n\t\t\t\tif (lst[i] % j == 0 || lst[i]\
    \ % (j + 2) == 0) {\n\t\t\t\t\tisPrime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tif (lst[i] > max_prime) {\n\t\t\t\t\
    max_prime = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tint sum = 0;\n\twhile (max_prime !=\
    \ 0) {\n\t\tsum += max_prime % 10;\n\t\tmax_prime /= 10;\n\t}\n\treturn sum;",
  "  long max = -1;\n  long sum = 0;\n  for (auto i : lst) {\n    if (i > max) {\n\
    \      if (std::__gcd(i, max) == 1)\n        max = i;\n    }\n  }\n  if (max <\
    \ 0)\n    return -1;\n  while (max != 0) {\n    sum += max % 10;\n    max /= 10;\n\
    \  }\n  return sum;", "  long ans=0;\n  for(int i=0;i<lst.size();i++){\n    long\
    \ x=lst[i];\n    if(x==0) continue;\n    long prev=x;\n    for(int j=i+1;j<lst.size();j++){\n\
    \      if(lst[j]==0)continue;\n      x=lst[j];\n      if(prev%x==0){\n       \
    \ lst[j]=0;\n      }\n      else if(x%prev==0){\n        lst[i]=0;\n        break;\n\
    \      }\n    }\n  }\n  long max=-1;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]>max){\n\
    \      max=lst[i];\n    }\n  }\n  while(max!=0){\n    ans+=max%10;\n    max/=10;\n\
    \  }\n  return ans;", "  std::map<long, long> mp;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (mp.find(lst[i]) == mp.end())\n      mp[lst[i]] = 1;\n    else\n\
    \      mp[lst[i]]++;\n  }\n  std::map<long, long>::iterator itr;\n  long val;\n\
    \  long max = 0;\n  for (itr = mp.begin(); itr != mp.end(); itr++) {\n    val\
    \ = itr->first;\n    if (max < val)\n      max = val;\n  }\n  int sum = 0;\n \
    \ while (max > 0) {\n    sum += max % 10;\n    max /= 10;\n  }\n  return sum;",
  "  auto is_prime = [](long n) {\n    if (n < 2) {\n      return false;\n    } else\
    \ if (n < 4) {\n      return true;\n    } else if (n % 2 == 0) {\n      return\
    \ false;\n    } else {\n      for (int i = 3; i <= std::sqrt(n); i += 2) {\n \
    \       if (n % i == 0) {\n          return false;\n        }\n      }\n     \
    \ return true;\n    }\n  };\n  std::sort(lst.begin(), lst.end());\n  long res\
    \ = lst.back();\n  while (!is_prime(res)) {\n    res--;\n  }\n  long sum = 0;\n\
    \  for (auto x : std::to_string(res)) {\n    sum += x - '0';\n  }\n  return sum;",
  "    std::vector<int> prime= {0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1};\n\
    \    long max_prime=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<=1){\n\
    \            continue;\n        }\n        if(prime[lst[i]]==1){\n           \
    \ max_prime=std::max(max_prime,lst[i]);\n        }\n    }\n    if(max_prime==0){\n\
    \        return -1;\n    }\n    int c=0;\n    while(max_prime!=0){\n        c+=max_prime%10;\n\
    \        max_prime/=10;\n    }\n    return c;", "  long max = -1;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  bool isPrime = true;\n  for (int i = 2; i <= max; i++) {\n    isPrime\
    \ = true;\n    for (int j = 2; j < i; j++) {\n      if (i % j == 0) {\n      \
    \  isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
    \  return i;\n    }\n  }\n  return -1;", "\tsort(lst.begin(), lst.end());\n\t\
    long max = 0;\n\tfor (int i = lst.size() - 1; i >= 0; i--) {\n\t\tif (lst[i] ==\
    \ 2) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] -= 1;\n\
    \t\t}\n\t\tif (lst[i] == 1) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool isPrime = true;\n\
    \t\tfor (int j = 3; j < lst[i]; j += 2) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\
    \tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\t\
    max = lst[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max != 0) {\n\
    \t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;", "  long max = 0;\n\
    \  long sum = 0;\n  bool flag = true;\n  int ileRazyPetli = 0;\n  std::cout <<\
    \ \"size : \" << lst.size() << std::endl;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    flag = true;\n    for (long j = 2; j <= sqrt(lst[i]); j++) {\n \
    \     if (lst[i] % j == 0) {\n        flag = false;\n        break;\n      }\n\
    \    }\n    if (flag) {\n      if (lst[i] > max) {\n        max = lst[i];\n  \
    \    }\n    }\n  }\n  while (max > 0) {\n    sum += max % 10;\n    max /= 10;\n\
    \  }\n  return sum;", "    long max = -1;\n    for(auto i : lst)\n    {\n    \
    \    if(i > max)\n        {\n            long j = 2;\n            for(; j <= i;\
    \ ++j)\n            {\n                if(i % j == 0)\n                {\n   \
    \                 break;\n                }\n            }\n            if(j ==\
    \ i + 1)\n            {\n                max = i;\n            }\n        }\n\
    \    }\n    int sum = 0;\n    while(max > 0)\n    {\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    return sum;", "    for(long i=0;i<lst.size();i++){\n\
    \        for(long j=lst.size()-1;j>i;j--){\n            if(lst[j]>lst[j-1]){\n\
    \                long temp = lst[j];\n                lst[j] = lst[j-1];\n   \
    \             lst[j-1] = temp;\n            }\n        }\n    }\n    long prime\
    \ = 0;\n    for(long i=0;i<lst.size();i++){\n        long flag = 0;\n        if(lst[i]==1){\n\
    \            continue;\n        }\n        for(long j=2;j<lst[i];j++){\n     \
    \       if(lst[i]%j==0){\n                flag = 1;\n                break;\n\
    \            }\n        }\n        if(flag==0){\n            prime = lst[i];\n\
    \            break;\n        }\n    }\n    if(prime==0){\n        return 0;\n\
    \    }\n    std::vector<long> digits;\n    while(prime!=0){\n        digits.push_back(prime%10);\n\
    \        prime/=10;\n    }\n    long sum = 0;\n    for(long i=0;i<digits.size();i++){\n\
    \        sum+=digits[i];\n    }\n    return sum;", "    std::sort(lst.begin(),\
    \ lst.end());\n    // std::cout << std::endl;\n    // for (auto i : lst) {\n \
    \   //     std::cout << i << \" \";\n    // }\n    // std::cout << std::endl;\n\
    \    long val = lst[lst.size() - 1];\n    long prime_val = 0;\n    long sum =\
    \ 0;\n    bool isPrime = true;\n    while (val != 0) {\n        isPrime = true;\n\
    \        for (long i = 2; i < val / 2; i++) {\n            if (val % i == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) {\n            prime_val = val;\n            break;\n\
    \        }\n        val--;\n    }\n    while (prime_val != 0) {\n        sum +=\
    \ prime_val % 10;\n        prime_val /= 10;\n    }\n    return sum;", "  if(lst.size()\
    \ == 0) return 0;\n  if(lst.size() == 1) return lst[0];\n  long largest = lst[0];\n\
    \  for(int i = 1; i < lst.size(); i++)\n    if(lst[i] > largest) largest = lst[i];\n\
    \  if(largest < 2) return 0;\n  for(int i = 2; i <= largest/2; i++)\n    if(largest\
    \ % i == 0) return 0;\n  long sum = 0;\n  while(largest > 0){\n    sum += largest\
    \ % 10;\n    largest /= 10;\n  }\n  return sum;", "  long max_prime=1;\n  for(long\
    \ i=0;i<lst.size();i++){\n    long num=lst[i];\n    bool flag=1;\n    for(long\
    \ j=2;j<=sqrt(num);j++){\n      if(num%j==0){\n        flag=0;\n        break;\n\
    \      }\n    }\n    if(flag && num>max_prime){\n      max_prime=num;\n    }\n\
    \  }\n  int sum=0;\n  while(max_prime){\n    sum+=max_prime%10;\n    max_prime/=10;\n\
    \  }\n  return sum;", "    int64_t max = 0;\n    for (int64_t i = 0; i < lst.size();\
    \ i++) {\n        int64_t n = lst[i];\n        while (n%2 == 0) {\n          \
    \  n /= 2;\n        }\n        for (int64_t i = 3; i <= sqrt(n); i += 2) {\n \
    \           while (n%i == 0) {\n                n /= i;\n            }\n     \
    \   }\n        if (n > 2 && n > max) max = n;\n    }\n    int64_t sum = 0;\n \
    \   while (max) {\n        sum += max%10;\n        max /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    std::vector<long> factors;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        for (int x = 1; x <= lst[i]; x++)\
    \ {\n            if (lst[i] % x == 0) {\n                factors.push_back(x);\n\
    \            }\n        }\n        for (int j = 0; j < factors.size(); j++) {\n\
    \            if (factors[j] == 1 || factors[j] == lst[i]) {\n                continue;\n\
    \            }\n            else {\n                if (lst[i] % factors[j] ==\
    \ 0) {\n                    break;\n                }\n                else {\n\
    \                    if (factors[j] > largest_prime) {\n                     \
    \   largest_prime = factors[j];\n                    }\n                }\n  \
    \          }\n        }\n        factors.clear();\n    }\n    long answer = 0;\n\
    \    while (largest_prime != 0) {\n        answer += largest_prime % 10;\n   \
    \     largest_prime /= 10;\n    }\n    return answer;", "    // making an array\
    \ of primes less than 100000\n    std::vector<bool> primes(100000, true);\n  \
    \  primes[0] = false;\n    primes[1] = false;\n    for (int i = 2; i <= 100000;\
    \ i++) {\n        if (primes[i]) {\n            for (int j = i * 2; j <= 100000;\
    \ j += i) {\n                primes[j] = false;\n            }\n        }\n  \
    \  }\n    // finding a prime that is greater than maximum of the numbers in the\
    \ array\n    long sum = 0;\n    std::sort(lst.begin(), lst.end());\n    if (lst[lst.size()\
    \ - 1] <= 100000) {\n        sum = lst[lst.size() - 1];\n    } else {\n      \
    \  long max = lst[lst.size() - 1];\n        while (sum < max) {\n            sum++;\n\
    \            if (primes[sum]) {\n                break;\n            }\n     \
    \   }\n    }\n    long ans = 0;\n    while (sum > 0) {\n        ans += sum % 10;\n\
    \        sum /= 10;\n    }\n    return ans;"]
stop_tokens:
- "\n}"
