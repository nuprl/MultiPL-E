language: cpp
name: HumanEval_80_is_happy
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppktr4pd0: /tmp/tmppktr4pd0.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    int a = (int)s[0];\n    int b = (int)s[1];\n    int c = (int)s[2];\n    for(int\
    \ i=3;i<s.length();i++){\n        int d = (int)s[i];\n        if(a==b && b==c)\
    \ return false;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqzse513c: /tmp/tmpqzse513c.cpp:32: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3)\n    return false;\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpzhnbk0zo: /tmp/tmpzhnbk0zo.cpp:22: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    bool check = true;\n    for(int i=0;i<s.length()-2;i++){\n     \
    \   if(s[i]==s[i+1]&&s[i+1]==s[i+2]){\n            check = false;\n          \
    \  break;\n        }\n    }\n    return check;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps5220lq0: /tmp/tmps5220lq0.cpp:30: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // Write your code here\n  if(s.length()\
    \ < 3) return false;\n  for(int i = 2; i < s.length(); i++){\n      if(s[i] ==\
    \ s[i-1] && s[i] == s[i-2]) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpf36wpvi_: /tmp/tmpf36wpvi_.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int flag = 0;\n    if(s.length()\
    \ < 3)\n        return false;\n    for(int i = 0; i < s.length() - 3; i++)\n \
    \   {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2])\n            flag = 1;\n\
    \    }\n    if(flag == 1)\n        return false;\n    else\n        return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5x4cegd3: /tmp/tmp5x4cegd3.cpp:32: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyx1g78y5: /tmp/tmpyx1g78y5.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzervmeu: /tmp/tmpfzervmeu.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=2;i<s.length();i++)\n  {\n    if(s[i]==s[i-1] && s[i]==s[i-2])\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpll8osyoo: /tmp/tmpll8osyoo.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    int flag\
    \ = 0;\n    int c = 0;\n    int l = s.length();\n    if(l < 3)\n        return\
    \ false;\n    else\n    {\n        for(int i = 0; i < l - 2; i++)\n        {\n\
    \            if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\
    \            {\n                c++;\n            }\n        }\n        if(c ==\
    \ 0)\n            return true;\n        else\n            return false;\n    }\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    set<char> st;\n    for(int i=0;i<s.length();i++)\n    {\n      \
    \  if(st.find(s[i])!=st.end())\n            return false;\n        else\n    \
    \        st.insert(s[i]);\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55q24drh.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp55q24drh.cpp:16:5: error: \u2018set\u2019 was not declared in this\
    \ scope\n   16 |     set<char> st;\n      |     ^~~\n/tmp/tmp55q24drh.cpp:16:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp55q24drh.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp55q24drh.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmp55q24drh.cpp:16:9:\
    \ error: expected primary-expression before \u2018char\u2019\n   16 |     set<char>\
    \ st;\n      |         ^~~~\n/tmp/tmp55q24drh.cpp:19:12: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018s\u2019?\n   19 |       \
    \  if(st.find(s[i])!=st.end())\n      |            ^~\n      |            s\n"
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code goes here\n    if(s.length()\
    \ < 3)\n        return false;\n    for(int i = 0; i < s.length() - 2; i++)\n \
    \   {\n        std::string str = s.substr(i, 3);\n        if(str[0] == str[1]\
    \ || str[0] == str[2] || str[1] == str[2])\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int i,size=s.size();\n    if(size<3)\
    \ return false;\n    for(i=0;i<size-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tint size = s.size();\n\tif (size\
    \ < 3)\n\t\treturn false;\n\tfor (int i = 0; i < size - 2; i++) {\n\t\tif (s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    std::cout << s << std::endl;\n\
    \    if (s.length() < 3) {\n        return false;\n    } else {\n        for (int\
    \ i = 0; i < s.length() - 2; i++) {\n            if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n                return false;\n            }\n        }\n  \
    \      return true;\n    }\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe7xoduch: /tmp/tmpe7xoduch.cpp:31: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: 'a

    aa

    abcd

    aabb

    '
  timestamp: 1660134338
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int sum = 0;\n  // Your code here\n\
    \  for(int i = 0; i < s.length()-2; i++){\n    if(s[i] != s[i+1] && s[i] != s[i+2]\
    \ && s[i+1] != s[i+2]){\n      sum++;\n    }\n  }\n  if(sum > 0){\n    return\
    \ true;\n  }\n  else{\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int n = s.length();\n  for (int\
    \ i = 0; i < n - 2; i++) {\n    if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n\
    \      return false;\n    }\n  }\n  return n >= 3;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphf5wjgi5: /tmp/tmphf5wjgi5.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int l = s.length();\n  if(l < 3)\
    \ return false;\n  for(int i = 0; i < l - 2; i++) {\n    if(s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // if the length of string is\
    \ less than 3, it can't be happy.\n    if (s.length() < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        // if 3 consecutive\
    \ letters are not distinct, the string can't be happy.\n        if (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // TODO: your code here\n    if(s.length()\
    \ < 3) return false;\n    for(int i = 0; i < s.length() - 2; i++){\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t// First, we check the length of\
    \ the string\n\tif (s.length() < 3) {\n\t\treturn false;\n\t}\n\t// We iterate\
    \ through the string\n\tfor (int i = 2; i < s.length(); i++) {\n\t\t// We compare\
    \ the letter with the previous one\n\t\tif (s[i] == s[i - 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t// We compare the letter with the one from two positions\
    \ before\n\t\tif (s[i] == s[i - 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // check if string is happy or\
    \ not\n    // your code here\n    for(int i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph3puzhoh: /tmp/tmph3puzhoh.cpp:25: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t// TODO\n\t//cout << \"hello world\"\
    ;\n\tint count = 0;\n\tint len = s.length();\n\tfor (int i = 0; i < len; i++)\
    \ {\n\t\tif (i + 3 < len) {\n\t\t\tif (s[i] != s[i + 1] && s[i] != s[i + 2] &&\
    \ s[i + 1] != s[i + 2]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t//cout <<\
    \ count;\n\tif (count > 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpeej_29_g: /tmp/tmpeej_29_g.cpp:39: int main(): Assertion `candidate(("adb"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptap763he: /tmp/tmptap763he.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3hz104dn: /tmp/tmp3hz104dn.cpp:21: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return (s.length() >= 3 && s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]);\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplnffgebw: /tmp/tmplnffgebw.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return (s.length() > 2) && (s[0]\
    \ != s[1]) && (s[1] != s[2]) && (s[0] != s[2]);\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3datryv7: /tmp/tmp3datryv7.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tint n = s.length();\n\tif (n < 3)\n\
    \t\treturn false;\n\tfor (int i = 0; i < n - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n    \
    \    return false;\n    }\n    else\n    {\n        for(int i=0;i<s.length()-2;i++)\n\
    \        {\n            if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n     \
    \       {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3) return false;\n\
    \  for(int i=0;i<s.length()-2;i++){\n    if(s[i]==s[i+1] && s[i]==s[i+2]) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr91zx9om: /tmp/tmpr91zx9om.cpp:25: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\treturn (s.length() > 2) && (s[0]\
    \ != s[1]) && (s[1] != s[2]) && (s[0] != s[2]);\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg2k5h670: /tmp/tmpg2k5h670.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfoq11xaf: /tmp/tmpfoq11xaf.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    bool flag = true;\n    for(int i=0;i<s.length()-3;i++){\n        flag = true;\n\
    \        for(int j=i+1;j<i+3;j++){\n            if(s[i]==s[j]) {\n           \
    \     flag = false;\n                break;\n            }\n        }\n      \
    \  if(!flag) break;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw63gkfz2: /tmp/tmpw63gkfz2.cpp:35: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return (s.length() >= 3) && s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2];\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5atxtjcv: /tmp/tmp5atxtjcv.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  //Check if length is at least 3\n\
    \  if(s.length() < 3)\n    return false;\n  //Iterate through a string and check\
    \ if each three consecutive\n  //letters are unique\n  for(int i = 0; i < s.length()\
    \ - 2; i++)\n  {\n    //Create temporary string\n    std::string temp = \"\";\n\
    \    //Append each 3 letters to the temp string\n    temp.append(s, i, 3);\n \
    \   //If any of the characters are equal, then return false\n    if(temp[0] ==\
    \ temp[1] || temp[0] == temp[2] || temp[1] == temp[2])\n      return false;\n\
    \  }\n  //If no letters are equal return true\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n\tif (s.length() < 3)\n\t\t\
    return false;\n\tfor (int i = 0; i < s.length() - 2; i++)\n\t{\n\t\tif (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // write your code here\n  int i,len=s.length();\n\
    \  if(len<3)\n    return false;\n  for(i=0;i<len-2;i++)\n  {\n    if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3)\n  {\n    return\
    \ false;\n  }\n  for(int i = 0; i < s.length() - 2; i++)\n  {\n    if(s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n    {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3)\n        return false;\n    for(int i = 0; i < len - 2; i++)\n    {\n \
    \       if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.length()-2;i++){\n\
    \        if(s[i]==s[i+1]&&s[i+1]==s[i+2]){\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph5vh61rp: /tmp/tmph5vh61rp.cpp:24: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=2;i<s.length();i++)\n  {\n    if(s[i]==s[i-1] && s[i]==s[i-2])\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpll8osyoo: /tmp/tmpll8osyoo.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int n = s.length();\n  for (int\
    \ i = 0; i < n-2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpod15sofv: /tmp/tmpod15sofv.cpp:24: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Need to check if length is\
    \ at least 3\n    if (s.length() < 3) {\n        return false;\n    }\n    //\
    \ Create a new vector to hold the values\n    std::vector<char> data(s.begin(),\
    \ s.end());\n    // Set a loop to go through the vector\n    for (int i = 0; i\
    \ < data.size() - 2; i++) {\n        // If the number at data[i] is the same as\
    \ data[i+1] or data[i+2] then return false\n        if (data[i] == data[i+1] ||\
    \ data[i] == data[i+2]) {\n            return false;\n        }\n    }\n    //\
    \ Return true\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpscr0nkfb: /tmp/tmpscr0nkfb.cpp:37: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // write your code here\n    int\
    \ size = s.size();\n    if(size >= 3){\n      int last = size - 1;\n      for(int\
    \ i = 0; i < last; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n  \
    \        return false;\n        }\n      }\n      return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxskyzieq: /tmp/tmpxskyzieq.cpp:32: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_2e09gpd: /tmp/tmp_2e09gpd.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1]&&s[i]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7lywpwsc: /tmp/tmp7lywpwsc.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)return false;\n\
    \    for(int i=2;i<s.length();i++){\n        if(s[i]==s[i-1] || s[i]==s[i-2] ||\
    \ s[i-1]==s[i-2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdix_vdix: /tmp/tmpdix_vdix.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t//your code here\n\tint len = s.length();\n\
    \tif (len < 3)\n\t\treturn false;\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\
    \tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi73ntb8x: /tmp/tmpi73ntb8x.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi73ntb8x: /tmp/tmpi73ntb8x.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool isHappy = true;\n    int\
    \ strLength = s.length();\n    if(strLength >= 3){\n        for(int i = 0; i <\
    \ strLength - 2; i++){\n            if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2]){\n                isHappy = false;\n                break;\n    \
    \        }\n        }\n    }\n    else{\n        isHappy = false;\n    }\n   \
    \ return isHappy;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    std::set<char> chars;\n    int\
    \ len = s.length();\n    if (len < 3) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < len; i++) {\n        if (i < 2) {\n            chars.insert(s[i]);\n\
    \        } else {\n            if (chars.find(s[i]) != chars.end()) {\n      \
    \          return false;\n            } else {\n                chars.insert(s[i]);\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdodq0gym: /tmp/tmpdodq0gym.cpp:40: int main(): Assertion `candidate(("iopaxpoi"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int n = s.length();\n  if(n < 3)\
    \ return false;\n  std::set<char> st;\n  for(int i = 0; i < n; i++)\n    st.insert(s[i]);\n\
    \  return st.size() == n;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5_w8bou3: /tmp/tmp5_w8bou3.cpp:29: int main(): Assertion `candidate(("iopaxpoi"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    if(s[0] == s[1] && s[1] == s[2]) return false;\n    for(int i = 3; i < s.length();\
    \ i++){\n        if(s[i] == s[i-1] && s[i-1] == s[i-2]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1za4kaff: /tmp/tmp1za4kaff.cpp:26: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]&&s[i]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfiutssmg: /tmp/tmpfiutssmg.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n    {\n  \
    \      return false;\n    }\n    for(int i = 0; i < s.length() - 2; i++)\n   \
    \ {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdix_vdix: /tmp/tmpdix_vdix.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return (s.length() >= 3 && s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]);\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplnffgebw: /tmp/tmplnffgebw.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  for (int i = 0; i < s.size() - 2;\
    \ i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr5__4vyc: /tmp/tmpr5__4vyc.cpp:24: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd5t7063n: /tmp/tmpd5t7063n.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    bool res = true;\n    for(int i=0;i<n-2;i++){\n  \
    \      if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n            res =\
    \ false;\n            break;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    //\
    \ length at least 3\n    if (s.length() < 3) {\n        return false;\n    }\n\
    \    // use set to check no duplicate\n    // \n    std::set<char> myset;\n  \
    \  myset.insert(s[0]);\n    myset.insert(s[1]);\n    myset.insert(s[2]);\n   \
    \ if (myset.size() == 3) {\n        return true;\n    }\n    // scan the rest\
    \ string\n    for (int i = 3; i < s.length(); i++) {\n        myset.erase(s[i-3]);\n\
    \        myset.insert(s[i]);\n        if (myset.size() == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprk90nwxh: /tmp/tmprk90nwxh.cpp:47: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    std::set<char> characters;\n    for(int i = 0; i < s.length(); i++) {\n \
    \       characters.insert(s[i]);\n    }\n    if(characters.size() < 3) return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    int\
    \ n = s.length();\n    if(n < 3) {\n        return false;\n    }\n    for(int\
    \ i = 0; i < n - 2; i++) {\n        if(s[i] == s[i + 1] || s[i] == s[i + 2] ||\
    \ s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134340
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()>=3){\n        for(int\
    \ i=2;i<s.length();i++){\n            if(s[i]==s[i-1] || s[i]==s[i-2] || s[i-1]==s[i-2]){\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()>=3){\n\
    \        for(int i=0;i<s.length()-2;i++){\n            if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    if(s[0] == s[1] || s[1] == s[2] || s[0] == s[2])\n        return\
    \ false;\n    int count = 1;\n    while(count < s.length() - 2){\n        if(s[count]\
    \ == s[count + 1] || s[count + 1] == s[count + 2] || s[count] == s[count + 2])\n\
    \            return false;\n        count++;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tint len = s.length();\n\tif (len\
    \ < 3) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i <= len - 3; i++) {\n\t\t\
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3) return false;\n\
    \  return (s[0]!=s[1] && s[1]!=s[2] && s[0]!=s[2]);\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8o8u0fr0: /tmp/tmp8o8u0fr0.cpp:26: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  for (int i = 0; i < s.length() -\
    \ 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_v3q5rhl: /tmp/tmp_v3q5rhl.cpp:24: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\telse {\n\t\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\t\tif (s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\t\treturn false;\n\
    \t\t}\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()<3)\n\
    \        return false;\n    char c1=s[0];\n    char c2=s[1];\n    char c3=s[2];\n\
    \    for(int i=3;i<s.length();i++){\n        if(c1==c2 || c2==c3 || c1==c3)\n\
    \            return false;\n        c1=c2;\n        c2=c3;\n        c3=s[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9tryqwmj: /tmp/tmp9tryqwmj.cpp:36: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t// your code here\n\tint arr[4]\
    \ = { 0 };\n\tint count = 0;\n\tif (s.length() < 3)\n\t\treturn false;\n\tfor\
    \ (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == 'a')\n\t\t\tarr[0]++;\n\
    \t\telse if (s[i] == 'b')\n\t\t\tarr[1]++;\n\t\telse if (s[i] == 'c')\n\t\t\t\
    arr[2]++;\n\t\telse if (s[i] == 'd')\n\t\t\tarr[3]++;\n\t}\n\tfor (int i = 0;\
    \ i < 4; i++)\n\t{\n\t\tif (arr[i] != 0)\n\t\t\tcount++;\n\t}\n\tif (count ==\
    \ 1)\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp57oa43v7: /tmp/tmp57oa43v7.cpp:43: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n    \
    \    return false;\n    }\n    bool ishappy=true;\n    for(int i=0;i<s.length()-2;i++)\n\
    \    {\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n        {\n\
    \            ishappy=false;\n            break;\n        }\n    }\n    return\
    \ ishappy;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tbool flag = true;\n\tfor (int i = 0; i < s.length() - 2; i++)\
    \ {\n\t\tif (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n\t\t\tflag = false;\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpys0fl5io: /tmp/tmpys0fl5io.cpp:31: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  int len = s.length();\n  for(int i=0;i<len-2;i++){\n    if(s[i]==s[i+1] ||\
    \ s[i]==s[i+2] || s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return s.size() >= 3 && std::unordered_set<char>(s.begin(),\
    \ s.begin() + 3).size() == 3;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpya63vkew: /tmp/tmpya63vkew.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmprwyitqhw: /tmp/tmprwyitqhw.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.length()-2;i++){\n\
    \        if(s[i]==s[i+1]&&s[i+1]==s[i+2]){\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph5vh61rp: /tmp/tmph5vh61rp.cpp:24: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t// check that the string has at\
    \ least 3 characters\n\tif (s.length() < 3) return false;\n\t// iterate over the\
    \ string starting at index 1\n\tfor (int i = 1; i < s.length() - 1; i++) {\n\t\
    \t// if the character is the same as the one before it\n\t\tif (s[i] == s[i -\
    \ 1]) return false;\n\t\t// if the character is the same as the one after it\n\
    \t\tif (s[i] == s[i + 1]) return false;\n\t}\n\t// if the string has passed all\
    \ the checks, it's happy\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi9djv1qq: /tmp/tmpi9djv1qq.cpp:35: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)return\
    \ false;\n    for(int i=0;i<n-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2])return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  bool result = true;\n  if (s.length()\
    \ < 3)\n    result = false;\n  else {\n    for (int i = 0; i < s.length() - 2;\
    \ i++) {\n      if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2])\n        result = false;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len<3)\n\
    \        return false;\n    for(int i=0;i<len-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpt954k688: /tmp/tmpt954k688.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmprwyitqhw: /tmp/tmprwyitqhw.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    return (s[0]!=s[1]&&s[1]!=s[2]&&s[0]!=s[2]);\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1vesu3nw: /tmp/tmp1vesu3nw.cpp:27: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // Your code here\n  int L = s.length();\n\
    \  bool res = false;\n  if(L < 3)\n    return res;\n  else{\n    for(int i = 0;\
    \ i < L - 2; i++){\n      if(s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2])\n\
    \        res = true;\n      else{\n        res = false;\n        break;\n    \
    \  }\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool happy = true;\n    if(s.length()\
    \ < 3)\n        happy = false;\n    else {\n        for(int i = 2; i < s.length();\
    \ i++){\n            if(s[i] == s[i-1] && s[i] == s[i-2])\n                happy\
    \ = false;\n        }\n    }\n    return happy;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm9g94508: /tmp/tmpm9g94508.cpp:30: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tint counter = 0;\n\tif (s.length()\
    \ < 3) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\
    \t\tif (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n\t\t\tcounter++;\n\t\t}\n\t}\n\
    \tif (counter > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptgd1zlj7: /tmp/tmptgd1zlj7.cpp:33: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int len = s.length();\n  if (len\
    \ < 3) {\n    return false;\n  }\n  for (int i = 0; i < len - 2; i++) {\n    if\
    \ (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // Your code here\n  int L = s.length();\n\
    \  if(L<3)\n    return false;\n  else\n  {\n    for(int i=0;i<L-2;i++)\n    {\n\
    \      if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n        return false;\n\
    \    }\n    return true;\n  }\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 2; i < s.length(); i++){\n    if(s[i] == s[i-1] && s[i] == s[i-2]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdvmhknzr: /tmp/tmpdvmhknzr.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd5t7063n: /tmp/tmpd5t7063n.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    int\
    \ count=0;\n    if(s.length()<3)\n    {\n        return false;\n    }\n    for(int\
    \ i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \        {\n            count=1;\n            break;\n        }\n    }\n    if(count==1)\n\
    \    {\n        return false;\n    }\n    else\n    {\n        return true;\n\
    \    }\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 2; i < s.length(); i++) {\n        if(s[i] == s[i-1] && s[i]\
    \ == s[i-2]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp76vew67p: /tmp/tmp76vew67p.cpp:25: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // Your code here\n  if(s.length()\
    \ < 3)\n    return false;\n  for(int i = 0; i < s.length() - 2; i++)\n  {\n  \
    \  if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool happy = false;\n    // length\
    \ of string must be at least 3\n    if (s.length() >= 3) {\n        // counter\
    \ for consecutive letters in the string\n        int consec = 0;\n        // previous\
    \ letter checked\n        char prev = s[0];\n        // iterate through all letters\
    \ in the string\n        for (int i = 1; i < s.length(); i++) {\n            //\
    \ if the current letter is different from the previous letter\n            if\
    \ (s[i] != prev) {\n                // check if the next letter is the same as\
    \ the current letter\n                if (s[i] == s[i + 1]) {\n              \
    \      // if it is not the last letter, set the previous letter to the current\
    \ letter\n                    if (i != s.length() - 1) {\n                   \
    \     prev = s[i];\n                    }\n                    // if the previous\
    \ letter matches the current letter, increment the counter\n                 \
    \   consec++;\n                }\n                // if the next letter is not\
    \ the same as the current letter, reset the counter\n                else {\n\
    \                    consec = 0;\n                }\n            }\n         \
    \   // if the counter for consecutive letters equals 2, the string is happy\n\
    \            if (consec == 2) {\n                happy = true;\n            }\n\
    \        }\n    }\n    return happy;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfdyxgspz: /tmp/tmpfdyxgspz.cpp:51: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  std::unordered_set<char> seen;\n\
    \  int i = 0;\n  while (i < s.size()) {\n    if (seen.count(s[i]) != 0) {\n  \
    \    return false;\n    }\n    seen.insert(s[i]);\n    i++;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnc401gwm: /tmp/tmpnc401gwm.cpp:27: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  //your code here\n  int i = 1;\n\
    \  while(i < s.length()){\n    if(s[i] == s[i-1]) return false;\n    i++;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8yl3wo1z: /tmp/tmp8yl3wo1z.cpp:24: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfc9i2rsn: /tmp/tmpfc9i2rsn.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3) return false;\n    for(int i = 0; i < len - 2; i++) {\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3)\n  {\n    return\
    \ false;\n  }\n  else if (s.length() == 3)\n  {\n    return (s[0] != s[1] && s[1]\
    \ != s[2] && s[0] != s[2]);\n  }\n  else\n  {\n    return (s[0] != s[1] && s[1]\
    \ != s[2] && s[0] != s[2] && is_happy(s.substr(1, s.length() - 1)));\n  }\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n  if(s.length()<3)\n\
    \    return false;\n  else if(s.length()==3){\n    if(s[0]!=s[1]&&s[1]!=s[2]&&s[0]!=s[2])\n\
    \      return true;\n    else\n      return false;\n  }\n  else{\n    for(int\
    \ i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1]||s[i+1]==s[i+2]||s[i]==s[i+2])\n\
    \        return false;\n    }\n    return true;\n  }\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    set<char> s1;\n    for(int i=0;i<n-2;i++)\n    {\n\
    \        s1.insert(s[i]);\n        s1.insert(s[i+1]);\n        s1.insert(s[i+2]);\n\
    \        if(s1.size()==3)\n            return true;\n        s1.clear();\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkotwixth.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpkotwixth.cpp:17:5: error: \u2018set\u2019 was not declared in this\
    \ scope\n   17 |     set<char> s1;\n      |     ^~~\n/tmp/tmpkotwixth.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkotwixth.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkotwixth.cpp:2:\n/usr/include/c++/9/set:82:13:\
    \ note:   \u2018std::pmr::set\u2019\n   82 |       using set = std::set<_Key,\
    \ _Cmp, polymorphic_allocator<_Key>>;\n      |             ^~~\n/tmp/tmpkotwixth.cpp:17:9:\
    \ error: expected primary-expression before \u2018char\u2019\n   17 |     set<char>\
    \ s1;\n      |         ^~~~\n/tmp/tmpkotwixth.cpp:20:9: error: \u2018s1\u2019\
    \ was not declared in this scope; did you mean \u2018s\u2019?\n   20 |       \
    \  s1.insert(s[i]);\n      |         ^~\n      |         s\n"
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_2e09gpd: /tmp/tmp_2e09gpd.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len<3)\
    \ return false;\n    for(int i=0;i<len-2;i++){\n        if(s[i]==s[i+1] && s[i]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpds7hk_9_: /tmp/tmpds7hk_9_.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n    \
    \    return false;\n    }\n    int n=s.length();\n    std::set<char> st;\n   \
    \ for(int i=0;i<3;i++)\n    {\n        st.insert(s[i]);\n    }\n    int count=0;\n\
    \    for(int i=3;i<n;i++)\n    {\n        if(st.count(s[i])==0)\n        {\n \
    \           st.erase(s[i-3]);\n            st.insert(s[i]);\n            count++;\n\
    \        }\n    }\n    if(count==n-3)\n    {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3adr29f3: /tmp/tmp3adr29f3.cpp:47: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n  if(s.length()<3)\n\
    \  return false;\n  for(int i=0;i<s.length()-2;i++)\n  {\n      if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool is_happy = true;\n    int\
    \ s_length = s.length();\n    if (s_length < 3)\n        return false;\n    for\
    \ (int i = 0; i < s_length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]) {\n            is_happy = false;\n       \
    \     break;\n        }\n    }\n    return is_happy;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n  return false;\n\
    \  char x=s[0];\n  char y=s[1];\n  char z=s[2];\n  for(int i=3;i<s.length();i++)\n\
    \  {\n    if(x==y||y==z||z==x)\n    return false;\n    x=y;\n    y=z;\n    z=s[i];\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpq14gv0_2: /tmp/tmpq14gv0_2.cpp:36: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tint i = 0;\n\tfor (i = 0; i < s.length()\
    \ - 2; i++) {\n\t\tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i\
    \ + 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpupr5birj: /tmp/tmpupr5birj.cpp:25: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    char c = s[0];\n    char d = s[1];\n    char e = s[2];\n    for(int i = 3;\
    \ i < s.length(); i++){\n        c = d;\n        d = e;\n        e = s[i];\n \
    \       if(c == d || d == e || c == e) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkws2vrab: /tmp/tmpkws2vrab.cpp:33: int main(): Assertion `candidate(("xyy"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3) return false;\n    for(int i = 0; i < len - 2; i++) {\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 2; i < s.length(); i++) {\n    if(s[i] == s[i-1] && s[i] == s[i-2])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfhua8h5b: /tmp/tmpfhua8h5b.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return s.size() >= 3 && std::unique(std::begin(s),\
    \ std::end(s), [](char a, char b) {\n        return a == b;\n    }).size() ==\
    \ s.size();\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1lgyzns.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpv1lgyzns.cpp:16:8: error: \u2018class __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 has no member named \u2018size\u2019\
    \n   16 |     }).size() == s.size();\n      |        ^~~~\n"
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi73ntb8x: /tmp/tmpi73ntb8x.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int happy[10]={0};\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  //your code here\n  if(s.length()<3)\n\
    \  return false;\n  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n    return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()>=3){\n        for(int\
    \ i=0;i<s.length()-2;i++){\n            if(s[i]==s[i+1] && s[i]==s[i+2]){\n  \
    \              return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8u90lzn7: /tmp/tmp8u90lzn7.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  std::unordered_set<char> se;\n  int i=0;\n  while(i<s.length()){\n    if(se.count(s[i])!=0)\n\
    \      return false;\n    se.insert(s[i]);\n    i++;\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp87afrcut: /tmp/tmp87afrcut.cpp:34: int main(): Assertion `candidate(("iopaxpoi"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return s.size()>=3 && s[0]!=s[1]\
    \ && s[1]!=s[2] && s[0]!=s[2];\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2larsbd_: /tmp/tmp2larsbd_.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t//your code here\n\tstd::string\
    \ t = s;\n\tint i = 0;\n\tint j = 0;\n\tbool result = true;\n\tif (s.length()\
    \ < 3) {\n\t\treturn false;\n\t}\n\tfor (i = 0; i < s.length() - 2; i++) {\n\t\
    \tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\t\
    result = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppqbbdizp: /tmp/tmppqbbdizp.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // write your code here\n  if(s.length()<3)\n\
    \  return false;\n  else{\n    for(int i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n      return false;\n    }\n    return true;\n\
    \  }\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Happy Path\n    if(s.length()\
    \ < 3) return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpakb9k19z: /tmp/tmpakb9k19z.cpp:23: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu1j7t94y: /tmp/tmpu1j7t94y.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool res = false;\n    if(s.length()\
    \ >= 3){\n        res = true;\n        for(int i = 0; i < s.length() - 2; i++){\n\
    \            if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n     \
    \           res = false;\n                break;\n            }\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code goes here!\n    int\
    \ n = s.length();\n    if(n < 3)\n        return false;\n    for(int i = 0; i\
    \ < n-2; i++)\n    {\n        //std::cout << s[i] << s[i+1] << s[i+2] << std::endl;\n\
    \        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n          \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfc9i2rsn: /tmp/tmpfc9i2rsn.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134342
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int result = true;\n  // TODO: your\
    \ code here\n  int i;\n  if(s.length()<3)\n    return false;\n  for(i=0;i<s.length()-2;i++)\n\
    \  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return (s.length() >= 3 && (s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]));\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_dxeo3z7: /tmp/tmp_dxeo3z7.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int m\
    \ = n%3;\n    int checker = 0;\n    for(int i = 0; i < n-3; i+=3){\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n\
    \        }\n    }\n    if(m != 0){\n        checker = s[n-3]^s[n-2]^s[n-1];\n\
    \        if(checker == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpna7u7ocb: /tmp/tmpna7u7ocb.cpp:32: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3) return false;\n\
    \  for(int i=0;i<s.length()-2;i++){\n    if(s[i]==s[i+1] && s[i]==s[i+2]) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr91zx9om: /tmp/tmpr91zx9om.cpp:25: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi73ntb8x: /tmp/tmpi73ntb8x.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  return s.size() >= 3 && (\n    s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]\n  );\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzoyl_dmk: /tmp/tmpzoyl_dmk.cpp:27: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return s.size() >= 3 &&\n    \
    \       s[0] != s[1] &&\n           s[1] != s[2] &&\n           s[0] != s[2];\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmprp2n6klw: /tmp/tmprp2n6klw.cpp:28: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int length = s.length();\n   \
    \ if(length < 3)\n        return false;\n    for(int i = 0; i < length - 3; i++)\n\
    \    {\n        if(s[i] == s[i+1] && s[i] == s[i+2])\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpogqjxxw3: /tmp/tmpogqjxxw3.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd5t7063n: /tmp/tmpd5t7063n.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi73ntb8x: /tmp/tmpi73ntb8x.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyx1g78y5: /tmp/tmpyx1g78y5.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()\
    \ < 3) return false;\n    for(int i = 0; i < s.length() - 2; i++){\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\
    \ return false;\n    for(int i=0;i<n-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int size = s.size();\n    if(size\
    \ < 3) return false;\n    else if(size == 3) {\n        if(s[0] != s[1] && s[1]\
    \ != s[2] && s[0] != s[2]) return true;\n        else return false;\n    }\n \
    \   else {\n        int unique = 0;\n        std::set<char> uSet;\n        for(int\
    \ i = 0; i < size; i++) {\n            if(uSet.find(s[i]) == uSet.end()) {\n \
    \               uSet.insert(s[i]);\n                unique++;\n            }\n\
    \        }\n        if(unique > 3) return true;\n        else if(unique == 3)\
    \ {\n            if(s[0] != s[1] && s[1] != s[2] && s[0] != s[2]) return true;\n\
    \            else return false;\n        }\n        else return false;\n    }\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpru5rn_dt: /tmp/tmpru5rn_dt.cpp:46: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    std::set<char> myset;\n    for(int\
    \ i=0;i<s.length();i++){\n        myset.insert(s[i]);\n    }\n    if(s.length()<3)\
    \ return false;\n    if(myset.size()<3) return false;\n    if(s.length()>=3){\n\
    \        for(int i=0;i<s.length()-2;i++){\n            if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]){\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu1j7t94y: /tmp/tmpu1j7t94y.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    for(int\
    \ i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1]&&s[i+1]==s[i+2]){\n        return\
    \ false;\n      }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7ajrdf2u: /tmp/tmp7ajrdf2u.cpp:25: int main(): Assertion `candidate(("aa"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  bool happy = true;\n  for (int i\
    \ = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2]) {\n      happy = false;\n    }\n  }\n  return happy;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int i,j,k,n;\n    n=s.length();\n\
    \    if(n<3)\n    return false;\n    else\n    {\n        for(i=0;i<n-2;i++)\n\
    \        {\n            if(s[i]==s[i+1] && s[i+1]==s[i+2])\n            return\
    \ false;\n        }\n        return true;\n    }\n    \n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpao18dwtv: /tmp/tmpao18dwtv.cpp:34: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134337
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\telse\n\t{\n\t\tbool is_happy = true;\n\t\tfor (int i = 0; i < s.length()\
    \ - 2; i++)\n\t\t{\n\t\t\tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2])\n\t\t\t{\n\t\t\t\tis_happy = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\treturn is_happy;\n\t}\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    std::vector<char> arr;\n    for(int i=0;i<s.length();i++)\n    \
    \    arr.push_back(s[i]);\n    int n=arr.size();\n    int k=0;\n    while(k<arr.size()-3)\n\
    \    {\n        if(arr[k]==arr[k+1] && arr[k+1]==arr[k+2])\n            return\
    \ false;\n        k++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3cs8sgvx: /tmp/tmp3cs8sgvx.cpp:34: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\telse {\n\t\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\t\tif (s[i]\
    \ == s[i + 1] && s[i] == s[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\
    \t}\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1h1ssj3g: /tmp/tmp1h1ssj3g.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdix_vdix: /tmp/tmpdix_vdix.cpp:20: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    else{\n        bool ishappy = true;\n        int i = 0;\n      \
    \  while(i<s.length()-2){\n            if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \                ishappy = false;\n                break;\n            }\n   \
    \         i++;\n        }\n        return ishappy;\n    }\n}\nint main() {\n \
    \   auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n \
    \   assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_veiethw: /tmp/tmp_veiethw.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)return false;\n\
    \  for(int i=0;i<s.length()-2;i++){\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // Your code here\n  int l=s.length();\n\
    \  if(l<3) return false;\n  for(int i=0;i<l-2;i++)\n  {\n      if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpk7cr2yzr: /tmp/tmpk7cr2yzr.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    std::vector<bool> seen(128, false);\n    for(int i = 0; i < s.length()\
    \ - 2; i++) {\n        if(seen[s[i]])\n            return false;\n        seen[s[i]]\
    \ = true;\n        seen[s[i + 1]] = true;\n        seen[s[i + 2]] = true;\n  \
    \      if(s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpob6g1fqn: /tmp/tmpob6g1fqn.cpp:32: int main(): Assertion `candidate(("abcd"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    char last = s[0];\n    int counter = 1;\n    for(int i=1;i<s.length();i++){\n\
    \        if(last==s[i]) counter++;\n        else{\n            if(counter>=3)\
    \ return false;\n            last = s[i];\n            counter = 1;\n        }\n\
    \    }\n    if(counter>=3) return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7gc8pqx2: /tmp/tmp7gc8pqx2.cpp:33: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    if(s[0]==s[1] && s[1]==s[2])\n        return false;\n    for(int\
    \ i=1;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1] && s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyv_vpoe8: /tmp/tmpyv_vpoe8.cpp:30: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int length = s.length();\n  if (length\
    \ < 3) {\n    return false;\n  }\n  for (int i = 0; i < length - 2; i++) {\n \
    \   if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int l = s.length();\n    if(l\
    \ < 3) return false;\n    for(int i = 0; i <= l - 3; i++) {\n        if(s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  return (s.length() < 3) ? false\
    \ : s.substr(0, 3) == s.substr(1, 3) ? false : true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuq132yau: /tmp/tmpuq132yau.cpp:21: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n   if(s.length() < 3)\n      return\
    \ false;\n   for(int i = 2; i < s.length(); i++){\n      if(s[i] == s[i-1] &&\
    \ s[i] == s[i-2])\n         return false;\n   }\n   return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpk1dofdqz: /tmp/tmpk1dofdqz.cpp:27: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n  return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] && s[i+1]==s[i+2])\n\
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp228449fi: /tmp/tmp228449fi.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int count_3=0;\n    if(s.length()<3)return\
    \ false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2])\n            count_3++;\n    }\n    if(count_3==0)return\
    \ true;\n    else return false;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\treturn s.size()>=3 and (s[0]!=s[1]\
    \ and s[1]!=s[2] and s[0]!=s[2]);\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdorp2x2o: /tmp/tmpdorp2x2o.cpp:25: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfoq11xaf: /tmp/tmpfoq11xaf.cpp:18: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134338
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int N = s.size();\n  if (N >= 3)\
    \ {\n    for (int i = 0; i <= N - 3; i++) {\n      if (s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2]) {\n        return false;\n      }\n   \
    \ }\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n  if(s.length()\
    \ < 3) return false;\n  else if(s.length() == 3){\n    return (s[0] != s[1] &&\
    \ s[1] != s[2] && s[0] != s[2]);\n  }\n  else {\n    std::string aux = s.substr(0,3);\n\
    \    for(int i = 3; i < s.length(); i++) {\n      aux[0] = aux[1];\n      aux[1]\
    \ = aux[2];\n      aux[2] = s[i];\n      if(aux[0] == aux[1] || aux[1] == aux[2]\
    \ || aux[0] == aux[2]) return false;\n    }\n    return true;\n  }\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n    {\n    \
    \    return false;\n    }\n    else\n    {\n        if(s[0]!=s[1] && s[1]!=s[2]\
    \ && s[0]!=s[2])\n        {\n            return true;\n        }\n        else\n\
    \        {\n            return false;\n        }\n    }\n}\nint main() {\n   \
    \ auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n   \
    \ assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplfz7upn8: /tmp/tmplfz7upn8.cpp:39: int main(): Assertion `candidate(("iopaxioi"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  for (int i = 0; i <= s.length()\
    \ - 3; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i\
    \ + 2])\n      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu1j7t94y: /tmp/tmpu1j7t94y.cpp:28: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t//Your code here\n\tint n = s.length();\n\
    \tif (n < 3)\n\t\treturn false;\n\tfor (int i = 0; i < n - 2; i++)\n\t{\n\t\t\
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\t// Write your code here.\n\tint\
    \ len = s.length();\n\tif (len < 3)\n\t\treturn false;\n\tfor (int i = 2; i <\
    \ len; i++) {\n\t\tif (s[i] == s[i - 1] && s[i] == s[i - 2])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_2_ou8ok: /tmp/tmp_2_ou8ok.cpp:29: int main(): Assertion `candidate(("aabb"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (size_t i = 0; i < s.length() - 2; i++)\n\t{\n\t\tif (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    std::vector<char>\
    \ unique_s;\n    for(int i = 0; i < s.length(); i++){\n        if(i < 2){\n  \
    \          unique_s.push_back(s[i]);\n        }\n        else{\n            for(int\
    \ j = 0; j < unique_s.size(); j++){\n                if(s[i] == unique_s[j]){\n\
    \                    return false;\n                }\n            }\n       \
    \     unique_s.push_back(s[i]);\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpndwdeekq: /tmp/tmpndwdeekq.cpp:33: int main(): Assertion `candidate(("a"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660134346
