name: HumanEval_44_change_base
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of\
  \ input number x to base.\n// return string representation after the conversion.\n\
  // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
  \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
  \ x, long base) {\n"
tests: "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
  \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
  \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n \
  \   assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) ==\
  \ (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
  \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
  \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
  \ (8)) == (\"7\"));\n}\n"
completions: ["\tstd::string ret = \"\";\n\twhile (x > 0) {\n\t\tlong b = x % base;\n\
    \t\tx /= base;\n\t\tret = std::to_string(b) + ret;\n\t}\n\treturn ret;", "   \
    \ assert(base > 1);\n    assert(base < 10);\n    std::string result;\n    while\
    \ (x) {\n        result += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    assert(base > 1);\n    std::string\
    \ str = \"\";\n    while (x != 0) {\n        str += std::to_string(x % base);\n\
    \        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n    return\
    \ str;", "    if (x == 0) {\n        return \"0\";\n    }\n    std::string result;\n\
    \    while (x > 0) {\n        long num = x % base;\n        result.push_back(static_cast<char>(num\
    \ + '0'));\n        x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::string result;\n    while (x != 0) {\n       \
    \ result.push_back('0' + x % base);\n        x /= base;\n    }\n    return std::string(result.rbegin(),\
    \ result.rend());", "    std::string res;\n    if(x == 0) {\n        res = \"\
    0\";\n        return res;\n    }\n    while(x > 0) {\n        long div = x / base;\n\
    \        long mod = x % base;\n        res += std::to_string(mod);\n        x\
    \ = div;\n    }\n    std::reverse(res.begin(), res.end());\n    return res;",
  "    std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x\
    \ % base) + result;\n        x /= base;\n    }\n    return result;", "    if(base\
    \ > 10) {\n        return \"\";\n    }\n    std::string ret = \"\";\n    while(x)\
    \ {\n        auto rem = x % base;\n        x /= base;\n        ret += (rem + '0');\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;", "  assert(base\
    \ < 10);\n  std::vector<char> result;\n  do {\n    result.push_back('0' + x %\
    \ base);\n    x /= base;\n  } while (x);\n  std::reverse(result.begin(), result.end());\n\
    \  return std::string(result.begin(), result.end());", "\tstd::string s = \"\"\
    ;\n\twhile (x > 0) {\n\t\tlong digit = x % base;\n\t\tx /= base;\n\t\ts += std::to_string(digit);\n\
    \t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;", "    std::string result;\n\
    \    assert(base < 10);\n    while (x > 0) {\n        long digit = x % base;\n\
    \        x /= base;\n        result += std::to_string(digit);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "\tassert(base <= 10);\n\tstd::string str\
    \ = \"\";\n\twhile (x > 0) {\n\t\tint digit = x % base;\n\t\tx /= base;\n\t\t\
    str = std::to_string(digit) + str;\n\t}\n\treturn str;", "    std::string change\
    \ = \"\";\n    while (x != 0) {\n        change = std::to_string(x % base) + change;\n\
    \        x /= base;\n    }\n    return change;", "  assert(base < 10);\n  std::string\
    \ ans;\n  while (x > 0) {\n    ans.push_back(x % base + '0');\n    x /= base;\n\
    \  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;", "    std::string\
    \ rep = \"\";\n    while (x > 0) {\n        rep += '0' + x % base;\n        x\
    \ /= base;\n    }\n    std::reverse(rep.begin(), rep.end());\n    return rep;",
  "  assert(base < 10);\n  std::string ans;\n  do {\n    ans += '0' + (x % base);\n\
    \    x /= base;\n  } while (x);\n  reverse(ans.begin(), ans.end());\n  return\
    \ ans;", "    assert(base <= 10);\n    // do base transformation\n    std::string\
    \ s;\n    while (x != 0) {\n        s.push_back(x % base + '0');\n        x /=\
    \ base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;", "  std::string\
    \ s;\n  while (x) {\n    s.push_back('0' + x % base);\n    x /= base;\n  }\n \
    \ std::reverse(s.begin(), s.end());\n  return s;", "  assert(x > 0);\n  assert(base\
    \ > 0 && base < 10);\n  std::string s;\n  do {\n    s += '0' + x % base;\n   \
    \ x /= base;\n  } while (x);\n  std::reverse(s.begin(), s.end());\n  return s;",
  "  assert(base<10);\n  std::string result;\n  do {\n    result.push_back('0' + x\
    \ % base);\n    x /= base;\n  } while (x>0);\n  reverse(result.begin(), result.end());\n\
    \  return result;", "  assert(base > 1 && base < 10);\n  std::string s;\n  for\
    \ (; x > 0; x /= base) {\n    s.push_back(x % base + '0');\n  }\n  std::reverse(s.begin(),\
    \ s.end());\n  return s;", "    std::string s = \"\";\n    while (x > 0) {\n \
    \       s += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "  long q = x, r;\n  std::string s = \"\";\n  do\
    \ {\n    r = q % base;\n    q = q / base;\n    s += std::to_string(r);\n  } while\
    \ (q != 0);\n  std::reverse(s.begin(), s.end());\n  return s;", "  if (x == 0)\
    \ {\n    return \"0\";\n  }\n  std::string s;\n  while (x > 0) {\n    s += std::to_string(x\
    \ % base);\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return\
    \ s;", "    std::string result;\n    long d = 0;\n    do {\n        d = x % base;\n\
    \        result += std::to_string(d);\n        x = x / base;\n    } while (x);\n\
    \    std::reverse(result.begin(), result.end());\n    return result;", "    assert(2\
    \ <= base && base <= 9);\n    std::string ret;\n    while (x > 0) {\n        ret\
    \ += '0' + x % base;\n        x /= base;\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;", "  std::string ans = \"\";\n  while (x > 0) {\n\
    \    ans = std::to_string(x % base) + ans;\n    x /= base;\n  }\n  return ans;",
  "    std::string ans;\n    while (x > 0) {\n        ans += std::to_string(x % base);\n\
    \        x /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;", "  assert(base > 1 && base < 10);\n  std::string result;\n  while (x\
    \ != 0) {\n    long remainder = x % base;\n    result.push_back('0' + remainder);\n\
    \    x /= base;\n  }\n  if (result.empty())\n    result.push_back('0');\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;", "    assert(x > 0 && base > 0 && base < 10);\n\
    \    long quotient = x;\n    std::string base_n;\n    while (quotient > 0) {\n\
    \        long remainder = quotient % base;\n        base_n.push_back(std::to_string(remainder)[0]);\n\
    \        quotient = quotient / base;\n    }\n    std::reverse(base_n.begin(),\
    \ base_n.end());\n    return base_n;", "  assert(base < 10);\n  std::stringstream\
    \ ss;\n  // convert x to base and append it to ss.\n  while (x != 0) {\n    ss\
    \ << x % base;\n    x /= base;\n  }\n  // reverse ss and return it.\n  std::string\
    \ res = ss.str();\n  std::reverse(res.begin(), res.end());\n  return res;", " \
    \   std::string res = \"\";\n    if (x == 0) {\n        return \"0\";\n    }\n\
    \    while (x > 0) {\n        res += (x % base) + '0';\n        x /= base;\n \
    \   }\n    std::reverse(res.begin(), res.end());\n    return res;", "    if(x\
    \ < base) return std::to_string(x);\n    std::string base_str = change_base(x\
    \ / base, base);\n    std::string digit = std::to_string(x % base);\n    return\
    \ base_str + digit;", "    std::string s;\n    while (x) {\n        long d = x\
    \ % base;\n        s.push_back(d+'0');\n        x /= base;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "    std::string s = \"\";\n    while (x > 0) {\n\
    \        s = std::to_string(x % base) + s;\n        x /= base;\n    }\n    return\
    \ s;", "    std::string str;\n    while (x > 0) {\n        str += std::to_string(x\
    \ % base);\n        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n\
    \    return str;", "\tstd::string s = \"\";\n\tassert(base < 10);\n\twhile (x\
    \ > 0) {\n\t\ts = std::to_string(x % base) + s;\n\t\tx /= base;\n\t}\n\treturn\
    \ s;", "  std::string str;\n  while (x) {\n    str.push_back('0' + x % base);\n\
    \    x /= base;\n  }\n  reverse(str.begin(), str.end());\n  return str;", "  \
    \  std::string result = \"\";\n    if (x == 0) {\n        return \"0\";\n    }\n\
    \    while (x > 0) {\n        result = result + std::to_string(x % base);\n  \
    \      x = x / base;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "  std::string s;\n  while (x > 0) {\n    s.push_back(x\
    \ % base + '0');\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n \
    \ return s;", "\tassert(base > 1 && base < 10);\n\tlong a = x;\n\tstd::string\
    \ s = \"\";\n\twhile (a) {\n\t\ts = std::to_string(a % base) + s;\n\t\ta /= base;\n\
    \t}\n\treturn s;", "    char n_to_c[10] = {'0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'};\n    long r;\n    std::string s;\n    while (x > 0) {\n    \
    \    r = x % base;\n        s = n_to_c[r] + s;\n        x = x / base;\n    }\n\
    \    return s;", "    std::string output;\n    while (x > 0) {\n        output.push_back('0'\
    \ + x % base);\n        x /= base;\n    }\n    std::reverse(output.begin(), output.end());\n\
    \    return output;", "    assert(base >= 2 && base <= 10);\n    if (x == 0) return\
    \ \"0\";\n    std::string ret = \"\";\n    while (x > 0) {\n        ret += (x\
    \ % base) + '0';\n        x /= base;\n    }\n    std::reverse(ret.begin(), ret.end());\n\
    \    return ret;", "  std::string x_base_n = \"\";\n  long quotient = x;\n  long\
    \ remainder = 0;\n  while (quotient != 0) {\n    remainder = quotient % base;\n\
    \    quotient = quotient / base;\n    x_base_n += std::to_string(remainder);\n\
    \  }\n  std::reverse(x_base_n.begin(), x_base_n.end());\n  return x_base_n;",
  "    std::string s = \"\";\n    while (x > 0) {\n        s = std::to_string(x %\
    \ base) + s;\n        x /= base;\n    }\n    return s;", "\tstd::vector<long>\
    \ digits;\n\twhile (x) {\n\t\tdigits.push_back(x % base);\n\t\tx /= base;\n\t\
    }\n\tstd::string res;\n\tfor (long i = digits.size() - 1; i >= 0; i--)\n\t\tres\
    \ += std::to_string(digits[i]);\n\treturn res;", "\tstd::string ret = \"\";\n\t\
    do {\n\t\tret += std::to_string(x % base);\n\t\tx /= base;\n\t} while (x > 0);\n\
    \tstd::reverse(ret.begin(), ret.end());\n\treturn ret;", "  assert(base < 10);\n\
    \  std::string s;\n  if (x == 0)\n    return \"0\";\n  while (x > 0) {\n    s.push_back('0'\
    \ + x % base);\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return\
    \ s;", "    assert(base < 10);\n    std::string ans;\n    while (x) {\n      \
    \  ans.push_back('0' + x % base);\n        x /= base;\n    }\n    reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    assert(base < 10);\n    std::string result;\n\
    \    while (x) {\n        result.push_back('0' + x % base);\n        x /= base;\n\
    \    }\n    reverse(result.begin(), result.end());\n    return result;", "  assert(base\
    \ < 10);\n  std::string ans;\n  while (x) {\n    ans.push_back(x % base + '0');\n\
    \    x /= base;\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;",
  "  std::vector<int> binary_x;\n  while (x > 0) {\n    binary_x.push_back(x % base);\n\
    \    x /= base;\n  }\n  std::string out;\n  for (auto it = binary_x.rbegin();\
    \ it != binary_x.rend(); ++it) {\n    out += std::to_string(*it);\n  }\n  return\
    \ out;", "\tif (x == 0) return \"0\";\n\t// power of base is exponent of the digit\
    \ being considered.\n\tlong power = 1;\n\twhile (power < x) power *= base;\n\t\
    power /= base;\n\t// digit is the current position's digit in the new base.\n\t\
    long digit = 0;\n\tstd::string result = \"\";\n\twhile (power > 0) {\n\t\twhile\
    \ (x >= power) {\n\t\t\tx -= power;\n\t\t\tdigit++;\n\t\t}\n\t\tresult += std::to_string(digit);\n\
    \t\tdigit = 0;\n\t\tpower /= base;\n\t}\n\treturn result;", "  std::string res\
    \ = \"\";\n  while (x >= base) {\n    res += std::to_string(x % base);\n    x\
    \ /= base;\n  }\n  res += std::to_string(x);\n  std::reverse(res.begin(), res.end());\n\
    \  return res;", "    std::string str = \"\";\n    while (x) {\n        char dig\
    \ = x % base + '0';\n        str = dig + str;\n        x /= base;\n    }\n   \
    \ return str;", "    std::string rep;\n    while (x) {\n        rep.push_back(x\
    \ % base + '0');\n        x /= base;\n    }\n    std::reverse(rep.begin(), rep.end());\n\
    \    return rep;", "\tassert(base < 10);\n\tstd::string result;\n\tdo {\n\t\t\
    result += ('0' + x % base);\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;", "    std::string str;\n    while (x > 0)\
    \ {\n        char ch = x % base + '0';\n        str.push_back(ch);\n        x\
    \ /= base;\n    }\n    reverse(str.begin(), str.end());\n    return str;", " \
    \ assert(base < 10);\n  std::string s;\n  while (x) {\n    s += '0' + x % base;\n\
    \    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;", "   \
    \ std::string b;\n    for (; x; x /= base) {\n        long t = x % base;\n   \
    \     b += t + '0';\n    }\n    reverse(b.begin(), b.end());\n    return b;",
  "\tassert(base<10);\n\tstd::string result;\n\twhile(x>0) {\n\t\tresult.push_back(x%base+'0');\n\
    \t\tx/=base;\n\t}\n\tstd::reverse(result.begin(), result.end());\n\treturn result;",
  "    std::string ret;\n    if (x == 0) return \"0\";\n    while (x) {\n        ret.push_back(x\
    \ % base + '0');\n        x /= base;\n    }\n    std::reverse(ret.begin(), ret.end());\n\
    \    return ret;", "  assert(base < 10);\n  std::string res;\n  do {\n    auto\
    \ rem = x % base;\n    res += (char)('0' + rem);\n    x /= base;\n  } while (x);\n\
    \  reverse(res.begin(), res.end());\n  return res;", "   std::vector<int> result;\n\
    \   while (x != 0) {\n       result.push_back(x % base);\n       x /= base;\n\
    \   }\n   std::string res;\n   for (auto it = result.rbegin(); it != result.rend();\
    \ ++it) {\n       res += '0' + *it;\n   }\n   return res;", "    std::string y;\n\
    \    while (x) {\n        y.push_back(x % base + '0');\n        x /= base;\n \
    \   }\n    std::reverse(y.begin(), y.end());\n    return y;", "  assert(2 <= base);\n\
    \  assert(base <= 10);\n  std::string ans;\n  while (x) {\n    ans += '0' + x\
    \ % base;\n    x /= base;\n  }\n  std::reverse(ans.begin(), ans.end());\n  return\
    \ ans;", "  assert(base < 10);\n  std::string s = \"\";\n  while (x > 0) {\n \
    \   s += (x % base) + '0';\n    x /= base;\n  }\n  reverse(s.begin(), s.end());\n\
    \  return s;", "    assert(base >= 2 && base <= 10);\n    std::string s;\n   \
    \ while (x) {\n        s.push_back('0' + x % base);\n        x /= base;\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;", "  std::string st = \"\
    \";\n  do {\n    long i = x % base;\n    x /= base;\n    st = (char)('0' + i)\
    \ + st;\n  } while (x);\n  return st;", "    std::string s;\n    while (x > 0)\
    \ {\n        s += std::to_string(x % base);\n        x /= base;\n    }\n    return\
    \ s;", "    std::string result = \"\";\n    do {\n        result = std::to_string(x\
    \ % base) + result;\n        x /= base;\n    } while (x != 0);\n    return result;",
  "  std::string s = \"\";\n  assert(x >= 0);\n  assert(base <= 10);\n  while (x >\
    \ 0) {\n    s += std::to_string(x % base);\n    x /= base;\n  }\n  reverse(s.begin(),\
    \ s.end());\n  return s;", "    std::string str;\n    while (x != 0) {\n     \
    \   str += std::to_string(x % base);\n        x /= base;\n    }\n    return str;",
  "  assert(base >= 2);\n  std::string out;\n  while (x != 0) {\n    out += std::to_string(x\
    \ % base);\n    x /= base;\n  }\n  std::reverse(out.begin(), out.end());\n  return\
    \ out;", "    assert(base < 10);\n    std::string result;\n    do {\n        int\
    \ lsb = x % base;\n        result.push_back('0' + lsb);\n        x /= base;\n\
    \    } while (x > 0);\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::string str = \"\";\n    while (x) {\n        str = char('0'\
    \ + x % base) + str;\n        x /= base;\n    }\n    return str;", "\tassert(base\
    \ <= 10);\n\tstd::string ans;\n\twhile (x > 0) {\n\t\tans.push_back(x % base +\
    \ '0');\n\t\tx /= base;\n\t}\n\treverse(ans.begin(), ans.end());\n\treturn ans;",
  "    assert(base<10);\n    std::string res;\n    while(x>0) {\n        res.push_back(x%base\
    \ + '0');\n        x/=base;\n    }\n    reverse(res.begin(), res.end());\n   \
    \ return res;", "\tif(x == 0) return \"0\";\n\tstd::string digits = \"0123456789\"\
    ;\n\tstd::string rep = \"\";\n\twhile(x != 0) {\n\t\tlong rem = x % base;\n\t\t\
    rep = digits[rem] + rep;\n\t\tx /= base;\n\t}\n\treturn rep;", "    long digit;\n\
    \    std::string ans = \"\";\n    while (x != 0) {\n        digit = x % base;\n\
    \        ans += std::to_string(digit);\n        x /= base;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    char str[64];\n    int i = 0;\n    while\
    \ (x) {\n        assert(i < 64);\n        str[i++] = (x % base) + '0';\n     \
    \   x /= base;\n    }\n    str[i] = '\\0';\n    std::reverse(str, str + i);\n\
    \    return str;", "    std::string res = \"\";\n    while (x) {\n        res\
    \ += ('0' + x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    assert(base < 10);\n    std::string ret;\n\
    \    while (x > 0) {\n        ret += std::to_string(x % base);\n        x /= base;\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;", "    assert(base\
    \ < 10);\n    std::string res = \"\";\n    while (x) {\n        res += '0' + x\
    \ % base;\n        x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n\
    \    return res;", "    std::string result = \"\";\n    while (x != 0) {\n   \
    \     assert(x % base < 10);\n        result += '0' + x % base;\n        x /=\
    \ base;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "    std::string ans;\n    while (x > 0) {\n        ans.insert(ans.begin(), '0'\
    \ + x % base);\n        x /= base;\n    }\n    return ans;", "    long div = x\
    \ / base;\n    long mod = x % base;\n    if (div == 0) {\n        return std::to_string(mod);\n\
    \    }\n    return change_base(div, base) + std::to_string(mod);", "  assert(base\
    \ < 10);\n  std::string s;\n  while (x > 0) {\n    char c = (x % base) + '0';\n\
    \    s = c + s;\n    x /= base;\n  }\n  return s;", "    std::string result =\
    \ \"\";\n    assert(2 <= base && base <= 9);\n    while (x > 0) {\n        result\
    \ += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    // TODO: Implement this.\n    if(x<base)\n\
    \        return std::to_string(x);\n    return change_base(x/base,base)+std::to_string(x%base);",
  "    std::string str;\n    while (x) {\n        int digit = x % base;\n        str\
    \ += '0' + digit;\n        x /= base;\n    }\n    reverse(str.begin(), str.end());\n\
    \    return str;", "  // TODO: implement me!\n  std::string result;\n  std::string\
    \ output;\n  while(x >= 1){\n    result += std::to_string(x % base);\n    x /=\
    \ base;\n  }\n  for(int i = result.size() - 1; i >= 0; i--){\n    output += result[i];\n\
    \  }\n  return output;", "    std::vector<long> c;\n    while (x) {\n        c.push_back(x\
    \ % base);\n        x /= base;\n    }\n    std::string s = \"\";\n    for (long\
    \ i = c.size() - 1; i >= 0; i--) {\n        s += std::to_string(c[i]);\n    }\n\
    \    return s;", "  std::string output;\n  if (x == 0)\n    return \"0\";\n  while\
    \ (x != 0) {\n    long remainder = x % base;\n    output.push_back('0' + remainder);\n\
    \    x = x / base;\n  }\n  std::reverse(output.begin(), output.end());\n  return\
    \ output;", "\tstd::string res;\n\tdo {\n\t\tres.push_back('0' + x % base);\n\t\
    \tx /= base;\n\t} while (x);\n\tstd::reverse(res.begin(), res.end());\n\treturn\
    \ res;", "\tassert(x >= 0);\n\tassert(base > 0);\n\tassert(base < 10);\n\tlong\
    \ i, t;\n\tstd::string ans;\n\tfor (i = x; i > 0; i /= base) {\n\t\tt = i % base;\n\
    \t\tans.push_back(t + '0');\n\t}\n\treturn ans;", "   assert(base <= 10); // for\
    \ simplicity for now\n   std::string res;\n   do {\n       long rem = x % base;\n\
    \       res += (char)('0' + rem);\n       x /= base;\n   } while (x);\n   std::reverse(res.begin(),\
    \ res.end());\n   return res;", "    assert(x >= 0);\n    assert(1 <= base &&\
    \ base <= 9);\n    std::string ret;\n    do {\n        char digit = x % base +\
    \ '0';\n        ret = digit + ret;\n        x /= base;\n    } while (x);\n   \
    \ return ret;", "  assert(base > 1 && base < 10);\n  std::string ans;\n  do {\n\
    \    ans.push_back(char('0' + x % base));\n    x /= base;\n  } while (x);\n  return\
    \ std::string(ans.rbegin(), ans.rend());", "  assert(base<10);\n  std::string\
    \ str=\"\";\n  while(x>0) {\n    long curr_digit=x%base;\n    str.push_back(curr_digit+'0');\n\
    \    x/=base;\n  }\n  return str;", "    std::string res = \"\";\n    do {\n \
    \       res += ('0' + x % base);\n        x /= base;\n    } while (x);\n    return\
    \ std::string(res.rbegin(), res.rend());", "\tassert(base < 10);\n\tstd::vector<int>\
    \ digits;\n\tdo {\n\t\tdigits.push_back(x % base);\n\t\tx /= base;\n\t} while\
    \ (x);\n\tstd::string ret(digits.size(), '0');\n\tfor (int i = 0; i < digits.size();\
    \ ++i) {\n\t\tret[i] += digits[digits.size() - i - 1];\n\t}\n\treturn ret;", " \
    \   std::string str = \"\";\n    while (x != 0) {\n        str += (x % base +\
    \ '0');\n        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n\
    \    return str;", "  assert(x >= 0);\n  assert(base > 0 && base < 10);\n  std::string\
    \ res;\n  do {\n    long r = x % base;\n    res.push_back('0' + r);\n    x /=\
    \ base;\n  } while (x);\n  std::reverse(res.begin(), res.end());\n  return res;",
  "  std::string result;\n  while (x) {\n    result.push_back('0' + x % base);\n \
    \   x /= base;\n  }\n  reverse(result.begin(), result.end());\n  return result;",
  "    std::string result = \"\";\n    while (x > 0) {\n        result += (x % base\
    \ + '0');\n        x /= base;\n    }\n    return std::string(result.rbegin(),\
    \ result.rend());", "\tlong remainder = x;\n\tstd::string result = \"\";\n\tdo\
    \ {\n\t\tlong quotient = remainder / base;\n\t\tlong rem = remainder % base;\n\
    \t\tresult = std::to_string(rem) + result;\n\t\tremainder = quotient;\n\t} while\
    \ (remainder);\n\treturn result;", "\tstd::string s = \"\";\n\twhile (x > 0) {\n\
    \t\ts = (char)(x % base + '0') + s;\n\t\tx /= base;\n\t}\n\treturn s;", "  std::string\
    \ ret;\n  while (x > 0) {\n    long mod = x % base;\n    char digit = '0' + mod;\n\
    \    ret = digit + ret;\n    x /= base;\n  }\n  return ret;", "  // x is number\
    \ to be converted.\n  // base is the numerical base of the output number.\n  std::string\
    \ s; // output string.\n  while (x) {\n    s += '0' + x % base;\n    x /= base;\n\
    \  }\n  return {s.rbegin(), s.rend()};", "\tstd::string result;\n\tdo {\n\t\t\
    result += '0' + x % base;\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;", "\tstd::string res = \"\";\n\twhile (x >\
    \ 0) {\n\t\tlong d = x % base;\n\t\tchar ch = '0' + d;\n\t\tres = ch + res;\n\t\
    \tx /= base;\n\t}\n\treturn res;", "  assert(base <= 10);\n  std::string num =\
    \ \"\";\n  while (x != 0) {\n    num += std::to_string(x % base);\n    x /= base;\n\
    \  }\n  std::reverse(num.begin(), num.end());\n  return num;", "    if (x == 0)\
    \ {\n        return \"0\";\n    }\n\n    std::string digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string ans = \"\";\n    while (x) {\n        ans = digits[x % base]\
    \ + ans;\n        x /= base;\n    }\n    return ans;", "    std::string ret;\n\
    \    while (x) {\n        ret.push_back('0' + x % base);\n        x /= base;\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;", "  assert(base\
    \ >= 2 && base <= 10);\n  long n = x;\n  std::string ans;\n  int r;\n  while (n\
    \ > 0) {\n    r = n % base;\n    n = n / base;\n    ans.push_back('0' + r);\n\
    \  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;", "\t// use long\
    \ long for big input\n\tassert(base < 10);\n\tstd::string res;\n\tfor (; x; x\
    \ /= base) {\n\t\tres += ('0' + x % base);\n\t}\n\tstd::reverse(res.begin(), res.end());\n\
    \treturn res;", "    assert(base < 10);\n    std::string rev = \"\";\n    if(x\
    \ < base) return std::to_string(x);\n    for(; x > 0; x /= base) rev += std::to_string(x\
    \ % base);\n    std::reverse(rev.begin(), rev.end());\n    return rev;", "\tstd::string\
    \ ans;\n\tif (x == 0)\n\t\treturn \"0\";\n\t//while (x != 0) {\n\t\tfor (int i\
    \ = 0; i < x; i++) {\n\t\t\tif ((i + 1) % base == 0) {\n\t\t\t\tans += \"1\";\n\
    \t\t\t\tx--;\n\t\t\t}\n\t\t\telse\n\t\t\t\tans += \"0\";\n\t\t}\n\t//}\n\tstd::reverse(ans.begin(),\
    \ ans.end());\n\treturn ans;", "    assert(base <= 10);\n    if (x < base) return\
    \ std::to_string(x);\n    return change_base(x / base, base) + std::to_string(x\
    \ % base);", "    std::string str;\n    if (x == 0) {\n        str = \"0\";\n\
    \        return str;\n    }\n    while (x > 0) {\n        str.append(std::to_string(x\
    \ % base));\n        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n\
    \    return str;", "  std::string result = \"\";\n  std::string base_dict = \"\
    0123456789\";\n  assert(base <= 10);\n  assert(x >= 0);\n  while (x) {\n    result\
    \ += base_dict[x % base];\n    x /= base;\n  }\n  return std::string(result.rbegin(),\
    \ result.rend());", "    std::string s;\n    do {\n        s += std::to_string(x\
    \ % base);\n        x /= base;\n    } while (x > 0);\n    reverse(s.begin(), s.end());\n\
    \    return s;", "    assert(base < 10);\n    std::string str;\n    std::stack<char>\
    \ S;\n    while (x != 0) {\n        S.push('0' + x % base);\n        x /= base;\n\
    \    }\n    while (!S.empty()) {\n        str += S.top();\n        S.pop();\n\
    \    }\n    return str;", "    assert(2 <= base && base <= 9);\n    std::string\
    \ res;\n    if (x == 0)\n        return \"0\";\n    while (x) {\n        res +=\
    \ (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::string ret;\n    while (x) {\n    \
    \    ret += x % base + '0';\n        x /= base;\n    }\n    return std::string(ret.rbegin(),\
    \ ret.rend());", "  std::string res;\n  while (x > 0) {\n    res.push_back('0'\
    \ + x % base);\n    x /= base;\n  }\n  std::reverse(res.begin(), res.end());\n\
    \  return res;", "    std::string result;\n    do {\n        assert(x % base <\
    \ 10);\n        result += (char)('0' + x % base);\n        x /= base;\n    } while\
    \ (x != 0);\n    std::reverse(result.begin(), result.end());\n    return result;",
  "  assert(base < 10);\n  std::string s;\n  while (x) {\n    s += '0' + x % base;\n\
    \    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;", "  std::string\
    \ result = \"\";\n  while (x > 0) {\n    result = std::to_string(x % base) + result;\n\
    \    x /= base;\n  }\n  return result;", "    assert(base > 1 && base < 10);\n\
    \    std::string ans;\n    while (x) {\n        ans += '0' + x % base;\n     \
    \   x /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;",
  "    assert(base >= 2 && base <= 10);\n    std::string ans;\n    while (x) {\n \
    \       ans.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "  assert(base > 1);\n  assert(base < 10);\n\
    \  std::string ans;\n  while (x > 0) {\n    ans.push_back('0' + x % base);\n \
    \   x /= base;\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;",
  "    std::vector<int> digits;\n    std::string str = \"\";\n    while (x > 0) {\n\
    \        digits.push_back(x % base);\n        x /= base;\n    }\n    while (!digits.empty())\
    \ {\n        str += std::to_string(digits.back());\n        digits.pop_back();\n\
    \    }\n    return str;", "    assert(base < 10);\n    std::string res;\n    while\
    \ (x != 0) {\n        res += std::to_string(x % base);\n        x /= base;\n \
    \   }\n    return res;", "\tassert(base < 10);\n\tstd::string ret;\n\twhile (x)\
    \ {\n\t\tret.push_back('0' + x % base);\n\t\tx /= base;\n\t}\n\treturn std::string(ret.rbegin(),\
    \ ret.rend());", "    std::string digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string ans = \"\";\n    assert(base <= digits.size());\n    while\
    \ (x > 0) {\n        int rem = x % base;\n        x /= base;\n        ans += digits[rem];\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;", "  std::string\
    \ output;\n  do {\n    output.push_back('0' + x % base);\n    x /= base;\n  }\
    \ while (x);\n  std::reverse(output.begin(), output.end());\n  return output;",
  "    // remove this line after implementing it.\n    assert(base < 10);\n    std::string\
    \ s = \"\";\n    long r;\n    // convert decimal number x to base 'base'\n   \
    \ while (x > 0) {\n        r = x % base;\n        s += std::to_string(r);\n  \
    \      x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
  "    assert(2 <= base && base <= 9);\n    if (x == 0) return \"0\";\n    std::string\
    \ res;\n    while (x) {\n        res += x % base + '0';\n        x /= base;\n\
    \    }\n    reverse(res.begin(), res.end());\n    return res;", "\tassert(0 <\
    \ base && base < 10);\n\tstd::string answer;\n\twhile (x != 0) {\n\t\tanswer +=\
    \ (x % base) + '0';\n\t\tx /= base;\n\t}\n\treverse(answer.begin(), answer.end());\n\
    \treturn answer;", "    std::string s = \"\";\n    while (x > 0) {\n        s\
    \ += '0' + x % base;\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;", "    assert(base > 1);\n    assert(base < 10);\n    std::string\
    \ res = \"\";\n    while (x > 0) {\n        res += char('0' + x % base);\n   \
    \     x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;", "    // convert x to base in range(2, 10)\n    assert(2 <= base && base\
    \ <= 10);\n    std::string answer;\n    while (x) {\n        answer += x % base\
    \ + '0';\n        x /= base;\n    }\n    std::reverse(answer.begin(), answer.end());\n\
    \    return answer;", "    std::string str=\"\";\n    assert(base<10);\n    do\
    \ {\n        str = std::to_string(x%base) + str;\n        x/=base;\n    } while(x\
    \ != 0);\n    return str;", "  std::string s;\n  assert(base <= 10);\n  while\
    \ (x) {\n    s += (x % base) + '0';\n    x /= base;\n  }\n  reverse(s.begin(),\
    \ s.end());\n  return s;", "  assert(base >= 2 && base <= 10);\n  std::string\
    \ ans;\n  if (x == 0) {\n    ans = \"0\";\n  } else {\n    while (x > 0) {\n \
    \     int digit = x % base;\n      ans = std::to_string(digit) + ans;\n      x\
    \ /= base;\n    }\n  }\n  return ans;", "  std::string s;\n  if (x == 0) return\
    \ \"0\";\n  while (x > 0) {\n    s.push_back('0' + x % base);\n    x /= base;\n\
    \  }\n  reverse(s.begin(), s.end());\n  return s;", "  assert(base < 10);\n  std::string\
    \ str;\n  int tmp = 0;\n  for (; x; x /= base) {\n    tmp = x % base;\n    str\
    \ += std::to_string(tmp);\n  }\n  reverse(str.begin(), str.end());\n  return str;",
  "    std::string s = \"\";\n    while (x > 0) {\n        int rem = x % base;\n \
    \       s = s + std::to_string(rem);\n        x = x / base;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;", "\t// Convert x to base 10\n\tlong n = x;\n\tlong\
    \ result = 0;\n\tlong power = 1;\n\twhile (n > 0) {\n\t\tresult += n % 10 * power;\n\
    \t\tpower *= base;\n\t\tn /= 10;\n\t}\n\t// Convert base 10 to base\n\tstd::string\
    \ str = \"\";\n\twhile (result > 0) {\n\t\tstr += result % base + '0';\n\t\tresult\
    \ /= base;\n\t}\n\tstd::reverse(str.begin(), str.end());\n\treturn str;", "  \
    \  std::string new_x = \"\";\n    std::string s = \"\";\n    while (x) {\n   \
    \     new_x = (char)(x % base + '0') + new_x;\n        x /= base;\n    }\n   \
    \ return new_x;", "    if(x < base) {\n        return std::to_string(x);\n   \
    \ }\n    return change_base(x / base, base) + std::to_string(x % base);", "  \
    \  if (x == 0) return \"0\";\n    std::string ans;\n    for (; x > 0; x /= base)\
    \ {\n        ans += std::to_string(x % base);\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    std::string num;\n    while (x != 0) {\n\
    \        num.push_back('0' + x % base);\n        x /= base;\n    }\n    std::reverse(num.begin(),\
    \ num.end());\n    return num;", "    std::string res = \"\";\n    while (x >\
    \ 0) {\n        res += std::to_string(x % base);\n        x /= base;\n    }\n\
    \    std::reverse(res.begin(), res.end());\n    return res;", "  assert(base <\
    \ 10);\n  std::string ans;\n  do {\n    ans += std::to_string(x % base);\n   \
    \ x /= base;\n  } while (x > 0);\n  std::reverse(ans.begin(), ans.end());\n  return\
    \ ans;", "    std::string s;\n    while (x > 0) {\n        char ch = (x % base)\
    \ + '0';\n        s.push_back(ch);\n        x /= base;\n    }\n    reverse(s.begin(),\
    \ s.end());\n    return s;", "    // write your code here\n    long rem, num=x;\n\
    \    std::string s;\n    if(num==0)\n    {\n        s='0';\n        return s;\n\
    \    }\n    while(num>0)\n    {\n        rem=num%base;\n        num=num/base;\n\
    \        s=s+rem;\n    }\n    return s;", "    assert(base > 1);\n    assert(base\
    \ < 10);\n    std::string answer = \"\";\n    while (x > 0) {\n        long remainder\
    \ = x % base;\n        answer = std::to_string(remainder) + answer;\n        x\
    \ /= base;\n    }\n    return answer;", "    assert(base >= 2);\n    assert(base\
    \ <= 10);\n    std::string s;\n    while (x != 0) {\n        s += std::to_string(x\
    \ % base);\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;", "    assert(base <= 10);\n    std::string ans;\n    if (x ==\
    \ 0) {\n        ans = \"0\";\n    } else {\n        while (x) {\n            ans\
    \ += std::to_string(x % base);\n            x /= base;\n        }\n    }\n   \
    \ std::reverse(ans.begin(), ans.end());\n    return ans;", "    std::string res\
    \ = \"\";\n    while (x > 0) {\n        long b = x % base;\n        x /= base;\n\
    \        res = std::to_string(b) + res;\n    }\n    return res;", "\tassert(base\
    \ < 10);\n\tstd::string res = \"\";\n\twhile (x > 0) {\n\t\tres += std::to_string(x\
    \ % base);\n\t\tx /= base;\n\t}\n\tstd::reverse(res.begin(), res.end());\n\treturn\
    \ res;", "\tassert(base < 10);\n\tstd::string result;\n\tdo {\n\t\tlong r = x\
    \ % base;\n\t\tresult += '0' + r;\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;", "    std::string str;\n    do {\n       \
    \ str.push_back('0' + x % base);\n        x /= base;\n    } while (x);\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;", "  // WRITE YOUR CODE HERE\n  string rev = \"\
    \";\n  while(x > 0) {\n    rev += to_string(x % base);\n    x /= base;\n  }\n\
    \  return string(rev.rbegin(), rev.rend());", "\tstd::string ans = \"\";\n\twhile\
    \ (x) {\n\t\tans = std::to_string(x % base) + ans;\n\t\tx /= base;\n\t}\n\treturn\
    \ ans;", "    assert(base >= 2 && base <= 10);\n    std::string str;\n    while\
    \ (x) {\n        str += x % base + '0';\n        x /= base;\n    }\n    return\
    \ str;", "  std::string result;\n  while (x > 0) {\n    result.push_back('0' +\
    \ x % base);\n    x /= base;\n  }\n  return std::string(result.rbegin(), result.rend());",
  "    assert(base >= 2 && base <= 9);\n    long r;\n    std::string ans;\n    while\
    \ (x > 0) {\n        r = x % base;\n        x /= base;\n        ans += (char)(r\
    \ + '0');\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;",
  "\tstd::vector<long> v;\n\twhile (x >= base) {\n\t\tv.push_back(x % base);\n\t\t\
    x /= base;\n\t}\n\tif (x > 0)\n\t\tv.push_back(x);\n\tstd::string s = \"\";\n\t\
    for (long i = v.size() - 1; i >= 0; i--) {\n\t\ts += '0' + v[i];\n\t}\n\treturn\
    \ s;", "    std::string res;\n    if (x == 0) {\n        res = \"0\";\n    } else\
    \ {\n        while (x > 0) {\n            res = (char)(x % base + '0') + res;\n\
    \            x /= base;\n        }\n    }\n    return res;", "    std::string\
    \ result;\n    int i = 0;\n    for (; x != 0; i++) {\n        if (i > 0)\n   \
    \         result = std::to_string(x % base) + result;\n        else\n        \
    \    result = std::to_string(x % base);\n        x /= base;\n    }\n    return\
    \ result;", "    std::string res = \"\";\n    while (x > 0) {\n        res +=\
    \ ('0' + x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::string str = \"\";\n    int i = 0;\n\
    \    while (x > 0) {\n        int rem = x % base;\n        str += (rem + '0');\n\
    \        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n    return\
    \ str;", "  std::string res;\n  while (x) {\n    res += (x % base) + '0';\n  \
    \  x /= base;\n  }\n  std::reverse(res.begin(), res.end());\n  return res;", " \
    \   assert(x >= 0);\n    assert(1 <= base && base <= 9);\n    std::string result;\n\
    \    while (x > 0) {\n        result.push_back('0' + x % base);\n        x /=\
    \ base;\n    }\n    return std::string(result.rbegin(), result.rend());", "  \
    \  assert(x >= 0);\n    assert(base > 0);\n    assert(base < 10);\n    std::string\
    \ result;\n    if (x == 0) {\n        result = \"0\";\n    } else {\n        while\
    \ (x != 0) {\n            result += std::to_string(x % base);\n            x /=\
    \ base;\n        }\n    }\n    return result;", "  std::string ret;\n  while (x)\
    \ {\n    ret += char('0' + x % base);\n    x /= base;\n  }\n  std::reverse(ret.begin(),\
    \ ret.end());\n  return ret;", "    std::string ans = \"\";\n    while (x != 0)\
    \ {\n        ans = std::to_string(x % base) + ans;\n        x /= base;\n    }\n\
    \    return ans;", "    // STUDENT CODE HERE\n    std::string res = \"\";\n  \
    \  while (x > 0) {\n        res = std::to_string(x % base) + res;\n        x /=\
    \ base;\n    }\n    return res;", "    std::string res;\n    while (x > 0) {\n\
    \        res += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "\tstd::string ans = \"\";\n\tassert(base < 10);\n\
    \twhile (x) {\n\t\tans = std::to_string(x % base) + ans;\n\t\tx /= base;\n\t}\n\
    \treturn ans;", "\tstd::string result;\n\tstd::stack<int> s;\n\twhile (x > 0)\
    \ {\n\t\tint r = x % base;\n\t\ts.push(r);\n\t\tx /= base;\n\t}\n\twhile (!s.empty())\
    \ {\n\t\tresult += std::to_string(s.top());\n\t\ts.pop();\n\t}\n\treturn result;",
  "    assert(base < 10);\n    std::string ans;\n    while (x != 0) {\n        ans.push_back('0'\
    \ + x % base);\n        x /= base;\n    }\n    std::reverse(ans.begin(), ans.end());\n\
    \    return ans;", "    if (x == 0) {\n        return \"0\";\n    }\n    // Assuming\
    \ base less than 10.\n    assert(base < 10);\n    std::string ans;\n    while\
    \ (x > 0) {\n        ans.push_back(x % base + '0');\n        x /= base;\n    }\n\
    \    std::reverse(ans.begin(), ans.end());\n    return ans;", "    std::string\
    \ s = \"\";\n    while (x > 0) {\n        s += ('0' + x % base);\n        x /=\
    \ base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;", "  assert(base\
    \ >= 2 && base <= 10);\n  std::string ans;\n  while (x > 0) {\n    ans += std::to_string(x\
    \ % base);\n    x /= base;\n  }\n  std::reverse(ans.begin(), ans.end());\n  return\
    \ ans;", "    // your code goes here\n    std::string s=\"\";\n    while(x!=0)\n\
    \    {\n        int a=x%base;\n        s+=('0'+a);\n        x/=base;\n    }\n\
    \    std::reverse(s.begin(),s.end());\n    return s;", "    std::stringstream\
    \ ss;\n    while (x) {\n        ss << x % base;\n        x /= base;\n    }\n \
    \   std::string s = ss.str();\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;", "  assert(base <= 10);\n  std::string s;\n  while (x) {\n    s.push_back('0'\
    \ + x % base);\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return\
    \ s;", "    assert(base < 10);\n    std::string res;\n    while (x) {\n      \
    \  res += x % base + '0';\n        x /= base;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    if (x == 0) {\n        return \"0\";\n \
    \   }\n    std::string result;\n    while (x != 0) {\n        result += (char)('0'\
    \ + x % base);\n        x /= base;\n    }\n    reverse(result.begin(), result.end());\n\
    \    return result;", "    assert(base < 10);\n    std::string s;\n    while (x)\
    \ {\n        long rem = x % base;\n        s.push_back(static_cast<char>(rem +\
    \ '0'));\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n \
    \   return s;", "\tstd::string res = \"\";\n\twhile (x > 0) {\n\t\tres += (x %\
    \ base + '0');\n\t\tx /= base;\n\t}\n\treturn std::string(res.rbegin(), res.rend());",
  "    assert(base < 10);\n    std::string ret;\n    while (x > 0) {\n        ret\
    \ += (x % base) + '0';\n        x /= base;\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;", "    std::string res = \"\";\n    while (x !=\
    \ 0) {\n        int rem = x % base;\n        res = std::to_string(rem) + res;\n\
    \        x /= base;\n    }\n    return res;", "    std::string value;\n    while\
    \ (x > 0) {\n        value.push_back(x % base + '0');\n        x /= base;\n  \
    \  }\n    std::reverse(value.begin(), value.end());\n    return value;"]
stop_tokens:
- "\n}"
