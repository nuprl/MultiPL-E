name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n\
  // 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["  // #TODO: Write - Your - Code\n  std::unordered_set<char> uniq(string.begin(),\
    \ string.end());\n  return uniq.size();", "\t\n\t// Checks to see if the string\
    \ is empty\n\tif (string.empty()) {\n\t\treturn 0;\n\t}\n\t\n\t// Sets the count\
    \ to 1 so that the first character will automatically be counted, regardless of\
    \ case\n\tlong count = 1;\n\t\n\t// Iterates through the string, checking to see\
    \ if a character at the index is different from the character before it\n\tfor\
    \ (long i = 1; i < string.length(); i++) {\n\t\tif (tolower(string[i]) != tolower(string[i\
    \ - 1])) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;", "    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++) {\n        int n = 0;\n \
    \       for(int j = 0; j < string.length(); j++) {\n            if(tolower(string[i])\
    \ == tolower(string[j])) {\n                n++;\n            }\n        }\n \
    \       if(n == 1) {\n            count++;\n        }\n    }\n    return count;",
  "    int check = 0;\n    long result = 0;\n    //throw \"Not implemented yet\";\n\
    \    for(int i = 0; i < string.length(); i++){\n        int val = (int)string[i];\n\
    \        if(val >= 97 && val <= 122){\n            val = val - 32;\n        }\n\
    \        if((check & (1 << val)) == 0){\n            result++;\n            check\
    \ = check | (1 << val);\n        }\n    }\n    return result;", "  // TODO: Define\
    \ the solution here.\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  set<char> characterSet;\n  for (auto i = 0; i < string.length();\
    \ i++) {\n    characterSet.insert(string[i]);\n  }\n  return characterSet.size();",
  "    // Loop over the string and use a set to keep track of unique characters\n\
    \    std::set<char> unique_chars;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        unique_chars.insert(string[i]);\n    }\n    return unique_chars.size();",
  "    // Initialize the number of distinct characters\n    long count = 0;\n    //\
    \ For each character in the string\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        // For each character up to the current character\n        bool flag\
    \ = true;\n        for (int j = 0; j < i; j++) {\n            // If they are the\
    \ same\n            if (string[i] == string[j]) {\n                // Flag that\
    \ the current character is not distinct\n                flag = false;\n     \
    \           break;\n            }\n        }\n        // If it is still flagged\
    \ as a distinct character\n        if (flag) {\n            // Increase the number\
    \ of distinct characters\n            count++;\n        }\n    }\n    // Return\
    \ the number of distinct characters\n    return count;", "\tlong size = string.size();\n\
    \tstd::sort(string.begin(), string.end());\n\tint count = 1;\n\tfor (int i = 1;\
    \ i < size; i++) {\n\t\tif (string[i] != string[i - 1])\n\t\t\tcount++;\n\t}\n\
    \treturn count;", "    //delete this part and enter your code here\n    std::set<char>\
    \ s;\n    for(auto i:string)\n        s.insert(tolower(i));\n    return s.size();",
  "\tlong count=0;\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\tstd::string string3;\n\tfor(int i=0;i<string.length();i++)\n\t\
    {\n\t\tif(string[i]!=' ')\n\t\t{\n\t\t\tstring3.push_back(string[i]);\n\t\t}\n\
    \t}\n\tstd::sort(string3.begin(),string3.end());\n\tfor(int i=0;i<string3.length();i++)\n\
    \t{\n\t\tcount++;\n\t\tif(string3[i]==string3[i+1])\n\t\t{\n\t\t\tcount--;\n\t\
    \t}\n\t}\n\treturn count;", "  long  count = 0;\n  std::set<char> duplicates;\n\
    \  for(int i = 0; i < string.length(); i++) {\n    if(duplicates.find(tolower(string[i]))\
    \ == duplicates.end()) {\n      duplicates.insert(tolower(string[i]));\n     \
    \ count++;\n    }\n  }\n  return count;", "    std::set<char> characters_set;\n\
    \    for (char character : string) {\n        characters_set.insert(std::tolower(character));\n\
    \    }\n    return characters_set.size();", "  long result = 0;\n  for (int i\
    \ = 0; i < string.length(); i++) {\n    int exist = 0;\n    for (int j = 0; j\
    \ < i; j++) {\n      if (string[i] == string[j]) {\n        exist = 1;\n     \
    \   break;\n      }\n    }\n    if (exist == 0) {\n      result++;\n    }\n  }\n\
    \  return result;", "    int letters[26] = {0};\n    long count = 0;\n    for\
    \ (char& c : string) {\n        if (!std::isalpha(c)) continue;\n        c = std::tolower(c);\n\
    \        if (letters[c - 'a']++ == 0) count++;\n    }\n    return count;", "\t\
    std::set<char> set;\n\tfor (size_t i = 0; i < string.size(); i++) {\n\t\tchar\
    \ c = string[i];\n\t\tset.insert(tolower(c));\n\t}\n\treturn set.size();", " \
    \   std::set<char> distinct_chars;\n    for (char character : string) {\n    \
    \    distinct_chars.insert(std::tolower(character));\n    }\n    return distinct_chars.size();",
  "\tlong length_of_string = string.length();\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tstd::set<char> s(string.begin(), string.end());\n\
    \tlong count = s.size();\n\treturn count;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    long count = 0;\n    bool visited[256]\
    \ = {0};\n    for(int i = 0; i < string.length(); i++) {\n        if(!visited[string[i]])\
    \ {\n            visited[string[i]] = true;\n            count++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    std::string temp = \"\"\
    ;\n    for(int i = 0; i < string.length(); i++) {\n        std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n        temp += string[i];\n    }\n\
    \    std::stringstream ss(temp);\n    while(ss.good()) {\n        std::string\
    \ substr;\n        getline(ss, substr, ',');\n        count++;\n    }\n    return\
    \ count;", "    // create a map of character and a counter for its appearances\n\
    \    std::map<char, long> map;\n    for (char &c : string) {\n        char lower\
    \ = tolower(c);\n        map[lower] += 1;\n    }\n    // return size of map\n\
    \    return map.size();", "  long total=0;\n  int n=string.length();\n  char c=string[0];\n\
    \  for(int i=0;i<n;i++){\n    if(string[i]!=c){\n      total++;\n      c=string[i];\n\
    \    }\n  }\n  return total+1;", '   return std::set<char>(string.begin(), string.end()).size();',
  "  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n  std::set<char>\
    \ s(string.begin(), string.end());\n  return s.size();", "  std::set<char> set;\n\
    \  long len = string.length();\n  for (long i = 0; i < len; i++) {\n    set.insert(tolower(string[i]));\n\
    \  }\n  return set.size();", "    char chars_in_string [string.length()];\n  \
    \  int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        bool\
    \ repeat = false;\n        for (int j = 0; j < string.length(); j++) {\n     \
    \       if (string[i] == chars_in_string[j]) {\n                repeat = true;\n\
    \            }\n        }\n        if (!repeat) {\n            chars_in_string[count]\
    \ = string[i];\n            count++;\n        }\n    }\n    return count;", " \
    \   std::set<char> hash_set;\n    for (char c : string) {\n        hash_set.insert(std::tolower(c));\n\
    \    }\n    return hash_set.size();", "    unordered_set<char> char_set;\n   \
    \ for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n            char_set.insert(c);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            char_set.insert(c);\n\
    \        }\n    }\n    return char_set.size();", "  long count = 0;\n  int i =\
    \ 0;\n  while(string[i] != '\\0') {\n    char c = string[i];\n    int j = 0;\n\
    \    while(string[j] != '\\0') {\n      if(tolower(string[j]) == tolower(c)) {\n\
    \        string[j] = '0';\n      }\n      j++;\n    }\n    if(string[i] != '0')\
    \ {\n      count++;\n    }\n    i++;\n  }\n  return count;", "\tstd::set<char>\
    \ chars;\n\tint len = string.length();\n\tfor (int i = 0; i < len; i++) {\n\t\t\
    if (!chars.count(tolower(string[i])))\n\t\t\tchars.insert(tolower(string[i]));\n\
    \t}\n\treturn chars.size();", "\tset<char> cset;\n\tfor (char c : string)\n\t\t\
    cset.insert(tolower(c));\n\treturn cset.size();", "    int hash_table[26] = {0};\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            hash_table[string[i] - 'a']++;\n       \
    \ } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            hash_table[string[i]\
    \ - 'A']++;\n        }\n    }\n    long distinct_characters = 0;\n    for (int\
    \ i = 0; i < 26; i++) {\n        if (hash_table[i] > 0) {\n            distinct_characters++;\n\
    \        }\n    }\n    return distinct_characters;", "  /* TODO: Complete this\
    \ function */\n  unordered_set<char> s;\n  for(char x: string)\n  {\n    s.insert(tolower(x));\n\
    \  }\n  return s.size();", "  // your code goes here\n  unordered_set<char>hash_set;\n\
    \  for(int i=0;i<string.length();i++)\n  {\n    hash_set.insert(tolower(string[i]));\n\
    \  }\n  return hash_set.size();", "    string = boost::to_lower_copy(string);\n\
    \    set<char> unique_chars(string.begin(), string.end());\n    return unique_chars.size();",
  "    std::vector<int> hash(128, 0);\n    for (char c : string) {\n        hash[tolower(c)]++;\n\
    \    }\n    long count = 0;\n    for (auto e : hash) {\n        if (e > 0) {\n\
    \            count++;\n        }\n    }\n    return count;", "     // Write your\
    \ code here\n     int count=0;\n     for(int i=0;i<string.length();i++)\n    \
    \ {\n         for(int j=i+1;j<string.length();j++)\n         {\n             if(string[i]==string[j])\n\
    \             {\n                 count++;\n             }\n         }\n     }\n\
    \     int a=string.length()-count;\n     return a;\n", "\tstd::set<char> charset;\n\
    \tfor (const char& c : string)\n\t\tcharset.insert(tolower(c));\n\treturn charset.size();",
  "\t// your code here\n\tset<char> S;\n\tfor (auto i = string.begin(); i != string.end();\
    \ i++) {\n\t\tS.insert(tolower(*i));\n\t}\n\treturn S.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set1(string.begin(),\
    \ string.end());\n    return set1.size();", "    long count=0;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        char c = string[i];\n        for(int j=0;j<i;j++)\n        {\n\
    \            if(c==string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return string.length()-count;",
  "    long count=0;\n    char arr[256]={0};\n    for(long i=0;i<string.length();i++){\n\
    \        arr[tolower(string[i])]++;\n    }\n    for(long i=0;i<256;i++){\n   \
    \     if(arr[i]>0){\n            count++;\n        }\n    }\n    return count;",
  "    // Write your solution here\n    int n = string.length();\n    int count =\
    \ 0;\n    int visited[256] = {0};\n    for(int i = 0; i < n; i++){\n      if(visited[string[i]]\
    \ == 0){\n        count++;\n        visited[string[i]] = 1;\n      }\n    }\n\
    \    return count;", "    std::set<std::string> c;\n    for(unsigned int i=0;i<string.length();i++){\n\
    \        std::string s(1,string[i]);\n        c.insert(s);\n    }\n    return\
    \ c.size();", "    long length = string.length();\n    for (int i = 0; i < length;\
    \ i++) {\n        string[i] = tolower(string[i]);\n    }\n    std::set<char> character_set;\n\
    \    for (int i = 0; i < length; i++) {\n        character_set.insert(string[i]);\n\
    \    }\n    long distinct_characters = character_set.size();\n    return distinct_characters;",
  "\tlong count = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (i ==\
    \ 0) {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tbool flag = true;\n\t\t\tfor\
    \ (long j = 0; j < i; j++) {\n\t\t\t\tif (string[i] == string[j]) {\n\t\t\t\t\t\
    flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> char_set;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    char_set.insert(string[i]);\n \
    \ }\n  return char_set.size();", "    // replace the code below with your own\
    \ code\n    return 0;", '    return std::set<char>(string.begin(), string.end()).size();',
  "    long distinct_characters = 0;\n    std::string::iterator it;\n    std::set<char>\
    \ s;\n    for(it = string.begin(); it != string.end(); it++) {\n        s.insert(tolower(*it));\n\
    \    }\n    distinct_characters = s.size();\n    return distinct_characters;",
  "    std::unordered_set<char> s;\n    for(int i=0;i<string.length();i++){\n    \
    \    s.insert(string[i]);\n    }\n    return s.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set(string.begin(),\
    \ string.end());\n    return set.size();", "    long distinct_chars = 0;\n   \
    \ for (char c = 'a'; c <= 'z'; c++) {\n        if (string.find(c) != std::string::npos)\n\
    \            distinct_chars++;\n    }\n    for (char c = 'A'; c <= 'Z'; c++) {\n\
    \        if (string.find(c) != std::string::npos)\n            distinct_chars++;\n\
    \    }\n    return distinct_chars;", "    long count = 0;\n    // Type your code\
    \ here\n    // convert all characters to lowercase and store in str\n    string\
    \ str=\"\";\n    int len = string.length();\n    for(int i=0;i<len;i++)\n    {\n\
    \        char c = string[i];\n        c = tolower(c);\n        str += c;\n   \
    \ }\n    // sort the elements in str\n    sort(str.begin(),str.end());\n    for(int\
    \ i=0;i<len;i++)\n    {\n        // count distinct characters in str\n       \
    \ if(str[i] != str[i+1])\n        {\n            count++;\n        }\n    }\n\
    \    return count;", "\t", "    int i;\n    long count = 0;\n    std::set<char>\
    \ myset;\n    for(i=0; i<string.length(); i++)\n    {\n        myset.insert(string[i]);\n\
    \    }\n    return myset.size();", "\tstd::vector<char> v(string.begin(), string.end());\n\
    \tstd::sort(v.begin(), v.end());\n\tv.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \treturn v.size();", "\tstd::set<char> charSet;\n\tfor (char c : string)\n\t\t\
    charSet.insert(tolower(c));\n\treturn charSet.size();", "  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> distinct_chars(string.begin(),\
    \ string.end());\n  return distinct_chars.size();", "    long count=0;\n    long\
    \ n=string.length();\n    for(long i=0;i<n;i++)\n    {\n        if(string[i]=='\
    \ ')\n        {\n            continue;\n        }\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            if(string[i]==string[j])\n            {\n            \
    \    string[j]=' ';\n            }\n        }\n        count++;\n    }\n    return\
    \ count;", "    int res = 0;\n    int len = string.length();\n    int freq[256]\
    \ = {0};\n    for(int i = 0; i < len; i++) {\n        if(!freq[tolower(string[i])])\
    \ {\n            res++;\n            freq[tolower(string[i])]++;\n        }\n\
    \    }\n    return res;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::unordered_set<char>  myset;\n    for(char c : string)\
    \ {\n        myset.insert(c);\n    }\n    return myset.size();", "\t// YOUR CODE\
    \ HERE\n\tstd::set<char> unique_chars;\n\tfor (auto c : string) {\n\t\tunique_chars.insert(tolower(c));\n\
    \t}\n\treturn unique_chars.size();", "    // Your code here\n    long count =\
    \ 0;\n    std::string unique;\n    for(int i = 0; i < string.length(); i++){\n\
    \        if(unique.find(tolower(string[i])) == std::string::npos){\n         \
    \   unique += tolower(string[i]);\n            count++;\n        }\n    }\n  \
    \  return count;", "    std::set<char> stringSet;\n    for (char character : string)\
    \ {\n        stringSet.insert(tolower(character));\n    }\n    return stringSet.size();",
  "\tint size=string.size();\n\tint i=0;\n\tchar a[27]={'\\0'};\n\twhile(i<size)\n\
    \t{\n\t\tint k=0;\n\t\tif(string[i]>=65 && string[i]<=90)\n\t\t{\n\t\t\tif(a[string[i]-64]=='\\\
    0')\n\t\t\t{\n\t\t\t\ta[string[i]-64]=string[i];\n\t\t\t}\n\t\t}\n\t\telse if(string[i]>=97\
    \ && string[i]<=122)\n\t\t{\n\t\t\tif(a[string[i]-96]=='\\0')\n\t\t\t{\n\t\t\t\
    \ta[string[i]-96]=string[i];\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint count=0;\n\t\
    for(int i=0;i<26;i++)\n\t{\n\t\tif(a[i]!='\\0')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\
    \t}\n\treturn count;", "    std::set<char> myset;\n    for(int i=0;i<string.length();i++){\n\
    \        myset.insert(tolower(string[i]));\n    }\n    return myset.size();",
  "\tlong distinct = 0;\n\t// write your code here\n\tstd::set<char> chars;\n\tfor\
    \ (char c : string) {\n\t\tc = std::tolower(c);\n\t\tchars.insert(c);\n\t}\n\t\
    distinct = chars.size();\n\treturn distinct;", "   std::unordered_set<char> store;\n\
    \   for(int i=0;i<string.length();i++){\n       store.insert(string[i]);\n   }\n\
    \   return store.size();", "\tstd::unordered_set<char> char_set;\n\tfor (auto\
    \ c : string) {\n\t\tchar_set.insert(std::tolower(c));\n\t}\n\treturn char_set.size();",
  "    long count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::sort(string.begin(), string.end());\n    for (auto i =\
    \ 0; i < string.length(); i++) {\n        if (string[i] != string[i + 1])\n  \
    \          count++;\n    }\n    return count;", "    long res = 0;\n    std::string\
    \ lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n    \
    \    lower_string += tolower(string[i]);\n    }\n    std::string unique_characters\
    \ = \"\";\n    for (int i = 0; i < lower_string.length(); i++) {\n        if (unique_characters.find(lower_string[i])\
    \ == std::string::npos) {\n            unique_characters += lower_string[i];\n\
    \            res++;\n        }\n    }\n    return res;", "    // Your code here\n\
    \t\n\tlong count = 0;\n\tstd::map<char, bool> map;\n\tfor(int i = 0; i < string.length();\
    \ i++)\n\t{\n\t\tif(map.find(string[i]) == map.end())\n\t\t{\n\t\t\tcount++;\n\
    \t\t\tmap[string[i]] = true;\n\t\t}\n\t}\n\treturn count;", "    \n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\n    std::set<char> s;\n    for(auto\
    \ ele : string)\n        s.insert(ele);\n    return s.size();", "  std::set<char>\
    \ unique_characters(string.begin(), string.end());\n  return unique_characters.size();",
  "    // iterate through the string and store each character in a set\n    std::set<char>\
    \ unique_chars;\n    for (auto c : string) {\n        unique_chars.insert(c);\n\
    \    }\n    return unique_chars.size();", "    set<char> unique_characters;\n\
    \    for (char c : string)\n        unique_characters.insert(tolower(c));\n  \
    \  return unique_characters.size();", "    std::set<char> set;\n    std::set<char>::iterator\
    \ it;\n    for(int i=0;i<string.length();i++){\n        set.insert(string[i]);\n\
    \    }\n    return set.size();", "    // Write your code here\n    std::string\
    \ str = \"\";\n    std::sort(string.begin(), string.end());\n    int count = 0;\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] == string[i+1]){\n\
    \            continue;\n        }\n        else{\n            count++;\n     \
    \   }\n    }\n    return count;", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    string.erase(std::unique(string.begin(), string.end()), string.end());\n\
    \    return string.length();", "    std::set<char> set;\n    for (auto& ch : string)\
    \ {\n        set.insert(tolower(ch));\n    }\n    return set.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(),\n                   [](unsigned char c) { return\
    \ std::tolower(c); });\n    std::vector<char> vector(string.begin(), string.end());\n\
    \    std::sort(vector.begin(), vector.end());\n    auto last = std::unique(vector.begin(),\
    \ vector.end());\n    vector.erase(last, vector.end());\n    return vector.size();",
  "  // for (long i = 0; i < string.length(); i++) {\n  // \tstd::cout << string[i]\
    \ << '\\n';\n  // }\n  std::vector<char> distinct_characters;\n  for (long i =\
    \ 0; i < string.length(); i++) {\n    if (std::find(distinct_characters.begin(),\
    \ distinct_characters.end(), string[i]) == distinct_characters.end()) {\n    \
    \  distinct_characters.push_back(string[i]);\n    }\n  }\n  return distinct_characters.size();",
  "    long count = 0;\n    std::unordered_set<char> uset;\n    for(auto ch : string)\
    \ {\n        uset.insert(tolower(ch));\n    }\n    return uset.size();", "   \
    \ long distinct_count=0;\n    std::set<char> char_set;\n    for(int i=0;i<string.length();i++){\n\
    \        char_set.insert(string[i]);\n    }\n    distinct_count=char_set.size();\n\
    \    return distinct_count;", "    std::string s = string;\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    s.erase(std::unique(s.begin(), s.end()),\
    \ s.end());\n    return s.length();", "    long distinct_chars = 0;\n    bool\
    \ used[128] = {false};\n\n    for (std::string::iterator it = string.begin();\
    \ it != string.end(); ++it) {\n        if (used[std::tolower(*it)] == false) {\n\
    \            used[std::tolower(*it)] = true;\n            distinct_chars++;\n\
    \        }\n    }\n\n    return distinct_chars;", "    long distinct_count = 0;\n\
    \    std::vector<bool> distinct(26, false);\n    // 1. convert to lower case\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    // 2. Check if character exists in the string\n    for (auto it = string.begin();\
    \ it != string.end(); it++) {\n        int index = *it - 'a';\n        if (!distinct[index])\
    \ {\n            distinct[index] = true;\n            distinct_count++;\n    \
    \    }\n    }\n    return distinct_count;", "    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        int flag = 0;\n        for(int j\
    \ = 0; j < i; j++) {\n            if(string[i] == string[j]) {\n             \
    \   flag = 1;\n                break;\n            }\n        }\n        if(flag\
    \ == 0)\n            count++;\n    }\n    return count;", "  long size = string.size();\n\
    \  long count = 0;\n  for (int i = 0; i < size; i++) {\n    int j;\n    for (j\
    \ = 0; j < i; j++) {\n      if (string[i] == string[j]) {\n        break;\n  \
    \    }\n    }\n    if (i == j) {\n      count++;\n    }\n  }\n  return count;",
  "    std::set<char> characters;\n    for (auto c : string)\n        characters.insert(std::tolower(c));\n\
    \    return characters.size();", "    std::set<char> set(string.begin(), string.end());\n\
    \    return set.size();", "  std::unordered_set<char> characters;\n  for (char\
    \ ch : string) {\n    if (isalpha(ch))\n      characters.insert(tolower(ch));\n\
    \  }\n  return characters.size();", "    // Start writing your code here\n   \
    \ int count=0;\n    map<char,int> m;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        m[string[i]]++;\n    }\n    for(auto x:m)\n    {\n        count++;\n\
    \    }\n    return count;", "  // Your code here\n  long x=0;\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  sort(string.begin(),string.end());\n\
    \  std::set<char> s(string.begin(),string.end());\n  // std::set<char>::iterator\
    \ itr;\n  // for(itr=s.begin();itr!=s.end();itr++)\n  //   cout<<*itr<<\" \";\n\
    \  x=s.size();\n  return x;", "    // If you want to write an efficient code,\
    \ you should consider using `unordered_set` data structure\n    // For now, use\
    \ `set` and try to optimize your code later\n    std::set<char> set;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        set.insert(string[i]);\n  \
    \  }\n    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "\tlong distinct_characters\
    \ = 0;\n\tint str[256] = {0};\n\tfor(int i = 0; i < string.length(); i++) {\n\t\
    \tstr[tolower(string[i])]++;\n\t}\n\tfor(int i = 0; i < 256; i++) {\n\t\tif(str[i]\
    \ != 0) {\n\t\t\tdistinct_characters++;\n\t\t}\n\t}\n\treturn distinct_characters;",
  "\tstd::map<char, int> map;\n\tfor (auto letter : string) {\n\t\tmap[letter]++;\n\
    \t}\n\treturn map.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> test(string.begin(), string.end());\n\
    \    return test.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> characters(string.begin(), string.end());\n\
    \    return characters.size();", "\t// Write your code here", "    std::set<std::string>\
    \ distinct_characters;\n    // Transform each character in the string to uppercase\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n\
    \    for (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(string.substr(i,\
    \ 1));\n    }\n    return distinct_characters.size();", "\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tstring[i] = toupper(string[i]);\n\t}\n\tlong answer\
    \ = 0;\n\tstd::sort(string.begin(), string.end());\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] != string[i+1]) {\n\t\t\tanswer++;\n\t\t}\n\t}\n\t\
    return answer;", "    std::set<char> distinct_characters;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        distinct_characters.insert(string[i]);\n\
    \    }\n    return distinct_characters.size();", "  // Convert all characters\
    \ to lowercase\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  // Compute the required answer\n  std::unordered_set<char> seen;\n\
    \  for (auto &c : string) {\n    seen.insert(c);\n  }\n  return seen.size();",
  "\t//making everything uppercase \n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::toupper);\n\tstd::sort(string.begin(), string.end());\n\t\
    return std::unique(string.begin(), string.end()) - string.begin();", "  long long\
    \ int i,c;\n  long distinct=0;\n  std::string new_string;\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  new_string=string;\n  sort(new_string.begin(),new_string.end());\n\
    \  for(i=0;i<new_string.length();i++)\n  {\n    c=0;\n    while(new_string[i]==new_string[i+1])\n\
    \    {\n      c++;\n      i++;\n    }\n    if(c==0)\n    {\n      distinct++;\n\
    \    }\n  }\n  return distinct;", "    long result = 0;\n    // count_distinct_characters(string);\n\
    \    char *str = (char *)string.c_str();\n    int n = strlen(str);\n    int temp[200]\
    \ = {0};\n    for(int i = 0; i < n; i++) {\n        char ch = tolower(str[i]);\n\
    \        if(temp[ch] == 0) {\n            temp[ch] = 1;\n            result++;\n\
    \        }\n    }\n    return result;", "  long counter = 0;\n  std::string new_string\
    \ = \"\";\n  for (auto &c : string) {\n    if (new_string.find(std::tolower(c))\
    \ == std::string::npos) {\n      new_string += std::tolower(c);\n      counter++;\n\
    \    }\n  }\n  return counter;", "    long count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    for(int i=0;i<string.length();i++){\n\
    \        if(std::find(string.begin(),string.begin()+i,string[i])==string.begin()+i){\n\
    \            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ characters(string.begin(), string.end());\n    return characters.size();", " \
    \   int x[26]={0};\n    for(auto a:string)\n    {\n        x[tolower(a)-'a']++;\n\
    \    }\n    int n=0;\n    for(int i=0;i<26;i++)\n    {\n        if(x[i]>0)\n \
    \       {\n            n++;\n        }\n    }\n    return n;", "    long count\
    \ = 0;\n    std::set<char> char_set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        char_set.insert(string[i]);\n    }\n    return char_set.size();",
  "\tstd::set<char>s;\n\tfor(auto item:string) {\n\t\ts.insert(item);\n\t}\n\treturn\
    \ s.size();", "    // Your code goes here!\n    int count = 0;\n    int i = 0;\n\
    \    std::vector<char> v;\n    for(i = 0; i < string.length(); i++){\n       \
    \ char s = string[i];\n        if(s < 97){\n            s = s + 32;\n        }\n\
    \        v.push_back(s);\n    }\n    sort(v.begin(), v.end());\n    char pre =\
    \ ' ';\n    for(i = 0; i < v.size(); i++){\n        if(v[i] != pre){\n       \
    \     count++;\n            pre = v[i];\n        }\n    }\n    return count;",
  "  // Code here\n  // Caution: do not use std::unordered_set and other data structures\n\
    \  int n = string.length();\n  int result = 0;\n  int hash[26] = {0};\n  for(int\
    \ i = 0; i < n; i++) {\n    int index = string[i] - 'a';\n    if(index >= 0 &&\
    \ index < 26) {\n      if(hash[index] == 0) {\n        result++;\n        hash[index]\
    \ = 1;\n      }\n    }\n    index = string[i] - 'A';\n    if(index >= 0 && index\
    \ < 26) {\n      if(hash[index] == 0) {\n        result++;\n        hash[index]\
    \ = 1;\n      }\n    }\n  }\n  return result;", "    long distinct=0;\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i]-=32;\n        }\n    }\n    for(int i=0;i<string.length();i++){\n\
    \        for(int j=i+1;j<string.length();j++){\n            if(string[i]==string[j]){\n\
    \                string[j]=' ';\n            }\n        }\n    }\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]!=' '){\n            distinct++;\n\
    \        }\n    }\n    return distinct;", "    int length = string.length();\n\
    \    std::set<char> set;\n    for(int i = 0; i < length; i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "  std::vector<char> character_count;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    char character = string[i];\n \
    \   bool character_found = false;\n    for (int j = 0; j < character_count.size();\
    \ j++) {\n      if (tolower(character) == tolower(character_count[j])) {\n   \
    \     character_found = true;\n        break;\n      }\n    }\n    if (!character_found)\
    \ {\n      character_count.push_back(character);\n    }\n  }\n  return character_count.size();",
  "\tstd::unordered_set<char> s;\n\tfor (char x : string)\n\t\ts.insert(tolower(x));\n\
    \treturn s.size();", "    std::unordered_set<char> chars;\n    for (char c : string)\
    \ {\n        chars.insert(tolower(c));\n    }\n    return chars.size();", "  \
    \  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    return std::set<char>(string.begin(), string.end()).size();", "    std::sort(string.begin(),\
    \ string.end());\n    std::string::iterator it = std::unique(string.begin(), string.end());\n\
    \    return std::distance(string.begin(), it);", "\tlong count = 0;\n\tfor (auto\
    \ i = 0; i < string.length(); i++) {\n\t\tbool is_distinct = true;\n\t\tfor (auto\
    \ j = 0; j < string.length(); j++) {\n\t\t\tif (tolower(string[i]) == tolower(string[j])\
    \ && i != j) {\n\t\t\t\tis_distinct = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\tif (is_distinct) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long\
    \ distinct_characters = 0;\n    return distinct_characters;", "  long uniqueChars\
    \ = 0;\n  std::string::iterator it;\n  for (it = string.begin(); it != string.end();\
    \ it++) {\n    std::string::iterator iit;\n    for (iit = string.begin(); iit\
    \ != string.end(); iit++) {\n      if (tolower(*it) == tolower(*iit)) {\n    \
    \    uniqueChars++;\n        break;\n      }\n    }\n  }\n  return uniqueChars;",
  "    std::vector<char> distinct_characters;\n    for (char character : string) {\n\
    \        if (std::find(distinct_characters.begin(), distinct_characters.end(),\
    \ character) == distinct_characters.end()) {\n            distinct_characters.push_back(character);\n\
    \        }\n    }\n    return distinct_characters.size();", "    set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "  /*\n  * We need to find out all the distinct characters,\n\
    \  * which is exactly what a set will do.\n  * We then just need to count the\
    \ number of items in that set.\n  */\n  std::set<char> char_set;\n  for (int i\
    \ = 0; i < string.length(); i++) {\n    char_set.insert(string[i]);\n  }\n  return\
    \ char_set.size();", "\tint distinct_chars = 0;\n\tint unique_chars[26];\n\tfor\
    \ (int i = 0; i < 26; i++) {\n\t\tunique_chars[i] = 0;\n\t}\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\
    \t\t\tif (unique_chars[string[i] - 'a'] == 0) {\n\t\t\t\tunique_chars[string[i]\
    \ - 'a'] = 1;\n\t\t\t\tdistinct_chars++;\n\t\t\t}\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tif (unique_chars[string[i] - 'A'] == 0)\
    \ {\n\t\t\t\tunique_chars[string[i] - 'A'] = 1;\n\t\t\t\tdistinct_chars++;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn distinct_chars;", "  \n    set<char> s;\n    for(auto\
    \ i=0;i<string.length();i++)\n        s.insert(string[i]);\n    return s.size();",
  "\tstd::map<char, bool> hashmap;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\thashmap[string[i]] = true;\n\t}\n\treturn hashmap.size();", "    \n    int\
    \ i, j, max = 0;\n    int arr[26];\n    for(i = 0; i < 26; i++)\n        arr[i]\
    \ = 0;\n    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z')\n            arr[string[i] - 'a'] = 1;\n       \
    \ else if(string[i] >= 'A' && string[i] <= 'Z')\n            arr[string[i] - 'A']\
    \ = 1;\n    }\n    for(i = 0; i < 26; i++)\n        if(arr[i] == 1)\n        \
    \    max++;\n    return max;\n    \n    \n    \n    \n    //return 0;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), [](unsigned char c){ return std::tolower(c); });\n\
    \    return std::unordered_set<char>(string.begin(), string.end()).size();", " \
    \   // TODO: implement\n    return 0;", "    long count = 0;\n    long i = 0;\n\
    \    while (string[i] != '\\0') {\n        if (string[i] != ',') {\n         \
    \   if (string[i] >= 65 && string[i] <= 90) {\n                string[i] = string[i]\
    \ + 32;\n            }\n            count++;\n        }\n        i++;\n    }\n\
    \    std::cout << count << std::endl;\n    return count;", "    long count = 0;\n\
    \    int len = string.length();\n    for(int i = 0; i < len; i++) {\n        if(string[i]\
    \ != '\\0') {\n            for(int j = i + 1; j < len; j++) {\n              \
    \  if(string[i] == string[j]) {\n                    string[j] = '\\0';\n    \
    \            }\n            }\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::unordered_set<char> distinct_characters;\n    for (char c : string)\
    \ {\n        distinct_characters.insert(c);\n    }\n    return distinct_characters.size();",
  "    long count = 0;\n    std::unordered_set<char> char_set;\n    for (char c :\
    \ string) {\n        char_set.insert(tolower(c));\n    }\n    count = char_set.size();\n\
    \    return count;", "    std::set<char> result;\n    for (const auto& c : string)\
    \ {\n        result.insert(std::tolower(c));\n    }\n    return result.size();",
  "    long count = 0;\n    // transform characters to lowercase\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    // Creating a set to store all\
    \ the characters\n    std::set<char> s;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        s.insert(string[i]);\n    }\n    count = s.size();\n    return\
    \ count;", "// empty string has 0 distinct characters\n\tif (string.empty()) {\n\
    \t\treturn 0;\n\t}\n// std::set is a collection of unique elements\n\tstd::set<char>\
    \ seen_characters;\n\tfor (const char& c : string) {\n\t\tseen_characters.insert(std::tolower(c));\n\
    \t}\n\treturn seen_characters.size();", "    int count = 0;\n    std::string s\
    \ = string;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n \
    \   std::set<char> chars;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  chars.insert(s[i]);\n    }\n    count = chars.size();\n    return count;",
  "    \n    long i=0;\n    std::string l_string=string;\n    std::string u_string=string;\n\
    \    std::transform(l_string.begin(), l_string.end(), l_string.begin(), ::tolower);\n\
    \    std::transform(u_string.begin(), u_string.end(), u_string.begin(), ::toupper);\n\
    \    for(auto j=l_string.begin();j!=l_string.end();j++)\n    {\n        if(*j==*(j+1))\n\
    \        {\n            l_string.erase(j);\n            j--;\n        }\n    }\n\
    \    for(auto j=u_string.begin();j!=u_string.end();j++)\n    {\n        if(*j==*(j+1))\n\
    \        {\n            u_string.erase(j);\n            j--;\n        }\n    }\n\
    \    std::string result=l_string+u_string;\n    for(auto j=result.begin();j!=result.end();j++)\n\
    \    {\n        if(*j==*(j+1))\n        {\n            result.erase(j);\n    \
    \        j--;\n        }\n    }\n    return result.length();", "    int mx=0;\n\
    \    std::vector<int> freq(26,0);\n    for(int i=0;i<string.length();i++){\n \
    \       if(string[i] >= 'a' && string[i]<='z'){\n            freq[string[i]-'a']++;\n\
    \        }\n        else{\n            freq[string[i]-'A']++;\n        }\n   \
    \ }\n    for(int i=0;i<26;i++){\n        if(freq[i] > 0){\n            mx++;\n\
    \        }\n    }\n    return mx;", "\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tstd::set<char> distinct;\n\tfor (char s : string)\
    \ {\n\t\tdistinct.insert(s);\n\t}\n\treturn distinct.size();", "\t//declaring\
    \ a set and storing values in that set \n\t// set only stores unique elements\
    \ so it makes solving the question a lot easier\n\tstd::set<char> set;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tset.insert(string[i]);\n\t}\n\t\
    //printing all the elements stored in the set using iterator\n\tstd::set<char>::iterator\
    \ itr;\n\tstd::cout << \"The set elements are: \";\n\tfor (itr = set.begin();\
    \ itr != set.end(); ++itr) {\n\t\tstd::cout << '\\t' << *itr;\n\t}\n\tstd::cout\
    \ << '\\n';\n\treturn set.size();", "    long count = 0;\n    for(int i = 0; i\
    \ < string.length(); i++) {\n        if (count == 0)\n            count = 1;\n\
    \        for(int j = 0; j < i; j++) {\n            if (tolower(string[i]) == tolower(string[j]))\
    \ {\n                break;\n            }\n            if (j == i - 1)\n    \
    \            count++;\n        }\n    }\n    return count;", "  std::set<char>\
    \ characters;\n  for (char c : string) {\n    characters.insert(tolower(c));\n\
    \  }\n  return characters.size();", "    long result = 0;\n    // TODO Write code\
    \ here\n    return result;", "\t// your code goes here\n\tlong count=0;\n\tfor(long\
    \ i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]>=65 && string[i]<=90)\n\t\t\
    {\n\t\t\tstring[i]=string[i]+32;\n\t\t}\n\t}\n\tstd::sort(string.begin(),string.end());\n\
    \tfor(long i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]!=string[i+1])\n\t\
    \t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    std::set<char> s;\n  \
    \  for(auto i = string.begin(); i != string.end(); i++) {\n        s.insert(tolower(*i));\n\
    \    }\n    return s.size();", "    long size = string.size();\n    long count\
    \ = 0;\n    long i = 0;\n    while(i < size) {\n        if(islower(string[i]))\n\
    \            string[i] = toupper(string[i]);\n        if(isalpha(string[i]))\n\
    \            count++;\n        i++;\n    }\n    return count;", "    std::set<char>\
    \ s;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n  \
    \      if(s.find(string[i]) == s.end()) {\n            s.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> char_set(string.begin(),\
    \ string.end());\n    return char_set.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n    }\n\
    \    return s.size();", "  long count = 0;\n  std::set<char> s;\n  for(int i =\
    \ 0; i < string.length(); i++) {\n    s.insert(tolower(string[i]));\n  }\n  return\
    \ s.size();", "    std::unordered_set<char> char_set;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n    }\n\
    \    return char_set.size();", "    int length = string.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < length; i++) {\n        for (int j = 0; j < length;\
    \ j++) {\n            if (i != j) {\n                if (tolower(string[i]) ==\
    \ tolower(string[j])) {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return (length - count);",
  "    std::set<char> char_set;\n    for (char c : string) {\n        if (char_set.find(tolower(c))\
    \ == char_set.end()) {\n            char_set.insert(tolower(c));\n        }\n\
    \    }\n    return char_set.size();", "    long dist_char_count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set_of_distinct_char(string.begin(),\
    \ string.end());\n    dist_char_count = set_of_distinct_char.size();\n    return\
    \ dist_char_count;", "    //bool characters[26] = {false};\n    std::set<char>\
    \ characters;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    for(auto i : string) {\n        characters.insert(i);\n   \
    \ }\n    return characters.size();", "  // Code for you to write\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::unordered_set<char> s;\n \
    \ for (const auto &c : string) {\n    s.insert(c);\n  }\n  return s.size();",
  "\tlong length = string.length();\n\tlong count = 0;\n\t// convert all characters\
    \ to lower case\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\t// make a set from the string, set contains distinct elements\n\
    \tstd::set<char> char_set;\n\tfor (int i = 0; i < length; i++) {\n\t\tchar_set.insert(string[i]);\n\
    \t}\n\treturn char_set.size();", "    // create a set of characters\n    // add\
    \ each character from the string to the set\n    // and set the size of the set\
    \ as the answer\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "\t// Write\
    \ your code here\n\t// Create a list of all the characters in the string\n\t//\
    \ Find out how many distinct characters are in the list\n\t// If the character\
    \ is lower case, make it upper case, then check if it is in the list. If not,\
    \ add it.\n\tlong output = 0;\n\tlong i = 0;\n\tstd::list<char> char_list;\n\t\
    while (i < string.length()) {\n\t\tchar character = string[i];\n\t\tif (character\
    \ >= 'a' && character <= 'z') {\n\t\t\tcharacter -= 'a' - 'A';\n\t\t}\n\t\tif\
    \ (std::find(char_list.begin(), char_list.end(), character) == char_list.end())\
    \ {\n\t\t\tchar_list.push_back(character);\n\t\t\toutput++;\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn output;", "    std::string lower_string;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        lower_string += std::tolower(string[i]);\n\
    \    }\n    std::set<char> s;\n    for (int i = 0; i < lower_string.length();\
    \ i++) {\n        s.insert(lower_string[i]);\n    }\n    return s.size();", " \
    \   int count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        for(int\
    \ j = i + 1; j < string.length(); j++) {\n            if(tolower(string[i]) ==\
    \ tolower(string[j])) {\n                string[j] = ' ';\n            }\n   \
    \     }\n    }\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i]\
    \ != ' ')\n            count++;\n    }\n    return count;", "    // Write your\
    \ code here\n    //std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> set;\n    for(int i=0;i<string.length();i++){\n\
    \        set.insert(string[i]);\n    }\n    return set.size();", "    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    long result = 0;\n    std::string\
    \ string1;\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::unordered_set<char> string_unique;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        string_unique.insert(string[i]);\n    }\n    for (int i = 0;\
    \ i < string_unique.size(); i++) {\n        result++;\n    }\n    return result;",
  "    // Write your code here\n    long count = 0;\n    int arr[26] = {0};\n    for(int\
    \ i = 0; i < string.length(); i++){\n        int x = string[i] - 'a';\n      \
    \  if(arr[x] == 0){\n            count++;\n            arr[x] = 1;\n        }\n\
    \    }\n    return count;", "  int len = string.length();\n  std::unordered_set<char>\
    \ distinct;\n  int i;\n  for(i=0;i<len;i++){\n    distinct.insert(tolower(string[i]));\n\
    \  }\n  return distinct.size();", "    std::unordered_set<char> set;\n    for\
    \ (auto letter : string)\n        set.insert(letter);\n    return set.size();",
  "    std::set<char> s;\n    for(long i = 0; i < string.length(); i++)\n    {\n \
    \       s.insert(tolower(string[i]));\n    }\n    return s.size();", "    string.erase(remove_if(string.begin(),\
    \ string.end(), ::isspace), string.end());\n    transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    unordered_set<char> hashSet;\n    for (char\
    \ c : string) {\n        hashSet.insert(c);\n    }\n    return hashSet.size();",
  "    std::vector<char> uniqueLetters;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (std::find(uniqueLetters.begin(), uniqueLetters.end(), string[i])\
    \ == uniqueLetters.end()) {\n            uniqueLetters.push_back(string[i]);\n\
    \        }\n    }\n    return uniqueLetters.size();", "    long count=0;\n   \
    \ std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n \
    \   std::sort(string.begin(), string.end());\n    for(long i=0;i<string.length();i++){\n\
    \        if(string[i]!=string[i+1]){\n            count++;\n        }\n    }\n\
    \    return count;", "  \n    //TODO: Implement your solution here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower); \n    std::set<char> s(string.begin(),\
    \ string.end()); \n    return s.size();", "\t// set is used to keep only unique\
    \ values in it.\n\tstd::set<char> unique_characters;\n\t// Since, set uses the\
    \ binary search tree. Then it is possible that the set might have stored the elements\
    \ in the ascending order.\n\t// to prevent this situation, we have used an unordered_set\
    \ instead.\n\t// Converting the string to be all in lower case before storing\
    \ it into the set/unordered_set.\n\t// We can also use transform to do so.\n\t\
    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\tfor\
    \ (auto &character : string) {\n\t\tunique_characters.insert(character);\n\t}\n\
    \treturn unique_characters.size();", "    std::string helper = \"\";\n    for\
    \ (long i = 0; i < string.length(); i++) {\n        if (helper.find(tolower(string[i]))\
    \ == std::string::npos && helper.find(toupper(string[i])) == std::string::npos)\
    \ {\n            helper += string[i];\n        }\n    }\n    return helper.length();",
  '  return std::set<char>(string.begin(), string.end()).size();', "    long count\
    \ = 0;\n    std::unordered_set<char> mySet;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(mySet.count(string[i]) == 0){\n            mySet.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "    char ch;\n \
    \   std::set<char> s;\n    std::set<char>::iterator it;\n    int n = string.length();\n\
    \    for(int i = 0; i < n; i++) {\n        ch = string[i];\n        s.insert(ch);\n\
    \    }\n    return s.size();", "  long length = string.length();\n  long count\
    \ = 0;\n  long i = 0;\n  while (i < length) {\n    if (string[i] != ' ') {\n \
    \     count++;\n      // Skip all characters which are same as current char\n\
    \      char currentChar = string[i];\n      while (i < length && string[i] ==\
    \ currentChar) {\n        i++;\n      }\n    }\n  }\n  return count;", "\tstd::set<char>\
    \ count;\n\tfor (auto x : string) {\n\t\tcount.insert(tolower(x));\n\t}\n\treturn\
    \ count.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long i, distinct_count\
    \ = 0;\n    std::set<char> set_char;\n    for(i = 0; i < string.length(); i++)\
    \ {\n        if(set_char.count(tolower(string[i])) == 0) {\n            set_char.insert(tolower(string[i]));\n\
    \            distinct_count++;\n        }\n    }\n    return distinct_count;",
  "\t// long count=0;\n\t// for(auto x:string)\n\t// {\n\t// \tcount+=1;\n\t// }\n\
    \t// return count;\n\tstd::set<char> s(string.begin(),string.end());\n\treturn\
    \ s.size();", "\tlong n = string.length();\n\tlong cnt = 0;\n\tstd::map<char,\
    \ bool> m;\n\tfor (long i = 0; i < n; i++) {\n\t\tchar ch = string[i];\n\t\tm[ch]\
    \ = true;\n\t}\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tcnt++;\n\
    \t}\n\treturn cnt;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::vector<char> char_vector(string.begin(), string.end());\n\
    \    std::sort(char_vector.begin(), char_vector.end());\n    std::vector<char>::iterator\
    \ it;\n    it = std::unique(char_vector.begin(), char_vector.end());\n    char_vector.resize(std::distance(char_vector.begin(),\
    \ it));\n    return char_vector.size();", "    string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    unordered_set<char> distinct;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        distinct.insert(string[i]);\n    }\n    return distinct.size();",
  "    string.erase(std::remove(string.begin(), string.end(), ' '), string.end());\
    \ // delete space\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);  // make lower case\n\n    std::set<char> s(string.begin(), string.end());\n\
    \    return s.size();", "    // Write your solution here\n    std::set<char> distinct;\n\
    \    for(int i = 0; i < string.length(); i++){\n      distinct.insert(tolower(string[i]));\n\
    \    }\n    return distinct.size();\n  }\n\nint main(){\n  assert(count_distinct_characters(\"\
    xyzXYZ\") == 3);\n  assert(count_distinct_characters(\"Jerry\") == 4);\n  assert(count_distinct_characters(\"\
    Hello there\") == 8);\n  assert(count_distinct_characters(\"abnbcn\") == 3);\n\
    \  assert(count_distinct_characters(\"\") == 0);\n  assert(count_distinct_characters(\"\
    abcde abcde\") == 5);\n  return 0;", "    long count = 0;\n    for(auto i : string)\
    \ {\n        if(!find(string.begin(), string.end(), tolower(i))) {\n         \
    \   count++;\n        }\n    }\n    return count;", "\treturn 0;", "    // your\
    \ code here\n    int n = string.length();\n    int count=0;\n    int a[26];\n\
    \    int b[26];\n    for(int i=0;i<26;i++)\n        a[i]=0;\n    for(int i=0;i<26;i++)\n\
    \        b[i]=0;\n    for(int i=0;i<n;i++)\n    {\n        if(string[i]>='a' &&\
    \ string[i]<='z')\n        {\n            if(a[string[i]-'a']==0)\n          \
    \  {\n                count++;\n                a[string[i]-'a']=1;\n        \
    \    }\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n       \
    \ {\n            if(b[string[i]-'A']==0)\n            {\n                count++;\n\
    \                b[string[i]-'A']=1;\n            }\n        }\n    }\n    return\
    \ count;", "    int count = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    for (char i : string) {\n\
    \        switch (i) {\n            case 'a':\n                a++;\n         \
    \       break;\n            case 'b':\n                b++;\n                break;\n\
    \            case 'c':\n                c++;\n                break;\n       \
    \     case 'd':\n                d++;\n                break;\n            case\
    \ 'e':\n                e++;\n                break;\n            case 'f':\n\
    \                f++;\n                break;\n            case 'g':\n       \
    \         g++;\n                break;\n            case 'h':\n              \
    \  h++;\n                break;\n            case 'i':\n                i++;\n\
    \                break;\n            case 'j':\n                j++;\n       \
    \         break;\n            case 'k':\n                k++;\n              \
    \  break;\n            case 'l':\n                l++;\n                break;\n\
    \            case 'm':\n                m++;\n                break;\n       \
    \     case 'n':\n                n++;\n                break;\n            case\
    \ 'o':\n                o++;\n                break;\n            case 'p':\n\
    \                p++;\n                break;\n            case 'q':\n       \
    \         q++;\n                break;\n            case 'r':\n              \
    \  r++;\n                break;\n            case 's':\n                s++;\n\
    \                break;\n            case 't':\n                t++;\n       \
    \         break;\n            case 'u':\n                u++;\n              \
    \  break;\n            case 'v':\n                v++;\n               ", "  \
    \  //TODO: Replace the body of this function\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set(string.begin(),\
    \ string.end());\n    return set.size();", "    long count = 0;\n    //for (int\
    \ i = 0; i < string.length(); i++) {\n        //std::cout << string[i] << \" \"\
    ;\n        //for (int j = i + 1; j < string.length(); j++) {\n            //if\
    \ (string[i] == string[j]) {\n                //count++;\n                //break;\n\
    \            //}\n        //}\n    //}\n    for (int i = 0; i < string.length();\
    \ i++) {\n        std::cout << string[i] << \" \";\n        for (int j = i + 1;\
    \ j < string.length(); j++) {\n            if (tolower(string[i]) == tolower(string[j]))\
    \ {\n                count++;\n                break;\n            }\n       \
    \ }\n    }\n    count = string.length() - count;\n    return count;"]
stop_tokens:
- "\n}"
