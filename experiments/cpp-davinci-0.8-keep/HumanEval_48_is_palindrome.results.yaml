name: HumanEval_48_is_palindrome
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reversed = text;\n\
    \    std::reverse(reversed.begin(), reversed.end());\n    return text == reversed;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string text_rev(text.rbegin(),\
    \ text.rend());\n\n    return text == text_rev;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int size = text.size();\n\
    \    int start = 0;\n    int end = size - 1;\n    while (start < end) {\n    \
    \    if (text[start] != text[end]) {\n            return false;\n        }\n \
    \       start++;\n        end--;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgnc0plkc: /tmp/tmpgnc0plkc.cpp:20: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    std::cout << len;\n    int i = 0;\n    while (i < len / 2) {\n        if\
    \ (text[i] != text[len - i - 1]) {\n            return false;\n        }\n   \
    \     i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: '0354555'
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.size() <= 1) return\
    \ true;\n    if(text[0] != text[text.size()-1]) return false;\n    return is_palindrome(text.substr(1,\
    \ text.size()-2));\n}\nint main() {\n    auto candidate = is_palindrome;\n   \
    \ assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int start = 0;\n  int end\
    \ = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end])\
    \ {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // WIP\n    int N = text.length();\n\
    \    int mid = floor(N/2);\n    for(int i=0; i<mid; i++){\n        if(text[i]!=text[N-i-1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // YOUR CODE HERE\n    int\
    \ n = text.length();\n    for(int i=0;i<n/2;i++){\n        if(text[i]!=text[n-i-1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string reversed = text;\n\
    \    reverse(reversed.begin(), reversed.end());\n    return text == reversed;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint i = 0;\n\tint j = text.length()\
    \ - 1;\n\twhile (i < j) {\n\t\tif (text[i] != text[j]) {\n\t\t\treturn false;\n\
    \t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint len = text.length();\n\
    \tfor (int i = 0; i < len / 2; i++) {\n\t\tif (text[i] != text[len - i - 1]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    if (length <= 1) {\n        return true;\n    }\n    else {\n        char\
    \ first = text[0];\n        char last = text[length - 1];\n        std::string\
    \ rest = text.substr(1, length - 2);\n        return (first == last) && is_palindrome(rest);\n\
    \    }\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string::iterator start\
    \ = text.begin();\n    std::string::iterator end = text.end() - 1;\n    for (\
    \ ; start < end; start++, end--) {\n        if (*start != *end) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    if (length == 0)\n        return true;\n    for (int i = 0; i < length /\
    \ 2; i++) {\n        if (text[i] != text[length - i - 1])\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb2j_trrq: /tmp/tmpb2j_trrq.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i=0;\n    while(i<n-i-1){\n        if(text[i] != text[n-i-1]){\n    \
    \        return false;\n        }\n        i++;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Your code goes here\n\
    \    int n = text.length();\n    if(n==0)\n        return true;\n    else if(n==1)\n\
    \        return true;\n    int low = 0;\n    int high = n-1;\n    while(low<high)\n\
    \    {\n        if(text[low]!=text[high])\n            return false;\n       \
    \ low++;\n        high--;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return std::equal(text.begin(),\
    \ text.begin() + text.size() / 2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: complete this\n\
    \    int i = 0;\n    int j = text.length() - 1;\n    while (i < j) {\n       \
    \ if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO\n    int left =\
    \ 0;\n    int right = text.length() - 1;\n    while (left < right) {\n       \
    \ if (text[left] != text[right]) {\n            return false;\n        }\n   \
    \     left++;\n        right--;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // REPLACE THE BODY OF THIS\
    \ FUNCTION WITH YOUR OWN IMPLEMENTATION\n  return false;\n}\nint main() {\n  \
    \  auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy35j6iwc: /tmp/tmpy35j6iwc.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  //!TODO\n  // return false;\n\
    \  string::iterator itr, itr2;\n  int x;\n  if(text.size() % 2 == 0)\n  {\n  \
    \  x = text.size()/2;\n    itr = text.begin() + x;\n    itr2 = text.end() - x;\n\
    \  }\n  else\n  {\n    x = text.size()/2;\n    itr = text.begin() + x;\n    itr2\
    \ = text.end() - x;\n  }\n  for(int i = 0; i < x; i++)\n  {\n    if(*itr != *itr2)\n\
    \    {\n      return false;\n    }\n    else\n    {\n      itr++;\n      itr2--;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjj6x6967.cpp: In function \u2018bool is_palindrome(std::string)\u2019\
    :\n/tmp/tmpjj6x6967.cpp:15:3: error: \u2018string\u2019 has not been declared\n\
    \   15 |   string::iterator itr, itr2;\n      |   ^~~~~~\n/tmp/tmpjj6x6967.cpp:20:5:\
    \ error: \u2018itr\u2019 was not declared in this scope\n   20 |     itr = text.begin()\
    \ + x;\n      |     ^~~\n/tmp/tmpjj6x6967.cpp:21:5: error: \u2018itr2\u2019 was\
    \ not declared in this scope\n   21 |     itr2 = text.end() - x;\n      |    \
    \ ^~~~\n/tmp/tmpjj6x6967.cpp:26:5: error: \u2018itr\u2019 was not declared in\
    \ this scope\n   26 |     itr = text.begin() + x;\n      |     ^~~\n/tmp/tmpjj6x6967.cpp:27:5:\
    \ error: \u2018itr2\u2019 was not declared in this scope\n   27 |     itr2 = text.end()\
    \ - x;\n      |     ^~~~\n/tmp/tmpjj6x6967.cpp:31:9: error: \u2018itr\u2019 was\
    \ not declared in this scope\n   31 |     if(*itr != *itr2)\n      |         ^~~\n\
    /tmp/tmpjj6x6967.cpp:31:17: error: \u2018itr2\u2019 was not declared in this scope\n\
    \   31 |     if(*itr != *itr2)\n      |                 ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    auto head = text.begin();\n\
    \    auto tail = text.end() - 1;\n    while (head < tail) {\n        if (*head\
    \ != *tail) {\n            return false;\n        }\n        head++;\n       \
    \ tail--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: implement\n   \
    \ return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsmfabfqk: /tmp/tmpsmfabfqk.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint count = 0;\n\tint text_length\
    \ = text.length();\n\tfor (int i = 0; i < text_length; i++) {\n\t\tif (text[i]\
    \ == text[text_length - i - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count ==\
    \ text_length) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        if (text[i] != text[length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string a = text;\n\
    \    std::reverse(a.begin(), a.end());\n    return a == text;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: Write implementation\
    \ here.\n    std::string new_text;\n    std::string::iterator it;\n    for(it\
    \ = text.begin(); it != text.end(); it++)\n    {\n        if(*it != ' ')\n   \
    \     {\n            new_text.push_back(*it);\n        }\n    }\n    int i = 0;\n\
    \    int j = new_text.length() - 1;\n    for(; i < new_text.length()/2; i++, j--)\n\
    \    {\n        if(new_text[i] != new_text[j])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    //write your solution here\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n   \
    \ assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8pqr7fcq: /tmp/tmp8pqr7fcq.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev = \"\";\n\
    \    for (int i = text.length() - 1; i >= 0; i--) {\n        rev = rev + text[i];\n\
    \    }\n    return rev == text;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string text_copy =\
    \ text;\n    std::reverse(text_copy.begin(), text_copy.end());\n    return text\
    \ == text_copy;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int low=0;\n    int high=text.length()-1;\n\
    \    while(low<high){\n        if(text[low]!=text[high])\n            return false;\n\
    \        low++;\n        high--;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        if (text[i] != text[length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int start = 0;\n    int\
    \ end = text.length() - 1;\n    while (start < end) {\n        if (text[start]\
    \ != text[end]) {\n            return false;\n        }\n        start++;\n  \
    \      end--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int i = 0;\n  int j = text.length()\
    \ - 1;\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false;\n\
    \    }\n    i++;\n    j--;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.size() == 0)\n \
    \       return true;\n    if(text.size() == 1)\n        return true;\n    if(text.at(0)\
    \ == text.at(text.size()-1))\n        return is_palindrome(text.substr(1, text.size()-2));\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n   \
    \ assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  if (text.size() < 2) {\n \
    \   return true;\n  }\n  else {\n    if (text[0] == text[text.size() - 1]) {\n\
    \      return is_palindrome(text.substr(1, text.size() - 2));\n    }\n    else\
    \ {\n      return false;\n    }\n  }\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    std::string t=text;\n    std::reverse(t.begin(),t.end());\n    if(t==text)\n\
    \    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.length() < 2)\n\
    \        return true;\n    if(text[0] == text[text.length()-1])\n        return\
    \ is_palindrome(text.substr(1, text.length()-2));\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    if (length < 2) {\n        return true;\n    }\n    else {\n        return\
    \ text[0] == text[length - 1] && is_palindrome(text.substr(1, length - 2));\n\
    \    }\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = true;\n    int\
    \ len = text.length();\n    int mid = len/2;\n    if(len % 2 == 0) {\n      for(int\
    \ i = 0; i < mid; i++) {\n        if(text[i] != text[len-i-1]) {\n          flag\
    \ = false;\n          break;\n        }\n      }\n    }\n    else {\n      for(int\
    \ i = 0; i < mid; i++) {\n        if(text[i] != text[len-i-1]) {\n          flag\
    \ = false;\n          break;\n        }\n      }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int text_size = text.size();\n\
    \    if (text_size == 0) {\n        return true;\n    }\n    // else if (text_size\
    \ == 1) {\n    //     return true;\n    // }\n    // else if (text_size == 2)\
    \ {\n    //     return text[0] == text[1];\n    // }\n    // else {\n    //  \
    \   return text[0] == text[text_size - 1] && is_palindrome(text.substr(1, text_size\
    \ - 2));\n    // }\n    int text_size = text.size();\n    // if (text_size ==\
    \ 0) {\n    //     return true;\n    // }\n    // else if (text_size == 1) {\n\
    \    //     return true;\n    // }\n    // else if (text_size == 2) {\n    //\
    \     return text[0] == text[1];\n    // }\n    // else {\n    //     return text[0]\
    \ == text[text_size - 1] && is_palindrome(text.substr(1, text_size - 2));\n  \
    \  // }\n    int start = 0;\n    int end = text_size - 1;\n    while (start <\
    \ end) {\n        if (text[start] != text[end]) {\n            return false;\n\
    \        }\n        start++;\n        end--;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdcpr0vf.cpp: In function \u2018bool is_palindrome(std::string)\u2019\
    :\n/tmp/tmphdcpr0vf.cpp:26:9: error: redeclaration of \u2018int text_size\u2019\
    \n   26 |     int text_size = text.size();\n      |         ^~~~~~~~~\n/tmp/tmphdcpr0vf.cpp:13:9:\
    \ note: \u2018int text_size\u2019 previously declared here\n   13 |     int text_size\
    \ = text.size();\n      |         ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i = 0;\n    int j =\
    \ text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++)\n        if (text[i] != text[n-i-1])\n    \
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (size_t i = 0; i < text.size()\
    \ / 2; ++i) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Remove all spaces\n \
    \   text.erase(std::remove(text.begin(), text.end(), ' '), text.end());\n    int\
    \ i = 0;\n    int j = text.length() - 1;\n    // Iterate over the string and check\
    \ if it's a palindrome\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.size() == 0) return\
    \ true;\n    int l = 0, r = text.size() - 1;\n    while(l < r){\n        if(text[l]\
    \ != text[r]) return false;\n        l++; r--;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int l = 0;\n    int r =\
    \ text.length() - 1;\n    while (l < r) {\n        if (text[l] != text[r]) {\n\
    \            return false;\n        }\n        l++;\n        r--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n        int n = text.length();\n\
    \        int k = 0;\n        for(int i = n-1; i >= n/2; i--) {\n             \
    \   if(text[i] != text[k])\n                        return false;\n          \
    \      k++;\n        }\n        return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  std::string m = text;\n  std::reverse(m.begin(),\
    \ m.end());\n  return m == text;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int size=text.size();\n\
    \    if(size==0){\n        return true;\n    }\n    if(size==1){\n        return\
    \ true;\n    }\n    if(size==2){\n        if(text[0]==text[1]){\n            return\
    \ true;\n        }\n        else{\n            return false;\n        }\n    }\n\
    \    if(text[0]==text[size-1]){\n        text=text.substr(1,size-2);\n       \
    \ return is_palindrome(text);\n    }\n    else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    int i = 0;\n    while (i < length/2) {\n        if (text[i] != text[length-i-1])\
    \ {\n            return false;\n        }\n        i++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\t// assert(false);\n\tint i=0,j=text.length()-1;\n\
    \twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\
    \t\tj--;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i=0;\n    int j=text.length()-1;\n\
    \    while(i<j){\n        if(text[i]==text[j]){\n            i++;\n          \
    \  j--;\n        }\n        else{\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  bool isPalindrome = true;\n\
    \  for (int i = 0; i < text.length() / 2; i++) {\n    if (text[i] != text[text.length()\
    \ - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return\
    \ isPalindrome;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int start = 0;\n    int\
    \ end = text.length() - 1;\n    while (start < end) {\n        if (text[start]\
    \ != text[end]) {\n            return false;\n        }\n        start++;\n  \
    \      end--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++) {\n        if (text[i] != text[n-i-1])\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    std::string text2 = text;\n    std::reverse(text2.begin(), text2.end());\n\
    \    // Check if text is palindrome\n    if (text == text2) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n  \
    \  auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    int start = 0;\n    int end = length - 1;\n    while (start < end) {\n  \
    \      if (text[start] != text[end]) {\n            return false;\n        }\n\
    \        start++;\n        end--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: Implement this\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzxcuux4c: /tmp/tmpzxcuux4c.cpp:21: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    //  Write your code here\n\
    \    int length = text.length();\n    int mid = (int)length/2;\n    bool ans =\
    \ true;\n    if(length == 0)\n        return true;\n    if(length%2 == 0){\n \
    \       for(int i = 0; i < mid; i++){\n            if(text[i] != text[length-1-i]){\n\
    \                ans = false;\n                break;\n            }\n       \
    \ }\n    }\n    else{\n        for(int i = 0; i < mid; i++){\n            if(text[i]\
    \ != text[length-1-i]){\n                ans = false;\n                break;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // Implement the function\
    \ here!\n  std::string reverse = text;\n  std::reverse(reverse.begin(), reverse.end());\n\
    \  return reverse == text;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // TODO: Implement me!\n \
    \ int i, j;\n  int n = text.length();\n  i = 0;\n  j = n - 1;\n  while (i < j)\
    \ {\n    if (text[i] != text[j]) {\n      return false;\n    }\n    i++;\n   \
    \ j--;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return text == std::string(text.rbegin(),\
    \ text.rend());\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here\n\
    \    if(text.length()==0){\n        return true;\n    }\n    int left = 0;\n \
    \   int right = text.length()-1;\n    while(left<right){\n        if(text[left]!=text[right]){\n\
    \            return false;\n        }\n        left++;\n        right--;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // your code here\n  int flag=0;\n\
    \  int i=0;\n  int l=text.length();\n  int j=l-1;\n  while(j>i)\n  {\n    if(text[i]!=text[j])\n\
    \    {\n      flag=1;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if(flag==0)\n\
    \  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tsize_t len = text.length();\n\
    \tif (len == 0) return true;\n\tsize_t l = 0, r = len - 1;\n\twhile (l < r) {\n\
    \t\tif (text[l] != text[r]) return false;\n\t\tl++;\n\t\tr--;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return std::equal(text.begin(),\
    \ text.begin() + text.size() / 2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    for (int i = 0; i < length/2; i++) {\n        if (text[i] != text[length-i-1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\t/*\n\t\tstd::string text =\
    \ \"Was it a car or a cat I saw?\";\n\t\tauto c = std::find_if(text.begin(), text.end(),\
    \ isalnum);\n\t\tstd::cout << c << '\\n';\n\t*/\n\tstd::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n\ttext.erase(std::remove_if(text.begin(),\
    \ text.end(), ::ispunct), text.end());\n\tstd::cout << text << std::endl;\n\t\
    int textSize = text.size();\n\tint halfTextSize = textSize / 2;\n\tfor (int i\
    \ = 0; i < halfTextSize; i++) {\n\t\tif (text[i] != text[textSize - i - 1]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: "\naba\naaaaa\nzbcd\nxywyx\nxywyz\nxywzx\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Implement this function\n\
    \    int size = text.size();\n    for(int i = 0; i < size/2; i++){\n        if(text[i]\
    \ != text[size-i-1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string temp = text;\n\
    \    std::reverse(temp.begin(), temp.end());\n    if(temp == text) {\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    auto size = text.size();\n\
    \    if (size <= 1) {\n        return true;\n    }\n    if (text[0] != text[size\
    \ - 1]) {\n        return false;\n    }\n    return is_palindrome(text.substr(1,\
    \ size - 2));\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string text_rev;\n\
    \    std::reverse_copy(text.begin(), text.end(), std::back_inserter(text_rev));\n\
    \    return text == text_rev;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len <= 1) return true;\n    if (text[0] != text[len-1]) return false;\n\
    \    return is_palindrome(text.substr(1, len-2));\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\t\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7cex5rvg: /tmp/tmp7cex5rvg.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool is_palin = true;\n\
    \    int low = 0;\n    int high = text.length() - 1;\n    while (low < high) {\n\
    \        if (text[low] != text[high]) {\n            is_palin = false;\n     \
    \       break;\n        }\n        low++;\n        high--;\n    }\n    return\
    \ is_palin;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: implement this\
    \ function.\n    int length=text.length();\n    for(int i=0;i<length/2;i++){\n\
    \        if(text[i]!=text[length-i-1]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: implement the function\
    \ so that it returns true for string\n    // 'text'\n    int len = text.length();\n\
    \    std::string reversed = text;\n    std::reverse(reversed.begin(), reversed.end());\n\
    \    if (text == reversed) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    int count = 0;\n    for (int i = 0; i < length/2; i++) {\n        if (text[i]\
    \ == text[length-i-1]) {\n            count++;\n        }\n    }\n    if (count\
    \ == length/2) {\n        return true;\n    }\n    else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint start = 0;\n\tint end\
    \ = text.length() - 1;\n\twhile (start < end) {\n\t\tif (text[start] != text[end])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tstart++;\n\t\tend--;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i=0;\n    int j=text.length()-1;\n\
    \    while(i<j){\n        if(text[i]==text[j]){\n            i++;\n          \
    \  j--;\n        }\n        else\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return std::equal(text.begin(),\
    \ text.begin() + text.size() / 2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int length = text.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        if (text[i] != text[length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int count = 0;\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == text[text.length()\
    \ - i - 1]) {\n            count += 1;\n        }\n    }\n    if (count == text.length())\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Write your code here.\n\
    \    // int flag = 1;\n    // std::string temp;\n    // for(int i = 0; i < text.length();\
    \ i++){\n    //     temp.push_back(text[i]);\n    // }\n    // std::reverse(temp.begin(),\
    \ temp.end());\n    // for(int i = 0; i < text.length(); i++){\n    //     if(temp[i]\
    \ != text[i]){\n    //         flag = 0;\n    //         break;\n    //     }\n\
    \    // }\n    // if(flag == 1){\n    //     return true;\n    // }\n    // else{\n\
    \    //     return false;\n    // }\n    int i = 0;\n    int j = text.length()\
    \ - 1;\n    while(i < j){\n        if(text[i] != text[j]){\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tstd::string reversed;\n\t\
    for (int i = 0; i < text.size(); i++) {\n\t\treversed.push_back(text[text.size()\
    \ - i - 1]);\n\t}\n\tif (reversed == text) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // returns True if and only\
    \ if the text is a palindrome\n    // define base case\n    if (text.length()\
    \ == 0) {\n        return true;\n    }\n    // check first and last characters\n\
    \    if (text[0] != text[text.length() - 1]) {\n        return false;\n    }\n\
    \    // return is_palindrome of substring\n    return is_palindrome(text.substr(1,\
    \ text.length() - 2));\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: Write your code\
    \ here\n    int len = text.length();\n    if(len == 0 || len == 1) return true;\n\
    \    int l = 0, r = len-1;\n    while(l<r){\n        if(text[l] != text[r]){\n\
    \            return false;\n        }\n        l++;\n        r--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int begin = 0;\n    int\
    \ end = text.length() - 1;\n    while (begin < end) {\n        if (text[begin]\
    \ != text[end]) {\n            return false;\n        }\n        begin += 1;\n\
    \        end -= 1;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool flag = false;\n   \
    \ for(int i = 0; i < text.length()/2; i++) {\n        if(text[i] == text[text.length()-1-i])\n\
    \            flag = true;\n        else {\n            flag = false;\n       \
    \     break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppb1kwjmd: /tmp/tmppb1kwjmd.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int len = text.length();\n\
    \  int mid = len/2;\n  for(int i=0; i<mid; i++) {\n    if(text[i] != text[len-i-1])\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Use an std::stack<char>\
    \ to track the characters from the start of the\n    // string.\n    std::stack<char>\
    \ s;\n    // C++ strings can be indexed like arrays, so for each character in\
    \ the\n    // first half of the string, append it to the stack.\n    for (int\
    \ i = 0; i < text.length() / 2; i++) {\n        s.push(text[i]);\n    }\n    //\
    \ If the string has an odd length, skip the middle character.\n    int start_index\
    \ = text.length() / 2;\n    if (text.length() % 2 == 1) {\n        start_index\
    \ += 1;\n    }\n    // For each character in the second half of the string, pop\
    \ a character\n    // off the stack and compare it to the current character. If\
    \ they are\n    // different, return false.\n    for (int i = start_index; i <\
    \ text.length(); i++) {\n        if (s.top() != text[i]) {\n            return\
    \ false;\n        }\n        s.pop();\n    }\n    // If nothing was different,\
    \ the string must be a palindrome.\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.length()==0){\n\
    \        return true;\n    }\n    else{\n        int len=text.length();\n    \
    \    for(int i=0;i<len/2;i++){\n            if(text[i]!=text[len-i-1]){\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbuoz0jbx: /tmp/tmpbuoz0jbx.cpp:21: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.length()<=1)return\
    \ true;\n    if(text[0]==text[text.length()-1])\n        return is_palindrome(text.substr(1,text.length()-2));\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n   \
    \ assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpniw5qiqe: /tmp/tmpniw5qiqe.cpp:20: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int textLength = text.length();\n\
    \    for (int i = 0; i < textLength / 2; i++) {\n        if (text[i] != text[textLength\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i, j;\n    for (i = 0, j = n - 1; i < j; i++, j--) {\n        if (text[i]\
    \ != text[j])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n        std::string s=text;\n\
    \        std::reverse(s.begin(),s.end());\n        if(s==text)\n            return\
    \ true;\n        else\n            return false;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // YOUR CODE GOES HERE\n \
    \ int size = text.size();\n  if(size == 0) return true;\n  int i = 0;\n  int j\
    \ = size - 1;\n  while(i < j){\n    if(text[i] != text[j]) return false;\n   \
    \ i++;\n    j--;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return text == std::string(text.rbegin(),\
    \ text.rend());\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_exif0yb: /tmp/tmp_exif0yb.cpp:20: int main(): Assertion `candidate((\"\
    zbcd\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tstd::string reverse_text =\
    \ text;\n\tstd::reverse(reverse_text.begin(), reverse_text.end());\n\tif (text\
    \ == reverse_text)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Implement me\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpggm1d4kb: /tmp/tmpggm1d4kb.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    //Fill this in\n    int\
    \ i=0, j=text.length()-1;\n    while(i<j){\n        if(text[i] != text[j])\n \
    \           return false;\n        i++;\n        j--;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return std::equal(text.begin(),\
    \ text.begin() + text.size() / 2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int N = text.size();\n  for\
    \ (int i = 0; i < N/2; i++) {\n    if (text[i] != text[N-i-1]) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n \
    \   assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n  std::regex non_alnum(\"[^a-z0-9]\"\
    );\n  text = std::regex_replace(text, non_alnum, \"\");\n  std::string reversed(text.rbegin(),\
    \ text.rend());\n  return text == reversed;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\t// TODO: Implement this\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp614u4nf0: /tmp/tmp614u4nf0.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.size()==0) return\
    \ true;\n    int i=0,j=text.size()-1;\n    while(i<j){\n        if(text[i]!=text[j])\
    \ return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    auto n = text.size();\n\
    \    bool res = true;\n    auto i = 0;\n    while (i < n / 2) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            res = false;\n            break;\n      \
    \  }\n        i += 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string t;\n    // Write\
    \ implementation of this function\n    int length=text.length();\n    for(int\
    \ i=length-1;i>=0;i--)\n    {\n        t=t+text[i];\n    }\n    if(t==text)\n\
    \    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint i=0;\n\tint j=text.length()-1;\n\
    \twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\
    \t\tj--;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa5tr1lzb: /tmp/tmpa5tr1lzb.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string temp = text;\n\
    \    std::reverse(temp.begin(), temp.end());\n    if(text == temp)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // implement\n  int size =\
    \ text.size();\n  for(int i = 0; i < size/2; i++){\n    if(text[i] != text[size-i-1])\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int sz = text.size();\n\
    \    for(int i = 0; i < sz / 2; i++) {\n        if(text[i] != text[sz - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint l, r;\n\tl = 0;\n\tr =\
    \ text.length() - 1;\n\twhile (l < r) {\n\t\tif (text[l] != text[r])\n\t\t\treturn\
    \ false;\n\t\tl += 1;\n\t\tr -= 1;\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int sl = text.length();\n\
    \    int i = 0;\n    int j = sl - 1;\n    while (i <= j) {\n        if (text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplbk4liyl: /tmp/tmplbk4liyl.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint n = text.length();\n\t\
    for (int i = 0; i < n / 2; i++) {\n\t\tif (text[i] != text[n - i - 1]) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  std::string textLower = text;\n\
    \  std::transform(textLower.begin(), textLower.end(), textLower.begin(), ::tolower);\n\
    \  std::string textTemp = textLower;\n  std::reverse(textTemp.begin(), textTemp.end());\n\
    \  return textTemp == textLower;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    size_t len = text.length();\n\
    \    size_t mid = len / 2;\n    for (size_t i = 0; i < mid; i++) {\n        if\
    \ (text[i] != text[len - i - 1]) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  \n    std::string temp;\n\
    \    if(text.length()==0)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        for(int i=text.length()-1;i>=0;i--)\n        {\n            temp.push_back(text[i]);\n\
    \        }\n        if(temp==text)\n        {\n            return true;\n    \
    \    }\n        else\n        {\n            return false;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int n = text.length();\n \
    \ for (int i = 0; i < n/2; i++) {\n    if (text[i] != text[n-i-1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev = text;\n\
    \    std::reverse(rev.begin(), rev.end());\n    return rev == text;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    std::string reverse;\n    for(int i = len-1; i >= 0; i--) {\n        reverse\
    \ += text[i];\n    }\n    return reverse == text;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string copy = text;\n\
    \    std::reverse(copy.begin(), copy.end());\n    return text == copy;\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    if (len<=1)\n        return true;\n    int i = 0;\n    int j = len-1;\n \
    \   while (j > i) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n \n    return std::equal(text.begin(),\
    \ text.begin() + text.size()/2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n// Implement here\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprj5ndiez: /tmp/tmprj5ndiez.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i = 0;\n    int j =\
    \ text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n// Implementation here\n\tfor(unsigned\
    \ int i=0;i<text.length()/2;i++)\n\t{\n\t\tif(text[i]!=text[text.length()-i-1])\n\
    \t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  for (int i = 0; i < text.size()\
    \ / 2; i++) {\n    if (text[i] != text[text.size() - i - 1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // replace this with your\
    \ code\n  return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptc8lsqbr: /tmp/tmptc8lsqbr.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string forward(text);\n\
    \    std::string backward(text);\n    std::reverse(backward.begin(), backward.end());\n\
    \    return forward == backward;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return text == std::string(text.rbegin(),\
    \ text.rend());\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    bool b;\n    for(int i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]==text[text.length()-i-1])\n        {\n            b=true;\n\
    \        }\n        else\n        {\n            b=false;\n            break;\n\
    \        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpygoznx5v: /tmp/tmpygoznx5v.cpp:30: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Implement me!\n    int\
    \ i=0;\n    int j=text.length()-1;\n    for(i;i<j;i++,j--){\n        if(text[i]!=text[j]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // Implement this function\n\
    \  // return true;\n  int start = 0;\n  int end = text.length() - 1;\n  while\
    \ (start < end) {\n    if (text[start] != text[end]) {\n      return false;\n\
    \    }\n    start++;\n    end--;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // TODO: Implement this\
    \ function\n    std::string rev;\n    std::reverse_copy(text.begin(), text.end(),\
    \ std::back_inserter(rev));\n    if(text==rev) return true;\n    else return false;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint i = 0;\n\twhile (text[i]\
    \ == text[text.length() - 1 - i]) {\n\t\ti++;\n\t\tif (i == text.length() / 2)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplc98ijfh: /tmp/tmplc98ijfh.cpp:24: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int start = 0;\n  int end\
    \ = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end])\
    \ {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // your code here\n    return\
    \ text == std::string(text.rbegin(), text.rend());\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int left = 0;\n  int right\
    \ = text.size() - 1;\n  while (left < right) {\n    if (text[left] != text[right])\
    \ {\n      return false;\n    }\n    left += 1;\n    right -= 1;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i = 0;\n    int j =\
    \ text.length() - 1;\n    for (i, j; i < j; i++, j--) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  // WRITE CODE HERE\n  std::string\
    \ rev = text;\n  reverse(rev.begin(), rev.end());\n  //std::cout << \"rev is \"\
    \ << rev << '\\n';\n  return rev == text;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n        int l = 0;\n       \
    \ int r = text.length() - 1;\n        while (l < r) {\n            if (text[l]\
    \ != text[r]) {\n                return false;\n            }\n            l++;\n\
    \            r--;\n        }\n        return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int st = 0;\n    int end = len - 1;\n    while (st < end) {\n        if (text[st]\
    \ != text[end]) {\n            return false;\n        }\n        st++;\n     \
    \   end--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n// Implement this placeholder.\n\
    \  int n = text.size();\n  int left = 0, right = n - 1;\n  while (left < right)\
    \ {\n    if (text[left] != text[right]) {\n      return false;\n    }\n    left++;\n\
    \    right--;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    if(text.length() == 0)\n\
    \        return true;\n    if(text.length() == 1)\n        return true;\n    if(text.length()\
    \ == 2)\n        return text[0] == text[1];\n    // TEST :::: test.assert_equals(palindrome(\"\
    mo\"), False)\n    // TEST :::: test.assert_equals(palindrome(\"mokok\"), True)\n\
    \    return text[0] == text[text.length() - 1] && is_palindrome(text.substr(1,\
    \ text.length() - 2));\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n   int i = 0;\n   int len =\
    \ text.length();\n   int j = len - 1;\n   while (i < j) {\n       if (text[i]\
    \ != text[j]) {\n           return false;\n       }\n       i++;\n       j--;\n\
    \   }\n   return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint i=0;\n\tint j=text.length()-1;\n\
    \twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\
    \t\tj--;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int n = text.length();\n\
    \    if (n == 0) return true;\n    int i = 0;\n    int j = n - 1;\n    while (i\
    \ < j) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    std::string rev(text);\n\
    \    std::reverse(rev.begin(), rev.end());\n    return rev == text;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  for (int i = 0; i < text.size()\
    \ / 2; i++) {\n    if (text[i] != text[text.size() - i - 1])\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n \
    \   assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  std::string reverse = \"\"\
    ;\n  for (int i = text.length() - 1; i >= 0; i--) {\n    reverse += text[i];\n\
    \  }\n  return text == reverse;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int length = text.length();\n\
    \  // Must have at least one character to be palindrome\n  if (length < 1) {\n\
    \    return false;\n  }\n  // Must have at least two characters to be palindrome\n\
    \  if (length < 2) {\n    return true;\n  }\n  // Now we know length is >= 2\n\
    \  for (int i = 0; i < length / 2; i++) {\n    if (text[i] != text[length - i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprngj9_49: /tmp/tmprngj9_49.cpp:32: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint length = text.length();\n\
    \tfor (int i = 0; i < length / 2; i++) {\n\t\tif (text[i] != text[length - i -\
    \ 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n  \
    \  auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int left = 0;\n    int right\
    \ = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right])\
    \ {\n            return false;\n        }\n        left += 1;\n        right -=\
    \ 1;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int n = text.length();\n \
    \ for (int i = 0; i < n / 2; i++) {\n    if (text[i] != text[n - i - 1]) {\n \
    \     return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Implement me\n}\nint\
    \ main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"))\
    \ == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0k9i7_6t: /tmp/tmp0k9i7_6t.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\t// TODO: Implement this function\n\
    \tint length = text.length();\n\tbool isPalindrome = true;\n\tint x = 0;\n\tint\
    \ y = length - 1;\n\twhile (x < y) {\n\t\tif (text[x] != text[y]) {\n\t\t\tisPalindrome\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t\ty--;\n\t}\n\treturn isPalindrome;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i = 0;\n    int j =\
    \ text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    auto start = text.begin();\n\
    \    auto end = text.end() - 1;\n    while (start < end) {\n        if (*start\
    \ != *end) {\n            return false;\n        }\n        start++;\n       \
    \ end--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Implement this function\n\
    \    int n = text.length();\n    int i=0;\n    int j=n-1;\n    while(i<j){\n \
    \       if(text[i] != text[j]){\n            return false;\n        }\n      \
    \  i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  if (text.length() < 2) {\n\
    \    return true;\n  }\n  if (text[0] == text[text.length() - 1]) {\n    return\
    \ is_palindrome(text.substr(1, text.length() - 2));\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\"\
    )) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tstd::string temp;\n\t// reverse\
    \ of \"text\" is stored in \"temp\"\n\tfor (int i = 0; i<text.length(); i++) {\n\
    \t\ttemp.push_back(text[text.length() - i - 1]);\n\t}\n\treturn (temp == text);\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tint length = text.length();\n\
    \tif (length == 0 || length == 1)\n\t\treturn true;\n\telse {\n\t\tif (text[0]\
    \ == text[length - 1])\n\t\t\treturn is_palindrome(text.substr(1, length - 2));\n\
    \t\telse\n\t\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size()\
    \ / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int len = text.length();\n\
    \    int i = 0;\n    while (i < len/2) {\n        if (text[i] != text[len-i-1])\
    \ {\n            return false;\n        }\n        i += 1;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf7adryx4: /tmp/tmpf7adryx4.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  int n = text.length();\n \
    \ for (int i = 0; i < n/2; i++) {\n    if (text[i] != text[n-i-1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_palindrome;\n\
    \    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) ==\
    \ (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  return std::equal(text.begin(),\
    \ text.begin() + text.size() / 2, text.rbegin());\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    // Assuming the string to\
    \ be a palindrome\n    bool flag = true;\n    // Looping over the string\n   \
    \ // And checking the characters\n    for(int i = 0; i < text.length()/2; i++)\
    \ {\n        if(text[i] != text[text.length()-i-1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n\
    \    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\"\
    )) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n   // Your code goes here\n\
    \   int len = text.length();\n   for(int i=0;i<len/2;i++){\n   \tif(text[i]!=text[len-i-1]){\n\
    \   \t\treturn false;\n   \t}\n   }\n   return true;\n}\nint main() {\n    auto\
    \ candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n  std::string fh,sh;\n  int\
    \ n = text.length();\n  if(n%2==0){\n    fh = text.substr(0,n/2);\n    sh = text.substr(n/2,n/2);\n\
    \  }\n  else{\n    fh = text.substr(0,n/2);\n    sh = text.substr(n/2+1,n/2);\n\
    \  }\n  reverse(sh.begin(),sh.end());\n  if(fh == sh)\n    return true;\n  else\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_palindrome;\n   \
    \ assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n\
    \    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\"\
    )) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n    int i = 0;\n    int j =\
    \ text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n \
    \           return false;\n        i++;\n        j--;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
    \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
    aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
    xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
    xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string\
    \ is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n\
    // True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n\
    // False\nbool is_palindrome(std::string text) {\n\tauto length = text.length();\n\
    \tfor (int i = 0; i < length/2; i++) {\n\t\tif (text[i] != text[length - i - 1])\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"\
    aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"\
    zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"\
    xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
