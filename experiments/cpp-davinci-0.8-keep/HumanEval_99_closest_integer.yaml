name: HumanEval_99_closest_integer
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a value (string) representing a number\n// and returns the closest integer to\
  \ it. If the number is equidistant\n// from two integers, round it away from zero.\n\
  // Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\"\
  )\n// 15\n// Note:\n// Rounding away from zero means that if the given number is\
  \ equidistant\n// from two integers, the one you should return is the one that is\
  \ the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string\
  \ value) {\n"
tests: "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
  10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
  -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
  0\")) == (0));\n}\n"
completions: ["\t// Write your code here\n\tint v1 = (int) value[0] - 48;\n\tint v2\
    \ = (int) value[2] - 48;\n\tint sum = v1 * 10 + v2;\n\t//cout << sum << endl;\n\
    \tif (sum <= 15)\n\t\treturn 10;\n\telse\n\t\treturn 15;", "\t// TODO: convert\
    \ string value to integer, using std::atoi\n\tint num_int = std::atoi(value.c_str());\n\
    \t// TODO: compare num_int to the next highest integer\n\t//       and the next\
    \ lowest integer to see which one\n\t//       is closer to num_int\n\tif (num_int\
    \ < std::atoi(value.c_str() + 1)) {\n\t\treturn num_int;\n\t}\n\treturn num_int\
    \ + 1;", "  char temp[100];\n  float number = atof(value.c_str());\n  float n\
    \ = number - (int)number;\n  if(n >= 0.5) return (int)number + 1;\n  else return\
    \ (int)number;", "\treturn std::stol(value);", "    double d = stod(value);\n\
    \    double d2 = round(d);\n    // cout << d2 << endl;\n    return d2;", "  //your\
    \ code here\n  return round(stod(value));", "    long result;\n    // TODO: Write\
    \ code to implement this function\n    float fl = stof(value);\n    float delta\
    \ = fl - floor(fl);\n    if (delta < 0.5) {\n        result = floor(fl);\n   \
    \ } else {\n        result = ceil(fl);\n    }\n    return result;", "    if(value[0]\
    \ == '-')\n        return ceil(std::stod(value)) < floor(std::stod(value)) ? ceil(std::stod(value))\
    \ : floor(std::stod(value));\n    else\n        return floor(std::stod(value))\
    \ < ceil(std::stod(value)) ? ceil(std::stod(value)) : floor(std::stod(value));",
  "  std::string str;\n  int i = 0;\n  int flag = 0;\n  int decimal_count = 0;\n \
    \ for(char c : value) {\n    if(c == '.') {\n      flag = 1;\n      decimal_count++;\n\
    \    }\n    if(decimal_count > 1) {\n      return -1;\n    }\n    if(flag && c\
    \ == '.') {\n      break;\n    }\n    if(flag) {\n      str += c;\n    }\n   \
    \ i++;\n  }\n  if(str.size() == 0) {\n    return atoi(value.c_str());\n  }\n \
    \ if(str.size() > 2) {\n    return -1;\n  }\n  i--;\n  long decimal_part = atoi(str.c_str());\n\
    \  long integer_part = atoi(value.substr(0, i).c_str());\n  if(decimal_part >=\
    \ 50) {\n    return integer_part + 1;\n  }\n  else {\n    return integer_part;\n\
    \  }", "  double n=std::stod(value);\n  //return (n>0)?((long)n+(long)n+1)/2:(double)n>((double)n+1-n/2)?(long)n+1:(long)n;\n\
    \  return n>0?(long)std::ceil(n):(long)std::floor(n);", "    double parsed = std::stod(value);\n\
    \    long rounded = std::round(parsed);\n    if (parsed != rounded) {\n      \
    \  return rounded;\n    }\n    else {\n        if (parsed >= 0) {\n          \
    \  return parsed + 1;\n        }\n        else {\n            return parsed -\
    \ 1;\n        }\n    }", "  // your code here\n  return 0;", "    double a = std::stod(value);\n\
    \    int c = std::round(a);\n    return c;", "    long result = 0;\n    double\
    \ number = stod(value);\n    if (number >= 0) {\n        result = (long) number;\n\
    \        if (number-result >= 0.5) {\n            result++;\n        }\n    }\
    \ else {\n        result = (long) number;\n        if (result-number >= 0.5) {\n\
    \            result--;\n        }\n    }\n    return result;", "\tint integerValue\
    \ = std::stoi(value);\n\tint decimalValue = value.find('.');\n\tif (decimalValue\
    \ == -1) {\n\t\treturn integerValue;\n\t}\n\tint nextDigit = value[decimalValue\
    \ + 1] - '0';\n\tif (nextDigit < 5) {\n\t\treturn integerValue;\n\t}\n\treturn\
    \ integerValue + 1;", "\t// TODO: Implement me\n\tint num = std::stoi(value);\n\
    \tdouble num1 = std::stod(value);\n\tif(num1 >= num)\n\t\treturn num;\n\telse\n\
    \t\treturn num - 1;", "    // return std::stol(value);\n    return lround(std::stod(value));",
  "\tlong num = std::stol(value);\n\tlong num2 = num + 1;\n\tlong num3 = num - 1;\n\
    \tif (std::to_string(num).size() == std::to_string(num2).size()) {\n\t\treturn\
    \ num;\n\t}\n\treturn num2;", "\t// remove the decimal and convert to integer\n\
    \tlong intvalue = std::stol(value.substr(0, value.find('.')));\n\tdouble decimalvalue\
    \ = std::stod(value.substr(value.find('.')));\n\t// if the decimal is not zero\
    \ then return the closest integer\n\tif (decimalvalue > 0.5) {\n\t\treturn ++intvalue;\n\
    \t} else if (decimalvalue < -0.5) {\n\t\treturn --intvalue;\n\t} else {\n\t\t\
    return intvalue;\n\t}", "  int i = value.find('.');\n  if (i == std::string::npos)\
    \ {\n    // no fractional part, so return the value.\n    return std::stol(value);\n\
    \  }\n  // check if there is a fractional part.\n  value.erase(i, 1);\n  if (i\
    \ == value.size() - 1) {\n    // there was a fractional part, but it was zero.\n\
    \    return std::stol(value);\n  }\n  // if there is a fractional part, we need\
    \ to determine if we are\n  // rounding up or down.\n  // first, determine if\
    \ we are rounding away from zero.\n  int value_int = std::stol(value);\n  if (value_int\
    \ < 0) {\n    // the value is negative, so we round towards zero.\n    return\
    \ value_int;\n  }\n  // now, determine which direction to round.\n  int fractional_part\
    \ = std::stol(value.substr(i + 1));\n  if (fractional_part < 5) {\n    // if the\
    \ fractional part is less than five, round down.\n    return value_int;\n  }\n\
    \  if (fractional_part > 5) {\n    // if the fractional part is greater than five,\
    \ round up.\n    return value_int + 1;\n  }\n  // if the fractional part is equal\
    \ to five, need to round to the\n  // closest even number.\n  if (value_int %\
    \ 2 == 0) {\n    // if the fractional part is five and the integer part is even,\n\
    \    // round down.\n    return value_int;\n  }\n  // if the fractional part is\
    \ five and the integer part is odd,\n  // round up.\n  return value_int + 1;",
  "\tfloat floatValue = std::stof(value);\n\tint out;\n\tif (floatValue < 0) {\n\t\
    \tout = floatValue - 0.5;\n\t} else {\n\t\tout = floatValue + 0.5;\n\t}\n\treturn\
    \ out;", "  assert(value.size() > 0);\n  double d = std::stod(value);\n  double\
    \ diff = d - (long)d;\n  return diff < 0.5 ? (long)d : (long)d + 1;", "    //return\
    \ std::stol(value);\n    long int rv = std::stol(value);\n    double fv = std::stod(value);\n\
    \    if (fv - rv >= 0.5) {\n        return rv + 1;\n    }\n    return rv;", " \
    \ float number = atof(value.c_str());\n  float rounded = 0;\n  if (number > 0)\n\
    \    rounded = floor(number + 0.5);\n  else\n    rounded = ceil(number - 0.5);\n\
    \  return (long)rounded;", "  std::size_t found = value.find(\".\");\n  if (found\
    \ != std::string::npos) {\n    if (int(value[found + 1]) > 5) {\n      value[found\
    \ - 1]++;\n    }\n    value.resize(found);\n  }\n  return std::stol(value);",
  '  return std::round(std::stold(value));', "  long x=stol(value);\n  return x%1>=0.5?x+1:x;",
  "  // Write your code here...\n  double temp = std::stod(value);\n  int i = temp;\n\
    \  if(temp-i >= 0.5)\n    i++;\n  return i;", "  double num = std::stod(value);\n\
    \  return num > 0 ? std::ceil(num) : std::floor(num);", "  double v = std::stod(value);\n\
    \  if (v > 0)\n    return ceil(v);\n  else\n    return floor(v);", "  // Good\
    \ luck!\n  std::stringstream ss(value);\n  double temp;\n  ss >> temp;\n  return\
    \ ceil(temp);", "    long result = std::round(std::stod(value));\n    return result;",
  "\tdouble x = std::stod(value);\n\treturn lround(x);", "  std::string decimal;\n\
    \  std::string integer;\n  if (value.find('.') != std::string::npos) {\n    integer\
    \ = value.substr(0, value.find('.'));\n    decimal = value.substr(value.find('.')\
    \ + 1);\n  } else {\n    integer = value;\n  }\n  long int_value = std::stol(integer);\n\
    \  if (decimal.empty()) {\n    return int_value;\n  }\n  if (decimal[0] >= '5')\
    \ {\n    return int_value + 1;\n  }\n  return int_value;", "  std::cout << \"\
    Input value is \" << value << std::endl;\n  int i = 0;\n  bool is_neg = false;\n\
    \  double num = 0;\n  if (value[0] == '-') {\n    i = 1;\n    is_neg = true;\n\
    \  }\n  while (i < value.length()) {\n    if (value[i] == '.') {\n      break;\n\
    \    }\n    num = num * 10 + (value[i] - '0');\n    i++;\n  }\n  if (i == value.length())\
    \ {\n    if (is_neg) {\n      return -num;\n    }\n    return num;\n  }\n  i++;\n\
    \  double dec = 0.1;\n  while (i < value.length()) {\n    num = num + (value[i]\
    \ - '0') * dec;\n    dec = dec / 10;\n    i++;\n  }\n  if (is_neg) {\n    num\
    \ = -num;\n  }\n  int res = num;\n  if (num - res >= 0.5) {\n    res++;\n  }\n\
    \  return res;", "    std::istringstream ss(value);\n    double i;\n    ss >>\
    \ i;\n    //why do we need to do this?\n    i+=0.5;\n    std::cout << \"Value\
    \ \" << i << std::endl;\n    return (int)i;", "    double val = stod(value);\n\
    \    int r_val = int(val);\n    double diff = val - r_val;\n    if (diff >= 0.5)\n\
    \        return r_val + 1;\n    else\n        return r_val;", "  double double_value\
    \ = std::stod(value);\n  long long_value = std::stol(value);\n  return (double_value\
    \ - long_value) >= 0.5 ? (long_value + 1) : long_value;", '    return (long) (std::stod(value)
    + 0.5);', "    // your code here\n    if(value[0]=='-')\n    {\n        long val=stoi(value);\n\
    \        if(val%2==0)\n        {\n            return val;\n        }\n       \
    \ else\n        {\n            return val-1;\n        }\n    }\n    else\n   \
    \ {\n        long val=stoi(value);\n        if(val%2==0)\n        {\n        \
    \    return val;\n        }\n        else\n        {\n            return val+1;\n\
    \        }\n    }\n", "\tlong i = std::stol(value);\n\tdouble v = std::stod(value);\n\
    \tdouble z = i + 0.5;\n\tif (v >= z) {\n\t\treturn i + 1;\n\t}\n\treturn i;",
  "  double d = atof(value.c_str());\n  long int l = d;\n  if ((int)d == l) {\n  \
    \  return l;\n  }\n  return (int)d + (d > 0 ? 1 : -1);", "  bool isNegative =\
    \ false;\n  if (value[0] == '-') {\n    isNegative = true;\n    value.erase(0,\
    \ 1);\n  }\n  size_t found = value.find(\".\");\n  if (found == std::string::npos)\
    \ {\n    return atoi(value.c_str());\n  }\n  long int integer = atoi(value.substr(0,\
    \ found).c_str());\n  long int decimal = atoi(value.substr(found + 1, value.length()\
    \ - 1).c_str());\n  if (decimal >= 50) {\n    integer += 1;\n  }\n  if (isNegative)\
    \ {\n    integer *= -1;\n  }\n  return integer;", "    int last = value.find_last_of(\"\
    .\");\n    int first = value.find_first_of(\".\");\n    std::string integerPart;\n\
    \    std::string decimalPart;\n    if(last == -1){\n        return std::stoi(value);\n\
    \    }\n    if(last == first){\n        integerPart = value.substr(0,last);\n\
    \        decimalPart = value.substr(last+1);\n    }\n    else{\n        integerPart\
    \ = value.substr(0,first);\n        decimalPart = value.substr(first+1);\n   \
    \ }\n    int deci = std::stoi(decimalPart);\n    // std::cout<<\"integer Part\
    \ \"<<integerPart<<\"\\n\";\n    // std::cout<<\"decimal Part \"<<decimalPart<<\"\
    \\n\";\n    if(deci>=5){\n        if(integerPart[0] == '-'){\n            integerPart\
    \ = std::to_string(std::stoi(integerPart)-1);\n        }\n        else{\n    \
    \        integerPart = std::to_string(std::stoi(integerPart)+1);\n        }\n\
    \    }\n    return std::stoi(integerPart);", "  float number = atof(value.c_str());\n\
    \  std::cout << std::setprecision(5) << std::fixed << number << \"\\n\";\n  long\
    \ int result = 0;\n  if (number == (int)number) {\n    result = (int)number;\n\
    \  } else {\n    int temp = (int)number;\n    if (number - temp > 0.5) {\n   \
    \   result = temp + 1;\n    } else {\n      result = temp;\n    }\n  }\n  return\
    \ result;", '    return (std::round(std::stof(value)));', "  long p = std::stol(value);\n\
    \  long q = p;\n  return p == q ? p : q < p ? q + 1 : q;", "    double val = std::stod(value);\n\
    \    if (val > 0) {\n        if (val - int(val) > 0.5) {\n            return int(val)\
    \ + 1;\n        } else {\n            return int(val);\n        }\n    } else\
    \ {\n        if (val - int(val) < -0.5) {\n            return int(val) - 1;\n\
    \        } else {\n            return int(val);\n        }\n    }", "  // your\
    \ code here\n  long int len = value.length();\n  std::string str = \"\";\n  for(long\
    \ int i = 0; i < len; i++)\n  {\n    if(value[i] == '.')\n    {\n      if(value[i+1]\
    \ >= '5')\n      {\n        std::string a = str;\n        long int b = atoi(a.c_str());\n\
    \        return b+1;\n      }\n      else\n      {\n        std::string a = str;\n\
    \        long int b = atoi(a.c_str());\n        return b;\n      }\n    }\n  \
    \  else\n    {\n      str += value[i];\n    }\n  }\n  std::string a = str;\n \
    \ long int b = atoi(a.c_str());\n  return b;", "    double d = std::stod(value);\n\
    \    long i = d;\n    return (std::abs(d - i) < std::abs(d - (i + 1))) ? i : i\
    \ + 1;", "\tif(value.length()==1){\n\t\tif(value[0]>=48&&value[0]<=57){\n\t\t\t\
    return value[0]-48;\n\t\t}\n\t}\n\tstd::string a;\n\tint i=0;\n\tif(value[0]=='-'){\n\
    \t\ti=1;\n\t}\n\twhile(value[i]!='.'){\n\t\ta+=value[i];\n\t\ti++;\n\t}\n\tfloat\
    \ b=std::stof(a);\n\tfloat c=std::stof(value);\n\tfloat d=c-b;\n\tif(d>=0.5){\n\
    \t\tif(value[0]=='-'){\n\t\t\treturn b-1;\n\t\t}\n\t\treturn b+1;\n\t}\n\treturn\
    \ b;", "    double dvalue = std::stod(value);\n    long ivalue = std::stol(value);\n\
    \    double delta = dvalue - ivalue;\n    if (fabs(delta) >= 0.5) {\n        if\
    \ (delta > 0) ivalue++;\n        else ivalue--;\n    }\n    return ivalue;", " \
    \ double num = stod(value);\n  double fraction = num - int(num);\n  if (fraction\
    \ >= 0.5) {\n    return int(num) + 1;\n  } else {\n    return int(num);\n  }",
  "    std::stringstream ss(value);\n    double d;\n    ss >> d;\n    return std::round(d);",
  "  // your code goes here\n  double x = std::stod(value);\n  long res = 0;\n  if\
    \ (x > 0)\n  {\n    res = std::ceil(x);\n  }\n  else\n  {\n    res = std::floor(x);\n\
    \  }\n  return res;", "    double val = std::stod(value);\n    if ((int)(val)\
    \ == val)\n        return (int)(val);\n    return (val > 0) ? (int)(val+0.5) :\
    \ (int)(val-0.5);", "\tlong num = std::stol(value);\n\tlong ans = 0;\n\tif (fmod(num,\
    \ 1) == 0.5) {\n\t\tif (num < 0) {\n\t\t\tans = floor(num) - 1;\n\t\t}\n\t\telse\
    \ {\n\t\t\tans = ceil(num) + 1;\n\t\t}\n\t}\n\telse {\n\t\tans = round(num);\n\
    \t}\n\treturn ans;", "\tstd::stringstream ss(value);\n\tdouble d;\n\tss >> d;\n\
    \treturn d > 0 ? std::floor(d) : std::ceil(d);", "  if (value.length() == 1)\n\
    \    return std::stol(value);\n  std::string number = \"\";\n  std::string indicator\
    \ = \"\";\n  std::stringstream ss(value);\n  if (value[0] == '-') {\n    ss >>\
    \ indicator;\n    ss >> number;\n  } else\n    ss >> number;\n  int len = number.length();\n\
    \  std::string low = number;\n  std::string high = number;\n  for (int i = len\
    \ - 1; i >= 0; i--) {\n    if (number[i] != '9') {\n      low[i] = number[i] +\
    \ 1;\n      high[i] = number[i] - 1;\n      for (int j = i + 1; j < len; j++)\
    \ {\n        low[j] = '0';\n        high[j] = '9';\n      }\n      break;\n  \
    \  }\n  }\n  long low_num = std::stol(low);\n  long high_num = std::stol(high);\n\
    \  long num = std::stol(number);\n  long diff1 = abs(num - low_num);\n  long diff2\
    \ = abs(num - high_num);\n  if (diff1 == diff2) {\n    if (indicator == \"-\"\
    )\n      return high_num;\n    else\n      return low_num;\n  } else if (diff1\
    \ < diff2)\n    return low_num;\n  else\n    return high_num;", "// Write your\
    \ code here\ndouble str_value = std::stod(value);\nif (std::floor(str_value) ==\
    \ std::ceil(str_value)) {\nreturn str_value;", "    if(value.find(\".\") == -1)\n\
    \        return std::stol(value);\n    if(value.substr(value.find(\".\") + 1)\
    \ > \"5\")\n        return std::stol(value.substr(0, value.find(\".\"))) + 1;\n\
    \    return std::stol(value.substr(0, value.find(\".\")));", "  int val = std::stoi(value);\n\
    \  int r = val/10;\n  double g = val - r*10;\n  if(g>5){\n    r+=1;\n  }\n  return\
    \ r;", "  int counter = 0;\n  int digit = 0;\n  std::string ret = \"\";\n  std::string\
    \ ret2 = \"\";\n  if (value[0] == '-') {\n    counter = 1;\n  }\n  while (value[counter]\
    \ != '.') {\n    ret += value[counter];\n    counter++;\n  }\n  // return ret;\n\
    \  if (ret.length() == 1) {\n    digit = stoi(ret);\n    if (digit < 9) {\n  \
    \    digit++;\n    }\n    return digit;\n  }\n  for (int i = 0; i < ret.length();\
    \ i++) {\n    if (ret[i] == '0') {\n      ret2 += ret[i];\n    }\n    else if\
    \ (ret[i] != '0') {\n      ret2 += ret[i];\n      break;\n    }\n  }\n  if (ret2.length()\
    \ == 1) {\n    digit = stoi(ret2);\n    if (digit < 9) {\n      digit++;\n   \
    \ }\n    return digit;\n  }\n  if (value[0] == '-') {\n    digit = stoi(ret2);\n\
    \    if (digit > -9) {\n      digit--;\n    }\n    return digit;\n  }\n  digit\
    \ = stoi(ret2);\n  if (digit < 9) {\n    digit++;\n  }\n  return digit;", "  \
    \  std::stringstream stringtodouble(value);\n    double test;\n    stringtodouble\
    \ >> test;\n    return std::round(test);", "  std::istringstream iss(value);\n\
    \  long x;\n  iss >> x;\n  if (value[value.size() - 1] == '.') {\n    return x;\n\
    \  }\n  long y = std::round(std::stod(value));\n  return y;", "  long v = atol(value.c_str());\n\
    \  double f = atof(value.c_str());\n  return f - v > 0.5 ? v + 1 : v;", "  int\
    \ len = value.length();\n  std::string a = value.substr(0,len-2);\n  std::string\
    \ b = value.substr(len-2,len);\n  int first = std::stoi(a);\n  int second = std::stoi(b);\n\
    \  if(second < 50){\n    return first;\n  }else{\n    return first+1;\n  }", " \
    \ float n = std::stof(value);\n  return (std::round(n));", "\tdouble x = std::stod(value);\n\
    \tdouble y = std::round(x);\n\treturn (long)y;", "        double v = std::stod(value);\n\
    \        return std::round(v);", "  int len = value.length();\n  int i = 0;\n\
    \  int l = 0;\n  while(i < len) {\n    if(value[i] == '.') {\n      l = len -\
    \ i - 1;\n      break;\n    }\n    i++;\n  }\n  long v = std::stol(value.substr(0,\
    \ i));\n  long p = std::stol(value.substr(i + 1, l));\n  long x = pow(10, l -\
    \ 1);\n  if(p >= x / 2) {\n    v++;\n  }\n  return v;", "  long long result =\
    \ 0;\n  double number = std::stod(value);\n  int rounded_number = (int) std::floor(number);\n\
    \  int rounded_plus_one = (int) std::ceil(number);\n  if (std::abs(number - rounded_number)\
    \ == std::abs(number - rounded_plus_one)) {\n    if (number > 0) {\n      result\
    \ = rounded_plus_one;\n    } else {\n      result = rounded_number;\n    }\n \
    \ } else if (std::abs(number - rounded_number) < std::abs(number - rounded_plus_one))\
    \ {\n    result = rounded_number;\n  } else {\n    result = rounded_plus_one;\n\
    \  }\n  return result;", "\tlong int num = std::stol(value);\n\treturn num+1;",
  "\t//std::cout << \"input value: \" << value << std::endl;\n\tstd::stringstream\
    \ stream(value);\n\tdouble val;\n\tstream >> val;\n\t//std::cout << \"val: \"\
    \ << val << std::endl;\n\treturn val >= 0 ? std::ceil(val) : std::floor(val);",
  "\tdouble n = stod(value);\n\tint n1 = n, n2 = n1 + 1;\n\tif(n-n1 == n2-n) return\
    \ n1;\n\tif(n-n1 > n2-n) return n2;\n\treturn n1;", "  double val = std::stod(value);\n\
    \  if (val>0)\n    return std::ceil(val);\n  else\n    return std::floor(val);",
  "    double number = std::stod(value);\n    return std::round(number);", "  double\
    \ num = stod(value);\n  return ceil(num);", "  //your code here\n  return 0;",
  "  std::string tmp;\n  long res;\n  if (value.find('.') != std::string::npos) {\n\
    \    for (int i = 0; i < value.size(); i++) {\n      if (value[i] == '.') {\n\
    \        tmp = value.substr(0, i);\n        break;\n      }\n    }\n    if (std::stod(value)\
    \ - std::stoi(tmp) >= 0.5) {\n      res = std::stoi(tmp) + 1;\n    } else {\n\
    \      res = std::stoi(tmp);\n    }\n  } else {\n    res = std::stoi(value);\n\
    \  }\n  return res;", "  double x = std::stod(value);\n  return round(x);", " \
    \   double d = std::stod(value);\n    return std::floor(d + 0.5);", "  int whole_number\
    \ = std::stoi(value);\n  float decimal = std::stof(value) - whole_number;\n  if\
    \ (decimal >= 0.5)\n    whole_number += 1;\n  else if (decimal <= -0.5)\n    whole_number\
    \ -= 1;\n  return whole_number;", "  // your code here\n  double value_d = std::stod(value);\n\
    \  if(value_d - static_cast<int>(value_d) >= 0.5)\n    return static_cast<int>(value_d)\
    \ + 1;\n  else\n    return static_cast<int>(value_d);", "\tdouble n = atof(value.c_str());\n\
    \tlong x = round(n);\n\treturn x;", "  double num = std::stod(value);\n  long\
    \ result = (long)num;\n  return (num - result) >= 0.5 ? result + 1 : result;",
  "\tint decimalPoint = value.find(\".\");\n\tif (decimalPoint != std::string::npos)\
    \ {\n\t\tdouble number = std::stod(value);\n\t\tif (number < 0) {\n\t\t\treturn\
    \ (int) number;\n\t\t}\n\t\telse {\n\t\t\treturn (int) number + 1;\n\t\t}\n\t\
    }\n\telse {\n\t\treturn std::stoi(value);\n\t}", "    std::stringstream ss(value);\n\
    \    double val_d;\n    ss >> val_d;\n    return val_d>0 ? std::floor(val_d) :\
    \ std::ceil(val_d);", "    bool neg = false;\n    if (value[0] == '-') {\n   \
    \     neg = true;\n        value.erase(0, 1);\n    }\n    auto pos = value.find('.');\n\
    \    if (pos == std::string::npos) {\n        return std::stol(value);\n    }\n\
    \    if (value[pos + 1] >= '5') {\n        value.erase(pos, value.size() - pos);\n\
    \        long val = std::stol(value);\n        return neg ? --val : ++val;\n \
    \   }\n    value.erase(pos, value.size() - pos);\n    return std::stol(value);",
  "  double val = stod(value);\n  return round(val);", "    long x = std::round(std::stod(value));\n\
    \    return x;", "    float f_value = std::stof(value);\n    if (f_value < 0)\
    \ {\n        return (int)f_value - 1;\n    }\n    return (int)f_value;", "   \
    \ double num = std::stod(value);\n    return num < 0 ? ceil(num) : floor(num);",
  "  double number = std::stod(value);\n  return (number-static_cast<long>(number)>=0.5)?\n\
    \  static_cast<long>(number)+1:static_cast<long>(number);", "    double x=std::stod(value);\n\
    \    if(x>0)\n    {\n        return std::round(x);\n    }\n    else if(x<0)\n\
    \    {\n        return std::round(x);\n    }\n    else{\n        return 0;\n \
    \   }", "\tstd::vector<std::string> strs;\n\tboost::split(strs, value, boost::is_any_of(\"\
    .\"));\n\tif (strs.size() == 1) {\n\t\treturn std::stol(value);\n\t}\n\tlong left\
    \ = std::stol(strs[0]);\n\tdouble right = std::stod(\"0.\" + strs[1]);\n\tif (right\
    \ > 0.5) {\n\t\tleft++;\n\t}\n\treturn left;", '  return std::stol(value);', "\t\
    double num = std::stod(value);\n\treturn std::round(num);", "  std::string::size_type\
    \ pos = value.find('.');\n  if (pos == std::string::npos) {\n    return std::atol(value.c_str());\n\
    \  } else {\n    std::string decimal_number = value.substr(pos + 1);\n    long\
    \ integer_part = std::atol(value.substr(0, pos).c_str());\n    long decimal_part\
    \ = std::atol(decimal_number.c_str());\n    if (decimal_part * 10 >= 5) {\n  \
    \    if (integer_part < 0) {\n        return integer_part - 1;\n      } else {\n\
    \        return integer_part + 1;\n      }\n    } else {\n      return integer_part;\n\
    \    }\n  }", "\tdouble number = std::stod(value);\n\tstd::cout << number << std::endl;\n\
    \tif (number >= 0)\n\t\treturn std::ceil(number);\n\telse\n\t\treturn std::floor(number);",
  "  long result;\n  double temp;\n  std::stringstream ss(value);\n  ss >> temp;\n\
    \  if(temp > 0){\n    if(temp >= std::floor(temp) + 0.5){\n      result = std::ceil(temp);\n\
    \    }else{\n      result = std::floor(temp);\n    }\n  }else{\n    if(temp >=\
    \ std::floor(temp) + 0.5){\n      result = std::floor(temp);\n    }else{\n   \
    \   result = std::ceil(temp);\n    }\n  }\n  return result;", "  // your code\
    \ here\n  int integer = std::stoi(value);\n  int decimal = std::stoi(value.substr(value.find(\"\
    .\")));\n  std::cout << integer << std::endl;\n  std::cout << decimal << std::endl;\n\
    \  if (decimal < 5) {\n    return integer;\n  } else {\n    return integer+1;\n\
    \  }", "\tlong i = std::stol(value);\n\tlong q, r;\n\tq = i / 1;\n\tr = i % 1;\n\
    \tif (r > 0.5) {\n\t\tq = q + 1;\n\t}\n\treturn q;", "  float number;\n  std::stringstream\
    \ ss(value);\n  ss >> number;\n  long result = number;\n  float difference = number\
    \ - result;\n  std::cout << difference << std::endl;\n  if (difference >= 0.5)\
    \ {\n    result += 1;\n  }\n  else if (difference <= -0.5) {\n    result -= 1;\n\
    \  }\n  return result;", "  double doubleValue = std::stod(value);\n  long roundValue\
    \ = std::lround(doubleValue);\n  std::cout << \"Value is: \" << doubleValue <<\
    \ \" and rounded value is: \" << roundValue << \"\\n\";\n  return roundValue;",
  "    std::stringstream ss;\n    ss << value;\n    double val;\n    ss >> val;\n\
    \    if (val < 0) {\n        return (long)val - 1;\n    }\n    return (long)val;",
  "  double valueDouble = std::stod(value);\n  return valueDouble > 0 ? std::ceil(valueDouble)\
    \ : std::floor(valueDouble);", "  int integerValue = std::stoi(value);\n  float\
    \ floatValue = std::stof(value);\n  if(floatValue > integerValue)\n    return\
    \ integerValue + 1;\n  else\n    return integerValue;", "  // your code goes here\n\
    \  int n = value.size();\n  double sz = n;\n  double num=0;\n  for(int i=0;i<n;i++){\n\
    \    if(value[i]=='.'){\n      sz=i;\n      continue;\n    }\n    int curr = value[i]-'0';\n\
    \    num = num*10 + curr;\n  }\n  int power = n-sz-1;\n  num = num*pow(10,power);\n\
    \  //std::cout<<num<<std::endl;\n  if(value[0]!='-'){\n    int a = ceil(num);\n\
    \    int b = floor(num);\n    if(a-num<num-b){\n      return a;\n    }\n    else{\n\
    \      return b;\n    }\n  }\n  else{\n    int a = floor(num);\n    int b = ceil(num);\n\
    \    if(a-num<num-b){\n      return a;\n    }\n    else{\n      return b;\n  \
    \  }\n  }", "  std::stringstream s(value);\n  double x;\n  s >> x;\n  return round(x);",
  "  // your code goes here.\n  double dub = std::stod(value);\n  long result = std::round(dub);\n\
    \  return result;", "  int res = 0;\n  std::string::size_type sz;\n\n  double\
    \ num = std::stod(value, &sz);\n  double temp = num - (int)num;\n  if (temp >=\
    \ 0.5)\n    res = (int)num + 1;\n  else\n    res = (int)num;\n  return res;",
  "\tdouble v = atof(value.c_str());\n\treturn round(v);", "    // Your code here\n\
    \    long i = strtol(value.c_str(), NULL, 10);\n    double j = strtod(value.c_str(),\
    \ NULL);\n    if (j-i >= 0.5) {\n        return i+1;\n    }\n    else {\n    \
    \    return i;\n    }", "  std::cout << \"the value:\" << value << std::endl;\n\
    \  std::stringstream is(value);\n  double x;\n  is >> x;\n  std::cout << \"the\
    \ value:\" << x << std::endl;\n  std::cout << \"the value:\" << std::ceil(x) <<\
    \ std::endl;\n  return std::ceil(x);", "    long number = std::stol(value);\n\
    \    long ret = number;\n    if (((long)(ret + 1) - number) < (number - ret))\
    \ {\n        ret = ret + 1;\n    }\n    return ret;", "\tdouble val = std::stod(value);\n\
    \treturn std::lround(val);", "\tint length = value.length();\n\tlong result =\
    \ 0;\n\tfor (int i = 0; i < length; i++) {\n\t\tif (value[i] == '.') {\n\t\t\t\
    if (value[i + 1] > '4') {\n\t\t\t\tresult += 1;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\
    \t\tresult *= 10;\n\t\tresult += value[i] - '0';\n\t}\n\treturn result;", "  \
    \  std::string intPart,decPart;\n    std::stringstream ss(value);\n    std::getline(ss,intPart,'.');\n\
    \    std::getline(ss,decPart,'.');\n    long int res = std::stol(intPart);\n \
    \   if(decPart.size()!=0){\n        if(decPart.size()>1){\n            if(decPart[0]>'4'){\n\
    \                if(intPart[0]=='-')\n                    res--;\n           \
    \     else\n                    res++;\n            }\n        }\n        else\
    \ if(decPart[0]>'5'){\n            if(intPart[0]=='-')\n                res--;\n\
    \            else\n                res++;\n        }\n    }\n    return res;",
  "  long ret = 0;\n  double num = std::stod(value);\n  if (num >= 0) {\n    ret =\
    \ std::floor(num + 0.5);\n  } else {\n    ret = std::ceil(num - 0.5);\n  }\n \
    \ return ret;", "    std::istringstream ss(value);\n    long number;\n    ss >>\
    \ number;\n    if (number > 0) {\n        if (number - (int)number < 0.5) {\n\
    \            return (int)number;\n        } else {\n            return (int)number\
    \ + 1;\n        }\n    } else {\n        if (number - (int)number > -0.5) {\n\
    \            return (int)number;\n        } else {\n            return (int)number\
    \ - 1;\n        }\n    }", "  //your code here\n  long num = stod(value);\n  std::cout\
    \ << num << std::endl;\n  long base = floor(num);\n  long ceiling = ceil(num);\n\
    \  if (abs(num - base) < abs(num - ceiling)) {\n    return base;\n  }\n  return\
    \ ceiling;", "  double d = stod(value);\n  // printf(\"%f %d %d %f\\n\", d, (int)d,\
    \ (int)d + 1, d - (int)d);\n  if (d - (int)d >= 0.5) {\n    return (int)d + 1;\n\
    \  } else {\n    return (int)d;\n  }", "  long a = strtol(value.c_str(), NULL,\
    \ 10);\n  double b = std::stod(value);\n  if (b > a) {\n    return a + 1;\n  }\n\
    \  return a;", "    // TODO: Write your code here\n    long number = std::stol(value);\n\
    \    long a = number;\n    long b = number + 1;\n    long c = number - 1;\n  \
    \  float n = std::atof(value.c_str());\n    float absA = std::abs(n - a);\n  \
    \  float absB = std::abs(n - b);\n    float absC = std::abs(n - c);\n    if (absA\
    \ == absB && absB == absC)\n        return absA < absB ? a : absB < absC ? b :\
    \ c;\n    if (absA == absB)\n        return absA < absB ? a : b;\n    if (absB\
    \ == absC)\n        return absB < absC ? b : c;\n    if (absA == absC)\n     \
    \   return absA < absC ? a : c;\n    return absA < absB ? absA < absC ? a : c\
    \ : absB < absC ? b : c;", "    long a = std::stol(value);\n    long int a_ =\
    \ std::stol(value);\n    if (a_ < a) {\n        return a_;\n    }\n    else {\n\
    \        return a+1;\n    }\n", "    float num = std::stof(value);\n    float\
    \ whole, fractpart, intpart;\n    fractpart = modf(num, &intpart);\n    if (fractpart\
    \ > 0.5) {\n        whole = intpart + 1;\n    } else {\n        whole = intpart;\n\
    \    }\n    return whole;", "    double num = atof(value.c_str());\n    double\
    \ decimal = num - int(num);\n    if (decimal < 0.5) {\n        return int(num);\n\
    \    } else {\n        return int(num)+1;\n    }", "  std::cout << \"round of\
    \ \" << value << \" is \" << round(std::stod(value)) << \"\\n\";\n  return (long)\
    \ round(std::stod(value));", "\tint integer = stoi(value);\n\tdouble d = stod(value);\n\
    \tif (integer == d)\n\t\treturn integer;\n\tdouble abs_num = abs(d);\n\tint nearest_integer\
    \ = static_cast<int>(abs_num + 0.5);\n\tif (d < 0)\n\t\treturn -nearest_integer;\n\
    \treturn nearest_integer;", "    std::string decimal;\n    std::stringstream stream;\n\
    \    bool negative = false;\n    if (value[0] == '-') {\n        negative = true;\n\
    \        value.erase(0, 1);\n    }\n    auto dot_it = std::find(value.begin(),\
    \ value.end(), '.');\n    if (dot_it != value.end()) {\n        decimal = std::string(std::next(dot_it),\
    \ value.end());\n        value.erase(dot_it, value.end());\n    }\n    stream\
    \ << value;\n    long whole;\n    stream >> whole;\n    if (decimal.empty()) {\n\
    \        return whole;\n    }\n    long hundredths = std::stol(decimal);\n   \
    \ return hundredths > 50 ? (negative ? whole - 1 : whole + 1) : whole;", "  int\
    \ a = std::stoi(value);\n  std::cout << \"value \" << a << std::endl;\n  std::cout\
    \ << \"value \" << a + 0.5 << std::endl;\n  std::cout << \"value \" << (int)(a\
    \ + 0.5) << std::endl;\n  return (int)(a + 0.5);", "    float num = std::stof(value);\n\
    \    float diff = num - floor(num);\n    if (diff == 0.5) {\n        if (num >\
    \ 0) {\n            return ceil(num);\n        } else {\n            return floor(num);\n\
    \        }\n    } else if (diff > 0.5) {\n        return ceil(num);\n    } else\
    \ {\n        return floor(num);\n    }", "  // N is the size of the string.\n\
    \  int N = value.size();\n  // first we handle negative numbers.\n  int sign =\
    \ 1;\n  if (value[0] == '-') {\n    sign = -1;\n    value = value.substr(1, N\
    \ - 1);\n    N--;\n  }\n  if (N == 1) {\n    return sign * (value[0] - '0');\n\
    \  }\n  // N >= 2, we first examine the decimal point.\n  int decimal_point =\
    \ value.find(\".\");\n  int integer_part = 0;\n  double decimal_part = 0.0;\n\
    \  if (decimal_point != std::string::npos) {\n    integer_part = std::stoi(value.substr(0,\
    \ decimal_point));\n    std::string dp_string = value.substr(decimal_point + 1,\
    \ N - decimal_point - 1);\n    decimal_part = std::stod(dp_string);\n  } else\
    \ {\n    integer_part = std::stoi(value);\n  }\n  if (decimal_part == 0.0) {\n\
    \    return sign * integer_part;\n  }\n  // decimal_part >= 0.1, we compare decimal_part\
    \ with 0.5.\n  if (decimal_part < 0.5) {\n    return sign * integer_part;\n  }\
    \ else {\n    return sign * (integer_part + 1);\n  }", '', "    // Your code here\n\
    \    // This is only here to get the program to compile.\n    // You should remove\
    \ this, and write your own code\n    // that solves the problem.\n    // This\
    \ is only here to get the program to compile.\n    // You should remove this,\
    \ and write your own code\n    // that solves the problem.\n    // This is only\
    \ here to get the program to compile.\n    // You should remove this, and write\
    \ your own code\n    // that solves the problem.\n    // This is only here to\
    \ get the program to compile.\n    // You should remove this, and write your own\
    \ code\n    // that solves the problem.\n    // This is only here to get the program\
    \ to compile.\n    // You should remove this, and write your own code\n    //\
    \ that solves the problem.\n    // This is only here to get the program to compile.\n\
    \    // You should remove this, and write your own code\n    // that solves the\
    \ problem.\n    // This is only here to get the program to compile.\n    // You\
    \ should remove this, and write your own code\n    // that solves the problem.\n\
    \    // This is only here to get the program to compile.\n    // You should remove\
    \ this, and write your own code\n    // that solves the problem.\n    // This\
    \ is only here to get the program to compile.\n    // You should remove this,\
    \ and write your own code\n    // that solves the problem.\n    // This is only\
    \ here to get the program to compile.\n    // You should remove this, and write\
    \ your own code\n    // that solves the problem.\n    return 42;", "  // TODO:\
    \ implement me!\n  std::cout << value << std::endl;\n  // -1.5, -1,  -> -2\n \
    \ // -1.4, -1,  -> -1\n  // 1.4,  1,   -> 1\n  // 1.5,  1,   -> 2\n  // 1.6, \
    \ 1,   -> 2\n  double num = std::stod(value);\n  int floor_val = std::floor(num);\n\
    \  int ceil_val = std::ceil(num);\n  double diff_floor = num - floor_val;\n  double\
    \ diff_ceil = ceil_val - num;\n  if (diff_floor > diff_ceil) {\n    return ceil_val;\n\
    \  } else {\n    return floor_val;\n  }", "  //your code here\n  std::stringstream\
    \ ss(value);\n  double num = 0;\n  ss >> num;\n  return (long) num;", '  return
    round(stod(value));', "    double d = std::stod(value);\n    int x = d;\n    if(fabs(d-x)\
    \ > 0.5) return x+1;\n    return x;", "  std::stringstream ss;\n  ss << value;\n\
    \  double input;\n  ss >> input;\n  return static_cast<long>(std::ceil(input));",
  "  int val = atoi(value.c_str());\n  double dval = atof(value.c_str());\n  double\
    \ diff = dval - val;\n  if (diff < 0.5)\n    return val;\n  else\n    return val\
    \ + 1;", "  double d = std::stod(value);\n  return std::lround(d);", "  double\
    \ val = std::stod(value);\n  std::cout << val << std::endl;\n  if ((long) val\
    \ == val) {\n    return (long) val;\n  } else {\n    if (std::abs(val - (long)\
    \ val) > 0.5) {\n      return std::round(val);\n    } else {\n      return std::floor(val);\n\
    \    }\n  }", "    // Write code here.\n    double d1 = stod(value);\n    double\
    \ d2 = ceil(d1);\n    double d3 = floor(d1);\n    if(d1 - d3 == d2 - d1)\n   \
    \ {\n        if(d1 > 0)\n            return d2;\n        else\n            return\
    \ d3;\n    }\n    else if(d1 - d3 > d2 - d1)\n        return d2;\n    else\n \
    \       return d3;", "\tstd::istringstream stream{value};\n\tdouble val;\n\tstream\
    \ >> val;\n\tif (val < 0) {\n\t\treturn std::ceil(val);\n\t}\n\treturn std::floor(val);",
  "  std::string::size_type sz;\n  long num = std::stol(value, &sz);\n  long fraction\
    \ = std::stol(value.substr(sz));\n  return num + (fraction < 5 ? 0 : 1);", " \
    \ long number = std::stol(value);\n  if (std::ceil(number) - number < .5) {\n\
    \    return std::ceil(number);\n  } else {\n    return std::floor(number);\n \
    \ }", "  double digit = std::stod(value);\n  if(digit < 0){\n    return (std::floor(digit));\n\
    \  }\n  return std::ceil(digit);", "  std::istringstream iss{value};\n  double\
    \ val;\n  iss >> val;\n  return lround(val);", "  double floater = std::stod(value);\n\
    \  int r = static_cast<int>(std::round(floater));\n  return r;", "    double dval\
    \ = stod(value);\n    long sign = dval > 0 ? 1 : -1;\n    return sign * round(abs(dval));",
  "  float val = std::stof(value);\n  if (val > 0) {\n    return std::ceil(val);\n\
    \  } else {\n    return std::floor(val);\n  }", "    int i = 0;\n    int sign\
    \ = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        i++;\n    }\n\
    \    for (; i < value.size(); i++) {\n        if (value[i] == '.') {\n       \
    \     break;\n        }\n    }\n    if (i == value.size()) {\n        return stol(value);\n\
    \    }\n    long integer = stol(value.substr(0, i));\n    double decimal = stod(value.substr(i,\
    \ value.size()));\n    if (decimal < 0.5) {\n        return integer;\n    }\n\
    \    else if (decimal > 0.5) {\n        return sign * (integer + 1);\n    }\n\
    \    else {\n        if (integer % 2 == 0) {\n            return integer;\n  \
    \      }\n        else {\n            return sign * (integer + 1);\n        }\n\
    \    }", "    size_t finddot = value.find(\".\");\n    if (finddot == std::string::npos)\
    \ {\n        return std::stol(value);\n    }\n    size_t len = value.length();\n\
    \    std::string aftrDot = value.substr(finddot + 1, len - finddot);\n    if (aftrDot[0]\
    \ > '5') {\n        std::string beforeDot = value.substr(0, finddot);\n      \
    \  return std::stol(beforeDot) + 1;\n    }\n    else {\n        std::string beforeDot\
    \ = value.substr(0, finddot);\n        return std::stol(beforeDot);\n    }", " \
    \ int n = atoi(value.c_str());\n  return n;", "  double val=stod(value);\n  long\
    \ s=val<0?-1:1;\n  return round(val)*s;", "  float f = std::stof(value);\n  int\
    \ i = std::stoi(value);\n  float diff_i = std::abs(i - f);\n  float diff_j = std::abs(i\
    \ + 1 - f);\n  if (diff_i < diff_j)\n    return i;\n  else\n    return i + 1;",
  "    double num = std::stod(value);\n    // return round(num);\n    double a = num,\
    \ b = num;\n    while (true) {\n        if (fmod(a, 1) == 0)\n            return\
    \ (long)a;\n        if (fmod(b, 1) == 0)\n            return (long)b;\n      \
    \  a -= 1;\n        b += 1;\n    }", "  double num = std::stod(value);\n  if (num\
    \ < 0) {\n    num *= -1;\n    return num = std::ceil(num) * -1;\n  }\n  return\
    \ num = std::ceil(num);", "\treturn std::nearbyint(std::stod(value));", "  double\
    \ d=std::stod(value);\n  double frac=d-std::floor(d);\n  double frac1=std::ceil(d)-d;\n\
    \  long ret=0;\n  if(frac<=frac1)\n    ret=std::floor(d);\n  else\n    ret=std::ceil(d);\n\
    \  return ret;", "  double d=std::stod(value);\n  return std::round(d);", "\t\
    float f = stof(value);\n\tint intf = (int)f;\n\tint diff_neg = abs(intf - f);\n\
    \tint diff_pos = (int)f + 1 - f;\n\tif (diff_neg <= diff_pos)\n\t\treturn intf;\n\
    \telse\n\t\treturn intf + 1;", '  return round(std::stof(value));', "  if (value.find(\"\
    .\") == std::string::npos) {\n    return std::stol(value);\n  }\n  std::string\
    \ integer;\n  std::string fraction;\n  std::stringstream value_stream(value);\n\
    \  getline(value_stream, integer, '.');\n  getline(value_stream, fraction, '.');\n\
    \  long integer_part = std::stol(integer);\n  long frac_part = std::stol(fraction);\n\
    \  if (integer_part == 0) {\n    if (frac_part >= 5) {\n      return 1;\n    }\
    \ else {\n      return 0;\n    }\n  }\n  if (frac_part >= 5) {\n    return integer_part\
    \ + 1;\n  } else {\n    return integer_part;\n  }", "    std::stringstream ss(value);\n\
    \    double d;\n    ss >> d;\n    long int_part = d;\n    long closest = d - int_part\
    \ > 0.5 ? int_part + 1 : int_part;\n    return closest;", "    long result = 0;\n\
    \    double value_double = std::stod(value);\n    double integer = std::floor(value_double);\n\
    \    if (value_double - integer >= 0.5)\n        result = integer + 1;\n    else\n\
    \        result = integer;\n    return result;", "  double v = std::stod(value);\n\
    \  if (v - std::floor(v) < 0.5) {\n    return std::floor(v);\n  } else {\n   \
    \ return std::ceil(v);\n  }", "    std::stringstream ss(value);\n    double d;\n\
    \    ss >> d;\n    // Round d to the nearest whole number\n    d += (d > 0) ?\
    \ 0.5 : -0.5;\n    // Convert it back to a string\n    ss.str(\"\");\n    ss <<\
    \ d;\n    long closest;\n    ss >> closest;\n    return closest;", "\tint dot\
    \ = value.find('.');\n\tif (dot == -1) {\n\t\treturn std::stol(value);\n\t}\n\t\
    long ret = std::stol(value.substr(0, dot));\n\tstd::string dec = value.substr(dot\
    \ + 1);\n\tint val = std::stoi(dec);\n\tif (val >= 5) {\n\t\treturn ret + 1;\n\
    \t}\n\treturn ret;", "  double d = std::stod(value);\n  return std::lround(d);",
  "  long integer, decimal;\n  std::stringstream input(value);\n  input >> integer;\n\
    \  decimal = integer;\n  if (value.find('.') != std::string::npos) {\n    input.ignore();\n\
    \    input >> decimal;\n  }\n  if (decimal <= 4) {\n    return integer;\n  } else\
    \ {\n    return integer + 1;\n  }", "  // Your code here\n  std::stringstream\
    \ ss(value);\n  double d;\n  ss >> d;\n  long int l = d;\n  if((d-l) >= 0.5) {\n\
    \    l += 1;\n  }\n  return l;", "  if (value.empty()) {\n    return 0;\n  }\n\
    \  int pos = value.find('.');\n  if (pos == -1) {\n    return std::stol(value);\n\
    \  } else {\n    return std::stol(value.substr(0, pos));\n  }", "  std::istringstream\
    \ iss(value);\n  double d;\n  iss >> d;\n  long n = std::lround(d);\n  if (n ==\
    \ 0 && d < 0) {\n    return n;\n  }\n  if (n > 0 && d - n < 0.5) {\n    return\
    \ n;\n  }\n  return n + 1;", "  int i = 0;\n  long x;\n  // value = \"15.3\";\n\
    \  x = std::atol(value.c_str());\n  double decimal = std::abs(x - static_cast<int>(x));\n\
    \  double decimal_ = 1 - decimal;\n  if (decimal > decimal_)\n    return static_cast<int>(x)\
    \ + 1;\n  else if (decimal < decimal_)\n    return static_cast<int>(x);\n  else\
    \ if (decimal == decimal_) {\n    if (x > 0)\n      return static_cast<int>(x)\
    \ + 1;\n    else\n      return static_cast<int>(x) - 1;\n  }\n  return 0;", " \
    \   int v = atoi(value.c_str());\n    long res = v;\n    if(value.find('.') !=\
    \ std::string::npos) {\n        value.erase(0, value.find('.')+1);\n        int\
    \ frac = atoi(value.c_str());\n        if(frac > 5)\n            res++;\n    }\n\
    \    return res;", "    double decimal = std::stod(value);\n    std::cout << decimal\
    \ << std::endl;\n    std::cout << std::round(decimal) << std::endl;\n    return\
    \ std::round(decimal);", "    // your code here\n    int decimal_point = value.find(\"\
    .\");\n    std::string integer_part = value.substr(0, decimal_point);\n    int\
    \ integer_part_value = std::stoi(integer_part);\n    std::string decimal_part\
    \ = value.substr(decimal_point + 1,\n        value.length() - decimal_point -\
    \ 1);\n    double decimal_part_value = std::stod(decimal_part);\n    if (decimal_part_value\
    \ >= 50) {\n        return integer_part_value + 1;\n    } else {\n        return\
    \ integer_part_value;\n    }", "\t//atoi,atof,atol,atoll,strtol,strtoll,sscanf\n\
    \treturn atof(value.c_str());", "    int l = value.length();\n    for(int i =\
    \ 0; i < l; i++) {\n        if(value[i] == '.') {\n            if(i == l - 1)\
    \ {\n                value.pop_back();\n                return std::stol(value);\n\
    \            }\n            if(value[i + 1] >= '5') {\n                value.pop_back();\n\
    \                if(value[0] == '-') {\n                    value.pop_back();\n\
    \                    return std::stol(value) - 1;\n                }\n       \
    \         else {\n                    value.pop_back();\n                    return\
    \ std::stol(value) + 1;\n                }\n            }\n            else {\n\
    \                value.pop_back();\n                return std::stol(value);\n\
    \            }\n        }\n    }\n    return std::stol(value);", "  double num\
    \ = stod(value);\n  double decimal = num - floor(num);\n  if (decimal >= 0.5)\
    \ {\n    return ceil(num);\n  } else {\n    return floor(num);\n  }", "    std::stringstream\
    \ stream(value);\n    double d;\n    stream >> d;\n    // std::cout << d << std::endl;\n\
    \    return std::round(d);", '    return std::round(std::stof(value));', "   \
    \ if(value.at(0) == '-'){\n        value.erase(0,1);\n        int x = atoi(value.c_str());\n\
    \        if(x < (x + 1)){\n            std::stringstream ss;\n            ss <<\
    \ (x+1);\n            value = ss.str();\n            value.insert(0, \"-\");\n\
    \            return std::stol(value);\n        }else{\n            return x;\n\
    \        }\n    }else{\n        int x = atoi(value.c_str());\n        if(x > (x\
    \ + 1)){\n            std::stringstream ss;\n            ss << (x+1);\n      \
    \      return std::stol(ss.str());\n        }else{\n            return x;\n  \
    \      }\n    }", "  int first, last;\n  if (value.size() == 0)\n    return -1;\n\
    \  if (value.size() == 1)\n    return value[0] - '0';\n  if (value[0] == '-')\
    \ {\n    first = 1;\n    last = value.size() - 1;\n  } else {\n    first = 0;\n\
    \    last = value.size();\n  }\n  std::string temp(value.begin() + first, value.begin()\
    \ + last);\n  int num = std::stoi(temp);\n  std::string num_str = std::to_string(num);\n\
    \  int diff = num_str.size() - temp.size();\n  int first_digit = temp[0] - '0';\n\
    \  if (value[last] - '0' >= 5) {\n    if (first_digit == 9) {\n      first_digit\
    \ = 0;\n      diff++;\n    } else {\n      first_digit++;\n    }\n  }\n  for (int\
    \ i = 0; i < diff; i++) {\n    first_digit *= 10;\n  }\n  if (value[0] == '-')\n\
    \    return -first_digit;\n  return first_digit;", "  double fl_value = std::stod(value);\n\
    \  double digit = fl_value - floor(fl_value);\n  double diff = ceil(fl_value)\
    \ - fl_value;\n  if (digit > diff) {\n    return ceil(fl_value);\n  } else {\n\
    \    return floor(fl_value);\n  }", "  double converted_value = std::stod(value);\n\
    \  double rounded_value = std::round(converted_value);\n  long int closer_int\
    \ = static_cast<long int>(rounded_value);\n  return closer_int;", "    int val\
    \ = std::stoi(value);\n    int decimal = std::stoi(value.substr(value.find('.')+1));\n\
    \    if(decimal >= 5) {\n        return val + 1;\n    }\n    return val;", "\t\
    return value.find(\".\") == std::string::npos ? std::stol(value) :\n\t\tstd::stol(value.substr(0,\
    \ value.find(\".\"))) + (value.back() > '4');", "\tauto integer = (int)std::atof(value.c_str());\n\
    \tauto decimal = std::atof(value.c_str()) - integer;\n\tif (decimal >= 0.5) {\n\
    \t\treturn integer + 1;\n\t}\n\treturn integer;", "  std::stringstream convert(value);\n\
    \  double number;\n  convert >> number;\n  return (long) (number > 0) ? floor(number\
    \ + 0.5) : ceil(number - 0.5);", "  double number = std::stod(value);\n  if (number\
    \ > 0)\n    return std::ceil(number);\n  else\n    return std::floor(number);",
  "  // Your code here\n  double temp=std::stod(value);\n  if(temp>0){\n    if(temp-int(temp)>=0.5)\n\
    \      return temp+1;\n    else\n      return temp;\n  }\n  else{\n    if(temp-int(temp)<0.5)\n\
    \      return temp-1;\n    else\n      return temp;\n  }", '  return std::lround(std::stod(value));',
  "    // create local variable\n    double number;\n    // convert the string to\
    \ a double\n    number = std::stod(value);\n    // cast the double to a long and\
    \ return it\n    return static_cast<long>(number);", "  double number = stod(value);\n\
    \  long upper = ceil(number);\n  long lower = floor(number);\n  if(abs(number\
    \ - upper) > abs(number - lower)){\n    return lower;\n  }\n  return upper;",
  "  std::stringstream ss(value);\n  double num = 0;\n  ss >> num;\n  std::cout <<\
    \ num << std::endl;\n  return (int)std::round(num);", "\tint i;\n\tchar val[value.length()+1];\n\
    \tstrcpy(val, value.c_str());\n\tfloat f = atof(val);\n\tif(f>0){\n\t\ti = ceil(f);\n\
    \t}\n\telse{\n\t\ti = floor(f);\n\t}\n\treturn i;"]
stop_tokens:
- "\n}"
