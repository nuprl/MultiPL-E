name: HumanEval_114_minSubArraySum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    std::vector<long> vec;\n\
    \    vec.push_back(nums[0]);\n    long min = nums[0];\n    for(int i = 1; i <\
    \ nums.size(); i++) {\n        vec.push_back(vec[i-1] + nums[i]);\n        if(vec[i]\
    \ < min) {\n            min = vec[i];\n        }\n    }\n    long max = 0;\n \
    \   for(int i = 0; i < vec.size(); i++) {\n        if(vec[i] > max) {\n      \
    \      max = vec[i];\n        }\n    }\n    return min < max - min ? min : max\
    \ - min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8t2eyi2w: /tmp/tmp8t2eyi2w.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = std::numeric_limits<long>::max();\n\
    \  long currentSum = 0;\n  for (long num : nums) {\n    currentSum += num;\n \
    \   minSum = std::min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = nums[0];\n\
    \    long cur = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n      \
    \  cur = std::min(nums[i], cur + nums[i]);\n        min = std::min(min, cur);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (size_t i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpoh8zb6ut: /tmp/tmpoh8zb6ut.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = LONG_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n    \
    \    }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tif (nums.size() == 0) {\n\
    \t\treturn 0;\n\t}\n\tstd::vector<long> sums(nums.size(), 0);\n\tlong ans = 0;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tsums[i] = nums[i];\n\t\tif (i >\
    \ 0) {\n\t\t\tsums[i] += sums[i - 1];\n\t\t}\n\t\tans = std::min(ans, sums[i]);\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy2wi1efo: /tmp/tmpy2wi1efo.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n\
    \  long minimum = INT_MAX;\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    minimum = std::min(minimum, sum);\n    if (sum\
    \ > 0) {\n      sum = 0;\n    }\n  }\n  return minimum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Initialize current\
    \ sum and minimum sum\n    long curr_sum = 0, min_sum = 0;\n\n    // Traverse\
    \ through the given array\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   // Add current element to curr_sum\n        curr_sum = curr_sum + nums[i];\n\
    \n        // If curr_sum is less than 0 then make it equal to 0\n        curr_sum\
    \ = max(curr_sum, 0);\n\n        // Update minimum sum, if needed\n        min_sum\
    \ = min(min_sum, curr_sum);\n    }\n    return min_sum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpldzgb8r9.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpldzgb8r9.cpp:18:20: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   18 |         curr_sum\
    \ = max(curr_sum, 0);\n      |                    ^~~\n      |               \
    \     std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpldzgb8r9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpldzgb8r9.cpp:21:19: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   21 |         min_sum = min(min_sum, curr_sum);\n      |                  \
    \ ^~~\n      |                   std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpldzgb8r9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    //   int min = INT_MAX;\n\
    \    //   int max = INT_MIN;\n    //   for (auto n : nums) {\n    //     if (n\
    \ < min) {\n    //       min = n;\n    //     }\n    //     if (n > max) {\n \
    \   //       max = n;\n    //     }\n    //   }\n    //   return min + max;\n\
    \    int min_sum = 0;\n    int sum = 0;\n    int max = INT_MIN;\n    int max_index\
    \ = 0;\n    int min_index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (nums[i] < max) {\n            max = nums[i];\n\
    \            max_index = i;\n        }\n        if (sum < min_sum) {\n       \
    \     min_sum = sum;\n            min_index = i;\n        }\n    }\n    return\
    \ min_sum + max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpip1ih870: /tmp/tmpip1ih870.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long total = INT_MAX;\n\
    \    for (auto & n : nums) {\n        total = std::min(total, n);\n    }\n   \
    \ long sum = 0;\n    int i = 0;\n    while (i < nums.size()) {\n        sum +=\
    \ nums[i];\n        if (sum < 0) {\n            total = std::min(total, sum);\n\
    \            i++;\n            sum = 0;\n        } else {\n            total =\
    \ std::min(total, sum);\n            i++;\n        }\n    }\n    return total;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvv4zse1u: /tmp/tmpvv4zse1u.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tif (nums.size() == 0) {\n\
    \t\treturn 0;\n\t}\n\tlong curr_sum = nums[0];\n\tlong max_sum = nums[0];\n\t\
    long l = 0;\n\tlong r = 0;\n\tlong min_sum = nums[0];\n\twhile (r < nums.size())\
    \ {\n\t\tif (curr_sum > 0) {\n\t\t\tcurr_sum = nums[r];\n\t\t\tl = r;\n\t\t} else\
    \ {\n\t\t\tcurr_sum += nums[r];\n\t\t}\n\t\tif (curr_sum > max_sum) {\n\t\t\t\
    max_sum = curr_sum;\n\t\t}\n\t\tr++;\n\t}\n\tmin_sum = max_sum;\n\tcurr_sum =\
    \ 0;\n\twhile (l < r) {\n\t\tif (curr_sum > 0) {\n\t\t\tcurr_sum = nums[l];\n\t\
    \t\tr = l;\n\t\t} else {\n\t\t\tcurr_sum += nums[l];\n\t\t}\n\t\tif (curr_sum\
    \ > max_sum) {\n\t\t\tmax_sum = curr_sum;\n\t\t}\n\t\tif (min_sum > max_sum) {\n\
    \t\t\tmin_sum = max_sum;\n\t\t}\n\t\tl++;\n\t}\n\treturn min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe1yl_u5x: /tmp/tmpe1yl_u5x.cpp:50: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = nums[0];\n \
    \ long sum = nums[0];\n  for (size_t i = 1; i < nums.size(); i++) {\n    sum +=\
    \ nums[i];\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (sum\
    \ < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpj_0n1ddq: /tmp/tmpj_0n1ddq.cpp:30: int main(): Assertion `candidate((std::vector<long>({100,\
    \ -1, -2, -3, 10, -5}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = LONG_MAX;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for\
    \ (int j = i; j < nums.size(); j++) {\n            sum += nums[j];\n         \
    \   if (sum < minSum)\n                minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  long min = nums[0];\n  long currSum = nums[0];\n  for (int\
    \ i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n\
    \    min = std::min(min, currSum);\n  }\n  return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n\
    \  long sum = 0;\n  long minSum = LONG_MAX;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    minSum = std::min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm1if24nw: /tmp/tmpm1if24nw.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long current_sum = 0;\n\
    \    long min_sum = std::numeric_limits<long>::max();\n    for (auto i : nums)\
    \ {\n        current_sum += i;\n        if (current_sum < min_sum) {\n       \
    \     min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n    \
    \        current_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tassert(nums.size() > 0);\n\
    \tif (nums.size() == 1) {\n\t\treturn nums[0];\n\t}\n\t// For each element in\
    \ the array, check if the minimum sub-array sum that\n\t// includes that element\
    \ is less than the current minimum sub-array sum\n\tlong min_sum = nums[0];\n\t\
    for (int i = 0; i < nums.size(); i++) {\n\t\tlong curr_sum = nums[i];\n\t\tmin_sum\
    \ = std::min(min_sum, curr_sum);\n\t\tfor (int j = i + 1; j < nums.size(); j++)\
    \ {\n\t\t\tcurr_sum += nums[j];\n\t\t\tmin_sum = std::min(min_sum, curr_sum);\n\
    \t\t}\n\t}\n\treturn min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tassert(nums.size() > 0);\n\
    \tlong sum = nums[0];\n\tlong minSum = sum;\n\tfor (long i = 1; i < nums.size();\
    \ i++) {\n\t\tsum = std::min(nums[i], sum + nums[i]);\n\t\tminSum = std::min(minSum,\
    \ sum);\n\t}\n\treturn minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long i, j, curr_sum =\
    \ 0, min_sum = LONG_MAX;\n    for (i = 0; i < nums.size(); i++) {\n        curr_sum\
    \ = 0;\n        for (j = i; j < nums.size(); j++) {\n            curr_sum += nums[j];\n\
    \            if (curr_sum < min_sum)\n                min_sum = curr_sum;\n  \
    \      }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = INT_MAX;\n    int currSum = 0;\n    for(int i = 0; i < nums.size();\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0qg9k02i: /tmp/tmp0qg9k02i.cpp:28: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = 0;\n    long\
    \ curr_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum\
    \ += nums[i];\n        if (curr_sum < min) {\n            min = curr_sum;\n  \
    \      }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprtf5lv8y: /tmp/tmprtf5lv8y.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = LONG_MAX;\n\
    \  long currSum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    if (currSum\
    \ < 0) {\n      currSum = nums[i];\n    } else {\n      currSum += nums[i];\n\
    \    }\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf6q9xyoi: /tmp/tmpf6q9xyoi.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong min = nums[0];\n\t\
    for (long i = 0; i < nums.size(); i++) {\n\t\tlong current = 0;\n\t\tfor (long\
    \ j = i; j < nums.size(); j++) {\n\t\t\tcurrent += nums[j];\n\t\t\tif (current\
    \ < min) {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = INT_MAX;\n \
    \ int start = 0;\n  int end = 0;\n  long curr_sum = 0;\n  while (end < nums.size())\
    \ {\n    curr_sum += nums[end];\n    end++;\n    while (curr_sum >= sum) {\n \
    \     sum = curr_sum;\n      curr_sum -= nums[start];\n      start++;\n    }\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n \
    \   assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpezuxx2se: /tmp/tmpezuxx2se.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (long n : nums) {\n    sum += n;\n    if (sum < min) {\n\
    \      min = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long l = 0, r = 0, n\
    \ = nums.size(), sum = 0, min_sum = INT_MAX;\n    while (r < n) {\n        sum\
    \ += nums[r];\n        min_sum = std::min(min_sum, sum);\n        if (sum > 0)\n\
    \            sum = 0;\n        r++;\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSoFar = LONG_MAX;\n\
    \    long curSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curSum\
    \ += nums[i];\n        minSoFar = std::min(minSoFar, curSum);\n        if (curSum\
    \ > 0) curSum = 0;\n    }\n    return minSoFar;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong min_sum = std::numeric_limits<long>::max();\n\
    \tlong sum = 0;\n\tfor (auto n : nums) {\n\t\tsum += n;\n\t\tmin_sum = std::min(min_sum,\
    \ sum);\n\t\tif (sum > 0) sum = 0;\n\t}\n\treturn min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum=INT_MAX;\n  long\
    \ max=0;\n  for(int i=0;i<nums.size();i++){\n    max=max+nums[i];\n    if(max<sum){\n\
    \      sum=max;\n    }\n    if(max>0){\n      max=0;\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    assert(nums.size() >\
    \ 0);\n    long minimum_sum = LONG_MAX;\n    long sum = 0;\n    for (long i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        minimum_sum = std::min(minimum_sum,\
    \ sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minimum_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkwjn5lc9: /tmp/tmpkwjn5lc9.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long currSum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum\
    \ = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n\
    \  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = LONG_MAX;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = std::numeric_limits<long>::max();\n\
    \  long curr_sum = 0;\n  for (auto num : nums) {\n    curr_sum += num;\n    min_sum\
    \ = std::min(min_sum, curr_sum);\n    if (curr_sum < 0) {\n      curr_sum = 0;\n\
    \    }\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzaf3ylur: /tmp/tmpzaf3ylur.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong minSum = 0;\n\tlong\
    \ sum = 0;\n\tfor (auto n : nums) {\n\t\tsum += n;\n\t\tif (sum < minSum) {\n\t\
    \t\tminSum = sum;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzd8v0gg7: /tmp/tmpzd8v0gg7.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long smallest = nums[0];\n\
    \    long current = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n  \
    \      if (current < 0) {\n            if (current + nums[i] < smallest) {\n \
    \               smallest = current + nums[i];\n            }\n            current\
    \ = nums[i];\n        } else {\n            current += nums[i];\n            if\
    \ (current < smallest) {\n                smallest = current;\n            }\n\
    \        }\n    }\n    return smallest;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf7t7ouq1: /tmp/tmpf7t7ouq1.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long currentSum = 0;\n\
    \    long minSubArraySum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       currentSum += nums[i];\n        if (i == 0) {\n            minSubArraySum\
    \ = currentSum;\n        } else {\n            minSubArraySum = std::min(minSubArraySum,\
    \ currentSum);\n        }\n        if (currentSum > 0) {\n            currentSum\
    \ = 0;\n        }\n    }\n    return minSubArraySum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  long minSoFar = nums[0];\n  long currMin = nums[0];\n  for (int i = 1;\
    \ i < nums.size(); i++) {\n    currMin = std::min(nums[i], currMin + nums[i]);\n\
    \    minSoFar = std::min(minSoFar, currMin);\n  }\n  return minSoFar;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum=INT_MAX;\n \
    \   long temp=0;\n    for(int i=0;i<nums.size();i++){\n        temp+=nums[i];\n\
    \        if(temp<sum){\n            sum=temp;\n        }\n        if(temp>0){\n\
    \            temp=0;\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min_sum = INT64_MAX;\n    for (int i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        min_sum = std::min(min_sum, sum);\n        if (sum < 0)\n\
    \            sum = 0;\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiaw2oz8f: /tmp/tmpiaw2oz8f.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong min_ending_here =\
    \ 0;\n\tlong min_so_far = std::numeric_limits<long>::max();\n\tfor (long x : nums)\
    \ {\n\t\tmin_ending_here = std::min(x, min_ending_here + x);\n\t\tmin_so_far =\
    \ std::min(min_so_far, min_ending_here);\n\t}\n\treturn min_so_far;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong sum = 0;\n\tlong min\
    \ = nums[0];\n\tfor (long num : nums) {\n\t\tsum += num;\n\t\tif (sum < min) {\n\
    \t\t\tmin = sum;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tint sum = 0;\n\tint min_sum\
    \ = INT_MAX;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tsum += nums[i];\n\
    \t\tif (sum < min_sum) {\n\t\t\tmin_sum = sum;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\
    \tsum = 0;\n\t\t}\n\t}\n\treturn min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqngd2rpz: /tmp/tmpqngd2rpz.cpp:27: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  int len = nums.size();\n\
    \  int start = 0;\n  int end = 0;\n  long minSum = INT_MAX;\n  long sum = 0;\n\
    \  while (end < len) {\n    sum += nums[end];\n    while (sum >= 0) {\n      minSum\
    \ = std::min(minSum, sum);\n      sum -= nums[start];\n      start++;\n    }\n\
    \    end++;\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzeei01y3: /tmp/tmpzeei01y3.cpp:27: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = nums[0];\n\
    \    long sum = 0;\n    long runningMin = 0;\n    long runningSum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (min\
    \ > sum) {\n            min = sum;\n        }\n        if (sum > 0) {\n      \
    \      sum = 0;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = 0;\n  long min_sum\
    \ = 0;\n  long min_value = 0;\n  for (auto i : nums) {\n    if (i < min_value)\
    \ {\n      min_value = i;\n    }\n    sum += i;\n    if (sum - min_sum < 0) {\n\
    \      min_sum = sum;\n    }\n  }\n  if (min_sum == 0) {\n    return min_value;\n\
    \  }\n  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpw5a6i786: /tmp/tmpw5a6i786.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n        long min = nums[0];\n\
    \        for(int i = 0; i < nums.size(); i++) {\n                long curr = 0;\n\
    \                for(int j = i; j < nums.size(); j++) {\n                    \
    \    curr += nums[j];\n                        if(curr < min) {\n            \
    \                    min = curr;\n                        }\n                }\n\
    \        }\n        return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        sum\
    \ += nums[i];\n        minSum = std::min(minSum, sum);\n        if (sum > 0)\n\
    \            sum = 0;\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // a b c d e f g h i\
    \ j\n    //     l     r\n    //              r -l\n    // a b c d e f g h i j\n\
    \    //          l     r\n    //          (r-l)\n    // a b c d e f g h i j\n\
    \    //              l r\n    //           r-l\n    // a b c d e f g h i j\n \
    \   //            lr\n    //        r-l\n    // a b c d e f g h i j\n    //  \
    \        l r\n    //       r-l\n    // a b c d e f g h i j\n    //        l r\n\
    \    //     r-l\n    // b c d e f g h i j a\n    // l     r\n    //        r-l\n\
    \    // b c d e f g h i j a\n    //     l     r\n    //        r-l\n    // b c\
    \ d e f g h i j a\n    //         l     r\n    //        r-l\n    // b c d e f\
    \ g h i j a\n    //              l r\n    //           r-l\n    // b c d e f g\
    \ h i j a\n    //           l r\n    //        r-l\n    // b c d e f g h i j a\n\
    \    //        l r\n    //     r-l\n    // b c d e f g h i j a\n    //     l r\n\
    \    //  r-l\n    // b c d e f g h i j a\n    //  l r\n    // r-l\n    // c d\
    \ e f g h i j a b\n    // lr\n    //    r-l\n    // c d e f g h i j a b\n    //\
    \ l     r\n    //       r-l\n    // c d e f g h i j a b\n    //     l     r\n\
    \    //       r-l\n    // c d e f g h i j a b\n    //         l     r\n    //\
    \       r-l\n    // c d e f g h i j a b\n    //              l r\n    //     \
    \     r-l\n    // c d e f g h i j a\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplqqa5zc7: /tmp/tmplqqa5zc7.cpp:70: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // your code goes here\n\
    \  long mini = INT_MAX;\n  long sum = 0;\n  for(int i = 0; i < nums.size(); i++){\n\
    \    sum = nums[i];\n    if(sum < mini)\n      mini = sum;\n    for(int j = i+1;\
    \ j < nums.size(); j++){\n      sum += nums[j];\n      if(sum < mini)\n      \
    \  mini = sum;\n    }\n  }\n  return mini;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tint m = nums.size();\n\t\
    int min = INT_MAX;\n\tint sum = 0;\n\tfor (int i = 0; i < m; i++) {\n\t\tsum =\
    \ sum + nums[i];\n\t\tif (sum < min) {\n\t\t\tmin = sum;\n\t\t}\n\t\tif (sum >\
    \ 0) {\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpela8phzs: /tmp/tmpela8phzs.cpp:28: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = nums[0];\n \
    \ long minSum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    sum =\
    \ std::min(nums[i], sum + nums[i]);\n    minSum = std::min(minSum, sum);\n  }\n\
    \  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n   \
    \ assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = INT_MAX;\n\
    \    long curr_sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(curr_sum\
    \ + nums[i] < 0) {\n            sum = min(sum, curr_sum + nums[i]);\n        \
    \    curr_sum = 0;\n        } else {\n            curr_sum += nums[i];\n     \
    \   }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy11ahc2d.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy11ahc2d.cpp:13:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   13 |             sum =\
    \ min(sum, curr_sum + nums[i]);\n      |                   ^~~\n      |      \
    \             std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy11ahc2d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = 0;\n  long minSum\
    \ = INT_MAX;\n  int size = nums.size();\n  for (int i = 0; i < size; i++) {\n\
    \    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  \
    \  if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum=0, temp_sum=0,\
    \ min_sum=0;\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n\
    \        if(sum>0){\n            sum = 0;\n        }\n        else if(min_sum>sum){\n\
    \            min_sum = sum;\n        }\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyt8ss72r: /tmp/tmpyt8ss72r.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\t// basic case\n\tif (nums.size()\
    \ == 0) {\n\t\treturn 0;\n\t}\n\t// minimum sub-array sum\n\tlong minSum = std::numeric_limits<long>::max();\n\
    \t// current minimum\n\tlong currMin = 0;\n\t// iterate through the numbers\n\t\
    for (int num : nums) {\n\t\t// add the next number\n\t\tcurrMin += num;\n\t\t\
    // check if we have a new minimum sum\n\t\tif (currMin < minSum) {\n\t\t\tminSum\
    \ = currMin;\n\t\t}\n\t\t// check if we need to reset the minimum\n\t\tif (currMin\
    \ > 0) {\n\t\t\tcurrMin = 0;\n\t\t}\n\t}\n\t// return the minimum sum\n\treturn\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplyt3e2u5: /tmp/tmplyt3e2u5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long currSum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum\
    \ = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n\
    \  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  long min_sum = nums[0];\n  long curr_sum = 0;\n  for (auto i = 0; i <\
    \ nums.size(); i++) {\n    curr_sum += nums[i];\n    if (curr_sum < min_sum) min_sum\
    \ = curr_sum;\n    if (curr_sum > 0) curr_sum = 0;\n  }\n  return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    long\
    \ min = sum;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j\
    \ = 0; j < nums.size(); j++) {\n            if (j > i) {\n                sum\
    \ = 0;\n                for (int k = i; k <= j; k++) {\n                    sum\
    \ += nums[k];\n                }\n                if (sum < min) {\n         \
    \           min = sum;\n                }\n            }\n        }\n    }\n \
    \   return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp66e6or40: /tmp/tmp66e6or40.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = nums[0];\n\
    \    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n       \
    \ if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n        }\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tif (nums.size() == 0)\n\
    \t\treturn 0;\n\tlong minSum = std::numeric_limits<long>::max();\n\tlong currSum\
    \ = 0;\n\tfor (auto n : nums) {\n\t\tcurrSum += n;\n\t\tminSum = std::min(minSum,\
    \ currSum);\n\t\tif (currSum > 0) {\n\t\t\tcurrSum = 0;\n\t\t}\n\t}\n\treturn\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Initialize the size\
    \ of the vector\n  int size = nums.size();\n  // Initialize minimum sum to the\
    \ first element of the array\n  long min_sum = nums[0];\n  // Initialize the sum\
    \ of current sub-array to the first element of the array\n  long curr_sum = nums[0];\n\
    \  // Check if the number of elements in the array is less than or equal to 1\n\
    \  if (size <= 1) {\n    // If the size of the array is less than or equal to\
    \ 1, then the minimum sum\n    // is the first element in the array\n    return\
    \ min_sum;\n  }\n  // Loop from the second element in the array to the last element\
    \ in the array\n  for (int i = 1; i < size; i++) {\n    // Check if the sum of\
    \ the current sub-array is less than or equal to the\n    // current element in\
    \ the array\n    if (curr_sum <= nums[i]) {\n      // If the sum of the current\
    \ sub-array is less than or equal to the current\n      // element in the array,\
    \ then set the sum of the current sub-array to the\n      // current element in\
    \ the array\n      curr_sum = nums[i];\n    } else {\n      // If the sum of the\
    \ current sub-array is greater than the current element\n      // in the array,\
    \ then add the current element in the array to the sum of\n      // the current\
    \ sub-array\n      curr_sum += nums[i];\n    }\n    // Check if the sum of the\
    \ current sub-array is less than the minimum sum\n    if (curr_sum < min_sum)\
    \ {\n      // If the sum of the current sub-array is less than the minimum sum,\
    \ then\n      // set the minimum sum to the sum of the current sub-array\n   \
    \   min_sum = curr_sum;\n    }\n  }\n  // Return the minimum sum\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy8vgpn0y: /tmp/tmpy8vgpn0y.cpp:48: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_subarray_sum\
    \ = LONG_MAX;\n    long sum = 0;\n    long left = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_subarray_sum)\
    \ {\n            min_subarray_sum = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n            left = i + 1;\n        }\n    }\n    return\
    \ min_subarray_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n \
    \   assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n   long min=LONG_MAX;\n \
    \ long sum=0;\n  for(int i=0;i<nums.size();i++)\n  {\n    sum+=nums[i];\n    if(sum<min)\n\
    \    {\n      min=sum;\n    }\n    if(sum>0)\n    {\n      sum=0;\n    }\n  }\n\
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = nums[0];\n\
    \    long curr_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n       \
    \ curr_sum += nums[i];\n        if (curr_sum < min_sum)\n            min_sum =\
    \ curr_sum;\n        if (curr_sum > 0)\n            curr_sum = 0;\n    }\n   \
    \ return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n   \
    \ assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long maxSum = 0;\n  \
    \  long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyea5mp1m: /tmp/tmpyea5mp1m.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  int maxi = INT_MAX;\n \
    \ int sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < maxi)\n      maxi = sum;\n    if (sum > 0)\n      sum = 0;\n  }\n\
    \  return maxi;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfpc77g4i: /tmp/tmpfpc77g4i.cpp:25: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long res = nums[0];\n \
    \ long sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    if (sum\
    \ > 0) {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n    }\n \
    \   res = std::min(res, sum);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = INT_MAX;\n\
    \  long current_sum = 0;\n  long start = 0;\n  long end = 0;\n  while (end < nums.size())\
    \ {\n    while (current_sum < 0 && start < end) {\n      current_sum -= nums[start];\n\
    \      start++;\n    }\n    current_sum += nums[end];\n    if (current_sum < min_sum)\
    \ {\n      min_sum = current_sum;\n    }\n    end++;\n  }\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnztnl7o_: /tmp/tmpnztnl7o_.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  assert(nums.size() > 0);\n\
    \  long sum = 0;\n  long minSum = LONG_MAX;\n  for (long n : nums) {\n    sum\
    \ += n;\n    minSum = std::min(minSum, sum);\n    if (sum < 0) {\n      sum =\
    \ 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptsscv4lo: /tmp/tmptsscv4lo.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long mini = INT_MAX;\n\
    \    for(int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for(int\
    \ j = i; j < nums.size(); j++) {\n            sum += nums[j];\n            if(sum\
    \ < mini)\n                mini = sum;\n        }\n    }\n    return mini;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    std::vector<long> prefixSum(nums.size()\
    \ + 1, 0);\n    for (int i = 1; i < prefixSum.size(); i++) {\n        prefixSum[i]\
    \ = prefixSum[i - 1] + nums[i - 1];\n    }\n    long min = nums[0];\n    for (int\
    \ i = 0; i < prefixSum.size(); i++) {\n        for (int j = i + 1; j < prefixSum.size();\
    \ j++) {\n            long diff = prefixSum[j] - prefixSum[i];\n            if\
    \ (diff < min) {\n                min = diff;\n            }\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    int min_sum =0;\n    int curr_sum =0;\n    for(int i=0;i<nums.size();i++){\n\
    \        curr_sum += nums[i];\n        if(min_sum > curr_sum){\n            min_sum\
    \ = curr_sum;\n        }\n        if(curr_sum > 0){\n            curr_sum = 0;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu8bq2l2t: /tmp/tmpu8bq2l2t.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    int start = 0;\n    int end = 0;\n    long curSum = 0;\n    while(end < nums.size()){\n\
    \        curSum += nums[end];\n        if(curSum > 0){\n            curSum = 0;\n\
    \            start = end + 1;\n        }\n        if(curSum < min){\n        \
    \    min = curSum;\n        }\n        end++;\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpibhu_1sp: /tmp/tmpibhu_1sp.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong minSum = 0;\n\tlong\
    \ currSum = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tcurrSum += nums[i];\n\
    \t\tif (currSum > minSum) {\n\t\t\tminSum = currSum;\n\t\t}\n\t\tif (currSum <\
    \ 0) {\n\t\t\tcurrSum = 0;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu3odgntx: /tmp/tmpu3odgntx.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  int local = nums[0];\n\
    \  int global = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    local\
    \ = std::min(nums[i], local + nums[i]);\n    global = std::min(local, global);\n\
    \  }\n  return global;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa934bs9x: /tmp/tmpa934bs9x.cpp:22: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong mini = nums[0];\n\t\
    long prev = nums[0];\n\tfor (int i = 1; i < nums.size(); i++) {\n\t\tprev = min(prev\
    \ + nums[i], nums[i]);\n\t\tmini = min(mini, prev);\n\t}\n\treturn mini;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnfymuc2_.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnfymuc2_.cpp:12:10: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   12 |   prev = min(prev\
    \ + nums[i], nums[i]);\n      |          ^~~\n      |          std::min\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnfymuc2_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    if (nums.size() == 0)\
    \ {\n        return 0;\n    }\n    std::vector<long> dp(nums.size(), LONG_MAX);\n\
    \    dp[0] = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n        dp[i]\
    \ = std::min(dp[i-1], 0l) + nums[i];\n    }\n    long min_sum = LONG_MAX;\n  \
    \  for (long i = 0; i < nums.size(); i++) {\n        min_sum = std::min(min_sum,\
    \ dp[i]);\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long currentSum = nums[0];\n  for (long i = 1; i < nums.size(); i++) {\n  \
    \  if (currentSum + nums[i] < nums[i]) {\n      currentSum = nums[i];\n    } else\
    \ {\n      currentSum += nums[i];\n    }\n    if (currentSum < minSum) {\n   \
    \   minSum = currentSum;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwepofy0x: /tmp/tmpwepofy0x.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long len = nums.size();\n\
    \  long minSum = nums[0];\n  long currSum = nums[0];\n  for (long i = 1; i < len;\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = 0;\n \
    \   long sum = 0;\n    long len = nums.size();\n    for (long i = 0; i < len;\
    \ i++) {\n        sum += nums[i];\n        if (i == 0) {\n            min_sum\
    \ = sum;\n        } else {\n            min_sum = std::min(min_sum, sum);\n  \
    \      }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n   \
    \ return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n   \
    \ assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_7ftib9u: /tmp/tmp_7ftib9u.cpp:27: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min_sum = LONG_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n    \
    \    }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  assert(!nums.empty());\n\
    \  long min = nums[0];\n  long sum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n\
    \    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_u9abqo6: /tmp/tmp_u9abqo6.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  int current_max = 0;\n  int max_so_far = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    current_max = std::max(0, current_max +\
    \ nums[i]);\n    max_so_far = std::max(max_so_far, current_max);\n  }\n  return\
    \ max_so_far;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf0463cif.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf0463cif.cpp:15:52: error: no matching function for call\
    \ to \u2018max(int, __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type)\u2019\
    \n   15 |     current_max = std::max(0, current_max + nums[i]);\n      |     \
    \                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf0463cif.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf0463cif.cpp:15:52:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   15 |     current_max = std::max(0, current_max\
    \ + nums[i]);\n      |                                                    ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skyl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int curr_sum = 0;\n \
    \   int min_sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        curr_sum\
    \ += nums[i];\n        if(curr_sum < min_sum)\n            min_sum = curr_sum;\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy_t__s85: /tmp/tmpy_t__s85.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long minTemp = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    minTemp +=\
    \ nums[i];\n    if (minTemp < minSum) {\n      minSum = minTemp;\n    }\n    if\
    \ (minTemp > 0) {\n      minTemp = 0;\n    }\n  }\n  return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = nums[0];\n \
    \ long minSum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    sum =\
    \ std::min(nums[i], sum + nums[i]);\n    minSum = std::min(minSum, sum);\n  }\n\
    \  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n   \
    \ assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long tempSum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    tempSum\
    \ = std::min(tempSum + nums[i], nums[i]);\n    minSum = std::min(minSum, tempSum);\n\
    \  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long res = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (long num : nums) {\n    sum += num;\n    res = std::min(res,\
    \ sum);\n    sum = std::max(sum, 0l);\n  }\n  return res;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqsdxusx5: /tmp/tmpqsdxusx5.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long currSum = nums[0];\n  long minStart = 0;\n  long minEnd = 0;\n  long start\
    \ = 0;\n  long end = 0;\n  for (long i = 1; i < nums.size(); i++) {\n    if (currSum\
    \ + nums[i] < nums[i]) {\n      currSum = nums[i];\n      start = i;\n      end\
    \ = i;\n    } else {\n      currSum += nums[i];\n      end = i;\n    }\n    if\
    \ (currSum < minSum) {\n      minSum = currSum;\n      minStart = start;\n   \
    \   minEnd = end;\n    }\n  }\n  // for (long i = minStart; i <= minEnd; i++)\
    \ {\n  //  printf(\"%ld \", nums[i]);\n  //}\n  //printf(\"\\n\");\n  return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb821g2gv: /tmp/tmpb821g2gv.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  long minSum = nums[0];\n  long currSum = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  long min_sum = INT_MAX;\n  long curr_sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    curr_sum += nums[i];\n    if (curr_sum < min_sum) min_sum = curr_sum;\n\
    \    if (curr_sum > 0) curr_sum = 0;\n  }\n  return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    //assert(nums.size()\
    \ > 0);\n    long sum = 0;\n    long min = nums[0];\n    for (long num : nums)\
    \ {\n        sum += num;\n        if (sum < min) {\n            min = sum;\n \
    \       }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n  \
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = 0;\n  long\
    \ currSum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    currSum += nums[i];\n\
    \    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if (currSum\
    \ > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwntofjyx: /tmp/tmpwntofjyx.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    assert(nums.size()>0);\n\
    \    if(nums.size()==1) return nums[0];\n    long min_so_far = LONG_MAX;\n   \
    \ long sum_so_far = 0;\n    for(auto n: nums){\n        sum_so_far += n;\n   \
    \     if(sum_so_far < min_so_far)\n            min_so_far = sum_so_far;\n    \
    \    if(sum_so_far < 0)\n            sum_so_far = 0;\n    }\n    return min_so_far;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvrkfucdh: /tmp/tmpvrkfucdh.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n\
    \  long min = nums[0];\n  long sum = 0;\n  for (long i = 0; i < nums.size(); i++)\
    \ {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if\
    \ (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minVal = LONG_MAX;\n\
    \  long curVal = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    curVal +=\
    \ nums[i];\n    if (curVal < minVal) {\n      minVal = curVal;\n    }\n    if\
    \ (curVal > 0) {\n      curVal = 0;\n    }\n  }\n  return minVal;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = nums[0];\n\
    \    long current_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n    \
    \    current_sum += nums[i];\n        if (current_sum < min_sum) {\n         \
    \   min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n      \
    \      current_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong size = nums.size();\n\
    \tlong sum = 0;\n\tlong min_sum = nums[0];\n\tfor (int i = 0; i < size; i++) {\n\
    \t\tsum += nums[i];\n\t\tif (sum < min_sum) {\n\t\t\tmin_sum = sum;\n\t\t}\n\t\
    \tif (sum > 0) {\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = nums[0];\n \
    \ long sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    if (sum\
    \ > 0) {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n    }\n \
    \   if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // initialize the minimum\
    \ sum to be the first element\n  // in the array.\n  long minSum = nums[0];\n\
    \  // initialize the current sum to be 0\n  long currentSum = 0;\n  // loop through\
    \ the array, starting at the second element\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    // add the current element to the current sum\n    currentSum +=\
    \ nums[i];\n    // if the current sum is less than the minimum sum,\n    // reassign\
    \ the minimum sum to be the current sum\n    if (currentSum < minSum) minSum =\
    \ currentSum;\n    // if the current sum is less than 0, reset the current sum\
    \ to be 0\n    if (currentSum < 0) currentSum = 0;\n  }\n  // return the minimum\
    \ sum\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp66wqayoh: /tmp/tmp66wqayoh.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = nums[0];\n\
    \    long curr_sum = 0;\n    int size = nums.size();\n    for(int i = 0; i < size;\
    \ i++) {\n        curr_sum += nums[i];\n        if(curr_sum < min_sum) {\n   \
    \         min_sum = curr_sum;\n        }\n        if(curr_sum > 0) {\n       \
    \     curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Initialize an array\
    \ of running sums\n    // Keep track of the minimum sum\n    std::vector<long>\
    \ runningSums;\n    long currentSum = 0;\n    for (auto num : nums) {\n      \
    \  currentSum += num;\n        runningSums.push_back(currentSum);\n    }\n   \
    \ long minSum = *std::min_element(runningSums.begin(), runningSums.end());\n \
    \   // Need to check the sums of all subarrays and return the minimum\n    int\
    \ length = nums.size();\n    for (int i = 0; i < length; i++) {\n        for (int\
    \ j = i + 1; j < length; j++) {\n            long subArraySum = runningSums[j]\
    \ - runningSums[i] + nums[i];\n            if (subArraySum < minSum) {\n     \
    \           minSum = subArraySum;\n            }\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_xvuewrg: /tmp/tmp_xvuewrg.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = LONG_MAX;\n\
    \  long curr = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    curr += nums[i];\n\
    \    if (curr < min) {\n      min = curr;\n    }\n    if (curr > 0) {\n      curr\
    \ = 0;\n    }\n  }\n  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = LONG_MAX;\n\
    \    long current_sum = 0;\n    for (auto num : nums) {\n        current_sum +=\
    \ num;\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n\
    \        }\n        if (current_sum > 0) {\n            current_sum = 0;\n   \
    \     }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long n = nums.size();\n\
    \    long maxSum = 0;\n    long curSum = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (nums[i] < 0) {\n            maxSum += nums[i];\n        }\n \
    \       if (curSum + nums[i] < 0) {\n            curSum = 0;\n        } else {\n\
    \            curSum += nums[i];\n        }\n    }\n    if (maxSum == 0) {\n  \
    \      std::sort(nums.begin(), nums.end());\n        return nums[0];\n    }\n\
    \    return maxSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n \
    \   assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk8b4u1yg: /tmp/tmpk8b4u1yg.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3, 2, -10}))) == (-14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_ending_here =\
    \ nums[0];\n  long min_so_far = nums[0];\n  for (int i = 1; i < nums.size(); i++)\
    \ {\n    min_ending_here = std::min(nums[i], min_ending_here + nums[i]);\n   \
    \ min_so_far = std::min(min_so_far, min_ending_here);\n  }\n  return min_so_far;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  long min_sum = std::numeric_limits<long>::max();\n  long\
    \ sum = 0;\n  for (int num : nums) {\n    sum += num;\n    min_sum = std::min(min_sum,\
    \ sum);\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpisfc_z97: /tmp/tmpisfc_z97.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here.\n\
    \  long minimum = INT_MAX;\n  int sum = 0;\n  int start = 0;\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    sum += nums[i];\n    while (sum > 0) {\n      minimum\
    \ = std::min(minimum, sum);\n      sum -= nums[start];\n      start++;\n    }\n\
    \  }\n  return minimum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp6c2bse8.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp6c2bse8.cpp:16:38: error: no matching function for call\
    \ to \u2018min(long int&, int&)\u2019\n   16 |       minimum = std::min(minimum,\
    \ sum);\n      |                                      ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpp6c2bse8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp6c2bse8.cpp:16:38:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   16 |       minimum = std::min(minimum,\
    \ sum);\n      |                                      ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomple"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  long min_so_far = nums[0];\n  long min_ending_here = nums[0];\n  for (int\
    \ i = 1; i < nums.size(); i++) {\n    min_ending_here = std::min(nums[i], min_ending_here\
    \ + nums[i]);\n    min_so_far = std::min(min_so_far, min_ending_here);\n  }\n\
    \  return min_so_far;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    assert(!nums.empty());\n\
    \    long min_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        long\
    \ sub_array_sum = 0;\n        for (int j = i; j < nums.size(); j++) {\n      \
    \      sub_array_sum += nums[j];\n            if (sub_array_sum < min_sum || i\
    \ == 0 && j == 0) {\n                min_sum = sub_array_sum;\n            }\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_subArray_sum\
    \ = nums[0];\n    long current_sub_array_sum = 0;\n    for (auto i = 0; i < nums.size();\
    \ i++) {\n        current_sub_array_sum += nums[i];\n        if (current_sub_array_sum\
    \ < min_subArray_sum) {\n            min_subArray_sum = current_sub_array_sum;\n\
    \        }\n        if (current_sub_array_sum > 0) {\n            current_sub_array_sum\
    \ = 0;\n        }\n    }\n    return min_subArray_sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int min_sum = 0;\n  \
    \  long min_sub_array_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        min_sum += nums[i];\n        if (min_sum > 0)\n            min_sum =\
    \ 0;\n        if (min_sum < min_sub_array_sum)\n            min_sub_array_sum\
    \ = min_sum;\n    }\n    return min_sub_array_sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvdtee4xw: /tmp/tmpvdtee4xw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min=9999999999;\n    long sum=0;\n    for(int i=0;i<nums.size();i++){\n\
    \        for(int j=i;j<nums.size();j++){\n            sum+=nums[j];\n        \
    \    if(sum<min){\n                min=sum;\n            }\n        }\n      \
    \  sum=0;\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n\
    \    long sum = 0;\n    for (long n : nums) {\n        sum += n;\n        minSum\
    \ = std::min(minSum, sum);\n        if (sum > 0) sum = 0;\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    //your code here\n  \
    \  long min_sum = LONG_MAX;\n    long sum = 0;\n    for(size_t i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if(sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here.\n\
    \tlong min = INT_MAX;\n\tlong cur_sum = 0;\n\tfor(auto i = 0; i < nums.size();\
    \ i++){\n\t\tfor(auto j = i; j < nums.size(); j++){\n\t\t\tcur_sum += nums[j];\n\
    \t\t\tif(cur_sum < min){\n\t\t\t\tmin = cur_sum;\n\t\t\t}\n\t\t}\n\t\tcur_sum\
    \ = 0;\n\t}\n\treturn min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = LONG_MAX;\n\
    \  long sum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    if (sum >= 0)\
    \ {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n    }\n    min_sum\
    \ = std::min(min_sum, sum);\n  }\n  return min_sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = 0;\n  long answer\
    \ = INT_MAX;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    answer = std::min(answer, sum);\n    if (sum < 0) {\n      sum = 0;\n   \
    \ }\n  }\n  return answer;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5b9eczgh: /tmp/tmp5b9eczgh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = 0;\n    for (long num : nums) {\n        sum += num;\n        if (sum\
    \ < min)\n            min = sum;\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpchyqohm8: /tmp/tmpchyqohm8.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = LONG_MAX;\n\
    \  long sum = 0;\n  int start = 0;\n  for (int i = 0; i < nums.size(); i++) {\n\
    \    sum += nums[i];\n    while (sum >= 0) {\n      min_sum = std::min(min_sum,\
    \ sum);\n      sum -= nums[start];\n      start++;\n    }\n  }\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp848jkp1_: /tmp/tmp848jkp1_.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long res = std::numeric_limits<long>::max();\n\
    \  long currSum = 0;\n  for (auto x : nums) {\n    currSum += x;\n    res = std::min(res,\
    \ currSum);\n    currSum = std::max(currSum, 0l);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplqrj3xt0: /tmp/tmplqrj3xt0.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long low = 0, high = 0,\
    \ minSum = INT_MAX, currentSum = 0;\n  while (high < nums.size()) {\n    while\
    \ (high < nums.size() && currentSum <= 0) {\n      currentSum += nums[high];\n\
    \      ++high;\n    }\n    minSum = std::min(minSum, currentSum);\n    currentSum\
    \ -= nums[low];\n    ++low;\n  }\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsuodu9k5: /tmp/tmpsuodu9k5.cpp:27: int main(): Assertion `candidate((std::vector<long>({0,\
    \ 10, 20, 1000000}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\
    \tsum += nums[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyfvxfyf5: /tmp/tmpyfvxfyf5.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min_sum = std::numeric_limits<long>::max();\n    for (auto i = 0; i < nums.size();\
    \ ++i) {\n        sum += nums[i];\n        min_sum = std::min(min_sum, sum);\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ result = INT_MAX;\n    for (long i : nums) {\n        sum += i;\n        result\
    \ = std::min(result, sum);\n        if (sum > 0) {\n            sum = 0;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = std::numeric_limits<long>::max();\n\
    \  long currSum = 0;\n  for (auto const &num : nums) {\n    currSum += num;\n\
    \    minSum = std::min(minSum, currSum);\n    if (currSum > 0) {\n      currSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  int min = nums[0];\n  int\
    \ sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n \
    \   if (sum < min) {\n      min = sum;\n    }\n    if (sum > 0) {\n      sum =\
    \ 0;\n    }\n  }\n  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppsxxepjn: /tmp/tmppsxxepjn.cpp:27: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tint n = nums.size();\n\t\
    int min_sum = nums[0];\n\tint sum = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\t\
    sum += nums[i];\n\t\tif (sum < min_sum) {\n\t\t\tmin_sum = sum;\n\t\t}\n\t\tif\
    \ (sum > 0) {\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiprb2xj2: /tmp/tmpiprb2xj2.cpp:28: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if (sum < 0)\
    \ {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n    }\n    min_sum\
    \ = std::min(min_sum, sum);\n  }\n  return min_sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2gzj8j65: /tmp/tmp2gzj8j65.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum=nums[0];\n\
    \  long sum=0;\n  for(int i=0;i<nums.size();i++){\n    sum=nums[i];\n    if(sum<minSum){\n\
    \      minSum=sum;\n    }\n    for(int j=i+1;j<nums.size();j++){\n      sum+=nums[j];\n\
    \      if(sum<minSum){\n        minSum=sum;\n      }\n    }\n  }\n  return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long currentSum = nums[0];\n    for(int i = 1;\
    \ i < nums.size(); i++){\n        currentSum = std::min(nums[i], currentSum +\
    \ nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here.\n\
    \    int cur_sum=0;\n    int min_sum=INT_MAX;\n    for(int i=0;i<nums.size();i++){\n\
    \        cur_sum+=nums[i];\n        if(cur_sum>=0){\n            cur_sum=0;\n\
    \        }\n        min_sum=min(min_sum,cur_sum);\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf67n8ngx.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf67n8ngx.cpp:17:17: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   17 |         min_sum=min(min_sum,cur_sum);\n\
    \      |                 ^~~\n      |                 std::min\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf67n8ngx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = LONG_MAX;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = std::numeric_limits<long>::max();\n\
    \  long currSum = 0;\n  for (auto n : nums) {\n    currSum += n;\n    minSum =\
    \ std::min(minSum, currSum);\n    if (currSum > 0)\n      currSum = 0;\n  }\n\
    \  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n   \
    \ assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong minSoFar = INT_MAX;\n\
    \tfor (int i = 0; i < nums.size(); i++) {\n\t\tlong minSum = 0;\n\t\tfor (int\
    \ j = i; j < nums.size(); j++) {\n\t\t\tminSum += nums[j];\n\t\t\tif (minSum <\
    \ minSoFar) {\n\t\t\t\tminSoFar = minSum;\n\t\t\t}\n\t\t}\n\t}\n\treturn minSoFar;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = LONG_MAX;\n\
    \  long sum = 0;\n  long sub;\n  for (int i = 0; i < nums.size(); i++) {\n   \
    \ sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if (sum\
    \ > 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    if (nums.size() == 0)\
    \ {\n        return 0;\n    }\n    long result = nums[0];\n    long current =\
    \ nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n        current = std::min(current\
    \ + nums[i], nums[i]);\n        result = std::min(result, current);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_so_far = nums[0];\n\
    \    long min_ending_here = nums[0];\n    for (int i = 1; i < nums.size(); i++)\
    \ {\n        min_ending_here = std::min(nums[i], min_ending_here + nums[i]);\n\
    \        min_so_far = std::min(min_so_far, min_ending_here);\n    }\n    return\
    \ min_so_far;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for\
    \ (long l : nums) {\n        sum += l;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpj5xveofb: /tmp/tmpj5xveofb.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  // NOTE: we can either calculate sum from the left or from\
    \ the right.\n  long min = nums[0];\n  long sum = nums[0];\n  for (int i = 1;\
    \ i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min\
    \ = sum;\n    }\n  }\n  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9jaqyh60: /tmp/tmp9jaqyh60.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSubArraySum =\
    \ nums[0];\n    long currentSubArraySum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        currentSubArraySum = std::min(nums[i], currentSubArraySum +\
    \ nums[i]);\n        minSubArraySum = std::min(minSubArraySum, currentSubArraySum);\n\
    \    }\n    return minSubArraySum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int min = INT_MAX;\n\
    \    int sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < min) {\n            min = sum;\n        }\n     \
    \   if(sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy66bz9g8: /tmp/tmpy66bz9g8.cpp:27: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong minSum = 0;\n\tlong\
    \ sum = 0;\n\tfor (long &num : nums) {\n\t\tsum += num;\n\t\tif (sum < minSum)\
    \ {\n\t\t\tminSum = sum;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgciqha14: /tmp/tmpgciqha14.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = nums[0];\n\
    \  long curr_sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    curr_sum\
    \ += nums[i];\n    if (curr_sum < min_sum)\n      min_sum = curr_sum;\n    if\
    \ (curr_sum > 0)\n      curr_sum = 0;\n  }\n  return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // Write your code here\n\
    \  long min_sum = 999999999;\n  long sum = 0;\n  int j = 0;\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    while (j < nums.size() && sum + nums[j] < 0) {\n\
    \      sum += nums[j];\n      j++;\n    }\n    min_sum = std::min(min_sum, sum);\n\
    \    sum -= nums[i];\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvvvjj5sq: /tmp/tmpvvvjj5sq.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum=INT_MAX;\n\
    \    long sum=0;\n    for(int i=0;i<nums.size();i++){\n        sum+=nums[i];\n\
    \        if(sum<min_sum){\n            min_sum=sum;\n        }\n        if(sum>0){\n\
    \            sum=0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    if (nums.size() == 0)\
    \ {\n        return 0;\n    }\n    long min_so_far = nums[0];\n    long curr_min\
    \ = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n        curr_min =\
    \ std::min(nums[i], curr_min + nums[i]);\n        min_so_far = std::min(min_so_far,\
    \ curr_min);\n    }\n    return min_so_far;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long result = INT_MAX;\n\
    \  int n = nums.size();\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n  \
    \  sum += nums[i];\n    result = std::min(result, sum);\n    if (sum > 0)\n  \
    \    sum = 0;\n  }\n  return result;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = nums[0];\n\
    \  long current_sum = 0;\n  for (long num : nums) {\n    current_sum += num;\n\
    \    if (min_sum > current_sum) {\n      min_sum = current_sum;\n    }\n    if\
    \ (current_sum > 0) {\n      current_sum = 0;\n    }\n  }\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    int n = nums.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  if (nums.size() == 1) return nums[0];\n  long min_sum = nums[0];\n  long\
    \ current_sum = nums[0];\n  for (long i = 1; i < nums.size(); i++) {\n    current_sum\
    \ = std::min(nums[i], current_sum + nums[i]);\n    min_sum = std::min(min_sum,\
    \ current_sum);\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // long minSum = std::numeric_limits<long>::max();\n\
    \    // bool non_positive = true;\n    // for (int i = 0; i < nums.size(); i++)\
    \ {\n    //     if (nums[i] > 0) {\n    //         non_positive = false;\n   \
    \ //         break;\n    //     }\n    // }\n    // if (non_positive) {\n    //\
    \     return -1;\n    // }\n    // // Sliding window technique\n    // int start\
    \ = 0;\n    // int end = 0;\n    // long currSum = 0;\n    // for (int end = 0;\
    \ end < nums.size(); end++) {\n    //     currSum += nums[end];\n    //     if\
    \ (currSum < minSum) {\n    //         minSum = currSum;\n    //     }\n    //\
    \     while (currSum > 0) {\n    //         currSum -= nums[start];\n    //  \
    \       start++;\n    //     }\n    // }\n    // return minSum;\n    long minSum\
    \ = std::numeric_limits<long>::max();\n    long currSum = 0;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n        if(nums.size() ==\
    \ 0)\n                return 0;\n        else if(nums.size() == 1)\n         \
    \       return nums[0];\n        else {\n                std::vector<long> min_sum;\n\
    \                min_sum.push_back(nums[0]);\n                for(int i = 1; i\
    \ < nums.size(); i++) {\n                        if(min_sum[i-1] <= 0)\n     \
    \                           min_sum.push_back(nums[i]);\n                    \
    \    else\n                                min_sum.push_back(min_sum[i-1] + nums[i]);\n\
    \                }\n                long min_val = *std::min_element(min_sum.begin(),\
    \ min_sum.end());\n                return min_val;\n        }\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdlglyl3o: /tmp/tmpdlglyl3o.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long m = INT_MAX;\n  long\
    \ sum = 0;\n  for (long n : nums) {\n    sum += n;\n    m = std::min(m, sum);\n\
    \    if (sum < 0) sum = 0;\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmph6doadhu: /tmp/tmph6doadhu.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n\
    \    long currSum = 0;\n    for (auto num : nums) {\n        currSum += num;\n\
    \        minSum = std::min(minSum, currSum);\n        if (currSum > 0) {\n   \
    \         currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n\
    \    long currentSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n\
    \        currentSum = std::min(currentSum + nums[i], nums[i]);\n        minSum\
    \ = std::min(minSum, currentSum);\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) return\
    \ 0;\n  long minSum = INT_MAX;\n  long currSum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) minSum = currSum;\n\
    \    if (currSum > 0) currSum = 0;\n  }\n  return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = INT_MAX;\n\
    \  long curr_sum = 0;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n\
    \    curr_sum += nums[i];\n    if (curr_sum < min_sum) {\n      min_sum = curr_sum;\n\
    \    }\n    if (curr_sum > 0) {\n      curr_sum = 0;\n    }\n  }\n  return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long currSum = 0;\n \
    \   long minSum = LONG_MAX;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     currSum += nums[i];\n        if (currSum < minSum) {\n            minSum\
    \ = currSum;\n        }\n        if (currSum > 0) {\n            currSum = 0;\n\
    \        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong min = INT_MAX;\n\t\
    long sum = 0;\n\tstd::sort(nums.begin(), nums.end());\n\tfor (long n : nums) {\n\
    \t\tsum += n;\n\t\tif (sum < min) {\n\t\t\tmin = sum;\n\t\t}\n\t}\n\treturn min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsrs7jes2: /tmp/tmpsrs7jes2.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3, 2, -10}))) == (-14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong result = 0;\n\tif\
    \ (nums.size() == 0)\n\t\treturn result;\n\tif (nums.size() == 1)\n\t\treturn\
    \ nums[0];\n\tstd::vector<long> sub_array;\n\tlong min_sum = INT_MAX;\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = i; j < nums.size();\
    \ j++) {\n\t\t\tsum += nums[j];\n\t\t\tif (sum < min_sum)\n\t\t\t\tmin_sum = sum;\n\
    \t\t}\n\t}\n\treturn min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tassert(!nums.empty());\n\
    \tlong res = nums[0];\n\tlong curr = nums[0];\n\tint i = 1;\n\tfor (int i = 1;\
    \ i < nums.size(); i++) {\n\t\tif (curr < 0)\n\t\t\tcurr = nums[i];\n\t\telse\n\
    \t\t\tcurr += nums[i];\n\t\tres = std::min(res, curr);\n\t}\n\treturn res;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmsck8jvo: /tmp/tmpmsck8jvo.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long currSum = 0;\n \
    \   long minSum = INT_MAX;\n    int len = nums.size();\n    int start = 0;\n \
    \   int i = 0;\n    while(i < len) {\n        while(currSum >= 0 && start < len)\
    \ {\n            currSum += nums[start];\n            start++;\n        }\n  \
    \      minSum = std::min(minSum, currSum);\n        currSum -= nums[i];\n    \
    \    i++;\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo73v9bwx: /tmp/tmpo73v9bwx.cpp:27: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (auto it = nums.begin(); it != nums.end(); ++it) {\n \
    \   sum += *it;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum\
    \ > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int n = nums.size();\n\
    \    int min_so_far = INT_MAX;\n    int min_ending_here = 0;\n    for(int i =\
    \ 0; i < n; i++) {\n        min_ending_here = min_ending_here + nums[i];\n   \
    \     if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n\
    \        }\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n\
    \        }\n    }\n    return min_so_far;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb00rc0ru: /tmp/tmpb00rc0ru.cpp:28: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  long min_sum = nums[0];\n  long sum = nums[0];\n  for (int\
    \ i = 1; i < nums.size(); i++) {\n    sum = std::min(nums[i], sum + nums[i]);\n\
    \    min_sum = std::min(min_sum, sum);\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n\
    \    long sum = 0;\n    int start = 0;\n    int end = 0;\n    while(end < nums.size())\
    \ {\n        sum += nums[end];\n        if(sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        while(sum > 0) {\n            sum -= nums[start];\n\
    \            start++;\n        }\n        end++;\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = nums[0];\n\
    \  long currSum = nums[0];\n  for (size_t i = 1; i < nums.size(); i++) {\n   \
    \ currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum = 0;\n  long res\
    \ = INT_MAX;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    res = std::min(res, sum);\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpedvgyufo: /tmp/tmpedvgyufo.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tassert(nums.size() > 0);\n\
    \tlong min_sum = LONG_MAX;\n\tlong curr_sum = 0;\n\tfor (auto i : nums) {\n\t\t\
    curr_sum += i;\n\t\tif (curr_sum < min_sum) {\n\t\t\tmin_sum = curr_sum;\n\t\t\
    }\n\t\tif (curr_sum > 0) {\n\t\t\tcurr_sum = 0;\n\t\t}\n\t}\n\treturn min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = LONG_MAX;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSubArraySum =\
    \ 0;\n    long sum = 0;\n    if(nums.size() == 0)\n        return 0;\n    for(int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum > 0)\n\
    \            sum = 0;\n        if(sum < minSubArraySum)\n            minSubArraySum\
    \ = sum;\n    }\n    return minSubArraySum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpscdsaoli: /tmp/tmpscdsaoli.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = nums[0];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  // TODO\n  long min_sum\
    \ = INT_MAX;\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n   \
    \ sum += nums[i];\n    if (sum < min_sum)\n      min_sum = sum;\n    if (sum >\
    \ 0)\n      sum = 0;\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = INT_MAX;\n\
    \    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n       \
    \ min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long m = nums[0];\n  for\
    \ (auto i = 1; i < nums.size(); i++) {\n    nums[i] = std::min(nums[i], nums[i]\
    \ + nums[i - 1]);\n    m = std::min(m, nums[i]);\n  }\n  return m;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  assert(nums.size() > 0);\n\
    \  long min_sum = INT_MAX;\n  long curr_sum = 0;\n  for (long x : nums) {\n  \
    \  curr_sum += x;\n    min_sum = std::min(min_sum, curr_sum);\n    if (curr_sum\
    \ > 0) {\n      curr_sum = 0;\n    }\n  }\n  return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minimum = nums[0];\n\
    \  for (long i = 0; i < nums.size(); i++) {\n    long sum = 0;\n    for (long\
    \ j = i; j < nums.size(); j++) {\n      sum += nums[j];\n      if (sum < minimum)\
    \ {\n        minimum = sum;\n      }\n    }\n  }\n  return minimum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = *std::min_element(nums.begin(),\
    \ nums.end());\n  long sum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n\
    \    sum += nums[i];\n    if (sum > 0) {\n      sum = 0;\n    }\n    minSum =\
    \ std::min(minSum, sum);\n  }\n  return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9k2pc_u4: /tmp/tmp9k2pc_u4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSoFar = LONG_MAX;\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    minSoFar = std::min(minSoFar, sum);\n    if (sum < 0) {\n      sum = 0;\n\
    \    }\n  }\n  return minSoFar;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplyp2vru9: /tmp/tmplyp2vru9.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min_sum = nums[0];\n\
    \    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n \
    \       curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long a = 0;\n    long\
    \ b = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (long i :\
    \ nums) {\n        sum += i;\n        b = std::min(b, sum - a);\n        a = std::min(a,\
    \ sum);\n    }\n    return b;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_kog_4ly: /tmp/tmp_kog_4ly.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min = 0;\n  for (auto\
    \ x : nums) {\n    if (x < min)\n      min = x;\n  }\n  return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeswg_u4m: /tmp/tmpeswg_u4m.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\t// Write your code here\n\
    \tlong min_sum = INT_MAX;\n\tint n = nums.size();\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tlong current_sum = 0;\n\t\tfor (int j = i; j < n; j++) {\n\t\t\tcurrent_sum\
    \ += nums[j];\n\t\t\tif (current_sum < min_sum)\n\t\t\t\tmin_sum = current_sum;\n\
    \t\t}\n\t}\n\treturn min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = std::numeric_limits<long>::max();\n\
    \  long curr_sum = 0;\n  for (auto num : nums) {\n    curr_sum += num;\n    min_sum\
    \ = std::min(min_sum, curr_sum);\n    if (curr_sum < 0) {\n      curr_sum = 0;\n\
    \    }\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe2h1ghmn: /tmp/tmpe2h1ghmn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int current_sum = nums[0];\n\
    \    int min_sum = nums[0];\n    for(int i = 1; i < nums.size(); i++) {\n    \
    \    current_sum = std::min(nums[i], current_sum + nums[i]);\n        min_sum\
    \ = std::min(min_sum, current_sum);\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpszyzuexj: /tmp/tmpszyzuexj.cpp:22: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int min = INT_MAX;\n\
    \    int current_min = 0;\n    for(int i = 0; i < nums.size(); i++) {\n      \
    \  current_min += nums[i];\n        if(current_min < min) {\n            min =\
    \ current_min;\n        }\n        if(current_min > 0) {\n            current_min\
    \ = 0;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpskq_o0mu: /tmp/tmpskq_o0mu.cpp:27: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    std::sort(nums.begin(),\
    \ nums.end());\n    return nums[0];\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprizimwic: /tmp/tmprizimwic.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long sum=0, min_so_far=INT_MAX;\n\
    \  for(auto i:nums){\n    sum += i;\n    min_so_far = std::min(min_so_far, sum);\n\
    \    if(sum > 0) sum = 0;\n  }\n  return min_so_far;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long current_min = 0;\n\
    \  long current_sum = 0;\n  for (long num : nums) {\n    current_sum += num;\n\
    \    if (current_sum < current_min) {\n      current_min = current_sum;\n    }\n\
    \  }\n  return current_min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp95lq2t79: /tmp/tmp95lq2t79.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  if (nums.size() == 0) {\n\
    \    return 0;\n  }\n  long min = nums[0];\n  long currSum = 0;\n  for (int i\
    \ = 0; i < nums.size(); i++) {\n    currSum += nums[i];\n    if (currSum < min)\
    \ {\n      min = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = LONG_MAX;\n\
    \  long sum = 0;\n  long prev = LONG_MAX;\n  std::sort(nums.begin(), nums.end());\n\
    \  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum <\
    \ minSum) {\n      minSum = sum;\n    }\n    if (prev != LONG_MAX && (sum - prev)\
    \ < minSum) {\n      minSum = sum - prev;\n    }\n    prev = sum;\n  }\n  return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeltjrc3u: /tmp/tmpeltjrc3u.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3, 2, -10}))) == (-14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long i = 0, j = 0, sum\
    \ = 0, min = INT_MAX;\n    while (j < nums.size()) {\n        sum += nums[j++];\n\
    \        while (sum >= 0) {\n            min = std::min(min, sum);\n         \
    \   sum -= nums[i++];\n        }\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbx6cvb2p: /tmp/tmpbx6cvb2p.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> minHeap;\n    for (auto num : nums) {\n\
    \        minHeap.push(num);\n    }\n    long minSum = 0;\n    while (minHeap.size()\
    \ != 1) {\n        long sum = minHeap.top();\n        minHeap.pop();\n       \
    \ sum += minHeap.top();\n        minHeap.pop();\n        minHeap.push(sum);\n\
    \    }\n    return minHeap.top();\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4j07fwwy: /tmp/tmp4j07fwwy.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long min_sum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    min_sum = std::min(min_sum, sum);\n    if (sum > 0) {\n      sum = 0;\n \
    \   }\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    int minimum = nums[0];\n\
    \    int current_sum = 0;\n    for (long num : nums) {\n        current_sum +=\
    \ num;\n        if (current_sum < minimum) {\n            minimum = current_sum;\n\
    \        }\n        if (current_sum > 0) {\n            current_sum = 0;\n   \
    \     }\n    }\n    return minimum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprx1td3fm: /tmp/tmprx1td3fm.cpp:27: int main(): Assertion `candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong minSum = 0;\n\tlong\
    \ currentSum = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tcurrentSum\
    \ += nums[i];\n\t\tif (currentSum < minSum) {\n\t\t\tminSum = currentSum;\n\t\t\
    }\n\t\tif (currentSum > 0) {\n\t\t\tcurrentSum = 0;\n\t\t}\n\t}\n\treturn minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz7yprol_: /tmp/tmpz7yprol_.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n  long minSum = 0;\n  long\
    \ sum    = 0;\n  for (auto it = nums.begin(); it != nums.end(); ++it) {\n    sum\
    \ += *it;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7dzr301a: /tmp/tmp7dzr301a.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n\tlong min = nums[0];\n\t\
    long sum = 0;\n\tint N = nums.size();\n\tfor (int i = 0; i < N; i++) {\n\t\tsum\
    \ = 0;\n\t\tfor (int j = i; j < N; j++) {\n\t\t\tsum += nums[j];\n\t\t\tif (sum\
    \ < min) {\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
