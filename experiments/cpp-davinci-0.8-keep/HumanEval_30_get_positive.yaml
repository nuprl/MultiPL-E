name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
  \ get_positive(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
  \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,\
  \ 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
completions: ["  std::vector<long> v;\n  for (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n    if (*it > 0) {\n      v.push_back(*it);\n    }\n\
    \  }\n  return v;", "    std::vector<long> pos;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            pos.push_back(l[i]);\n        }\n\
    \    }\n    return pos;", "\tstd::vector<long> res;\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn\
    \ res;", "    // Todo: Code it up!\n    std::vector<long> result;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> list;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            list.push_back(l[i]);\n\
    \        }\n    }\n    return list;", "\tstd::vector<long> pos_l;\n\tfor (long\
    \ i=0; i<l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tpos_l.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn pos_l;", "  std::vector<long> result;\n  for (long n : l)\
    \ {\n    if (n > 0) {\n      result.push_back(n);\n    }\n  }\n  return result;",
  "    std::vector<long> r;\n    for (auto x : l)\n        if (x > 0)\n          \
    \  r.push_back(x);\n    return r;", "    std::vector<long> result;\n    for (auto\
    \ n : l) {\n        if (n > 0) {\n            result.push_back(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> x;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            x.push_back(l[i]);\n        }\n    }\n    return\
    \ x;", "    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end();\
    \ it++) {\n        if (*it < 0) {\n            l.erase(it);\n            it--;\n\
    \        }\n    }\n    return l;", "     std::vector<long>v;\n     for(int i=0;i<l.size();i++)\n\
    \     {\n         if(l[i]>0)\n         {\n             v.push_back(l[i]);\n  \
    \       }\n     }\n     return v;", "  std::vector<long> new_l;\n  for (int i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      new_l.push_back(l[i]);\n\
    \  }\n  return new_l;", "\tstd::vector<long> list;\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] >= 0) {\n\t\t\tlist.push_back(l[i]);\n\t\t}\n\t}\n\treturn\
    \ list;", "    std::vector<long> answer;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > 0) {\n            answer.push_back(l[i]);\n        }\n\
    \    }\n    return answer;", "    std::vector<long> res;\n    for (auto& i : l)\
    \ {\n        if (i > 0) {\n            res.push_back(i);\n        }\n    }\n \
    \   return res;", "    int n = l.size();\n    std::vector<long> v;\n    for(int\
    \ i=0;i<n;i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n       \
    \ }\n    }\n    return v;", "\tstd::vector<long>::iterator it = l.begin();\n\t\
    for (; it != l.end(); it++) {\n\t\tif (*it < 0) {\n\t\t\tl.erase(it);\n\t\t\t\
    it--;\n\t\t}\n\t}\n\treturn l;", "    std::vector<long> result;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", '    return {};', "    std::vector<long>\
    \ result;\n    int i = 0;\n    while (i < l.size()) {\n        if (l[i] > 0) {\n\
    \            result.push_back(l[i]);\n        }\n        i++;\n    }\n    return\
    \ result;", "\tstd::vector<long> l_positive;\n\tfor (auto it : l) {\n\t\tif (it\
    \ > 0) {\n\t\t\tl_positive.push_back(it);\n\t\t}\n\t}\n\treturn l_positive;",
  "  // Write your code here.\n  std::vector<long> positive;\n  for(long i : l){\n\
    \    if(i>0){\n      positive.push_back(i);\n    }\n  }\n  return positive;",
  "    std::vector<long> v;\n    for(auto x: l)\n        if(x > 0)\n            v.push_back(x);\n\
    \    return v;", "    std::vector<long> res;\n    int i;\n    for(i=0;i<l.size();i++)\n\
    \    {\n        if(l[i]>0)\n        {\n            res.push_back(l[i]);\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for (auto\
    \ it = l.begin(); it != l.end(); it++) {\n        if (*it > 0) {\n           \
    \ result.push_back(*it);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ lp;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      lp.push_back(l[i]);\n\
    \    }\n  }\n  return lp;", "    std::vector<long> res;\n    for (auto x : l)\
    \ {\n        if (x > 0) {\n            res.push_back(x);\n        }\n    }\n \
    \   return res;", "    std::vector<long> result;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n     \
    \   }\n    }\n    return result;", "    auto it = std::remove_if(l.begin(), l.end(),\
    \ [](long x) { return x < 0; });\n    l.erase(it, l.end());\n    return l;", " \
    \ // Implement here!\n  std::vector<long> l1;\n  for(int i=0;i<l.size();i++){\n\
    \    if(l[i]>0){\n      l1.push_back(l[i]);\n    }\n  }\n  return l1;", "    std::vector<long>\
    \ x;\n    for(auto n: l) {\n        if(n > 0) {\n            x.push_back(n);\n\
    \        }\n    }\n    return x;", "    std::vector<long> vec;\n    for(long i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            vec.push_back(l[i]);\n        }\n    }\n   \
    \ return vec;", "\tstd::vector<long> answer;\n\tfor (auto i : l) {\n\t\tif (i\
    \ >= 0) {\n\t\t\tanswer.push_back(i);\n\t\t}\n\t}\n\treturn answer;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n  \
    \          res.push_back(l[i]);\n        }\n    }\n    return res;", "  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    for (auto i: l) {\n\
    \        if (i > 0) {\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> p;\n    for(auto elem : l) {\n    \
    \    if(elem > 0) {\n            p.push_back(elem);\n        }\n    }\n    return\
    \ p;", "  std::vector<long> temp;\n  for(int i=0;i<l.size();i++){\n      if(l[i]>0){\n\
    \          temp.push_back(l[i]);\n      }\n  }\n  return temp;", "    //write\
    \ your code here\n    std::vector<long> l1;\n    int len = l.size();\n    for(int\
    \ i=0;i<len;i++){\n        if(l[i]>0){\n            l1.push_back(l[i]);\n    \
    \    }\n    }\n    return l1;", "    std::vector<long> l2;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            l2.push_back(l[i]);\n        }\n    }\n    return\
    \ l2;", "  // Your code here\n  std::vector<long> output;\n  for(int i=0;i<l.size();i++){\n\
    \    if(l[i]>0){\n      output.push_back(l[i]);\n    }\n  }\n  return output;",
  "    std::vector<long> result;\n    for (long x : l) {\n        if (x > 0) {\n \
    \           result.push_back(x);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> ret;\n    for (size_t i = 0; i < l.size(); i++) {\n      \
    \  if (l[i] >= 0) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long> ret;\n    for (auto x : l) {\n        if (x >\
    \ 0) {\n            ret.push_back(x);\n        }\n    }\n    return ret;", " \
    \ std::vector<long> out;\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ >= 0) {\n      out.push_back(l[i]);\n    }\n  }\n  return out;", "\tstd::vector<long>\
    \ newlist;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\t\
    newlist.push_back(l[i]);\n\t\t}\n\t}\n\treturn newlist;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n  \
    \          res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> v;\n    // for(int\
    \ i=0;i<l.size();i++){\n    //     if(l[i]>0){\n    //         v.push_back(l[i]);\n\
    \    //     }\n    // }\n    for(auto i:l){\n        if(i>0){\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "\tstd::vector<long> output;\n\tfor (auto i\
    \ : l) {\n\t\tif (i >= 0) {\n\t\t\toutput.push_back(i);\n\t\t}\n\t}\n\treturn\
    \ output;", "    std::vector<long> result;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n     \
    \   }\n    }\n    return result;", "  std::vector<long> pos;\n  for (long i =\
    \ 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n \
    \   }\n  }\n  return pos;", "    // Your code goes here:\n    std::vector<long>\
    \ v;\n    for(long i=0;i<l.size();i++){\n      if(l[i]>0){\n        v.push_back(l[i]);\n\
    \      }\n    }\n    return v;\n  }\n\n// Return the elements of the list in reverse\
    \ order.\n// >>> get_reversed([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [-10,\
    \ 1, 123, 0, 9, 3, -3, 2, -5, 3, 5]\n// >>> get_reversed([1, 2, 3, 4, 5])\n//\
    \ [5, 4, 3, 2, 1]\nstd::vector<long> get_reversed(std::vector<long> l) {\n   \
    \ // Your code goes here:\n    std::vector<long> v;\n    for(long i=l.size()-1;i>=0;i--){\n\
    \      v.push_back(l[i]);\n    }\n    return v;\n  }\n\n// Return the elements\
    \ of the list at odd indices.\n// >>> get_odds([1, 2, 3, 4, 5])\n// [2, 4]\n//\
    \ >>> get_odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// [2, 4, 6, 8, 10]\nstd::vector<long>\
    \ get_odds(std::vector<long> l) {\n    // Your code goes here:\n    std::vector<long>\
    \ v;\n    for(long i=1;i<l.size();i+=2){\n      v.push_back(l[i]);\n    }\n  \
    \  return v;\n  }\n\n// Return the elements of the list at even indices.\n// >>>\
    \ get_evens([1, 2, 3, 4, 5])\n// [1, 3, 5]\n// >>> get_evens([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])\n// [1, 3, 5, 7, 9]\nstd::vector<long>", "    std::vector<long>\
    \ posNums;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            posNums.push_back(l[i]);\n        }\n    }\n    return posNums;",
  "\tstd::vector<long> positive_l;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif\
    \ (l[i] > 0) {\n\t\t\tpositive_l.push_back(l[i]);\n\t\t}\n\t}\n\treturn positive_l;",
  "\tstd::vector<long> list;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > 0) {\n\t\t\tlist.push_back(l[i]);\n\t\t}\n\t}\n\treturn list;", "  std::vector<long>::iterator\
    \ it;\n  std::vector<long> new_list;\n  for (it = l.begin(); it != l.end(); it++)\
    \ {\n    if (*it > 0) {\n      new_list.push_back(*it);\n    }\n  }\n  return\
    \ new_list;", "  // Your code here\n  std::vector<long> v;\n  for(int i=0;i<l.size();i++)\n\
    \  {\n      if(l[i]>0)\n      {\n          v.push_back(l[i]);\n      }\n  }\n\
    \  return v;", "  std::vector<long> newList;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      newList.push_back(l[i]);\n    }\n  }\n  return\
    \ newList;", "    std::vector<long> m;\n    for(int i=0;i<l.size();i++){\n   \
    \     if(l[i]>0){\n            m.push_back(l[i]);\n        }\n    }\n    return\
    \ m;", "    std::vector<long> out;\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > 0) {\n            out.push_back(l[i]);\n        }\n    }\n\
    \    return out;", "    // TODO : Implement Function Here\n    std::vector<long>\
    \ pos;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            pos.push_back(l[i]);\n\
    \        }\n    }\n    return pos;", "  std::vector<long> result;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;", "    int len = l.size();\n    std::vector<long> ans;\n\
    \    for(int i = 0; i < len; i++) {\n        if(l[i] > 0) {\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    return ans;", "\tstd::vector<long> l1;\n\tfor (long i :\
    \ l) {\n\t\tif (i > 0) {\n\t\t\tl1.push_back(i);\n\t\t}\n\t}\n\treturn l1;", " \
    \   std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;", "\tstd::vector<long> pos;\n\tfor (long i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] > 0) {\n\t\t\tpos.push_back(l[i]);\n\t\t}\n\t}\n\treturn\
    \ pos;", "  std::vector<long> output;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    if (l[i] > 0) {\n      output.push_back(l[i]);\n    }\n  }\n  return output;",
  "    std::vector<long> results;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            results.push_back(l[i]);\n        }\n    }\n\
    \    return results;", "  //assert(l.size()>0);\n  std::vector<long> p;\n  for(int\
    \ i=0;i<l.size();i++){\n    if(l[i]>0){\n      p.push_back(l[i]);\n    }\n  }\n\
    \  return p;", "    std::vector<long> positive_numbers;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            positive_numbers.push_back(l[i]);\n\
    \        }\n    }\n    return positive_numbers;", "    std::vector<long> l2;\n\
    \    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            l2.push_back(l[i]);\n\
    \        }\n    }\n    return l2;", "    std::vector<long> result;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    // TODO: implement your solution\
    \ here\n    return {};", "    std::vector<long> res;\n    for (auto ele : l) {\n\
    \        if (ele > 0) {\n            res.push_back(ele);\n        }\n    }\n \
    \   return res;", "  std::vector<long> new_l;\n  for (auto &x : l) {\n    if (x\
    \ > 0) {\n      new_l.push_back(x);\n    }\n  }\n  return new_l;", "  // solution\n\
    \  std::vector<long> result;\n  for (size_t i = 0; i < l.size(); i++) {\n    if\
    \ (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return result;",
  "    std::vector<long> res;\n    for (size_t i = 0; i < l.size(); i++) {\n     \
    \   if (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "\tstd::vector<long> l2;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\t\
    if (l[i] >= 0) {\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t}\n\treturn l2;", "    std::vector<long>\
    \ v;\n    std::vector<long>::iterator it = l.begin();\n    while(it != l.end())\
    \ {\n        if(*it > 0) {\n            v.push_back(*it);\n        }\n       \
    \ it++;\n    }\n    return v;", "    std::vector<long> positive_list;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            positive_list.push_back(l[i]);\n\
    \        }\n    }\n    return positive_list;", "    //std::vector<long>::iterator\
    \ it = l.begin();\n    //for(; it != l.end(); it++)\n    //    if (*it < 0)\n\
    \    //        l.erase(it);\n    l.erase(std::remove_if(l.begin(), l.end(), [](int\
    \ i){return i < 0;}), l.end());\n    return l;", "    std::vector<long> positive;\n\
    \    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;",
  "    std::vector<long> res;\n    for (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n        if (*it > 0) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;", "    std::vector<long> v;\n    for(long i\
    \ = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "\tstd::vector<long> v;\n\tfor (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); i++) {\n\t\tif (*i > 0) {\n\t\t\tv.push_back(*i);\n\
    \t\t}\n\t}\n\treturn v;", "  // create a vector to return.\n  std::vector<long>\
    \ res;\n  // Iterate over the list.\n  for (long i = 0; i < l.size(); i++) {\n\
    \    // add all positive numbers in the vector.\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "\t// assert(l.size()==0);\n\tstd::vector<long> result;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] >= 0) {\n\t\t\tresult.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn result;", "  std::vector<long> list;\n  for (int i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] > 0) {\n      list.push_back(l[i]);\n    }\n\
    \  }\n  return list;", "     std::vector<long> positives;\n     for (auto element\
    \ : l) {\n          if (element > 0) {\n               positives.push_back(element);\n\
    \          }\n     }\n     return positives;", "    std::vector<long> l2;\n  \
    \  for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            l2.push_back(l[i]);\n\
    \        }\n    }\n    return l2;", "  std::vector<long> ans;\n  for (auto x :\
    \ l) {\n    if (x >= 0) {\n      ans.push_back(x);\n    }\n  }\n  return ans;",
  "\tstd::vector<long> out;\n\tfor (auto i : l) {\n\t\tif (i > 0) {\n\t\t\tout.push_back(i);\n\
    \t\t}\n\t}\n\treturn out;", "    std::vector<long> positive_numbers;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            positive_numbers.push_back(l[i]);\n\
    \        }\n    }\n    return positive_numbers;", "  std::vector<long> positive_list;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      positive_list.push_back(l[i]);\n\
    \    }\n  }\n  return positive_list;", "  for(int i=0;i<l.size();i++){\n    if(l[i]<0){\n\
    \      l.erase(l.begin()+i);\n      i--;\n    }\n  }\n  return l;", "    // For\
    \ convenience and to avoid possible errors, we'll use std::vector\n    // You\
    \ can use C array or your own structure.\n    // Since `std::vector<long>` is\
    \ passed by value,\n    // you can do anything with it without worries that it'll\
    \ break something\n    // (like it does in C++/C).\n    std::vector<long> out;\n\
    \    for (auto x : l) {\n        if (x > 0) {\n            out.push_back(x);\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ item : l) {\n        if (item > 0) {\n            result.push_back(item);\n\
    \        }\n    }\n    return result;", "  std::vector<long> v = {};\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;", "    std::vector<long> result;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> new_list;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            new_list.push_back(l[i]);\n\
    \        }\n    }\n    return new_list;", "\tstd::vector<long>v;\n\tfor (auto\
    \ i = l.begin(); i != l.end(); i++) {\n\t\tif (*i >= 0) {\n\t\t\tv.push_back(*i);\n\
    \t\t}\n\t}\n\treturn v;", "  std::vector<long> result;\n  for (auto i : l) {\n\
    \    if (i > 0) {\n      result.push_back(i);\n    }\n  }\n  return result;",
  "  std::vector<long> new_l;\n  for (long element : l) {\n    if (element > 0) {\n\
    \      new_l.push_back(element);\n    }\n  }\n  return new_l;", "    std::vector<long>\
    \ final_v;\n    for(auto i : l) {\n        if(i > 0) {\n            final_v.push_back(i);\n\
    \        }\n    }\n    return final_v;", "  // This function returns all positive\
    \ numbers in the list.\n  std::vector<long> result;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return\
    \ result;", "    std::vector<long> res;\n    for (auto e : l) {\n        if (e\
    \ > 0) {\n            res.push_back(e);\n        }\n    }\n    return res;", " \
    \   std::vector<long> result;\n    int count = 0;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n     \
    \   }\n    }\n    return result;", "  std::vector<long> my_list{};\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      my_list.push_back(l[i]);\n\
    \    }\n  }\n  return my_list;", "    std::vector<long> result;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    //\
    \ Your code here.\n    for(long i = 0; i < l.size(); i++){\n        if(l[i] >=\
    \ 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n \
    \   return result;", "    // std::vector<long> result;\n    // for (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); ++i) {\n    //     if (*i > 0) {\n    //      \
    \   result.push_back(*i);\n    //     }\n    // }\n    // return result;\n   \
    \ return std::vector<long>(l.begin(), l.end());", "\tstd::vector<long> ans;\n\t\
    for (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tans.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn ans;", "  std::vector<long> positive_l;\n  for (auto elem\
    \ : l) {\n    if (elem > 0) {\n      positive_l.push_back(elem);\n    }\n  }\n\
    \  return positive_l;", "\tstd::vector<long> positiveList;\n\tstd::copy_if(l.begin(),\
    \ l.end(), back_inserter(positiveList), [](int i) {return i > 0; });\n\treturn\
    \ positiveList;", "    // write your code here\n    int n = l.size();\n    std::vector<long>\
    \ result;\n    for(int i=0;i<n;i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for (auto\
    \ i: l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;", "   std::vector<long> pos;\n   for(int i=0;i<l.size();i++){\n\
    \       if(l[i]>0){\n           pos.push_back(l[i]);\n       }\n   }\n   return\
    \ pos;", "    long n = l.size();\n    std::vector<long> v1;\n    for(long i=0;i<n;i++)\n\
    \    {\n        if(l[i]>0)\n        {\n            v1.push_back(l[i]);\n     \
    \   }\n    }\n    return v1;", "\tstd::vector<long>::iterator it;\n\tstd::vector<long>\
    \ result;\n\tfor (it = l.begin(); it != l.end(); it++) {\n\t\tif (*it > 0) {\n\
    \t\t\tresult.push_back(*it);\n\t\t}\n\t}\n\treturn result;", "  std::vector<long>\
    \ positiveList;\n  for (long i=0; i<l.size(); i++) {\n    if (l[i] > 0) {\n  \
    \    positiveList.push_back(l[i]);\n    }\n  }\n  return positiveList;", "   \
    \ std::vector<long> new_list;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            new_list.push_back(l[i]);\n        }\n    }\n\
    \    return new_list;", "    std::vector<long> result;\n    for (auto i: l) {\n\
    \        if (i > 0) {\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> res;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n\
    \    }\n    return res;", "    std::vector<long> result;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "\t// Your code here\n\tstd::vector<long>\
    \ res;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<long> lp;\n    for (long i = 0; i\
    \ < l.size(); i++) {\n        if (l[i] > 0)\n            lp.push_back(l[i]);\n\
    \    }\n    return lp;", "    std::vector<long> new_vec;\n    for (long x : l)\
    \ {\n        if (x > 0)\n            new_vec.push_back(x);\n    }\n    return\
    \ new_vec;", "  std::vector<long> out;\n  for (size_t i = 0; i < l.size(); i++)\
    \ {\n    if (l[i] > 0) {\n      out.push_back(l[i]);\n    }\n  }\n  return out;",
  "    std::vector<long> res;\n    for (auto x : l) {\n        if (x > 0) {\n    \
    \        res.push_back(x);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        if (x > 0) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "\t// YOUR CODE HERE\n\tstd::vector<long>\
    \ v;\n\tfor(auto item:l){\n\t\tif(item>0){\n\t\t\tv.push_back(item);\n\t\t}\n\t\
    }\n\treturn v;", "    std::vector<long> ret_vec;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            ret_vec.push_back(l[i]);\n    \
    \    }\n    }\n    return ret_vec;", "    int index = 0;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] >= 0) {\n            l[index] = l[i];\n\
    \            index++;\n        }\n    }\n    for (int i = index; i < l.size();\
    \ i++) {\n        l[i] = 0;\n    }\n    std::vector<long> result(l.begin(), l.begin()\
    \ + index);\n    return result;", "    std::vector<long> positive_values;\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n           \
    \ positive_values.push_back(l[i]);\n        }\n    }\n    return positive_values;",
  "    auto is_positive = [](long x) { return x >= 0; };\n    l.erase(std::remove_if(l.begin(),\
    \ l.end(), is_positive), l.end());\n    return l;", "    // Your code here...\n\
    \    std::vector<long> temp;\n    for(long i = 0; i < l.size(); i++){\n      \
    \  if(l[i] > 0){\n            temp.push_back(l[i]);\n        }\n    }\n    return\
    \ temp;", "    std::vector<long> result;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    auto it=l.begin();\n    while(it!=l.end()){\n        if(*it<0){\n         \
    \   it=l.erase(it);\n        }\n        else{\n            it++;\n        }\n\
    \    }\n    return l;", "  std::vector<long> res;\n  for (long i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n    }\n  }\n  return\
    \ res;", "    std::vector<long> v;\n    for(auto i : l)\n        if(i > 0)\n \
    \           v.push_back(i);\n    return v;", "    std::vector<long>::iterator\
    \ it=l.begin();\n    while(it!=l.end()){\n        if(*it<0){\n            it=l.erase(it);\n\
    \        }\n        else{\n            it++;\n        }\n    }\n    return l;",
  "    std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0) {\n \
    \           result.push_back(i);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> l2;\n    for(long i : l) {\n        if(i > 0) {\n        \
    \    l2.push_back(i);\n        }\n    }\n    return l2;", "    auto it = l.begin();\n\
    \    while (it != l.end()) {\n        if (*it < 0) {\n            it = l.erase(it);\n\
    \        } else {\n            ++it;\n        }\n    }\n    return l;", "    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        if (x > 0) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for (auto\
    \ i: l) {\n        if (i > 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> ret;\n    for (size_t i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> vec1;\n    std::vector<long>\
    \ vec2;\n    std::vector<long> vec3;\n    int x,y;\n    x=0;\n    y=0;\n    while(x\
    \ < l.size()){\n        if(l[x] >= 0){\n            vec1.push_back(l[x]);\n  \
    \      }\n        x++;\n    }\n    return vec1;", "    std::vector<long> result;\n\
    \    for (long num : l) {\n        if (num > 0) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;", "  std::vector<long> ans;\n  for (long\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0) ans.push_back(l[i]);\n  }\n \
    \ return ans;", "    std::vector<long> positive;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push_back(l[i]);\n   \
    \     }\n    }\n    return positive;", "\t\n\tstd::vector<long> new_list;\n\t\
    for(auto it = l.begin(); it != l.end(); it++) {\n\t\tif(*it >= 0) {\n\t\t\tnew_list.push_back(*it);\n\
    \t\t}\n\t}\n\treturn new_list;", "    std::vector<long> res;\n    for (long i\
    \ : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n  \
    \  }\n    return res;", "    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> p;\n    for(auto e: l) {\n        if(e > 0) {\n\
    \            p.push_back(e);\n        }\n    }\n    return p;", "    std::vector<long>\
    \ v;\n    for(auto i : l)\n        if(i > 0)\n            v.push_back(i);\n  \
    \  return v;", "    std::vector<long> vec;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            vec.push_back(l[i]);\n        }\n    }\n   \
    \ return vec;", "    std::vector<long>::iterator p;\n    p = l.begin();\n    while\
    \ (p != l.end()) {\n        if (*p < 0) {\n            p = l.erase(p);\n     \
    \   } else {\n            p++;\n        }\n    }\n    return l;", "  std::vector<long>\
    \ result;\n  for (std::vector<long>::const_iterator it = l.begin(); it != l.end();\
    \ ++it) {\n    if (*it > 0) {\n      result.push_back(*it);\n    }\n  }\n  return\
    \ result;", "    // write your code here\n    std::vector<long> v;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "  std::vector<long> result;\n  for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n      result.push_back(*it);\n\
    \    }\n  }\n  return result;", "\tstd::vector<long> r;\n\tfor (auto it = l.begin();\
    \ it != l.end(); it++) {\n\t\tif (*it > 0) {\n\t\t\tr.push_back(*it);\n\t\t}\n\
    \t}\n\treturn r;", "    std::vector<long> res;\n    for (long x : l) {\n     \
    \   if (x > 0) res.push_back(x);\n    }\n    return res;", "    std::vector<long>\
    \ positive;\n    for (auto i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;", "  std::vector<long> res;\n  for (size_t i = 0;\
    \ i < l.size(); i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n    }\n\
    \  }\n  return res;", "\tstd::vector<long> l1;\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] >= 0) {\n\t\t\tl1.push_back(l[i]);\n\t\t}\n\t}\n\treturn\
    \ l1;", "    std::vector<long> l1;\n    for(long n : l) {\n        if(n >= 0)\n\
    \            l1.push_back(n);\n    }\n    return l1;", "    std::vector<long>\
    \ ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> out;\n    for (long\
    \ x : l) {\n        if (x > 0) {\n            out.push_back(x);\n        }\n \
    \   }\n    return out;", "  std::vector<long> result;\n  for (auto i : l) {\n\
    \    if (i > 0) {\n      result.push_back(i);\n    }\n  }\n  return result;",
  "    // Write your code here.\n    std::vector<long> result;\n    for(long i=0;i<l.size();i++){\n\
    \        if(l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;", "    std::vector<long> res;\n    for (auto &num : l) {\n\
    \        if (num > 0) {\n            res.push_back(num);\n        }\n    }\n \
    \   return res;", "    std::vector<long> new_l;\n    int i = 0;\n    for (auto\
    \ num : l) {\n        if (num > 0) {\n            new_l.push_back(num);\n    \
    \    }\n    }\n    return new_l;", "    std::vector<long> returnVal;\n    for(auto\
    \ elem : l) {\n        if(elem > 0) {\n            returnVal.push_back(elem);\n\
    \        }\n    }\n    return returnVal;", "  std::vector<long> v;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;", "    std::vector<long> positive;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            positive.push_back(l[i]);\n\
    \        }\n    }\n    return positive;", "\tstd::vector<long> positive{};\n\t\
    for (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0)\n\t\t\tpositive.push_back(l[i]);\n\
    \t}\n\treturn positive;", "  std::vector<long> v;\n  for (auto it = l.begin();\
    \ it != l.end(); it++) {\n    if (*it > 0) {\n      v.push_back(*it);\n    }\n\
    \  }\n  return v;", "  for(int i=0;i<l.size();i++){\n    if(l[i]<0){\n      l.erase(l.begin()+i);\n\
    \      i--;\n    }\n  }\n  return l;", "  std::vector<long> output;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      output.push_back(l[i]);\n\
    \  }\n  return output;", "    std::vector<long>::iterator itr = l.begin();\n \
    \   while(itr != l.end()) {\n        if(*itr < 0) {\n            itr = l.erase(itr);\n\
    \        } else {\n            itr++;\n        }\n    }\n    return l;", "\tstd::vector<long>\
    \ result;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0)\n\t\t\tresult.push_back(l[i]);\n\
    \t}\n\treturn result;", "    std::vector<long> result;\n    for (auto& it : l)\
    \ {\n        if (it > 0)\n            result.push_back(it);\n    }\n    return\
    \ result;", "    // start writing your code here\n    std::vector<long> result;\n\
    \    for(auto elem : l){\n        if(elem > 0){\n            result.push_back(elem);\n\
    \        }\n    }\n    return result;", "    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i > 0) {\n            pos.push_back(i);\n        }\n \
    \   }\n    return pos;", "    std::vector<long> pos_vals;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            pos_vals.push_back(l[i]);\n\
    \        }\n    }\n    return pos_vals;", "  \tstd::vector<long> res;\n  \tfor(auto\
    \ x: l) {\n    \tif(x > 0) {\n      \t\tres.push_back(x);\n    \t}\n  \t}\n  \t\
    return res;", "    std::vector<long> ans;\n    std::vector<long>::iterator it\
    \ = l.begin();\n    while(it != l.end()) {\n        if (*it > 0)\n           \
    \ ans.push_back(*it);\n        it++;\n    }\n    return ans;", "\t// Implement\
    \ this function.\n\t// Remove the following line when you're done:\n\tstd::vector<long>\
    \ p_num;\n\tint s = l.size();\n\tfor (int i = 0; i < s; i++) {\n\t\tif (l[i] >=\
    \ 0) {\n\t\t\tp_num.push_back(l[i]);\n\t\t}\n\t}\n\treturn p_num;\n\t// You don't\
    \ need to modify the following line.", "    std::vector<long> vec;\n    for(auto\
    \ elem : l) {\n        if(elem >= 0) {\n            vec.push_back(elem);\n   \
    \     }\n    }\n    return vec;", "    std::vector<long> result;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> list_of_positive;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            list_of_positive.push_back(l[i]);\n\
    \        }\n    }\n    return list_of_positive;", "    std::vector<long> res;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n         \
    \   res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ l_new;\n    for (auto i: l) {\n        if (i > 0) {\n            l_new.push_back(i);\n\
    \        }\n    }\n    return l_new;", "  std::vector<long> v;\n  for (int i =\
    \ 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      v.push_back(l[i]);\n   \
    \ }\n  }\n  return v;", "\tstd::vector<long> positives;\n\tfor (long i : l) {\n\
    \t\tif (i > 0) {\n\t\t\tpositives.push_back(i);\n\t\t}\n\t}\n\treturn positives;",
  "    // Your solution goes here.\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;"]
stop_tokens:
- "\n}"
