name: HumanEval_89_encrypt
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt\
  \ that takes a string as an argument and\n// returns a string encrypted with the\
  \ alphabet being rotated. \n// The alphabet should be rotated in a manner such that\
  \ the letters \n// shift down by two multiplied to two places.\n// For example:\n\
  // encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf')\
  \ returns 'kj'\n// encrypt('et') returns 'ix'\nstd::string encrypt(std::string s)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\"\
  )) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n \
  \   assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) ==\
  \ (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n\
  \    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  ));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
completions: ["  std::string out = \"\";\n  for (int i = 0; i < s.length(); i++) {\n\
    \    char c = s[i];\n    int ix = (int) c - 97;\n    ix = (ix+4)%26;\n    out\
    \ += (char) (ix+97);\n  }\n  return out;", "    // Write your code here\n    std::string\
    \ encryptedString=\"\";\n    for(char ch:s){\n        int ascii=(int)ch;\n   \
    \     ascii+=2*2;\n        char newChar=(char)ascii;\n        encryptedString+=newChar;\n\
    \    }\n    return encryptedString;", "    // Create a map of characters and their\
    \ encrypted characters\n    std::map<char, char> alpha_map;\n    for (char c =\
    \ 'a'; c <= 'z'; c++) {\n        // Set the value of each key to the character\
    \ 2 places after it\n        // When the character is y or z, rotate to a or b.\n\
    \        if (c == 'y') {\n            alpha_map[c] = 'a';\n        } else if (c\
    \ == 'z') {\n            alpha_map[c] = 'b';\n        } else {\n            alpha_map[c]\
    \ = c + 2;\n        }\n    }\n    // Encrypt the string by getting the encrypted\
    \ characters and putting them\n    // into a new string.\n    std::string encrypted\
    \ = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        encrypted += alpha_map[s[i]];\n\
    \    }\n    return encrypted;", "\tstd::string result;\n\tstd::string alpha =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n\tfor (auto c : s) {\n\t\tint index = c - 'a';\n\
    \t\tindex = (index + 2 * 2) % 26;\n\t\tresult += alpha[index];\n\t}\n\treturn\
    \ result;", "    std::string encryptedString = \"\";\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        int asciiValue = s[i];\n        int nextValue =\
    \ asciiValue + 2;\n        int nextTwo = nextValue + 2;\n        if (nextTwo >\
    \ 122) {\n            nextTwo = nextTwo - 122 + 96;\n        }\n        if (nextValue\
    \ > 122) {\n            nextValue = nextValue - 122 + 96;\n        }\n       \
    \ encryptedString += (char)nextValue;\n        encryptedString += (char)nextTwo;\n\
    \    }\n    return encryptedString;", "\tchar abc[27] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\
    \ '};\n\tstd::string ss = \"\";\n\t// for (int i = 0; i < s.length(); i++) {\n\
    \t// \tfor (int j = 0; j < 26; j++) {\n\t// \t\tif (s[i] == abc[j]) {\n\t// \t\
    \t\tif (j < 24) {\n\t// \t\t\t\tss += abc[j+2];\n\t// \t\t\t} else if (j == 24)\
    \ {\n\t// \t\t\t\tss += abc[26];\n\t// \t\t\t} else {\n\t// \t\t\t\tss += abc[0];\n\
    \t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tss += abc[((s[i] - 'a') + 2) % 27];\n\t}\n\treturn ss;", "\tstd::string\
    \ result;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'u') {\n\t\
    \t\tresult += 'w';\n\t\t}\n\t\telse if (s[i] == 'v') {\n\t\t\tresult += 'x';\n\
    \t\t}\n\t\telse if (s[i] == 'w') {\n\t\t\tresult += 'y';\n\t\t}\n\t\telse if (s[i]\
    \ == 'x') {\n\t\t\tresult += 'z';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\t\
    result += 'a';\n\t\t}\n\t\telse if (s[i] == 'z') {\n\t\t\tresult += 'b';\n\t\t\
    }\n\t\telse {\n\t\t\tresult += s[i] + 2;\n\t\t}\n\t}\n\treturn result;", "   \
    \ int n = s.length();\n    for (int i = 0; i < n; i++) {\n        s[i] = char(int(s[i])\
    \ + 4);\n    }\n    return s;", "  std::string r = \"\";\n  for (int i = 0; i\
    \ < s.length(); i++) {\n    r = r + char(s[i] + 2 * 2);\n  }\n  return r;", " \
    \   int i = 0;\n    while(s[i] != '\\0') {\n        s[i] += s[i] % 2 == 0 ? 4\
    \ : 5;\n        i++;\n    }\n    return s;", "    // your code goes here\n   \
    \ int i,j;\n    int size;\n    size = s.size();\n    char *a = new char[size];\n\
    \    strcpy(a,s.c_str());\n    for(i=0;i<size;i++)\n    {\n        if(a[i]=='a'\
    \ || a[i]=='A')\n        {\n            a[i]='y';\n        }\n        else if(a[i]=='b'\
    \ || a[i]=='B')\n        {\n            a[i]='z';\n        }\n        else if(a[i]=='c'\
    \ || a[i]=='C')\n        {\n            a[i]='a';\n        }\n        else if(a[i]=='d'\
    \ || a[i]=='D')\n        {\n            a[i]='b';\n        }\n        else if(a[i]=='e'\
    \ || a[i]=='E')\n        {\n            a[i]='c';\n        }\n        else if(a[i]=='f'\
    \ || a[i]=='F')\n        {\n            a[i]='d';\n        }\n        else if(a[i]=='g'\
    \ || a[i]=='G')\n        {\n            a[i]='e';\n        }\n        else if(a[i]=='h'\
    \ || a[i]=='H')\n        {\n            a[i]='f';\n        }\n        else if(a[i]=='i'\
    \ || a[i]=='I')\n        {\n            a[i]='g';\n        }\n        else if(a[i]=='j'\
    \ || a[i]=='J')\n        {\n            a[i]='h';\n        }\n        else if(a[i]=='k'\
    \ || a[i]=='K')\n        {\n            a[i]='i';\n        }\n        else if(a[i]=='l'\
    \ || a[i]=='L')\n        {\n            a[i]='j';\n        }", "\t// begin writing\
    \ your function here\n\tfor (auto& ch : s) {\n\t\tch = char(int(ch) + 2 * 2);\n\
    \t}\n\treturn s;", "  std::string v;\n  int i = 0;\n  while (i < s.length()) {\n\
    \    if (s[i] == 'z') {\n      v = v + 'b';\n    } else if (s[i] == 'y') {\n \
    \     v = v + 'a';\n    } else {\n      v = v + char(s[i] + 2);\n    }\n    i++;\n\
    \  }\n  return v;", "    std::string encryted_string;\n    for(auto x: s) {\n\
    \        encryted_string.push_back((char)(x+4));\n    }\n    return encryted_string;",
  "  for (int i = 0; i < s.length(); i++) {\n    s[i] = char(int(s[i]) + 2*2);\n \
    \ }\n  return s;", "    std::string newString = \"\";\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        int position = s[i] - 97;\n        int newPosition\
    \ = position + 4;\n        if (newPosition > 25) newPosition -= 26;\n        newString\
    \ += newPosition + 97;\n    }\n    return newString;", "\tfor (int i = 0; i <\
    \ s.length(); i++) {\n\t\tif ((s[i] + 2) > 'z') {\n\t\t\ts[i] = 'a' + (s[i] +\
    \ 2) - 'z' - 1;\n\t\t}\n\t\telse {\n\t\t\ts[i] = s[i] + 2;\n\t\t}\n\t}\n\treturn\
    \ s;", "    int l = s.length();\n    char st[l];\n    for(int i=0;i<l;i++)\n \
    \   {\n        int ch = int(s[i]);\n        if(ch>=65 && ch<=90)\n        {\n\
    \            if(ch<=83)\n            {\n                ch = ch+23;\n        \
    \    }\n            else\n            {\n                ch = ch-3;\n        \
    \    }\n        }\n        else if(ch>=97 && ch<=122)\n        {\n           \
    \ if(ch<=115)\n            {\n                ch = ch+23;\n            }\n   \
    \         else\n            {\n                ch = ch-3;\n            }\n   \
    \     }\n        st[i] = char(ch);\n    }\n    return st;", "\tconst int Rotate\
    \ = 2;\n\tint len = s.length();\n\tstd::string encrypt = \"\";\n\tfor (int i =\
    \ 0; i < len; i++) {\n\t\tencrypt = encrypt + (char)(((s[i] + Rotate - 'a') %\
    \ 26) + 'a');\n\t}\n\treturn encrypt;", "    int len = s.length();\n    int i;\n\
    \    for(i=0;i<len;i++)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n     \
    \   {\n            if(s[i] == 'x')\n            {\n                s[i] = 'a';\n\
    \            }\n            else if(s[i] == 'y')\n            {\n            \
    \    s[i] = 'b';\n            }\n            else\n            {\n           \
    \     s[i] = s[i] + 2;\n            }\n        }\n        else if(s[i] >= 'A'\
    \ && s[i] <= 'Z')\n        {\n            if(s[i] == 'X')\n            {\n   \
    \             s[i] = 'A';\n            }\n            else if(s[i] == 'Y')\n \
    \           {\n                s[i] = 'B';\n            }\n            else\n\
    \            {\n                s[i] = s[i] + 2;\n            }\n        }\n \
    \   }\n    return s;", "    int a = 0;\n    std::string ss = \"\";\n    while\
    \ (a < s.length()) {\n        ss += s[a] + 2 * 2;\n        a++;\n    }\n    return\
    \ ss;", "    for(auto &c : s) {\n        c = 'a' + (c - 'a' + 2*2) % 26;\n   \
    \ }\n    return s;", "  char c = 'a';\n  std::string res = \"\";\n  for (char\
    \ x : s) {\n    res += (char)((x - c + 2 * 2) % 26 + c);\n  }\n  return res;",
  "\tint len = s.length();\n\tfor (int i = 0; i < len; i++) {\n\t\t// subtract number\
    \ of letters in the alphabet to normalize indexes\n\t\ts[i] -= 26;\n\t\t// shift\
    \ down by one letter\n\t\ts[i] += 1;\n\t\t// shift down by two letters\n\t\ts[i]\
    \ += 2;\n\t\t// shift down by another two letters\n\t\ts[i] += 2;\n\t\t// normalize\
    \ indexes again\n\t\ts[i] += 26;\n\t}\n\treturn s;", "  std::string result;\n\
    \  for (int i = 0; i < s.length(); i++) {\n    char temp = s[i];\n    if ((temp\
    \ >= 'a' && temp <= 'z') || (temp >= 'A' && temp <= 'Z')) {\n      temp += 2;\n\
    \      if ((temp >= 'z' && temp <= 'z' + 2) || (temp >= 'Z' && temp <= 'Z' + 2))\
    \ {\n        temp -= 26;\n      }\n    }\n    result += temp;\n  }\n  return result;",
  "    std::string result;\n    for (char c : s) {\n        int n = c - 97;\n    \
    \    n = (n + 2 * 2) % 26;\n        char rotated = (char) (n + 97);\n        result\
    \ += rotated;\n    }\n    return result;", "\tstd::string res;\n\tfor (int i =\
    \ 0; i < s.length(); i++) {\n\t\tif (s[i] == 'z') {\n\t\t\tres += 'b';\n\t\t}\n\
    \t\telse if (s[i] == 'y') {\n\t\t\tres += 'a';\n\t\t}\n\t\telse {\n\t\t\tres +=\
    \ s[i] + 2;\n\t\t}\n\t}\n\treturn res;", "    std::string alphabets = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    std::string::iterator it;\n    int i;\n    for(it = s.begin(); it != s.end();\
    \ it++) {\n        i = 0;\n        while(alphabets[i] != *it) {\n            i++;\n\
    \        }\n        if(i <= 23) {\n            *it = alphabets[i+2];\n       \
    \ } else if(i == 24) {\n            *it = alphabets[0];\n        } else if(i ==\
    \ 25) {\n            *it = alphabets[1];\n        }\n    }\n    return s;", " \
    \   std::string newString = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        char currentChar = s[i];\n        int shiftValue = 2 * (i + 1);\n   \
    \     int newCharValue = ((currentChar - 'a') + shiftValue) % 26;\n        newString\
    \ += (char)(newCharValue + 'a');\n    }\n    return newString;", "     std::string\
    \ result;\n     for (int i = 0; i < s.length(); i++) {\n        if ((s[i] + 2)\
    \ > 'z') {\n            result.push_back((s[i] + 2) - 26);\n        } else {\n\
    \            result.push_back(s[i] + 2);\n        }\n     }\n     return result;",
  "\tif (s.length() == 0) return \"\";\n\tif (s.length() == 1) return s;\n\tstd::string\
    \ res = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint index = (s[i]\
    \ - 'a' + 26 - 2) % 26;\n\t\tres += (char)(index + 'a');\n\t}\n\treturn res;",
  "    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res +=\
    \ (s[i] >= 'a' && s[i] <= 'z') ? s[i] + 2 : (s[i] >= 'A' && s[i] <= 'Z') ? s[i]\
    \ + 2 : s[i];\n    }\n    return res;", "    int len = s.length();\n    int temp\
    \ = 0;\n    for(int i = 0; i < len; i++) {\n        temp = (int)s[i];\n      \
    \  if(temp + 2 <= 122)\n            s[i] = (char)(temp + 2);\n        else if(temp\
    \ + 2 > 122)\n            s[i] = (char)(temp - 24);\n    }\n    return s;", "\t\
    std::string str;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'y')\
    \ {\n\t\t\tstr.push_back('a');\n\t\t}\n\t\telse if (s[i] == 'z') {\n\t\t\tstr.push_back('b');\n\
    \t\t}\n\t\telse {\n\t\t\tstr.push_back(s[i] + 2);\n\t\t}\n\t}\n\treturn str;",
  "   std::string res;\n   for(int i = 0; i < s.length(); i++) {\n      char ch =\
    \ s[i];\n      if(ch >= 'a' && ch <= 'z') {\n         ch = (ch - 'a' + 2) % 26\
    \ + 'a';\n      }\n      else if(ch >= 'A' && ch <= 'Z') {\n         ch = (ch\
    \ - 'A' + 2) % 26 + 'A';\n      }\n      res += ch;\n   }\n   return res;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n \
    \       result += s[i] + 2*2;\n    }\n    return result;", "\tchar newstr[strlen(s.c_str())];\n\
    \tfor (int i = 0; i < strlen(s.c_str()); i++) {\n\t\tnewstr[i] = s[i] + 2 * 2;\n\
    \t}\n\treturn newstr;", "    std::string enc;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        enc.push_back(s[i] + 2*2);\n    }\n    return enc;", "  int\
    \ len = s.length();\n  for(int i = 0; i < len; i++) {\n    if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n      int k = s[i] - 'a';\n      k += (k <= 'x' - 'a') ? 2 :\
    \ -24;\n      s[i] = 'a' + k;\n    }\n  }\n  return s;", "  char letters[26] =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n  std::string temp\
    \ = \"\";\n  for (unsigned int i = 0; i < s.length(); i++) {\n    for (unsigned\
    \ int j = 0; j < 26; j++) {\n      if (s[i] == letters[j]) {\n        // std::cout\
    \ << letters[j] << std::endl;\n        temp += letters[(j + 26 - 4) % 26];\n \
    \     }\n    }\n  }\n  return temp;", "    int len = s.length();\n    int iter\
    \ = 0;\n    while(iter < len) {\n        int temp = (int)s[iter];\n        temp\
    \ = temp - 97;\n        temp = temp * 2;\n        temp = temp + 97;\n        s[iter]\
    \ = (char)temp;\n        iter++;\n    }\n    return s;", "  char n[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \  std::string encrypted;\n  for(int i = 0; i < s.length(); i++) {\n    char x\
    \ = s[i];\n    for(int j = 0; j < 26; j++) {\n      if(x == n[j]) {\n        if(j\
    \ < 24) {\n          encrypted += n[j+2];\n        }\n        else if(j == 24)\
    \ {\n          encrypted += n[0];\n        }\n        else if(j == 25) {\n   \
    \       encrypted += n[1];\n        }\n      }\n    }\n  }\n  return encrypted;",
  "    int i;\n    std::string encrypted_string;\n    for(i=0;i<s.length();i++)\n\
    \    {\n    \tint ascii_value = (int)s[i];\n    \tascii_value = ascii_value +\
    \ 2*2;\n    \tchar new_char = (char)ascii_value;\n    \tencrypted_string = encrypted_string\
    \ + new_char;\n    }\n    return encrypted_string;", "    for(int i = 0; i < s.length();\
    \ i++) {\n        int ascii = (int)s[i];\n        if(ascii >= 97 && ascii <= 120)\
    \ {\n            s[i] = (char)(ascii + 2);\n        } else if(ascii >= 121 &&\
    \ ascii <= 122) {\n            s[i] = (char)(ascii - 24);\n        }\n    }\n\
    \    return s;", "\tstd::string result;\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tchar c = s[i];\n\t\tint y = c;\n\t\ty = y - 2 * 2;\n\t\tresult += y;\n\
    \t}\n\treturn result;", "    std::vector<char> chVec(s.begin(), s.end());\n  \
    \  std::stringstream res;\n    for (char c : chVec) {\n        res << (char)(c\
    \ + 4);\n    }\n    return res.str();", "\tstd::string result;\n\tstd::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tint p = alphabet.find(s[i]);\n\t\tresult += alphabet[(p + 2) * 2];\n\
    \t}\n\treturn result;", "\tstd::string out = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tchar toChange = s[i];\n\t\tint numToAdd = 2 * 2;\n\t\tchar orig\
    \ = toChange;\n\t\tif (orig >= 'a' && orig <= 'z') {\n\t\t\tif (orig + numToAdd\
    \ > 'z') {\n\t\t\t\tnumToAdd = numToAdd - ('z' - orig) - 1;\n\t\t\t\ttoChange\
    \ = 'a';\n\t\t\t}\n\t\t\ttoChange = toChange + numToAdd;\n\t\t}\n\t\telse if (orig\
    \ >= 'A' && orig <= 'Z') {\n\t\t\tif (orig + numToAdd > 'Z') {\n\t\t\t\tnumToAdd\
    \ = numToAdd - ('Z' - orig) - 1;\n\t\t\t\ttoChange = 'A';\n\t\t\t}\n\t\t\ttoChange\
    \ = toChange + numToAdd;\n\t\t}\n\t\tout = out + toChange;\n\t}\n\treturn out;",
  "    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s[i];\n        result += char(int(c) + 2*2);\n    }\n    return result;",
  "    char* l = (char*)malloc(sizeof(char) * s.length());\n    for (int i = 0; i\
    \ < s.length(); i++) {\n        char x = s[i];\n        int y = x + 4;\n     \
    \   l[i] = y;\n    }\n    std::string str(l);\n    return str;", "\tstd::string\
    \ encrypted;\n\tfor (unsigned int i = 0; i < s.length(); i++) {\n\t\tencrypted\
    \ += s[i] + 2;\n\t}\n\treturn encrypted;", "   std::string enc;\n   for (int i\
    \ = 0; i < s.length(); i++) {\n      enc.push_back(s[i] + 2 * 2);\n   }\n   return\
    \ enc;", "\tstd::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstd::string\
    \ encrypted = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tfor (int j\
    \ = 0; j < alphabet.length(); j++) {\n\t\t\tif (s[i] == alphabet[j]) {\n\t\t\t\
    \tif (j < 24) {\n\t\t\t\t\tencrypted += alphabet[j + 2];\n\t\t\t\t}\n\t\t\t\t\
    else if (j == 24) {\n\t\t\t\t\tencrypted += alphabet[0];\n\t\t\t\t}\n\t\t\t\t\
    else if (j == 25) {\n\t\t\t\t\tencrypted += alphabet[1];\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn encrypted;", "    int length = s.length();\n    char c;\n\
    \    std::string encryptedString;\n    for(int i = 0; i < length; i++) {\n   \
    \     c = s[i];\n        c += 2*2;\n        encryptedString += c;\n    }\n   \
    \ return encryptedString;", "    std::string a = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    std::string r = \"\";\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     int index = 0;\n        while (s[i] != a[index]) {\n            index++;\n\
    \        }\n        r += a[(index + (2 * 2)) % 26];\n    }\n    return r;", " \
    \   std::string ret;\n    for (char c : s) {\n        ret += (char)(c + 4);\n\
    \    }\n    return ret;", "    for(int i = 0; i < s.length(); i++) {\n       \
    \ s[i] = s[i] + 2 * 2;\n    }\n    return s;", "    for(auto& i : s)\n       \
    \ i = (i + 4) % 26 + 'a';\n    return s;", '    // TODO: write your code here',
  "\tstd::string t = s;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tt[i] = s[i]\
    \ + 4;\n\t}\n\treturn t;", "\tstd::string encrypted;\n\tstd::string alphabet=\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n\tint length = s.length();\n\tchar placeholder;\n\
    \tfor (int i = 0; i < length; i++) {\n\t\tplaceholder = s[i];\n\t\tint index =\
    \ alphabet.find(placeholder);\n\t\tint new_index = index + 4;\n\t\tchar character\
    \ = alphabet[new_index];\n\t\tencrypted += character;\n\t}\n\treturn encrypted;",
  "    // Put your code here\n    return \"\";", '', "  int i = 0;\n  std::string\
    \ result;\n  while (i < s.length()) {\n    char j = s[i];\n    if (j >= 'a' &&\
    \ j <= 'y') {\n      j = j + 2;\n    } else if (j == 'z') {\n      j = 'b';\n\
    \    } else if (j == 'Z') {\n      j = 'B';\n    } else if (j == ' ') {\n    \
    \  j = ' ';\n    } else if (j >= 'A' && j <= 'Y') {\n      j = j + 2;\n    }\n\
    \    result = result + j;\n    i++;\n  }\n  return result;", "  for (int i = 0;\
    \ i < s.length(); i++) {\n    s[i] = s[i] + 2;\n  }\n  return s;", "  // enter\
    \ your code here\n  std::string abc = \"abcdefghijklmnopqrstuvwxyz\";\n  std::string\
    \ encrypted = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] ==\
    \ 'z') {\n      encrypted += 'b';\n    } else if (s[i] == 'y') {\n      encrypted\
    \ += 'a';\n    } else {\n      encrypted += abc[abc.find(s[i]) + 2];\n    }\n\
    \  }\n  return encrypted;", "  std::string result;\n  for (auto letter : s) {\n\
    \    if (letter == 'z') {\n      result += 'b';\n    } else if (letter == 'y')\
    \ {\n      result += 'a';\n    } else {\n      result += letter + 2;\n    }\n\
    \  }\n  return result;", "\t// TODO implement this function\n\tfor (int i = 0;\
    \ i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] +=\
    \ 2;\n\t\t\tif (s[i] > 'z') {\n\t\t\t\ts[i] -= 26;\n\t\t\t}\n\t\t}\n\t\telse if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] += 2;\n\t\t\tif (s[i] > 'Z') {\n\t\
    \t\t\ts[i] -= 26;\n\t\t\t}\n\t\t}\n\t}\n\treturn s;", '', "\t//enter code here",
  "    char c;\n    for(int i=0; i<s.length(); i++) {\n        int ascii = (int)s[i];\n\
    \        ascii += 4;\n        c = (char)ascii;\n        s[i] = c;\n    }\n   \
    \ return s;", "    std::string encrypted = \"\";\n    for (char& c : s) {\n  \
    \      if (c == 'z') {\n            encrypted += 'b';\n        } else if (c ==\
    \ 'y') {\n            encrypted += 'a';\n        } else {\n            encrypted\
    \ += c + 2;\n        }\n    }\n    return encrypted;", "    int len = s.length();\n\
    \    int i = 0;\n    while(i < len) {\n        int asc = s[i];\n        if (asc\
    \ >= 'a' && asc <= 'z') {\n            asc += 2;\n            if (asc > 'z') {\n\
    \                asc = asc - 'z' + 'a' - 1;\n            }\n        }\n      \
    \  s[i] = asc;\n        i++;\n    }\n    return s;", "    std::string enc = \"\
    \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'z') {\n\
    \            enc += 'b';\n        } else if (s[i] == 'y') {\n            enc +=\
    \ 'a';\n        } else {\n            enc += s[i] + 2;\n        }\n    }\n   \
    \ return enc;", "  std::vector<char> vowels{'a', 'e', 'i', 'o', 'u'};\n  std::vector<char>\
    \ alphabets(26);\n  std::vector<char> alphabets2(26);\n  for (int i = 0; i < 26;\
    \ i++) {\n    alphabets[i] = 'a' + i;\n    alphabets2[i] = 'a' + i;\n  }\n  int\
    \ index = 0;\n  while (index < 5) {\n    int i = 0;\n    while (i < 26) {\n  \
    \    if (alphabets[i] == vowels[index]) {\n        break;\n      }\n      i++;\n\
    \    }\n    if (i + 2 >= 26) {\n      i = (i + 2) % 26;\n    } else {\n      i\
    \ = i + 2;\n    }\n    while (i < 26) {\n      char temp = alphabets[i];\n   \
    \   alphabets[i] = vowels[index];\n      vowels[index] = temp;\n      i = i +\
    \ 2;\n      if (i >= 26) {\n        i = i % 26;\n      }\n    }\n    index++;\n\
    \  }\n  std::string newString;\n  for (int i = 0; i < s.length(); i++) {\n   \
    \ for (int j = 0; j < 26; j++) {\n      if (s[i] == alphabets2[j]) {\n       \
    \ newString += alphabets[j];\n        break;\n      }\n    }\n  }\n  return newString;",
  "\t// TODO: Write code to solve the problem here\n\tstd::string s1 = \"\";\n\tfor\
    \ (int i = 0; i < s.length(); i++) {\n\t\tint c = int(s[i]) + 2 * 2;\n\t\ts1 +=\
    \ char(c);\n\t}\n\treturn s1;", "    int len = s.length();\n    for(int i = 0;\
    \ i < len; i++) {\n        s[i] = (((s[i] - 97) * 2) % 26) + 97;\n    }\n    return\
    \ s;", "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] < 'c') {\n            result += s[i] + 23;\n        } else\
    \ {\n            result += s[i] - 3;\n        }\n    }\n    return result;", " \
    \   for(auto& c : s) {\n        c += (c-96)*2;\n        if(c > 122) {\n      \
    \      c -= 26;\n        }\n    }\n    return s;", "\tstd::string result = \"\"\
    ;\n\tfor (char& c : s) {\n\t\tresult += c + 2 * 2;\n\t}\n\treturn result;", " \
    \   std::string out = \"\";\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    int ascii = (int)s[i];\n        if (ascii < 97) {\n            ascii = ascii\
    \ + 32;\n        }\n        out += (char)((ascii + 4) % 26 + 97);\n    }\n   \
    \ return out;", "    std::string encrypted = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s[i];\n        // if (s[i] == 'z') {\n        //  \
    \   encrypted += 'b';\n        // } else if (s[i] == 'y') {\n        //     encrypted\
    \ += 'a';\n        // } else {\n        //     encrypted += (char)(s[i] + 2);\n\
    \        // }\n        if (c == 'z') {\n            encrypted += 'b';\n      \
    \  } else if (c == 'y') {\n            encrypted += 'a';\n        } else {\n \
    \           encrypted += (char)(c + 2);\n        }\n    }\n    return encrypted;",
  "    std::string e = \"\";\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ if (s[i] == 'x') {\n            e.push_back('a');\n        } else if (s[i] ==\
    \ 'y') {\n            e.push_back('b');\n        } else if (s[i] == 'z') {\n \
    \           e.push_back('c');\n        } else {\n            e.push_back(s[i]\
    \ + 2);\n        }\n    }\n    return e;", "\t\n\tint alfa[26] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};\n\
    \n\tfor(int i = 0; i < s.length(); i++) {\n\t\tint ascii = int(s[i]);\n\t\tif(ascii\
    \ >= 65 && ascii <= 90) {\n\t\t\tint index = s[i] - 65;\n\t\t\tint offset = (index\
    \ + (2*(i+1))) % 26;\n\t\t\ts[i] = char(65 + offset);\n\t\t}\n\t\telse if(ascii\
    \ >= 97 && ascii <= 122) {\n\t\t\tint index = s[i] - 97;\n\t\t\tint offset = (index\
    \ + (2*(i+1))) % 26;\n\t\t\ts[i] = char(97 + offset);\n\t\t}\n\t}\n\treturn s;",
  "    // First we need to create the character map, i.e. map each character in the\
    \ string\n    // to its character code.\n    std::map<char, char> charMap;\n \
    \   std::vector<char> encrypt;\n    for (char c = 'a'; c <= 'z'; c++) {\n    \
    \    // The shifting is done by adding two * 2 * number of places to the character.\n\
    \        // If we have multiple wraps, then we have to use modulus as a helper\
    \ method.\n        int numberOfPlaces = (((int)c) + 2*2) % 'z';\n        charMap[c]\
    \ = (char)numberOfPlaces;\n    }\n    for (char c : s) {\n        if (charMap.find(c)\
    \ != charMap.end()) {\n            encrypt.push_back(charMap[c]);\n        }\n\
    \    }\n    return std::string(encrypt.begin(), encrypt.end());", "  int i, len;\n\
    \  std::string p;\n  len = s.length();\n  p.resize(len);\n  for(i=0; i<len; i++)\
    \ {\n    if(s[i] > 'y') {\n      p[i] = (s[i] - 'z') + 'b';\n    } else if(s[i]\
    \ > 'u') {\n      p[i] = (s[i] - 'v') + 'x';\n    } else if(s[i] > 'q') {\n  \
    \    p[i] = (s[i] - 'r') + 't';\n    } else if(s[i] > 'm') {\n      p[i] = (s[i]\
    \ - 'n') + 'p';\n    } else if(s[i] > 'i') {\n      p[i] = (s[i] - 'j') + 'l';\n\
    \    } else if(s[i] > 'e') {\n      p[i] = (s[i] - 'f') + 'h';\n    } else if(s[i]\
    \ > 'a') {\n      p[i] = (s[i] - 'b') + 'd';\n    } else {\n      p[i] = (s[i]\
    \ - 'a') + 'c';\n    }\n  }\n  return p;", "\tstd::string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tstd::string alphabet_caps = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstd::string\
    \ result;\n\tint index;\n\tint index_caps;\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tresult += ' ';\n\t\t}\n\t\telse if (s[i]\
    \ == '.') {\n\t\t\tresult += '.';\n\t\t}\n\t\telse if (s[i] == '\\'') {\n\t\t\t\
    result += '\\'';\n\t\t}\n\t\telse if (s[i] == ',') {\n\t\t\tresult += ',';\n\t\
    \t}\n\t\telse if (s[i] == '!') {\n\t\t\tresult += '!';\n\t\t}\n\t\telse if (s[i]\
    \ == '?') {\n\t\t\tresult += '?';\n\t\t}\n\t\telse if (s[i] == '\\n') {\n\t\t\t\
    result += '\\n';\n\t\t}\n\t\telse if (s[i] == '-') {\n\t\t\tresult += '-';\n\t\
    \t}\n\t\telse if (s[i] == '*') {\n\t\t\tresult += '*';\n\t\t}\n\t\telse if (s[i]\
    \ == ';') {\n\t\t\tresult += ';';\n\t\t}\n\t\telse if (s[i] == '+') {\n\t\t\t\
    result += '+';\n\t\t}\n\t\telse if (s[i] == ':') {\n\t\t\tresult += ':';\n\t\t\
    }\n\t\telse if (s[i] == '=') {\n\t\t\tresult += '=';\n\t\t}\n\t\telse if (s[i]\
    \ == ')') {\n\t\t\tresult += ')';\n\t\t}\n\t\telse if (s[i] == '(') {\n\t\t\t\
    result += '(';\n\t\t}\n\t\telse", "    int len = s.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        s[i] += 2 * 2;\n    }\n    return s;", "\tint len\
    \ = s.length();\n\tchar result[len];\n\tfor (int i = 0; i < len; i++) {\n\t\t\
    result[i] = (char)(((int)s[i] - 97 + 2) % 26 + 97);\n\t}\n\treturn std::string(result);",
  "  for (int i = 0; i < s.length(); i++) {\n    s[i] += 4;\n  }\n  return s;", '    return
    "";', "\tstd::string ret;\n\tret.resize(s.size());\n\tfor (size_t i = 0; i < s.size();\
    \ i++) {\n\t\tret[i] = s[i] + 2 * 2;\n\t}\n\treturn ret;", "\tstd::string ans;\n\
    \tfor (int i = 0; i < s.length(); i++) {\n\t\tchar curr = (char)((int)s[i] + 2*i);\n\
    \t\tif ((int)curr > 122) {\n\t\t\tcurr = (char)((int)curr - 26);\n\t\t}\n\t\t\
    ans += curr;\n\t}\n\treturn ans;", "    std::string result;\n    for (char letter\
    \ : s) {\n        if (isalpha(letter)) {\n            int encryption = letter\
    \ - 'a';\n            encryption += 2;\n            encryption *= 2;\n       \
    \     encryption %= 26;\n            encryption += 'a';\n            char encryptedLetter\
    \ = static_cast<char>(encryption);\n            result += encryptedLetter;\n \
    \       } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;", "\tstd::string res = \"\";\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif (s[i] == 'y') {\n\t\t\tres += 'a';\n\t\t}\n\t\telse if (s[i] == 'z')\
    \ {\n\t\t\tres += 'b';\n\t\t}\n\t\telse {\n\t\t\tres += (s[i] + 2);\n\t\t}\n\t\
    }\n\treturn res;", "  char x;\n  std::string res=\"\";\n  for(int i=0;i<s.length();i++){\n\
    \    x=s[i];\n    res=res+((x-97+4)%26)+97;\n  }\n  return res;", "    int len\
    \ = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i] >= 'a' &&\
    \ s[i] <= 'y')\n            s[i] += 2;\n        else if(s[i] == 'z')\n       \
    \     s[i] = 'b';\n        else if(s[i] == 'Z')\n            s[i] = 'B';\n   \
    \ }\n    return s;", "    std::string answer;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        answer += (char)(((int)s[i] - 97 + 2*2) % 26 + 97);\n    }\n\
    \    return answer;", "  std::string end = \"\";\n  int x = 2;\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    //int x = (s[i] - 2*i) % 26;\n    if ((s[i] +\
    \ 2*i) > 122) {\n      int y = s[i] + 2*i - 122;\n      int z = 96 + y;\n    \
    \  end += z;\n    }\n    else\n      end += s[i] + 2*i;\n  }\n  return end;",
  "  std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  for (int i = 0; i <\
    \ s.length(); i++) {\n    for (int j = 0; j < alphabet.length(); j++) {\n    \
    \  if (s[i] == alphabet[j]) {\n        if (j + 2 * 2 >= alphabet.length()) {\n\
    \          s[i] = alphabet[j + 2 * 2 - alphabet.length()];\n        } else {\n\
    \          s[i] = alphabet[j + 2 * 2];\n        }\n      }\n    }\n  }\n  return\
    \ s;", "  // Code here\n  std::string encrypted = \"\";\n  std::vector<int> vec;\n\
    \  for(auto a : s) {\n    int test = a - 97;\n    // std::cout << \"This is the\
    \ value: \" << test << std::endl;\n    int newVal = test + 4;\n    if(newVal >=\
    \ 26) {\n      newVal = newVal - 26;\n    }\n    vec.push_back(newVal);\n  }\n\
    \  for(auto a : vec) {\n    char newVal = (char)a + 97;\n    encrypted += newVal;\n\
    \  }\n  return encrypted;", "    for(auto &c : s) {\n        c = (c >= 'a' &&\
    \ c <= 'z') ? ((c-'a'+2)%26 + 'a') : c;\n    }\n    return s;", "\tchar *p;\n\t\
    p=&s[0];\n\tint i=0;\n\twhile(*p!='\\0')\n\t{\n\t\tchar c = *p + 2*i;\n\t\tif(c>'z')\n\
    \t\t{\n\t\t\tc=c-26;\n\t\t}\n\t\t*p=c;\n\t\ti++;\n\t\tp++;\n\t}\n\treturn s;",
  "\tstd::string result;\n\tstd::map<char, char> map1 = {\n\t\t{'a', 'c'},\n\t\t{'b',\
    \ 'd'},\n\t\t{'c', 'e'},\n\t\t{'d', 'f'},\n\t\t{'e', 'g'},\n\t\t{'f', 'h'},\n\t\
    \t{'g', 'i'},\n\t\t{'h', 'j'},\n\t\t{'i', 'k'},\n\t\t{'j', 'l'},\n\t\t{'k', 'm'},\n\
    \t\t{'l', 'n'},\n\t\t{'m', 'o'},\n\t\t{'n', 'p'},\n\t\t{'o', 'q'},\n\t\t{'p',\
    \ 'r'},\n\t\t{'q', 's'},\n\t\t{'r', 't'},\n\t\t{'s', 'u'},\n\t\t{'t', 'v'},\n\t\
    \t{'u', 'w'},\n\t\t{'v', 'x'},\n\t\t{'w', 'y'},\n\t\t{'x', 'z'},\n\t\t{'y', 'a'},\n\
    \t\t{'z', 'b'}\n\t};\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult.push_back(map1[s[i]]);\n\
    \t}\n\treturn result;", "\tstd::string newstr = s;\n\tfor (size_t i = 0; i < s.length();\
    \ i++) {\n\t\tnewstr[i] += 4;\n\t}\n\treturn newstr;", "\tstring  res = \"\";\n\
    \tfor (auto e : s) {\n\t\tres += char((int(e) - 97 + 2) % 26 + 97);\n\t}\n\treturn\
    \ res;", "    int l = s.length();\n    char arr[l];\n    int j = 0;\n    for(int\
    \ i = 0; i < l; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n           \
    \ if(s[i] + 2 <= 'z') {\n                arr[j] = s[i] + 2;\n            } else\
    \ {\n                int i = s[i] - 1;\n                char c = i - 24;\n   \
    \             arr[j] = c;\n            }\n            j++;\n        }\n    }\n\
    \    return arr;", "\tfor (int i = 0; i < s.length(); i++) {\n\t\tswitch (s[i])\
    \ {\n\t\tcase 'a':\n\t\t\ts[i] = 'c';\n\t\t\tbreak;\n\t\tcase 'b':\n\t\t\ts[i]\
    \ = 'd';\n\t\t\tbreak;\n\t\tcase 'c':\n\t\t\ts[i] = 'e';\n\t\t\tbreak;\n\t\tcase\
    \ 'd':\n\t\t\ts[i] = 'f';\n\t\t\tbreak;\n\t\tcase 'e':\n\t\t\ts[i] = 'g';\n\t\t\
    \tbreak;\n\t\tcase 'f':\n\t\t\ts[i] = 'h';\n\t\t\tbreak;\n\t\tcase 'g':\n\t\t\t\
    s[i] = 'i';\n\t\t\tbreak;\n\t\tcase 'h':\n\t\t\ts[i] = 'j';\n\t\t\tbreak;\n\t\t\
    case 'i':\n\t\t\ts[i] = 'k';\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\ts[i] = 'l';\n\
    \t\t\tbreak;\n\t\tcase 'k':\n\t\t\ts[i] = 'm';\n\t\t\tbreak;\n\t\tcase 'l':\n\t\
    \t\ts[i] = 'n';\n\t\t\tbreak;\n\t\tcase 'm':\n\t\t\ts[i] = 'o';\n\t\t\tbreak;\n\
    \t\tcase 'n':\n\t\t\ts[i] = 'p';\n\t\t\tbreak;\n\t\tcase 'o':\n\t\t\ts[i] = 'q';\n\
    \t\t\tbreak;\n\t\tcase 'p':\n\t\t\ts[i] = 'r';\n\t\t\tbreak;\n\t\tcase 'q':\n\t\
    \t\ts[i] = 's';\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\ts[i] = 't';\n\t\t\tbreak;\n\
    \t\tcase 's':\n\t\t\ts[i] = 'u';\n\t\t\tbreak;\n\t\tcase 't':\n\t", "    std::string\
    \ t = s;\n    int len = s.length();\n    for(int i = 0; i < len; i++) {\n    \
    \    t[i] += 2*(i+1);\n    }\n    return t;", "    for(int i = 0; i < s.length();\
    \ i++) {\n        s[i] = s[i] + 4;\n    }\n    return s;", "    std::string r\
    \ = \"\";\n    for (unsigned int i = 0; i < s.length(); i++) {\n        r += (char)((int)s[i]\
    \ + 2 * 2);\n    }\n    return r;", "    std::string encrypted_string;\n    for\
    \ (auto c : s) {\n        char c_encrypted = c;\n        c_encrypted += 2;\n \
    \       c_encrypted += 2;\n        encrypted_string += c_encrypted;\n    }\n \
    \   return encrypted_string;", "  std::string newString = \"\";\n  for (int i\
    \ = 0; i < s.length(); i++) {\n    newString += (char)(s[i] + 4);\n  }\n  return\
    \ newString;", '    // Write your code here', "    std::string e;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        int t = s[i] - 97;\n        t = (t +\
    \ 4) % 26;\n        e += char(t + 97);\n    }\n    return e;", "    std::string\
    \ s_new = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (s_new[i]\
    \ == 'z') {\n            s_new[i] = 'b';\n        } else if (s_new[i] == 'y')\
    \ {\n            s_new[i] = 'a';\n        } else {\n            s_new[i] = (char)((int)s_new[i]\
    \ + 2);\n        }\n    }\n    return s_new;", "    std::string result;\n    std::string\
    \ encryptDictionary = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (int i = 0; i < s.length(); i++) {\n        result += encryptDictionary[(s[i]\
    \ - 97) * 2 + 26];\n    }\n    return result;", "\t// add code here\n\tstd::string\
    \ rot_str = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif ((s[i] + 2)\
    \ <= 122) {\n\t\t\trot_str = rot_str + (char)(s[i] + 2);\n\t\t}\n\t\telse {\n\t\
    \t\tint ascii_val = (s[i] + 2) - 122;\n\t\t\trot_str = rot_str + (char)(96 + ascii_val);\n\
    \t\t}\n\t}\n\treturn rot_str;", "  //Use the std::rotate function to shift the\
    \ letters in the string.\n  std::rotate(s.begin(), s.begin() + 2, s.end());\n\
    \  return s;", "\t", "    std::string mystring=s;\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        char shift = mystring[i]+2*2;\n        //std::cout<<shift<<std::endl;\n\
    \        if(shift>122)\n        {\n            shift-=26;\n        }\n       \
    \ mystring[i]=shift;\n    }\n    return mystring;", "    int n = s.length();\n\
    \    int shift;\n    char temp;\n    std::string res;\n    std::vector<int> mapping(n);\n\
    \    int multiply = 2;\n    for (int i = 0; i < n; i++) {\n        mapping[i]\
    \ = s[i] - 97;\n    }\n    for (int i = 0; i < n; i++) {\n        temp = s[i];\n\
    \        shift = mapping[i] * multiply;\n        shift = (shift % 26) + 'a';\n\
    \        res.push_back(shift);\n    }\n    return res;", "\t//std::cout << s <<\
    \ std::endl;\n\tstd::string res = \"\";\n\tfor (char c : s) {\n\t\tres += (c +\
    \ 2*2);\n\t}\n\treturn res;", "\tstd::string result = \"\";\n\tchar start = 'a';\n\
    \tint size = s.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif ((s[i] - start)\
    \ <= 24) {\n\t\t\tresult += s[i] + 4;\n\t\t}\n\t\telse {\n\t\t\tresult += s[i]\
    \ - 24;\n\t\t}\n\t}\n\treturn result;", "    int len = s.length();\n    char array[len];\n\
    \    strcpy(array, s.c_str());\n    for (int i = 0; i < len; i++) {\n        if\
    \ (array[i] == 'a' || array[i] == 'b') {\n            array[i] = 'd';\n      \
    \  } else if (array[i] == 'c' || array[i] == 'd') {\n            array[i] = 'f';\n\
    \        } else if (array[i] == 'e' || array[i] == 'f') {\n            array[i]\
    \ = 'h';\n        } else if (array[i] == 'g' || array[i] == 'h') {\n         \
    \   array[i] = 'j';\n        } else if (array[i] == 'i' || array[i] == 'j') {\n\
    \            array[i] = 'l';\n        } else if (array[i] == 'k' || array[i] ==\
    \ 'l') {\n            array[i] = 'n';\n        } else if (array[i] == 'm' || array[i]\
    \ == 'n') {\n            array[i] = 'p';\n        } else if (array[i] == 'o' ||\
    \ array[i] == 'p') {\n            array[i] = 'r';\n        } else if (array[i]\
    \ == 'q' || array[i] == 'r') {\n            array[i] = 't';\n        } else if\
    \ (array[i] == 's' || array[i] == 't') {\n            array[i] = 'v';\n      \
    \  } else if (array[i] == 'u' || array[i] == 'v') {\n            array[i] = 'x';\n\
    \        } else if (array[i] == 'w' || array[i] == 'x') {\n            array[i]\
    \ = 'z';\n        } else if (array[i] == 'y' || array[i] == 'z') {\n         \
    \   array[i] = 'b';\n        }\n    }\n    std::string result(array);\n    return\
    \ result;", "    int i = 0;\n    int z = 2;\n    std::string temp = \"\";\n  \
    \  std::string x = \"\";\n    for (i = 0; i < s.length(); i++) {\n        x =\
    \ s[i];\n        int ascii = static_cast<int>(x[0]);\n        ascii = ascii +\
    \ z;\n        if (s[i] == 'z') {\n            ascii = ascii - 26;\n        }\n\
    \        else if (s[i] == 'y') {\n            ascii = ascii - 26;\n        }\n\
    \        else if (s[i] == 'x') {\n            ascii = ascii - 26;\n        }\n\
    \        temp = temp + static_cast<char>(ascii);\n    }\n    return temp;", "\n\
    return s;", "    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            s[i] += 2;\n            if(!isalpha(s[i])) {\n              \
    \  s[i] -= 26;\n            }\n        }\n    }\n    return s;", "    for(int\
    \ i = 0; i < s.length(); i++) {\n        s[i] = (char)(((s[i] - 'a') + 2*2) %\
    \ 26 + 'a');\n    }\n    return s;", "    // Function should return the encrypted\
    \ string\n    std::string res;\n    for(char c: s){\n        int rotate = (c -\
    \ 'a')*2;\n        c = ((c - 'a') + rotate)%26 + 'a';\n        res.push_back(c);\n\
    \    }\n    return res;", "    std::string str;\n    for(int i=0; i<s.length();\
    \ i++) {\n        if(s[i] + 2*2 > 'z') {\n            str.push_back(s[i] + 2*2\
    \ - 26);\n        } else {\n            str.push_back(s[i] + 2*2);\n        }\n\
    \    }\n    return str;", "\tstd::string result = \"\";\n\tfor (char &c : s) {\n\
    \t\tif (c >= 'd' && c <= 'z') {\n\t\t\tresult += (c - 3);\n\t\t}\n\t\telse if\
    \ (c == 'a') {\n\t\t\tresult += 'x';\n\t\t}\n\t\telse if (c == 'b') {\n\t\t\t\
    result += 'y';\n\t\t}\n\t\telse if (c == 'c') {\n\t\t\tresult += 'z';\n\t\t}\n\
    \t\telse {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;", "  std::string\
    \ result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    result += (s[i]\
    \ + 4);\n  }\n  return result;", "\t//your code goes here\n\tstd::string str =\
    \ \"\";\n\tstd::cout << (char)(str[0] - 1);\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] >= 'A' && s[i] <= 'W') {\n\t\t\tstr += (char)(s[i] + 2);\n\
    \t\t}\n\t\telse if (s[i] >= 'X' && s[i] <= 'Z') {\n\t\t\tstr += (char)(s[i] -\
    \ 22);\n\t\t}\n\t\telse if (s[i] >= 'a' && s[i] <= 'w') {\n\t\t\tstr += (char)(s[i]\
    \ + 2);\n\t\t}\n\t\telse if (s[i] >= 'x' && s[i] <= 'z') {\n\t\t\tstr += (char)(s[i]\
    \ - 22);\n\t\t}\n\t\telse {\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\treturn str;", " \
    \ std::string result;\n  for (char c : s) {\n    if (c == 'z') {\n      result\
    \ += 'b';\n    } else if (c == 'y') {\n      result += 'a';\n    } else {\n  \
    \    result += c + 2;\n    }\n  }\n  return result;", "    // your code here\n\
    \    std::string ans = \"\";\n    std::string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n    for (char c : s) {\n        int index = c - 'a';\n        ans += new_alphabet[index];\n\
    \    }\n    return ans;", "    std::string encrypted_s = \"\";\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (s[i] + 2 * 2 > 122) {\n           \
    \ encrypted_s += s[i] + 2 * 2 - 26;\n        } else {\n            encrypted_s\
    \ += s[i] + 2 * 2;\n        }\n    }\n    return encrypted_s;", "    std::string\
    \ ret=\"\";\n    char arr[26]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \    for(int i=0;i<s.length();i++){\n        for(int j=0;j<26;j++){\n        \
    \    if(s[i]==arr[j]){\n                ret+=arr[j+2];\n            }\n      \
    \  }\n    }\n    return ret;", "    std::string toReturn = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        toReturn += (s[i] + 2 * 2);\n    }\n\
    \    return toReturn;", "    char ch;\n    int i,n=s.length();\n    for(i=0;i<n;i++)\n\
    \    {\n        ch=s[i];\n        int x=ch-'a';\n        int b=x%2;\n        if(b==0)\n\
    \        {\n            x=x+2;\n            if(x<=25)\n            {\n       \
    \         ch=x+'a';\n                s[i]=ch;\n            }\n            else\n\
    \            {\n                x=x-26;\n                ch=x+'a';\n         \
    \       s[i]=ch;\n            }\n        }\n        else\n        {\n        \
    \    x=x+2;\n            if(x<=25)\n            {\n                ch=x+'a';\n\
    \                s[i]=ch;\n            }\n            else\n            {\n  \
    \              x=x-26;\n                ch=x+'a';\n                s[i]=ch;\n\
    \            }\n        }\n    }\n    return s;", "    std::string result;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 4;\n    }\n\
    \    return result;", "    std::string encrypted_string = \"\";\n    int string_size\
    \ = s.size();\n    for(int i = 0; i < string_size; i++) {\n        encrypted_string\
    \ += (char)(s[i] + 2 * 2);\n    }\n    return encrypted_string;", "   std::string\
    \ encrypted = \"\";\n   for (int i = 0; i < s.length(); i++) {\n      encrypted\
    \ += s[i] + 2 * 2;\n   }\n   return encrypted;", "  std::string res=\"\";\n  for(int\
    \ i=0;i<s.length();i++){\n    char ch=s[i];\n    int a=(ch - 'a')*2;\n    if(a>25){\n\
    \      a=a-25;\n    }\n    res+=(a+'a');\n  }\n  return res;", "  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i]\
    \ += 2;\n      if (s[i] > 'z') {\n        s[i] -= 26;\n      }\n    }\n  }\n \
    \ return s;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tchar letter = s[i];\n\t\tint shift = (letter - 'a') - 2;\n\t\tshift\
    \ = ((shift % 26) + 26) % 26;\n\t\tresult += ('a' + shift);\n\t}\n\treturn result;",
  "\tstd::transform(s.begin(), s.end(), s.begin(), [](unsigned char c) -> char {\n\
    \t\t\treturn (char)(c + 2*2);\n\t\t\t});\n\treturn s;", "    std::string result;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        int mod = (s[i] - 'a') %\
    \ 2 == 0 ? 2 : 1;\n        result += (s[i] - 'a' + mod * 2) % 26 + 'a';\n    }\n\
    \    return result;", "  std::string encrypted_string;\n  for (char &c : s) {\n\
    \    int ascii_value = c;\n    if (ascii_value >= 97 && ascii_value <= 119) {\n\
    \      ascii_value += 2;\n    } else if (ascii_value >= 120 && ascii_value <=\
    \ 122) {\n      ascii_value -= 24;\n    }\n    char new_letter = ascii_value;\n\
    \    encrypted_string += new_letter;\n  }\n  return encrypted_string;", "    int\
    \ i;\n    char ch;\n    for(i=0;s[i]!='\\0';i++)\n    {\n        ch=s[i];\n  \
    \      if(ch>='a' && ch<='z')\n        {\n            ch=ch+2;\n            if(ch>'z')\n\
    \            {\n                ch=ch-'z'+'a'-1;\n            }\n            s[i]=ch;\n\
    \        }\n        else if(ch>='A' && ch<='Z')\n        {\n            ch=ch+2;\n\
    \            if(ch>'Z')\n            {\n                ch=ch-'Z'+'A'-1;\n   \
    \         }\n            s[i]=ch;\n        }\n    }\n    return s;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result =\
    \ result + char(int(s[i]) + 2 * 2);\n    }\n    return result;", "\tint len =\
    \ s.length();\n\tchar arr[len];\n\tfor (int i = 0; i < len; i++) {\n\t\tarr[i]\
    \ = s[i];\n\t}\n\tfor (int i = 0; i < len; i++) {\n\t\tarr[i] = arr[i] + ((2 *\
    \ 2) % 26);\n\t\tif (arr[i] > 122) {\n\t\t\tarr[i] = arr[i] - 26;\n\t\t}\n\t}\n\
    \tstd::string ret = \"\";\n\tfor (int i = 0; i < len; i++) {\n\t\tret = ret +\
    \ arr[i];\n\t}\n\treturn ret;", "    for(int i = 0; i < s.length(); i++) {\n \
    \       s[i] += 4;\n    }\n    return s;", "    std::string str = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        int current = s[i];\n        if(current\
    \ >= 97 && current <= 109) {\n            str += (current + 2);\n        } else\
    \ if(current >= 110 && current <= 122) {\n            str += (current - 24);\n\
    \        } else if(current >= 65 && current <= 77) {\n            str += (current\
    \ + 2);\n        } else if(current >= 78 && current <= 90) {\n            str\
    \ += (current - 24);\n        } else {\n            str += current;\n        }\n\
    \    }\n    return str;", "\tint i,len=s.length();\n\tchar c;\n\tfor(i=0;i<len;i++)\n\
    \t{\n\t\tif(s[i]>=65 && s[i]<=67)\n\t\t{\n\t\t\tc=s[i]+23;\n\t\t\ts[i]=c;\n\t\t\
    }\n\t\telse if(s[i]>=97 && s[i]<=99)\n\t\t{\n\t\t\tc=s[i]+23;\n\t\t\ts[i]=c;\n\
    \t\t}\n\t\telse if(s[i]>=68 && s[i]<=90)\n\t\t{\n\t\t\tc=s[i]+3;\n\t\t\ts[i]=c;\n\
    \t\t}\n\t\telse if(s[i]>=100 && s[i]<=122)\n\t\t{\n\t\t\tc=s[i]+3;\n\t\t\ts[i]=c;\n\
    \t\t}\n\t}\n\treturn s;", "  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n      if (s[i] + 2 > 'z') {\n        s[i] -= 24;\n\
    \      } else {\n        s[i] += 2;\n      }\n    }\n  }\n  return s;", "    //\
    \ create a map for encryption \n    std::map<char, char> encr_map;\n    // alphabet\
    \ size \n    int alph_size = 26;\n    // fill the map with the first two characters\
    \ \n    // this will set a pattern that will be followed\n    // in the encryption\
    \ process \n    char temp = 'a';\n    char temp_i = 'c';\n    int counter = 0;\n\
    \    while(counter < alph_size) {\n        encr_map[temp] = temp_i;\n        counter++;\n\
    \        temp++;\n        temp_i++;\n    }\n    // to handle the last two letters\
    \ \n    encr_map['y'] = 'a';\n    encr_map['z'] = 'b';\n    // create another\
    \ map to store the encrypted values \n    std::map<char, char> encr_temp;\n  \
    \  // loop through the string \n    // this will get me the values that I need\
    \ \n    // to encrypt \n    for(auto x : s) {\n        // std::cout << x << \"\
    \ \" << encr_map[x] << std::endl;\n        encr_temp[x] = encr_map[x];\n    }\n\
    \    // create a string to store the encrypted string \n    std::string encr_str;\n\
    \    // loop through the map values \n    for(auto x : encr_temp) {\n        encr_str\
    \ += x.second;\n    }\n    return encr_str;", "\tchar alphabet[] = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tstd::string code = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t\
    int x = s[i] - 97;\n\t\tint y = x - 2;\n\t\tif (y < 0) {\n\t\t\tint z = 26 + y;\n\
    \t\t\tcode = code + alphabet[z];\n\t\t}\n\t\telse {\n\t\t\tcode = code + alphabet[y];\n\
    \t\t}\n\t}\n\treturn code;", "    // Declare alphabet string\n    std::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    // Initialize empty string\n\
    \    std::string encrypted_s = \"\";\n    // loop through the characters of string\n\
    \    for (int i = 0; i < s.length(); i++) {\n        // get the index of the character\
    \ in the alphabet\n        int index = alphabet.find(s[i]);\n        // get the\
    \ two places shifted alphabet character\n        char shifted_char = alphabet[(index\
    \ + (2 * 2)) % 26];\n        // append the character to the encrypted string\n\
    \        encrypted_s += shifted_char;\n    }\n    // return the encrypted string\n\
    \    return encrypted_s;", "\tconst int kShift = 2 * 2;\n\tchar kLastLetter =\
    \ 'z';\n\tfor (char & ch : s) {\n\t\tif (ch == 'z') {\n\t\t\tch = 'a';\n\t\t}\n\
    \t\telse if (ch == 'z' - 1) {\n\t\t\tch = 'a' + 1;\n\t\t}\n\t\telse {\n\t\t\t\
    ch += kShift;\n\t\t}\n\t}\n\treturn s;", "  std::string encrypted = \"\";\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'z') {\n      encrypted\
    \ += 'b';\n    } else if (s[i] == 'y') {\n      encrypted += 'a';\n    } else\
    \ {\n      int num = s[i] + 2;\n      char new_char = num;\n      encrypted +=\
    \ new_char;\n    }\n  }\n  return encrypted;", "  std::string new_string;\n  std::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  for (int i = 0; i < s.length();\
    \ i++) {\n    new_string += alphabet[(alphabet.find(s[i])+4)%26];\n  }\n  return\
    \ new_string;", "   int len = s.length();\n   std::string res;\n   for(int i =\
    \ 0; i < len; i++) {\n      int ch = s[i] - 'a';\n      ch = (ch + 2) % 26;\n\
    \      res += ch + 'a';\n   }\n   return res;", "\tstd::string alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tint shift_amt = -1;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n\t\t\tshift_amt = s[i] - 'a';\n\t\t\ts[i] = alpha[(shift_amt\
    \ + alpha.length() - 2 * (shift_amt - (shift_amt % 2))) % alpha.length()];\n\t\
    \t}\n\t}\n\treturn s;", "    // rotate the alphabet by two multiplied to two places\n\
    \    // e.g. a - z --> c - b\n    // the characters are rotated in a circular\
    \ manner and hence\n    // we can simply add 2 to 'a' and 'z' to get their respective\n\
    \    // integers and then add 2 to the integer of the current char\n    // and\
    \ convert it back to char.\n    // if the char is an uppercase letter, we add\
    \ 2 to 'A' and 'Z'\n    // to get their respective integers and then add 2 to\
    \ the integer\n    // of the current char and convert it back to char.\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = (s[i] - 'a' + 2) % 26 + 'a';\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = (s[i] - 'A' + 2) % 26 + 'A';\n\
    \        }\n    }\n    return s;", "    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'z') {\n            s[i] = 'b';\n        } else if(s[i] ==\
    \ 'y') {\n            s[i] = 'a';\n        } else {\n            s[i] += 2;\n\
    \        }\n    }\n    return s;", "\tstd::string encryptedString = \"\";\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tencryptedString += char(s[i] + 2 *\
    \ 2);\n\t}\n\treturn encryptedString;", "    std::string res=\"\";\n    int i;\n\
    \    for(i=0;i<s.length();i++)\n    {\n        if(s[i]=='a'||s[i]=='b'||s[i]=='c'||s[i]=='d'||s[i]=='e'||s[i]=='f'||s[i]=='g'||s[i]=='h'||s[i]=='i'||s[i]=='j'||s[i]=='k'||s[i]=='l'||s[i]=='m'||s[i]=='n'||s[i]=='o'||s[i]=='p'||s[i]=='q'||s[i]=='r'||s[i]=='s'||s[i]=='t'||s[i]=='u'||s[i]=='v'||s[i]=='w'||s[i]=='x'||s[i]=='y'||s[i]=='z')\n\
    \        {\n            if(s[i]=='a'||s[i]=='b')\n            {\n            \
    \    res+=s[i]+24;\n            }\n            else if(s[i]=='c'||s[i]=='d')\n\
    \            {\n                res+=s[i]+22;\n            }\n            else\
    \ if(s[i]=='e'||s[i]=='f')\n            {\n                res+=s[i]+20;\n   \
    \         }\n            else if(s[i]=='g'||s[i]=='h')\n            {\n      \
    \          res+=s[i]+18;\n            }\n            else if(s[i]=='i'||s[i]=='j')\n\
    \            {\n                res+=s[i]+16;\n            }\n            else\
    \ if(s[i]=='k'||s[i]=='l')\n            {\n                res+=s[i]+14;\n   \
    \         }\n            else if(s[i]=='m'", "    // std::cout << s << std::endl;\n\
    \    char c = 'a';\n    for (int i = 0; i < s.length(); i++) {\n        c = s[i];\n\
    \        c += 2 * 2;\n        if (c > 'z') {\n            c -= 26;\n        }\n\
    \        s[i] = c;\n    }\n    return s;", "    int size = s.size();\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < size; i++) {\n        ans += s[i] + 2 *\
    \ 2;\n    }\n    return ans;", "  std::string sb;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    int x = (int)s[i];\n    if (x < 97) {\n      x += 32;\n    }\n \
    \   x += 4;\n    if (x > 122) {\n      x -= 26;\n    }\n    sb += (char)x;\n \
    \ }\n  return sb;", "    std::string res = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        res += (char)(s[i] + 4);\n    }\n    return res;", "\tstd::string\
    \ result;\n\tfor (auto x : s) {\n\t\tresult += std::string(1, (x + 2 * 2 - 97)\
    \ % 26 + 97);\n\t}\n\treturn result;", "    // TODO: Implement\n    int i=0;\n\
    \    char temp;\n    std::string str;\n    while(s[i]!='\\0'){\n        temp=s[i];\n\
    \        s[i]=s[i]+2;\n        if(s[i]>122)\n            s[i]=s[i]-26;\n     \
    \   str=str+s[i];\n        i++;\n    }\n    return str;", "    std::string result;\n\
    \    int size = s.size();\n    for(int i = 0; i < size; i++) {\n        if(s[i]\
    \ == 'z') {\n            result = result + 'b';\n        }\n        else if(s[i]\
    \ == 'y') {\n            result = result + 'a';\n        }\n        else {\n \
    \           char ch = s[i];\n            ch = ch + 2;\n            result = result\
    \ + ch;\n        }\n    }\n    return result;", "\tstd::string result = \"\";\n\
    \tstd::string rot2 = \"cdefghijklmnopqrstuvwxyzab\";\n\tfor (char &c : s) {\n\t\
    \tresult += rot2[c - 'a'];\n\t}\n\treturn result;", "    // write your code here\n\
    \    std::string ss = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string result\
    \ = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++) {\n   \
    \     result += ss[(int(s[i]) + 4) - 97];\n    }\n    return result;", "    std::string\
    \ str = \"\";\n    std::string abc = \"abcdefghijklmnopqrstuvwxyz\";\n    int\
    \ pos;\n    for(int i = 0; i < s.length(); i++) {\n        pos = abc.find(s[i]);\n\
    \        if(pos == 25) {\n            str += abc[1];\n        } else if(pos ==\
    \ 24) {\n            str += abc[0];\n        } else {\n            str += abc[pos\
    \ + 2];\n        }\n    }\n    return str;", "    \n    char alphabet[] = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\n    std::map<char, char> map;\n    for (int i = 0; i < strlen(alphabet);\
    \ i++) {\n        if (i >= 0 && i < 2) {\n            map[alphabet[i]] = alphabet[strlen(alphabet)\
    \ - 2 + i];\n        } else {\n            map[alphabet[i]] = alphabet[i - 2];\n\
    \        }\n    }\n\n    std::string newStr = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        newStr += map[s[i]];\n    }\n\n    return newStr;", "  std::vector<char>\
    \ alphabets = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \  std::string str = \"\";\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i]\
    \ == 'c')\n      str += 'e';\n    else if(s[i] == 'd')\n      str += 'f';\n  \
    \  else if(s[i] == 'e')\n      str += 'g';\n    else if(s[i] == 'f')\n      str\
    \ += 'h';\n    else if(s[i] == 'g')\n      str += 'i';\n    else if(s[i] == 'h')\n\
    \      str += 'j';\n    else if(s[i] == 'i')\n      str += 'k';\n    else if(s[i]\
    \ == 'j')\n      str += 'l';\n    else if(s[i] == 'k')\n      str += 'm';\n  \
    \  else if(s[i] == 'l')\n      str += 'n';\n    else if(s[i] == 'm')\n      str\
    \ += 'o';\n    else if(s[i] == 'n')\n      str += 'p';\n    else if(s[i] == 'o')\n\
    \      str += 'q';\n    else if(s[i] == 'p')\n      str += 'r';\n    else if(s[i]\
    \ == 'q')\n      str += 's';\n    else if(s[i] == 'r')\n      str += 't';\n  \
    \  else if(s[i] == 's')\n      str += 'u';\n    else if(s[i] == 't')\n      str\
    \ += 'v';\n    else if(s[i] == 'u')\n      str += 'w';\n    else if(s[i] == 'v')\n\
    \      str += 'x';\n    else if(s[i] == 'w')\n      str += '", "    std::string\
    \ new_string = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        new_string\
    \ += (char)((((int)s[i] - 97) + 2 * 2) % 26 + 97);\n    }\n    return new_string;",
  "\tstd::string temp;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n\t\t\tint temp = s[i] - 'a';\n\t\t\ttemp = (temp + 2)\
    \ % 26;\n\t\t\ts[i] = temp + 'a';\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n\t\t\tint temp = s[i] - 'A';\n\t\t\ttemp = (temp + 2) % 26;\n\t\t\t\
    s[i] = temp + 'A';\n\t\t}\n\t}\n\treturn s;", "    std::string str=\"\";\n   \
    \ for(int i=0;i<s.length();i++)\n    {\n        str=str+(char)(s[i]+2*2);\n  \
    \  }\n    return str;", "    for(int i = 0; i < s.length(); i++) {\n        s[i]\
    \ += 2*2;\n    }\n    return s;", "\tint length = s.length();\n\tstd::string ret\
    \ = \"\";\n\tfor (int i = 0; i < length; i++) {\n\t\tchar c = s[i];\n\t\tif (c\
    \ == ' ') {\n\t\t\tret += c;\n\t\t}\n\t\telse {\n\t\t\tif (c == 'z') {\n\t\t\t\
    \tc = 'b';\n\t\t\t}\n\t\t\telse if (c == 'y') {\n\t\t\t\tc = 'a';\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\tc += 2;\n\t\t\t}\n\t\t\tret += c;\n\t\t}\n\t}\n\treturn ret;",
  "    // Write your code here!\n    int size = s.size();\n    for(int i = 0; i <\
    \ size; i++){\n        s[i] = s[i] + 4;\n    }\n    return s;", "  char *ptr =\
    \ &s[0];\n  while (*ptr != '\\0')\n  {\n    *ptr = *ptr + 2;\n    ptr++;\n  }\n\
    \  return s;", "    char alp[26]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \    std::string output=\"\";\n    for(int i=0;i<s.length();i++){\n        int\
    \ p=0;\n        while(alp[p]!=s[i]){\n            p++;\n        }\n        if(p==25){\n\
    \            output+=alp[p];\n        }\n        else if(p==24){\n           \
    \ output+=alp[p+1];\n        }\n        else{\n            output+=alp[p+2];\n\
    \        }\n    }\n    return output;", "    string res = \"\";\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        int temp = s[i] - 2*2;\n        if(temp\
    \ < 'a') {\n            temp = temp + 26;\n        }\n        res += (char)temp;\n\
    \    }\n    return res;", "\tconst char alphabet [27] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\\\
    0'};\n\tstd::string sNew=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tint place\
    \ = s[i] - 'a';\n\t\tsNew += alphabet[(place + 2*2)%26];\n\t}\n\treturn sNew;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult\
    \ += (s[i] + 2) % 256;\n\t}\n\treturn result;", "  int i;\n  for(i=0;i<s.length();i++)\n\
    \  {\n     s[i]=s[i]+2*2;\n  }\n  return s;", '', "\treturn \"\";", "    std::string\
    \ cipher;\n    int n = s.length(); \n    for (int i = 0; i < n; i++) {\n     \
    \   char ch = s[i];\n        char c;\n        if (ch >= 'x') {\n            c\
    \ = 'a' + (ch - 'x');\n        } else if (ch >= 'v') {\n            c = 'c' +\
    \ (ch - 'v');\n        } else if (ch >= 't') {\n            c = 'e' + (ch - 't');\n\
    \        } else if (ch >= 'j') {\n            c = 'g' + (ch - 'j');\n        }\
    \ else if (ch >= 'h') {\n            c = 'i' + (ch - 'h');\n        } else if\
    \ (ch >= 'f') {\n            c = 'k' + (ch - 'f');\n        } else if (ch >= 'd')\
    \ {\n            c = 'm' + (ch - 'd');\n        } else if (ch >= 'b') {\n    \
    \        c = 'o' + (ch - 'b');\n        } else if (ch >= 'z') {\n            c\
    \ = 'q' + (ch - 'z');\n        } else if (ch >= 'x') {\n            c = 's' +\
    \ (ch - 'x');\n        } else if (ch >= 'v') {\n            c = 'u' + (ch - 'v');\n\
    \        } else if (ch >= 't') {\n            c = 'w' + (ch - 't');\n        }\
    \ else if (ch >= 'r') {\n            c = 'y' + (ch - 'r');\n        } else if\
    \ (ch >= 'p') {\n            c = 'a' + (ch - 'p');\n        } else if (ch >= 'n')\
    \ {\n            c = 'c' + (ch - 'n');\n        } else if (ch >= 'l') {\n    \
    \        c = 'e' + (ch - 'l');\n        } else if (ch >= 'j') {\n            c\
    \ = 'g' + (ch - 'j');\n        } else if (ch >= 'h') {\n            c = 'i' +\
    \ (ch - 'h", "\tstd::string res;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\
    \tint temp = s[i] - 'a';\n\t\ttemp = (temp + 26 - 2) % 26;\n\t\tres.push_back(temp\
    \ + 'a');\n\t}\n\treturn res;", "    std::string newString = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        int newChar = s[i] + 2 * 2;\n       \
    \ newString = newString + (char)newChar;\n    }\n    return newString;", "   \
    \ int len = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i] ==\
    \ 'z') s[i] = 'b';\n        else if(s[i] == 'y') s[i] = 'a';\n        else if(s[i]\
    \ == 'Z') s[i] = 'B';\n        else if(s[i] == 'Y') s[i] = 'A';\n        else\
    \ s[i] += 2;\n    }\n    return s;", "\tfor (int i = 0; i < s.length(); i++) {\n\
    \t\ts[i] += 4;\n\t}\n\treturn s;", "\tstd::string result = \"\";\n\tfor (int i\
    \ = 0; i < s.length(); i++) {\n\t\tint offset = 2 * i;\n\t\tresult.push_back((char)((int)s[i]\
    \ + offset));\n\t}\n\treturn result;"]
stop_tokens:
- "\n}"
