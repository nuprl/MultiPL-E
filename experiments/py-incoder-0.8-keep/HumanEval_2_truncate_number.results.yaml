language: py
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == int(number):\n        return int(number)\n\
    \    elif number % 1:\n        return number\n    return int(number) - 1\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wl6pbkv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0wl6pbkv.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0wl6pbkv.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    else:\n     \
    \   integer, decimal = math.modf(number)\n        decimal = int(decimal)\n   \
    \     return number - decimal\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6i95g9p.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe6i95g9p.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe6i95g9p.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpe6i95g9p.py\"\
    , line 13, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmzfq3vs.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvmzfq3vs.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvmzfq3vs.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvmzfq3vs.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number < 0 else number\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9tiee4wo.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp9tiee4wo.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp9tiee4wo.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        raise ValueError(\"Cannot\
    \ truncate number below 1.0: {}\".format(number))\n    remaining_number = number\
    \ - int(number)\n    decimals = remaining_number - int(remaining_number)\n   \
    \ return decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * 100) / 100\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppz300m88.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmppz300m88.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmppz300m88.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmppz300m88.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * 100) / 100\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.ceil(number) if number > 0 else\
    \ math.floor(number)\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpokrqnmg8.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpokrqnmg8.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpokrqnmg8.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpokrqnmg8.py\"\
    , line 10, in truncate_number\n    return number - math.ceil(number) if number\
    \ > 0 else math.floor(number)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = int(number - integer)\n\
    \    if decimal == 0:\n        return integer\n    return number - integer - decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3tpoqyg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpb3tpoqyg.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpb3tpoqyg.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.floor(number) if number > 0 else math.ceil(number)\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ciylnwo.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8ciylnwo.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8ciylnwo.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8ciylnwo.py\"\
    , line 10, in truncate_number\n    return math.floor(number) if number > 0 else\
    \ math.ceil(number)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - (number * int(number % 1))\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzri4vnul.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzri4vnul.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzri4vnul.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    decimal_part = int(number)\n\
    \    if decimal_part < 1:\n        return number\n\n    integer_part = number\
    \ - decimal_part\n    integer_part = round(integer_part)\n    return float(str(integer_part)\
    \ + '.' + str(decimal_part))\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtuuqrbs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvtuuqrbs.py\", line 26,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvtuuqrbs.py\", line\
    \ 21, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return number\n    factor\
    \ = 10.0\n    while number % factor > 0:\n        factor = factor * 10\n    return\
    \ number / factor\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823407
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    precision = number.as_tuple().exponent\n    if precision\
    \ > 0:\n        precision += 1\n        number = round(number, precision)\n  \
    \  return number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbizl3ib.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzbizl3ib.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzbizl3ib.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzbizl3ib.py\"\
    , line 10, in truncate_number\n    precision = number.as_tuple().exponent\nAttributeError:\
    \ 'float' object has no attribute 'as_tuple'\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not (-1.0 < number < 1.0):\n        raise ValueError(\"\
    The provided number %f is not positive.\" % number)\n    if number == int(number):\n\
    \        return float(number)\n    if number % 1:\n        raise ValueError(\"\
    The provided number %f cannot be decomposed into integers.\" % number)\n    exponent\
    \ = int(math.ceil(math.log10(number)))\n    number = number - round(number * pow(10,\
    \ -exponent))\n    decimals = pow(10, exponent)\n    return number * decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wy9ayfj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8wy9ayfj.py\", line 28,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8wy9ayfj.py\", line\
    \ 23, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8wy9ayfj.py\"\
    , line 11, in truncate_number\n    raise ValueError(\"The provided number %f is\
    \ not positive.\" % number)\nValueError: The provided number 3.500000 is not positive.\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    if decimal_part >= 0.0 and isinstance(decimal_part, float):\n\
    \        decimal_part = math.trunc(decimal_part)\n    return decimal_part\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8y8p2ee.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpa8y8p2ee.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpa8y8p2ee.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpa8y8p2ee.py\"\
    , line 13, in truncate_number\n    decimal_part = math.trunc(decimal_part)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number * Decimal('0.000000001'))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopwjoz70.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpopwjoz70.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpopwjoz70.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpopwjoz70.py\"\
    , line 10, in truncate_number\n    return number - int(number * Decimal('0.000000001'))\n\
    NameError: name 'Decimal' is not defined\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    remainder = number - int_part\n\
    \    return remainder if remainder >= 1.0 else 0.0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dxp0p2y.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0dxp0p2y.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0dxp0p2y.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    if number - int_part < EPSILON:\n\
    \        return number\n    decimal_part = number - int_part\n    decimal_part\
    \ = math.ceil(decimal_part * 10**(decimal_part*-1))\n    return int_part + decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y6a86ks.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1y6a86ks.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1y6a86ks.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1y6a86ks.py\"\
    , line 11, in truncate_number\n    if number - int_part < EPSILON:\nNameError:\
    \ name 'EPSILON' is not defined\n"
  stdout: ''
  timestamp: 1659823402
