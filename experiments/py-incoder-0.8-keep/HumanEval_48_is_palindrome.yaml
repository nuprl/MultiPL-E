name: HumanEval_48_is_palindrome
language: py
prompt: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
  \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
  \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') ==\
  \ False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') ==\
  \ False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
  \ntest_check()\n"
completions: ["    return str(text) == ''.join(str(x) for x in reversed(text))\n\n",
  "    return text[::-1] == text\n\n", "    return text == text[::-1]\n\n\n@timeit",
  "    if not text:\n        return True\n    if not text[0]:\n        return True\n\
    \    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\
    \n", "    text = text.lower()\n    text = text.replace(\" \", \"\")\n    return\
    \ text == text[::-1]\n\n", "    return text == ''.join(reversed(text))\n", " \
    \   return text == _reverse_string(text)\n\n", "    text = text.lower()\n    return\
    \ text == text[::-1]\n\n", "    text = text.lower()\n    if text == text[::-1]:\n\
    \        return True\n    return False\n\n", "    # return True if string is a\
    \ palindrome\n    # return False if string is not a palindrome\n    if text ==\
    \ text[::-1]:\n        return True\n    return False\n\n", "    return text ==\
    \ text[::-1]\n\n", "    # Your code goes here\n    return text[::-1] == text\n\
    \n", "    return text == text[::-1]\n\n", "    return text == get_reversed_string(text)\n\
    \n", "    return text == text[::-1]\n\n", "    if text == text[::-1]:\n      \
    \  return True\n    return False\n\n", "    return text == text[::-1]\n\n", " \
    \   if text == '':\n        return True\n    elif not text:\n        return False\n\
    \    elif text[0] != text[-1]:\n        return False\n    else:\n        return\
    \ is_palindrome(text[1:-1])\n\n", "    text, chars = text.replace(\" \", \"\"\
    ), list(text)\n    return chars == chars[::-1] and is_palindrome(\"\".join(chars))\n\
    \n", "    return text == text[::-1]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
