name: HumanEval_9_rolling_max
language: py
results:
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    sum = 0\n   \
    \ for num in numbers:\n        sum += num\n        if sum > numbers[-1]:\n   \
    \         break\n    return numbers[:]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzfeqys0.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpdzfeqys0.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdzfeqys0.py\", line\
    \ 19, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list\
    \ = [0] * len(numbers)\n    for i, number in enumerate(numbers):\n        rolling_max_list[i]\
    \ = max(rolling_max_list[i-1], number)\n    return rolling_max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    \n    return\
    \ max(numbers)\n    \ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk74anwbz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpk74anwbz.py\", line 20,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpk74anwbz.py\", line\
    \ 14, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpk74anwbz.py\"\
    , line 11, in rolling_max\n    return max(numbers)\nValueError: max() arg is an\
    \ empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    def rolling_max_rec(numbers:\
    \ List[int], i: int) -> List[int]:\n        \"\"\" Recursive function that perform\
    \ rolling max operation on given list at given moment \"\"\"\n        if i >=\
    \ len(numbers):\n            return []\n        elif numbers[i] == numbers[0]:\n\
    \            return rolling_max_rec(numbers[:i], i) + 1\n        else:\n     \
    \       rolling_max = numbers[0]\n            for n in numbers[1:]:\n        \
    \        if n < rolling_max:\n                    rolling_max = n\n          \
    \  if rolling_max != numbers[-1]:\n                numbers = rolling_max_rec(numbers,\
    \ i + 1)\n            else:\n                numbers = rolling_max_rec(numbers,\
    \ i)\n            numbers.append(rolling_max)\n            return numbers\n  \
    \  return rolling_max_rec([i for i in numbers], 0)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc93uper.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgc93uper.py\", line 35,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgc93uper.py\", line\
    \ 30, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpgc93uper.py\", line 26, in rolling_max\n    return rolling_max_rec([i\
    \ for i in numbers], 0)\n  File \"/tmp/tmpgc93uper.py\", line 14, in rolling_max_rec\n\
    \    return rolling_max_rec(numbers[:i], i) + 1\nTypeError: can only concatenate\
    \ list (not \"int\") to list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    result\
    \ = []\n    \n    for i in numbers:\n        result.append(i)\n        \n    \
    \    for i in range(len(result) - 1):\n            if result[i] > result[i + 1]:\n\
    \                result[i] = result[i]\n            else:\n                break\n\
    \    \n    return result\n    \n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrq04cx2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbrq04cx2.py\", line 31,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbrq04cx2.py\", line\
    \ 27, in check\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    length\
    \ = len(numbers)\n    \n    if length <= 0:\n        return []\n    \n    # first\
    \ and last elements are the same one\n    if length == 1:\n        rolling_max_list\
    \ = []\n        rolling_max_list.append(numbers[0])\n        rolling_max_list.append(numbers[0])\n\
    \        return rolling_max_list\n    \n    # first and last elements are different\n\
    \    if length == 2:\n        rolling_max_list = []\n        rolling_max_list.append(numbers[0])\n\
    \        rolling_max_list.append(numbers[1])\n        return rolling_max_list\n\
    \    \n    rolling_max_list = []\n    \n    # rolling max from current position\n\
    \    for i in range(length-1):\n        rolling_max_list.append(max(numbers[i],\
    \ numbers[i+1]))\n    \n    # rolling max from next position\n    rolling_max_list.append(max(numbers[length-1],\
    \ numbers[length-2]))\n    \n    return rolling_max_list\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jc1o5nb.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp8jc1o5nb.py\", line 48,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8jc1o5nb.py\", line\
    \ 43, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    rolling_max_list\
    \ = []\n    \n    for i in range(len(numbers)):\n        \n        rolling_max_list.append(max(numbers[i:]))\n\
    \    \n    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphiwjaa1z.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphiwjaa1z.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphiwjaa1z.py\", line\
    \ 20, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_rolling_list:\
    \ List[int] = []\n    max_rolling_list.extend(numbers)\n    for num in numbers:\n\
    \        for index in range(num - 1):\n            max_rolling_list.append(max(max_rolling_list[index],\
    \ max_rolling_list[index + 1]))\n    return max_rolling_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u86jzc7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5u86jzc7.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5u86jzc7.py\", line\
    \ 18, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max =\
    \ []\n    for i in reversed(range(len(numbers))):\n        rolling_max.append(max(numbers[:i+1]))\n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbzolkxg.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpxbzolkxg.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxbzolkxg.py\", line\
    \ 16, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_roll_up =\
    \ 0\n    max_element = 0\n    for elem in numbers:\n        if elem > max_element:\n\
    \            max_element = elem\n            max_roll_up = 0\n        elif elem\
    \ == max_element:\n            max_roll_up += 1\n        else:\n            max_element\
    \ = elem\n            max_roll_up = 1\n    return [max_element]*max_roll_up\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i6ejsij.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2i6ejsij.py\", line 29,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2i6ejsij.py\", line\
    \ 24, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    res = []\n  \
    \  currentMax = numbers[0]\n    for number in numbers:\n        if number > currentMax:\n\
    \            res.append(currentMax)\n        currentMax = max(number, currentMax)\n\
    \    res.append(currentMax)\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2veexe6z.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2veexe6z.py\", line 25,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2veexe6z.py\", line\
    \ 19, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2veexe6z.py\"\
    , line 10, in rolling_max\n    currentMax = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_elements\
    \ = []\n    if len(numbers) == 0:\n        return rolling_max_elements\n    window_size\
    \ = len(numbers) - 1\n    for i in reversed(range(len(numbers))):\n        rolling_max_elements.append(numbers[i])\n\
    \        if i <= window_size - 1:\n            rolling_max_elements.append(max(rolling_max_elements[i-1:window_size+1]))\n\
    \        else:\n            rolling_max_elements.append(max(rolling_max_elements[i-1:window_size+1]))\n\
    \    return rolling_max_elements\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsc939bhd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsc939bhd.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpsc939bhd.py\", line\
    \ 23, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpsc939bhd.py\", line 18, in rolling_max\n    rolling_max_elements.append(max(rolling_max_elements[i-1:window_size+1]))\n\
    ValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_window =\
    \ []\n    rolling_sum = 0\n    for i in range(len(numbers)):\n        rolling_sum\
    \ += numbers[i]\n        if rolling_sum > numbers[i]:\n            max_window.append(numbers[i])\n\
    \            rolling_sum -= numbers[i]\n        else:\n            rolling_sum\
    \ = 0\n    return max_window\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyu3fwvi2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyu3fwvi2.py\", line 27,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyu3fwvi2.py\", line\
    \ 22, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_number =\
    \ max(numbers)\n    # rolling_max = [0] * len(numbers)\n    rolling_max = [0]\
    \ * len(numbers)\n    rolling_max[0] = 1\n    index = len(numbers)-1\n    index_to_roll\
    \ = 1\n    \n    for number in numbers:\n        rolling_max[index] = number\n\
    \        index += 1\n        if index == index_to_roll:\n            index +=\
    \ 1\n            index_to_roll = index_to_roll * 2\n            rolling_max[index]\
    \ = max_number\n    \n    return rolling_max\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  \
    \  assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2,\
    \ 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f8e3xfz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6f8e3xfz.py\", line 33,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6f8e3xfz.py\", line\
    \ 27, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6f8e3xfz.py\"\
    , line 9, in rolling_max\n    max_number = max(numbers)\nValueError: max() arg\
    \ is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    n = len(numbers)\n\
    \    numbers_max = []\n    current = 0\n    \n    for i in range(n//2):\n    \
    \    if numbers[i] > current:\n            numbers_max.append(numbers[i])\n  \
    \      current = max(numbers[i], current)\n\n    for i in range(n//2, n):\n  \
    \      if numbers[i] > current:\n            numbers_max.append(numbers[i])\n\
    \        current = max(numbers[i], current)\n\n    numbers_max.append(current)\n\
    \    return numbers_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgo40dyar.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgo40dyar.py\", line 33,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgo40dyar.py\", line\
    \ 27, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximum = numbers[0]\n\
    \    maximums = []\n    for number in numbers:\n        if number > maximum:\n\
    \            maximum = number\n        else:\n            maximums.append(maximum)\n\
    \            maximum = number\n    maximums.append(maximum)\n    return maximums\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkedd78m.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbkedd78m.py\", line 28,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbkedd78m.py\", line\
    \ 22, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbkedd78m.py\"\
    , line 9, in rolling_max\n    maximum = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    numbers_max_roll\
    \ = []\n    # Init first element of rolling max list\n    numbers_max_roll.append(numbers[0])\n\
    \    \n    for i in range(1, len(numbers)):\n        if numbers[i] >= numbers[i\
    \ - 1]:\n            numbers_max_roll.append(numbers[i])\n        else:\n    \
    \        numbers_max_roll.append(numbers[i - 1])\n\n    return numbers_max_roll\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpou1c9h41.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpou1c9h41.py\", line 29,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpou1c9h41.py\", line\
    \ 23, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpou1c9h41.py\"\
    , line 12, in rolling_max\n    numbers_max_roll.append(numbers[0])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    max_list = []\n    numbers.sort()\n    last_value = numbers[0]\n\
    \    rolling_max_found = False\n    for value in numbers:\n        if last_value\
    \ == value:\n            continue\n        if value == max_list[-1]:\n       \
    \     rolling_max_found = True\n        else:\n            if rolling_max_found:\n\
    \                max_list.append(value)\n            else:\n                max_list.append(value)\n\
    \            rolling_max_found = False\n        last_value = value\n    return\
    \ max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhfgyu8u.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpyhfgyu8u.py\", line 36,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyhfgyu8u.py\", line\
    \ 31, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  File \"\
    /tmp/tmpyhfgyu8u.py\", line 18, in rolling_max\n    if value == max_list[-1]:\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n\
    \        return []\n    min_i = numbers[0]\n    max_i = numbers[0]\n    for i\
    \ in range(1, len(numbers)):\n        if numbers[i] >= max_i:\n            max_i\
    \ = numbers[i]\n        elif numbers[i] < min_i:\n            min_i = numbers[i]\n\
    \        else:\n            max_i = numbers[i]\n\n    return [max_i] * len(numbers)\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgby9u7qt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgby9u7qt.py\", line 30,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgby9u7qt.py\", line\
    \ 25, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers)\
    \ == 0:\n        return []\n    else:\n        rolling_max = numbers[0]\n    \
    \    rolling_max_size = 1\n        rolling_max_index = numbers.index(rolling_max)\n\
    \        if rolling_max_index > 0:\n            rolling_max_size = rolling_max_index\n\
    \        for i in range(1, rolling_max_index + 1):\n            rolling_max =\
    \ max(rolling_max, numbers[i])\n            rolling_max_size = i + 1\n       \
    \     if rolling_max_index == i:\n                rolling_max_index = 1\n    \
    \        else:\n                rolling_max_index += 1\n        return [rolling_max,\
    \ rolling_max_index]\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffbmc0mp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpffbmc0mp.py\", line 33,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpffbmc0mp.py\", line\
    \ 28, in check\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
