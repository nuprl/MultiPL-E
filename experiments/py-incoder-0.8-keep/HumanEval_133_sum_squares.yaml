name: HumanEval_133_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n  \
  \  \"\"\"You are given a list of numbers.\n    You need to return the sum of squared\
  \ numbers in the given list,\n    round each element in the list to the upper int(Ceiling)\
  \ first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For\
  \ lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should\
  \ be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1]\
  \ the output should be 6\n    \n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
  \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) ==\
  \ 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0,\
  \ 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert\
  \ candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3])\
  \ == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0])\
  \ == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
  \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    count = 0\n    for i in lst:\n        count += i**2\n    return\
    \ count\n", "    res: int = 0\n    for num in lst:\n        res+=round(num)**2\n\
    \    return res\n", "    if type(lst) is not list:\n        raise TypeError('Input\
    \ must be a list of numbers')\n\n    sum_ = sum(map(lambda x: int(np.ceil(x) **\
    \ 2), lst))\n    return sum_\n\n\nlst = [1,2,3]\nlst2 = [1,4,9]\n\nprint(f'sum\
    \ of squares: {sum_squares(lst)}')\nprint(f'sum of squares: {sum_squares(lst2)}')\n\
    </cell>\n<cell>", "    \n    sum = 0\n    for ele in lst:\n        sum += ele**2\n\
    \    return int(math.ceil(sum))\n", "    \n    \n    # your code here\n    \n\
    \    return sum(map(int,lst))\n\n", "    ans = lst[0]\n    for x in lst[1:]:\n\
    \        ans += (x*x)\n    return int(ans)\n    \n", "    return sum(map(lambda\
    \ x: int(round(math.ceil(x * x))), lst))\n</cell>\n<text>\nExercise 3.6: sum_squares\n\
    Write a function that returns True if the number is a perfect square, otherwise\
    \ it returns False.\n\nExample 1:\n\nlst = [1,2,3]\n\nExample 2:\n\nlst = [1,4,9]\n\
    \nExample 3:\n\nlst = [1,3,5,7]\n\nExample 4:\n\nlst = [1.4,4.2,0]\n\nExample\
    \ 5:\n\nlst = [-2.4,1,1]\n\nExample 6:\n\nlst = [2,-2,4]\n\n</text>\n<cell>",
  "    lst = map(lambda x: round(x, int(math.ceil(math.log10(x)))), lst)\n    return\
    \ sum(map(lambda x: x**2, lst))\n</code>\n<|/ a dscore=0 tags=python |>\n<| a\
    \ tags=python |>\nHere's a solution that avoids looping through all the numbers:\n\
    <code>", "    # sum of squares\n    sum_squares = sum(map(lambda val: val*val,\
    \ lst))\n\n    return sum_squares\n</code>\n<code>\n>>> sum_squares([1,2,3])\n\
    14\n>>> sum_squares([1,4,9])\n98\n>>> sum_squares([1,3,5,7])\n84\n>>> sum_squares([1.4,4.2,0])\n\
    29\n>>> sum_squares([-2.4,1,1])\n6\n>>> sum_squares([1.5e6,4.2e6])\n18446744073709551616\n\
    >>> sum_squares([-1.0e+30,1e+20])\n0\n>>> sum_squares([-10.0,10.0])\n0\n>>> sum_squares([-10.0,-10.0])\n\
    0\n>>> sum_squares([0.0,0.0,1.0])\n0\n>>> sum_squares([0.0,0.0,-1.0])\n0\n>>>\
    \ sum_squares([-10.0,10.0,-10.0,10.0])\n0\n</code>\n<|/ a tags=python |>\n<| c\
    \ |>\nI didn't see this answer, I'll test it\n<|/ c |>\n<| c |>\nI tried it, works\
    \ perfectly! Thank you! I will review my knowledge about map\n<|/ c |>\n<| c |>\n\
    I have edited my answer to include an alternative solution that uses list comprehension.\n\
    <|/ c |>\n<| a dscore=1 |>\nYou can use the map function to square the numbers\
    \ to get the sum of squares:\n<code>\nlst = [1,2,3]\n\nsum( map( lambda x: x **\
    \ 2, lst ) )\n\n>> 14\n</code>\n<|/ a tags=python |>\n<| a tags=python |>\nYou\
    \ can do it by using list comprehension:\n<code>\nlst = [1,2,3]\nsum(l*l for l\
    \ in lst)\n</code>\n<|/ a dscore=1 |>\n<| a tags=python dscore=1 |>\n<code>",
  "    \n    \n    \n    \n    return sum((i*i)+1 for i in lst)\n</code>\n<|/ a tags=python\
    \ |>\n<| c |>\n`sum_squares` can be simplified to `sum(math.pow(x,2) for x in\
    \  lst)` since `math.pow` takes only two arguments and `pow` takes three arguments.\n\
    <|/ c |>\n<| c |>\nyes you're right, sorry I'm used to python3's version\n<|/\
    \ c |>\n<| c |>\nYou can do it in python 2 without using `math` module too if\
    \ you use this: `sum(math.pow(x, 2) for x in lst)`\n<|/ c |>\n<| c |>\nYeah, it\
    \ can be done in python2 too - but it's an overkill since `math.pow` takes only\
    \ two arguments. Anyway thanks for your comment\n<|/ c |>\n<| c |>\nYes, in python2\
    \ it's an overkill but I think that's more explicit than the `math` module in\
    \ python3\n<|/ c |>\n<| a tags=python |>\nI feel this answer is what you're looking\
    \ for: \n<code>\nlst = [1, 2, 3, 4]\n", "    sum = 0\n    for i in lst:\n    \
    \    sum += int(math.ceil(i) ** 2)\n    return sum\n", "    \n    return sum(map(lambda\
    \ x: int(round(math.sqrt(x))), lst))\n", "    lst1 = []\n    for i in lst:\n \
    \       lst1.append(int(i**0.5))\n    return sum(lst1)\n\n", "    lst = [round(x)\
    \ for x in lst]\n    return sum(map((lambda x:x ** 2), lst))\n            \n</cell>\n\
    <cell>\nlst = [1.4,4.2,0]\nprint(sum_squares(lst))\n</cell>\n<text>\nTask 7 -\
    \ Finding the longest word in the given string.\nWrite a function that takes a\
    \ string and returns the length of the longest word.\nThe function should ignore\
    \ all characters after a space.\nExamples:\n\"Hello World\" => 11\n\"Python is\
    \ great\" => 16\n\"Python is awesome\" => 20\n\n\n</text>\n<cell>", "    \n  \
    \  lst = [round(el) for el in lst]\n    lst = [round(el) for el in lst]\n    return\
    \ sum(lst)\n</cell>\n<cell>\nlst = [1,2,3]\nlst = [1,4,9]\nlst = [1,3,5,7]\nlst\
    \ = [1.4,4.2,0]\nlst = [-2.4,1,1]\n\nsum_squares(lst)\n</cell>\n<text>\nExercise:\
    \ Implement your own square and multiply functions in one function and test them\
    \ with the examples from the above cells.\n\n</text>\n<cell>", "    lst1 = list(lst)\n\
    \    lst1.sort()\n    lst2 = list(map(int, lst1))\n    return sum( lst2[:-1] *\
    \ lst2[1:] )\n    ", "    pass\n", "    return sum(map(lambda x: int(round(x*x))**2,\
    \ lst))\n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    return\
    \ lst\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    lst = [float(i) for i in lst]\n    total = sum(lst)\n    \n\
    \    return round(total,int(math.ceil(math.log10(total)))) \n    \nprint(sum_squares([1,2,3]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\nprint(sum_squares([1,2,2,4]))\nprint(sum_squares([-3,1]))\n\
    print(sum_squares([-3,-2,-3,-4,-3]))\nprint(sum_squares([1]))\nprint(sum_squares([1]))\n\
    </cell>\n<text>\nExercise 8\nImplement the function print_n() that prints only\
    \ the even numbers in the given list.\n\n\n</text>\n<cell>", "    sum_of_squares\
    \ = 0.0\n    for x in lst:\n        sum_of_squares += x ** 2\n    return int(sum_of_squares)\n\
    \n", "    \n    sqr = lambda x: round(float(x) ** 2, 3)\n    return sum(map(sqr,\
    \ lst))\n\n", "    # TODO: implement this function\n    \n    return sum(math.ceil(val)\
    \ for val in lst)\n", "    return sum(map(lambda x: int(round(x, 0))**2, lst))\n",
  "    sum = 0\n    for num in lst:\n        sum += int(math.ceil(num) ** 2)\n   \
    \ return sum\n\n", "    \n    lst=list(map(int,lst))\n    \n    return sum((x**2\
    \ for x in lst))\n", "    return sum([x**2 for x in lst]) # use built-in function\
    \ sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe OP asked to round the elements\
    \ of the list up to their ceiling.\n<|/ c |>\n<| a dscore=0 |>\nYou can do it\
    \ as simple as this : \n<code>", "    \n    # Your code here\n    sum_squares\
    \ = 0\n    for num in lst:\n        sum_squares += num * num\n    return int(math.ceil(sum_squares))\n\
    </cell>\n<cell>", "    squared_lst = []\n    for num in lst:\n        squared_lst.append(round(num\
    \ * num))\n    return sum(squared_lst)\n", "    sum_squares = sum(map(lambda x:\
    \ math.ceil(x)*x, lst))\n    return sum_squares\n\n</cell>\n<text>\nSum of subarrays\
    \ with sum equals K\nNow let us consider the following problem:\nGiven an array\
    \ of integers and an integer K, where both K and number of elements in the array\
    \ are less than 10,000.\nFind all possible subsets of size K with sum equals K.\n\
    The sum of all the subsets will be equal to K.\n\n\n</text>\n<cell>", "    for\
    \ each in lst:\n        each = int(round(each))\n    return sum(each ** 2 for\
    \ each in lst)\n", "    lst = [i**2 for i in lst]\n    lst = [round(i,2) for i\
    \ in lst]\n    lst = [int(i) for i in lst]\n    return sum(lst)\n", "    length\
    \ = len(lst)\n    if length <= 0:\n        return 0\n    total = 0\n    for i\
    \ in range(length):\n        total += lst[i]*lst[i]\n    return round(total,0)\n\
    </cell>\n<text>\nSolution 2:\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    lst = map(lambda x: int(round(x)), lst)\n    return sum(map(lambda x: x **\
    \ 2, lst))\n</code>\n<|/ a |>\n<| a |>\nIf you can use 3rd party libraries then\
    \ you can try something like below. \n<code>", "    \n    lst_sq = []\n    for\
    \ i in lst:\n        i_sq = math.ceil(i)\n        lst_sq.append(i_sq**2)\n   \
    \ return sum(lst_sq)\n</cell>\n<cell>\nsum_squares(lst=[1,2,3])\n</cell>\n<cell>\n\
    sum_squares(lst=[1,4,9])\n</cell>\n<cell>\nsum_squares(lst=[1,3,5,7])\n</cell>\n\
    <cell>\nsum_squares(lst=[1.4,4.2,0])\n</cell>\n<cell>\nsum_squares(lst=[-2.4,1,1])\n\
    </cell>\n<text>\nWhat happens when you use the keyword 'in'?\n\n</text>\n<cell>\n\
    lst = [1,2,3,4]\n5 in lst\n</cell>\n<text>\nWhat is the difference between '=='\
    \ and 'is'?\n\n</text>\n<cell>\n2 == 2\n</cell>\n<cell>\ntype(2 == 2)\n</cell>\n\
    <cell>\n2 == 2 is False\n</cell>\n<cell>\n2 == 2 is True\n</cell>\n<text>\nWhat\
    \ happens if you put two equal signs next to each other?\n\n</text>\n<cell>\n\
    2 == 2 == 2\n</cell>\n<text>\nWhat happens when you try to compare a string and\
    \ a number?\n\n</text>\n<cell>\n'2' == 2\n</cell>\n<text>\nWhat happens if you\
    \ try to compare a string and an integer?\n\n</text>\n<cell>\n'2' != 2\n</cell>\n\
    <text>\nWhat is 1 == True?\n\n</text>\n<cell>\n1 == True\n</cell>\n<text>\nWhat\
    \ is 1 == False?\n\n</text>\n<cell>\n1 == False\n</cell>\n<text>\nWhat is False\
    \ == True?\n\n</text>\n<cell>\nFalse == True\n</cell>\n<text>\nWhat is False ==\
    \ False?\n\n</text>\n<cell>\nFalse == False\n</cell>\n<text>\nWhat happens if\
    \ you put a float and a boolean in the same expression?\n\n</text>\n<cell>\n3.0\
    \ > False\n</cell>\n<text>\nWhat happens if you put a float and a boolean in the\
    \ same expression?\n\n</text>\n<cell>\n3.0 < True\n</cell>\n<text>\nWhat is True\
    \ == False?\n\n</text>\n<cell>\nTrue == False\n</cell>\n<text>\nWhat is False\
    \ == False?\n\n</text>\n<cell>\nFalse == False\n</cell", "    return sum(map(lambda\
    \ x: round(x ** 2, int(ceil(x+1))), lst))\n\n", "    \n    return sum( i*i for\
    \ i in lst )\n    \n    ", "    \n    lst = list(map(lambda x:round(x, 2), lst))\n\
    \    return sum(map(lambda x: x * x, lst))\n", "    length = len(lst)\n    for\
    \ i in lst:\n        i = int(i)\n    return sum(((i*i) for i in lst)) + length*length\n",
  "    res=0\n    for elem in lst:\n        res+=elem**2\n    res=int(round(res))\n\
    \    return res\n", "    sum = 0\n    for i in lst:\n        sum = sum + i **\
    \ 2\n    return int(round(sum, 0))\n", "    \n    pass\n    \n", "    \n    sum\
    \ = 0\n    for i in lst:\n        sum += i**2\n    return int(sum)\n</cell>\n\
    <cell>", "    return sum(map(lambda x: int(math.ceil(math.sqrt(x)))**2,lst))\n\
    \n", "    # your code here\n    return sum( [round(val**2,0) for val in lst] )\n\
    \    \n</cell>\n<cell>", "    return sum([int(np.ceil(x)) for x in lst])\n", " \
    \   # write your code in Python 3.6\n\n    sum_of_squares = 0\n    for i in lst:\n\
    \        sum_of_squares += round(i**2,0)\n    return sum_of_squares\n</cell>\n\
    <text>\nTask 2: Write a function is_prime_number() to check if a number is a prime\
    \ number.\n\n</text>\n<cell>", "    return sum(map(lambda x: round(float(x)*float(x)),\
    \ lst))\n", "    return sum(math.ceil(el ** 2) for el in lst)\n", "    sum_ =\
    \ 0\n    for num in lst:\n        sum_ += int(num ** 2)\n    return int(sum_)\n\
    \n", "    # your code here\n    if len(lst) == 0:\n        return 0\n    return\
    \ sum([int(round(num*num)) for num in lst])\n</cell>\n<cell>\ntest_lst = [1,2,3]\n\
    sum_squares(test_lst)\n</cell>\n<cell>", "    # your code here\n    sum_ = 0\n\
    \    for x in lst:\n        sum_ += int(math.ceil(x)*(x+0.5))\n    return sum_\n\
    </cell>\n<text>\nProblem 7\nImplement a function that will return the greatest\
    \ common divisor. You may use Euclid's algorithm to solve the problem (see: ).\n\
    \n\n</text>\n<cell>", "    return sum(map(lambda x: round(x ** 2, int(math.ceil(x))),\
    \ lst))\n\n\"\"\"\n \n\n    \n\"\"\"\n\n", "    squares = []\n    for num in lst:\n\
    \        squares.append(round(num * num, 0))\n    return sum(squares)\n\nprint(sum_squares([4.2,1,0,2.1,3.3]))\n\
    print(sum_squares([2.7, 3.1, 6.5]))\nprint(sum_squares([-1.4,3.2,2.8]))\nprint(sum_squares([-1,2.2,3.3]))\n\
    print(sum_squares([-1.4,3.2,2.8]))\nprint(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\nprint(sum_squares([-1,2,3]))\n\
    print(sum_squares([-1.4,3.2,2.8]))\nprint(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([-1,2.2,3.3]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    print(sum_squares([-1,2,3]))\nprint(sum_squares([-1.4,3.2,2.8]))\nprint(sum_squares([-1,2.2,3.3]))\n\
    print(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\nprint(sum_squares([-1,2,3]))\nprint(sum_squares([-1.4,3.2,2.8]))\n\
    print(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\nprint(sum_squares([-1,2,3]))\n\
    print(sum_squares([-1.4,3.2,2.8]))\nprint(sum_squares([-1,2.2,3.3]))\nprint(sum_squares([-1,2.2,3.3]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    print(sum_squares([-1,2,3]))\nprint(sum_squares([-1.4,", "    return sum(map(lambda\
    \ x: int(round(x ** 2)), lst))\n\n", "    total = 0\n    for i in lst:\n     \
    \   total+= round(i*i)\n    return total\n\n", "    # write your code here\n \
    \   \n    lst = sorted(lst)\n    return sum(x*x for x in lst)\n\n", "    return\
    \ sum(map(lambda x: int(round(x*x, 0)), lst))\n", "    sum = 0\n    for i in lst:\n\
    \        sum += i * i\n    \n    return int(sum)\n", "    \n    lst = round(lst,\
    \ int(math.ceil(max(lst))))\n    return sum(map(lambda x: x*x, lst))\n", "   \
    \ i = 0\n    s = 0\n    \n    while i < len(lst):\n        s = s + lst[i]**2\n\
    \        i += 1\n    return round(s, 1)\n", "    return sum([x**2 for x in lst])\n\
    \n", "    # Write your code here\n    return sum(map(lambda x: round(x ** 2),\
    \ lst))\n", "    ### YOUR CODE HERE\n    ans = 0\n    for num in lst:\n      \
    \  ans += num ** 2\n        ans -= num\n        ans += round(num)\n    return\
    \ ans\n    ### END YOUR CODE\n\n</cell>\n<text>\nExpected Output:\n\n\n\n</text>\n\
    <text>\nWhat if you cannot round the number? What if you cannot even sum them?\n\
    \nThen you might want to consider a different approach. For example, you can decide\
    \ to keep the number as a string, add the squares of its digits, and then convert\
    \ the string to a number.\n\nYou can first multiply each number by 10 raised to\
    \ the power of the number of digits. Then you can sum the products of adjacent\
    \ digits. This is a much simpler problem, as you only need to consider each number\
    \ once. You can then repeat this process until you have a list of only digits.\n\
    \n\n</text>\n<text>\nThis approach can be extended to a recursive problem. Consider\
    \ you want to compute the sum of the squares of the digits in A[0], A[1], ...,\
    \ A[n]. First, write code that squares A[0], A[1], ..., A[n] and stores the squares\
    \ in another list, B.\n\n\n</text>\n<cell>", "    sum_of_squares = 0\n    for\
    \ x in lst:\n        sum_of_squares += int(math.ceil(x) ** 2)\n    return sum_of_squares\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=list,python,python-3.x |>\nI think this\
    \ is a cleaner solution:\n<code>\nlst = [float(x) for x in input(\"Enter the numbers\
    \ in list form. Type 'end' to terminate\").split()]\nresult = 0\nfor n in lst:\n\
    \    if n != 0:\n        result += n ** 2\nprint(result)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nAs per the comments given above, here is a solution that\
    \ uses numpy to compute the sum.\n<code>\nimport numpy as np\n", "    \n    return\
    \ sum( [ x **2 for x in lst ] )\n", "    \n    lst = list(map(lambda x: round(x,\
    \ int(math.ceil(x))), lst))\n    \n    sum = 0\n    for n in lst:\n        sum\
    \ += n ** 2\n    return sum\n    \n</cell>\n<text>\nPart II - Solutions\n\n</text>\n\
    <text>\nProblem 1\nWrite a Python function sum_of_squares that given a list returns\
    \ a sum of its squares rounded up.\nExamples:\n\nFor lst = [1,2,3] the output\
    \ should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7]\
    \ the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor\
    \ lst = [-2.4,1,1] the output should be 6\n\n\n</text>\n<cell>", "    lst = map(lambda\
    \ x: round(float(x), 3), lst)\n    return sum(lst)\n", "    return sum(map(lambda\
    \ x: round(x ** 2, int(math.ceil(math.log(x, 2)))), lst))\n\n", "    lst_copy\
    \ = list(lst)\n    rounded_lst = [round(elem, 1) for elem in lst_copy]\n    return\
    \ sum((x*x for x in rounded_lst))\n\n</code>\n<|/ a |>\n<| a dscore=0 tags=floating-point,python\
    \ |>\n<code>", "    sqr_sum = 0\n    for num in lst:\n        sqr_sum+= num*num\n\
    \    return round(sqr_sum, int(math.ceil(math.log10(sqr_sum))) + 1)\n", "    n\
    \ = int(lst[0])\n    total = 0\n    for x in lst[1:]:\n        total += int(round(pow(x,\
    \ 2)))\n    return total\n        \n\n</cell>\n<cell>", "    n = len(lst)\n  \
    \  assert n >= 2, \"The list must be of size greater than 2\"\n    \n    if n\
    \ == 1:\n        return lst[0] ** 2\n    \n    if n == 2:\n        return (lst[0]\
    \ ** 2 + lst[1] ** 2) ** 0.5\n    \n    mid = n // 2\n    \n    left_sum = sum_squares(lst[:mid])\n\
    \    right_sum = sum_squares(lst[mid:])\n    \n    return left_sum + right_sum\n\
    </cell>\n<text>\nQuestion:\n\nWrite a Python program to return the nth term of\
    \ a Fibonacci sequence upto n terms. \n\nExample: \nInput: 3, Output: 3\nInput:\
    \ 5, Output: 3\nInput: 20, Output: 6765\n\n</text>\n<cell>", "    # Method 1:\
    \ Brute force\n    # Method 2: Dynamic Programming\n    # Method 3: Preprocessing\
    \ \n    # Method 4: Sum square\n    # Method 5: Sum over power\n    # Method 6:\
    \ Kahan\n    # Method 7: O(n^2) method\n    # Method 8: O(nlogn) method\n\n  \
    \  upper_int_lst = []\n    for ele in lst:\n        upper_int_lst.append(int(ele))\n\
    \    sum_up_squares = sum(map(lambda x: (upper_int_lst[0]) ** 2, lst)) + sum(map(lambda\
    \ x: (upper_int_lst[1]) ** 2, lst)) + sum(map(lambda x: (upper_int_lst[2]) **\
    \ 2, lst))\n    return sum_up_squares\n\nsum_squares(lst)\n</cell>\n<cell>", " \
    \   length = len(lst)\n    sum = 0\n    \n    for i in range(length):\n      \
    \  sum += lst[i]*lst[i]\n    return sum\n", "    lst = sorted(lst)\n    squares\
    \ = []\n    for i in lst:\n        squares.append(i*i)\n    return sum(squares)\n",
  "    \n    sum_squares = 0\n    for i in range(len(lst)):\n        sum_squares =\
    \ sum_squares + int(lst[i]) ** 2\n    return int(sum_squares)\n    ", "    lst:\
    \ List[float] = sorted(lst)\n    sum = 0\n    for i in range(len(lst)):\n    \
    \    sum += lst[i] * lst[i]\n    return int(sum)\n</code>\n<|/ a dscore=0 tags=algorithm,python\
    \ |>\n<| c |>\nThis is not the correct output for this test case: lst = [1.4,4.2,0].\
    \ The correct output would be 29. Your method returns 6.\n<|/ c |>\n<| c |>\n\
    Sorry, I missed the part where the list has to be rounded up. Edited.\n<|/ c |>\n\
    <| a tags=algorithm,python |>\nThis is an old question but I just wanted to chime\
    \ in and say that while this answer may be a bit simpler that others, it is also\
    \ more efficient in the sense that it uses looping rather than list comprehensions.\
    \ Here's a way using looping which is also more readable in my opinion:\n<code>",
  "    \n    # your code here\n    \n    pass\n    \n    \n    ", "    \n    return\
    \ sum([int(math.ceil(num ** 2)) for num in lst])\n", "    lst_squares = list(map(lambda\
    \ x: int(np.ceil(x) ** 2), lst))\n    return sum(lst_squares)\n\n", "    lst =\
    \ sorted(lst)\n    \n    return sum(int(el*el) for el in lst)\n\n    \nprint(sum_squares(lst))\n\
    \n    \n</cell>\n<text>\nReturning a list\nFunctions that return a single value\
    \ return that value using the return statement.\nFunctions that return a value\
    \ or multiple values return a tuple using the return statement.\n\nExamples:\n\
    \n</text>\n<cell>", "    return sum([int(ceil(ele ** 2)) for ele in lst])\n",
  "    # Your code here\n    return sum(map(lambda x: int(ceil(round(x*x))),lst))\n\
    \    \n    ", "    sum = 0\n    for i in lst:\n        sum += i*i\n    return\
    \ int(sum)\n", "    lst = list(map(int, lst))\n    squaresum = 0\n    for number\
    \ in lst:\n        squaresum += (number*number)\n    return int(squaresum)\n\n\
    \    ", "    \n    # write your code here\n    \n    ans = 0\n    for ele in lst:\n\
    \        el = int(ele)\n        ans += el ** 2\n    return ans\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    lst=[round(i, int(math.ceil(math.log(i + 1, 2))))for\
    \ i in lst]\n    return sum([i**2 for i in lst])\n\n", "    # your code here\n\
    \    sum_of_squares = 0.0\n    for x in lst:\n        x = round(float(x))\n  \
    \      sum_of_squares += x*x\n    return sum_of_squares\n\nlst = [1, 2, 3, 4]\n\
    print(sum_squares(lst))\n\n</cell>\n<text>\nWrite a function that accepts a list\
    \ of numbers and returns True if the list is sorted in ascending order, False\
    \ otherwise.\n\n\n</text>\n<cell>", "    lst1 = [round(num) for num in lst]\n\
    \    lst2 = [num for num in lst1 if num > 0]\n    lst3 = list(map(lambda num:\
    \ num * num, lst2))\n    return sum(lst3)\n", "    squares = 0\n    for i in lst:\n\
    \        squares = squares + int(i)**2\n    return squares\n", "    \n    # your\
    \ code goes here\n    lst = [int(x*x) for x in lst]\n    return sum( [round(i,-1)\
    \ for i in lst] )\n    \n</cell>\n<cell>", "    # Your code here\n    lst = sorted(lst)\n\
    \    \n    for index, elem in enumerate(lst):\n        lst[index] = int(ceil(elem))\n\
    \        \n    return sum(lst**2)\n", "    # YOUR CODE HERE\n    if len(lst) <=\
    \ 0:\n        return 0\n    \n    for i in range(0, len(lst)):\n        lst[i]\
    \ = int(math.ceil(lst[i]))\n    \n    return sum([(lst[i] ** 2) for i in range(0,\
    \ len(lst))])\n\n</cell>\n<cell>", "    lst = list(map(lambda x: int(round(float(x))),\
    \ lst))\n    return sum(list(map(lambda x: x**2, lst)))\n</cell>\n<cell>\nsum_squares([1,2,3])\n\
    </cell>\n<cell>\nsum_squares([1,4,9])\n</cell>\n<cell>\nsum_squares([1,3,5,7])\n\
    </cell>\n<cell>\nsum_squares([1.4,4.2,0])\n</cell>\n<cell>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<cell>\nsum_squares([-5,3.14,2])\n</cell>\n<text>\nExercise: find all\
    \ divisors of a given number\n\n</text>\n<cell>", "    ans = 0\n    for i in lst:\n\
    \        ans += i*i\n    \n    return round(ans,0)\n", "    \n    sum_squares\
    \ = 0\n    for num in lst:\n        sum_squares += num * num\n        \n    return\
    \ sum_squares\n    \nprint(sum_squares(lst=[1, 2, 3, 4, 2.5, 2.7]))\n</cell>\n\
    <cell>\nlst = [2.4, 4.5, 2.7]\n</cell>\n<cell>", "    squares = map(lambda x:round(x*x),\
    \ lst)\n    sum_of_squares = sum(squares)\n    return sum_of_squares\n", "   \
    \ sum = 0\n    for i in lst:\n        sum += i*i\n    return sum\n", "    # your\
    \ code here\n    \n    return sum([int(x**0.5) for x in lst])\n", "    sum = 0\n\
    \    lst = list(map(lambda x: round(x, 0), lst))\n    for i in range(0, len(lst)):\n\
    \        sum += lst[i]*lst[i]\n    return sum\n\n", "    \n    return sum(map(lambda\
    \ x: int(np.ceil(x) ** 2), lst))\n", "    \n    sum_squares = 0\n    for x in\
    \ lst:\n        sum_squares += (x * x)\n\n    return int(round(sum_squares))\n\
    \    \n</cell>\n<text>\nProblem 7\nImplement the method list_to_set that converts\
    \ a list of unique integers into a set of unique elements. For example:\n\n\n\
    </text>\n<cell>", "    \n    return sum([int(x*x) for x in lst])\n", "    return\
    \ sum(map(lambda x: int(round(x * x)),  lst))\n", "    lst = [round(float(x),\
    \ 10) for x in lst]\n    return sum(map(lambda x: x * x, lst))\n\n", "    pass\n\
    \    # Your code here\n    # return 0", "    sum_ = 0\n    sum_sq = 0\n    for\
    \ i in range(len(lst)):\n        sum_ += lst[i]\n        sum_sq += lst[i]*lst[i]\n\
    \n    return int(round(sum_)) + int(round(sum_sq))\n\n", "    return sum(map(math.sqrt,\
    \ lst))\n\nprint(sum_squares(lst))\n</cell>\n<cell>", "    return sum(map(lambda\
    \ x: int(round(float(x))*int(round(float(x)))), lst))\n\n", "    sum_ = 0\n  \
    \  for i in lst:\n        sum_+=i**2\n    return int(sum_)\n", "    \n    if len(lst)\
    \ < 1:\n        return 0\n    if 0 in lst:\n        return 0\n    sum = 0\n  \
    \  for i in lst:\n        sum+=int(i)*int(i)\n    return int(round(sum))\n</cell>\n\
    <cell>\nsum_squares([1,2,3,-4])\n</cell>\n<cell>\nsum_squares([0,7,8,-4,-9,-8,3])\n\
    </cell>\n<cell>", "    lst=[round(num,1) for num in lst]\n    return sum(num*num\
    \ for num in lst)\n", "    sum = 0\n    for x in lst:\n        sum += int(x) **\
    \ 2\n    \n    return int(round(sum))\n\n", "    lst = [int(n) for n in lst]\n\
    \    lst = [n for n in lst if n >= 0]\n    return sum(lst)\n", "    \n    return\
    \ sum(map(round, lst))\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    </cell>\n<text>\n9.4.3 \uBAA8\uB4E0 \uD558\uC774\uD37C \uD30C\uC774\uC36C \uAE30\
    \uD638\n\n</text>\n<text>\n1. \uD30C\uC774\uC36C \uAC1D\uCCB4\uC758 \uCCAB\uBC88\
    \uC9F8 \uBA54\uC11C\uB4DC\uB294 \uCCAB\uBC88\uC9F8 \uC778\uC218\uC758 \uC774\uB984\
    \uC744 \uB9E4\uD551\uD569\uB2C8\uB2E4.\n\n\n</text>\n<cell>", "    return sum([int(round(num**2))\
    \ for num in lst])\n</code>\n<|/ a |>\n<| a |>\nThe key phrase here is \"the upper\
    \ int(Ceiling) first\", and that's a good hint. You can do it by computing the\
    \ sum of the squares (like you did in your question), but then round each element\
    \ before adding them all up like so:\n<code>\nfrom math import ceil", "    \n\
    \    return sum(map(lambda x: round(x*x), lst))\n\nprint(sum_squares([1.0, 2.2,\
    \ 3.3, 4.0]))\nprint(sum_squares([1.0, 4.5, 6.7]))\nprint(sum_squares([1.0, 3.5,\
    \ 5.0]))\nprint(sum_squares([1.4, 3.2, 5.0]))\nprint(sum_squares([-1.4, 2.2, 3.3,\
    \ 4.0]))\n\n</cell>\n<text>\nPractice Exercise 2: Sum of Squares\nUsing the sum_squares()\
    \ function, write a function called sum_of_squares that returns the sum of squares\
    \ of all the elements in a list.\n\nExample: lst = [1, 4, 9, 16, 25] the output\
    \ should be 1245\nWrite a function that takes in a list of numbers as input and\
    \ returns the sum of the squares.\n\nExample: lst = [1.4, 3.2, 5.0] the output\
    \ should be 29\n\n</text>\n<cell>", "    return sum(map(lambda x: round(float(x)**2),\
    \ lst))\n", "    \n    \n    # Write your code here\n    return sum(map(lambda\
    \ x: int(round(x*x))**2, lst))\n\nprint(sum_squares([float(i) for i in input().split()]))\n\
    </cell>\n<text>\nPart II: More on map\nmap() applies a function to every element\
    \ of an iterable (which itself is a list, tuple or set).\n\n\n</text>\n<cell>",
  "    return sum([round(num * num) for num in lst])\n\n", "    lst = [int(round(item))\
    \ for item in lst]\n    return sum(map(int,lst))\n", "    \n    \n    pass\n \
    \   \n    \n", "    lst = list(map(lambda x: int(round(x)), lst))\n    return\
    \ sum(map(lambda x: x ** 2, lst))\n    \n    ", "    return sum([int(round(elem\
    \ ** 2)) for elem in lst])\n", "    squares = []\n    for x in lst:\n        squares.append(round(x*x))\n\
    \    return sum(squares)\n    \n", "    if len(lst) == 0:\n        return 0\n\
    \    \n    lst = [int(i) for i in lst]\n    \n    lst = sorted(lst)\n    \n  \
    \  sum_squares = 0\n    \n    for i in range(1, len(lst)):\n        sum_squares\
    \ += lst[i] - lst[i-1]\n    \n    return sum_squares\n", "    sum_ = 0\n    for\
    \ elem in lst:\n        sum_ += elem**2\n    \n    return sum_\n", "    # code\
    \ here\n    \n    return sum(list(map(lambda x : x ** 2, lst)))\n", "    lst =\
    \ list(map(lambda x: int(round(x, 0)), lst))\n    \n    return sum(map(lambda\
    \ x: x * x, lst))\n\n", "    return sum( [x**2 for x in lst] )\n", "    \n   \
    \ return sum(int(x) ** 2 for x in lst)\n</cell>\n<cell>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<cell>\nsum_squares([-2.4,1,1])\n</cell>\n<text>\nsum_squares function\
    \ definition\n\n</text>\n<cell>", "    return sum(map(int,map(lambda x:math.ceil(x),lst)))\n\
    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\n\
    print(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n</cell>\n<text>\n\
    Q9. Write a Python program to find maximum of a sequence (user enters 3 numbers)\n\
    Note: Sequence can be of any length\n\n</text>\n<cell>", "    lst = [round(num)\
    \ for num in lst]\n    return sum(math.pow(num,2) for num in lst)\n", "    lst\
    \ = lst[:]\n    lst.sort() # sort for ceil\n    sum = 0\n    for n in lst:\n \
    \       sum += n ** 2\n    return sum\n</code>\n<|/ a dscore=3 |>\n<| c |>\nIt\
    \ would be helpful if you could explain what the code is doing, and how you came\
    \ to that solution.\n<|/ c |>\n<| a dscore=1 tags=python |>\nFor those who are\
    \ still looking for better solution, I have tried the following. It uses generator\
    \ and list comprehension. \n<code>", "    return sum(map(lambda x: round(x**2,0),\
    \ lst))\n", "    lst = list(map(math.ceil, lst))\n    return sum(map(lambda x:\
    \ x**2, lst))\n\n", "    \n    return sum( [ round(x**2) for x in lst ] )\n",
  "    pass\n", "    result = 0\n    for ele in lst:\n        result += (int(ele)\
    \ + 1)\n    return int(result ** 0.5)\n\nlst = [1,4,9]\n", "    if len(lst) ==\
    \ 0:\n        return 0\n    else:\n        sum_of_squares: list = lst\n      \
    \  sum_of_squares.reverse()\n        sum_of_squares = map(lambda x: round(x, 0),\
    \ sum_of_squares)\n        sum_of_squares = list(map(lambda x: x * x, sum_of_squares))\n\
    \        return sum(sum_of_squares)\n", "    # sum_squares([4,5,8])\n    # sum_squares([2,8,10,6,-4,-6,-3,-10])\n\
    \    # sum_squares([10,-2])\n    # sum_squares([1,3,5,7])\n    # sum_squares([1,3,5,7,9])\n\
    \    # sum_squares([1.4,4.2,0])\n    # sum_squares([1.4,-4.2,0])\n    # sum_squares([-1.4,1.4,0])\n\
    \    # sum_squares([-1.4,1.4,0])\n    # sum_squares([-1.4,1.4,0])\n\n    lst =\
    \ list(lst)\n\n    for i in lst:\n        i = round(i)\n\n        lst.append(i)\n\
    \    \n    sum = 0\n\n    for i in lst:\n        sum += i*i\n\n    return sum\n\
    \n", "    lst = [round(num) for num in lst]\n    return sum(lst**2)\n\n", "  \
    \  \n    sum=0\n    \n    for i in lst:\n        sum+=i**2\n    \n    return int(ceil(sum))\n\
    \nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    print(sum_squares([1,2,3]))\n</cell>\n<text>\nQuestion 3\nWrite a Python program\
    \ to calculate the sum of all even numbers between 1 and n where n is the number\
    \ entered from the console.\n\nSample I/O:\n\nn = 10\nThe sum of all even numbers\
    \ between 1 and 10 is 55.\n\nn = 100\nThe sum of all even numbers between 1 and\
    \ 100 is 1026\nHint: You can loop through the numbers from 1 to n and add them\
    \ to sum if they are even.\n\n\n</text>\n<cell>", "    # Your code here\n    res\
    \ = 0\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        res\
    \ += lst[i]**2\n    return int(res)\n", "    return sum(map(lambda x: (int(round(math.sqrt(x))))\
    \ , lst))\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string\
    \ and returns the number of vowels present in the string. \nIf the input is a\
    \ string, then the function should count the number of vowels in the string and\
    \ return the value.\nIf the input is a list, then you should be able to access\
    \ the individual elements of the list to count the number of vowels.\n\n\n</text>\n\
    <code language=Python 3.8.5 64-bit>", "    \n    \n    \n    \n    return \n</cell>\n\
    <cell>\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\n\
    assert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert\
    \ sum_squares([-2.4,1,1]) == 6\n</cell>\n<text>\nProblem 3\n\n</text>\n<cell>",
  "    sum_squares = 0\n    for i in lst:\n        sum_squares = sum_squares+i**2\n\
    \    return sum_squares\n</code>\n<|/ a tags=list,python,function |>\n<| a |>\n\
    Python has a lot of useful built-ins for data manipulation. For example, if your\
    \ data is in list l, you can use:\n<code>\nimport statistics\n</code>\nto get\
    \ a statistical distribution of your data.\n<code>\ns = statistics.mean(l)\n</code>\n\
    to get the mean of your data, and then\n<code>\nimport math\n</code>\nto round\
    \ the numbers to the closest integer.\n<code>\nprint(round(s)*math.sqrt(len(l)))\n\
    </code>\nto get the integer result. To print the result as a whole number, change\
    \ round(s) to int(round(s))\n<code>\n>>> import math\n>>> def sum_squares(lst):\n\
    ...     s = statistics.mean(lst)\n...     return int(round(s)*math.sqrt(len(lst)))\n\
    ... \n>>> sum_squares([1,2,3,4,5,6])\n14\n>>> sum_squares([1,4,9,16])\n98\n>>>\
    \ sum_squares([1,3,5,7])\n84\n>>> sum_squares([1.4,4.2,0])\n29\n>>> sum_squares([-2.4,1,1])\n\
    6\n</code>\n<|/ a dscore=1 tags=list,python,function |>\n<| c |>\nThis won't work\
    \ for all cases. In your first example, `statistics.mean([1,2,3])` returns `1.0`\
    \ but the expected output is `1.5`.\n<|/ c |>\n<| a dscore=1 |>\nYou can use the\
    \ statistics module to calculate a running mean\n<code>", "    # your code here\n\
    \    sum_ = 0\n    lst = [round(n) for n in lst]\n    for i in lst:\n        sum_\
    \ += i**2\n    return sum_\n\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\n\
    lst = [2.3,4.5,6.7]\n</cell>\n<cell>\nlst\n</cell>\n<cell>\nlst = [round(1.4)-2,1.4,4.2,0]\n\
    </cell>\n<cell>\nlst\n</cell>\n<cell>\nlst = [-1.4,1,1]\n</cell>\n<cell>\nlst\n\
    </cell>\n<cell>\nlst = [1.4,4.2,0]\n</cell>\n<cell>\nlst\n</cell>\n<cell>\nlst\
    \ = [-1.4,1,1]\n</cell>\n<cell>\nlst\n</cell>\n<cell>", "    # write your code\
    \ here\n    \n    return 0\n    ", "    \n    numbers = [float(x) for x in lst]\n\
    \    numbers.sort()\n    \n    \n    \n    \n    return sum(int(round(elem**2))for\
    \ elem in numbers)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    #create empty\
    \ list with sum\n    sum_squares = []\n    \n    #iterate over list\n    for element\
    \ in lst:\n        \n        #round element to ceiling\n        ceil = math.ceil(element)\n\
    \        \n        #append ceil to list\n        sum_squares.append(ceil)\n  \
    \      \n    #return sum of squares\n    return sum_squares\n", "    lst = sorted(lst)\n\
    \    sum = 0\n    for x in lst:\n        sum += (x**2)\n    return int(sum)\n\"\
    \"\"\nYour code here!\n\"\"\"\n</cell>\n<cell>", "    sum_of_squares = 0\n   \
    \ for num in lst:\n        sum_of_squares += num * num\n    return round(sum_of_squares,\
    \ 0)\n\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\n\
    assert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert\
    \ sum_squares([-2.4,1,1]) == 6\n</cell>\n<text>\nExercise 3 - Write a Python function\
    \ that takes a list of strings and returns a list of only the words that are at\
    \ least 3 characters long.\n\n</text>\n<cell>", "    sum = 0\n    for x in lst:\n\
    \        sum += round(x*x, 2)\n    return sum\n</cell>\n<text>\n6. Sum all the\
    \ elements in a list by chunks of 2\nThe sum of the list can be calculated by:\n\
    \nsum((x for x in lst))\n\n\n</text>\n<cell>", "    return sum(list(map(lambda\
    \ x: round(x ** 2,0), lst)))\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    List comprehension\nList comprehension is a powerful, compact way to express nested\
    \ for loops.\nIn this example, the syntax is similar to what you'd use for a single\
    \ for loop.\nYou'll see it used often with for loops, but not often with map or\
    \ filter.\nList comprehensions follow the following syntax:\n\n[expression for\
    \ item in iterable if condition]\nThe expression will be applied to each item\
    \ in iterable and each item will be passed into the function.\nThe expression\
    \ will return a value if the condition is satisfied; otherwise, it will be discarded.\n\
    \n\n</text>\n<cell>\nlst = [1,2,3,4,5]\nlst2 = [i**2 for i in lst]\nprint(lst2)\n\
    </cell>\n<text>\nList comprehension vs map\n\n</text>\n<cell>\nlst = [1,2,3,4,5]\n\
    lst2 = list(map(lambda x: x**2, lst))\nprint(lst2)\n</cell>\n<text>\nList comprehension\
    \ is useful if you want to do multiple things with each item of a list:\n\n\n\
    </text>\n<cell>\nlst = [1,2,3,4,5]\nlst2 = [i**2 for i in lst if i > 3]\nprint(lst2)\n\
    </cell>\n<text>\nList comprehension can be useful for many things, not just for\
    \ map\n\n\n</text>\n<cell>\nlst2 = [i**2 for i in lst if i < 10]\nprint(lst2)\n\
    </cell>\n<text>\nList comprehension can be used with for loops as well\n\n\n</text>\n\
    <cell>\nlst2 = []\nfor elem in lst:\n    lst2.append(elem**2)\nprint(lst2)\n</cell>\n\
    <text>\nExercise: find out the square of every item in the list\nUse the list\
    \ comprehension above and create a new list that contains the square of each item\
    \ in the original list.\n\n\n</text>\n<cell>\nlst = [1,2,3,4,5]\n</cell>\n<cell>",
  "    \n    return sum(map(lambda x: int(math.ceil(math.sqrt(x))*x), lst))\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,4,9])\n</cell>\n\
    <cell>\nsum_squares([1,3,5,7])\n</cell>\n<cell>\nsum_squares([1.4,4.2,0])\n</cell>\n\
    <cell>\nsum_squares([-2.4,1,1])\n</cell>\n<text>\nProblem 7: List comprehension\n\
    Write a list comprehension expression that computes the following for each element\
    \ in lst:\n\nCreate a variable called result that is equal to 0 if the element\
    \ is odd and to 1 if it's even.\nMultiply each element by 2 if the element is\
    \ odd.\nAdd 5 to each element if the element is odd.\nIf the element is not odd,\
    \ add it to the result variable.\n\nHint: The result variable is assigned the\
    \ value of the last statement in the list comprehension.\n\n\n</text>\n<cell>\n\
    lst = [1, 2, 3, 4, 5, 6]\n</cell>\n<cell>\nlst2 = [1, 2, 3, 4, 5, 6]\n</cell>\n\
    <cell>\n[x if x % 2 == 0 else x + 5 for x in lst]\n</cell>\n<cell>\n[x if x %\
    \ 2 == 0 else x * 2 + 5 for x in lst]\n</cell>\n<cell>\n[x if x % 2 == 0 else\
    \ x + 5 for x in  lst2]\n</cell>\n<cell>\n[x if x % 2 == 0 else x * 2 + 5 for\
    \ x in lst2]\n</cell>\n<cell>\n[x + 5 if x % 2 == 0 else x * 2 + 5 for x in lst2]\n\
    </cell>\n<cell>\n[x + 5 if x % 2 == 0 else x * 2 + 5 for x in lst2]\n</cell>\n\
    <cell>\n[x + 5 if x % 2 == 0 else x * 2 + 5 for x in lst2]\n</cell>\n<text>\n\
    Problem 8: List comprehension example 2\nRewrite the following list comprehension\
    \ as a for loop.\n\n\n</text>\n<cell>\nlst = [1,2,3,4,5,6]\n</cell>\n<cell>\n\
    [x if x % 2 == 0 else x + 5 for x in lst]\n</cell>\n<cell>\nfor element in lst:\n\
    \    \n    element = element if element % 2 == 0 else element + 5\n</cell>\n<cell>\n\
    [x if x % 2 == 0 else x + 5 for x in lst]\n</cell>\n<cell>\nlst = [1,2,3,4,5,6]\n\
    </cell>\n<cell>", "    \n    for x in range(len(lst)):\n        lst[x]=round(lst[x],0)\n\
    \    return sum(lst*lst)\n\n\"\"\"", "    return sum(map(lambda x: int(round(x*x))**2,\
    \ lst))\n", "    ### TODO: Write your implementation here.\n    return sum(map(int,\
    \ map(round, lst)))\n\n", "    \n    lst = [round(i,3) for i in lst]\n    \n \
    \   return sum(map(lambda x: x ** 2, lst))\n\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([-1.4,4,3]))\nprint(sum_squares([1,-5,-6]))\n\
    print(sum_squares([2.3,-1.8,3,2]))\n\n</cell>\n<text>\nSum of even numbers in\
    \ an interval\n\n</text>\n<cell>", "    if len(lst)==0:\n        return 0\n  \
    \  return sum([round(number**2,int(math.ceil(math.log10(number))) for number in\
    \ lst])\n\nlst = [int(input()) for i in range(5)]\nresult = sum_squares(lst)\n\
    print(result)\n</cell>\n<cell>\nimport math\n<|endofmask|>\nfrom typing import\
    \ List\n", "    lst = [round(v, 6) for v in lst]\n    return sum(v**2 for v in\
    \ lst)\n", "    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    pass\n", "    # sum the square of the elements in the list\
    \ \n    sum_of_squares=0 \n    for x in lst:\n        sum_of_squares += x*x\n\
    \    \n    return int(sum_of_squares)\n", "    \n    lst2 = []\n    for x in lst:\n\
    \        lst2.append(int(math.ceil(x)))\n    \n    return sum(list(map(lambda\
    \ a: a**2, lst2)))\n            \nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\n\
    print(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n\
    </cell>\n<text>\nQuestion 9: Sum of Squared Numbers\nWrite a function that returns\
    \ the sum of squared numbers in a given list.\n\n\n</text>\n<cell>", "    sum_so_far\
    \ = 0\n    for elem in lst:\n        sum_so_far = sum_so_far + elem * elem\n\n\
    \    return round(sum_so_far)\n", "    lst = [round(float(i)) for i in lst]\n\
    \    ans = sum(list(map(lambda x: x ** 2, lst)))\n    return ans if ans == 0 else\
    \ ans\n", "    \n    # implement here the solution\n    return 0\n    ", "   \
    \ \n    #Your code goes here\n    squares = map(lambda x: int(round(x*x, 0)),\
    \ lst)\n    return sum(squares)\n", "    \n    \n    \n    ", "    \n    sum_squares\
    \ = 0\n    for i in lst:\n        \n        sum_squares += i**2\n    \n    return\
    \ int(round(sum_squares))\n", "    sum = 0\n    for i in lst:\n        sum +=\
    \ int(i) ** 2\n    return sum\n\n", "    if lst == []:\n        return 0\n   \
    \ return sum( [ round(num**2,1) for num in lst ] )\n", "    # your code here\n\
    \    lst = [round(el,3) for el in lst]\n    \n    return sum([el*el for el in\
    \ lst])\n\n", "    lst_temp = []\n    \n    for x in lst:\n        lst_temp.append(round(x))\n\
    \    \n    sum_val = sum(lst_temp)\n    \n    return sum_val\n", "    total =\
    \ 0\n    for x in lst:\n        total += round(math.ceil(math.sqrt(x))) + round(math.floor(math.sqrt(x)))\n\
    \    return total\n\n", "    if len(lst)==0:\n        return 0\n    return sum(map(lambda\
    \ x: round(x*x), lst))\n\n</cell>\n<cell>", "    return sum([int(round(i**.5)*5)\
    \ for i in lst])\n", "    lst2 = []\n    for i in lst:\n        lst2.append(int(math.ceil(i)))\n\
    \    \n    \n    return sum(map(lambda x: x**2, lst2))\n\"\"\"\nprint(sum_squares([2,4,6]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([-1.4,4.2,0]))\n\
    print(sum_squares([-2,1,1]))\n\"\"\"\n</cell>\n<text>\nWrite a Python program\
    \ to convert a binary number to its decimal equivalent and vice versa.\nFor example,\
    \ bin(7) is '0b11', and hex(7) gives output as '0x11', where x represents the\
    \ binary equivalent of the given number. \nIf the given binary number has no equivalent\
    \ decimal, output should be 0.\n\n\n</text>\n<cell>\nimport math", "    \n   \
    \ sum_squares = 0\n    for i in lst:\n        sum_squares += i*i\n    \n    return\
    \ int(sum_squares)\n            \n    \n\"\"\"", "    sum = 0\n    for i in lst:\n\
    \        sum += int(math.ceil(i))*int(math.ceil(i))\n    return sum\n", "    \n\
    \    return sum(map(lambda x: round(x*x), lst))\n", "    total = 0\n    for x\
    \ in lst:\n        total += int(x*x)\n    return total\n", "    return sum([x**2\
    \ for x in lst]).__round__(int(math.ceil(len(lst)))) # type: ignore\n", "    lst\
    \ = round(lst,int(ceil(len(lst)))).astype(int)\n    \n    return sum(map((lambda\
    \ x:x**2),lst))\n", "    lst_square = []\n    for i in lst:\n        lst_square.append(i*i)\n\
    \n    return int(round(sum(lst_square),0))\n</cell>\n<cell>\nlst = [1,3,5,7]\n\
    print(sum_squares(lst))\n</cell>\n<cell>\nlst = [1.4,4.2,0]\nprint(sum_squares(lst))\n\
    </cell>\n<cell>\nlst = [-2.4,1,1]\nprint(sum_squares(lst))\n</cell>\n<text>\n\
    Challenge Question 7\nWrite a function that takes a string and reverses it using\
    \ only loops.\n\nFor instance, \n'Hello, World' -> 'dlroW olleH'\n\n\n</text>\n\
    <cell>", "    \n    \"\"\"\n    1.\u6C42\u6574\u6570\u5E73\u65B9\uFF0C\u5C0F\u6570\
    \u90E8\u5206\u7528\u534A\u89D2\u7684\u65B9\u62EC\u53F7\u8868\u793A\uFF0C\u5C0F\
    \u6570\u90E8\u5206\u7528\u5C0F\u6570\u70B9\u8868\u793A\uFF0C\u6C42\u5C0F\u6570\
    \u5E73\u65B9\uFF0C\n    \u5C0F\u6570\u90E8\u5206\u7528\u5C0F\u6570\u70B9\u8868\
    \u793A\uFF0C\u6C42\u5C0F\u6570\u5E73\u65B9\uFF0C\n    \u5C0F\u6570\u90E8\u5206\
    \u7528\u5C0F\u6570\u70B9\u8868\u793A\n    2.\u7528\u9012\u5F52\u6C42\u548C\n \
    \   \"\"\"\n    \n    \n    \n    return sum([int(x*x) for x in lst])\n    \n\
    \    \n    ", "    \n    # your code here\n", "    lst = sorted(lst, reverse =\
    \ True)\n    square_sum = 0\n    count = 0\n    while count < len(lst):\n    \
    \    if count == 0:\n            square_sum += lst[0]\n        else:\n       \
    \     square_sum += (lst[count-1] * lst[count])\n        count += 1\n    return\
    \ int(square_sum)\n\n", "    \n    # Method 1: Using list comprehension\n    \n\
    \    # Method 2: Using map and lambda\n    \n    # Method 3: Using for loop\n\
    \    \n    # Method 4: Using numpy\n    \n    # Method 5: Using pandas\n    \n\
    \    # Method 6: Using sum and list comprehension\n    \n    # Method 7: Using\
    \ sum, lambda and map\n    \n    # Method 8: Using for, sum, lambda and map\n\
    \    \n    # Method 9: Using numpy\n    \n    # Method 10: Using pandas\n    \n\
    \    # Method 11: Using sum, lambda and map with loop\n    \n    # Method 12:\
    \ Using sum, lambda and map\n    \n    # Method 13: Using sum, lambda and map\
    \ with loop\n    \n    # Method 14: Using sum, lambda and map with loop\n    \n\
    \    # Method 15: Using sum, lambda and map with loop\n    \n    # Method 16:\
    \ Using sum, lambda and map\n    \n    # Method 17: Using sum, lambda and map\
    \ with loop\n    \n    # Method 18: Using sum, lambda and map with loop\n    \n\
    \    # Method 19: Using sum, lambda and map with loop\n    \n    # Method 20:\
    \ Using sum, lambda and map with loop\n    \n    # Method 21: Using sum, lambda\
    \ and map with loop\n    \n    # Method 22: Using sum, lambda and map with loop\n\
    \    \n    # Method 23: Using sum, lambda and map\n    \n    # Method 24: Using\
    \ sum, lambda and map with loop\n    \n    # Method 25: Using sum, lambda and\
    \ map with loop\n    \n    # Method 26: Using sum, lambda and map with loop\n\
    \    \n    # Method 27: Using sum, lambda and map with loop\n    \n    # Method\
    \ 28: Using sum, lambda and map with loop\n    \n    # Method 29: Using sum, lambda\
    \ and map\n    \n    # Method 30: Using sum, lambda and map with loop\n    \n\
    \    # Method 31: Using sum, lambda and map with loop\n    \n    # Method 32:\
    \ Using sum, lambda and map with loop\n    \n    # Method 33: Using sum, lambda\
    \ and map with loop\n    \n    # Method 34: Using sum, lambda and map with loop\n\
    \    \n    # Method 35: Using sum, lambda and map\n    \n    # Method 36: Using\
    \ sum, lambda and map with loop\n    \n    # Method 37: Using sum, lambda and\
    \ map with loop\n    \n    # Method 38: Using sum, lambda and map with ", "  \
    \  lst2 = list(map(lambda x: int(math.ceil(x)), lst))\n    sum_of_squares = 0\n\
    \    for x in lst2:\n        sum_of_squares += x**2\n    return sum_of_squares\n\
    </cell>\n<cell>", "    num = 0\n    for i in lst:\n        num += int(round(i))\n\
    \    return num\n", "    \n\n    n = len(lst)\n    \n    if n < 2:\n        return\
    \ 0\n    \n    for index,elem in enumerate(lst):\n        lst[index] = round(elem,int(math.ceil(math.log10(n))))\n\
    \    \n    \n    sum = 0\n    \n    for index, elem in enumerate(lst):\n     \
    \   sum += elem * elem\n    return sum\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    lst = [int(round(el,\
    \ 2)) for el in lst]\n    return sum(map(lambda x: x*x, lst))\n", "    \n    if\
    \ lst:\n        sum_sq = 0\n        for x in lst:\n            sum_sq += int(x\
    \ ** 2)\n        return int(sum_sq)\n    else:\n        return 0\n</cell>\n<cell>\n\
    sum_squares(lst)\n</cell>\n<cell>", "    sum_squares = sum(map( lambda x: int(\
    \ ceil( (x*x) )**(1/2) ), lst))\n    return sum_squares\n</cell>\n<cell>\nprint(sum_squares([1,2,3]))\n\
    print(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\n\
    print(sum_squares([-2.4,1,1]))\n</cell>\n<text>\nList Comprehension\nList comprehension\
    \ is a very powerful tool to make list. It can make our list with other operations\
    \ too.\n\n\n</text>\n<cell>\nlst = [x for x in lst1, lst2, lst3]\n</cell>\n<text>\n\
    In above example, we have used list comprehension and have created a new list\
    \ from list1 and lst2 and lst3 by x is automatically created for us.\n\n\n</text>\n\
    <text>\nSimple Sum Function\nIn Python, we can easily make sum for a list of numbers.\
    \ For example we can make a sum of the list of numbers by using sum() function.\n\
    \n\n</text>\n<cell>", "    sum_so_far = sum(map(lambda x: int(np.ceil(x))*x, lst))\n\
    \    \n    return sum_so_far\n\nlst = [1,2,3]\nprint(sum_squares(lst))\n</cell>\n\
    <cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
