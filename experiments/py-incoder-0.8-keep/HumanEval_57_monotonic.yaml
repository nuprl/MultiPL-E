name: HumanEval_57_monotonic
language: py
prompt: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\
  \"Return True is list elements are monotonically increasing or decreasing.\n   \
  \ >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n  \
  \  False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
  \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
  \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0])\
  \ == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
  \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
  \    check(monotonic)\n\ntest_check()\n"
completions: ["    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n \
    \       return l[0] < l[0]\n    else:\n        last = l[-1]\n        l0 = l[0]\n\
    \        return ((l0 < last) is not (last < l0))\n", "    try:\n        iter(l)\n\
    \    except TypeError:\n        return False\n    else:\n        i = iter(l).__next__\n\
    \        li = [iter(l).__next__ for _ in range(1000)]\n        for _ in li:\n\
    \            if i >= li:\n                return False\n            elif i() >=\
    \ li[0]:\n                return True\n            i -= 1\n        return False\n",
  "    a = l[0]\n    b = l[-1]\n    if b < a:\n        return False\n    for i in\
    \ l[1:-1]:\n        if b < i:\n            return False\n        if b >= i:\n\
    \            return True\n    return False\n", "    if len(l) < 2:\n        return\
    \ True\n    else:\n        if l[-1] < l[-2]:\n            return not (\n     \
    \           monotonic(l[0:len(l)-1])\n                or\n                monotonic(l[1:len(l)])\n\
    \            )\n        else:\n            return not (\n                monotonic(l[0:len(l)-1])\n\
    \                or\n                monotonic(l[1:len(l)])\n            )\n",
  "    if len(l) < 2:\n        return False\n    it = 1\n    i = 2\n    while i <\
    \ len(l):\n        if l[i] - l[i-1] > 1:\n            i += 1\n        elif l[i]\
    \ - l[i-1] < 0:\n            i -= 1\n        it += 1\n    return it == len(l)\n\
    \n", "    return all(i < j for i, j in zip(l, l[1:]))\n", "    if len(l) < 2:\n\
    \        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n",
  "    if len(l) < 2:\n        return True\n    return all(l[i] <= l[i + 1] for i\
    \ in xrange(len(l) - 1))\n", "    if len(l) < 2:\n        return True\n    first\
    \ = l[0]\n    for i in l:\n        if i > first:\n            return False\n \
    \   return True\n", "    # From http://stackoverflow.com/a/24575092\n    if len(l)\
    \ != len(set(l)):\n        return False\n    else:\n        return all(x < y for\
    \ x, y in zip(l, l[1:]))\n", "    if len(l)==0:\n        return True\n    if l[0]\
    \ <= l[-1]:\n        l, r = l[:1], l[1:]\n    else:\n        l, r = l[1:], l[:1]\n\
    \    return not (r<=l)\n", "    i = len(l)-1\n    j = 0\n    while i > 0:\n  \
    \      ti = l[i]\n        tj = l[j]\n        if ti < tj:\n            return True\n\
    \        if ti > tj:\n            return False\n        if ti == tj:\n       \
    \     l[j] += 1\n        i -= 1\n        j += 1\n    return True\n", "    l =\
    \ list(sorted(l))\n    if len(l) < 2:\n        return True\n    if l[1] > l[0]:\n\
    \        return True\n    return False\n", "    if len(l) != len(set(l)):\n  \
    \      return True\n    diffs = [max(i) - min(i) for i in l]\n    return all([d\
    \ <= 0 for d in diffs])\n\n", "    l = sorted(l)\n    return all(i > j for i,\
    \ j in zip(l, l[1:]))\n", "    if len(l) < 2:\n        return True\n    if not\
    \ l:\n        return False\n    last = l[0]\n    return all(a >= last for a in\
    \ l[1:])\n", "    if len(l) <= 1:\n        return False\n    return l[-1] - l[0]\
    \ == l[1] - l[-2]\n\n", "    if len(l) < 2:\n        return True\n    else:\n\
    \        return all(i < j or j == 0 for i in l for j in l if i < j)\n", "    #\
    \ Code inspired by http://www.oreilly.com/opencourse/os-course-online.aspx\n \
    \   if len(l) == 0:\n        return True\n    if l[0] == l[-1]:\n        return\
    \ True\n    if l[0] == l[1]:\n        return False\n\n    # Sort the elements.\
    \ If the last element is not the smallest or the second\n    # last is not the\
    \ largest, those are the two extreme elements.\n    last_extreme = min(l)\n  \
    \  second_last_extreme = sorted(l, key=lambda e: e, reverse=True)[0]\n    return\
    \ last_extreme <= second_last_extreme\n", "    if len(l) < 2:\n        return\
    \ True\n    else:\n        current = l[0]\n        for elem in l[1:]:\n      \
    \      if elem < current:\n                return False\n            elif elem\
    \ > current:\n                return True\n            current = elem\n      \
    \  return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
