name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    if n % 2 == 0:\n        return n\n    i = 2\n    while i <= n //\
    \ 2:\n        while n % i == 0:\n            n //= i\n            if n == 1:\n\
    \                return i\n        i += 1\n    return n\n\n", "    if n % 2 ==\
    \ 0:\n        return 2\n\n    factor = 2\n    while n % factor == 0:\n       \
    \ factor += 1\n\n    return factor\n\n", "    while n % 2 == 0:\n        n = n\
    \ // 2\n\n    if n > 1:\n        p =  prime_factors(n)\n        p = next(p)\n\
    \        if p == 1:\n            return n\n\n    return 1\n\n", "    if n == 1:\n\
    \        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n    \
    \    return n\n    if n % 3 == 0:\n        return 3 * n + 1\n    i = 5\n    l\
    \ = 5\n    while i * i <= n:\n        if n % i == 0 and n % (i + 2) == 0:\n  \
    \          i += 2\n            l = i\n        else:\n            i += 1\n    if\
    \ n % (i + 2) == 0:\n        i += 2\n    return i\n\n", "    return maxprimes.is_prime(n)\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            return i\n    return n\n\n", "    def largest_factors(n:\
    \ int) -> List[int]:\n        if n <= 2:\n            return [1]\n        factors:\
    \ Set[int] = set()\n        while n % 2 == 0:\n            factors.add(2)\n  \
    \          n /= 2\n        while n % 3 == 0:\n            factors.add(3)\n   \
    \         n /= 3\n        while n % 5 == 0:\n            factors.add(5)\n    \
    \        n /= 5\n        while n % 7 == 0:\n            factors.add(7)\n     \
    \       n /= 7\n        while n % 11 == 0:\n            factors.add(11)\n    \
    \        n /= 11\n        while n % 13 == 0:\n            factors.add(13)\n  \
    \          n /= 13\n        return factors\n    factors = largest_factors(n)\n\
    \    return factors[-1]\n", "    prime_candidate = 1\n    while not is_prime(prime_candidate):\n\
    \        prime_candidate *= prime_candidate\n    return prime_candidate\n\n",
  "    while n % 2 == 0:\n        n = n // 2\n    while n % 3 == 0:\n        n = n\
    \ // 3\n    if n <= 1:\n        return n\n    i = 5\n    prime_factors = []\n\
    \    while i * i <= n:\n        if n % i == 0:\n            prime_factors.append(i)\n\
    \            n = n // i\n        i += 1\n    prime_factors.append(n)\n    return\
    \ max(prime_factors)\n\n", "    candidate = 2\n    factor = 2\n    while factor\
    \ <= n:\n        if n % factor == 0:\n            candidate += 1\n        while\
    \ n % factor == 0:\n            n //= factor\n        factor += 1\n    return\
    \ candidate\n\n", "    n = int(n)\n    i = 2\n    while i <= math.sqrt(n):\n \
    \       if n % i == 0:\n            i += 1\n        else:\n            break\n\
    \    if i == 2:\n        return n\n    if i == 3:\n        return n+1\n    if\
    \ i == int(math.sqrt(n)):\n        return n-1\n    return i\n", "    if n < 2:\n\
    \        raise ValueError(\"n must be > 1 -- did you mean 2**n for n \u2264 2?\"\
    )\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            i +=\
    \ 1\n        else:\n            break\n    return i\n\n", "    i, r = 0, n - 1\n\
    \    while i * i < n:\n        if n % i == 0:\n            i += 1\n        else:\n\
    \            n //= i\n            i += 1\n    return i\n\n", "    # http://stackoverflow.com/questions/103598/which-is-the-best-algorithm-to-find-the-highest-prime-factor-of-a-very-large\n\
    \    candidates = prime_factors(n)\n    return max(x[0] for x in candidates)\n",
  "    if n < 2:\n        raise ValueError(\"n > 2\")\n    i = 2\n    while i * i\
    \ <= n:\n        if n % i:\n            i += 1\n        else:\n            n //=\
    \ i\n    return n\n\n", "    assert n > 1\n    # check for known primes\n    if\
    \ n in {2, 3, 5, 7}:\n        return n\n    # check factors up to sqrt(n)\n  \
    \  if n % 4 == 0:\n        return 2\n    sqrt_n = int(math.sqrt(n))\n    for factor\
    \ in range(3, sqrt_n + 1, 2):\n        if n % factor == 0:\n            return\
    \ factor\n\n    return n\n\n", "    return next((i for i in range(2, n) if n %\
    \ i == 0), n)\n\n", "    factors = []\n    i = 2\n    while i * i <= n:\n    \
    \    if n % i:\n            i += 1\n        else:\n            n //= i\n     \
    \       factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return\
    \ max(factors)\n\n", "    for _ in range(2, n):\n        if n % _ == 0:\n    \
    \        return n\n        n //= _\n    return n\n\n", "    return max(n, 1, n\
    \ // 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
